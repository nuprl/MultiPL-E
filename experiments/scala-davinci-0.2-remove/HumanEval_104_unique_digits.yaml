name: HumanEval_104_unique_digits
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Given a list of positive integers x. return a sorted list of all \n    //\
  \ elements that hasn't any even digit.\n    // Note: Returned list should be sorted\
  \ in increasing order.\n    // For example:\n    def uniqueDigits(x : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(uniqueDigits((List[Long](15l.toLong,\
  \ 33l.toLong, 1422l.toLong, 1l.toLong))).equals((List[Long](1l.toLong, 15l.toLong,\
  \ 33l.toLong))));\n    assert(uniqueDigits((List[Long](152l.toLong, 323l.toLong,\
  \ 1422l.toLong, 10l.toLong))).equals((List[Long]())));\n    assert(uniqueDigits((List[Long](12345l.toLong,\
  \ 2033l.toLong, 111l.toLong, 151l.toLong))).equals((List[Long](111l.toLong, 151l.toLong))));\n\
  \    assert(uniqueDigits((List[Long](135l.toLong, 103l.toLong, 31l.toLong))).equals((List[Long](31l.toLong,\
  \ 135l.toLong))));\n    }\n\n}\n"
completions: ["        var result = List[Long]()\n        for (i <- x) {\n       \
    \     if (i.toString.map(_.asDigit).forall(_ % 2 == 1)) result = i :: result\n\
    \        }\n        result.sorted", "        def isUnique(n : Long) : Boolean\
    \ = {\n            var s = n.toString\n            for (i <- 0 until s.length)\
    \ {\n                if (s(i) % 2 == 0) return false\n            }\n        \
    \    return true\n        }\n        return x.filter(isUnique).sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ (c - '0') % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var digits = new HashSet[Int]\n\
    \            var m = n\n            while (m > 0) {\n                val d = (m\
    \ % 10).toInt\n                if (digits.contains(d)) return false\n        \
    \        digits += d\n                m /= 10\n            }\n            true\n\
    \        }\n        x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1)) result\
    \ = i :: result\n        }\n        result.sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            var hasEven = false\n            var temp\
    \ = i\n            while (temp > 0) {\n                if (temp % 2 == 0) {\n\
    \                    hasEven = true\n                    temp = 0\n          \
    \      }\n                else temp /= 10\n            }\n            if (!hasEven)\
    \ result = result :+ i\n        }\n        result.sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var digits = new HashSet[Long]\n        \
    \    var m = n\n            while (m > 0) {\n                if (digits.contains(m\
    \ % 10)) return false\n                digits += m % 10\n                m /=\
    \ 10\n            }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(x => x.toString.forall(x => x.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            def isUniqueHelper(n\
    \ : Long, digits : Set[Long]) : Boolean = {\n                if (n == 0) true\n\
    \                else if (digits.contains(n % 10)) false\n                else\
    \ isUniqueHelper(n / 10, digits + (n % 10))\n            }\n            isUniqueHelper(n,\
    \ Set())\n        }\n        x.filter(isUnique).sorted", "        var result =\
    \ new ListBuffer[Long]\n        for (i <- x) {\n            var hasEven = false\n\
    \            var n = i\n            while (n > 0) {\n                if (n % 2\
    \ == 0) {\n                    hasEven = true\n                    n = 0\n   \
    \             }\n                else n /= 10\n            }\n            if (!hasEven)\
    \ result += i\n        }\n        result.toList.sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var digits = new HashSet[Long]\n        \
    \    var m = n\n            while (m > 0) {\n                val d = m % 10\n\
    \                if (d % 2 == 0) return false\n                digits += d\n \
    \               m /= 10\n            }\n            true\n        }\n        x.filter(isUnique).sorted",
  "        val s = x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted\n\
    \        s", "        var result = List[Long]()\n        for (i <- x) {\n    \
    \        if (i.toString.forall(c => c.asDigit % 2 == 1)) result = i :: result\n\
    \        }\n        result.sorted", "        var result = List[Long]()\n     \
    \   for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1))\
    \ result = i :: result\n        }\n        result.sorted", "        var result\
    \ = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  '        x.filter(x => x.toString.forall(x => x.asDigit % 2 == 1)).sorted', '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result += i\n        }\n        result.toList.sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      val m = new HashMap[Long, Long]()\n        for (i <- x) {\n           \
    \ var j = i\n            var flag = true\n            while (j > 0) {\n      \
    \          if (j % 2 == 0) {\n                    flag = false\n             \
    \       break\n                }\n                j /= 10\n            }\n   \
    \         if (flag) m(i) = i\n        }\n        m.values.toList.sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', '        x.filter(x => x.toString.forall(c => c.asDigit
    % 2 == 1)).sorted', "        var result = new ListBuffer[Long]\n        for (i\
    \ <- x) {\n            var hasEven = false\n            var j = i\n          \
    \  while (j > 0) {\n                if (j % 2 == 0) {\n                    hasEven\
    \ = true\n                    j = 0\n                }\n                j /= 10\n\
    \            }\n            if (!hasEven) result += i\n        }\n        result.toList.sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        var result =\
    \ List[Long]()\n        for (i <- x) {\n            var isUnique = true\n    \
    \        var j = i\n            while (j > 0) {\n                if (j % 2 ==\
    \ 0) {\n                    isUnique = false\n                    j = 0\n    \
    \            }\n                j /= 10\n            }\n            if (isUnique)\
    \ result = result :+ i\n        }\n        result.sorted", "        var result\
    \ = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => (c - '0') % 2 == 1)) result = i :: result\n        }\n        result.sortWith(_\
    \ < _)", "        def isUnique(n : Long) : Boolean = {\n            def isUnique(n\
    \ : Long, d : Int) : Boolean = {\n                if (n == 0) true\n         \
    \       else if (n % 10 == d) false\n                else isUnique(n / 10, d)\n\
    \            }\n            def isUnique(n : Long, d : Int, c : Int) : Boolean\
    \ = {\n                if (d == 10) true\n                else if (isUnique(n,\
    \ d)) isUnique(n, d + 1, c + 1)\n                else false\n            }\n \
    \           isUnique(n, 0, 0)\n        }\n        def uniqueDigits(x : List[Long],\
    \ res : List[Long]) : List[Long] = {\n            if (x.isEmpty) res\n       \
    \     else if (isUnique(x.head)) uniqueDigits(x.tail, x.head :: res)\n       \
    \     else uniqueDigits(x.tail, res)\n        }\n        uniqueDigits(x, Nil).sorted",
  "        val result = new ListBuffer[Long]\n        for (i <- x) {\n           \
    \ var hasEven = false\n            var n = i\n            while (n > 0) {\n  \
    \              if (n % 2 == 0) {\n                    hasEven = true\n       \
    \             n = 0\n                }\n                else n /= 10\n       \
    \     }\n            if (!hasEven) result += i\n        }\n        result.toList.sorted",
  "        val s = new HashSet[Long]\n        for (i <- x) {\n            var t =\
    \ i\n            var hasEven = false\n            while (t > 0) {\n          \
    \      if (t % 2 == 0) {\n                    hasEven = true\n               \
    \     t = 0\n                }\n                else t /= 10\n            }\n\
    \            if (!hasEven) s += i\n        }\n        s.toList.sorted", '        x.filter(x
    => x.toString.forall(x => x.asDigit % 2 == 1)).sorted', "        var result =\
    \ new ListBuffer[Long]\n        for (i <- x) {\n            var hasEven = false\n\
    \            var n = i\n            while (n > 0) {\n                if (n % 2\
    \ == 0) {\n                    hasEven = true\n                    n = 0\n   \
    \             }\n                else n /= 10\n            }\n            if (!hasEven)\
    \ result += i\n        }\n        result.toList.sorted", '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        var result = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2\
    \ == 1)) result = result :+ i\n        }\n        result.sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        def isEven(n : Long) : Boolean = {\n            var m = n\n           \
    \ while (m > 0) {\n                if (m % 2 == 0) return true\n             \
    \   m /= 10\n            }\n            return false\n        }\n        x.filter(!isEven(_)).sorted",
  '        x.filter(n => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(x
    => x.toString.forall(c => c.asDigit % 2 == 1)).sorted', '        x.filter(x =>
    x.toString.forall(x => x.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        val s = new HashSet[Long]\n        for\
    \ (i <- x) {\n            var t = i\n            var flag = true\n           \
    \ while (t > 0) {\n                if (t % 2 == 0) {\n                    flag\
    \ = false\n                    t = 0\n                }\n                else\
    \ t /= 10\n            }\n            if (flag) s += i\n        }\n        s.toList.sorted",
  "        x.filter(n => n.toString.forall(c => (c - '0') % 2 == 1)).sorted", "  \
    \      val map = new HashMap[Long, Boolean]\n        for (i <- x) {\n        \
    \    var j = i\n            var hasEven = false\n            while (j > 0) {\n\
    \                if (j % 2 == 0) {\n                    hasEven = true\n     \
    \               j = 0\n                }\n                j /= 10\n          \
    \  }\n            if (!hasEven) map(i) = true\n        }\n        map.keys.toList.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(_.isDigit))\
    \ {\n                if (i.toString.forall(_.asDigit % 2 != 0)) {\n          \
    \          result = result :+ i\n                }\n            }\n        }\n\
    \        result.sorted", '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', "        var result = List[Long]()\n        for (i <- x) {\n\
    \            if (i.toString.forall(c => c.asDigit % 2 == 1)) result = result :+\
    \ i\n        }\n        result.sorted", "        var result = List[Long]()\n \
    \       for (i <- x) {\n            if (i.toString.forall(c => (c - '0') % 2 ==\
    \ 1)) result = result :+ i\n        }\n        result.sorted", "        x.filter(y\
    \ => y.toString.forall(z => (z - '0') % 2 == 1)).sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var s = n.toString\n            for (i <-\
    \ 0 until s.length) {\n                if (s(i) % 2 == 0) return false\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        val s = new HashSet[Long]\n        for (i <- x) {\n            var t =\
    \ i\n            var hasEven = false\n            while (t > 0) {\n          \
    \      if (t % 2 == 0) {\n                    hasEven = true\n               \
    \     t = 0\n                }\n                else t /= 10\n            }\n\
    \            if (!hasEven) s += i\n        }\n        s.toList.sorted", "    \
    \    def isUnique(n : Long) : Boolean = {\n            val s = n.toString\n  \
    \          for (i <- 0 until s.length) {\n                if (s(i) % 2 == 0) return\
    \ false\n            }\n            true\n        }\n        x.filter(isUnique).sorted",
  "        val s = x.filter(x => x.toString.forall(c => c.asDigit % 2 == 1)).sorted\n\
    \        s", '        x.filter(i => i.toString.forall(c => c.asDigit % 2 == 1)).sorted',
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var digits = new HashSet[Long]\n\
    \            var m = n\n            while (m > 0) {\n                if (digits.contains(m\
    \ % 10)) return false\n                digits += m % 10\n                m /=\
    \ 10\n            }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        var result = new ListBuffer[Long]()\n        for (i <- x) {\n         \
    \   if (i.toString.exists(_.isDigit) && !i.toString.exists(_.isDigit && _.asDigit\
    \ % 2 == 0)) result += i\n        }\n        result.toList.sorted", "        def\
    \ isUnique(n : Long) : Boolean = {\n            val s = n.toString\n         \
    \   s.forall(c => c % 2 == 1)\n        }\n        x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var digits = new HashSet[Long]\n\
    \            var m = n\n            while (m > 0) {\n                val d = m\
    \ % 10\n                if (d % 2 == 0) return false\n                digits +=\
    \ d\n                m /= 10\n            }\n            true\n        }\n   \
    \     x.filter(isUnique).sorted", "        var result = List[Long]()\n       \
    \ for (i <- x) {\n            var isUnique = true\n            var num = i\n \
    \           while (num > 0) {\n                if (num % 2 == 0) {\n         \
    \           isUnique = false\n                    num = 0\n                }\n\
    \                else num /= 10\n            }\n            if (isUnique) result\
    \ = i :: result\n        }\n        result.sortWith(_ < _)", "        val result\
    \ = new ListBuffer[Long]\n        for (i <- x) {\n            var hasEven = false\n\
    \            var num = i\n            while (num > 0) {\n                if (num\
    \ % 2 == 0) {\n                    hasEven = true\n                    num = 0\n\
    \                }\n                else num /= 10\n            }\n          \
    \  if (!hasEven) result += i\n        }\n        result.toList.sorted", "    \
    \    var result = List[Long]()\n        for (i <- x) {\n            var hasEven\
    \ = false\n            var n = i\n            while (n > 0) {\n              \
    \  if (n % 2 == 0) {\n                    hasEven = true\n                   \
    \ n = 0\n                }\n                n /= 10\n            }\n         \
    \   if (!hasEven) result = i :: result\n        }\n        result.sorted", " \
    \       var result = List[Long]()\n        for (i <- x) {\n            var hasEven\
    \ = false\n            var temp = i\n            while (temp > 0) {\n        \
    \        if (temp % 2 == 0) {\n                    hasEven = true\n          \
    \          temp = 0\n                }\n                else temp /= 10\n    \
    \        }\n            if (!hasEven) result = result :+ i\n        }\n      \
    \  result.sorted", "        var result = new ListBuffer[Long]\n        for (i\
    \ <- x) {\n            if (i.toString.forall(c => (c - '0') % 2 == 1)) result\
    \ += i\n        }\n        result.toList.sorted", '        x.filter(x => x.toString.forall(x
    => x.asDigit % 2 == 1)).sorted', '        x.filter(n => n.toString.forall(c =>
    c.asDigit % 2 == 1)).sorted', "        val result = new ListBuffer[Long]\n   \
    \     for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 ==\
    \ 1)) result += i\n        }\n        result.toList.sorted", "        var result\
    \ = new ListBuffer[Long]\n        for (i <- x) {\n            var hasEven = false\n\
    \            var num = i\n            while (num > 0) {\n                if (num\
    \ % 2 == 0) {\n                    hasEven = true\n                    num = 0\n\
    \                }\n                else num /= 10\n            }\n          \
    \  if (!hasEven) result += i\n        }\n        result.toList.sorted", '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        val result = new ListBuffer[Long]\n        for (i <- x) {\n           \
    \ if (i.toString.forall(c => (c - '0') % 2 == 1)) result += i\n        }\n   \
    \     result.toList.sorted", "        val set = new HashSet[Long]\n        for\
    \ (i <- x) {\n            var j = i\n            var hasEven = false\n       \
    \     while (j > 0) {\n                if (j % 2 == 0) {\n                   \
    \ hasEven = true\n                    j = 0\n                }\n             \
    \   j /= 10\n            }\n            if (!hasEven) set += i\n        }\n  \
    \      set.toList.sorted", "        val set = new HashSet[Long]\n        for (i\
    \ <- x) {\n            var temp = i\n            var flag = true\n           \
    \ while (temp > 0) {\n                if (temp % 2 == 0) {\n                 \
    \   flag = false\n                    temp = 0\n                }\n          \
    \      else temp /= 10\n            }\n            if (flag) set += i\n      \
    \  }\n        set.toList.sorted", "        var result = new ListBuffer[Long]\n\
    \        for (i <- x) {\n            var hasEven = false\n            var n =\
    \ i\n            while (n > 0) {\n                if (n % 2 == 0) {\n        \
    \            hasEven = true\n                    n = 0\n                }\n  \
    \              else n /= 10\n            }\n            if (!hasEven) result +=\
    \ i\n        }\n        result.toList.sorted", "        val s = new HashSet[Long]\n\
    \        for (i <- x) {\n            var t = i\n            var hasEven = false\n\
    \            while (t > 0) {\n                if (t % 2 == 0) {\n            \
    \        hasEven = true\n                    t = 0\n                }\n      \
    \          else t /= 10\n            }\n            if (!hasEven) s += i\n   \
    \     }\n        s.toList.sorted", "        val map = new HashMap[Long, Boolean]\n\
    \        for (i <- x) {\n            var temp = i\n            var hasEven = false\n\
    \            while (temp > 0) {\n                if (temp % 2 == 0) {\n      \
    \              hasEven = true\n                    temp = 0\n                }\n\
    \                else temp /= 10\n            }\n            if (!hasEven) map(i)\
    \ = true\n        }\n        map.keys.toList.sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        val set = new HashSet[Long]\n        for (i <- x) {\n            var temp\
    \ = i\n            var flag = true\n            while (temp > 0) {\n         \
    \       if (temp % 2 == 0) {\n                    flag = false\n             \
    \       temp = 0\n                }\n                else temp /= 10\n       \
    \     }\n            if (flag) set += i\n        }\n        set.toList.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        val s = new HashSet[Long]\n        for (i <- x) {\n            var t =\
    \ i\n            var hasEven = false\n            while (t > 0) {\n          \
    \      if (t % 2 == 0) {\n                    hasEven = true\n               \
    \     t = 0\n                }\n                else t /= 10\n            }\n\
    \            if (!hasEven) s += i\n        }\n        s.toList.sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def isUnique(n\
    \ : Long) : Boolean = {\n            var m = n\n            while (m > 0) {\n\
    \                if (m % 2 == 0) return false\n                m /= 10\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        val s = new HashSet[Long]\n        for (i <- x) {\n            var n =\
    \ i\n            var hasEven = false\n            while (n > 0) {\n          \
    \      if (n % 2 == 0) {\n                    hasEven = true\n               \
    \     n = 0\n                }\n                n /= 10\n            }\n     \
    \       if (!hasEven) s += i\n        }\n        s.toList.sorted", '        x.filter(n
    => n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        def isUnique(x\
    \ : Long) : Boolean = {\n            val s = x.toString\n            for (i <-\
    \ 0 until s.length) {\n                if (s(i) % 2 == 0) return false\n     \
    \       }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  "        val digits = x.flatMap(i => i.toString.map(_.asDigit))\n        val evenDigits\
    \ = digits.filter(_ % 2 == 0)\n        val evenDigitsSet = evenDigits.toSet\n\
    \        x.filter(i => i.toString.map(_.asDigit).toSet.intersect(evenDigitsSet).isEmpty).sorted",
  "        val result = new ListBuffer[Long]\n        for (i <- x) {\n           \
    \ var hasEven = false\n            var n = i\n            while (n > 0) {\n  \
    \              if (n % 2 == 0) {\n                    hasEven = true\n       \
    \             n = 0\n                }\n                else n /= 10\n       \
    \     }\n            if (!hasEven) result += i\n        }\n        result.toList.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            var s = n.toString\n\
    \            for (i <- 0 until s.length) {\n                if (s(i) % 2 == 0)\
    \ return false\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", "        val s = new HashSet[Long]\n        for\
    \ (i <- x) {\n            var n = i\n            var hasEven = false\n       \
    \     while (n > 0) {\n                if (n % 2 == 0) {\n                   \
    \ hasEven = true\n                    n = 0\n                }\n             \
    \   n /= 10\n            }\n            if (!hasEven) s += i\n        }\n    \
    \    s.toList.sorted", "        var result = List[Long]()\n        for (i <- x)\
    \ {\n            if (i.toString.forall(c => c.asDigit % 2 == 1)) result = result\
    \ :+ i\n        }\n        result.sorted", '        x.filter(i => i.toString.forall(j
    => j.asDigit % 2 == 1)).sorted', "        val result = new ListBuffer[Long]\n\
    \        for (i <- x) {\n            if (i.toString.forall(c => (c - '0') % 2\
    \ == 1)) result += i\n        }\n        result.toList.sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            def helper(n : Long) : Boolean = {\n    \
    \            if (n == 0) true\n                else if (n % 2 == 0) false\n  \
    \              else helper(n / 10)\n            }\n            helper(n)\n   \
    \     }\n        x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        val result = new ListBuffer[Long]\n\
    \        for (i <- x) {\n            var flag = true\n            for (j <- i.toString)\
    \ {\n                if (j.toString.toInt % 2 == 0) {\n                    flag\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (flag) result += i\n        }\n        result.toList.sorted", "   \
    \     def isUnique(n : Long) : Boolean = {\n            var digits = new HashSet[Long]\n\
    \            var m = n\n            while (m > 0) {\n                val d = m\
    \ % 10\n                if (d % 2 == 0) return false\n                digits +=\
    \ d\n                m /= 10\n            }\n            return true\n       \
    \ }\n        return x.filter(isUnique).sorted", "        def isUnique(n : Long)\
    \ : Boolean = {\n            var digits = Set[Long]()\n            var x = n\n\
    \            while (x > 0) {\n                val d = x % 10\n               \
    \ if (digits.contains(d)) return false\n                digits += d\n        \
    \        x /= 10\n            }\n            true\n        }\n        x.filter(isUnique).sorted",
  "        val result = new ListBuffer[Long]\n        for (i <- x) {\n           \
    \ if (i.toString.forall(c => c.asDigit % 2 == 1)) result += i\n        }\n   \
    \     result.toList.sorted", '        x.filter(x => x.toString.forall(x => x.asDigit
    % 2 == 1)).sorted', "        var result = List[Long]()\n        for (i <- x) {\n\
    \            if (i.toString.forall(c => c.asDigit % 2 == 1)) result = result :+\
    \ i\n        }\n        result.sorted", "        var set = Set[Long]()\n     \
    \   for (i <- x) {\n            var flag = true\n            var temp = i\n  \
    \          while (temp > 0) {\n                if (temp % 2 == 0) {\n        \
    \            flag = false\n                    break\n                }\n    \
    \            temp /= 10\n            }\n            if (flag) set += i\n     \
    \   }\n        set.toList.sorted", "        val s = x.filter(y => y.toString.forall(z\
    \ => z.asDigit % 2 == 1)).sorted\n        s", "        val result = new ListBuffer[Long]\n\
    \        for (i <- x) {\n            var isUnique = true\n            for (j <-\
    \ i.toString) {\n                if (j % 2 == 0) {\n                    isUnique\
    \ = false\n                    break\n                }\n            }\n     \
    \       if (isUnique) result += i\n        }\n        result.toList.sorted", " \
    \       val result = new ListBuffer[Long]\n        for (i <- x) {\n          \
    \  var hasEven = false\n            var n = i\n            while (n > 0) {\n \
    \               if (n % 2 == 0) {\n                    hasEven = true\n      \
    \              n = 0\n                }\n                else n /= 10\n      \
    \      }\n            if (!hasEven) result += i\n        }\n        result.toList.sorted",
  "        var result = new ListBuffer[Long]()\n        for (i <- x) {\n         \
    \   var hasEven = false\n            var temp = i\n            while (temp > 0)\
    \ {\n                if (temp % 2 == 0) {\n                    hasEven = true\n\
    \                    temp = 0\n                }\n                else temp /=\
    \ 10\n            }\n            if (!hasEven) result += i\n        }\n      \
    \  result.toList.sorted", "        var result = new ListBuffer[Long]()\n     \
    \   for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1))\
    \ result += i\n        }\n        result.toList.sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var digits = new HashSet[Long]\n        \
    \    var m = n\n            while (m > 0) {\n                val d = m % 10\n\
    \                if (d % 2 == 0) return false\n                digits += d\n \
    \               m /= 10\n            }\n            true\n        }\n        x.filter(isUnique).sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var s = n.toString\n\
    \            for (i <- 0 until s.length) {\n                if (s(i) % 2 == 0)\
    \ return false\n            }\n            return true\n        }\n        return\
    \ x.filter(isUnique).sorted", "        val result = new ListBuffer[Long]\n   \
    \     for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 ==\
    \ 1)) result += i\n        }\n        result.toList.sorted", "        val set\
    \ = new HashSet[Long]\n        for (i <- x) {\n            var flag = true\n \
    \           var n = i\n            while (n > 0) {\n                if (n % 2\
    \ == 0) {\n                    flag = false\n                    n = 0\n     \
    \           }\n                n /= 10\n            }\n            if (flag) set\
    \ += i\n        }\n        set.toList.sorted", "        x.filter(x => x.toString.forall(c\
    \ => (c - '0') % 2 == 1)).sorted", '        x.filter(n => n.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', "        var result = List[Long]()\n        for\
    \ (i <- x) {\n            var hasEven = false\n            var n = i\n       \
    \     while (n > 0) {\n                if (n % 2 == 0) {\n                   \
    \ hasEven = true\n                    n = 0\n                }\n             \
    \   n /= 10\n            }\n            if (!hasEven) result = result :+ i\n \
    \       }\n        result.sorted", "        var result = List[Long]()\n      \
    \  for (i <- x) {\n            if (i.toString.forall(c => (c - '0') % 2 == 1))\
    \ result = result :+ i\n        }\n        result.sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  '        x.filter(x => x.toString.forall(x => x.asDigit % 2 == 1)).sorted', "  \
    \      var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => (c - '0') % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        var result = new ListBuffer[Long]\n        for (i <- x) {\n           \
    \ var isUnique = true\n            var temp = i\n            while (temp > 0)\
    \ {\n                if (temp % 2 == 0) {\n                    isUnique = false\n\
    \                    temp = 0\n                }\n                else temp /=\
    \ 10\n            }\n            if (isUnique) result += i\n        }\n      \
    \  result.toList.sorted", "        val result = new ListBuffer[Long]\n       \
    \ for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1))\
    \ result += i\n        }\n        result.toList.sorted", "        var result =\
    \ List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c =>\
    \ c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        val s = x.filter(n => n.toString.forall(c => (c - '0') % 2 == 1)).sorted\n\
    \        s", "        val s = x.filter(n => n.toString.forall(c => c.asDigit %\
    \ 2 == 1)).sorted\n        s", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var j = i\n\
    \            while (j > 0) {\n                if (j % 2 == 0) {\n            \
    \        flag = false\n                    j = 0\n                }\n        \
    \        j /= 10\n            }\n            if (flag) result += i\n        }\n\
    \        result.toList.sorted", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- x) {\n            var even = false\n            var n = i\n\
    \            while (n > 0) {\n                if (n % 2 == 0) {\n            \
    \        even = true\n                    n = 0\n                }\n         \
    \       n /= 10\n            }\n            if (!even) result += i\n        }\n\
    \        result.toList.sorted", "        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1)) result\
    \ = result :+ i\n        }\n        result.sorted", "        val evenDigits =\
    \ Set(0, 2, 4, 6, 8)\n        val result = new ListBuffer[Long]\n        for (i\
    \ <- x) {\n            if (i.toString.forall(c => !evenDigits.contains(c.asDigit)))\
    \ result += i\n        }\n        result.toList.sorted", "        var result =\
    \ new ListBuffer[Long]()\n        for (i <- x) {\n            var hasEven = false\n\
    \            var n = i\n            while (n > 0) {\n                if (n % 2\
    \ == 0) {\n                    hasEven = true\n                    n = 0\n   \
    \             }\n                else n /= 10\n            }\n            if (!hasEven)\
    \ result += i\n        }\n        result.toList.sorted", '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        def isUnique(n :\
    \ Long) : Boolean = {\n            var s = n.toString\n            for (i <- 0\
    \ until s.length) {\n                if (s(i) % 2 == 0) return false\n       \
    \     }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(y => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            val s = n.toString\n\
    \            val set = Set[Char]()\n            for (c <- s) {\n             \
    \   if (set.contains(c)) return false\n                set += c\n            }\n\
    \            true\n        }\n        x.filter(isUnique).sorted", "        var\
    \ result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = i :: result\n        }\n        result.sorted",
  "        val s = new HashSet[Long]\n        for (i <- x) {\n            var n =\
    \ i\n            var hasEven = false\n            while (n > 0) {\n          \
    \      if (n % 2 == 0) {\n                    hasEven = true\n               \
    \     n = 0\n                }\n                else n /= 10\n            }\n\
    \            if (!hasEven) s += i\n        }\n        s.toList.sorted", "    \
    \    def isUnique(n : Long) : Boolean = {\n            var s = n.toString\n  \
    \          var m = Map[Char, Boolean]()\n            for (i <- 0 until s.length)\
    \ {\n                if (m.contains(s(i))) return false\n                m(s(i))\
    \ = true\n            }\n            return true\n        }\n        return x.filter(isUnique).sorted",
  '        x.filter(x => x.toString.forall(x => x.asDigit % 2 == 1)).sorted', "  \
    \      def isUnique(n : Long) : Boolean = {\n            def isUnique(n : Long,\
    \ m : Long) : Boolean = {\n                if (n == 0) true\n                else\
    \ if (m % 10 == n % 10) false\n                else isUnique(n / 10, m)\n    \
    \        }\n            def isUnique(n : Long) : Boolean = {\n               \
    \ if (n == 0) true\n                else isUnique(n / 10, n / 10)\n          \
    \  }\n            isUnique(n)\n        }\n        x.filter(isUnique).sorted",
  "        var result = List[Long]()\n        for (i <- x) {\n            var isUnique\
    \ = true\n            var j = i\n            while (j > 0) {\n               \
    \ if (j % 2 == 0) {\n                    isUnique = false\n                  \
    \  j = 0\n                }\n                j /= 10\n            }\n        \
    \    if (isUnique) result = result :+ i\n        }\n        result.sorted", " \
    \       x.filter(i => i.toString.forall(c => (c - '0') % 2 == 1)).sorted", '        x.filter(y
    => y.toString.forall(z => z.asDigit % 2 == 1)).sorted', '        x.filter(y =>
    y.toString.forall(z => z.asDigit % 2 == 1)).sorted', "        val result = new\
    \ ListBuffer[Long]\n        for (i <- x) {\n            if (i.toString.forall(_.isDigit))\
    \ {\n                result += i\n            }\n        }\n        result.toList.sorted",
  "        var result = new ListBuffer[Long]\n        for (i <- x) {\n           \
    \ if (i.toString.forall(c => c.asDigit % 2 == 1)) result += i\n        }\n   \
    \     result.toList.sorted", "        var result = List[Long]()\n        for (i\
    \ <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1)) result\
    \ = i :: result\n        }\n        result.sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        var result = List[Long]()\n        for\
    \ (i <- x) {\n            var flag = true\n            var j = i\n           \
    \ while (j > 0) {\n                if (j % 2 == 0) {\n                    flag\
    \ = false\n                    j = 0\n                }\n                j /=\
    \ 10\n            }\n            if (flag) result = result :+ i\n        }\n \
    \       result.sorted", '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', "        var result = List[Long]()\n        for (i <- x) {\n\
    \            if (i.toString.forall(c => c.asDigit % 2 == 1)) result = i :: result\n\
    \        }\n        result.sorted", "        var result = List[Long]()\n     \
    \   for (i <- x) {\n            if (i.toString.forall(_.asDigit % 2 == 1)) result\
    \ = i :: result\n        }\n        result.sorted", "        var result = new\
    \ ListBuffer[Long]\n        for (i <- x) {\n            var hasEven = false\n\
    \            var n = i\n            while (n > 0) {\n                if (n % 2\
    \ == 0) {\n                    hasEven = true\n                    n = 0\n   \
    \             }\n                else n /= 10\n            }\n            if (!hasEven)\
    \ result += i\n        }\n        result.toList.sorted", '        x.filter(n =>
    n.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        val s = new HashSet[Long]\n\
    \        for (i <- x) {\n            var t = i\n            var hasEven = false\n\
    \            while (t > 0) {\n                if (t % 2 == 0) {\n            \
    \        hasEven = true\n                    t = 0\n                }\n      \
    \          else t /= 10\n            }\n            if (!hasEven) s += i\n   \
    \     }\n        s.toList.sorted", "        // x.filter(y => y.toString.forall(z\
    \ => z.toString.toInt % 2 == 1)).sorted\n        x.filter(y => y.toString.forall(z\
    \ => z.toString.toInt % 2 == 1)).sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            var hasEven = false\n            var temp\
    \ = i\n            while (temp > 0) {\n                if (temp % 2 == 0) {\n\
    \                    hasEven = true\n                    temp = 0\n          \
    \      }\n                else temp /= 10\n            }\n            if (!hasEven)\
    \ result = result :+ i\n        }\n        result.sorted", "        def isUnique(n\
    \ : Long) : Boolean = {\n            var s = n.toString\n            var set =\
    \ Set[Char]()\n            for (i <- 0 until s.length) {\n                if (set.contains(s(i)))\
    \ return false\n                set += s(i)\n            }\n            return\
    \ true\n        }\n        return x.filter(isUnique).sorted", "        val s =\
    \ new HashSet[Long]\n        for (i <- x) {\n            var t = i\n         \
    \   var hasEven = false\n            while (t > 0) {\n                if (t %\
    \ 2 == 0) {\n                    hasEven = true\n                    t = 0\n \
    \               }\n                else t /= 10\n            }\n            if\
    \ (!hasEven) s += i\n        }\n        s.toList.sorted", "        val result\
    \ = new ListBuffer[Long]\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => (c - '0') % 2 == 1)) result += i\n        }\n        result.toList.sorted",
  "        val set = new HashSet[Long]\n        for (i <- x) {\n            var j\
    \ = i\n            var hasEven = false\n            while (j > 0) {\n        \
    \        if (j % 2 == 0) {\n                    hasEven = true\n             \
    \       j = 0\n                }\n                j /= 10\n            }\n   \
    \         if (!hasEven) set += i\n        }\n        set.toList.sorted", "   \
    \     var result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        def isUnique(n : Long) : Boolean = {\n            var digits = new HashSet[Int]\n\
    \            var m = n\n            while (m > 0) {\n                val d = (m\
    \ % 10).toInt\n                if (digits.contains(d)) return false\n        \
    \        digits += d\n                m /= 10\n            }\n            true\n\
    \        }\n        x.filter(isUnique).sorted", '        x.filter(y => y.toString.forall(z
    => z.asDigit % 2 == 1)).sorted', "        var res = new ListBuffer[Long]()\n \
    \       for (i <- x) {\n            var flag = true\n            var j = i\n \
    \           while (j > 0) {\n                if (j % 2 == 0) {\n             \
    \       flag = false\n                    j = 0\n                }\n         \
    \       j /= 10\n            }\n            if (flag) res += i\n        }\n  \
    \      res.toList.sorted", "        // Fill up this function body\n        //\
    \ You can add another function as well, if required\n        x.filter(y => y.toString.forall(z\
    \ => z.asDigit % 2 == 1)).sorted", "        val set = new HashSet[Long]\n    \
    \    for (i <- x) {\n            var j = i\n            var hasEven = false\n\
    \            while (j > 0) {\n                if (j % 2 == 0) {\n            \
    \        hasEven = true\n                    j = 0\n                }\n      \
    \          j /= 10\n            }\n            if (!hasEven) set += i\n      \
    \  }\n        set.toList.sorted", "        val result = new ListBuffer[Long]\n\
    \        for (i <- x) {\n            var hasEven = false\n            var n =\
    \ i\n            while (n > 0) {\n                if (n % 2 == 0) {\n        \
    \            hasEven = true\n                    n = 0\n                }\n  \
    \              else n /= 10\n            }\n            if (!hasEven) result +=\
    \ i\n        }\n        result.toList.sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.forall(c => (c - '0') % 2\
    \ == 1)) result = i :: result\n        }\n        result.sorted", "        var\
    \ result = List[Long]()\n        for (i <- x) {\n            if (i.toString.forall(c\
    \ => c.asDigit % 2 == 1)) result = result :+ i\n        }\n        result.sorted",
  "        def isUnique(n : Long) : Boolean = {\n            def isUnique(n : Long,\
    \ digits : Set[Long]) : Boolean = {\n                if (n == 0) true\n      \
    \          else if (digits.contains(n % 10)) false\n                else isUnique(n\
    \ / 10, digits + (n % 10))\n            }\n            isUnique(n, Set())\n  \
    \      }\n        x.filter(isUnique).sorted", "        var result = new ListBuffer[Long]()\n\
    \        for (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2\
    \ == 1)) result += i\n        }\n        result.toList.sorted", '        x.filter(i
    => i.toString.forall(c => c.asDigit % 2 == 1)).sorted', "        val result =\
    \ new ListBuffer[Long]\n        for (i <- x) {\n            var isUnique = true\n\
    \            for (j <- i.toString) {\n                if (j.toString.toInt % 2\
    \ == 0) {\n                    isUnique = false\n                    break\n \
    \               }\n            }\n            if (isUnique) result += i\n    \
    \    }\n        result.toList.sorted", "        var result = List[Long]()\n  \
    \      for (i <- x) {\n            var hasEven = false\n            var j = i\n\
    \            while (j > 0) {\n                if ((j % 10) % 2 == 0) {\n     \
    \               hasEven = true\n                    j = 0\n                }\n\
    \                j /= 10\n            }\n            if (!hasEven) result = result\
    \ :+ i\n        }\n        result.sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var num = i\n\
    \            while (num > 0) {\n                if (num % 2 == 0) {\n        \
    \            flag = false\n                    num = 0\n                }\n  \
    \              else num /= 10\n            }\n            if (flag) result = result\
    \ :+ i\n        }\n        result.sorted", "        val s = x.filter(y => y.toString.forall(z\
    \ => z.asDigit % 2 == 1)).sorted\n        s", '        x.filter(i => i.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', '        x.filter(y => y.toString.forall(z =>
    z.asDigit % 2 == 1)).sorted', "        var result = new ListBuffer[Long]()\n \
    \       for (i <- x) {\n            var hasEven = false\n            var n = i\n\
    \            while (n > 0) {\n                if (n % 2 == 0) {\n            \
    \        hasEven = true\n                    n = 0\n                }\n      \
    \          else n /= 10\n            }\n            if (!hasEven) result += i\n\
    \        }\n        result.toList.sorted", "        var result = List[Long]()\n\
    \        for (i <- x) {\n            var flag = true\n            var j = i\n\
    \            while (j > 0) {\n                if (j % 2 == 0) {\n            \
    \        flag = false\n                    j = 0\n                }\n        \
    \        j /= 10\n            }\n            if (flag) result = result :+ i\n\
    \        }\n        result.sorted", '        x.filter(i => i.toString.forall(c
    => c.asDigit % 2 == 1)).sorted', "        var result = List[Long]()\n        for\
    \ (i <- x) {\n            if (i.toString.forall(c => c.asDigit % 2 == 1)) result\
    \ = result :+ i\n        }\n        result.sorted", "        def isUnique(n :\
    \ Long) : Boolean = {\n            def helper(n : Long) : Boolean = {\n      \
    \          if (n == 0) true\n                else if (n % 2 == 0) false\n    \
    \            else helper(n / 10)\n            }\n            helper(n)\n     \
    \   }\n        x.filter(isUnique).sorted", '        x.filter(x => x.toString.forall(x
    => x.asDigit % 2 == 1)).sorted', "        val digits = x.map(i => i.toString.toList.map(c\
    \ => c.asDigit))\n        val evenDigits = digits.map(i => i.filter(c => c % 2\
    \ == 0))\n        val hasEvenDigits = evenDigits.map(i => i.length > 0)\n    \
    \    val result = x.zip(hasEvenDigits).filter(i => !i._2).map(i => i._1)\n   \
    \     result.sorted", '        x.filter(y => y.toString.forall(z => z.asDigit
    % 2 == 1)).sorted', '        x.filter(n => n.toString.forall(c => c.asDigit %
    2 == 1)).sorted', "        val xs = x.filter(y => y.toString.forall(z => z.asDigit\
    \ % 2 == 1))\n        xs.sorted", '        x.filter(n => n.toString.forall(c =>
    c.asDigit % 2 == 1)).sorted', "        val s = new HashSet[Long]\n        for\
    \ (i <- x) {\n            var t = i\n            var hasEven = false\n       \
    \     while (t > 0) {\n                if (t % 2 == 0) {\n                   \
    \ hasEven = true\n                    t = 0\n                }\n             \
    \   else t /= 10\n            }\n            if (!hasEven) s += i\n        }\n\
    \        s.toList.sorted"]
stop_tokens:
- "\n    }\n"
