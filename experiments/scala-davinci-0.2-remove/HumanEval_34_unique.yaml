name: HumanEval_34_unique
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return sorted unique elements in a list\n    def unique(l : List[Long])\
  \ : List[Long] = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(unique((List[Long](5l.toLong,\
  \ 3l.toLong, 5l.toLong, 2l.toLong, 3l.toLong, 3l.toLong, 9l.toLong, 0l.toLong, 123l.toLong))).equals((List[Long](0l.toLong,\
  \ 2l.toLong, 3l.toLong, 5l.toLong, 9l.toLong, 123l.toLong))));\n    }\n\n}\n"
completions: ['        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct',
  '        l.toSet.toList.sorted', '        l.sortWith(_ < _).distinct', "       \
    \ var s = Set[Long]()\n        for (x <- l) s += x\n        s.toList.sorted",
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.foldLeft(List[Long]())((a, b) => if (a.contains(b)) a else a :+ b).sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.foldLeft(List[Long]())((r, c) => if (r.contains(c)) r else r :+ c).sorted',
  '        l.sortWith(_ < _).distinct', '        l.toSet.toList.sorted', "       \
    \ val m = new HashMap[Long, Boolean]\n        for (x <- l) m(x) = true\n     \
    \   m.keys.toList.sortWith(_ < _)", '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted', '        l.toSet.toList.sorted',
  "        val s = l.sortWith(_ < _)\n        s.foldLeft(List[Long]())((r, c) => if\
    \ (r.isEmpty || r.last != c) r ::: List(c) else r)", '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).foldLeft(List[Long]()) { (r, e) =>
    if (r.isEmpty || r.last != e) r ::: List(e) else r }', '        l.distinct.sorted',
  '        l.distinct.sorted', "        l.sortWith(_ < _).foldLeft(List[Long]()) {\n\
    \            (r, c) => if (r.isEmpty || r.last != c) r ::: List(c) else r\n  \
    \      }", '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', "        var m = Map[Long, Boolean]()\n        for (i <- l) {\n\
    \            m(i) = true\n        }\n        m.keys.toList.sorted", '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', "        l.sortWith(_ < _).foldLeft(List[Long]()) {\
    \ (r, e) =>\n            if (r.isEmpty || r.last != e) r :+ e\n            else\
    \ r\n        }", '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_<_).foldLeft(List[Long]())((r,c) => if (r.isEmpty
    || r.last != c) r ::: List(c) else r)', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.toSet.toList.sorted', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.toSet.toList.sorted', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.distinct.sorted', '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).foldLeft(List[Long]())
    {(r, c) => if (r.isEmpty || r.last != c) r ::: List(c) else r}', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.sortWith(_ < _).distinct', "        l.sortWith(_ < _).foldLeft(List[Long]())\
    \ { (a, b) =>\n            if (a.length == 0 || a.last != b) a :+ b\n        \
    \    else a\n        }", '        l.sortWith(_ < _).distinct', "        l.sortWith(_\
    \ < _).foldLeft(List[Long]()) { (x, y) =>\n            if (x.isEmpty || x.last\
    \ != y) x ::: List(y)\n            else x\n        }", '        l.sortWith(_ <
    _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', "        var s = Set[Long]()\n\
    \        for (x <- l) s += x\n        s.toList.sorted", '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', "        var m = Map[Long, Boolean]()\n  \
    \      for (x <- l) {\n            m(x) = true\n        }\n        m.keys.toList.sorted",
  '        l.sortWith(_ < _).distinct', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.foldLeft(List[Long]())((a, b) => if (a.contains(b)) a
    else a :+ b).sorted', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.distinct.sorted', '        l.distinct.sorted', '        l.distinct.sorted',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', "        var s = Set[Long]()\n        for (x <- l)\
    \ s += x\n        s.toList.sorted", '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_ <
    _).distinct', '        l.sortWith(_ < _).distinct', "        l.sortWith(_ < _).foldLeft(List[Long]())\
    \ { (r, e) =>\n            if (r.isEmpty || r.last != e) r :+ e\n            else\
    \ r\n        }", '        l.distinct.sorted', '        l.distinct.sorted', '        l.sortWith(_
    < _).distinct', '        l.toSet.toList.sorted', '        l.sortWith(_ < _).distinct',
  '        l.sortWith(_ < _).distinct', '        l.sortWith(_ < _).distinct', '        l.sortWith(_
    < _).distinct', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted',
  '        l.distinct.sorted', '        l.sortWith(_ < _).distinct', '        l.distinct.sorted']
stop_tokens:
- "\n    }\n"
