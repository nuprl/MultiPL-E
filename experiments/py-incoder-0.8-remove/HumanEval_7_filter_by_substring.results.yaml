language: py
name: HumanEval_7_filter_by_substring
results:
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered_strings\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    filtered_strings.append(string)\n    return filtered_strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [i for\
    \ i in strings if substring in i]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ element: substring in element, strings))\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n</cell>\n<text>\nNow let's\
    \ call filter_by_substring() on our list of strings and print the results.\n\n\
    \n</text>\n<cell>\nstrings = ['Hello World', 'Hello, World', 'Hello', 'Hi', 'How\
    \ are you?']\nprint(filter_by_substring(strings, 'Hello'))\n</cell>\n<text>\n\
    What happens if we filter out strings that do not contain the substring 'Hello'?\n\
    \n\n</text>\n<cell>\nprint(filter_by_substring(strings, 'Hello'))\n</cell>\n<text>\n\
    What if we filter out strings that don't contain the substring 'Hello'?\n\n\n\
    </text>\n<cell>\nprint(filter_by_substring(strings, 'Hello'))\n</cell>\n<text>\n\
    What if we filter out strings that are empty strings?\n\n\n</text>\n<cell>\nprint(filter_by_substring(strings,\
    \ 'Hello'))\n</cell>\n<text>\nWhat if we filter out strings that contain 'Hello'\
    \ but not 'Hello'?\n\n\n</text>\n<cell>\nprint(filter_by_substring(strings, 'Hello'))\n\
    </cell>\n<text>\nLet's now write our own function that removes vowels from a string.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdgt88m6k.py\", line 10\n    Now let's call filter_by_substring()\
    \ on our list of strings and print the results.\n           ^\nSyntaxError: unterminated\
    \ string literal (detected at line 10)\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [i for\
    \ i in strings if substring in i]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    substring = substring.lower()\n\
    \    return [string for string in strings if substring in string.lower()]\n\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [i for\
    \ i in strings if substring in i]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered_strings\
    \ = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI edited\
    \ the question to clarify that I'm looking for a solution that doesn't require\
    \ that all the lists be of the same size.\n<|/ c |>\n<| a |>\nThe way I see it,\
    \ a solution using reduce and lambda functions would look like this:\n<code>\n\
    from functools import reduce\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_0hde0vg.py\", line 7\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [str for\
    \ str in strings if substring in str]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n</cell>\n<text>\nNow let's use the filter_by_substring\
    \ function to filter the training data frame so we only have lines that contain\
    \ the word 'the'. The output should look like the following:\n\n            text\
    \ id  text_tokens\n    14  the  the dog saw the cat and mooded the dog\n    15\
    \  the  the cat looked at the mouse\n\n\n</text>\n<cell>\ntrain_df = df[df.text_tokens.apply(lambda\
    \ x: filter_by_substring(x, \"the\"))]\ntrain_df.head()\n</cell>\n<text>\nLet's\
    \ make another example to show that our filtering actually worked:\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert\
    \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
    \ 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt',\
    \ 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n\
    \    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5tbvzvai.py\", line 9\n    Now let's use the filter_by_substring\
    \ function to filter the training data frame so we only have lines that contain\
    \ the word 'the'. The output should look like the following:\n               \
    \                                                                            \
    \                                          ^\nSyntaxError: unterminated string\
    \ literal (detected at line 9)\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n</cell>\n<cell>\nprint(filter_by_substring(['apple',\
    \ 'apples', 'banana', 'pear', 'grape'], substring='apple'))\n</cell>\n<text>\n\
    The filter_by_substring function above filters the input list of strings using\
    \ a given substring as a criteria.\n\nThe function filter_list takes a function\
    \ which determines whether to keep an element of the list, a string in this case,\
    \ and a list as its arguments.\n\n\n</text>\n<cell>\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbobn48ff.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ string: substring in string, strings))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpz28138fc.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n</code>\n<|/ a |>\n<| c |>\n\
    I like the answer using lambda functions. The only problem I see with this solution\
    \ is that it is not very readable, and that it is hard to understand what is happening.\
    \ I think it is better to use a filter with a lambda function which also has documentation\
    \ on what is being filtered by, rather than just commenting out what is being\
    \ filtered.\n<|/ c |>\n<| a dscore=5 tags=python,list |>\nPython 3\nIf you want\
    \ a list comprehension for python 3 it is quite simple:\n<code>\nls = ['dog','cat','snake','dog']\n\
    filtered = [x for x in ls if 'dog' in x]\nprint(filtered)\n</code>\n<|/ a |>\n\
    <| a dscore=5 |>\nIf you want to keep only strings that match the given string\
    \ using filter\n<code>\na=['apple','banana','pineapple','grapefruit','orange']\n\
    b=['apple','banana','grapefruit','orange']\nc=['apple','banana','grapefruit','orange']\n\
    d=['apple','grapefruit','orange']\ne=['apple','orange']\nf=['apple','orange']\n\
    strings=['apple','banana','grapefruit','orange']\nf=[]\nfor s in strings:\n  \
    \  if s in a:\n        f.append(s)\nprint f\n</code>\n<|/ a tags=python,list |>\n\
    <| c |>\nIn Python 3.x you cannot append to `f` like that.\n<|/ c |>\n<| a tags=python,list\
    \ |>\nThe most efficient way to do this is to use any with the generator expression\
    \ which tests membership:\n<code>\n>>> x\n['apple', 'banana', 'pineapple', 'grapefruit',\
    \ 'orange']\n>>> [x for x in x if any(s in x for s in strings)]\n['apple', 'banana',\
    \ 'grapefruit', 'orange']\n</code>\n<|/ a dscore=5 |>\n<| c |>\nWhat if strings\
    \ is empty?\n<|/ c |>\n<| c |>\nThen it will return an empty list, which you can\
    \ check by `if filtered:`\n<|/ c |>\n<| c |>\n`[x for x in x if any(s in x for\
    \ s in strings)]` is so much more readable than `[s for s in strings if any(s\
    \ in x for s in strings)]`\n<|/ c |>\n<| c |>\nIt's even more readable if you\
    \ use set and `.intersection`, like `[x for x in x if set(strings).intersection(x)]`\n\
    <|/ c |>\n<| a \ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpundkl0ss.py\", line 39\n    In Python 3.x you cannot append\
    \ to `f` like that.\n               ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered = []\n\
    \    for s in strings:\n        if substring in s:\n            filtered.append(s)\n\
    \    return filtered\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n</cell>\n<cell>\nsubstring = \"azerty\"\n\
    print(filter_by_substring([\"one\", \"two\", \"three\", \"four\", \"five\"], substring))\n\
    \n</cell>\n<cell>\nsubstring = \"qwerty\"\nprint(filter_by_substring([\"one\"\
    , \"two\", \"three\", \"four\", \"five\"], substring))\n\n</cell>\n<cell>\nsubstring\
    \ = \"qwertyuiop\"\nprint(filter_by_substring([\"one\", \"two\", \"three\", \"\
    four\", \"five\"], substring))\n\n</cell>\n<cell>\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbrlwfhm4.py\", line 8\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\nprint(filter_by_substring([\"\
    abc\", \"abacus\", \"abaqus\", \"abax\", \"abaxyz\", \"abay\", \"abby\", \"abe\"\
    , \"abeam\", \"abean\", \"abed\", \"abeya\", \"abeys\", \"abhor\", \"abid\", \"\
    abide\", \"abides\", \"abidi\", \"abids\", \"abies\", \"abill\", \"abiosis\",\
    \ \"abject\", \"abjects\", \"abjunct\", \"abjuration\", \"abjure\", \"ablate\"\
    , \"abloom\", \"ablu\", \"abluent\", \"abmho\", \"abne\", \"abnegate\", \"abnormal\"\
    , \"abnorman\", \"aboard\", \"abode\", \"abohm\", \"aboil\", \"abolish\", \"abolishment\"\
    , \"abollah\", \"abomasum\", \"abomasus\", \"abomasuses\", \"abominable\", \"\
    abominably\", \"abominate\", \"abomination\", \"abominates\", \"abomination\"\
    , \"abominationism\", \"abominationist\", \"abominationistic\", \"abominationists\"\
    , \"abominatrix\", \"abominatrices\", \"abominatrizing\", \"abominatum\", \"abominatus\"\
    , \"aboral\", \"aborals\", \"aborning\", \"aborted\", \"abortion\", \"abortionist\"\
    , \"abortionists\", \"abortions\", \"abortiony\"], 'ab'))\n</code>\n<|/ a tags=string,python\
    \ |>\n<| a tags=string,python |>\n<code>\nimport re\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2qkazwlc.py\", line 9\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [str for\
    \ str in strings if substring in str]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbgpcjl3q.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<cell>\nfilter_by_substring(['bob',\
    \ 'joe', 'susan'], 'joe')\n</cell>\n<text>\nFilter by regular expressions\n\n\
    </text>\n<cell>\nimport re\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_6di5tnz.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjzrtsgvn.py\", line 8\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n</code>\n<|/ a tags=python |>\n\
    <| c |>\n`[string for string in strings if substring in string]` can be written\
    \ as `[string for string in strings if substring in string]`.\n<|/ c |>\n<| a\
    \ dscore=1 tags=python |>\n<code>\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplidgxldu.py\", line 7\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</code>\nUsage:\n<code>\nlst = list(\"abcdefg\"\
    )\nlst = filter_by_substring(lst, \"a\")\nprint(lst)\n</code>\nOutput:\n<code>\n\
    ['b', 'c', 'd', 'e', 'f', 'g']\n</code>\n<|/ a |>\n<| a |>\nMy solution uses generator\
    \ and itertools.product.\n<code>\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7vrar8ma.py\", line 7\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</code>\nUsage:\n<code>\nstrings = [\n    'hello\
    \ there',\n    'world hello world',\n    'world there',\n    'hello'\n]\nsubstring\
    \ = 'world'\nstrings_with_substring = filter_by_substring(strings, substring)\n\
    </code>\nOutput:\n<code>\nstrings_with_substring:\n['world hello world', 'world\
    \ there']\n</code>\n<|/ a tags=string,python,list |>\n<| c |>\nThis code works\
    \ perfectly, however, I think it would be better if it could be written as a function\
    \ since I am going to be using it many times in the program, hence why I want\
    \ to be able to reuse it. Thank you for your help!\n<|/ c |>\n<| c |>\nI updated\
    \ my answer. I think it's better to use a function because you can reuse the code\
    \ easily. I also added some parameters to show the usage of the function.\n<|/\
    \ c |>\n<| c |>\nAhh I see, I didn't think of that! Thank you!\n<|/ c |>\n<| a\
    \ tags=string,python,list dscore=0 |>\nA little cleaner\n<code>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgz73mxpt.py\", line 29\n    I updated my answer. I think\
    \ it's better to use a function because you can reuse the code easily. I also\
    \ added some parameters to show the usage of the function.\n                 \
    \                  ^\nSyntaxError: unterminated string literal (detected at line\
    \ 29)\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<text>\nApply filter_by_substring()\
    \ on your test data to verify that it produces the expected output:\n\n\n</text>\n\
    <cell>\ntests_results = filter_by_substring(tests_results_raw, substring = 'Blah')\n\
    assert tests_results == tests_results_raw\n</cell>\n<text>\nThe expected results\
    \ should look like:\n\n['Test1', 'Test2', 'Test3']\n\n</text>\n<text>\nQuestion\
    \ 4\nWrite a filter_by_substring() function which returns a list containing all\
    \ the strings which contain substring, but do not contain another substring. For\
    \ example, given the following list containing strings:\n\n[\"Blah\", \"Test1\"\
    , \"Test2\", \"Test3\", \"BlahBlahBlah\"]\n\n\nyour function should return the\
    \ list:\n\n[\"Blah\", \"Test2\", \"Test3\"]\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpq8ci0ax3.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbgpcjl3q.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ string: substring in string, strings))\n</code>\nOutput:\n<code>\nsubstring\
    \ = \"l\"\nstrings = [\"foo\", \"bar\", \"foobar\"]\nfilter_by_substring(strings,\
    \ substring)\ndef check(candidate):\n    assert candidate([], 'john') == []\n\
    \    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\
    \ == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\
    \ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvs7iu62k.py\", line 7\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<text>\nExercise 4.\nWrite a function\
    \ that takes a string and performs one of the following actions:\n\nIf the string\
    \ ends with \".jpg\" then append \"-crop\"\nIf the string ends with \".jpeg\"\
    \ then append \"-crop\"\nIf it contains \"cat\" then append \"-cat\"\nIf it contains\
    \ \"dog\" then append \"-dog\"\n\n\n</text>\n<cell>\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpro8y2_fe.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ x: substring in x, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered = []\n\
    \    for string in strings:\n        if substring in string:\n            filtered.append(string)\n\
    \    return filtered\n\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    \n    return\
    \ [s for s in strings if substring in s]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    \n    return\
    \ [i for i in strings if substring in i]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptikxrejk.py\", line 8\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [str for\
    \ str in strings if substring in str]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpreb0rj37.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=0 tags=python |>\nA good approach is to create a list of substrings\
    \ and then check for containment with that list:\n<code>\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkh4_v__h.py\", line 7\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<cell>\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbgpcjl3q.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n</cell>\n<text>\nAnd then call\
    \ these functions on our lists, to filter by our substring:\n\n\n</text>\n<cell>\n\
    strings_to_filter = [\"Hello\", \"World\", \"!\"]\nfiltered_strings = filter_by_substring(strings_to_filter,\
    \ \"!\")\n</cell>\n<cell>\nfiltered_strings\n</cell>\n<text>\nTo filter out elements\
    \ from lists based on their length in Python we can use the built-in function\
    \ filter:\n\n\n</text>\n<cell>\nlen(strings_to_filter) > 2\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmlk9nxeq.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ str: str.startswith(substring), strings))\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp70r1ewo9.py\", line\
    \ 17, in <module>\n    test_check()\n  File \"/tmp/tmp70r1ewo9.py\", line 15,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmp70r1ewo9.py\"\
    , line 11, in check\n    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe',\
    \ 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n</cell>\n<text>\nWe can now implement the function\
    \ filter_by_substring to filter the strings satisfying the following requirements:\n\
    \nThe substring must exist in every string\nThe substring must occur at least\
    \ once in every string\nThe substring must occur at most once in every string\n\
    The substring must occur exactly once in every string\n\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgurljj84.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [str for\
    \ str in strings if substring in str]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [i for\
    \ i in strings if substring in i]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n</cell>\n<text>\nLet's test our function\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([], 'john') ==\
    \ []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps2hqzex4.py\", line 10\n    Let's test our function\n\
    \       ^\nSyntaxError: unterminated string literal (detected at line 10)\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\nprint(filter_by_substring([\"\
    hello world\", \"hello world\", \"hello world again\"],\n                    \
    \        \"hello world\"))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: '[''hello world'', ''hello world'', ''hello world again'']

    '
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n</code>\n<|/ a tags=python,list\
    \ |>\n<| a tags=python,list |>\nHere's a non-regex way of doing it without importing\
    \ any modules. It only iterates over your list once, making use of set operations.\n\
    <code>\nlist_values = ['foo', 'bar', 'foo', 'bar', 'foo', 'baz']\nlist_values\
    \ = list(set(list_values) - {'bar'})\n\nprint(list_values) # ['foo', 'foo', 'baz']\n\
    </code>\n<|/ a dscore=5 |>\n<| c |>\nthis works but the other solution seems to\
    \ work better in my case\n<|/ c |>\n<| c |>\nThis is quite slow, since it iterates\
    \ over the list for each item you want to remove from the list, making it O(n^2).\
    \ My solution is faster than this one.\n<|/ c |>\n<| c |>\nThis approach is quite\
    \ slow for large lists as well.\n<|/ c |>\n<| a tags=python,list dscore=4 |>\n\
    A more verbose approach, that works with any type with a __contains__() method,\
    \ that would otherwise require a for-loop:\n<code>\ndef check(candidate):\n  \
    \  assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpoofz05wj.py\", line 11\n    Here's a non-regex way of\
    \ doing it without importing any modules. It only iterates over your list once,\
    \ making use of set operations.\n        ^\nSyntaxError: unterminated string literal\
    \ (detected at line 11)\n"
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ x : substring in x, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    matches = []\n\
    \    for element in strings:\n        if substring in element:\n            matches.append(element)\n\
    \    return matches\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered_strings\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    filtered_strings.append(string)\n\n    return filtered_strings\n\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ string: substring in string, strings))\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered = []\n\
    \    for s in strings:\n        if substring in s:\n            filtered.append(s)\n\
    \    return filtered\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n</cell>\n<cell>\nstrings = [\"I\", \"love\"\
    , \"you\", \"and\", \"a\", \"little\", \"guy!\"]\nsubstring = \"a\"\nprint(filter_by_substring(strings,\
    \ substring))\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9w8pwdpg.py\", line 7\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered = list()\n\
    \    for string in strings:\n        if substring in string:\n            filtered.append(string)\n\
    \    return filtered\n\ndef check(candidate):\n    assert candidate([], 'john')\
    \ == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\
    \ 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd', 'aaaxxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run') == ['grunt',\
    \ 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: -1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    substring = [i\
    \ for i in substring if i in strings]\n    return substring\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpesmyxgme.py\", line\
    \ 18, in <module>\n    test_check()\n  File \"/tmp/tmpesmyxgme.py\", line 16,\
    \ in test_check\n    check(filter_by_substring)\n  File \"/tmp/tmpesmyxgme.py\"\
    , line 11, in check\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [item\
    \ for item in strings if substring in item]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    \n    return\
    \ [x for x in strings if substring in x]\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered_strings\
    \ = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ string: substring in string, strings))\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered_strings\
    \ = []\n    for string in strings:\n        if substring in string:\n        \
    \    filtered_strings.append(string)\n    return filtered_strings\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    matches = [string\
    \ for string in strings if substring in string]\n    return matches\n\ndef check(candidate):\n\
    \    assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    filtered_strings\
    \ = []\n    for s in strings:\n        if substring in s:\n            filtered_strings.append(s)\n\
    \    return filtered_strings\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return list(filter(lambda\
    \ x: substring in x, strings))\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n\ndef check(candidate):\n \
    \   assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [item\
    \ for item in strings if substring in item]\n\n\ndef check(candidate):\n    assert\
    \ candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john\
    \ doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx',\
    \ 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [x for\
    \ x in strings if substring in x]\n\n</cell>\n<text>\nTask: Write a function filter_list\
    \ that accepts a list of strings and a substring and returns a filtered version\
    \ of that list. If your function doesn't do anything, just pass in a list and\
    \ a string.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3sb6q4e6.py\", line 10\n    Task: Write a function filter_list\
    \ that accepts a list of strings and a substring and returns a filtered version\
    \ of that list. If your function doesn't do anything, just pass in a list and\
    \ a string.\n                                                                \
    \                                                                            \
    \             ^\nSyntaxError: unterminated string literal (detected at line 10)\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 1
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\n</cell>\n<text>\nNow let's\
    \ try it out:\n\n\n</text>\n<cell>\nfilter_by_substring([\n    'McDonalds',\n\
    \    'Waldorf'\n], 'M')\n</cell>\n<text>\nAnd what about other strings that may\
    \ contain our substring? Let's see which strings are substrings of other strings:\n\
    \n\n</text>\n<cell>\nfilter_by_substring([\n    'McDonalds',\n    'Waldorf'\n\
    ], 'D')\n</cell>\n<text>\nOh, we have no strings containing substrings in our\
    \ original list! How can we get rid of the strings that contain them?\n\n\n</text>\n\
    <cell>\nfilter_by_substring([\n    'McDonalds',\n    'Waldorf'\n], 'Wal')\n</cell>\n\
    <text>\nExercise 1: Write a function that filters a list for strings that only\
    \ contain a substring\nHow about another example where we have a list with strings\
    \ and we want to return only the strings that contain a certain substring?\n\n\
    Use filter_by_substring to do so!\n\n\n</text>\n<cell>\n\n</cell>\n<text>\nExercise\
    \ 2: Write a function that filters a list for strings containing a certain substring\n\
    How about another example where we have a list with strings and we want to return\
    \ only the strings that contain a certain substring?\n\nUse filter_by_substring\
    \ to find those strings and then use list comprehension to return those strings\n\
    \n\n</text>\n<cell>\n\n</cell>\n<text>\nExercise 3: Write a function that filters\
    \ a list for strings containing certain substrings\nWrite a function that takes\
    \ a list of strings and a list of substrings as inputs and filters the list of\
    \ strings to only contain the substrings that appear in all of the strings.\n\n\
    Hint: use filter_by_substring for your implementation!\n\nHere is an example to\
    \ help you get started:\n\n\n</text>\n<cell>\nfilter_by_substring([\n    'McDonalds',\n\
    \    'Waldorf',\n    'KFC',\n    'McDonalds Inc.',\n    'Waldorf Inc.',\n    'KFC\
    \ Inc.',\n    'KFC Inc',\n    'McDonalds Inc.',\n    'Waldorf Inc.',\n    'KFC\
    \ Inc.',\n    'KFC Inc',\n    'McDonalds Inc.',\n    'Waldorf Inc.',\n    'KFC\
    \ Inc.',\n    'KFC Inc'\n], [\n    'KFC'\n])\n</cell>\n<text>\nExercise 4: Write\
    \ a function that filters a list for strings that only contain a certain substring\n\
    \ndef check(candidate):\n    assert candidate([], 'john') == []\n    assert candidate(['xxx',\
    \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n\
    \    assert candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx')\
    \ == ['xxx', 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet',\
    \ 'prune', 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n  \
    \  check(filter_by_substring)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwgvybnsd.py\", line 10\n    Now let's try it out:\n  \
    \         ^\nSyntaxError: unterminated string literal (detected at line 10)\n"
  stdout: ''
  timestamp: 1659823402
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [s for\
    \ s in strings if substring in s]\n\ndef check(candidate):\n    assert candidate([],\
    \ 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA',\
    \ 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert candidate(['xxx', 'asd',\
    \ 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx', 'aaaxxy', 'xxxAAA',\
    \ 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\
    \ == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
- exit_code: 0
  program: "from typing import List\n\ndef filter_by_substring(strings: List[str],\
    \ substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only\
    \ for ones that contain given substring\n            \"\"\"\n    return [string\
    \ for string in strings if substring in string]\n\ndef check(candidate):\n   \
    \ assert candidate([], 'john') == []\n    assert candidate(['xxx', 'asd', 'xxy',\
    \ 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx', 'xxxAAA', 'xxx']\n    assert\
    \ candidate(['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'], 'xx') == ['xxx',\
    \ 'aaaxxy', 'xxxAAA', 'xxx']\n    assert candidate(['grunt', 'trumpet', 'prune',\
    \ 'gruesome'], 'run') == ['grunt', 'prune']\n\ndef test_check():\n    check(filter_by_substring)\n\
    \ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823401
