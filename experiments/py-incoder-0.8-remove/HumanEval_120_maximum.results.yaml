language: py
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    max_length = 0\n    maximum_list = list()\n\
    \    \n    for el in arr:\n        if el > max_length:\n            maximum_list.append(el)\n\
    \            max_length = el\n        \n    return maximum_list\n</cell>\n<cell>\n\
    arr = [-7, -2, 5, -8, 2, -3, 7, 7, -2]\nmaximum_list = maximum(arr, 2)\nprint(maximum_list)\n\
    </cell>\n<text>\n\uCC38\uACE0 :\n\n\n</text>\n<text>\n\uB525\uB7EC\uB2DD \uD504\
    \uB85C\uADF8\uB798\uBA38\uC2E4\uC2B5\n1. \uBB38\uC790\uC5F4 \uAC1D\uCCB4 \uC0DD\
    \uC131\nlist(), tuple(), dict()\nstr()\uC744 \uC774\uC6A9\uD55C \uAC1D\uCCB4 \uC0DD\
    \uC131\n\uB9AC\uC2A4\uD2B8 \uC790\uB8CC\uD615\uC73C\uB85C \uBB38\uC790\uC5F4 \uAC1D\
    \uCCB4 \uC0DD\uC131\n\n\n</text>\n<text>\n\uB9AC\uC2A4\uD2B8 \uC790\uB8CC\uD615\
    \uC73C\uB85C \uBB38\uC790\uC5F4 \uAC1D\uCCB4 \uC0DD\uC131\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpja7lldgx.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    arr = [n for n in arr]\n    if k ==\
    \ 1:\n        return arr\n    else:\n        maximum = [arr[0], max(arr[1:], key=lambda\
    \ x:x)]\n        for i in range(1, len(arr)):\n            if arr[i] > maximum[1]:\n\
    \                maximum = [arr[i], max(arr[i:], key=lambda x:x)]\n        return\
    \ maximum\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpukog17m6.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpukog17m6.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpukog17m6.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    len_arr = len(arr)\n    if k > len_arr:\n\
    \        return arr\n    if k == len_arr:\n        return list(sorted(arr, reverse=True))\n\
    \    \n    maximum = arr[:k]\n    minimum = arr[:k]\n    \n    for i in range(k):\n\
    \        if maximum[i] > minimum[i]:\n            maximum[i] = max(maximum[i],\
    \ arr[i])\n        else:\n            minimum[i] = min(minimum[i], arr[i])\n \
    \   \n    arr[:k] = maximum\n    arr[:k] = minimum\n    \n    return arr\n\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfnuab0r.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmphfnuab0r.py\", line 56,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphfnuab0r.py\", line 43,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    arr1 = []\n    max1 = arr[0]\n    i = 1\n\
    \    while i < len(arr):\n        if arr[i] > max1:\n            max1 = arr[i]\n\
    \        elif arr[i] == max1:\n            max1 += 1\n        else:\n        \
    \    arr1.append(max1)\n            max1 = arr[i]\n        i += 1\n    arr1.append(max1)\n\
    \    return arr1\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp_t7j0g1.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpp_t7j0g1.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpp_t7j0g1.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\"\"\"\n    def maximum(self, arr:\
    \ List[int], k: int) -> List[int]:\n        \"\"\"\n        \n\n        :rtype:\
    \ List[int]\n        \"\"\"\n        pass\n\n    def maximum_inplace(self, arr:\
    \ List[int], k: int) -> List[int]:\n        \"\"\"\n        \n\n        :rtype:\
    \ List[int]\n        \"\"\"\n        pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4cn7o992.py\", line 28\n    :rtype: List[int]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdisx3wwz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdisx3wwz.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdisx3wwz.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr)[-k:] \n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjjxxyg5v.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpjjxxyg5v.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpjjxxyg5v.py\", line 35,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\"\"\"\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpflgjpjbr.py\", line 23\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 40)\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0 or len(arr) <= 0:\n        return\
    \ []\n\n    # \u65B9\u6CD5\u4E00\uFF1A\u5FEB\u6162\u6307\u9488\u6CD5\uFF0C\u5FEB\
    \u901F\u6392\u5E8F\n    quicksort(arr, 0, len(arr) - 1)\n\n    # \u65B9\u6CD5\u4E8C\
    \uFF1A\u5192\u6CE1\u6392\u5E8F\n    bubblesort(arr)\n\n    # \u65B9\u6CD5\u4E09\
    \uFF1A\u9009\u62E9\u6392\u5E8F\n    choosesort(arr)\n\n    # \u65B9\u6CD5\u56DB\
    \uFF1A\u725B\u6392\u5E8F\n    bogosort(arr)\n\n    # \u65B9\u6CD5\u4E94\uFF1A\u6876\
    \u6392\u5E8F\n    bucketsort(arr)\n\n    # \u65B9\u6CD5\u516D\uFF1A\u6709\u5E8F\
    \u6570\u7EC4\n    insertion_sort(arr)\n\n    # \u65B9\u6CD5\u4E03\uFF1A\u5806\u6392\
    \u5E8F\n    heapsort(arr)\n\n    # \u65B9\u6CD5\u516B\uFF1A\u5FEB\u901F\u6392\u5E8F\
    \n    quicksort(arr, 0, len(arr) - 1)\n\n    # \u65B9\u6CD5\u4E5D\uFF1A\u6700\u5927\
    \u503C\u6392\u5E8F\n    heapsort(arr)\n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpa6xl42wg.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmpa6xl42wg.py\", line 67,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpa6xl42wg.py\", line 54,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpa6xl42wg.py\"\
    , line 26, in maximum\n    quicksort(arr, 0, len(arr) - 1)\nNameError: name 'quicksort'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdisx3wwz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdisx3wwz.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdisx3wwz.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr)[-k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpen8nr2nk.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpen8nr2nk.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpen8nr2nk.py\", line 35,\
    \ in check\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def helper(arr, k):\n        if len(arr)\
    \ == k: return arr\n        new_arr = sorted(arr)\n        return helper(new_arr,\
    \ k)\n    \n    return helper(arr, k)\n\n\n\"\"\"\ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkm33w9yo.py\", line 30\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 47)\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u6700\u5927\u503C\n    max_num = arr[0]\n\
    \    # \u83B7\u53D6k\u5927\u7684\u6570\n    for i in range(1, len(arr)):\n   \
    \     if arr[i] > max_num:\n            max_num = arr[i]\n    # \u83B7\u53D6k\u5927\
    \u7684\u6570\u540E\u7684\u6570\u7EC4\n    biggest_arr = [max_num]\n    # \u4FDD\
    \u5B58k\u5927\u7684\u6570\u540E\u7684\u6570\u7EC4\u7684\u957F\u5EA6\n    biggest_count\
    \ = 0\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n      \
    \      biggest_arr.append(arr[i])\n            biggest_count += 1\n    # \u5C06\
    k\u5927\u7684\u6570\u540E\u7684\u6570\u7EC4\u6DFB\u52A0\u5230\u6700\u540E\u7684\
    \u6570\u7EC4\u91CC\u9762\n    for i in range(k, biggest_count):\n        biggest_arr.append(max_num)\n\
    \    # \u5982\u679C\u53EA\u6709\u4E00\u4E2A\u5143\u7D20\uFF0C\u5C31\u8FD4\u56DE\
    \u8FD9\u4E2A\u5143\u7D20\n    if len(biggest_arr) == 1:\n        biggest_arr.append(biggest_arr[0])\n\
    \        return biggest_arr\n    else:\n        return biggest_arr\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0qo__r3e.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp0qo__r3e.py\", line 60,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0qo__r3e.py\", line 47,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    \n    pass\n\
    </cell>\n<cell>\narr = [1,-1,2,2]\nk = 3\nmaximum(arr, k)\n</cell>\n<cell>\narr\
    \ = [1, -1, 2, 2]\nk = 4\nmaximum(arr, k)\n</cell>\n<cell>\narr = [1, 2, 4, 6]\n\
    k = 5\nmaximum(arr, k)\n</cell>\n<cell>\narr = [1, 2, 4, 6, 7]\nk = 5\nmaximum(arr,\
    \ k)\n</cell>\n<cell>\narr = [-100, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nk = 5\nmaximum(arr, k)\n</cell>\n<text>\nQuestion\
    \ 10\nImplement a function called intersection that takes in two arrays arr1 and\
    \ arr2 and returns an array with the elements common to both arrays.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9_2qlr1m.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u5148\u6392\u5E8F\n    arr = [n for n\
    \ in arr]\n    arr.sort()\n    arr = arr[:k]\n\n    # return arr\n    return arr\n\
    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0n8t7dva.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp0n8t7dva.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp0n8t7dva.py\", line 33,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    temp = [0] *\
    \ k\n    for index in range(len(arr)):\n        if index == 0:\n            temp[0]\
    \ = arr[index]\n        else:\n            if arr[index] > temp[0]:\n        \
    \        temp[0] = arr[index]\n            if arr[index] < temp[1]:\n        \
    \        temp[1] = arr[index]\n            if arr[index] > temp[2]:\n        \
    \        temp[2] = arr[index]\n\n    maximum = [0] * k\n    for index in range(k):\n\
    \        maximum[index] = temp[index]\n\n    return maximum\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdfpm4n3r.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpdfpm4n3r.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdfpm4n3r.py\", line 42,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdo4vd21.py\", line\
    \ 295, in <module>\n    test_check()\n  File \"/tmp/tmppdo4vd21.py\", line 293,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppdo4vd21.py\", line 280,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u6700\u591A\u7684k\u4E2A\u6570\n    maximum\
    \ = sorted(arr, key=lambda x: -x)[:k]\n\n    return maximum\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgzb0w65u.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpgzb0w65u.py\", line 41,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpgzb0w65u.py\", line 28,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # code here\n    import heapq\n    arr =\
    \ sorted(arr)\n    heapq.heapify(arr)\n    return [heapq.heappop(arr) for _ in\
    \ range(k)]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6e10s73u.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp6e10s73u.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp6e10s73u.py\", line 30,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\
    \u4F4D\u7F6E\uFF0C\u5373\u6700\u540E\u4E00\u4E2A\u5143\u7D20\u7684\u4E0B\u6807\
    \n    end = len(arr)-1\n    # \u6700\u5927\u5143\u7D20\u7684\u4E0B\u6807\n   \
    \ max_idx = 0\n    # \u5F53\u524D\u7684\u5143\u7D20\n    curr = 0\n    while curr\
    \ < end:\n        if arr[curr] > arr[curr+1]:\n            arr[max_idx], arr[curr]\
    \ = arr[curr], arr[max_idx]\n            max_idx = curr\n        else:\n     \
    \       curr += 1\n    \n    arr.sort()\n    \n    return arr[:k]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823146
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k <= 0 or k >= len(arr):\n        return\
    \ []\n\n    # \u4F7F\u7528\u4F18\u5316\u7B97\u6CD5\n    length = len(arr)\n  \
    \  max = arr[0]\n    max_i = 0\n    for i in range(1, length):\n        if arr[i]\
    \ > max:\n            max = arr[i]\n            max_i = i\n\n    arr.remove(arr[max_i])\n\
    \    for i in range(k - 1):\n        max_i = arr[k - 1]\n        if max_i < 0:\n\
    \            break\n        if arr[i] > arr[max_i]:\n            arr.remove(arr[max_i])\n\
    \        else:\n            arr[max_i] = max\n            arr.remove(arr[i])\n\
    \n    return arr\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4x2rm5mx.py\", line\
    \ 62, in <module>\n    test_check()\n  File \"/tmp/tmp4x2rm5mx.py\", line 60,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4x2rm5mx.py\", line 47,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr)\
    \ < k:\n        return []\n    elif len(arr) > k:\n        return arr[0 : k]\n\
    \    \n    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplqkc5dww.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmplqkc5dww.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplqkc5dww.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # todo write your code here\n    pass\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn4_ju2yd.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpn4_ju2yd.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpn4_ju2yd.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u601D\u8DEF\n    # \u6700\u5927\u6570\
    \u7EC4\u7684\u957F\u5EA6\u4E3A k, \u4ECE 1 \u5F00\u59CB, \u53D6\u503C\u6BD4 k\
    \ \u5C0F\u7684\u90A3\u4E2A\u5C31\u662F\u6700\u5927\u503C\n    # \u7136\u540E\u4ECE\
    \ arr \u4E2D\u5220\u9664 k \u4E2A\u6700\u5927\u6570\u5B57\n    \n    # \u65F6\u95F4\
    \u590D\u6742\u5EA6\n    # \u6700\u574F\u7684\u60C5\u51B5 O(n), \u5176\u4E2D n\
    \ \u662F arr \u7684\u957F\u5EA6\n    # \u6CE8\u610F k \u53EA\u6709\u4E00\u4E2A\
    \u6570\u7684\u60C5\u51B5, \u5982\u679C k \u662F\u591A\u4E2A\u6570, \u90A3\u4E48\
    \ k \u7684\u5E73\u5747\u503C\u5C31\u4F1A\u5F88\u5927\n    # \u56E0\u6B64 n \u7684\
    \u5E73\u5747\u503C\u5C31\u4E0D\u662F\u53EA\u6709 n \u4E2A\u6570\u7684\u60C5\u51B5\
    \n    # \u6545 O(n * log(n))\n    \n    # \u7A7A\u95F4\u590D\u6742\u5EA6\n   \
    \ # \u6700\u574F\u60C5\u51B5 O(n), \u5176\u4E2D n \u662F arr \u7684\u957F\u5EA6\
    \n    # \u7A7A\u95F4\u590D\u6742\u5EA6\u6700\u9AD8\u7684\u60C5\u51B5\n    # \u5F53\
    \ n \u662F k \u7684\u60C5\u51B5\uFF0C\u56E0\u4E3A k \u53EA\u6709 1 \u4E2A\u6570\
    \u7684\u60C5\u51B5, \u6240\u4EE5 n \u7684\u5E73\u5747\u503C\u662F\u53EA\u6709\
    \ n \u4E2A\u6570\u7684\u60C5\u51B5\n    # \u56E0\u6B64 O(n) \u7684\u590D\u6742\
    \u5EA6\n\n    # \u8FD9\u9053\u9898\u662F\u6700\u574F\u7684\u60C5\u51B5\uFF0C\u56E0\
    \u4E3A\u53EA\u6709\u4E00\u4E2A\u6570\u7684\u60C5\u51B5, \u56E0\u6B64\u5176\u5E73\
    \u5747\u65F6\u95F4\u662F O(n)\n    \n    # \u7EFC\u4E0A\uFF0C\u5176\u5B9E\u5F88\
    \u7B80\u5355\u3002\n    # \u53D6\u51FA k \u4E2A\u6700\u5927\u503C max\n    # \u4ECE\
    \ arr \u4E2D\u5220\u9664 max \u7684\u6570\u5B57\n    # \u7136\u540E\u518D\u4ECE\
    \ arr \u4E2D\u5220\u9664 k \u4E2A\u6700\u5927\u503C\n    # \u6700\u540E\u518D\u5408\
    \u5E76\u4E24\u4E2A arr\n    # \u8FD9\u6837\u7684\u590D\u6742\u5EA6\u8981\u9AD8\
    \u4E8E O(n) \u7684\u590D\u6742\u5EA6\n    \n    # \u601D\u8DEF\u662F\u53D6\u51FA\
    \ k \u4E2A\u6700\u5927\u503C max\n    # \u7136\u540E\u518D\u4ECE arr \u4E2D\u5220\
    \u9664 max \u7684\u6570\u5B57\n    # \u7136\u540E\u518D\u5220\u9664 k \u4E2A\u6700\
    \u5927\u503C\n    # \u6700\u540E\u518D\u5408\u5E76\u4E24\u4E2A arr\n\n    # \u4EE3\
    \u7801\u793A\u4F8B\n    # arr = [1,3,5,7,9,11,13,15,17,19]\n    # k = 4\n    #\
    \ \u8F93\u51FA: [5, 7, 11, 13]\n\n    # \u601D\u8DEF\u662F\u53D6\u51FA\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp90i27h10.py\", line\
    \ 74, in <module>\n    test_check()\n  File \"/tmp/tmp90i27h10.py\", line 72,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp90i27h10.py\", line 59,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdisx3wwz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdisx3wwz.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdisx3wwz.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        k = len(arr)\n\
    \n    # \u5148\u6392\u5E8F\n    # \u5BF9\u6570\u7EC4\u8FDB\u884C\u5347\u5E8F\n\
    \    # \u518D\u4ECE\u7B2C\u4E00\u4E2A\u6570\u5230\u7B2C k \u7684\u5143\u7D20\u53D6\
    \u51FA\n    # \u9012\u5F52\n    def max(arr: list[k], k: int) -> list:\n     \
    \   # \u5148\u6392\u5E8F\n        return sorted(arr, key=lambda x: int(x))[:k]\n\
    \    \n    return max(arr, k)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkt9zetgq.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpkt9zetgq.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpkt9zetgq.py\", line 37,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    maximums = []\n\
    \    maximum = 0\n    for x in arr:\n        if x > maximum:\n            maximums.append(x)\n\
    \        else:\n            maximums.append(maximum)\n    return maximums\n</cell>\n\
    <cell>\nprint(maximum([7,5,3,7,9], 3))\n</cell>\n<text>\n4. \u6700\u5927\u503C\
    \u7684\u7D22\u5F15\n\n</text>\n<cell>\nfrom typing import List\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpls9k4lez.py\", line 31\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # init\n    max = arr[0]\n    k_pos = 0\n\
    \    k_neg = 0\n    \n    # for each number in array\n    for x in arr:\n    \
    \    # check if it's greater than max\n        if x > max:\n            # check\
    \ if it's positive\n            if x > 0:\n                # update k_neg if it's\
    \ positive\n                k_neg += 1\n                # update max and k_pos\n\
    \                max = x\n                k_pos = k_neg\n            else:\n \
    \               # update k_pos if it's negative\n                k_pos += 1\n\
    \                # update max and k_neg\n                max = x\n           \
    \     k_neg = k_pos\n        else:\n            # update k_pos\n            k_pos\
    \ += 1\n    \n    # return result\n    return [k_neg, k_pos]\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk4ygcbaw.py\", line\
    \ 68, in <module>\n    test_check()\n  File \"/tmp/tmpk4ygcbaw.py\", line 66,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpk4ygcbaw.py\", line 53,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u65B9\u6CD5\u4E00\uFF1A\n    # \u628A\
    \u6240\u6709\u5143\u7D20\u4ECE\u5C0F\u5230\u5927\u6392\u5217\n    # \u7136\u540E\
    \u6C42\u548C\uFF0C\u6C42\u51FA\u6700\u5927\u7684k\u4E2A\u5143\u7D20\n    # \u8FD9\
    \u6837\u4E00\u6765\uFF0C\u6700\u5927\u7684k\u4E2A\u5143\u7D20\u5C31\u662F\u6700\
    \u5927\u5143\u7D20\u7684\u7D22\u5F15\n    # \u7136\u540E\u5229\u7528\u8BE5\u7D22\
    \u5F15\u8BBF\u95EEarr\u4E2D\u5143\u7D20\uFF0C\u5373 arr[i]\n    # \u65F6\u95F4\
    \u590D\u6742\u5EA6\uFF1AO(n)\n    # \u7A7A\u95F4\u590D\u6742\u5EA6\uFF1AO(n)\n\
    \    # \u5982\u679C\u9700\u8981\u5BF9\u8F93\u5165\u7684arr\u505A\u4E00\u5B9A\u7684\
    \u5224\u65AD\uFF0C\u53EF\u4EE5\u4F7F\u7528bisect\u65B9\u6CD5\n    # \u8FD4\u56DE\
    \u7684\u662F\u5C0F\u4E8E\u7B49\u4E8Ek\u7684\u5143\u7D20\u7684\u7D22\u5F15\uFF0C\
    \u5373 arr_sorted[k]\n\n    # \u65B9\u6CD5\u4E8C\uFF1A\n    # \u5BF9arr\u8FDB\u884C\
    \u5F52\u5E76\u6392\u5E8F\n    # \u7136\u540E\u8FD4\u56DEarr[0:k]\n    # \u65F6\
    \u95F4\u590D\u6742\u5EA6\uFF1AO(nlogn)\n    # \u7A7A\u95F4\u590D\u6742\u5EA6\uFF1A\
    O(1)\n    # \u65B9\u6CD5\u4E00\u662F\u56E0\u4E3A\u6392\u5E8F\u64CD\u4F5C\u7684\
    \u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(nlogn), \u6240\u4EE5\u9700\u8981O(n)\u7684\
    \u65F6\u95F4\u590D\u6742\u5EA6\n    # \u65B9\u6CD5\u4E8C\u662F\u56E0\u4E3A\u5F52\
    \u5E76\u6392\u5E8F\u64CD\u4F5C\u7684\u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(nlogn),\
    \ \u6240\u4EE5\u9700\u8981O(n)\u7684\u7A7A\u95F4\u590D\u6742\u5EA6\u3002\n\n \
    \   arr_sorted = mergesort(arr)\n    maximum_list = arr_sorted[:k]\n\n    return\
    \ maximum_list\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptg6gbjkt.py\", line\
    \ 61, in <module>\n    test_check()\n  File \"/tmp/tmptg6gbjkt.py\", line 59,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptg6gbjkt.py\", line 46,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmptg6gbjkt.py\"\
    , line 40, in maximum\n    arr_sorted = mergesort(arr)\nNameError: name 'mergesort'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    length = len(arr)\n\
    \    if length < k:\n        return arr\n\n    else:\n        max_num = 0\n  \
    \      max_num_index = -1\n        for i in range(length):\n            if arr[i]\
    \ > arr[max_num]:\n                max_num_index = i\n                max_num\
    \ = arr[i]\n        return arr[:max_num_index+k] + arr[k:]\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpugk3t8hw.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpugk3t8hw.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpugk3t8hw.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    length = len(arr)\n    if length <= k: \n\
    \        return arr\n    \n    # Get the maximum k numbers in arr\n    maximums\
    \ = arr[-k:]\n    \n    # Sort the maximum k numbers\n    maximums.sort(reverse=True)\n\
    \    \n    # Append the elements of the maximums list to arr list\n    for i in\
    \ range(k):\n        arr.append(maximums[i])\n        \n    return arr\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphsc_vv1x.py\", line 37\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def kMax(arr, k):\n        max_k = []\n\
    \        for i in range(k):\n            max_k.append(max(arr[i:]))\n        return\
    \ max_k\n    \n    return kMax(arr, k)\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdg90knxd.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpdg90knxd.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdg90knxd.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not 1 <= k <= len(arr):\n        return\
    \ arr\n    else:\n        arr = sorted(arr)\n        heap = []\n        heapq.heappush(heap,\
    \ arr[k-1])\n        arr.pop(k-1)\n        for value in arr:\n            if value\
    \ >= heap[0]:\n                heapq.heappush(heap, value)\n            else:\n\
    \                break\n        return heap[:k]\n\ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xp36iwt.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp3xp36iwt.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp3xp36iwt.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp3xp36iwt.py\"\
    , line 27, in maximum\n    heapq.heappush(heap, arr[k-1])\nNameError: name 'heapq'\
    \ is not defined. Did you mean: 'heap'?\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    ans = [0] * k\n \
    \   ans[0], ans[1] = arr[-1], arr[-2]\n    for i in range(2, k + 1):\n       \
    \ ans[i] = max(ans[i - 1], arr[i - 1])\n    return ans\n</cell>\n<cell>\narr =\
    \ [-10, 1, 4, 6, 5, 8, 9]\nk = 3\n\nprint(\"Input\", arr)\nprint(\"Output\", maximum(arr,\
    \ k))\n</cell>\n<text>\n6. Merge k sorted arrays of non-negative integers\nGiven\
    \ k arrays arr1..arrk, and an integer target, return an array arr\ncontaining\
    \ all the k sorted arrays in sorted order.\n\nYou may assume that each input fits\
    \ completely within memory and fits within a single disk sector on disk.\n\nExample:\n\
    \nInput:\n\narr1: [1, 3, 5, 8, 10], arr2: [2, 4, 6, 8, 10], arr3: [3, 5, 7, 8,\
    \ 10], arr4: [1, 4, 6, 8, 10]\ntarget: 6\nOutput:\n\n[\n  [1, 3, 5, 8, 10],\n\
    \  [2, 4, 6, 8, 10],\n  [3, 5, 7, 8, 10],\n  [1, 4, 6, 8, 10],\n  [2, 4, 6, 8,\
    \ 10]\n]\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpg_2qg4oa.py\", line 28\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\n\"\"\"\nDifficulty:\
    \ Easy\nTotal time: 5min\nAssign the result to the variable result\n\"\"\"\n\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4cq28da_.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # Method 1: Sort, select first k items and\
    \ sort again\n    # Method 2: Build a list with k highest numbers and return it.\n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps2nlnvdf.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmps2nlnvdf.py\", line 41,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmps2nlnvdf.py\", line 28,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    arr_copy = arr.copy()\n    \n    maximum_value\
    \ = arr_copy[0]\n    \n    for i in range(1, len(arr_copy)):\n        if arr_copy[i]\
    \ > maximum_value:\n            maximum_value = arr_copy[i]\n    \n    maximum_list\
    \ = arr_copy[:k - 1]\n    \n    maximum_list.append(maximum_value)\n    \n   \
    \ return maximum_list\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp93y6lp1h.py\", line 36\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u6700\u5927\u6570\u7684list\n    maxList\
    \ = []\n\n    # \u5982\u679C\u6570\u7EC4\u7684\u957F\u5EA6\u4E3A0\uFF0C\u5219\u76F4\
    \u63A5\u8FD4\u56DE\n    if len(arr) == 0:\n        return maxList\n\n    # \u5982\
    \u679Ck\u5927\u4E8E\u6570\u7EC4\u7684\u957F\u5EA6\uFF0C\u5219\u76F4\u63A5\u8FD4\
    \u56DE\n    if k > len(arr):\n        return maxList\n\n    # \u521D\u59CB\u5316\
    \u6700\u5927\u503C\u7684\u4F4D\u7F6E\n    start = 0\n\n    # \u904D\u5386\u6570\
    \u7EC4\uFF0C\u627E\u5230\u6570\u7EC4\u4E2D\u6700\u5927\u7684\u503C\n    for i\
    \ in range(start, len(arr)):\n        if arr[i] > arr[0]:\n            maxList.append(arr[i])\n\
    \            \n    # \u5C06\u6700\u5927\u503C\u653E\u5230\u524D\u9762\n    maxList.insert(0,\
    \ arr[0])\n\n    # \u5C06\u6700\u5927\u503C\u653E\u5230\u540E\u9762\n    for i\
    \ in range(1, len(arr)):\n        if arr[i] > arr[0]:\n            maxList.append(arr[i])\n\
    \n    # \u8FD4\u56DE\u6700\u5927\u6570\u7684list\n    return maxList\n       \
    \     \n            \ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1erz00p5.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmp1erz00p5.py\", line 67,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1erz00p5.py\", line 54,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    \n    \"\"\"\n    If len(arr) == 0,\
    \ the function will return the empty list.\n    If k is less than 0, the function\
    \ will return the empty list.\n    Otherwise:\n    \n    If k equals the length\
    \ of arr, then the function will return the maximum k numbers in arr as \n   \
    \ a new sorted list.\n    \n    If k is greater than the length of arr, the function\
    \ will return the maximum k numbers in arr as \n    a new sorted list.\n    \n\
    \    Otherwise:\n    \n    The function will call maximum_recursion() to solve\
    \ this problem. k is passed as an argument \n    to the function maximum_recursion().\n\
    \    The function will call maximum_recursion() recursively on the first k elements\
    \ of arr, \n    then it will concatenate these k elements with the first k elements\
    \ of arr, \n    and then it will call maximum_recursion() recursively on the concatenated\
    \ k elements.\n    \"\"\"\n    if len(arr) == 0:\n        return arr\n    elif\
    \ k < 0:\n        return arr\n    elif k == len(arr):\n        return [max(arr[:k])]\
    \ + arr[k:]\n    else:\n        max = arr[:k]\n        rest = arr[k:]\n      \
    \  new_max = maximum_recursion(max, rest)\n        return [max(arr[:k])] + new_max\
    \ \n    \n    \n\"\"\"\n    Using a helper function, maximum_recursion(), solve\
    \ the following question:\n    \n    Find the maximum k numbers in arr where k\
    \ is in the range [0, len(arr)).\n\n    You can assume that the given array is\
    \ sorted in non-decreasing order.\n    \n    You may assume k is always valid,\
    \ 0 <= k <= len(arr).\n    \n    The function should return a list of length k\
    \ with the maximum k numbers in arr. \n\"\"\"\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9645jp96.py\", line\
    \ 83, in <module>\n    test_check()\n  File \"/tmp/tmp9645jp96.py\", line 81,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp9645jp96.py\", line 68,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp9645jp96.py\"\
    , line 48, in maximum\n    return [max(arr[:k])] + arr[k:]\nUnboundLocalError:\
    \ local variable 'max' referenced before assignment\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    ans = []\n    size = len(arr)\n    # Write\
    \ your code here\n    if size < k or size < 2:\n        return arr\n    for i\
    \ in range(size):\n        val = arr[i]\n        while val >= k and i < size:\n\
    \            val = max(arr[i], val-k)\n            ans.append(val)\n        ans.append(val)\n\
    \    return ans\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823146
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    max_num = -1000\n    for i in range(k):\n\
    \        for j in range(len(arr)):\n            if arr[j] > max_num:\n       \
    \         max_num = arr[j]\n            \n    return max_num\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplclmjt7c.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmplclmjt7c.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmplclmjt7c.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u65B9\u6CD5\u4E00\uFF1A\u53CC\u6307\u9488\
    \n    \n    # \u65B9\u6CD5\u4E8C\uFF1A\u6570\u7EC4\u5206\u6CBB\n    arr = sorted(arr)\n\
    \    length = len(arr)\n    \n    if length <= k:\n        return arr\n    \n\
    \    for i in range(length):\n        if arr[i] > arr[i + k]:\n            arr[i+k]\
    \ = arr[i]\n            \n    return arr[:k]\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8e2i7o23.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmp8e2i7o23.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8e2i7o23.py\", line 40,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmp8e2i7o23.py\"\
    , line 32, in maximum\n    if arr[i] > arr[i + k]:\nIndexError: list index out\
    \ of range\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    # \u65B9\u6CD5\u4E00 \n    # 1. \u5C06\
    \u8F93\u5165\u7684\u6570\u7EC4\uFF0C\u8F6C\u6362\u4E3A\u6570\u7EC4\u7D22\u5F15\
    \uFF0C\u53D6\u51FA\u6700\u5927\u7684\u524Dk\u4E2A\n    arr_map = sorted([num for\
    \ index, num in enumerate(arr)])[-k:]\n    # 2. \u5C06\u8FD9\u4E9B\u6570\u7EC4\
    \u7D22\u5F15\u8F6C\u6362\u4E3A\u6570\u7EC4\uFF0C\u4FBF\u4E8E\u8F93\u51FA\n   \
    \ arr_out = [arr[index] for index in arr_map]\n    return arr_out\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv5zc19ad.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpv5zc19ad.py\", line 44,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv5zc19ad.py\", line 31,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpv5zc19ad.py\"\
    , line 27, in maximum\n    arr_out = [arr[index] for index in arr_map]\n  File\
    \ \"/tmp/tmpv5zc19ad.py\", line 27, in <listcomp>\n    arr_out = [arr[index] for\
    \ index in arr_map]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr)\
    \ == 0:\n        return arr\n    if k == 1:\n        return arr\n    left = maximum(arr[:k//2],\
    \ k)\n    right = maximum(arr[k//2:], k)\n    mid = left[k//2]\n    if arr[mid]\
    \ > mid:\n        mid = right[k//2]\n    return left + [mid + 1] + right\n\n<|/\
    \ file source=github filename=100_maximum.py |>\n<| c |>\nThank you, this is exactly\
    \ what I want.\n<|/ c |>\n<| c |>\nYou are welcome. I am glad that I could help.\n\
    <|/ c |>\n<| c |>\nYou mean `mid = left[k // 2]` instead of `mid = left[k//2]`\
    \ in the last line.\n<|/ c |>\n<| c |>\nYes, you are correct. I fixed that bug.\
    \ Thanks!\n<|/ c |>\n<| a tags=python-3.x,python,python-2.7,algorithm,sorting\
    \ dscore=1 |>\nUse recursion.\n<code>\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiexpa3_d.py\", line 34\n    <|/ file source=github filename=100_maximum.py\
    \ |>\n                                       ^\nSyntaxError: invalid decimal literal\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u65B9\u6CD5\u4E00\uFF1A\u7528\u5217\u8868\
    \u63A8\u5BFC\u5F0F\n    return sorted([max(arr[i: i + k]) \n                 \
    \  for i in range(0, len(arr) - k)], reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp96javh8f.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp96javh8f.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp96javh8f.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n    # Your code here\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv2j7b7oc.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpv2j7b7oc.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpv2j7b7oc.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def maximum2(arr: List[int], k: int) ->\
    \ List[int]:\n        if k >= len(arr):\n            return arr\n        if k\
    \ == 0:\n            return [arr[0]]\n        if k == 1:\n            return sorted(arr,\
    \ reverse=True)\n        if k == 2:\n            return sorted(arr, reverse=False)\n\
    \        res = []\n        mid = (len(arr) // 2) -1\n        for i in range(k\
    \ - 1):\n            res.append(max(arr[i], arr[mid]))\n            mid = int((mid\
    \ + 1) // 2)\n        return sorted(res, reverse=True)\n    return maximum2(arr,\
    \ k)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\nPython 3\n<code>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3sv3qppd.py\", line 38\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    pass\n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuu1wez3k.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpuu1wez3k.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpuu1wez3k.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    stack = []\n    res = []\n    pos = 0\n\
    \    for num in arr:\n        if pos < k:\n            if num > stack[-1]:\n \
    \               stack.append(num)\n                pos += 1\n        else:\n \
    \           while pos > 0 and stack[pos-1] < num:\n                stack.pop()\n\
    \                pos -= 1\n            res.append(stack.pop())\n            pos\
    \ = 0\n            res.append(num)\n    res.extend(stack[:])\n    return res\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplues24mx.py\", line 39\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    import math\n    arr = sorted(arr)\n   \
    \ if len(arr) < k:\n        return arr\n    left, right = 0, len(arr)-k-1\n  \
    \  while left < right:\n        mid = left + (right - left) // 2\n        if arr[mid]\
    \ > arr[mid + 1]:\n            right = mid - 1\n        else:\n            left\
    \ = mid + 1\n    \n    return arr[:right+1]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_rtlj414.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp_rtlj414.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_rtlj414.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def helper(arr: List[int], k: int) -> List[int]:\n\
    \        if k == 0 or k > len(arr):\n            return [arr[0]] if arr[0] !=\
    \ arr[-1] else []\n        \n        arr1 = []\n        arr2 = []\n        for\
    \ i in range(0, k):\n            if arr[i] > arr[k-1]:\n                arr1.append(arr[i])\n\
    \            else:\n                arr2.append(arr[k-1])\n                arr2.append(arr[i])\n\
    \        return arr1 + arr2\n    return sorted(helper(arr, k), reverse=True)\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpstn7pccc.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmpstn7pccc.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpstn7pccc.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr)\
    \ < k or k > len(arr):\n        return []\n    \n    maximum_list = [None] * k\n\
    \    max_index = -1\n    for i in range(len(arr)):\n        if maximum_list[i]\
    \ == None or arr[i] > maximum_list[i]:\n            maximum_list[i] = arr[i]\n\
    \            max_index = i\n    \n    maximum_list = maximum_list[: max_index\
    \ + k]\n    \n    maximum_list.sort()\n    \n    return maximum_list\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpywc_bwrj.py\", line\
    \ 55, in <module>\n    test_check()\n  File \"/tmp/tmpywc_bwrj.py\", line 53,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpywc_bwrj.py\", line 41,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\n  File \"/tmp/tmpywc_bwrj.py\"\
    , line 29, in maximum\n    if maximum_list[i] == None or arr[i] > maximum_list[i]:\n\
    IndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\narr = [-2, -1, -10,\
    \ -9, -4, -5, -3, 0, 1, 2]\nk = 3\nprint(maximum(arr, k))\n</cell>\n<text>\nGreedy\
    \ Algorithm\nGreedy Algorithm is a common algorithm that tries to find the shortest\
    \ path from starting to goal state. \nThe algorithm has three main steps:\n\n\
    Initialize the start state as 0\nInitialize an array of visited states [start_state,\
    \ *all states that end with start_state]\nWhile the visited states is not empty:\n\
    \nFind the smallest unvisited state by removing one state from visited states.\n\
    For all neighboring states in the graph, check if they should be taken or not.\
    \ \n\nIf yes, go to neighboring states. If no, continue to neighboring states.\n\
    \nAdd the smallest unvisited state as start state and visited states.\n\nThe time\
    \ complexity is $O(|V|+|E|)$\n\nExample:\n\nGiven a graph with 9 nodes and an\
    \ edge between each pair of nodes with cost 1, \nwe would have 8 vertices. First\
    \ we visit the vertex with minimum unvisited states as 0. \nThen we would go through\
    \ all the neighbors of 0 and take either 0 or 1. This will cost us the total cost\
    \ of 8. \nThen we go through all the neighbors of 1 and take either 0 or 1. This\
    \ will cost us the total cost of 7. \nThe total cost of 6 is minimum cost. \n\
    This would take us 5 iterations to reach goal state (node 9).\n\nWe can modify\
    \ the greedy algorithm to get the same time complexity. \nWe initialize the current\
    \ state as 0. Then we initialize the visited states as [start_state] + [node that\
    \ end with start_state]. We then iterate through each vertex in the graph and\
    \ try to visit each neighbor. We keep track of the cost of the path we tried to\
    \ go through. We add the minimum cost to the current state and visited states.\n\
    \nExample:\n\nGiven a graph with 9 nodes and an edge between each pair of nodes\
    \ with cost 1, \nwe would have 8 vertices. First we visit the vertex with minimum\
    \ unvisited states as 0. \nThen we would go through all the neighbors of 0 and\
    \ take either 0 or 1. This will cost us the total cost of 8. \nThen we go through\
    \ all the neighbors of 1 and take either 0 or 1. This will cost us the total cost\
    \ of 7. \nThe total cost of 6 is minimum cost. \nThis would take us 5 iterations\
    \ to reach goal state (node 9).\n\nWe can modify the greedy algorithm to get the\
    \ same time complexity. \nWe initialize the current state as 0. Then we initialize\
    \ the visited states as [start_state] + [node \ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzzm4zhvk.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u65B9\u6CD5\u4E00\uFF1A\u4E8C\u5206\n\
    \    mid = int((len(arr)+1)/2)\n    if k > mid:\n        return maximum(arr[:mid],\
    \ k)\n    elif k < mid:\n        return maximum(arr[mid:], k-mid)\n    else:\n\
    \        res = []\n        for i in range(k):\n            res.append(max(arr[:mid]))\n\
    \            arr[mid:].remove(max(arr[:mid]))\n        for i in range(k):\n  \
    \          res.append(max(arr[mid:]))\n            arr[mid:].remove(max(arr[mid:]))\n\
    \        return res\n        \ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphfkq7ar_.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmphfkq7ar_.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphfkq7ar_.py\", line 39,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmphfkq7ar_.py\"\
    , line 25, in maximum\n    return maximum(arr[:mid], k)\n  File \"/tmp/tmphfkq7ar_.py\"\
    , line 25, in maximum\n    return maximum(arr[:mid], k)\n  File \"/tmp/tmphfkq7ar_.py\"\
    , line 25, in maximum\n    return maximum(arr[:mid], k)\n  [Previous line repeated\
    \ 993 more times]\n  File \"/tmp/tmphfkq7ar_.py\", line 23, in maximum\n    mid\
    \ = int((len(arr)+1)/2)\nRecursionError: maximum recursion depth exceeded while\
    \ calling a Python object\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return max(arr, key=lambda x: (-x, len(arr)\
    \ - arr.index(x)))[:k]\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxbr6dz57.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpxbr6dz57.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxbr6dz57.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpxbr6dz57.py\"\
    , line 22, in maximum\n    return max(arr, key=lambda x: (-x, len(arr) - arr.index(x)))[:k]\n\
    TypeError: 'int' object is not subscriptable\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n<|/ file source=github filename=PalindromeNumber.py\
    \ |>\n<| c |>\nThis is O(n^2). Better use Kadane's algorithm O(n^2)\n<|/ c |>\n\
    <| a |>\n<code>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvqxqe69i.py\", line 25\n    This is O(n^2). Better use\
    \ Kadane's algorithm O(n^2)\n                                     ^\nSyntaxError:\
    \ unterminated string literal (detected at line 25)\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    def helper(arr: List[int], k: int)\
    \ -> List[int]:\n        if k==0 or len(arr)==0:\n            return []\n    \
    \    \n        if arr[0]<arr[-1]:\n            tmp=[arr[0]]\n            for i\
    \ in range(1,len(arr)):\n                if arr[i]>arr[i-1]:\n               \
    \     tmp.append(arr[i])\n            tmp.append(arr[-1])\n            return\
    \ tmp\n        \n        tmp_arr=helper(arr[1:],k//2)\n        if k%2==0:\n  \
    \          tmp_arr=[tmp_arr[-1],max(tmp_arr[1:],key=lambda x: -x)] #[-1000,1000]\
    \ -> [-1000]\n        else:\n            tmp_arr=[max(tmp_arr[1:],key=lambda x:\
    \ -x),tmp_arr[-1]] #[-1000,1000] -> [-1000]\n        return tmp_arr\n    \n  \
    \  return helper(arr,k)\n\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppdd7_77v.py\", line\
    \ 60, in <module>\n    test_check()\n  File \"/tmp/tmppdd7_77v.py\", line 58,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppdd7_77v.py\", line 45,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # init answer\n    ans = []\n    \n    #\
    \ init answer list\n    answer_list = []\n    \n    # init i for loop\n    i =\
    \ 0\n    \n    # init j for loop\n    j = 0\n    \n    # init for loop\n    while\
    \ i < len(arr):\n        \n        # init max\n        max = 0\n        \n   \
    \     # init loop to find the max\n        while j < len(arr):\n            \n\
    \            # init if j is in the answer\n            if arr[j] > max:\n    \
    \            \n                # init max\n                max = arr[j]\n    \
    \            \n            # update j\n            j += 1\n            \n    \
    \    # update answer list\n        answer_list.append(max)\n        \n       \
    \ # update i\n        i += 1\n        \n        # update j\n        j += 1\n \
    \       \n    # return answer\n    return answer_list\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpls_xyleu.py\", line\
    \ 80, in <module>\n    test_check()\n  File \"/tmp/tmpls_xyleu.py\", line 78,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpls_xyleu.py\", line 65,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    max_arr = []\n    for _ in range(k):\n \
    \       max_arr.append(-1)\n    for n in arr:\n        if n != 0:\n          \
    \  max_arr[0] = max(max_arr[0], n)\n    for i in range(1, len(arr)):\n       \
    \ if arr[i] > max_arr[0]:\n            max_arr[0] = max(arr[i], max_arr[0])\n\
    \    max_arr.sort()\n    return max_arr\n</cell>\n<cell>\n%timeit maximum(arr,\
    \ 3)\n</cell>\n<cell>\n%timeit quicksort(arr, 3)\n</cell>\n<text>\n\u6700\u5C0F\
    \u503C\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpihjs45an.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def findMax(a):\n        max_num = -1000\n\
    \        pos = 0\n        pos = 0\n        while pos < len(a):\n            if\
    \ a[pos] > max_num:\n                max_num = a[pos]\n            pos += 1\n\
    \        return max_num\n\n    # code here\n    return sorted(arr, key=findMax)\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr3_zd20j.py\", line\
    \ 51, in <module>\n    test_check()\n  File \"/tmp/tmpr3_zd20j.py\", line 49,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpr3_zd20j.py\", line 36,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpr3_zd20j.py\"\
    , line 33, in maximum\n    return sorted(arr, key=findMax)\n  File \"/tmp/tmpr3_zd20j.py\"\
    , line 26, in findMax\n    while pos < len(a):\nTypeError: object of type 'int'\
    \ has no len()\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # Solution 1: \u66B4\u529B\u89E3\u6CD5\n\
    \    \n    arr = sorted(arr)\n    result = []\n    \n    for i in arr[:k]:\n \
    \       if i not in result:\n            result.append(i)\n    \n    return result\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2s9w868w.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp2s9w868w.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp2s9w868w.py\", line 35,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    import math\n    if k > len(arr):\n    \
    \    return []\n    if k == 1:\n        return arr\n    m = math.ceil(k /2)\n\
    \    left = []\n    right = []\n    while len(left) < m:\n        left.append(arr[0])\n\
    \        arr.remove(arr[0])\n    while len(right) < m:\n        right.append(arr[len(arr)-1])\n\
    \        arr.remove(arr[len(arr)-1])\n    left = maximum(left,m-1)\n    right\
    \ = maximum(right,m-1)\n    res = left+right\n    return res\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpskza00l4.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpskza00l4.py\", line 54,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpskza00l4.py\", line 41,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpskza00l4.py\"\
    , line 34, in maximum\n    right.append(arr[len(arr)-1])\nIndexError: list index\
    \ out of range\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    sorted_list\
    \ = sorted(arr)\n    max_length = sorted_list[k-1]\n    maximum_list = [arr[i]\
    \ for i in range(k, len(arr))]\n    return maximum_list\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx8tfss_u.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpx8tfss_u.py\", line 42,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpx8tfss_u.py\", line 29,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    len_arr = 0\n    for num in arr:\n     \
    \   len_arr = len_arr + 1\n    if len_arr <= k:\n        return [0 for _ in range(k)]\n\
    \    else:\n        li = len_arr\n        while li >= k:\n            arr = sorted(arr)\n\
    \            li = k\n        return arr[:k]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptwu3_7so.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmptwu3_7so.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmptwu3_7so.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, key=lambda x: arr[x])[-k:]\n\
    </cell>\n<cell>\narr1 = maximum(arr2, 3)\narr1\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxux_ri0m.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # Your code here\n    if not arr or not\
    \ k:\n        return []\n    \n    m = len(arr)\n    \n    if k > m:\n       \
    \ return sorted(arr)\n    \n    if k == m:\n        return arr\n    \n    pivot\
    \ = arr[0]\n    \n    less = []\n    greater = []\n    \n    for x in arr:\n \
    \       if x < pivot:\n            less.append(x)\n        elif x > pivot:\n \
    \           greater.append(x)\n            \n    greater = maximum(greater, k\
    \ - len(less))\n    \n    return less+greater \n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc9yn0fvm.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpc9yn0fvm.py\", line 63,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpc9yn0fvm.py\", line 50,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyw1uam5.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqyw1uam5.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqyw1uam5.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    max_vals = []\n    length = len(arr)\n \
    \   if length < 1:\n        return []\n    if k >= length:\n        return max_vals\n\
    \n    for i in range(1, length):\n        if arr[i-1] > arr[i]:\n            max_vals.append(arr[i])\n\
    \        else:\n            max_vals.append(arr[i-1])\n\n    return max_vals\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprtn2mzqt.py\", line\
    \ 53, in <module>\n    test_check()\n  File \"/tmp/tmprtn2mzqt.py\", line 51,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmprtn2mzqt.py\", line 38,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    arr = sorted(arr)\n    if len(arr) <= k:\n\
    \        return arr\n    left, right = 0, len(arr)-1\n    while right - left >\
    \ 1:\n        mid = (left + right) // 2\n        if arr[mid] < arr[left]:\n  \
    \          left = mid + 1\n        elif arr[mid] > arr[right]:\n            right\
    \ = mid - 1\n        else:\n            right = mid\n    if right - left <= k:\n\
    \        return arr[left:right+1]\n    else:\n        left = max(left, left)\n\
    \        right = min(right, right)\n        return [arr[left]] + maximum(arr[left\
    \ + 1:right + 1], k - 1)\n\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpelcpokt3.py\", line\
    \ 57, in <module>\n    test_check()\n  File \"/tmp/tmpelcpokt3.py\", line 55,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpelcpokt3.py\", line 43,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    # \u65B9\u6CD5\u4E00\uFF1A\u76F4\u63A5\
    \u6BD4\u8F83\n    # def maximum(arr: List[int], k: int) -> List[int]:\n    # \
    \    \"\"\"\n    #     Given an array arr of integers and a positive integer k,\
    \ return a sorted list \n    #     of length k with the maximum k numbers in arr.\n\
    \n    #     Example 1:\n\n    #     \n    #     Example 2:\n\n    #     \n   \
    \ #     Example 3:\n\n    #     \n    #     Note:\n    #         1. The length\
    \ of the array will be in the range of [1, 1000].\n    #         2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n    #         3. 0 <= k\
    \ <= len(arr)\n    #     \"\"\"\n    #     n = len(arr)\n    #     if k <= 0 or\
    \ n <= k:\n    #         return []\n    #     if k == 1:\n    #         return\
    \ [arr[0]]\n    #     if arr[0] > arr[k - 1]:\n    #         return [arr[k - 1]]\
    \ + maximum(arr[0:k - 1], k - 2)\n    #     else:\n    #         return maximum(arr[0:k\
    \ - 1], k)\n\n    # \u65B9\u6CD5\u4E8C\uFF1A\u5229\u7528\u6392\u5E8F\u7684\u4F18\
    \u5316\n    import heapq\n    def maximum2(arr: List[int], k: int) -> List[int]:\n\
    \        \"\"\"\n        Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n        of length k with the maximum k numbers in\
    \ arr.\n\n        Example 1:\n\n        \n        Example 2:\n\n        \n   \
    \     Example 3:\n\n        \n        Note:\n            1. The length of the\
    \ array will be in the range of [1, 1000].\n            2. The elements in the\
    \ array will be in the range of [-1000, 1000].\n            3. 0 <= k <= len(arr)\n\
    \        \"\"\"\n        n = len(arr)\n        if k <= 0 or n <= k:\n        \
    \    return []\n        if k == 1:\n            return [arr[0]]\n        if arr[0]\
    \ > arr[k - 1]:\n            heapq.heappushpop(arr, 0)\n            heapq.heapify(arr)\n\
    \            return maximum2(arr, k - 1)\n        else:\n            return maximum2(arr,\
    \ k)\n\n    # \u65B9\u6CD5\u4E09\uFF1A\u5229\u7528\u6392\u5E8F\u7684\u4F18\u5316\
    \n    # def maximum3(arr: List[int], k: int) -> List[int]:\n    #     \"\"\"\n\
    \    #     Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    #     of length k with the maximum k numbers in arr.\n\n    #   \
    \  Example 1:\n\n    #     \n    #     Example 2:\n\n    #     \n    #     Example\
    \ 3:\n\n    #     \n    #     Note:\n    #         1. The length of the array\
    \ will be in the range of [1, 1000].\n    #         2. The elements in the array\
    \ will be in the range of [-1000, 1000].\n    #         3. 0 <= k <= len(arr)\n\
    \    #     \"\"\"\n    #     n = len(arr)\n    #     if k <= 0 or n <= k:\n  \
    \  #         return []\n    #     if k == 1:\n    #         return [arr[0]]\n\
    \    #     if arr[0] > arr[k - 1]:\n    #         arr[0], arr\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl4efodpf.py\", line\
    \ 129, in <module>\n    test_check()\n  File \"/tmp/tmpl4efodpf.py\", line 127,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpl4efodpf.py\", line 114,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr)[-k:]\n</cell>\n<cell>\n\
    arr = [-1000, -100, 1, 2, 3, 4, 5]\nk = 4\n\nmaximum([1, 2, 3, 4, 5], 3)\n</cell>\n\
    <text>\n\u9898\u76EE #9: \u6700\u5927\u5B50\u5E8F\u548C\n\n</text>\n<cell>\nfrom\
    \ typing import List\n\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbjeejbwd.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not 1 <= k <= len(arr):\n        return\
    \ \"out of range\"\n    \n    res = []\n    for num in arr:\n        res.append(num)\n\
    \n    return sorted(res, reverse=True)[:k]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp16gcw36n.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp16gcw36n.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp16gcw36n.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    arr=sorted(arr)\n    return arr[:k]\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpmwyxnchy.py\", line 25\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n    \n\ndef check(candidate):\n  \
    \  assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxzjvydmi.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpxzjvydmi.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpxzjvydmi.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    length = len(arr)\n    result = [0 for _\
    \ in range(k)]\n    max_elements = arr[0]\n    i = 0\n\n    while i < length:\n\
    \        if arr[i] > max_elements:\n            max_elements = arr[i]\n      \
    \      j = i\n\n            while j < length:\n                if arr[j] > max_elements:\n\
    \                    max_elements = arr[j]\n                j += 1\n\n       \
    \ i += 1\n\n    result[i] = max_elements\n\n    return result\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpplx4aqd6.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmpplx4aqd6.py\", line 57,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpplx4aqd6.py\", line 44,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmpplx4aqd6.py\"\
    , line 39, in maximum\n    result[i] = max_elements\nIndexError: list assignment\
    \ index out of range\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqyw1uam5.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpqyw1uam5.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqyw1uam5.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<text>\nNext steps\nNow that\
    \ you have completed your Maximum Subarray problem, you can turn to the Minimax\
    \ problem.  \nIn the minimax problem, you take the highest possible k number and\
    \ solve the problem using that number as the k.  Then use the answer to this problem\
    \ to solve a smaller version of the problem.  There are many ways to solve the\
    \ smaller version of the problem, but minimax is a good way to solve most problems.\n\
    \nIn the cell below, I've provided the pseudocode for a recursive algorithm that\
    \ will solve the minimax problem.  You can see that there are three parts to this\
    \ algorithm: one part that finds the best possible value, another part that finds\
    \ the next best possible value, and the third part that finds the best possible\
    \ k.  To make the algorithm more efficient, we can eliminate the third part. \
    \ In other words, we can make our algorithm more memory efficient.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdmt25na8.py\", line 29\n    In the cell below, I've provided\
    \ the pseudocode for a recursive algorithm that will solve the minimax problem.\
    \  You can see that there are three parts to this algorithm: one part that finds\
    \ the best possible value, another part that finds the next best possible value,\
    \ and the third part that finds the best possible k.  To make the algorithm more\
    \ efficient, we can eliminate the third part.  In other words, we can make our\
    \ algorithm more memory efficient.\n                        ^\nSyntaxError: unterminated\
    \ string literal (detected at line 29)\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u65B9\u6CD5\u4E00\uFF1A\u4F7F\u7528 list\
    \ \u6392\u5E8F\uFF0C\u7136\u540E\u53D6 k \u4E2A\u6700\u5927\u7684\u6570\n    \n\
    \    # \u65B9\u6CD5\u4E8C\uFF1A\u4F7F\u7528 heap \u548C maxheap\n    \n    \n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyvg2p65j.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpyvg2p65j.py\", line 41,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpyvg2p65j.py\", line 28,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    if not k <= len(arr):\n        return\
    \ None\n    \n    left = arr[0]\n    right = arr[0]\n    \n    for i in range(1,\
    \ k):\n        if arr[i] > right:\n            right = arr[i]\n        elif arr[i]\
    \ < left:\n            left = arr[i]\n        elif arr[i] == left:\n         \
    \   left = arr[i]\n        elif arr[i] == right:\n            right = arr[i]\n\
    \            \n    return [left, right]\n    \n            \ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppjr8s38c.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmppjr8s38c.py\", line 56,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmppjr8s38c.py\", line 43,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # M1. \u66B4\u529B\n    arr = sorted(arr)\n\
    \    return arr[k:] + arr[:k]\n    # M2. \u4F18\u5316\u65B9\u6CD5\n    # max_index\
    \ = len(arr) - 1\n    # return arr[max_index - k:] + arr[:max_index - k]\n\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_896hpoc.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmp_896hpoc.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_896hpoc.py\", line 31,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    arr = sorted(arr)\n    \n    if k\
    \ > len(arr):\n        return []\n    \n    maximums = arr[:k]\n    \n    for\
    \ i in range(k, len(arr)):\n        if arr[i] > maximums[-1]:\n            maximums.append(arr[i])\n\
    \    \n    return maximums\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4wo71paj.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp4wo71paj.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4wo71paj.py\", line 38,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\"\"\"\n    def maximum(arr: List[int],\
    \ k: int) -> List[int]:\n        \"\"\"\n    Given an array arr of integers and\
    \ a positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example\
    \ 3:\n\n    \n    Note:\n        1. The length of the array will be in the range\
    \ of [1, 1000].\n        2. The elements in the array will be in the range of\
    \ [-1000, 1000].\n        3. 0 <= k <= len(arr)\n        \"\"\"\n        pass\n\
    \"\"\"\n    def maximumTwo(arr: List[int], k: int) -> List[int]:\n        \"\"\
    \"\n    Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\
    \n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n        1.\
    \ The length of the array will be in the range of [1, 10^4].\n        2. The elements\
    \ in the array will be in the range of [-10^4, 10^4].\n        3. 0 <= k <= len(arr)\n\
    \        \"\"\"\n        pass\n\"\"\"\n    def maximumThree(arr: List[int], k:\
    \ int) -> List[int]:\n        \"\"\"\n    Given an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example\
    \ 3:\n\n    \n    Note:\n        1. The length of the array will be in the range\
    \ of [1, 10^4].\n        2. The elements in the array will be in the range of\
    \ [-10^4, 10^4].\n        3. 0 <= k <= len(arr)\n        \"\"\"\n        pass\n\
    \"\"\"\n    def maximumFour(arr: List[int], k: int) -> List[int]:\n        \"\"\
    \"\n    Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\
    \n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n        1.\
    \ The length of the array will be in the range of [1, 10^4].\n        2. The elements\
    \ in the array will be in the range of [-10^4, 10^4].\n        3. 0 <= k <= len(arr)\n\
    \        \"\"\"\n        pass\n\"\"\"\n    def maximumFive(arr: List[int], k:\
    \ int) -> List[int]:\n        \"\"\"\n    Given an array arr of integers and a\
    \ positive integer k, return a sorted list \n    of length k with the maximum\
    \ k numbers in arr.\n\n    Example 1:\n\n    \n    Example 2:\n\n    \n    Example\
    \ 3:\n\n    \n    Note:\n        1. The length of the array will be in the range\
    \ of [1, 10^4].\n        2. The elements in the array will be in the range of\
    \ [-10^4, 10^4].\n        3. 0 <= k \ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxouauhx1.py\", line 26\n    Given an array arr of integers\
    \ and a positive integer k, return a sorted list \nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\narr = [1, -4, 7,\
    \ 2, -6, 4, 3]\nk = 3\n\nmaximum = maximum(arr, k)\nmaximum\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n \
    \   assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp460gusx5.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return list(sorted(arr)[-k:])\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk1mltg55.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if k >= len(arr):\n        return arr\n\
    \    arr_max = arr[:]\n    arr_max.sort()\n    i = 0\n    while i < len(arr_max):\n\
    \        if arr_max[i] == arr_max[-1]:\n            del arr_max[i]\n         \
    \   i = i - 1\n        i += 1\n    return arr_max\n\ndef check(candidate):\n \
    \   assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvtvgbfgn.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmpvtvgbfgn.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvtvgbfgn.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15v9lmn5.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp15v9lmn5.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp15v9lmn5.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    \n    return\
    \ sorted(arr, key=lambda x: -x)[:k]\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_za2xmjb.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp_za2xmjb.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_za2xmjb.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not arr or k > len(arr):\n        return\
    \ []\n    if k == 1:\n        return arr\n    \n    less = []\n    greater = []\n\
    \    \n    for i in range(len(arr)):\n        if arr[i] < arr[0]:\n          \
    \  less.append(arr[i])\n        else:\n            greater.append(arr[i])\n  \
    \  \n    arr = less + greater + arr[ : k - 1 ]\n    \n    return arr\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmh3m7cv6.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmpmh3m7cv6.py\", line 54,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmh3m7cv6.py\", line 41,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # code here\n    arr = sorted(arr)\n   \
    \ return arr[-k:]\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphose5c3b.py\", line 25\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    max = arr[0]\n    maximums = []\n    for\
    \ i in range(1,len(arr)):\n        if arr[i] > max:\n            maximums = [arr[i]]\n\
    \            max = arr[i]\n        elif arr[i] == max:\n            maximums.append(arr[i])\n\
    \    return maximums\n\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk159r5in.py\", line\
    \ 48, in <module>\n    test_check()\n  File \"/tmp/tmpk159r5in.py\", line 46,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpk159r5in.py\", line 33,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u6700\u591A\u7684k\u4E2A\u6570\n    top\
    \ = []\n    # \u5C06arr\u4E2D\u6700\u5927\u7684k\u4E2A\u6570\u653E\u5230top\u4E2D\
    \n    for i in range(len(arr)):\n        # \u53D6\u51FA\u6570\u7EC4\u4E2D\u6700\
    \u5927\u7684k\u4E2A\u6570\uFF0C\u5E76\u653E\u5230top\u4E2D\n        top.append(max(arr[:k]))\n\
    \        # \u5220\u9664\u6570\u7EC4\u4E2D\u6700\u5927\u7684k\u4E2A\u6570\n   \
    \     arr.remove(max(arr[:k]))\n\n    # \u5C06top\u8FD4\u56DE\u7ED3\u679C\u8FD4\
    \u56DE\n    return top\n    \ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_5wbkvht.py\", line\
    \ 50, in <module>\n    test_check()\n  File \"/tmp/tmp_5wbkvht.py\", line 48,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp_5wbkvht.py\", line 35,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def maximumHelper(arr: list, k: int) ->\
    \ list:\n        result = []\n        for i in range(k):\n            temp = max(arr)\n\
    \            result.append(temp)\n            arr.remove(temp)\n        return\
    \ result\n    return maximumHelper(arr,k)\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdyffwa3a.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpdyffwa3a.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdyffwa3a.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15v9lmn5.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp15v9lmn5.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp15v9lmn5.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdisx3wwz.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpdisx3wwz.py\", line 39,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpdisx3wwz.py\", line 26,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    if not arr or len(arr) == 0:\n   \
    \     return []\n\n    if k > len(arr):\n        return arr\n\n    if k == 0:\n\
    \        return arr\n\n    if k == 1:\n        return [arr[0]]\n\n    arr1 = maximumHelper(arr,\
    \ k, [])\n\n    arr2 = maximumHelper(arr[:k], len(arr) - k, arr1)\n\n    return\
    \ arr2 + arr1\n\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp46i7fst4.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmp46i7fst4.py\", line 56,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp46i7fst4.py\", line 43,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp46i7fst4.py\"\
    , line 35, in maximum\n    arr1 = maximumHelper(arr, k, [])\nNameError: name 'maximumHelper'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    import functools\n    \n    if not 0 <=\
    \ k <= len(arr):\n        return arr\n    \n    return sorted(arr, key=lambda\
    \ x:-x)[:k]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpztap2566.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpztap2566.py\", line 43,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpztap2566.py\", line 30,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u65B9\u6CD5\u4E00\uFF1A\u52A8\u6001\u89C4\
    \u5212\n    # \u52A8\u6001\u89C4\u5212\u7684\u597D\u5904\u5C31\u662F\uFF1A\u6BCF\
    \u4E00\u4E2A\u6570\u80FD\u5206\u89E3\u51FA\u6765\uFF0C\u4ECE\u800C\u83B7\u5F97\
    \u66F4\u5927\u7684\u6700\u5927\u503C\u7684\u6570\u3002\n    # \u4E5F\u5C31\u662F\
    \u8BF4\uFF0C\u5982\u679C\u6211\u4EEC\u627E\u5230\u4E86\u4E00\u7EC4\u6700\u5927\
    \u503C\u7684\u6570\uFF0C\u6211\u4EEC\u5C31\u53EF\u4EE5\u5F97\u51FA\u5176\u4ED6\
    \u7684\u6700\u5927\u503C\u7684\u6570\u3002\n    # \u65F6\u95F4\u590D\u6742\u5EA6\
    O(n) \u7A7A\u95F4\u590D\u6742\u5EA6O(n)\n    # \u5982\u679Ck\u4E2A\u6570\u6BD4\
    array\u5C11\u4E00\u4E9B\uFF0C\u90A3\u4E48\u6211\u4EEC\u5C06\u5B83\u4EEC\u5206\u89E3\
    \u51FA\u6765\uFF0C\u53EF\u4EE5\u6700\u5C0F\u7684k\u4E2A\u6570\u548C\u6700\u5927\
    \u7684k\u4E2A\u6570\uFF0C\u7136\u540E\u6C42\u548C\u6700\u5927\u7684k\u4E2A\u6570\
    \n    # \u7136\u540E\u5BF9\u8FD9\u4E24\u4E2A\u6570\u8FDB\u884C\u6C42\u548C\n \
    \   # \u5982\u679Ck\u4E2A\u6570\u6BD4array\u591A\u4E00\u4E9B\uFF0C\u90A3\u4E48\
    \u6211\u4EEC\u5C06\u5B83\u4EEC\u5206\u89E3\u51FA\u6765\uFF0C\u53EF\u4EE5\u6700\
    \u5C0F\u7684k\u4E2A\u6570\u548C\u6700\u5927\u7684k\u4E2A\u6570\uFF0C\u7136\u540E\
    \u6C42\u548C\u6700\u5927\u7684k\u4E2A\u6570\n    # \u7136\u540E\u5BF9\u8FD9\u4E24\
    \u4E2A\u6570\u8FDB\u884C\u6C42\u548C\n    # \u65F6\u95F4\u590D\u6742\u5EA6O(n)\
    \ \u7A7A\u95F4\u590D\u6742\u5EA6O(n)\n    # \u65F6\u95F4\u590D\u6742\u5EA6\u4E3A\
    O(n^2) \u7A7A\u95F4\u590D\u6742\u5EA6\u4E3AO(n)\n    # \u4F18\u70B9\u662F\uFF0C\
    \u5982\u679Ck\u4E2A\u6570\u6BD4array\u5C11\u4E00\u4E9B\uFF0C\u6211\u4EEC\u53EF\
    \u4EE5\u6700\u5C0F\u7684k\u4E2A\u6570\u548C\u6700\u5927\u7684k\u4E2A\u6570\uFF0C\
    \u7136\u540E\u6C42\u548C\u6700\u5927\u7684k\u4E2A\u6570\n    # \u65F6\u95F4\u590D\
    \u6742\u5EA6\u4E3AO(nlogn) \u7A7A\u95F4\u590D\u6742\u5EA6O(1)\n    # \u4F18\u70B9\
    \u662F\uFF0C\u5982\u679Ck\u4E2A\u6570\u6BD4array\u591A\u4E00\u4E9B\uFF0C\u6211\
    \u4EEC\u53EF\u4EE5\u6700\u5C0F\u7684k\u4E2A\u6570\u548C\u6700\u5927\u7684k\u4E2A\
    \u6570\uFF0C\u7136\u540E\u6C42\u548C\u6700\u5927\u7684k\u4E2A\u6570\n    # \u65F6\
    \u95F4\u590D\u6742\u5EA6\u4E3AO(nlogn) \u7A7A\u95F4\u590D\u6742\u5EA6O(n)\n  \
    \  # \u4F18\u70B9\u662F\uFF0C\u5982\u679Ck\u4E2A\u6570\u6BD4array\u5C11\u4E00\u4E9B\
    \uFF0C\u6211\u4EEC\u53EF\u4EE5\u6700\u5C0F\u7684k\u4E2A\u6570\u548C\u6700\u5927\
    \u7684k\u4E2A\u6570\uFF0C\u7136\u540E\u6C42\u548C\u6700\u5927\u7684k\u4E2A\u6570\
    \n    # \u65F6\u95F4\u590D\u6742\u5EA6\u4E3AO(n^2) \u7A7A\u95F4\u590D\u6742\u5EA6\
    O(n)\n    \n    # \u65B9\u6CD5\u4E8C\uFF1A\u9488\u5BF9\u6700\u5927\u7684\u6570\
    k\uFF0C\u627E\u6700\u5C0F\u7684\u6570\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphy04e_45.py\", line\
    \ 56, in <module>\n    test_check()\n  File \"/tmp/tmphy04e_45.py\", line 54,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmphy04e_45.py\", line 41,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    stack = []\n    # sort the array (O(nlogn))\n\
    \    for value in arr:\n        stack.append(value)\n    \n    \n    while len(stack)>k:\n\
    \        top_index = stack.pop()\n        topValue = stack.pop()\n        \n \
    \       if topValue > topIndex:\n            stack.insert(0,topValue)\n      \
    \      stack.insert(0,topIndex)\n            \n    \n    return stack\nprint(maximum([5,4,3,2,1],3))\n\
    print(maximum([5,4,3,2,1],0))\nprint(maximum([5,4,3,2,1],1))\nprint(maximum([5,4,3,2,1],2))\n\
    </cell>\n<text>\nExpected Result:\n[4, 3, 2, 1]\n[0, 1, 2, 3]\n[1, 3, 2, 4]\n\
    [3, 2, 4, 5]\n\n\n</text>\n<text>\n\nNote, k here means size of the list, and\
    \ means the number of integers you want to return.\n\n\n</text>\n<text>\nQuestion\
    \ 7\nGiven an integer n, return True if there exist two indices i and j in the\
    \ array arr that give the maximum value in arr. \nYou may assume arr is zero-indexed\
    \ and i < j.\n\nExample 1:\n\nInput: [1,3,5,6], 2\nOutput: True\nExplanation:\
    \ There are two triplets in the array: [1,3,5] and [1,3,6] \n             where\
    \ both give the maximum value.\n\nExample 2:\n\nInput: [1,3,5,6], 1\nOutput: False\n\
    \n</text>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3)\
    \ == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpd6ifqx63.py\", line 42\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return arr[-k:]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpetxtso8j.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # code here\n    \n    return sorted(arr,\
    \ key=lambda x: arr[x], reverse=False)[k:]\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4_hkzax7.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp4_hkzax7.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4_hkzax7.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  File \"/tmp/tmp4_hkzax7.py\"\
    , line 24, in maximum\n    return sorted(arr, key=lambda x: arr[x], reverse=False)[k:]\n\
    \  File \"/tmp/tmp4_hkzax7.py\", line 24, in <lambda>\n    return sorted(arr,\
    \ key=lambda x: arr[x], reverse=False)[k:]\nIndexError: list index out of range\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeh1sd55z.py\", line 23\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # Write your code here.\n    if len(arr)\
    \ <= k:\n        return arr\n    \n    current = arr[0]\n    maximum = [current]\n\
    \    for i in range(1, len(arr)):\n        if arr[i] > maximum[-1]:\n        \
    \    maximum.append(arr[i])\n    return maximum\n\ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8fb61laf.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmp8fb61laf.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8fb61laf.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, key=lambda x: -x)[:k]\n\
    </code>\n<|/ a |>\n<| c |>\nI edited my question with the full code.\n<|/ c |>\n\
    <| a dscore=1 |>\nYou can use the max function\n<code>\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppu9oc64v.py\", line 23\n    </code>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    return sorted(arr, reverse=True)[:k]\ndef\
    \ check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n   \
    \ assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2,\
    \ -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3], 3)\
    \ == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert\
    \ candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2) == [-4,\
    \ 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4877ph1w.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp4877ph1w.py\", line 37,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp4877ph1w.py\", line 24,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    # Solution 1 -- Brute force\n    #\
    \ Initialize a max_list and an index_list\n    max_list = [-1000 * i for i in\
    \ arr]\n    index_list = []\n    \n    # Initialize a counter \n    count = 0\n\
    \    \n    # Initialize a min_list and an index_list\n    min_list = [1000] *\
    \ k\n    index_list = []\n    \n    # Initialize a min_counter \n    min_counter\
    \ = 0\n    \n    # Find the max number in arr \n    for num in arr:\n        #\
    \ Increment the counter\n        count += 1\n    \n        # Update the max number\n\
    \        if num > max_list[count-1]:\n            max_list[count-1] = num\n  \
    \      \n        # Update the min number\n        if num < min_list[count-1]:\n\
    \            min_list[count-1] = num\n            \n        # Update index_list\
    \ \n        if num >= min_list[count-1] and num < max_list[count-1]:\n       \
    \     index_list.append(count)\n    \n    # Remove the unnecessary elements\n\
    \    index_list = index_list[min_counter:]\n    max_list = max_list[:index_list[min_counter]]\n\
    \    min_list = min_list[:index_list[min_counter]]\n    \n    # Solution 1 --\
    \ Brute force\n    # Sort the max_list \n    max_list.sort()\n    \n    # Sort\
    \ the min_list \n    min_list.sort()\n    \n    # Return the max_list + min_list\n\
    \    return max_list + min_list\n\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpos2f_8pp.py\", line\
    \ 87, in <module>\n    test_check()\n  File \"/tmp/tmpos2f_8pp.py\", line 85,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpos2f_8pp.py\", line 72,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not arr or k > len(arr):\n        return\
    \ arr\n    if k == 1:\n        return arr\n    max_num = arr[0]\n    for i in\
    \ range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n\
    \    if k == 2:\n        arr = sorted(arr)\n        return [arr[0], arr[-1]]\n\
    \    \n    # Get the k largest elements\n    arr = sorted(arr)\n    return arr[:k]\n\
    \ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n\
    \    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1,\
    \ 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n   \
    \ assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4], 2)\
    \ == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpwk793iuz.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpwk793iuz.py\", line 52,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpwk793iuz.py\", line 40,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    if len(arr)\
    \ <= k:\n        return arr\n    \n    pivot = arr[-1]\n    less, greater = [],\
    \ []\n    for i in range(0, len(arr)):\n        if arr[i] < pivot:\n         \
    \   less.append(arr[i])\n        else:\n            greater.append(arr[i])\n \
    \   \n    return maximum(less, k) + [pivot] + maximum(greater, k)\n\ndef check(candidate):\n\
    \    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4,\
    \ -4, 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvjdig77z.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmpvjdig77z.py\", line 50,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvjdig77z.py\", line 37,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    # write your code here\n    \n   \
    \ if len(arr) == 0:\n        return []\n    elif k > len(arr):\n        k = k\n\
    \    return sorted(arr, reverse = True)[:k]\n    \ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvmjwr4vi.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmpvmjwr4vi.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpvmjwr4vi.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    assert k <= len(arr)\n    \n    ans\
    \ = []\n    \n    max_num = 0\n    \n    i = 0\n    \n    while i <= len(arr)-k\
    \ and arr[i] < max_num:\n        i += 1\n        \n    while arr[i] < max_num:\n\
    \        ans.append(arr[i])\n        i += 1\n    \n    while i <= len(arr)-k:\n\
    \        ans.append(max_num)\n        i += 1\n        \n    return ans\n\nprint(maximum(arr\
    \ = [5, 8, 2, 1], k = 2))\n</cell>\n<text>\n\u6700\u540E\u4E00\u4E2A\u9898\n\n\
    </text>\n<cell>\nfrom typing import List, Tuple\n\ndef check(candidate):\n   \
    \ assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4,\
    \ 4], 2) == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n\
    \    assert candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert\
    \ candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5,\
    \ 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1,\
    \ 0, 2, 5, 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n\
    \    assert candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10],\
    \ 2) == [-10, 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\
    \ndef test_check():\n    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn1l64ppa.py\", line 45\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    import math\n    if not k<len(arr):\n  \
    \      return arr\n    max_num = arr[0]\n    ans = []\n    \n    for i in range(1,k):\n\
    \        max_num = math.fmax(arr[i],max_num)\n        ans.append(max_num)\n  \
    \      \n    return ans\n    \n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpe2vmctjz.py\", line 34\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not arr:\n        return []\n    elif\
    \ k > len(arr):\n        return maximum(arr[:], k)\n    elif k == len(arr):\n\
    \        return arr\n    elif k == 1 and arr[0] < arr[1]:\n        return arr\n\
    \    elif k == 1 and arr[0] > arr[1]:\n        return arr\n    else:\n       \
    \ high = []\n        low = arr[0]\n        for i in range(2, k):\n           \
    \ if arr[i] > low:\n                high.append(low)\n                low = arr[i]\n\
    \            else:\n                high.append(arr[i])\n        return maximum(arr,\
    \ k-1)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1el7tft_.py\", line\
    \ 59, in <module>\n    test_check()\n  File \"/tmp/tmp1el7tft_.py\", line 57,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp1el7tft_.py\", line 44,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    arr = sorted(arr)\n    ret_arr = [0]\
    \ * k\n    \n    for i in range(len(arr)):\n        for j in range(k):\n     \
    \       if arr[i] >= ret_arr[j]:\n                ret_arr[j] = arr[i]\n      \
    \          \n    return ret_arr\n\ndef check(candidate):\n    assert candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n \
    \   assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20,\
    \ 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8,\
    \ 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpes49tvgu.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpes49tvgu.py\", line 47,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpes49tvgu.py\", line 34,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # sort function definition below\n    #\
    \ ...\n    # ...\n    # ...\n    \n    # return the result of the sort function\n\
    \    return sorted(arr)[:k]\n\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4xofyjnr.py\", line 30\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    arr = sorted(arr)\n    \n    return\
    \ arr[:k]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgwrfuw6f.py\", line 26\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    answer: List[int] = []\n    arr = sorted(arr)\n\
    \    maximum = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > maximum:\n\
    \            maximum = arr[i]\n        if i < k:\n            answer.append(maximum)\n\
    \            maximum = arr[i]\n    answer.append(maximum)\n    return answer\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkrh64k26.py\", line 33\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    if len(arr) == 0:\n        return\
    \ []\n    \n    maximums, cur = 0, 0\n    \n    i = len(arr)\n    while i > 0:\n\
    \        if arr[cur] > arr[-1]:\n            arr[cur], arr[-1] = arr[-1], arr[cur]\n\
    \            maximums, cur = cur + 1, 0\n        \n        i -= 1\n        cur\
    \ += 1\n        \n    if maximums >= k:\n        maximums, _ = maximum(arr[:cur],\
    \ k)\n        \n    if maximums > 0:\n        return arr[:maximums]\n    else:\n\
    \        return arr\n\nprint(maximum([5,4,6,7], 3))\n</cell>\n<text>\n[Back]\n\
    \nProblem 9\nWrite a function that accepts a list and a number k and returns all\
    \ lists in arr that have exactly k members. You should return the list in sorted\
    \ order.\n\nExample 1:\n\nInput: arr = [4,5,6,7], k = 2\nOutput: [4,5]\nExample\
    \ 2:\n\nInput: arr = [4,5,6,7], k = 3\nOutput: [4,5,6]\nExample 3:\n\nInput: arr\
    \ = [1,2,3,4,5,6,7,8,9,10], k = 1\nOutput: [1,2,3,4,5,6,7,8,9,10]\nExplanation:\
    \ Since arr has 10 members, the result should contain all the numbers that have\
    \ k = 1 in arr. \nExample 4:\n\nInput: arr = [1,2,3,4,5,6,7,8,9,10], k = 6\nOutput:\
    \ []\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpc_2l0u59.py\", line 46\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    \n    # your code here\n    return sorted(arr,\
    \ reverse=True)[:k]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmej4tvcu.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpmej4tvcu.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpmej4tvcu.py\", line 27,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    def max_kth_smallest(arr: List[int], k:\
    \ int) -> List[int]:\n        \"\"\"\n        Do not change this function.\n \
    \       \"\"\"\n        return sorted(sorted(sorted(sorted(sorted(arr[:i]), key=lambda\
    \ x:x[0]), key=lambda x:x[1]), key=lambda x:x[2]), key=lambda x:x[3])[:k]\n  \
    \  \n    arr_len = len(arr)\n    if k >= arr_len:\n        return []\n    if k\
    \ == arr_len:\n        return arr[:k]\n    if arr_len == 1 and k == 0:\n     \
    \   return [0]\n    if arr_len < k:\n        k = arr_len\n    \n    if k == 0:\n\
    \        return arr\n    \n    if arr_len == 1:\n        if arr[0] > arr[1]:\n\
    \            return [arr[0]]\n        else:\n            return []\n    \n   \
    \ if k == 1:\n        if arr[0] < arr[1]:\n            return [arr[0]]\n     \
    \   else:\n            return []\n    \n    if arr_len >= 2:\n        if arr[0]\
    \ > arr[1]:\n            if arr[1] > arr[2]:\n                return [arr[1],\
    \ arr[2]]\n            else:\n                return []\n        else:\n     \
    \       if arr[0] < arr[1]:\n                return []\n    \n    \n    \n   \
    \ if arr_len > 2:\n        max_k = arr_len\n        \n        if arr_len > 2 and\
    \ arr[1] < arr[2]:\n            max_k = arr_len - 2\n            \n        if\
    \ arr_len > 2:\n            if arr[0] > arr[1]:\n                if arr[1] > arr[2]:\n\
    \                    if arr[2] > arr[3]:\n                        if arr[3] <\
    \ arr[4]:\n                            return max_kth_smallest(arr[:max_k], arr_len-3)\n\
    \                        else:\n                            return max_kth_smallest(arr[:max_k],\
    \ arr_len-1)\n                    else:\n                        return [arr[1],\
    \ arr[2]]\n                else:\n                    if arr[2] < arr[3]:\n  \
    \                      return [arr[1], arr[2]]\n                    else:\n  \
    \                      return [arr[1], arr[3]]\n            else:\n          \
    \      if arr[0] < arr[1]:\n                    if arr[1] < arr[2]:\n        \
    \                if arr[2] < arr[3]:\n                            if arr[3] <\
    \ arr[4]:\n                                return max_kth_smallest(arr[:max_k],\
    \ arr_len-3)\n                            else:\n                            \
    \    return max_kth_smallest(arr[:max_k], arr_len-1)\n                       \
    \ else:\n                            return max_kth_smallest(arr[:max_k], arr_len-2)\n\
    \                    else:\n                        return [arr[1], arr[2]]\n\
    \                else:\n                    if arr[0] < arr[1]:\n            \
    \            if arr[1] < arr[2]:\n                            if arr[2] < arr[3]:\n\
    \                                return max_kth_smallest(arr[:max_k], arr_len-3)\n\
    \                            else:\n                                return max_kth_smallest(arr[:max_k],\
    \ arr_len-1)\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqtr05e5e.py\", line\
    \ 122, in <module>\n    test_check()\n  File \"/tmp/tmpqtr05e5e.py\", line 120,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpqtr05e5e.py\", line 107,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoo50s4j6.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpoo50s4j6.py\", line 38,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpoo50s4j6.py\", line 25,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: 1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # \u66B4\u529B\u89E3\u6CD5\n    \"\"\"\n\
    \    i = 0\n    while i < len(arr):\n        if arr[i] > arr[i+1]:\n         \
    \   arr[i], arr[i+1] = arr[i+1], arr[i]\n        i += 1\n    return arr[k:len(arr)]\n\
    \    \"\"\"\n\n    # \u5FEB\u6162\u89E3\u6CD5\n    \"\"\"\n    i = 0\n    while\
    \ i < len(arr):\n        if arr[i] > arr[i+1]:\n            arr[i], arr[i+1] =\
    \ arr[i+1], arr[i]\n        else:\n            if i+1 < len(arr) and arr[i] >\
    \ arr[i+1]:\n                arr[i], arr[i+1] = arr[i+1], arr[i]\n        i +=\
    \ 1\n    return arr[k:len(arr)]\n    \"\"\"\n\n    # \u7B80\u5355\u89E3\u6CD5\n\
    \    \"\"\"\n    i = 0\n    while i < len(arr):\n        if arr[i] > arr[i+1]:\n\
    \            arr[i], arr[i+1] = arr[i+1], arr[i]\n        i += 1\n    return arr[k:]\n\
    \    \"\"\"\n\narr = [10, 9, 8, 7, 5, 3, 2]\nk = 4\nprint(maximum(arr, k))\n</cell>\n\
    <text>\n\u6700\u5C0F\u503C\u6392\u5E8F\n\n</text>\n<cell>\nfrom typing import\
    \ List\n\ndef check(candidate):\n    assert candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1, 2, -3], 4) ==\
    \ [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8,\
    \ 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5]\n\
    \    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4, -4],\
    \ 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpqg40di5i.py\", line 58\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    if not arr or not k or k >= len(arr):\n\
    \        return []\n    less = [i for i in arr if i < arr[k]]\n    greater = [i\
    \ for i in arr if i >= arr[k]]\n    if len(less) > len(greater):\n        return\
    \ less\n    else:\n        return greater\n\ndef check(candidate):\n    assert\
    \ candidate([-3, -4, 5], 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2)\
    \ == [4, 4]\n    assert candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert\
    \ candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5,\
    \ 3, -10], 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert\
    \ candidate([4, -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10,\
    \ 10]\n    assert candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n\
    \    check(maximum)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jnmib89.py\", line\
    \ 47, in <module>\n    test_check()\n  File \"/tmp/tmp8jnmib89.py\", line 45,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmp8jnmib89.py\", line 32,\
    \ in check\n    assert candidate([-3, -4, 5], 3) == [-4, -3, 5]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
- exit_code: -1
  program: "from typing import List\n\ndef maximum(arr: List[int], k: int) -> List[int]:\n\
    \    \"\"\"\n    Given an array arr of integers and a positive integer k, return\
    \ a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example\
    \ 1:\n\n    \n    Example 2:\n\n    \n    Example 3:\n\n    \n    Note:\n    \
    \    1. The length of the array will be in the range of [1, 1000].\n        2.\
    \ The elements in the array will be in the range of [-1000, 1000].\n        3.\
    \ 0 <= k <= len(arr)\n    \"\"\"\n    # write your code here\n    arr = sorted(arr)\n\
    \    return arr[0:k]\n\ndef check(candidate):\n    assert candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5]\n    assert candidate([4, -4, 4], 2) == [4, 4]\n    assert\
    \ candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2]\n    assert candidate([123, -123,\
    \ 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n    assert candidate([-123, 20, 0, 1,\
    \ 2, -3], 4) == [0, 1, 2, 20]\n    assert candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15]\n    assert candidate([-1, 0, 2, 5, 3, -10],\
    \ 2) == [3, 5]\n    assert candidate([1, 0, 5, -7], 1) == [5]\n    assert candidate([4,\
    \ -4], 2) == [-4, 4]\n    assert candidate([-10, 10], 2) == [-10, 10]\n    assert\
    \ candidate([1, 2, 3, -23, 243, -400, 0], 0) == []\n\ndef test_check():\n    check(maximum)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcvl0anqx.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpcvl0anqx.py\", line 40,\
    \ in test_check\n    check(maximum)\n  File \"/tmp/tmpcvl0anqx.py\", line 28,\
    \ in check\n    assert candidate([4, -4, 4], 2) == [4, 4]\nAssertionError\n"
  stdout: ''
  timestamp: 1659823141
