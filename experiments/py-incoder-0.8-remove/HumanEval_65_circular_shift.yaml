name: HumanEval_65_circular_shift
language: py
prompt: "def circular_shift(x: int, shift: int) -> str:\n    \"\"\"Circular shift\
  \ the digits of the integer x, shift the digits right by shift\n    and return the\
  \ result as a string.\n    If shift > number of digits, return digits reversed.\n\
  \            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate(100, 2) == '001'\n    assert candidate(12,\
  \ 2) == '12'\n    assert candidate(97, 8) == '79'\n    assert candidate(12, 1) ==\
  \ '21'\n    assert candidate(11, 101) == '11'\n\ndef test_check():\n    check(circular_shift)\n\
  \ntest_check()\n"
completions: ["    return \"\".join([str((int(c) + shift) % 10) for c in str(x)[::-1]])\n\
    \n", "    # Circularly shift digits in string.\n    digits = \"\"\n    digits_length\
    \ = len(x)\n    shift_amount = shift % digits_length\n    for i in range(digits_length):\n\
    \        # Circularly shift digits in digits_length.\n        digits = digits[:shift_amount\
    \ - i] + x[i + shift_amount:digits_length] + digits[shift_amount - i:]\n    return\
    \ digits\n\n", "    return f'{x//10**shift}{x%10**shift}'\n\n", "    # Cast to\
    \ a string and reverse\n    lst = str(x)[::-1]\n    # Shift \"digits\" to the\
    \ right\n    return lst[shift:] + lst[:shift]\n", "    digits = str(x)\n    if\
    \ shift > 0:\n        if shift % len(digits) > 0:\n            raise ValueError(\"\
    shift must be multiple of len(digits)\")\n        return digits + str(int(digits[len(digits)\
    \ - shift: len(digits)])) + digits[:-shift]\n    else:\n        return digits\
    \ + digits[: -shift % len(digits)]\n\n\n@njit(fastmath=True)", "    if shift ==\
    \ 0:\n        return x\n    else:\n        new_x = \"\"\n        if x >= 9:\n\
    \            new_x = str(x%10) + circular_shift(int(x/10), shift-1)\n        else:\n\
    \            for i in range(shift, abs(shift)):\n                new_x += str(x%10)\n\
    \                x = int(x / 10)\n            if x >= 0:\n                new_x\
    \ += str(x)\n            else:\n                new_x = str(x)[::-1] + new_x\n\
    \        return new_x\n\n", "    return f\"{x//10**shift}\" + f\"{x%10**shift}\"\
    \n", "    digits = str(x)\n    shift = shift % len(digits)\n    return digits[shift:]\
    \ + digits[:shift]\n\n", "    digits = str(x)\n    if len(digits) > shift:\n \
    \       digits = digits[:shift]\n        digits = digits[::-1] + digits[:shift]\n\
    \    else:\n        digits = digits[:shift]\n    return digits\n\n", "    xstring\
    \ = str(x)\n    \n    if len(xstring) <= shift:\n        return ''.join(xstring)\n\
    \    else:\n        digits = list(xstring)\n        digits.reverse()\n       \
    \ digits.extend(list('0'*(shift-len(xstring))))\n        digits.reverse()\n  \
    \      return ''.join(digits)\n\n", "    if shift >= len(x):\n        return intToBase(x,\
    \ len(x))\n    return ''.join(str(int(ix)<<shift) for ix in x)\n\n", "    if shift\
    \ > len(str(x)):\n        return str(x)[::-1]\n    result = str(x)\n    left_shift\
    \ = len(result) - len(str(x)) - shift\n    right_shift = shift - len(str(x))\n\
    \    result = result[0:left_shift] + result[right_shift:]\n    return result\n\
    \n", "    digits_reversed = str(x)[::-1]\n    digits_shifted = str(x)[shift:]\
    \ + str(x)[:shift]\n    return digits_shifted\n", "    rev_str = str(x)[::-1]\n\
    \    l = len(rev_str)\n    left = rev_str[l:]\n    right = rev_str[:l - shift]\n\
    \    left = '0' * (shift - len(left)) + left\n    right = '0' * (shift - len(right))\
    \ + right\n    return left + right\n\n", "    shifted_digits = \"\"\n\n    while\
    \ x != 0:\n        digit = x % 10\n        shifted_digits = str(digit) + shifted_digits\n\
    \        x //= 10\n\n    return shifted_digits[::-1]\n\n", "    int_str = str(x)\n\
    \    if shift > len(int_str):\n        shift = len(int_str) - 1\n    return \"\
    \".join(int_str[shift:] + int_str[:shift])\n\n", "    digits = str(x)\n    if\
    \ len(digits) < shift:\n        digits = digits + ('0' * shift)\n    digits.reverse()\n\
    \    return digits\n\n", "    digits = list(x)\n    if shift > len(digits):\n\
    \        shift = len(digits)\n    if shift < 0:\n        raise ValueError(\"shift\
    \ cannot be negative\")\n    if shift == 0:\n        return \"\".join(map(str,\
    \ digits))\n    result = []\n    for d in digits[shift::]:\n        result.append(d)\n\
    \    digits[shift::] = result\n    return \"\".join(map(str, digits))\n\n", " \
    \   digits = list(map(int, str(x)))\n    digits.extend([0] * shift)\n    digits.reverse()\n\
    \    return str(digits)\n\n</cell>\n<cell>\ncircular_shift(0, 2)\n</cell>\n<cell>\n\
    circular_shift(2, 2)\n</cell>\n<cell>\ncircular_shift(3, 2)\n</cell>\n<cell>\n\
    circular_shift(5, 2)\n</cell>\n<cell>\ncircular_shift(10, 2)\n</cell>\n<cell>\n\
    circular_shift(11, 2)\n</cell>\n<text>\nReversing the digits of the integer\n\
    The previous section on how to add and subtract integers has been useful to understand\
    \ the different ways of counting numbers. However, it is not obvious to see how\
    \ to reverse the digits of the integer. For example, if we want to add 1 and 3,\
    \ we could start from the left. Adding 1 and 3, we would arrive at 11, and 11\
    \ + 3 = 12, which gives the desired answer 12. However, if we start from the right,\
    \ we would arrive at 11, adding 11 and 3, we would arrive at 21 and then 21 +\
    \ 3 = 22, which is not what we want. Instead, we want 22. We can do this by first\
    \ reversing the digits of x and y and then adding them. We can reverse the digits\
    \ by converting them to strings and then using [::-1].\n\nWe can see how to reverse\
    \ the digits of a number by looking at the first three digits of the number. For\
    \ example, if the number were 1000, we would look at the first three digits of\
    \ the reversed 1000, and get 1100, which then gives the desired answer 22. Similarly,\
    \ if the number were 1223, we would look at the first three digits of the reversed\
    \ 1223, and get 122, which then gives the desired answer 14.\n\n\n</text>\n<cell>",
  "    length = len(str(x))\n    if shift > length:\n        shift = length\n    if\
    \ shift < 0:\n        shift = -shift\n    if shift == 0:\n        return x\n \
    \   elif shift > 0:\n        return \"{}{}{}\".format(\n            x,\n     \
    \       \"\".join([str(int(digit) * int(pow(10, length - 1 - shift))\n       \
    \               for digit in str(x)[shift:0:-1]]),\n            \"\".join([str(int(digit)\
    \ * (pow(10, length) + int(pow(10, length - shift)))\n                      for\
    \ digit in str(x)[0:shift]])\n        )\n    else:\n        return \"{}{}{}\"\
    .format(\n            x,\n            \"\".join([str(int(digit) * int(pow(10,\
    \ length - shift))\n                      for digit in str(x)[shift:0:-1]]),\n\
    \            \"\".join([str(int(digit) * (pow(10, length) + int(pow(10, length\
    \ - shift)))\n                      for digit in str(x)[0:shift]])\n        )\n\
    </code>\n<|/ a tags=python,python-3.x,string,numbers dscore=1 |>\n<| c |>\nThis\
    \ is so beautifully condensed, thank you. Do you know any way to make it work\
    \ when the number is negative?\n<|/ c |>\n<| c |>\njust change the first line\
    \ to `if x < 0:`\n<|/ c |>\n<| c |>\nThis fails to handle negative numbers. `-(-3)`\
    \ is `-3`.\n<|/ c |>\n<| a tags=python,python-3.x,string,numbers |>\nThis works:\n\
    <code>", "    \n    if shift < 0:\n        raise ValueError(f\"shift of {shift}\
    \ is not valid\")\n    \n    # Shift to the right\n    if shift > 0:\n       \
    \ # Use for loop to shift to the right n times...\n        for _ in range(shift):\n\
    \            x = (x // 10) + (x % 10)\n    \n    # Shift to the left\n    else:\n\
    \        # Use for loop to shift to the left n times...\n        for _ in range(abs(shift)):\n\
    \            x = (x // 10) + (x % 10)\n    \n    return int(x) % 10\n", "    assert\
    \ 0 <= shift <= len(str(x))\n    return str(int(str(x)[shift:] + str(x)[:-shift]))\n\
    \n", "    digits = [int(c) for c in str(x)]\n    if shift > len(digits):\n   \
    \     shift = len(digits)\n    digits.reverse()\n    return ''.join(str(digits[-shift:]\
    \ + digits[:-shift]))\n\n", "    if len(x) > shift:\n        x -= shift\n    \
    \    shift %= len(x)\n        x = int(x)\n        shift = -shift\n        sign\
    \ = '-'\n    else:\n        shift = -shift\n        sign = ''\n    digits = []\n\
    \    while shift != 0:\n        digits.append(str(x % 10))\n        x = x // 10\n\
    \        shift -= 1\n    return sign + ''.join(reversed(digits))\n", "    if shift\
    \ == 0:\n        return x\n    digits = str(x)\n    if len(digits) <= shift:\n\
    \        return digits\n    else:\n        return digits[shift:] + digits[:shift]\n\
    \n", "    result = ''\n    while x > 0:\n        result = str(x % 10) + result\n\
    \        x = x // 10\n    while result and shift > 0:\n        result = result[-shift:]\
    \ + result\n        shift -= 1\n    return result\n\n", "    if shift > len(x):\n\
    \        return str(x)[::-1]\n    return str(x)[shift:] + str(x)[:shift]\n\n",
  "    if shift == 0:\n        return x\n    else:\n        return x // pow(10, shift)\
    \ * pow(10, shift - 1) // str(x % pow(10, shift))\n\n", "    try:\n        x_str\
    \ = str(x)\n        shift_str = str(shift)\n        length = len(x_str)\n    \
    \    if length > len(shift_str):\n            return x_str + shift_str\n     \
    \   else:\n            if shift < 0:\n                shift_str = shift_str[::-1]\n\
    \            return x_str[shift_str:] + x_str[:shift_str]\n    except:\n     \
    \   return \"\"\n", "    shift = abs(shift)\n    digits = []\n    for d in str(x):\n\
    \        if d != 0 and d != \"0\":\n            digits.append(d)\n    if len(digits)\
    \ > shift:\n        digits = digits[shift:] + digits[:shift]\n    elif len(digits)\
    \ < shift:\n        digits = digits[:shift]\n    else:\n        digits = digits[shift:]\
    \ + digits[:shift]\n    return ''.join(digits)\n", "    if shift > len(str(x)):\n\
    \        return \"\".join(str(x)[::-1][shift:])\n    else:\n        return \"\"\
    .join(str(x)[shift:])\n\n", "    x = str(x)\n    shift = str(shift)\n    if len(x)\
    \ <= len(shift):\n        shift_len = len(shift)\n        digits_left = len(x)\
    \ - shift_len\n        digits_right = shift_len - digits_left\n        digits\
    \ = []\n        for c in range(len(digits_right)):\n            digits.append(x[:digits_left\
    \ + c])\n    else:\n        shift_len = len(shift)\n        digits_left = len(x)\
    \ - shift_len\n        digits_right = shift_len - digits_left\n        digits\
    \ = []\n        for c in range(len(digits_right)):\n            digits.append(x[-digits_left\
    \ + c])\n    digits.reverse()\n    return ''.join(digits)\n\n", "    result =\
    \ \"\"\n    while x > 0:\n        result = str(x % 10) + result\n        x //=\
    \ 10\n        shift = shift - 1\n        if shift < 0:\n            shift = len(result)\
    \ - shift\n    return result\n\n\n@njit", "    return ''.join(str(int(c) + x %\
    \ 10) for c in range(0, shift * 10, 10))\n\n", "    if shift > len(str(x)):\n\
    \        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\
    \n", "    if shift > len(str(x)):\n        return \"\".join([str(x)[shift:], str(x)[:shift]])\n\
    \    else:\n        return \"\".join([str(x)[shift:], str(x)[:shift]])\n\n", " \
    \   s = \"\"\n    digits = list(str(x))\n    for index in range(0, shift):\n \
    \       s += digits[index] + digits[len(digits) - index - 1]\n    return s", " \
    \   if x < 10:\n        s = \"0\"\n    else:\n        s = \"1\"\n    for i in\
    \ range(shift):\n        s = s[1:] + s[0]\n        if x < 10:\n            s =\
    \ s[1:]\n    return s\n\n", "    digits = list(x)\n    shift = -shift\n    while\
    \ shift > 0:\n        if shift >= len(digits):\n            return digits.reverse()\n\
    \        digits.append(digits[shift])\n        shift -= 1\n    return ''.join(digits)\n",
  "    digits = str(x)\n    if shift < 0:\n        shift = -shift\n        digits\
    \ = digits[::-1]\n    result = ''\n    for d in digits:\n        result += d *\
    \ (10 ** shift)\n        shift -= 1\n    return result\n\n", "    # implement\
    \ this in python\n    # your code:\n    if shift > len(x):\n        # your code\
    \ here\n        return x\n    elif shift < -len(x):\n        # your code here\n\
    \        return x\n    elif shift == 0:\n        return \"\"\n    else:\n    \
    \    if x < 0:\n            x *= -1\n        # your code here\n        result\
    \ = \"\"\n        while x > 0:\n            result += x[shift % len(x)]\n    \
    \        x //= len(x)\n            shift -= 1\n        return result\n</cell>\n\
    <text>\nLet's try it out!\n\n\n</text>\n<cell>", "    return x[shift:] + x[:shift]\n\
    \n", "    digits = []\n    while x >= 1:\n        if shift >= len(digits):\n \
    \           digits.append(1)\n            shift = shift % len(digits)\n      \
    \  else:\n            digits.append(x)\n            shift -= 1\n        x //=\
    \ 10\n    return ''.join(map(str, reversed(digits)))\n\n", "    length = len(str(x))\n\
    \    shift = shift % length\n    if shift > 0:\n        return \"\".join(reversed([int(digit)\n\
    \                                for digit in str(x)\n                       \
    \         if int(digit) != int(digit)\n                                ][:-shift]))\n\
    \    else:\n        return \"\".join(reversed([int(digit)\n                  \
    \              for digit in str(x)\n                                if int(digit)\
    \ != int(digit)\n                                ][:shift]))\n\n", "    digits\
    \ = \"\"\n    if shift:\n        while x != 0:\n            digits = str(x % 10)\
    \ + digits\n            x //= 10\n            if shift:\n                shift\
    \ -= 1\n    else:\n        shift = abs(shift)\n        while x != 0:\n       \
    \     digits = str(x % 10) + digits\n            x //= 10\n            if shift:\n\
    \                shift -= 1\n        shift = len(digits)\n    return digits[::-1]\n\
    \n\n@overload", "    if shift < 0:\n        raise ValueError\n    shiftstr = f\"\
    {shift:d}\" + \"\" if shift > 0 else \"0\" * -shift\n    str = f\"{x:d}\"\n  \
    \  length = len(str)\n    if length == shift:\n        return str\n    if length\
    \ > shift:\n        str += shiftstr[shift:]\n    if length < shift:\n        str\
    \ = shiftstr[:shift] + str\n    return str\n\n", "    digits = list(x)\n    shift\
    \ = shift % len(digits)\n    digits.reverse()\n    digits.insert(0, digits.pop(shift))\n\
    \    return ''.join(digits)\n\n", "    return str(x >> shift) + str(x & (2**(shift-1)))\
    \ if x & (2**(shift-1)) else '0'\n\n", "    digits = []\n    for i in range(len(x)):\n\
    \        digits.append(x[i])\n    return \"\".join(digits[shift:] + digits[:shift])\n\
    \n", "    digits = str(x)\n    if shift > len(digits):\n        return digits[::-1]\n\
    \    else:\n        digits = digits[shift:] + digits[:shift]\n        return digits\n\
    \n", "    if shift == 0:\n        return x\n    digits = str(x)\n    shift = abs(shift)\n\
    \    return ''.join([digits[i - 1] for i in reversed(range(shift, len(digits)\
    \ + 1, shift))])\n\n", "    digits = \"\"\n    i = 0\n    for d in str(x):\n \
    \       if i == shift:\n            digits += d\n            i = 0\n        else:\n\
    \            digits += d\n            i += 1\n    return digits\n\n", "    \n\
    \    # Convert digits into string, circular shift and convert back to integer\n\
    \    s = \"\"\n    \n    # convert integer to string for circular shift \n   \
    \ for i in range(0,shift):\n        s = s + str(x)\n    \n    # reverse digits\
    \ using slicing [::-1]\n    s = s[::-1]\n    \n    return s\n</cell>\n<cell>\n\
    circular_shift(2, 4)\n</cell>\n<cell>\ncircular_shift(43, 8)\n</cell>\n<cell>\n\
    circular_shift(8, 12)\n</cell>\n<cell>\ncircular_shift(8, 16)\n</cell>\n<cell>\n\
    circular_shift(13, 8)\n</cell>\n<text>\nBinary Search\n\n</text>\n<text>\nBinary\
    \ search works by splitting the list into two halves. If the item in the middle\
    \ is too large for that half of the list, it splits it in half. Otherwise, it\
    \ compares the first half to the item in the middle and compares the second half.\
    \ If the item in the middle is larger than the item in the second half, it repeats\
    \ the process for the first half of the list.\n\n\n</text>\n<cell>\nbinary_search([-4,\
    \ -2, -1, 0, 1, 2, 3, 4], -2)\n</cell>\n<cell>\nbinary_search([-4, -2, -1, 0,\
    \ 1, 2, 3, 4], 1)\n</cell>\n<cell>\nbinary_search([-4, -2, -1, 0, 1, 2, 3, 4],\
    \ 4)\n</cell>\n<cell>\nbinary_search([-4, -2, -1, 0, 1, 2, 3, 4], 5)\n</cell>\n\
    <text>\nIf the item is not in the list, return False.\n\n\n</text>\n<cell>\nbinary_search([-4,\
    \ -2, -1, 0, 1, 2, 3, 4], 5)\n</cell>\n<cell>\nbinary_search([-4, -2, -1, 0, 1,\
    \ 2, 3, 4], 10)\n</cell>\n<cell>\nbinary_search([-4, -2, -1, 0, 1, 2, 3, 4], 15)\n\
    </cell>\n<text>\nImplementing binary search\nThe function takes in two arguments.\
    \ The first argument is always the list in which to search, and the second argument\
    \ is always the item to be found. Both the list and item must be sorted before\
    \ being passed into this function.\n\n\n</text>\n<cell>", "    circular_shift_digits(str(x),\
    \ shift)\n    return ''.join(str(int(d)) for d in x)\n\n", "    if shift == 0:\n\
    \        return x\n    digits_str = str(x)\n    if len(digits_str) <= shift:\n\
    \        return digits_str\n    result = digits_str[-shift:] + digits_str[:-shift]\n\
    \    return result\n\n", "    if shift == 0:\n        return x\n    if shift >\
    \ len(x):\n        return circular_shift(x, -shift)\n\n    result = ''\n    tmp\
    \ = x\n    for _ in range(shift - 1):\n        tmp = tmp * 10 + x % 10\n     \
    \   result = str(tmp) + result\n\n    return tmp\n\n", "    ans = str(x)\n   \
    \ if shift > len(ans):\n        return ans[::-1]\n    else:\n        ans += ans[shift:]\
    \ + ans[:shift]\n        return ans\n\n", "    rev = str(x)[::-1]\n    result\
    \ = rev[:shift] + rev[shift - len(rev):]\n    return result\n\n", "    if shift\
    \ > len(str(x)):\n        shift = len(str(x)) - shift\n    else:\n        shift\
    \ = shift - len(str(x))\n    return str(int(x * (10 ** (shift + len(str(x)) -\
    \ 1))))\n", "    def circular_shift_n(n, shift):\n        \"\"\"Circular shift\
    \ the digits of the integer n, shift the digits right by\n        shift, and return\
    \ the result as a string.\n        If shift > number of digits, return digits\
    \ reversed.\n        \"\"\"\n        if n < 0:\n            n += abs(n)\n    \
    \    digits = [int(i) for i in str(n)]\n        if shift > len(digits):\n    \
    \        return ''.join([digits[-1]] + digits[:shift])\n        return ''.join([digits[shift]]\
    \ + digits[len(digits) - shift - 1:])\n\n    while len(str(abs(x))) >= shift:\n\
    \        x = circular_shift_n(x, shift)\n    return str(x)\n\n", "    digits =\
    \ list(x)\n    if shift > len(digits):\n        return ''.join(str(digits[-shift:]\
    \ + digits[:-shift]))\n    if shift < 0:\n        return ''.join(str(digits[:-shift])\
    \ + digits[-shift:])\n    return ''.join(str(digits[-shift:]) + digits[:-shift])\n\
    \n", "    \n    if shift > len(x):\n        shift = len(x)\n    \n    \n    #\
    \ loop through and shift each digit\n    digits = []\n    for _ in range(shift):\n\
    \        digits.append(str(x[shift-_-1]))\n    \n    # reverse the digits if shift\
    \ is greater than the number of digits\n    if len(digits) > shift:\n        digits\
    \ = digits[::-1]\n    \n    # join the digits to form the shifted string\n   \
    \ shifted_string = \"\"\n    for digit in digits:\n        shifted_string += digit\n\
    \    \n    return shifted_string\n", "    # Initialize a list that contains the\
    \ new digits \n    new_digits = []\n\n    # Shift right until shift-th digit\n\
    \    for i in range(shift):\n        new_digits.append(str(x%10))\n        x =\
    \ x/10\n\n    # Shift back to the rightmost position\n    for j in range(shift):\n\
    \        new_digits.append(str(x%10))\n        x = x/10\n\n    # Join digits back\
    \ to a string\n    shiftdigits = ''.join(new_digits)\n\n    # If shifted digits\
    \ reversed, reverse it too\n    if shift > len(shiftdigits):\n        shiftdigits\
    \ = shiftdigits[::-1]\n        \n    return shiftdigits\n\n", "    reverse = shift\
    \ % len(x) < 0\n    digits = [int(d) for d in str(x)]\n    digits[shift::] = reversed(digits[shift::])\n\
    \    digits = ''.join(str(d) for d in digits)\n    return reverse and digits[::-1]\
    \ or digits\n\n", "    if shift > len(x):\n        return str(x[::-1])\n\n   \
    \ res_str = ''\n    temp = list(str(x))\n    for i in range(shift - 1):\n    \
    \    temp.append(temp.pop(0))\n    res_str = str(temp[::-1])\n    return res_str\n\
    \n", "    \n    string = \"\"\n    i = 0\n    while i < len(x):\n        string\
    \ += x[i] if i % shift == shift else x[(i + 1)%len(x)]\n        i += 1\n    return\
    \ string\n", "    # Add 1 so that if shift > number of digits, we'll be left with\
    \ a digit\n    # in the last place and can start indexing from 0.\n    shift =\
    \ min(len(str(x)), shift)\n    digits = x >> shift\n    # Shift digits right by\
    \ shift, and return the result\n    result = str(digits) + str(x - (digits <<\
    \ shift))\n    # Return result as a string\n    return result\n\n", "    if len(x)\
    \ == 0 or shift == 0:\n        return x\n    return x + \"\".join([\n        str(int(c)\
    \ + shift)\n        for c in str(int(x) - shift)]\n    )\n</code>\n<|/ a tags=python,digits,list,string\
    \ |>\n<| c |>\nThis does not work for negative numbers.\n<|/ c |>\n<| a tags=python,digits,list,string\
    \ dscore=2 |>\nThis should work for both positive and negative numbers and handles\
    \ overflow (it just chops off the \"big\" part).\n<code>", "    if shift > len(str(x)):\n\
    \        shift = len(str(x)) - shift\n    res = ''\n    while shift != 0:\n  \
    \      if shift < 0:\n            num = int(x)\n            res = str(num % 10)\
    \ + str(num // 10)\n            shift -= len(res)\n        else:\n           \
    \ num = int(x)\n            res += str(num % 10) + str(num // 10)\n          \
    \  shift -= len(res) % 10\n        x = (x - int(res) % 10) % 10\n    return res\n\
    \n", "    return circular_shift_helper(x, shift, \"\")\n\n", "    return str(x)[::-1][shift:]\n\
    \n", "    digits = [i for i in str(x)]\n    if shift > len(digits):\n        shift\
    \ = len(digits)\n    shift = str(shift)\n    digits = [digits[i] for i in range((len(digits)\
    \ - shift) + 1)]\n    digits.reverse()\n    return \"\".join(digits)\n\n", " \
    \   digits = [int(i) for i in str(x)]\n    digits.reverse()\n    return str(\"\
    \".join(str(digits[shift:]) + str(digits[:shift])))\n\n", "    return str(x >>\
    \ shift) + str(x & ((1 << shift) - 1))\n</cell>\n<text>\nNow let's see how it\
    \ works:\n\n\n</text>\n<cell>\ncircular_shift(10, 3)\n</cell>\n<cell>\ncircular_shift(10,\
    \ 2)\n</cell>\n<text>\nWe have only a limited number of bit operations, which\
    \ makes the computation fairly efficient.\n\nPython also offers more sophisticated\
    \ algorithms to perform the same task, but let's see how they work:\n\n\n</text>\n\
    <cell>", "    return str(x - shift + len (str(x)))\n", "    if shift == 0:\n \
    \       return x\n    if shift > len(x):\n        shift = len(x)\n    return ''.join([x[-(shift\
    \ - i)] for i in range(shift)])\n\n", "    if shift < 0:\n        raise ValueError('shift\
    \ must be non-negative')\n    if shift > len(x):\n        return x\n    elif shift\
    \ > 0:\n        digits = []\n        digits.append('0')\n        for i in range(shift):\n\
    \            digits.append('1')\n        digits.append(x[-1])\n        return\
    \ ''.join(reversed(digits))\n    else:\n        digits = []\n        digits.append('1')\n\
    \        for i in range(shift):\n            digits.append('0')\n        digits.append(x[-1])\n\
    \        return ''.join(reversed(digits))\n\n", "    digits = [str(x)]\n    digits.reverse()\n\
    \    return ''.join((digits[i:i + shift] for i in range(0, len(digits), shift)))\n\
    \    ", "    return shift(x, -shift)\n\n", "    return ''.join([f\"{int(c) - shift}\"\
    \ for c in str(x)[::-1]])\n\n", "    if shift == 0:\n        return x\n    if\
    \ shift > len(x):\n        shift = len(x)\n    result = \"\"\n    digit = x\n\
    \    for _ in range(shift):\n        digit = digit\n        for _ in range((len(x)-shift+1-len(str(digit)))//2):\n\
    \            digit = int(str(digit)[::-1])\n        result += str(digit)\n   \
    \     digit /= 10\n    return result\n", "    digits = ''\n    while x > 0:\n\
    \        digits = str(x % 10) + digits\n        x = int(x / 10)\n    digits =\
    \ digits[-shift:] + digits[:-shift]\n    digits.reverse()\n    return digits\n\
    \n", "    digits = \"0123456789\"\n    shift = len(digits) - shift\n    result\
    \ = \"\"\n\n    for _ in range(shift):\n        result = digits[x % len(digits)]\
    \ + result\n        x = x // len(digits)\n\n    return result\n", "    number\
    \ = to_str(x)\n    shifted = number[:-shift]\n    if len(shifted) < len(number):\n\
    \        return number[-shift:] + shifted\n    else:\n        return number +\
    \ shifted\n\n", "    digits = []\n    while x > 0:\n        digits.append(x %\
    \ 10)\n        x = x // 10\n\n    digits.reverse()\n    return str(digits) + str(digits[::-1][shift:])\n\
    </cell>\n<cell>", "    if shift == 0:\n        return x\n    result = \"\"\n \
    \   digits = str(x)\n    length = len(digits)\n    if shift == length - 1:\n \
    \       shift = length\n    for i in range(shift, length - 1):\n        result\
    \ += digits[i - shift]\n        result += digits[i]\n    return result\n", " \
    \   digits = str(x).zfill(shift)\n    if len(digits) != shift:\n        digits\
    \ = digits[:-shift]\n    return digits\n\n", "    # Shift > number of digits\n\
    \    if shift > len(x):\n        shift = len(x)\n\n    # Circular shift\n    x\
    \ *= (10**(shift - 1))\n    digits = [int(x) % 10]\n    if shift > len(x):\n \
    \       digits.reverse()\n    digits = digits[-shift:]\n\n    # Return digits\
    \ as a string\n    return str(digits)\n\n", "    result = \"\"\n    shift = 0\
    \ - shift\n    while x > 0:\n        if x % 10 == 0:\n            result += '0'\n\
    \            x /= 10\n        else:\n            result += '1'\n            x\
    \ /= 10\n    if shift > 0:\n        result += '0' * (shift * 2 - len(result))\n\
    \        result += '1' * (shift * 2)\n    else:\n        result += '1' * shift\n\
    \    return result\n\n", "    digits = list(str(x))\n    if shift > len(digits):\n\
    \        shift = len(digits)\n        digits.reverse()\n    digits = digits[shift:]\
    \ + digits[:shift]\n    digits = [int(d) for d in digits]\n    return \"\".join([str(d)\
    \ for d in digits])\n\n", "    digits = [int(digit) for digit in str(x)]\n   \
    \ if len(digits) < shift:\n        shift -= len(digits)\n        digits.reverse()\n\
    \    elif shift > len(digits):\n        shift = len(digits)\n    return \"{}{}\"\
    .format(digits[:shift], \"\".join(str(digit) for digit in digits[shift:]))\n\n",
  "    digits = list(str(x))\n    if shift == len(digits):\n        return digits.reverse()\n\
    \n    digits[shift:] = digits[shift:][::-1]\n    return ''.join(digits)\n", " \
    \   return str(int(x) + int(shift) % 10)\n\n", "    digits = str(abs(x))\n   \
    \ if len(digits) > len(str(shift)) + 1:\n        digits = digits[-shift:] + digits[:-shift]\n\
    \    elif len(digits) > len(str(-shift)) + 1:\n        digits = digits[shift:]\
    \ + digits[:shift]\n    else:\n        digits = digits[-shift:] + digits[:-shift]\n\
    \    return digits\n", "    shifted = []\n    for i in str(x):\n        shifted.insert(0,\
    \ str(int(i) + shift))\n    return ''.join(shifted)\n\n", "    if shift == 0:\n\
    \        return x\n    elif shift > len(x):\n        return x[::-1]\n    else:\n\
    \        return x[-shift:] + x[:-shift]\n\n", "    digits = str(x)\n    if len(digits)\
    \ < shift:\n        return digits[-shift:] + digits[:-shift]\n    digits = list(digits)\n\
    \    for i in range(shift):\n        digits[i + shift] += digits[i] // 10\n  \
    \      digits[i] %= 10\n    return ''.join(str(digit) for digit in digits)\n\n",
  "    return str([x[i] for i in range(x, -shift, -1)])\n", "    digits = []\n   \
    \ remainder = 0\n    for _ in range(shift):\n        digits.append(str(x % 10))\n\
    \        remainder = x % 10\n        x //= 10\n\n    for _ in range(shift, len(digits)):\n\
    \        digits[shift] = digits[shift][::-1]\n    remainder = digits[shift][::-1]\n\
    \    remainder_str = str(remainder)\n    digits[shift] = remainder_str\n    return\
    \ ''.join(digits)\n", "    length = len(str(x))\n    if length <= shift:\n   \
    \     return str(x)\n    shifted = int(str(x)[-shift:] + str(x)[:shift])\n   \
    \ return str(shifted)\n\n", "    if not 0 <= x < 1e9:\n        raise OverflowError(\n\
    \            \"number too large to convert to string: x is {},\"\n           \
    \ \" but only {} digits are available\".format(x, 9)\n        )\n    if shift\
    \ > len(str(x)):\n        raise OverflowError(\n            \"shifting beyond\
    \ shift {} digits is incompatible\".format(len(str(x)))\n        )\n\n    digits\
    \ = \"\"\n    idx = 0\n    shift = -shift\n    while idx < len(str(x)):\n    \
    \    digits = digits + x[idx % len(str(x))]\n        idx += 1\n        shift =\
    \ shift+1\n        if shift > len(str(x)):\n            digits = digits[::-1]\n\
    \n    return digits\n\n", "    if len(str(x)) == shift - 1:\n        return x\n\
    \n    s = str(x)\n    shifted = []\n    for a in range(len(s)):\n        shifted.append(s[a])\n\
    \        shifted.append(s[a - shift])\n    shifted.reverse()\n    return \"\"\
    .join(shifted)\n\n", "    rev = []\n    while x:\n        rev.append(x % 10)\n\
    \        x //= 10\n    rev = rev[::-1]\n    return \"\".join(str(r) for r in rev)\n\
    \n", "    if x < 0 or shift < 0:\n        raise ValueError(\"shift and x must\
    \ be a non-negative integer.\")\n    elif shift == 0:\n        return x\n    if\
    \ shift >= len(str(abs(x)))-1:\n        raise ValueError(\"shifted number must\
    \ be smaller than the length of the number.\")\n    ret = str(abs(x))\n    ret\
    \ = _shift_digits(ret, shift)\n    return ret\n", "    if shift >= len(x):\n \
    \       return str(x)\n    else:\n        return x[shift:] + x[:shift]\n", " \
    \   xlist = list(str(x))\n    if shift > len(xlist):\n        xlist = xlist[::-1]\n\
    \    xlist = xlist + xlist[:shift]\n    return ''.join(xlist)\n\n", "    x = str(x)\n\
    \    if shift > len(x):\n        return \"\".join(reversed(x))\n    return \"\"\
    .join(str(x[:-shift]) + x[-shift:])\n", "    return f'{x}{int(x)%10**shift:b}'\
    \ + \\\n           f'{x//10**shift:b}'.replace('0', '')\n\n", "    return \"\"\
    .join([\n            \"\".join([(c if i >= shift else str(int(c) + x))[: n - 1\
    \ - i]\n                    for i, c in enumerate(str(x))])\n            for n\
    \ in reversed(range(x.bit_length()))])\n\n", "    if shift > len(str(x)):\n  \
    \      shift = len(str(x))\n        shift_str = str(x)[::-1]\n    else:\n    \
    \    shift_str = str(x)[shift:] + str(x)[:shift]\n    return shift_str\n\n", " \
    \   \n    string = \"\"\n    \n    for i in range(shift, len(str(x)), shift):\n\
    \        string += str(x)[-i]\n    \n    return string\n</cell>\n<cell>\ncircular_shift(1532,\
    \ 5)\n</cell>\n<text>\nProblem 3\nImplement the following operations on an integer.\n\
    \nNone image.png\n\n\n\n</text>\n<cell>", "    if shift > len(x):\n        shift\
    \ = len(x)\n    return \"\".join([\n        x[i : i + shift]\n        for i in\
    \ reversed(range(0, len(x), shift))\n    ])\n\n", "    digits = list(map(int,\
    \ str(x)))\n    if len(digits) >= shift:\n        for i in range(shift):\n   \
    \         digits.append(digits.pop(0))\n    else:\n        for i in range(shift\
    \ - len(digits)):\n            digits.append(digits.pop(0))\n    return ''.join(map(str,\
    \ digits))\n\n\n@curry", "    digits = \"\"\n    for char in str(x):\n       \
    \ digits = digits + char\n    return digits\n\n", "    if shift > len(str(x)):\n\
    \        return str(x)[::-1]\n    else:\n        return str(x)[shift:] + str(x)[:shift]\n\
    \n", "    # convert x to a string\n    x = str(x)\n    if len(x) == 0:\n     \
    \   return x\n    if len(x) < shift:\n        return circular_shift(x, shift)\n\
    \    # loop through all the digits from 0 to shift\n    # shift the digits after\
    \ shift to the left\n    for i in range(len(x) - shift):\n        x[i + shift]\
    \ = x[i + shift][::-1]\n    # reverse the digits from the right\n    for i in\
    \ range(len(x) - shift):\n        x[i + shift] = x[i + shift][::-1]\n    # convert\
    \ x to a string again\n    x = str(x)\n    return (x)\n\n", "    digits = int2base(x,\
    \ len(base))\n    if shift > len(digits):\n        shift -= len(digits)\n    \
    \    digits = digits[::-1]\n    return base10tobasestring(digits + digits[:shift])\n\
    \n", "    if shift > len(x):\n        return int(x[::-1]) + str(len(x) - shift)\n\
    \    return str(int(x) + shift)\n\n", "    return (x * 10**shift) % 1000000007\n\
    \n", "    digits = ''.join(map(str, list(str(x))))\n    shifts = ''.join((str(abs(i))[-shift:]\
    \ if i < 0 else str(abs(i))[:-shift]\n                    for i in range(-shift,\
    \ shift)))\n    shifted_digits = digits + shifts\n    digits_reversed = ''.join(map(str,\
    \ list(str(-int(shifted_digits)))))\n    return digits_reversed\n", "    # Circular-shift\
    \ the digits of x by shift\n    # Shift digits from the right by shift\n    #\
    \ Return digits reversed\n    return str(x)[-shift:] + str(x)[:-shift]\n</cell>\n\
    <cell>", "    if 0 <= shift < len(x):\n        \n        tmp = x\n        rev\
    \ = []\n        while shift > 0:\n            rev.append(tmp % 10)\n         \
    \   shift -= 1\n            tmp = (tmp // 10) % 10\n        if shift > 0:\n  \
    \          rev.reverse()\n        return ''.join(str(rev) + str(tmp))\n    else:\n\
    \        return '0'\n</cell>\n<text>\nProblem 6: Palindromes\nGiven a string,\
    \ check if it is palindrome or not palindrome. A palindrome is a word, phrase,\
    \ or sequence that reads the same backward as forward.\n\nExamples of palindromes\
    \ are:\n\n\"anpanama\"\n\"racecar\"\n\"iracecar\"\n\nA palindrome is a word, phrase,\
    \ or sequence that reads the same backward as forward.\n\n\n</text>\n<cell>",
  "    # Circular shift algorithm\n    # https://en.wikipedia.org/wiki/Circular_shift\n\
    \    # Shifts by shift // digits: https://stackoverflow.com/a/14777054\n    #\
    \ Circular shift of '10' by 1, or 10 - 1, is 10. Shifting by 1 shifts left\n \
    \   # Circular shift of '10' by 2, or 10 - 2, is 10 + 2.\n    # Circular shift\
    \ of '10' by 3, or 10 - 3, is 10 + 3 + 1.\n\n    shifted = x << shift\n    shifted_digits\
    \ = []\n    while shifted > 0:\n        digit = shifted % 10\n        shifted_digits.append(digit)\n\
    \        shifted = shifted // 10\n\n    shifted_digits.reverse()\n\n    digits\
    \ = \"\".join(str(digit) for digit in shifted_digits)\n\n    return digits\n\n",
  "    if shift == 0:\n        return x\n    digits = []\n    len_x = len(x)\n   \
    \ shift = shift % len_x\n    if shift == 0:\n        return digits_to_str(x)\n\
    \    if shift > 0:\n        for i in range(len_x):\n            digits.append(x[len_x\
    \ - 1 - i])\n        digits_to_str = reversed(digits_to_str(digits))\n    else:\n\
    \        for i in range(len_x):\n            digits.append(x[i])\n        digits_to_str\
    \ = digits_to_str(digits)\n    return digits_to_str\n\n", "    return str(x)[::-1][:shift]\n\
    \n", "    if shift > len(str(x)):\n        return x\n    else:\n        return\
    \ int(str(x)[shift:] + str(x)[:shift])\n\n", "    \n    digits = []\n    \n  \
    \  if x < 0:\n        return \"\"\n\n    while x > 0:\n        digits.append(str(x\
    \ % 10))\n        x = x // 10\n    \n    digits.reverse()\n    \n    shift = shift\
    \ % len(digits)\n\n    if shift > 0:\n        return digits[shift:] + digits[:shift]\n\
    \    else:\n        return digits[-shift:] + digits[:-shift]\n\n", "    if not\
    \ 0 <= shift <= len(str(x)):\n        raise ValueError(\"shift must be between\
    \ 0 and number of digits\")\n\n    digits = [int(d) for d in str(x)]\n    digits[:]\
    \ = digits[shift:] + digits[:shift]\n    return ''.join(str(d) for d in digits)\n\
    \n", "    if (x > 10) or (x < 0):\n        raise ValueError\n\n    digits = \"\
    0123456789\"\n\n    rev = (str((10**shift)*x)[::-1]).zfill(shift)\n    res=\"\"\
    \n    for digit in rev:\n        res += digits[int(digit)]\n    return res\n\n",
  "    return ''.join(x[shift:] + x[:shift])\n\n", "    return \"\".join((list(reversed(str(x)))[shift:]\
    \ + list(str(x))[:shift]))\n\n", "    digits = str(x)\n    if len(digits) > shift:\n\
    \        return digits[-(shift - len(digits)):] + digits[:-(shift - len(digits))]\n\
    \    else:\n        return digits\n", "    if shift < 0:\n        return ''\n\
    \    elif shift > 0:\n        return ''.join(x[::-1] + x[shift:] + x[:shift])\n\
    \n", "    # Circular shift of the digits of the integer\n    # x by the number\
    \ of shift specified in the parameter\n    # shift is the number of digits right\
    \ to be shifted\n    digits = str(x)\n    shift_digits = digits[-shift:] + digits[:-shift]\n\
    \    return shift_digits\n\n", "    if shift == 0:\n        return x\n    if len(str(x))\
    \ > shift:\n        return x[:shift] + x[shift - len(str(x))]\n    return x[shift\
    \ - len(str(x))] + x[:shift]\n\n", "    if x < 10:\n        return str(x)\n  \
    \  else:\n        digits = []\n        current = x\n        digits.append(current)\n\
    \        shift = shift - len(digits)\n        while shift > 0:\n            digits.append(current\
    \ % 10)\n            current = current // 10\n            shift -= 1\n       \
    \ return ''.join(str(d) for d in reversed(digits))\n\n", "    digits = []\n  \
    \  while x:\n        digits.append(x % 10)\n        x = x // 10\n    if shift:\n\
    \        return digits[shift:] + digits[:shift]\n    else:\n        return digits[::-1]\n\
    \n", "    digits = [int(a) for a in str(x)]\n    return \"\".join([str(digits[0])]\
    \ + circular_shift(digits[1:], shift - 1) + [str(digits[-1])])\n\n", "    digits\
    \ = []\n    temp = x\n    i = 0\n    while temp:\n        digits.append(int(temp\
    \ % 10))\n        temp = temp // 10\n    digits.reverse()\n    digits = digits[i:i\
    \ + shift]\n    return ''.join(str(x) for x in digits)\n", "    digits = list(x)\n\
    \    digits.reverse()\n    for shift in range(shift, len(digits)):\n        digits.extend(digits)\n\
    \    return \"\".join(str(x) for x in digits)\n", "    res = ''\n    for i in\
    \ range(1, shift + 1):\n        res = str(x >> i) + res\n    return res\n\n",
  "    if x < 0:\n        return '-' + circular_shift(abs(x), -shift)\n    else:\n\
    \        digits = []\n        while x > 0:\n            digits.append(x % 10)\n\
    \            x //= 10\n        for i in range(shift):\n            digits.append(digits[-1])\n\
    \        return ''.join(str(digit) for digit in digits[::-1])\n\n", "    assert\
    \ 0 <= shift <= 10, \"shift must be in [0, 10)\"\n    if shift > len(str(x)):\n\
    \        return str(x)[::-1]\n\n    if shift > 0:\n        start = str(x)[:shift]\n\
    \    else:\n        start = str(x)[shift:]\n\n    return start + str(x)[shift:]\n\
    \n", "    if shift > len(str(x)):\n        return str(x)[::-1]\n    digits = str(x)[shift:]\
    \ + str(x)[:shift]\n    return digits\n\n", "    if shift > len(str(x)):\n   \
    \     return \"\".join(reversed(str(x)))\n    else:\n        return str(x)[shift:]\
    \ + str(x)[:shift]\n\n", "    return str(int(str(x)[-shift:] + str(x)[:shift]))\n\
    \n", "    if shift > len(str(x)):\n        return \"\".join((str(x) for x in reversed(range(int(len(str(x)))\
    \ - shift))))\n    else:\n        return \"\".join((str(x) for x in range(int(len(str(x)))\
    \ - shift)))\n\n", "    # Your code here\n    if shift < 0:\n        shift +=\
    \ len(x)\n    return ''.join(x[-shift:])\n\n", "    return str(int(x) + shift)\n\
    \n", "    # Cast to string so we don't have to type cast later\n    x_str = str(x)\n\
    \    x_str = x_str[::-1]\n    # Circular shift and add leading zeroes\n    return\
    \ str(int(x_str[:-shift]) + x_str[-shift:])\n\n", "    \n    digit_list = list(str(x))\n\
    \    digit_list[:shift] = reversed(digit_list[:shift])\n    return ''.join(digit_list)\n\
    \n", "    return str( int(str(x)[shift:]) + int(str(x)[:shift]) )\n", "    ans\
    \ = \"\"\n    carry = 1\n    digit = x\n    for _ in range(shift - 1):\n     \
    \   digit, carry = divmod(digit, 10)\n        ans += str(digit) + \" \"\n    if\
    \ carry:\n        ans += str(digit)\n    return ans\n\n", "    digits = str(x)\n\
    \    if len(digits) < shift:\n        return digits\n    else:\n        digits\
    \ = digits[shift:] + digits[:shift]\n        return digits\n\n", "    digits =\
    \ list(str(x))\n    if len(digits) == shift:\n        return str(x)\n    elif\
    \ len(digits) > shift:\n        digits = digits[shift:] + digits[:shift]\n   \
    \ digits = digits[::-1]\n    return \"\".join(digits)\n\n", "    if shift >= len(x):\n\
    \        return x\n    return shift(x, -shift) + shift(x, -shift)[::-1]\n\n",
  "    digits = to_base10(x)\n    if shift == 0:\n        return digits\n    elif\
    \ shift < 0:\n        digits = digits[::-1]\n        shift = abs(shift)\n    elif\
    \ shift > len(digits):\n        shift = len(digits)\n    return int(''.join(digits[shift:]\
    \ + digits[:shift]))\n\n", "    if shift > len(x):\n        return x[::-1]\n \
    \   res = []\n    for i in range(len(x)):\n        res.append(x[i + shift])\n\
    \    return ''.join(reversed(res))\n\n", "    digits = []\n    while x != 0:\n\
    \        digits.append(x % 10)\n        x //= 10\n    for i in range(shift):\n\
    \        digits.append(digits.pop(0))\n    return ''.join(str(digit) for digit\
    \ in reversed(digits))\n\n", "    digits = str(x)\n    digits_len = len(digits)\n\
    \    if shift == 0:\n        return digits\n    digits_left = digits[:shift]\n\
    \    digits_right = digits[-shift:]\n    return digits_left + digits_right[::-1]\n",
  "    if shift == 0:\n        return \"\"\n\n    if shift > len(x):\n        return\
    \ str([int(y) for y in reversed(x)])\n\n    digits = \"\"\n    while shift !=\
    \ 0:\n        digit = str(x%10) + digits[len(digits)-1]\n        x = int(x / 10)\n\
    \        digits = digit[1:] + digit\n        shift -= 1\n    return digits[::-1]\n\
    \n", "    if 0 <= shift < len(x):\n        return int(''.join([x[i + shift] for\
    \ i in range(len(x) - shift)]))\n    else:\n        return ''\n    ", "    x =\
    \ str(x)\n    shift = str(shift)\n    if shift < 0:\n        shift = str(int(shift)\
    \ * -1) # shift right to the left\n        shift += str(len(x)) #add number of\
    \ digits to shift\n\n    return (x[:int(shift)] + x[int(shift):])\n\n\"\"\"\n\
    Center digits of integer\n\"\"\"", "    if shift >= len(str(x)):\n        shift\
    \ = shift - len(str(x))\n    return str(x)[shift:] + str(x)[:shift]\n\n", "  \
    \  xlist = list(str(x))\n    if shift == -1:\n        xlist.reverse()\n    else:\n\
    \        for i in range(shift):\n            xlist[i] = str(xlist[i]) + str(xlist[i+shift])\n\
    \    return ''.join(xlist)\n\n", "    length = len(str(x))\n    \n    if not shift\
    \ > length or shift < 1:\n        raise ValueError(\"shift must be an integer\
    \ between 0 and number of digits - 1\")\n    \n    return \"\".join(list(reversed(str(x))[shift:length+shift]))\n\
    </cell>\n<cell>\ncircular_shift(12345, 1)\n</cell>\n<cell>\ncircular_shift(12345,\
    \ 2)\n</cell>\n<cell>\ncircular_shift(12345, 3)\n</cell>\n<cell>\ncircular_shift(12345,\
    \ 4)\n</cell>\n<cell>\ncircular_shift(12345, 5)\n</cell>\n<cell>\ncircular_shift(12345,\
    \ 6)\n</cell>\n<cell>\ncircular_shift(12345, 7)\n</cell>\n<cell>\ncircular_shift(12345,\
    \ 8)\n</cell>\n<cell>\ncircular_shift(12345, 9)\n</cell>\n<cell>\ncircular_shift(12345,\
    \ 10)\n</cell>\n<text>\nReverse the string\n\n\n</text>\n<cell>", "    return\
    \ int(str(x)[-shift:] + str(x)[:-shift])\n\n", "    if shift > len(x):\n     \
    \   shift %= len(x)\n        x *= -1\n    return str(int(x) + shift)\n</cell>\n\
    <text>\nThe above function was implemented in module circular_shift, so it is\
    \ available in the notebook and can be imported in other notebooks.\n\n\n</text>\n\
    <cell>\nimport math\n", "    if shift > len(x):\n        return str(x)[::-1]\n\
    \    return str(x)[shift:] + str(x)[:-shift]\n\n", "    if shift >= len(x):\n\
    \        return ''.join((x[i] for i in reversed(range(shift)))) or '0'\n    return\
    \ ''.join((x[i] for i in reversed(range(shift))[::-1])) or '0'\n\n", "    if shift\
    \ == 0:\n        return x\n    shift = abs(shift)\n    digits = f'{x:08b}'[::-1].zfill(shift)\n\
    \    if len(digits) != shift:\n        digits = f'{int(digits):08b}0' * (shift\
    \ - len(digits))\n    return digits\n\n", "    if shift > len(x):\n        shift\
    \ = len(x) - shift\n    return x[shift:] + x[:shift]\n", "    digits = str(x)\n\
    \    shifted = digits[shift:] + digits[:shift]\n    shifted = int(shifted)\n \
    \   return str(shifted)\n</cell>\n<text>\nHere we define the function \"rotate_digit\"\
    \ which accepts a string and an integer rotation and returns the result as a string.\n\
    \n\n</text>\n<cell>", "    digits = ''.join(map(str, list(str(x))[::-1]))\n  \
    \  shift = str(shift)\n    shift = shift if not shift.isdigit() else int(shift)\n\
    \    shift %= len(digits)\n    return digits[shift:] + digits[:shift]\n", "  \
    \  if shift == 0:\n        return x\n    if shift > len(x):\n        shift = len(x)\n\
    \    digits = []\n    for _ in range(shift):\n        digits.append(x[len(x) -\
    \ 1])\n        x.pop()\n    for _ in range(shift):\n        x.append(digits.pop())\n\
    \    return ''.join(x)\n\n", "    if shift > len(str(x)):\n        # return the\
    \ digits reversed\n        return str(x)[::-1]\n    else:\n        return str(x)[shift:]\
    \ + str(x)[:shift]\n", "    return str(x << shift) + str(x >> shift - len(str(x\
    \ << shift)))\n</code>\nI tested it with a simple test program\n<code>", "   \
    \ digits = str(x)\n    return \"\".join(\n        digits[shift : -shift] if digits\
    \ == x else digits[shift : -shift] + digits[:-shift]\n    )\n\n", "    if shift\
    \ < -len(x):\n        shift = -len(x)\n    return ints_to_str(x) + ints_to_str(int(str(x)[-shift:])\
    \ + 1)\n", "    # shift > number of digits\n    if shift > len(x):\n        shift\
    \ = len(x)\n        shift = shift-shift\n\n    # Shift the digits by shift\n \
    \   digits = list(x)\n    for i in range(shift):\n        digits.insert(len(digits)-i,\
    \ digits.pop(0))\n\n    # Convert to string\n    strng = \"\".join(map(str, digits))\n\
    \    return strng\n\n", "    return ''.join([f'{x[(i + shift) % len(x)]}' for\
    \ i in\n                    range(0, len(x), shift)][::-1])\n\n", "    # Shift\
    \ to the left by len(x) - shift and reverse the digits:\n    s = ''\n    for i\
    \ in range(len(x)):\n        s += x[-(i % shift)] if i % shift == 0 else x[-(i\
    \ % shift) + 1]\n    return s[::-1]\n\n", "    digits = str(abs(x))\n    if shift\
    \ == len(digits):\n        return digits\n    if shift < -len(digits):\n     \
    \   return digits.reverse()\n    return ''.join([digits[-shift:] + digits[:shift]])\n\
    \n", "    digits = str(x)\n    shift_digits = digits[shift:] + digits[:shift]\n\
    \    shift_digits_reversed = digits[-shift:] + digits[:-shift]\n    return shift_digits\n",
  "    if shift == 0:\n        return x\n    elif shift < -len(x):\n        return\
    \ str(x)[::-1]\n    elif shift > len(x):\n        return x\n    else:\n      \
    \  length = len(x)\n        if length < shift:\n            return ''.join((x[shift-length:shift],\
    \ x[0:shift]))\n        else:\n            return ''.join(\n                (x[shift-i:shift-i]\
    \ for i in range(length))[::-1]\n            )\n", "    if shift == 0:\n     \
    \   return x\n    if shift % len(x) < shift:\n        x = x + len(x) % len(x)\n\
    \    return x[-shift:] + x[:-shift]\n\n\n@njit(cache=True, fastmath=True)", " \
    \   return f'{x%10}{(x//10)*10}'.zfill(shift)\n", "    if shift > len(x):\n  \
    \      shift = len(x)\n    return x[shift:] + x[:shift]\n\n", "    if not x or\
    \ abs(x) > 10:\n        raise ValueError(\"x must be a non-negative integer >\
    \ 0\")\n    if shift < 0:\n        shift = -shift\n        n = len(str(abs(x)))\n\
    \    else:\n        n = len(str(abs(x) + shift))\n    digits = \"\"\n    digital_sum\
    \ = 0\n    for i in range(n):\n        if i < n:\n            digit = abs(x)\n\
    \            digital_sum += digit\n            x = digital_sum % 10\n        \
    \    digits = digits + str(digit)\n        else:\n            digits = digits\
    \ + str(abs(x))\n    x = abs(x)\n    y = abs(x)\n    for _ in range(abs(shift)):\n\
    \        if y < x:\n            y = x + y - x\n            digits = digits + str(y)\n\
    \        else:\n            x = y\n            y = x + y - x\n            digits\
    \ = digits + str(x)\n    x = x - y\n    digits = digits + str(x)\n    if shift\
    \ > 0:\n        return digits[abs(shift):]\n    else:\n        return digits[:abs(shift)]\n\
    \n", "    digits = str(x)\n    if digits == '0' or shift > len(digits):\n    \
    \    return digits\n    else:\n        return digits[shift:] + digits[:shift]\n",
  "    length = len(x)\n    if shift >= length:\n        return x\n    else:\n   \
    \     digit = x[:shift % length]\n        return digit[::-1] + circular_shift(x[shift:],\
    \ length - shift)\n\n", "    digits = []\n    while x > 0:\n        digits.append(x\
    \ % 10)\n        x //= 10\n    digits.reverse()\n    return ''.join(str(digit)\
    \ for digit in digits[shift:])\n", "    if shift < 0:\n        shift = -shift\n\
    \        shift = shift % len(x)\n        x = x[::-1]\n        shift = shift %\
    \ len(x)\n    return str(x[shift:] + x[:shift])\n</cell>\n<cell>", "    if shift\
    \ > len(x):\n        return x\n    digits = []\n    while x > 0:\n        digits.append(x\
    \ % 10)\n        x = int(x / 10)\n    # Shift digits right by shift\n    digits.reverse()\n\
    \    digits.insert(shift, digits.pop(0))\n    digits = ''.join(str(x) for x in\
    \ digits)\n    return digits\n", "    digits = str(x)\n    if shift > len(digits):\n\
    \        return ''.join(str(int(digits[-shift:]))[::-1])\n    else:\n        return\
    \ ''.join(str(int(digits[:-shift])))\n\n", "    revx = x[::-1]\n    circx = revx[-shift:]\
    \ + revx[:shift]\n    return str(circx)\n\n", "    if shift >= len(x):\n     \
    \   return \"\".join(str(int(d)^int(shift))\n                       for d in str(x))[::-1]\n\
    \    else:\n        return \"\".join(str(int(d)^int(shift))\n                \
    \       for d in str(x))\n", "    digits = list(x)\n    if shift:\n        digits.extend(digits[-shift:])\n\
    \        digits.extend(digits[:shift])\n    return ''.join(map(str, digits))\n\
    \n\n@assert_logic_return", "    shift_digits = x - shift - 1\n    shift_digits\
    \ = shift_digits if shift_digits < 0 else shift_digits\n    if shift_digits ==\
    \ 0:\n        return x\n    \n    left_digits = shift_digits % 10\n    right_digits\
    \ = 10 - left_digits\n\n    if left_digits == 0 and right_digits == 0:\n     \
    \   return x\n    elif left_digits == 0:\n        return f'{x}{right_digits}'\n\
    \    elif right_digits == 0:\n        return f'{x}{left_digits}'\n    else:\n\
    \        return f'{x}{left_digits}{right_digits}'\n\nprint(circular_shift(1, -3))\n\
    print(circular_shift(1, 0))\nprint(circular_shift(1, 3))\nprint(circular_shift(1,\
    \ 6))\n</cell>\n<text>\nQuestion 11\nWrite a function that returns the unique\
    \ characters in the input as a list.\n\nFor example:\n\n'abba' = ['a', 'b', 'b']\n\
    \n\n</text>\n<cell>", "    shifted = (x << shift) % 10\n    reversed = \"0\" *\
    \ (shift - len(str(shifted))) + str(shifted)\n    return reversed\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
