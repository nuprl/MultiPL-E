name: HumanEval_121_solution
language: py
prompt: "from typing import List\n\ndef solution(lst: List[int]) -> int:\n    \"\"\
  \"Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n    \n\n    Examples\n    >>> solution([5, 8, 7,\
  \ 1]) \n    12\n    >>> solution([3, 3, 3, 3, 3]) \n    9\n        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([5, 8, 7, 1]) == 12\n    assert\
  \ candidate([3, 3, 3, 3, 3]) == 9\n    assert candidate([30, 13, 24, 321]) == 0\n\
  \    assert candidate([5, 9]) == 5\n    assert candidate([2, 4, 8]) == 0\n    assert\
  \ candidate([30, 13, 23, 32]) == 23\n    assert candidate([3, 13, 2, 9]) == 3\n\n\
  def test_check():\n    check(solution)\n\ntest_check()\n"
completions: ["    evens = [x for x in lst if x % 2 == 0]\n    return sum(x for x\
    \ in evens if lst.index(x) % 2 == 1)\n", "    sum_ = 0\n    size = len(lst)\n\
    \    i = 0\n    while i < size:\n        if lst[i]%2 != 0:\n            sum_ +=\
    \ lst[i]\n        i += 1\n    return sum_\n\nprint(solution([5, 8, 7, 1])) \n\
    print(solution([3, 3, 3, 3, 3])) \n</code>\n<|/ a tags=python,python-3.x |>\n\
    <| a tags=python,python-3.x |>\nHere's my solution:\n<code>", "        sum = 0\n\
    \        for i, e in enumerate(lst):\n            if i % 2 != 0:\n           \
    \     sum += e\n        return sum\n", "    even = 0\n    odd = 0\n    for element\
    \ in lst:\n        if element % 2 == 0:\n            even += element\n       \
    \ else:\n            odd += element\n    return even + odd\n", "    even = 0\n\
    \    for i in lst:\n        if i % 2 != 0:\n            even += i\n    return\
    \ even\n</cell>\n<cell>", "    # your_code here\n    odd = [0] * len(lst)\n  \
    \  even = [x for x in range(len(lst))]\n    for i in lst:\n        if i % 2 ==\
    \ 0:\n            even[i] = even[i] - 1\n        elif i % 2 == 1:\n          \
    \  odd[i//2] = odd[i//2] + 1\n    return sum(odd[even[i]] for i in range(len(odd)))\n\
    \    \n\n</cell>\n<cell>", "    evenSum = 0\n    for i in range(len(lst)):\n \
    \       evenSum += lst[i]*((i%2==0)*2)\n    return evenSum\n", "    sum = 0\n\
    \    even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0:\n       \
    \     even += lst[i]\n        else:\n            sum += even\n            even\
    \ = 0\n    return sum\n\n", "    # code here\n    evensum = 0\n    for e in lst:\n\
    \        if e%2 == 0:\n            evensum += e\n    return evensum\n</cell>\n\
    <cell>", "    return sum(lst[2::2])\n</cell>\n<cell>", "    \n    even = list(filter(lambda\
    \ x: x%2 == 0, lst))\n    return sum(even)\n\n</cell>\n<text>\nCounting Bits\n\
    How many bits are there between any two numbers in a given range?\nHow many bits\
    \ are there between any two numbers in a given range?\n\n\n</text>\n<cell>", " \
    \   even = [n for n in lst if n % 2 == 0]\n    odd = [n for n in lst if n % 2\
    \ == 1]\n    return sum(odd.count(elem) for elem in even)\n\nprint(solution([5,8,7,1]))\n\
    print(solution([3, 3, 3, 3, 3]))\n</code>\n<|/ a tags=python-3.x,python,functional-programming\
    \ |>\n<| a |>\n<code>", "    even = 0\n    for idx, val in enumerate(lst):\n \
    \       if val % 2 == 0:\n            even += lst[idx]\n    return even\n    ",
  "    even = [x for x in lst if x % 2 == 0]\n    return sum(x for x in even if lst[x]\
    \ % 2 != 0)\n", "    res = 0\n    evenpos = 0\n    for i in range(len(lst)):\n\
    \        if lst[i]%2 == 0:\n            evenpos += 1\n            lst[evenpos]\
    \ = lst[i]\n        elif evenpos > 0:\n            evenpos -= 1\n            res\
    \ += lst[evenpos]\n    return res\n</cell>\n<cell>", "    even = 0\n    odd =\
    \ 0\n    \n    for i in lst:\n        if i % 2 == 0:\n            even += i\n\
    \        else:\n            odd += i\n    \n    return even + odd\n</cell>\n<cell>",
  "    res,ans=[],0\n    for i in range(len(lst)):\n        ans += lst[i]%2\n    \
    \    lst[i] = lst[i]//2\n        if i<len(lst)-1:\n            res.append(lst[i])\n\
    \    return ans\n</cell>\n<cell>", "        oddSum = 0\n        for i in range(len(lst)\
    \ - 1, -1, -1):\n            if lst[i] % 2 != 0:\n                oddSum += lst[i]\n\
    \            elif lst[i] % 2 == 0:\n                oddSum += lst[i] - 1\n   \
    \     return oddSum\n</code>\n<|/ a tags=python,algorithm |>\n<| a tags=python,algorithm\
    \ |>\nYou can do it like this:\n<code>", "    lst1 = [lst [i:i + 2] for i in range(len(lst)\
    \ - 1)]\n    return sum([lst1[i + 1] for i, v in enumerate(lst) if v % 2 == 0\
    \ and i % 2 == 0])\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3,\
    \ 3]))\n</code>\n<|/ a dscore=0 tags=python,python-3.x |>\n<| c |>\nIt works for\
    \ the given examples but I don't think it is the best way to solve the problem.\
    \ Using a list comprehension is more readable, and faster, and does not rely on\
    \ `numpy` which is only a dependency for this solution.\n<|/ c |>\n<| a dscore=0\
    \ tags=python,python-3.x |>\nHere is a way to get the sum without using numpy:\n\
    <code>", "    even_list = []\n    odd_list = []\n    for i in lst:\n        if\
    \ i % 2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n\
    \    return sum(odd_list[::2])\n\n</cell>\n<cell>\nsolution(lst)\n</cell>\n<text>\n\
    Challenge Solution\nA challenge solution is below. Run the cell, then click the\
    \ \"Submit Assignment\" button at the top of this notebook.\n\n</text>\n<cell>",
  "    # Solution 1 is to sort and remove all even elements.\n    # Solution 2 is\
    \ to use list slicing.\n    # Solution 3 is to implement binary search to solve\
    \ this problem.\n    return sum(lst[1::2])\n", "    evens = lst[0::2]\n    odd_sum\
    \ = sum(lst[1::2])\n    return odd_sum - sum(evens)\n", "    odd_num = 0\n   \
    \ for i in range(1, len(lst)):\n        if (lst[i] % 2 == 0) and (lst[i - 1] %\
    \ 2 == 0):\n            odd_num = odd_num + lst[i]\n\n    return odd_num\n", " \
    \   evensum = 0\n    even = 0\n    odd = 0\n\n    odd_sum = 0\n\n    for i in\
    \ lst:\n        if even % 2 == 0:\n            evensum += i\n            even+=1\n\
    \            odd_sum += i\n        else:\n            odd_sum += i\n         \
    \   odd+=1\n    return evensum+odd_sum\n\nsolution([5, 8, 7, 1])\n</cell>\n<cell>\n\
    solution([3, 3, 3, 3, 3])\n</cell>\n<text>\n\uBB38\uC81C 6. Odd Even Linked List\n\
    \n</text>\n<cell>\n\"\"\"\n>>> Solution = Solution()\n>>> Solution.findOddEven([2,3,5])\n\
    >>> Solution.findOddEven([2,3,4,5,6])\n>>> Solution.findOddEven([2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4])\n\
    >>> Solution.findOddEven([1,2,3,4])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4])\n>>> Solution.findOddEven([1,2,3,4])\n>>>\
    \ Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4])\n>>> Solution.findOddEven([1,2,3,4])\n>>>\
    \ Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n\
    >>> Solution.findOddEven([1,2,3,4,5,6,7,8,9,10])\n>>> ", "    even = []\n    odd\
    \ = []\n    for i in lst:\n        if i % 2 == 0:\n            even.append(i)\n\
    \        else:\n            odd.append(i)\n    return sum(even) + sum(odd)\n</code>\n\
    <|/ a tags=python |>\n<| a tags=python |>\n<code>", "    if not lst:\n       \
    \ return 0\n\n    even, odd = 0, 1\n    for num in lst:\n        if num % 2 ==\
    \ 0:\n            even += num\n        else:\n            odd += num\n\n    return\
    \ even + odd\n", "    \n    return sum(lst[i] for i in lst.index(lst[0]) if i%2\
    \ != 0)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\n</cell>\n\
    <text>\nEx 26: Write a Python program to find the square of a given number (X).\n\
    \n</text>\n<cell>", "    if len(lst)%2 != 0:\n        return 0\n    even, odd\
    \ = 0, 0\n    for i in range(0, len(lst), 2):\n        even += lst[i]\n      \
    \  odd += lst[i+1]\n    return even - odd\n    \n</cell>\n<cell>", "        even\
    \ = 0\n        odd = 0\n        \n        for i in range(len(lst)):\n        \
    \    if lst[i]%2 == 0:\n                even += lst[i]\n            else:\n  \
    \              odd += lst[i]\n            \n        return even+odd\n\n", "  \
    \  return sum([v for i,v in enumerate(lst) if i%2==1])\n", "    even = 0\n   \
    \ odd = 1\n    sum = 0\n    for i in range(1, len(lst)):\n        if lst[i] %\
    \ 2 == 0: even = even + lst[i]\n        else: odd = odd + lst[i]\n    sum = even\
    \ + odd\n    return sum\n", "    return sum(lst[i : i + 2] for i in range(len(lst)\
    \ - 1))\n", "    return sum([lst[j] if j%2 == 0 else 0 for j in range(0,len(lst),2)])\n\
    \n", "    even_sum = 0\n    for e in lst:\n        if e % 2 == 0:\n          \
    \  even_sum += e\n    return even_sum\n", "    even = 0\n    for index, num in\
    \ enumerate(lst):\n        if index % 2 == 0:\n            even += num\n    return\
    \ even\n", "    even_sum = sum(lst[2:][1::2])\n    odd_sum = sum(lst[2:][::2])\n\
    \    return even_sum + odd_sum\n", "    even_sum = sum(lst[i : i + 2] for i in\
    \ range(0, len(lst), 2))\n    return even_sum\n\n", "    oddSum = 0\n    evenSum\
    \ = 0\n    for i, el in enumerate(lst):\n        if i % 2 == 0:\n            evenSum\
    \ += el\n        else:\n            oddSum += el\n    return oddSum + evenSum\n\
    \nsolution([5, 8, 7, 1])\n</cell>\n<text>\nQuestion 5 (2 points)\nGiven an input\
    \ string, determine whether or not the string contains an even number of '1's\
    \ and '0's. If it does, return the string itself; otherwise, return the string\
    \ \"even-odd\" where 'even' is any number of 1's and 'odd' is any number of 0's.\
    \ \n\nExamples\nSolution should return \"even-odd\"\nSolution should return \"\
    odd\"\nSolution should return \"even\"\n\nInput Format\nThe first line contains\
    \ one integer T denoting the number of test cases. The description of T test cases\
    \ follow.\n\nThe first line of each test case contains a single integer N (1 <=\
    \ N <= 100). The second line contains N space separated integers denoting the\
    \ binary string S.\n\nOutput\nFor each test case, output exactly one line. In\
    \ the first line, print either \"even-odd\", \"odd\", or \"even\", depending on\
    \ whether the binary string contains even or odd number of '1's and '0's respectively.\
    \ The second line contains your answer for each test case.\n\nSample Input\n5\n\
    11\n10 1 0 1\n0 1\nSample Output\neven-odd\nodd\neven\nExplanation\nTest case\
    \ 1: Both even and odd number of '1's in S and T are even. So, print even-odd.\n\
    Test case 2: Even number of '1's in S and T are odd. So, print odd.\nTest case\
    \ 3: Even number of '1's in S and T are even. So, print even.\nTest case 4: Both\
    \ even and odd number of '1's in S and T are odd. So, print odd.\n\n\n</text>\n\
    <cell>\nfrom typing import List\n", "    even = 0\n    odd = 0\n    for index,\
    \ i in enumerate(lst):\n        if index % 2 == 0:\n            even = even +\
    \ i\n        else:\n            odd = odd + i\n    return even+odd\n</cell>\n\
    <cell>\nsolution([5,8,7,1])\n</cell>\n<cell>\nsolution([3, 3, 3, 3, 3])\n</cell>\n\
    <text>\n(\uC0D8\uD50C \uB0B4\uC6A9)\n\n\n</text>\n<cell>", "    \n    if len(lst)\
    \ == 0:\n        return 0\n    \n    even = lst[0::2]\n    odd = lst[1::2]\n \
    \   \n    return sum(i for i in even if i in odd)\n</cell>\n<cell>", "    odd\
    \ = [n for n in lst if n % 2 != 0]\n    even = [n for n in lst if n % 2 == 0]\n\
    \    return sum(odd) + sum(even)\n</cell>\n<cell>", "    odd_sum = 0\n    even_sum\
    \ = 0\n    for idx,val in enumerate(lst):\n        if idx%2 == 0:\n          \
    \  even_sum += val\n        else:\n            odd_sum += val\n    return odd_sum\
    \ + even_sum\n\n\n</cell>\n<cell>\nsolution([5, 8, 7, 1]) \n</cell>\n<cell>\n\
    solution([3, 3, 3, 3, 3]) \n</cell>\n<cell>\nl1 = [5,8,7,1]\nl2 = [3,3,3,3]\n\n\
    l = [l1,l2]\nsol = [\n    [5, 8, 7, 1],\n    [3, 3, 3, 3]\n]\n", "    return sum(lst[1::2])\n\
    \n", "    odds = 0\n    for i in lst:\n        if i % 2 != 0:\n            odds\
    \ += i\n    return odds\n</cell>\n<cell>", "    return sum(lst[i] for i in (lst.index(item)\
    \ for item in lst) if i % 2 == 1)\n", "    \n    return sum((lst[i] for i in lst\
    \ if i % 2 == 1) )\n\nassert solution([5, 8, 7, 1]) == 12\nassert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nThe next question that we will look at is\
    \ what if there are multiple items in the list that have the same odd value?\n\
    \n\n</text>\n<cell>", "    \n    return sum(lst[i : i+2] for i in xrange(len(lst)\
    \ - 1))\n</cell>\n<cell>\nassert solution([5, 8, 7, 1]) == 12\nassert solution([3,\
    \ 3, 3, 3, 3]) == 9\n</cell>\n<text>\nIf statements\nThe code in the cells below\
    \ is just an illustration\n\n</text>\n<cell>\nlst = [1, 2, 3, 4, 5]\nlst[2]\n\
    </cell>\n<cell>\nlst[2] = 8\n</cell>\n<cell>\nlst\n</cell>\n<cell>", "    evenSum\
    \ = 0\n    for num in lst:\n        if num%2 != 0:\n            evenSum += num\n\
    \    return evenSum\n\n</code>\n<|/ a |>\n<| a dscore=0 |>\nSince you already\
    \ know about if else statements, try this approach\n<code>", "    evens = sum(lst[0:::2])\n\
    \    odds = sum(lst[::2])\n    return odds - evens\n\n", "    even_index = 0\n\
    \    total = 0\n    for index, value in enumerate(lst):\n        if value % 2\
    \ == 0:\n            even_index = index\n        else:\n            total += lst[even_index]\
    \ + lst[even_index + 1]\n    return total\n\n", "    \n    even_positions = []\n\
    \    \n    for num in lst:\n        if num%2 == 0:\n            even_positions.append(num)\n\
    \    \n    return sum(even_positions)\n\nsolution([5, 8, 7, 1])\nsolution([3,\
    \ 3, 3, 3, 3])\n</cell>\n<text>\nExplanation\n\n</text>\n<text>\nThe first part\
    \ is straightforward - we just go through each element in the list and determine\
    \ if it is even or odd. We can store this information in a list called even_positions,\
    \ and then sum them all up at the end. How does the code work?\n\n\n</text>\n\
    <cell>", "    even_list = []\n    for num in lst:\n        if num % 2 == 0:\n\
    \            even_list.append(num)\n        else:\n            even_list.append(0)\n\
    \    sum_even_list = sum(even_list)\n    return sum_even_list\n\n", "    even\
    \ = 0\n    odd = 0\n    \n    for i in lst:\n        if i % 2 == 1:\n        \
    \    even += i\n        else:\n            odd += i\n\n    return even + odd\n\
    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\nprint(solution([1,\
    \ 1, 1, 1, 1]))\nprint(solution([10, 10, 10, 10, 10]))\nprint(solution([-100,\
    \ -100, -100, -100, -100]))\nprint(solution([-1, -1]))\n</cell>\n<cell>", "  \
    \  odd = sum( lst[p:p+2] for p in range(0, len(lst), 2) )\n    return sum( lst[p:p+2]\
    \ for p in range(0, len(lst), 2) if lst[p%2] == True )\n\n        ", "    \n \
    \   even_sum = sum(lst[1::2])\n    return even_sum % 2\n</cell>\n<text>\nTest\
    \ Your Solution\n\n</text>\n<cell>", "    \n    odd_numbers = 0\n    even = 0\n\
    \    \n    for item in lst:\n        if item % 2 == 0:\n            even += item\n\
    \        else:\n            odd_numbers += item\n    \n    return odd_numbers\
    \ + even\n    \n    ", "    \n    return sum(lst[i] for i in lst if i % 2 == 1)\n\
    </cell>\n<cell>\n\"\"\"", "    odds = list(filter(lambda x: x%2, lst))\n    return\
    \ sum(odds)\n</code>\n<|/ a tags=python,python-3.x |>\n<| c |>\nThis solution\
    \ does not work for `lst = [3, 3, 3, 3, 3]`.\n<|/ c |>\n<| c |>\nI know, I wrote\
    \ my solution just to answer OP's question, it's your job to do what You want.\n\
    <|/ c |>\n<| c |>\nApologies, I missed that part.\n<|/ c |>\n<| a dscore=2 |>\n\
    Use map and lambda:\n<code>\nlist(map(lambda x: sum(x%2 for i in range(0, len(x)),\
    \ 1) if x%2==1 ), arr)\n</code>\nOutput:\n<code>\n[10, 10, 10, 10, 10]\n</code>\n\
    <|/ a tags=python,python-3.x |>\n<| a tags=python,python-3.x |>\nUsing list comprehension:\n\
    <code>", "    res=0\n    for i in range(0,len(lst)):\n        if lst[i]%2==0:\n\
    \            res+=lst[i]\n    return res\n        \n\n</cell>\n<cell>\nsolution([5,8,7,1])\n\
    </cell>\n<cell>\nsolution([3,3,3,3])\n</cell>\n<text>\nQuestion 7\nA permutation\
    \ is an ordered arrangement of objects. For example, 3124 is one possible permutation\
    \ of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically\
    \ or alphabetically, we call it lexicographic order. The lexicographic permutations\
    \ of 0, 1 and 2 are:\n\n012   021   102   120   201   210\n\n\nWhat is the millionth\
    \ lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?\n\n\
    \n</text>\n<cell>", "    even_indexes = [i for i, v in enumerate(lst) if v % 2\
    \ == 0]\n    return sum(lst[i] for i in even_indexes)\n", "    # Your code here\n\
    \    even = 0\n    odd = 0\n    i = 0\n    while i < len(lst):\n        if lst[i]%2\
    \ == 0:\n            even = even+lst[i]\n        else:\n            odd = odd+lst[i]\n\
    \        i+=1\n    return odd+even\n", "    odd_sum = 0\n    for i, e in enumerate(lst):\n\
    \        if i % 2 == 0:\n            odd_sum += e\n\n    return odd_sum\n", " \
    \   return sum( lst[ i%2 ]  for i in  range(len(lst)) )\n    \n    \n        \n\
    </cell>\n<text>\nPart 2\n\n</text>\n<text>\nPython has many built-in functions\
    \ and types that make life easier for you. For example, you can sum up a list\
    \ by using sum():\n\n\n</text>\n<cell>", "    odd_sum = 0\n    for ele in lst:\n\
    \        if ele % 2 == 0:\n            odd_sum += ele\n    return odd_sum\n",
  "    \n    odd_numbers = []\n    \n    for i in lst:\n        if i % 2 == 0:\n \
    \           odd_numbers.append(i)\n    \n    odd_numbers.sort()\n    \n    sum\
    \ = 0\n    \n    for i in range(1, len(odd_numbers)):\n        if odd_numbers[i]\
    \ - odd_numbers[i - 1] == 1: \n            sum = sum + odd_numbers[i]\n    \n\
    \    return sum\n    \n    \n    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3,\
    \ 3, 3, 3, 3]))\n</cell>\n<text>\nNotice that in the second example, 3 doesn't\
    \ appear anywhere in the odd_numbers list, which means we can immediately add\
    \ it into the sum. Similarly, 7 doesn't appear anywhere in the odd_numbers list,\
    \ but we already have 4 appearing in the list, so we can immediately add it into\
    \ the sum. Let's rephrase the algorithm a little bit to make it easier to understand\
    \ what it's doing.\n\nIf we had a list with 7 elements, what would it look like?\
    \ Here are some examples:\n\n[5, 8, 7, 1, 3, 3, 3]\n[3, 3, 3, 3, 3, 3, 3, 3]\n\
    [5, 8, 7, 1]\n[3, 3, 3, 3, 3, 3]\n[3, 3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3]\n[3,\
    \ 3, 3]\n[3, 3]\n[3, 3]\n[3]\n[3]\nWe see that by inspecting each element in the\
    \ list, we can add it into the sum. How about if we have a list of length 9? Now\
    \ there are 9 elements in the list. How would we go about adding them all into\
    \ the sum?\n\nRecall: we can look at the previous element in the list and see\
    \ if the difference between it and the current element we're looking at is 1.\
    \ If it is, then we can add the current element into the sum.\n\n\n</text>\n<cell>\n\
    from typing import List\n", "    evensum = 0\n    oddsum = 0\n    for ele in lst:\n\
    \        if ele % 2 == 0:\n            evensum += ele\n        else:\n       \
    \     oddsum += ele\n\n    return evensum + oddsum\n\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nThe above solution has worked fine in python 3.7 but if you try\
    \ to execute in python 3.6 it will throw an error of \"TypeError: 'int' object\
    \ is not iterable\". So, I just converted the list into set and then applied the\
    \ solution. Here is the code:\n<code>\nfrom itertools import combinations", " \
    \   \n    if len(lst) < 2:\n        return lst[0]\n    \n    even = 0\n    odd\
    \ = 1\n    \n    for i in range(1, len(lst)):\n        if lst[i] % 2 == 0:\n \
    \           even += lst[i - 1: i + 1]\n        else:\n            odd += lst[i\
    \ - 1: i + 1]\n    \n    return even + odd\n", "    return sum(lst[1::2])\n</cell>\n\
    <cell>", "    even = 0\n    for i in range(len(lst)):\n        if i%2 == 1:\n\
    \            even += lst[i]\n    return even\n\nsolution([5, 8, 7, 1])\n\n</cell>\n\
    <text>\n(4) Sum Of The Even Numbers\nWrite a function that returns the sum of\
    \ all the even numbers in a list.\n\nFor example, sum([2, 4, 6, 8]) should return\
    \ 24.\n\nGiven the list [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], your function should return\
    \ 25.\n\nAssume that the list is not empty, and doesn't contain duplicates.\n\n\
    You may assume that the returned sum is always positive, and is at most 2000 digits.\n\
    \n\n</text>\n<cell>", "    \n    count = 0\n    \n    for index,i in enumerate(lst):\n\
    \        if index % 2 == 0:\n            count += i\n        else:\n         \
    \   count += i**2\n    \n    return count\n            \n        \n    \n    \n\
    \        ", "    even = sum(lst[0::2])\n    odd = sum(lst[1::2])\n    return (even\
    \ + odd)\n", "    res = 0\n    even = []\n    odd = []\n    \n    for num in lst:\n\
    \        if num % 2 != 0:\n            odd.append(num)\n        else:\n      \
    \      even.append(num)\n    \n    even = even[1::]\n    odd = odd[1::]\n    \n\
    \    if len(even) + len(odd) == len(lst):\n        res = sum(even)\n    return\
    \ res\n    \n    ", "    evensum = 0\n    for i in lst:\n        if i % 2 == 0:\n\
    \            evensum += i\n    return evensum\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 tags=python,arrays,python-3.x |>\nThis is a simple solution with\
    \ O(n) time complexity.\n<code>", "    res=lst[0]\n    for i in range(1,len(lst)):\n\
    \        if lst[i]%2==0:\n            res+=lst[i-1]\n    return res\n</code>\n\
    <|/ a dscore=0 tags=python |>\n<| a dscore=0 |>\n<code>", "    even = 0\n    for\
    \ i in range(len(lst) - 1, -1, -1):\n        if lst[i] % 2 == 0:\n           \
    \ even += lst[i]\n    return even\n", "    return sum(x for x, y in zip(lst, lst[1:]\
    \ if x % 2 == 1) if y % 2 == 0)\n", "    even = [i for i in lst if i % 2 != 0]\n\
    \    odd = [i for i in lst if i % 2 == 0]\n    total = sum(odd[1::2])\n    return\
    \ total\n", "    \n    # Create a dictionary to store the odd numbers and the\
    \ sums \n    d = {}\n    # Loop through the list to find the odd numbers and store\
    \ the sums in the dictionary\n    for i in lst:\n        if i not in d.keys():\n\
    \            d[i] = 0\n        d[i%2] += 1\n    \n    sum = 0\n    for i in d.values():\n\
    \        if i != 0:\n            sum += i\n    return sum\n    \n\n</cell>\n<cell>",
  "    even = 0\n    odd = 0\n    for i in lst:\n        if i % 2 == 0:\n        \
    \    even += i\n        else:\n            odd += i\n    return even + odd\n",
  "    sum = 0\n    for i in range(len(lst)):\n        sum += lst[i*2]\n    return\
    \ sum\n</cell>\n<text>\nCoding the solution\nFirst of all, we need to write a\
    \ function that takes our list as input, and returns the sum of the even elements,\
    \ plus all of the odd elements that are in the even positions.\n\nAt the same\
    \ time, we need to take into account the fact that we can access the even positions\
    \ by taking the integer multiplication of each element with 2, and we can access\
    \ the odd positions by taking the integer multiplication of each element with\
    \ 2.\n\nThen, we just need to find the sum of both lists.\n\n\n</text>\n<cell>",
  "    oddEven = 0\n    for i, val in enumerate(lst):\n        if i % 2 == 0:\n  \
    \          oddEven += val\n    return oddEven\n</cell>\n<cell>", "    # Your code\
    \ here\n    evens = lst[0::2]\n    odds = lst[1::2]\n    return sum(x for x in\
    \ odds if x in evens)\n", "    even=0\n    odd=0\n    for i in lst:\n        if\
    \ i%2==0:\n            even+=i\n        else:\n            odd+=i\n    return\
    \ even+odd\n", "    even = 0\n    odd = 1\n    for i in lst:\n        if i % 2\
    \ == 0:\n            even += i\n        else:\n            odd += i\n    return\
    \ even + odd\n\nlst = [5, 8, 7, 1]\n\nsolution(lst)\n\n</cell>\n<text>\nQuestion\
    \ 17\nWrite a function named solution_2 that accepts an integer as its only argument.\
    \  Your function should sum all of the odd values in a list and return that value.\
    \  (Do NOT use the built in sum() function!).\n\nFor example, calling solution_2(lst)\
    \ should return 7 + 5 + 8 + 1 + 3 = 19. \nThe first odd number is 5.\n\n\n</text>\n\
    <cell>", "    l=len(lst)\n    even_index=[]\n    for i in range(l):\n        if(lst[i]%2==0):\n\
    \            even_index.append(i)\n    even_sum=0\n    for i in even_index:\n\
    \        even_sum+=lst[i]\n    return even_sum\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    even = 0\n    odd = 0\n    for i in lst:\n    \
    \    if i % 2 == 1:\n            even += i\n        else:\n            odd +=\
    \ i\n    return even+odd\n", "    \n    even = sorted(lst)\n    for i in range(len(even)):\n\
    \        if even[i]%2 == 0:\n            even[i] = 0\n    \n    return sum(even)\n\
    \    \n\"\"\"\nDON'T WRITE HERE\n\"\"\"\n<|/ file dstars=1 source=github filename=day_4_part_1.py\
    \ |>\n<| c |>\nCan you explain what your solution does? You don't need to explain\
    \ the whole function if you can explain it line by line.\n<|/ c |>\n<| c |>\n\
    i just edited the answer, the main idea is to sort elements into even positions\
    \ to get all odd ones then the sum them\n<|/ c |>\n<| a dscore=1 tags=python-3.x,python\
    \ |>\n<code>", "    even = sum(lst[::2])\n    odd  = sum(lst[1::2])\n    return\
    \ even + odd\n</cell>\n<text>\nExercise: Using sum(), you can sum up the odd elements\
    \ in your list:\n\n\n</text>\n<cell>\nlst = [5, 8, 7, 1]\nsum(lst[1::2])\n</cell>\n\
    <text>\nExercise: Can you write another solution to this problem to count the\
    \ number of occurrences of the digit 3 in an array?\n\n\n</text>\n<cell>\nfrom\
    \ collections import Counter", "    \n    count = 0\n    for index in range(len(lst)):\n\
    \        if index % 2 == 0:\n            count += lst[index]\n    return count\n\
    </code>\n<|/ a |>\n<| a tags=python |>\nUsing list comprehensions, you can use\
    \ the filter function to only retain odd positions:\n<code>", "    evens=0\n \
    \   odds=0\n    for i in range(len(lst)):\n        if lst[i]%2==0:\n         \
    \   evens+=lst[i]\n        else:\n            odds+=lst[i]\n            \n   \
    \ return odds+evens\n    ", "    \n    # Solution using list comprehensions\n\
    \    odd = [x for x in lst if x % 2 == 1]\n    return sum([x for x in lst if x\
    \ % 2 == 0 and lst.index(x) in odd]) * 2 \n", "    evenSum = sum(lst[::2])\n \
    \   oddSum = sum(lst[1::2])\n    return evenSum + oddSum\n</cell>\n<cell>", " \
    \   even_index = [i for i, v in enumerate(lst) if v & 1]\n    return sum(lst[even_pos:\
    \ even_pos + 2])\n    \n", "    sum = 0\n    for i in range(len(lst)):\n     \
    \   if lst[i] % 2:\n            sum += lst[i]\n    return sum\n\n", "    \n  \
    \  odd = 0\n    even = 0\n    \n    for i in range(len(lst)):\n        if i%2\
    \ == 0:\n            even = even + lst[i]\n        else:\n            odd = odd\
    \ + lst[i]\n            \n    return odd+even\n            \n            \n  \
    \          \n            \n        \n            \n            \n            \n\
    \        \n    \n    \n    \n        \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    \n    return sum(i for i in lst if\
    \ i%2==0)\n", "    return sum(lst[1::2])\n", "    \n    # Your code here\n   \
    \ odd_even = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n \
    \           odd_even += lst[i]\n    \n    return odd_even\n        \n</cell>\n\
    <cell>\nlst = [5, 8, 7, 1]\nsolution(lst)\n</cell>\n<text>\nList Comprehensions\n\
    \n</text>\n<text>\nList comprehensions provide a concise way to create lists.\
    \ Commonly used within functions, but can also be used to create a new list with\
    \ a for loop.\n\n\n</text>\n<text>\nBasic List Comprehension\n\n</text>\n<cell>\n\
    [x for x in range(20)]\n</cell>\n<cell>\n[x + 3 for x in range(20)]\n</cell>\n\
    <cell>\n[x for x in range(20) if x % 2 == 0]\n</cell>\n<text>\nList Comprehension\
    \ Syntax\n\n</text>\n<text>\nSyntax\n\n</text>\n<text>\nList comprehension consists\
    \ of a for statement and zero or more for clause items.\n\nfor statement in list\n\
    for clause item in list\nfor clause item in list:\n    for clause item in list:\n\
    \    ...\n\n\n</text>\n<text>\nFor statement\n\n</text>\n<text>\nThe for statement\
    \ is used to iterate over items in a list.\n\n\n</text>\n<text>\nfor x in range(len(lst)):\n\
    \    print(lst[x])\n</cell>\n<cell>\nlst = [1, 2, 3, 4]\nlst\n</cell>\n<cell>\n\
    for x in range(len(lst)):\n    print(lst[x])\n</cell>\n<cell>\nfor x in range(4):\n\
    \    print('x')\n</cell>\n<cell>", "    even = even = []\n    odd = odd = 0\n\
    \    for i in lst:\n        if i % 2 == 0 :\n            even.append(i)\n    \
    \    if i % 2 != 0 :\n            odd = i\n\n    return sum(even) + odd\n", " \
    \       count = 0\n        for i in lst:\n            if i%2 == 0:\n         \
    \       count += i\n        return count\n</cell>\n<cell>", "    \n    even, odd\
    \ = 0, len(lst)\n    \n    while even < odd:\n        \n        if lst[even] %\
    \ 2 == 0:\n            even += 1 \n        \n        else:\n            odd -=\
    \ 1\n    \n    return sum(lst[even:odd + 1])\n\n\"\"\"\nDifficulty: Hard\n\nTime\
    \ complexity: O(n)\nSpace complexity: O(1)\n\"\"\"\n</cell>\n<text>\nGiven an\
    \ even length list and a value x, determine if x appears in the middle of the\
    \ list as one of the first x elements.\n\nFor example, given x = 3 and lst = [1,\
    \ 2, 3, 4, 5], the function should return true since the middle 3 (index = 2)\
    \ is the first x element of lst (index 0). The function should return false otherwise.\n\
    \nThis function should run in O(n) time. The runtime complexity should be less\
    \ than O(n) in the worst case.\n\n\n</text>\n<cell>\nlst = [1, 2, 3, 4, 5, 6,\
    \ 7]\nx = 4\n</cell>\n<cell>", "    return sum(x for x,y in enumerate(lst) if\
    \ y%2)\n", "    # your code here\n    # your if statement only checks the odd\
    \ numbers, you can change this \n    # to check for even numbers\n    \n    odd_sum\
    \ = 0\n    for num in lst:\n        if num % 2 == 0:\n            odd_sum += num\n\
    \    \n    return odd_sum\n\n    \nprint(solution([5, 8, 7, 1]))\nprint(solution([3,\
    \ 3, 3, 3, 3]))\n</cell>\n<text>\nList Comprehension Solution\nIf you have a for\
    \ loop that collects some results in a list, you can use a list comprehension\
    \ to get the job done more efficiently.\n\nIn this solution, instead of using\
    \ a for loop, you will use a list comprehension to gather the odd numbers in a\
    \ list.\n\n\n</text>\n<cell>", "    evens = 0\n    odds = 0\n    for n in lst:\n\
    \        if n % 2 == 0:\n            evens += n\n        else:\n            odds\
    \ += n\n    return evens + odds\n", "    return sum(lst[i] for i in lst if i %\
    \ 2 == 1)\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3]))\n</cell>\n\
    <cell>\nfrom typing import List\n", "    \n    sum_of_odd_elements = 0\n    \n\
    \    even_indexes = list(filter(lambda x: x % 2 == 0, lst))\n    \n    for index,\
    \ ele in enumerate(lst):\n        if ele in even_indexes:\n            sum_of_odd_elements\
    \ += ele\n    return sum_of_odd_elements\n</code>\n<code>\n>>> solution([5, 8,\
    \ 7, 1])\n12\n>>> solution([3, 3, 3, 3, 3])\n9\n>>> solution([1, 2, 3])\n6\n>>>\
    \ solution([-1, -2, -3]) \n-10\n</code>\n<|/ a tags=arrays,python dscore=1 |>\n\
    <| a tags=arrays,python |>\n<code>", "        even = lst[::2]\n        odd = lst[1::2]\n\
    \        return sum(odd for even in even)\n", "    if not lst:\n        return\
    \ 0\n\n    even = 0\n    odd = 0\n    size = len(lst)\n\n    for i in range(0,\
    \ size):\n        if i % 2 == 0:\n            even += lst[i]\n        else:\n\
    \            odd += lst[i]\n\n    return even + odd\n\n", "    # code here\n \
    \   return sum(lst[1::2])\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3,\
    \ 3, 3, 3, 3]))\n</cell>\n<text>\nNotice how the above solution works in three\
    \ lines of code! It's pretty easy to understand once you know what it's doing!\
    \ This solution also works well for larger inputs. Try creating a solution that\
    \ works for a list of 10,000 integers, and compare it to the above solutions using\
    \ %%timeit magic to test performance. You should figure out the best solution\
    \ for your programming environment.\n\nSum up All Odd Numbers\nIf you wanted to\
    \ sum up all the odd numbers in the list, here's one solution:\n", "    return\
    \ sum(filter(lambda x: x % 2 ==1, lst))\n</code>\n<|/ a |>\n<| a dscore=1 |>\n\
    The algorithm is simple.\nWe must add the first element (Odd one) to the sum,\
    \ then add 2nd and 3rd elements, and so on. \n<code>\nfunction Solution(arr) {\n\
    \  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] % 2\
    \ === 0) {\n      sum += arr[i];\n    } else {\n      sum += arr[i] % 2 === 1\
    \ ? arr[i] : arr[i] * arr[i]; //even position's odd values + 1 \n    }\n  }\n\
    \  return sum;\n}\n</code>\n<|/ a tags=python,algorithm |>\n<| c |>\nThe question\
    \ asks to only add odd numbers.  Hence, `arr[i] * arr[i]`, not `arr[i] + arr[i]`.\n\
    <|/ c |>\n<| c |>\nYour code returns `14` for input `[12, 7, 1, 9]`.  Also, it\
    \ is inefficient because you're looping through twice.  Also, `arr[i] % 2 ===\
    \ 1 ? arr[i] : arr[i] * arr[i]` can be simplified to `arr[i] * arr[i]`.\n<|/ c\
    \ |>\n<| c |>\nThis code doesn't return 14.  It's returning 15.  Also the code\
    \ loops through the array twice since I didn't want to loop through the array\
    \ more than once. The efficiency part is obviously true and I will edit my answer.\
    \ Thanks.\n<|/ c |>\n<| c |>\nPlease revisit your answer.  Your code is adding\
    \ every second element of the array.  For instance, in your example, `[12, 7,\
    \ 1, 9]`, your algorithm returns `20` but should be `12`.  Also, please clarify\
    \ whether your code is correct, or just more efficient than yours.\n<|/ c |>\n\
    <| c |>\nI missed that, thanks. Now it's correct.\n<|/ c |>\n<| a |>\n<code>",
  "    return sum(lst[1::2])\n\nimport unittest", "    return sum([lst[i] for i in\
    \ [i for i, x in enumerate(lst) if x%2 == 1]])\n</cell>\n<cell>", "    if lst\
    \ == []:\n        return 0\n    evensum = 0\n    oddevensum = 0\n    for index\
    \ in range(len(lst)):\n        if index % 2 == 0:\n            evensum += lst[index]\n\
    \        else:\n            oddevensum += lst[index]\n    return evensum + oddevensum\n",
  "    even_indexes = [i for i, e in enumerate(lst) if e % 2 == 0]\n    odd_indexes\
    \ = [i for i, e in enumerate(lst) if e % 2 != 0]\n    return sum(lst[odd_indexes[i]:even_indexes[i]+1]\
    \ for i in odd_indexes)\n", "    even = 0\n    for i in lst:\n        if i%2 ==\
    \ 0:\n            even += i\n    return even\n    \n", "    even = lst[::2]\n\
    \    odd = lst[1::2]\n    return sum(item for item in odd if item in even)\n\n\
    </code>\n<|/ a tags=list,python |>\n<| c |>\nNice and concise.  I would add that\
    \ `lst[::2]` and `lst[1::2]` are equivalent to `lst[:len(lst)/2:-1]` and `lst[len(lst)/2:]`\n\
    <|/ c |>\n<| a tags=list,python dscore=0 |>\nHere is another solution for your\
    \ problem:\n<code>", "    \n    odd_elements = 0\n    \n    # iterating through\
    \ the list\n    for i in range(len(lst) - 1, -1, -1):\n        if lst[i] % 2 !=\
    \ 0:\n            odd_elements += lst[i]\n    return odd_elements\n\nprint(solution([5,\
    \ 8, 7, 1]))\nprint(solution([3, 3, 3, 3, 3]))\n</cell>\n<text>\nExercise 7: Reverse\
    \ a List\nWrite a function that reverses a list containing numbers. \nIf given\
    \ an empty list, return the empty list. \nYou may not use the .reverse() method\
    \ of a Python list.\n\n\n</text>\n<cell>", "    even = [i for i in lst if i%2\
    \ == 0]\n    odds = [i for i in lst if i%2 != 0]\n    return sum(i for i in odds\
    \ if i in even)\n\n", "    return sum(lst[i::2][1::2])\n\n\"\"\"", "    \n   \
    \ # Solution\n    evenSum = 0\n    for num in lst:\n        if num % 2 == 0:\n\
    \            evenSum += num\n\n    return evenSum\n", "    if lst:\n        return\
    \ sum(lst[1::2])\n    else:\n        return 0\n    ", "    odd_sum = 0\n    for\
    \ i in range(len(lst)//2):\n        if lst[i] % 2 == 1:\n            odd_sum +=\
    \ lst[i]\n    return odd_sum\n</code>\n<|/ a tags=python dscore=0 |>\n<| c |>\n\
    Thanks for your answer, but I don't think this solves the problem. This would\
    \ work for, say, `[1, 3, 5, 7, 8, 9]`, but would fail to produce the correct output\
    \ for `[3, 3, 3, 3, 3, 3]`.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    count\
    \ = 0\n    sum = 0\n    for i in range(len(lst)):\n        if (i%2==0):\n    \
    \        sum += lst[i]\n        elif (i%3==0):\n            sum += lst[i]\n  \
    \  return sum\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3]))\n\
    \n</cell>\n<cell>", "    count = 0\n    even = []\n    odd = []\n    for i in\
    \ lst:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n  \
    \          odd.append(i)\n\n    for i in even:\n        count += i\n\n    return\
    \ count\n\n", "    odd_sum = 0\n    even_sum = 0\n\n    for i in range(len(lst)):\n\
    \        if i % 2 == 0:\n            even_sum += lst[i]\n        else:\n     \
    \       odd_sum += lst[i]\n\n    return odd_sum + even_sum\n", "    odd_sum =\
    \ 0\n    for index in range(1, len(lst)):\n        if (index % 2) == 0:\n    \
    \        odd_sum += lst[index]\n            lst.remove(lst[index])\n    return\
    \ odd_sum\n\n", "    # your code here\n    if len(lst)<2:\n        return lst[0]\n\
    \    else:\n        return lst[0] + solution(lst[1:(lst[0]//2)]) + solution(lst[(lst[0]+1)//2:])\n\
    \            \n</cell>\n<cell>", "    \n    if lst == []:\n        return 0\n\
    \    \n    even_idx = 0\n    odd_idx = 0\n    \n    total = 0\n    \n    len_lst\
    \ = len(lst)\n    \n    while even_idx < len_lst and odd_idx < len_lst:\n    \
    \    \n        if lst[even_idx] % 2 == 0:\n            total += lst[even_idx]\n\
    \            even_idx += 1\n        else:\n            total += lst[odd_idx]\n\
    \            odd_idx += 1\n    \n    return total\n", "    even = 0\n    odd =\
    \ 0\n    for i in lst:\n        if i % 2 == 0:\n            even += i\n      \
    \  else:\n            odd += i\n    return even + odd\n</cell>\n<cell>", "   \
    \ even_sum = 0\n    odd_sum = 0\n    \n    for i in range(len(lst)):\n       \
    \ if i % 2 == 0:\n            even_sum += lst[i]\n        else:\n            odd_sum\
    \ += lst[i]\n        \n    return even_sum + odd_sum\n</code>\n<|/ a dscore=0\
    \ tags=python,python-3.x |>\n<| a tags=python,python-3.x |>\nThe solution provided\
    \ by Ashish is very good. Here is another solution that uses reduce method. This\
    \ solution doesn't use list comprehension. \n<code>\nfrom functools import reduce\n",
  "    \n    return sum(lst[1::2]) + sum(lst[::2]) % 2\n", "    sum_ = 0\n    for\
    \ i in lst:\n        if i%2 == 0:\n            sum_ += i\n    return sum_\n",
  "    # Your code here\n    even = 0\n    odd = 0\n    for i in range(len(lst)):\n\
    \        if lst[i] % 2 == 0:\n            even += lst[i]\n        else:\n    \
    \        odd += lst[i]\n    return even + odd\n\n", "    even = 0\n    odd = 0\n\
    \    \n    for i, val in enumerate(lst):\n        if i % 2 == 0:\n           \
    \ even += val\n        else:\n            odd += val\n        \n    return even+odd\n",
  "    if len(lst) == 0:\n        return 0\n        \n    sum = 0\n    for i in range(0,\
    \ len(lst)):\n        if i % 2 == 0:\n            sum += lst[i]\n    return sum\n",
  "    even_index = 0\n    odd_index = 1\n    total_sum = 0\n    for i in range(len(lst)):\n\
    \        if lst[i] == 3:\n            even_index += 1\n        elif lst[i] ==\
    \ 5:\n            odd_index += 1\n        elif even_index >= odd_index:\n    \
    \        total_sum += lst[i]\n        elif odd_index >= even_index:\n        \
    \    total_sum -= lst[i]\n    return total_sum\n\n\n\"\"\"\n[5, 8, 7]\n[3, 3,\
    \ 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n\
    [3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3,\
    \ 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3,\
    \ 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, 3, 3]\n[3, 3, ", "    even = even = 0\n    for\
    \ n in lst:\n        if n%2 == 0:\n            even += n\n        else:\n    \
    \        even += n/2\n    return even\n", "    even_pos = [i for i, v in enumerate(lst)\
    \ if v %2 == 0]\n    odd_pos = [i for i, v in enumerate(lst) if v %2 != 0]\n \
    \   \n    if len(odd_pos) > 0:\n        return sum( [lst[i] for i in odd_pos]\
    \ )\n\n    else:\n        return sum( [lst[i] for i in even_pos] )\n", "    \n\
    \    sum = 0 \n    for i in lst:\n        if i%2 == 0:\n            sum += i\n\
    \        else:\n            sum += lst[list.index(i)+1]\n    return sum\n</cell>\n\
    <text>\nThis problem would be easier to solve using recursion:\n\n\n</text>\n\
    <cell>", "    \n    even = lst[:len(lst)//2]\n    odd  = lst[len(lst)//2:]\n \
    \   \n    return sum(n for n in odd if n in even)\n", "    count = 0\n    for\
    \ i, num in enumerate(lst):\n        if i%2 == 0:\n            count += num\n\
    \    return count\n\nprint(solution([5, 8, 7, 1]))\nprint(solution([3, 3, 3, 3,\
    \ 3]))\n</cell>\n<cell>", "    \n    # write your code here\n    \n    if len(lst)\
    \ <= 0 or len(lst) % 2 == 0: return 0\n    \n    odd_sum = sum([lst[i] for i in\
    \ range(len(lst)) if i % 2 == 1])\n    return odd_sum * 2\n", "    total = 0\n\
    \    for num in lst:\n        if num%2 == 0:\n            total += num\n    return\
    \ total\n", "    count = 0\n    for i in lst:\n        if i %2 ==0:\n        \
    \    count+= i\n    return count\n    ", "    even = 0\n    odd = 1\n    for i\
    \ in lst:\n        if i%2 == 0:\n            even += i\n        else:\n      \
    \      odd += i\n    return odd\n</cell>\n<cell>\nsolution([5, 8, 7, 1])\n</cell>\n\
    <cell>\nsolution([3, 3, 3, 3, 3])\n</cell>\n<cell>", "    # BEGIN PURE_OLD_ANSWER\n\
    \    return sum(lst[1::2])\n    # END PURE_OLD_ANSWER\n", "    # Your code here\n\
    \    even = sum(lst[i] for i in lst if i % 2 == 0)\n    odd = sum(lst[i] for i\
    \ in lst if i % 2 != 0)\n    return even - odd\n</code>\nOutput:\n<code>\n>>>\
    \ solution([5, 8, 7, 1])\n12\n>>> solution([3, 3, 3, 3, 3])\n9\n</code>\n<|/ a\
    \ tags=python dscore=0 |>\n<| a tags=python |>\nHere's a solution that uses list\
    \ comprehension to create a list of the even numbers and subtracts the odd numbers\
    \ from the even numbers:\n<code>\nlst_even_num = [x for x in lst if x % 2 == 0]\n\
    print(lst_even_num)  # -> [5, 7, 1]\nlst_odd_num = [x for x in lst if x % 2 !=\
    \ 0]\nprint(lst_odd_num)  # -> [8, 3, 3]\n\nprint(sum(lst_even_num) - sum(lst_odd_num))\n\
    </code>\nPrints:\n<code>\n12\n9\n</code>\n<|/ a dscore=0 |>\n<| a tags=python\
    \ |>\nThis code should be more elegant:\n<code>", "    \n    # your code here\n\
    \    lst_evens = lst[0::2]\n    lst_odds = lst[1::2]\n    total = 0\n    for i\
    \ in lst_odds:\n        total += i\n        \n    return total\n</cell>\n<cell>",
  "    evenSum = 0\n    oddSum = 0\n    oddEvenSum = 0\n    for el in lst:\n     \
    \   if el % 2 == 0:\n            evenSum += el\n        else:\n            oddSum\
    \ += el\n            oddEvenSum += el\n    return oddSum + oddEvenSum\n", "  \
    \  \n    \n    if len(lst) == 0:\n        return 0\n    \n    odd_indices = [index\
    \ for index, value in enumerate(lst) if value%2 != 0]\n    \n    return sum(lst[odd_indices])\n",
  "    return sum([lst[j] for j in range(len(lst)) if j%2 == 1])\n<|/ file source=github\
    \ filename=List_Of_Numbers.py ext=.py |>\n<| c |>\nWhile this code may solve the\
    \ question, [including an explanation](//meta.stackexchange.com/q/114762) of how\
    \ and why this solves the problem would really help to improve the quality of\
    \ your post, and probably result in more up-votes. Remember that you are answering\
    \ the question for readers in the future, not just the person asking now. Please\
    \ [edit] your answer to add explanations and give an indication of what limitations\
    \ and assumptions apply. [From Review](/review/late-answers/26283065)\n<|/ c |>\n\
    <| a tags=python-3.x,python dscore=0 |>\nYou can use simple list comprehension.\n\
    <code>", "    even = 0\n    odd = 0\n    evenSum = 0\n    for i in lst:\n    \
    \    if i % 2 == 0:\n            even += i\n        else:\n            odd +=\
    \ i\n    evenSum += odd\n    return evenSum\n", "    odd_sum = 0\n    even_sum\
    \ = 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n          \
    \  even_sum += lst[i]\n        else:\n            odd_sum += lst[i]\n    return\
    \ odd_sum + even_sum\n    \nassert solution([5, 8, 7, 1]) == 12\nassert solution([3,\
    \ 3, 3, 3, 3]) == 9\n\n</cell>\n<text>\nProblem 10\nWrite a function that takes\
    \ in a non-empty string and returns a string made of the first and last chars\
    \ of the string joined by an underscore. If the string length is one, then the\
    \ underscore is omitted from the output. If there are two or more, the underscore\
    \ is included between each pair of characters.\n\ne.g. cute => cu_ te_ \nYou might\
    \ need to use a helper function that returns a formatted string if getting started\
    \ with the problem.\n\nIf you call your function like this:\n\nformat_first_and_last('abc')\n\
    format_first_and_last('ab')\nformat_first_and_last('a')\nYou will get the output:\n\
    \n'abc_'\n'ab_c_'\n'a_'\n\n</text>\n<cell>", "    evens=[]\n    odds=[]\n    temp=0\n\
    \    \n    for i in range(len(lst)):\n        temp+=lst[i]\n        if i%2==1:\n\
    \            odds.append(temp%2)\n        else:\n            evens.append(temp%2)\n\
    \            temp=0\n    \n    return (odds[0]+odds[2])\n\n\n\"\"\"", "    even\
    \ = lst[1::2]\n    odd = lst[0::2]\n    return sum(sum(v*k for v, k in zip(even,\
    \ odd)))\n\n", "    if len(lst) == 0:\n        return 0\n    else:\n        even\
    \ = lst[0]\n        odd = 0\n        for n in lst[1:]:\n            if n % 2 ==\
    \ 0:\n                even += n\n            else:\n                odd += n\n\
    \        return even+odd\n\n</cell>\n<cell>", "        odd_sum = sum(lst[::2])\n\
    \        even_sum = sum(lst[1::2])\n        return odd_sum + even_sum\n</cell>\n\
    <cell>", "    \n    even_index = 0\n    total_sum = 0\n    for i in lst:\n   \
    \     if i%2 == 0:\n            total_sum = total_sum + lst[even_index]\n    \
    \        even_index += 1\n    return total_sum\n\n", "    return sum([lst[pos]\
    \ for pos in range(len(lst)) if pos & 1])\n\n", "    even = 0\n    for i in lst:\n\
    \        if i %2 == 0:\n            even+=i\n    return even\n    \n\"\"\"", " \
    \   \n    odds = filter(lambda x: x%2, lst)\n    return sum(odds)\n", "    evens\
    \ = list(filter(lambda x: x % 2 == 0, lst))\n    return sum(evens[1::2])\n\n\n\
    \"\"\"", "    if len(lst) == 0:\n        return 0\n    else:\n        sum = 0\n\
    \        for i in range(len(lst)):\n            if lst[i] % 2 == 1:\n        \
    \        sum += lst[i:]\n                break\n        return sum\n</cell>\n\
    <cell>", "    even, odd = lst[::2], lst[1::2]\n    return sum(odd - even)\n",
  "    return sum(lst[1::2])\n<|/ file ext=.py |>\n<| c |>\nIf you think an answer\
    \ solves your problem, please accept it.\n<|/ c |>\n<| a dscore=0 tags=python\
    \ |>\nYou can use sum function with a little bit of slicing.\n<code>\n>>> lst\
    \ = [4, 6, 1, 4, 7, 2]\n>>> sum(lst[i::2] for i in range(0, len(lst), 2))\n21\n\
    </code>\n<|/ a |>\n<| a dscore=0 tags=python |>\nyou can do it with:\n<code>\n\
    sum(lst[1::2])\n</code>\nas this means \"all numbers between 1 and the first one\"\
    .\nyou can find more information here: https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments\n\
    <|/ a |>\n<| a |>\n<code>\nlst = [4, 6, 1, 4, 7, 2]\n", "    even = sum(lst[0:len(lst)//2])\n\
    \    odd = sum(lst[len(lst)//2:])\n    return even + odd\n</code>\n<|/ a dscore=2\
    \ tags=arrays,python |>\n<| c |>\nThank you for this code snippet, which might\
    \ provide some limited short-term help.  A proper explanation [would greatly improve](//meta.stackexchange.com/q/114762)\
    \ its long-term value by showing *why* this is a good solution to the problem,\
    \ and would make it more useful to future readers with other, similar questions.\
    \  Please [edit] your answer to add some explanation, including the assumptions\
    \ you've made.\n<|/ c |>\n<| a tags=arrays,python |>\nThis worked for me:\n<code>",
  "    \n    # check whether the list is empty or not\n    if not lst:\n        return\
    \ 0\n    \n    # we start from index 1 because we only want the odd elements\n\
    \    odd_nums = lst[1:][1::2]\n    even_nums = lst[1:]\n    return sum(odd_nums)\n",
  "    \n    return sum(lst[lst[i] % 2::2])\n        \n</cell>\n<text>\nThe function\
    \ above is called slicing, or indexing of a list.\n\n\n</text>\n<cell>\nlst =\
    \ [1,4,5,7,8,10,11,15,16,17,18,20,21,22,23,25]\nlst[::2]\n</cell>\n<text>\nWhen\
    \ indexing into a list the index starts at 0.  So lst[1] refers to the second\
    \ element of the list.\n\n\n</text>\n<cell>\nlst[::3]\n</cell>\n<text>\nNotice\
    \ above that there is no index 1 here - lst[1] and lst[2] are equivalent.\n\n\n\
    </text>\n<text>\nNow let's look at a different way to solve this problem:\n\n\
    </text>\n<cell>", "    even = 0\n    for x in lst:\n        even += x%2\n    return\
    \ even\n</cell>\n<cell>", "    \n    sum = 0\n    for index, num in enumerate(lst):\n\
    \        if index % 2 == 0:\n            sum += num\n    return sum\n", "    even\
    \ = 0\n    odd = 0\n    \n    if len(lst)==0:\n        return 0\n    else:\n \
    \       for index,num in enumerate(lst):\n            if num%2==0 and index%2==0:\n\
    \                even += num\n            elif num%2==0 and index%2!=0:\n    \
    \            odd += num\n    return even+odd\n    \n</cell>\n<text>\nTest Your\
    \ Solution\n\n</text>\n<cell>\n\"\"\"\nRUN THIS CELL TO TEST YOUR SOLUTION\n\"\
    \"\"\n\nfrom nose.tools import assert_equal\n", "    if any(isinstance(x, float)\
    \ or isinstance(x, int) for x in lst):\n        raise ValueError(\"list contains\
    \ non-integer or float values\")\n    \n    evens, odd = [], []\n    \n    for\
    \ x in lst:\n        if x % 2 == 0:\n            evens.append(x)\n        else:\n\
    \            odd.append(x)\n            \n    return sum(odd[1::2])\n", "    return\
    \ sum(x for x in lst if lst.index(x) % 2 == 1)\n", "    even_indexes = list(filter(lambda\
    \ x: x%2 ==0, lst))\n    odd_indexes = list(filter(lambda x: x%2 ==1, lst))\n\n\
    \    # return sum(map(lambda x : x + lst[x.index(odd_indexes[x.index(odd_indexes)\
    \ + 1])], even_indexes))\n    return sum(map(lambda x: x[0], filter(lambda x :\
    \ x in odd_indexes, even_indexes)))\n", "    return sum([lst[i] for i in lst if\
    \ i%2 == 1])\n</code>\n<|/ a tags=python |>\n<| a dscore=0 tags=python |>\nI used\
    \ this simple approach to find the sum of the odd numbers in the list:\n<code>\n\
    a = [5, 8, 7, 1]\nsum([i for i in range(len(a)) if a[i]%2 != 0])\n</code>\n<|/\
    \ a |>\n<| a dscore=0 |>\n<code>", "    even_pos = 0\n    even_sum = 0\n    odd_pos\
    \ = 0\n    odd_sum = 0\n    for num in lst:\n        if num % 2 == 0:\n      \
    \      even_sum += num\n            even_pos += 1\n        else:\n           \
    \ odd_sum += num\n            odd_pos += 1\n    even_sum //= 2\n    odd_sum //=\
    \ 2\n    even_pos -= 1\n    odd_pos -= 1\n    return even_sum + odd_sum\n\n",
  "    # your code here\n    even_indices = []\n    odd_indices = []\n\n    odd_sum\
    \ = 0\n\n    even_indices.append(len(lst)-1)\n\n    for i in range(0, len(lst)):\n\
    \        if(lst[i] % 2 == 0):\n            odd_indices.append(i)\n\n    odd_sum\
    \ = sum(lst[odd_indices[i]:odd_indices[i]+2])\n\n    odd_sum = odd_sum + sum(lst[even_indices[i]:even_indices[i]+2])\n\
    \    return odd_sum\n</code>\n<|/ a dscore=1 |>\n<| a tags=python-3.x,algorithm\
    \ |>\nI understand that your goal is to learn more about algorithms. I suggest\
    \ you to try this solution which is similar to the one you provided. You can use\
    \ a different approach:\n<code>", "    sum = 0\n    for i in range(1, len(lst)):\n\
    \        if lst[i-1]%2 == 0:\n            sum += lst[i]\n    return sum\n</code>\n\
    <|/ a tags=python,sum,list |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| c |>\n, sorry for that,\
    \ I will add an explanation as soon as I can\n<|/ c |>\n<| c |>\nAwesome! Thank\
    \ you so much for the detailed explanation!\n<|/ c |>\n<| a tags=python,sum,list\
    \ dscore=0 |>\n<code>", "    \n    return sum(lst[0::2])\n\nsolution(lst)\n</cell>\n\
    <text>\nExercise 3\nGiven two lists sorted in increasing order, create and return\
    \ a merged list regrouping all the elements in the lists while also respecting\
    \ the original order of the lists. If the elements in the input lists are not\
    \ sorted, the function should return an empty list.\n\nFor example, given lists\
    \ [1, 3, 2, 4] and [2, 5, 4], it should return [1, 3, 2, 4, 5, 4].\n\nNote: The\
    \ number of lists to be merged will be at most 100.\n\n</text>\n<cell>", "   \
    \ \n    even_indexes = []\n    for index, value in enumerate(lst):\n        if\
    \ index % 2 == 0:\n            even_indexes.append(index)\n    return sum(lst[x\
    \ for x in range(len(even_indexes)) if x not in even_indexes])\n\n", "    even\
    \ = 0\n    odd = 0\n    for e in lst:\n        if e % 2 == 0:\n            even\
    \ += e\n        else:\n            odd += e\n    return even + odd\n", "    \n\
    \    oddsum = 0\n    oddsum = sum(filter(lambda x: x%2==1, lst))\n    return oddsum\n\
    \nassert solution([5, 8, 7, 1]) == 12\nassert solution([3, 3, 3, 3, 3]) == 9\n\
    </cell>\n<text>\nThe sum of the first k even numbers is given by: $$ k = \\left\\\
    lfloor\\frac{n}{2}\\right\\rfloor $$\n$$ s = \\sum{i = 1}^{k} i$$\n\nUsing the\
    \ formula above, we can compute $k$ using the floor division and then just sum\
    \ the even numbers $i$.\n\n\n</text>\n<cell>", "    if lst:\n        return sum([lst[i\
    \ : i + 2] for i in range(0, len(lst), 2)])\n    else: \n        return 0\n",
  "    return sum(lst[0::2])\n    ", "    even_indexes = [i for i, x in enumerate(lst)\
    \ if x % 2 == 0]\n    odd_indexes = [i for i, x in enumerate(lst) if x % 2 !=\
    \ 0]\n    sum = 0 \n    for i in odd_indexes:\n        sum = sum + lst[i]\n  \
    \  return sum\n</cell>\n<cell>", "    even = list(filter(lambda x: x%2 == 0, lst))\n\
    \    odd = list(filter(lambda x: x%2 != 0, lst))\n    return sum(odd.pop(odd.index(even)))\
    \ + sum(even)\n</code>\n<|/ a |>\n<| a |>\nA solution using reduce with lambda:\n\
    <code>", "    \n    even_odd_indexes = []\n    \n    for i in lst:\n        if\
    \ (i % 2) == 0:\n            even_odd_indexes.append(i)\n            \n    odd_sum\
    \ = sum(even_odd_indexes)\n    return odd_sum\n</cell>\n<cell>", "    \n    return\
    \ sum([lst[i] for i in lst[::2]])\n\nsolution([5, 8, 7, 1])\n</cell>\n<cell>",
  "    return sum((lst[x-1] + lst[x+1] + lst[x-2] + lst[x+2]) % 2 == 0 for x in range(len(lst)\
    \ - 1))\n</cell>\n<cell>", "    \n    odd = sum(lst[1::2])\n    even = sum(lst[::2])\n\
    \    \n    return odd + (even-odd)\n", "    even = [i for i in lst if i%2 == 0]\n\
    \    odd = [i for i in lst if i%2 != 0]\n    if len(even) == 0 or len(odd) ==\
    \ 0:\n        return -1\n    odd = odd[1::2]\n    even = even[1::2]\n    evensum\
    \ = sum(even)\n    oddsum = sum(odd)\n    return evensum + oddsum\n</cell>\n<cell>\n\
    %%time\nsolution(random_lists(10000))\n</cell>\n<text>\nList Comprehensions\n\
    List comprehensions are the most commonly used Python feature to perform list\
    \ operations. Along the same lines, they allow us to perform functions on lists\
    \ that we would normally have to write by hand.\n\nConsider the following code\
    \ sample:\n\n\n</text>\n<cell>", "        sum=0\n        \n        for i in range(len(lst)):\n\
    \            if (lst[i] % 2 == 0):\n                sum+=lst[i]\n        return\
    \ sum\n</cell>\n<cell>\nsolution([5, 8, 7, 1])\n</cell>\n<text>\nProblem 8\nYou\
    \ have a list of integers that is sorted in ascending order. \nAnd you need to\
    \ find the kth largest element in the list. \nWhat would be the best data structure\
    \ and algorithm to solve this problem?\n\n\n</text>\n<cell>", "    odd_nums =\
    \ 0\n    for i in range(len(lst)):\n        if lst[i] % 2 == 0:\n            odd_nums\
    \ += lst[i]\n    return odd_nums\n</code>\n<|/ a |>\n<| c |>\nThanks Amit, for\
    \ the help and the great feedback. I think your solution is more compact and easy\
    \ to understand. Thanks again.\n<|/ c |>\n<| a tags=python |>\nI would recommend\
    \ writing a generator function that returns all the odd numbers in the given list.\
    \ Next, I would use itertools.groupby to group consecutive odd numbers. Finally,\
    \ I would use sum to add the numbers in the group. \n<code>\nfrom itertools import\
    \ groupby", "    oddsum = 0\n    for i in range(len(lst)):\n        if i%2 !=\
    \ 0:\n            oddsum += lst[i]\n        else:\n            oddsum += lst[i]-lst[i-1]\n\
    \n    return oddsum\n\nlst = [5, 8, 7, 1, 3, 3, 3, 3]\nsolution(lst)\n</cell>\n\
    <text>\nBackspace to check your answer\n\n</text>\n<cell>", "    evens = lst[::2]\n\
    \    odds = lst[1::2]\n    evens = sum(evens)\n    odds = sum(odds)\n    return\
    \ evens - odds\n", "    even = 0\n    odd = 0\n    for index, item in enumerate(lst):\n\
    \        if index%2==0:\n            even+=item\n        else:\n            odd+=item\n\
    \    return even+odd\n</cell>\n<cell>", "    sum_ = 0\n    for ind, val in enumerate(lst):\n\
    \        if ind % 2 ==0 and val%2 == 0:\n            sum_ = sum_ + val\n    return\
    \ sum_\n", "    count = 0\n    for i in range(len(lst) - 1):\n        if lst[i]\
    \ == lst[i + 1] and lst[i]%2 == 0:\n            count += 1\n    return count *\
    \ lst[-1]\n", "    if len(lst) == 0:\n        return 0\n    lst.reverse()\n  \
    \  lst_len = len(lst)\n    even_lst = []\n    for i in range(lst_len):\n     \
    \   if i % 2 == 0:\n            even_lst.append(lst[i])\n        if i == lst_len\
    \ - 1:\n            even_lst.extend(lst[lst_len - 1:])\n            even_lst.reverse()\n\
    \            break\n    even_lst.sort()\n    return sum(even_lst[1::2])\n</cell>\n\
    <cell>", "    \n    return sum(i*i for i in lst)\n</cell>\n<text>\nProblem 10\n\
    The function below returns a string with the number of non-repeating characters\
    \ in a given string.\n\n\n</text>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
