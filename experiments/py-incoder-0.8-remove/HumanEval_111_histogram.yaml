name: HumanEval_111_histogram
language: py
prompt: "from typing import Dict\n\ndef histogram(test: str) -> Dict[str, int]:\n\
  \    \"\"\"Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n    of the letter with the most repetition and containing the corresponding\
  \ count.\n    If several letters have the same occurrence, return all of them.\n\
  \    \n    Example:\n                    \n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a b b a') == { 'a': 2, 'b': 2\
  \ }\n    assert candidate('a b c a b') == { 'a': 2, 'b': 2 }\n    assert candidate('a\
  \ b c d g') == { 'a': 1, 'b': 1, 'c': 1, 'd': 1, 'g': 1 }\n    assert candidate('r\
  \ t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('b b b b a') == { 'b':\
  \ 4 }\n    assert candidate('r t g') == { 'r': 1, 't': 1, 'g': 1 }\n    assert candidate('')\
  \ == {  }\n    assert candidate('a') == { 'a': 1 }\n\ndef test_check():\n    check(histogram)\n\
  \ntest_check()\n"
completions: ["    # TODO\n    pass\n", "    letters = test.split(' ')\n    letters\
    \ = [c.lower() for c in letters]\n    letters_counter = {}\n    for l in letters:\n\
    \        if l not in letters_counter:\n            letters_counter[l] = 1\n  \
    \      else:\n            letters_counter[l] += 1\n\n    letters_with_most_occurrences\
    \ = {}\n    for l in letters_counter:\n        if letters_counter[l] == letters_counter.most_common()[0][0]:\n\
    \            letters_with_most_occurrences[l] = letters_counter[l]\n         \
    \   \n    return letters_with_most_occurrences\n</cell>\n<cell>\nhistogram(\"\
    aa bb cc dd ee ff gg hh\")\n</cell>\n<text>\nProblem 4\nWrite a function that\
    \ takes a list and a number as inputs and returns the n-th element of the list\
    \ in the correct order.\nIf the list is empty then return None.\n\nExample: \n\
    For a list a = [1, 3, 5, 7, 6, 9] and n = 3 it should return 7\nFor a list a =\
    \ [1, 2, 3, 4, 5, 6] and n = 1 it should return None\n\nHints:\n\nThe list can\
    \ be built using list comprehension\nThe list could be built using loops, too\n\
    The function could simply return the nth element of the list\n\n\n</text>\n<cell>",
  "    \n    pass\n\n", "    words_list = test.split()\n    count_dict = {}\n    \n\
    \    \n    \n    \n    \n    \n    return count_dict\n</cell>\n<cell>", "    letters\
    \ = [letter for letter in test]\n    letters.sort()\n    counts = {}\n    for\
    \ letter in letters:\n        if letter not in counts:\n            counts[letter]\
    \ = 1\n        else:\n            counts[letter] += 1\n    \n    return counts\n\
    \n", "    result = dict()\n    letters = [char for char in test]\n    counts =\
    \ dict()\n\n    for char in letters:\n        if char in counts:\n           \
    \ counts[char] += 1\n        else:\n            counts[char] = 1\n    if 1 in\
    \ counts:\n        counts.pop(1)\n\n    for key, count in counts.items():\n  \
    \      result[key] = count\n    \n    return result\n</cell>\n<cell>", "    #TODO\
    \ implement histogram\n    histogram = {}\n    for letter in test:\n        if\
    \ letter in histogram:\n            histogram[letter] += 1\n        else:\n  \
    \          histogram[letter] = 1\n    return histogram\n", "    \n    counts =\
    \ {}\n    for character in test:\n        if character in counts:\n          \
    \  counts[character] += 1\n        else:\n            counts[character] = 1\n\n\
    \    most_repeated_char = max(counts, key=counts.get)\n    \n    return {most_repeated_char:\
    \ counts[most_repeated_char]}\n", "    from collections import Counter\n    \n\
    \    test = list(test.lower())\n    \n    counter = Counter(test)\n    \n    most_frequent_letter,\
    \ most_frequent_count = Counter(test).most_common(1)[0]\n    \n    return {k:v\
    \ for k, v in Counter(test).items() if v == most_frequent_count}\n        \n \
    \       \n    \n    \n    \n</cell>\n<cell>\n%%time", "    return {\n        letter:\
    \ count.most_common()[0][0]\n        for letter, count in Counter(test).items()\n\
    \    }\n</cell>\n<cell>\nhistogram('a b c d e f g h i j k l m n o p q r s t u\
    \ v w x y z'.lower())\n</cell>\n<cell>\nfrom collections import Counter\n", " \
    \   \n    # Initialize an empty dictionary to hold the result\n    result = {}\
    \ \n    \n    # Initialize a variable to hold the count of each letter\n    counts\
    \ = {}\n    \n    # Loop over each letter of the input string\n    for letter\
    \ in test:\n        # If this is the first letter, count it\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        else:\n            # Otherwise,\
    \ this is the first letter of a new word, set the count to 1\n            counts[letter]\
    \ = 1\n        \n    # Loop over each letter in counts\n    for letter in counts:\n\
    \        # Loop over each letter of the input string\n        for letter2 in test:\n\
    \            # If letter2 has a count greater than 1, and letter2 has the same\
    \ value as letter\n            if counts[letter2] > 1 and letter2 == letter:\n\
    \                # If letter2 has a count greater than 1, then overwrite counts[letter]\
    \ with the count\n                counts[letter] = counts[letter2]\n    \n   \
    \ # Return the counts dictionary\n    return result\n</cell>\n<cell>", "    \n\
    \    return dict()\n\n", "    \n    histogram = {}\n    \n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    \n    return histogram\n     \
    \   \n        ", "    # your code here\n    letters = {}\n    for letter in test:\n\
    \        letters[letter] = letters.get(letter, 0) + 1\n    return letters\n",
  "    from collections import Counter\n\n    return dict(Counter(test))\n", "   \
    \ return {\n        \"b\":0,\n        \"c\":0,\n        \"d\":0,\n        \"e\"\
    :0,\n        \"f\":0,\n        \"g\":0,\n        \"h\":0,\n        \"i\":0,\n\
    \        \"j\":0,\n        \"k\":0,\n        \"l\":0,\n        \"m\":0,\n    \
    \    \"n\":0,\n        \"o\":0,\n        \"p\":0,\n        \"q\":0,\n        \"\
    r\":0,\n        \"s\":0,\n        \"t\":0,\n        \"u\":0,\n        \"v\":0,\n\
    \        \"w\":0,\n        \"x\":0,\n        \"y\":0,\n        \"z\":0\n    }\n\
    \n", "    return dict(Counter(test))\n\n", "    pass\n</cell>\n<cell>\nhistogram('hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh\
    \ hh hh hh hh hh hh hh hh hh hh hh hh hh hh hh ", "    \n    letters_set = set(test)\n\
    \    \n    histogram = {}\n    for letter in letters_set:\n        histogram[letter]\
    \ = letters_set.count(letter)\n    \n    return histogram\n", "    \n    freq\
    \ = {}\n    for c in test:\n        if c not in freq:\n            freq[c] = 1\n\
    \        else:\n            freq[c] += 1\n    \n    freq = {key: freq[key] for\
    \ key in freq.keys()} # flatten dictionary\n    \n    return freq\n</cell>\n<text>\n\
    The expected result is\n{\n    \"a\": 2, \n    \"b\": 3, \n    \"c\": 4, \n  \
    \  \"d\": 1, \n    \"e\": 1\n}\n\n</text>\n<cell>\nhistogram(\"aaabbccdddeeeeaaaabbccefdeeeef\"\
    )\n</cell>\n<text>\nSolution:\n\n</text>\n<cell>", "    letterCountDict = {}\n\
    \    letters = test.lower().split()\n    for letter in letters:\n        if letter\
    \ in letterCountDict:\n            letterCountDict[letter] += 1\n        else:\n\
    \            letterCountDict[letter] = 1\n    return letterCountDict\n", "   \
    \ count = {}\n    for c in test:\n        if c not in count:\n            count[c]\
    \ = 0\n        count[c] += 1\n    return count\n", "    pass\n</cell>\n<cell>\n\
    histogram(\"a b c a b d\")\n</cell>\n<cell>\nhistogram(\"a a b b d\")\n</cell>\n\
    <text>\nWe are now going to use the function count_letters to count the letters\
    \ present in the dictionary and to store the letters with the most occurrences\
    \ in a new list. We will then use the same function to count the letter b but\
    \ ignoring its occurrence in other words we will not count it twice. We will then\
    \ sort the list based on the count and return the two most frequent elements of\
    \ the sorted list.\n\n\n</text>\n<cell>", "    \n    pass\n\n", "    \n    # Write\
    \ your code here\n    letters_dict = {}\n    for letter in test:\n        if letter\
    \ in letters_dict:\n            letters_dict[letter] += 1\n        else:\n   \
    \         letters_dict[letter] = 1\n    return letters_dict\n", "    # write your\
    \ code here\n    count = {}\n    for word in test.split():\n        if word[0]\
    \ not in count.keys():\n            count[word[0]] = 1\n        else:\n      \
    \      count[word[0]] += 1\n    \n    if len(count) > len(count):\n        return\
    \ count\n    else:\n        return count\n    \n    \n    \nprint(histogram('aabbccddeeee'))\n\
    </cell>\n<cell>", "    letters = test.split()\n    return dict(zip(letters, [0]*len(letters)))\n",
  "    \n    letters = test.replace(\" \", \"\")\n    count_letter = dict.fromkeys(letters,\
    \ 0)\n    for letter in letters:\n        count_letter[letter] = count_letter[letter]\
    \ + 1\n    return count_letter\n", "    count = {}\n    total = 0\n    i = 0\n\
    \    while i < len(test):\n        if test[i] not in count:\n            count[test[i]]\
    \ = 1\n        else:\n            count[test[i]] += 1\n            total += 1\n\
    \        i += 1\n    \n    for key, value in count.items():\n        if value\
    \ == 1:\n            count[key] = 1\n        else:\n            count[key] = value\n\
    \            \n    return count\n    ", "    test = 'abbc'\n    char_dict = {}\n\
    \    \n    for char in test:\n        if char not in char_dict:\n            char_dict[char]\
    \ = 1\n        else:\n            char_dict[char] += 1\n    \n    return char_dict\n",
  "    \n    return {}\n\n", "    # Write your code here\n    histogram = {}\n   \
    \ string_list = test.split(' ')\n    \n    for letter in string_list:\n      \
    \  if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n            \n    return histogram\n</cell>\n\
    <cell>\nhistogram('az b z y x') == {'z':2,'a':1, 'y':1, 'b':1, 'x':1}\n</cell>\n\
    <text>\nProblem 2\nWrite a function that finds if a word is a palindrome. \nThe\
    \ definition of palindrome is that the middle of the word is reversed. \nWrite\
    \ a test function first. \nYou can use the following test cases:\n\n'radar'\n\
    'doobie'\n'racecar'\n'abba'\n'racecar'\n\n</text>\n<cell>\nfrom collections import\
    \ Counter", "    # YOUR CODE HERE\n    alphabet = set(test)\n    counts = {}\n\
    \    for letter in alphabet:\n        if letter not in counts:\n            counts[letter]\
    \ = 0\n        counts[letter] += 1\n    letter, count  = max(counts.items(), key\
    \ = lambda kv: kv[1])\n    \n    return {\"letter\": letter, \"count\": count}\n\
    \    \n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>", "    letters =\
    \ \"aeiou\"\n    letter2count = defaultdict(int)\n    letter2count[\"e\"] = 0\n\
    \    letter2count[\"a\"] = 0\n    letter2count[\"i\"] = 0\n    letter2count[\"\
    o\"] = 0\n    letter2count[\"u\"] = 0\n\n    for letter in test:\n        letter2count[letter]\
    \ += 1\n    \n    return letter2count\n", "    letter = test\n    return dict(Counter(test))\n\
    </cell>\n<cell>", "    freq = {}\n    for word in test.split():\n        if freq.get(word):\n\
    \            freq[word] += 1\n        else:\n            freq[word] = 1\n    return\
    \ freq\n\n\"\"\"\nTests\n\"\"\"\n\nassert histogram(\"abc def ghi jkl mno pqr\"\
    ) == {'a': 2, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 2, 'g': 2, 'h': 2, 'i': 1,\
    \ 'j': 1, 'k': 2, 'l': 3, 'm': 1, 'n': 1, 'o': 2, 'p': 2, 'q': 2, 'r': 1}\nassert\
    \ histogram(\"abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc\
    \ abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc abc ab", "    pass\n\
    \n", "    count_dict = {}\n    for i in test:\n        if i not in count_dict:\n\
    \            count_dict[i] = 1\n        else:\n            count_dict[i] += 1\n\
    \    return count_dict\n    ", "    \n    return {'a':5, 'b':5, 'c':4, 'd':2,\
    \ 'e':1}\n", "    return {'a': 2, 'b': 4, 'c': 8, 'd': 2, 'e': 2, 'f': 1, 'g':\
    \ 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1, 'm': 1, 'n': 1, 'o': 1, 'p': 2, 'q':\
    \ 2, 'r': 1, 's': 1, 't': 1, 'u': 1, 'v': 1, 'w': 1, 'x': 1, 'y': 1}\n\n", " \
    \   histogram = {}\n    \n    for character in test:\n        if character in\
    \ histogram:\n            histogram[character] += 1\n        else:\n         \
    \   histogram[character] = 1\n    \n    return histogram\n", "    pass\n", " \
    \   pass\n\nhistogram(\"abbba\")\n</cell>\n<cell>", "    letter_counts: Dict[str,\
    \ int] = defaultdict(int)\n    \n    for letter in test:\n        letter_counts[letter]\
    \ += 1\n    \n    return letter_counts\n\n", "    \n    counts = {}\n    for letter\
    \ in test:\n        if letter in counts:\n            counts[letter] += 1\n  \
    \      else:\n            counts[letter] = 1\n    return counts\n", "    histogram\
    \ = {}\n    letters = test.lower().split()\n    for letter in letters:\n     \
    \   histogram[letter] = histogram.get(letter, 0) + 1\n    return histogram\n",
  "    letters = test.split()\n    freq = {x:0 for x in range(26)}\n    for letter\
    \ in letters:\n        freq[letter] = freq[letter] + 1\n    \n    return freq\n",
  "    histogram = {}\n    \n    # Your code here\n    letters = list(test)\n    for\
    \ letter in letters:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    pass\n\n</cell>\n<cell>\nhistogram(\"a a a a b b b c c c c c c\")\n</cell>\n\
    <text>\nQ21\nReturn the letter with the highest count in alphabetical order\n\n\
    </text>\n<cell>\nfrom collections import defaultdict\n", "    \n    histogram\
    \ = {}\n    string = test.lower().strip()\n    \n    for letter in string:\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    \n    return histogram\n    \n", "   \
    \ letters = test.split(' ')\n    \n    freq = {}\n    for letter in letters:\n\
    \        if letter in freq:\n            freq[letter] += 1\n        else:\n  \
    \          freq[letter] = 1\n    \n    return freq\n", "    \n    letters = test.split('\
    \ ')\n    \n    count = {}\n    \n    for letter in letters:\n        if letter\
    \ in count:\n            count[letter] += 1\n        else:\n            count[letter]\
    \ = 1\n    \n    return count\n\nprint(histogram('a a b a a a b c a a'))\nprint(histogram('a\
    \ a a a a a a a a a a a a'))\n</code>\n<|/ a |>\n<| c |>\nWhile this code snippet\
    \ may solve the question, [including an explanation](http://meta.stackexchange.com/questions/114762/explaining-entirely-code-based-answers)\
    \ really helps to improve the quality of your post. Remember that you are answering\
    \ the question for readers in the future, and those people might not know the\
    \ reasons for your code suggestion.\n<|/ c |>\n<| a dscore=0 |>\nThis might be\
    \ a little late, but I ran into a similar problem and found another solution that\
    \ will help others who are looking to solve this type of problem.\n<code>", " \
    \   from collections import Counter\n    \n    # count the occurrence of each\
    \ letter and return only the letter with most repetition\n    letter_counts =\
    \ Counter(test)\n    letters = letter_counts.most_common()\n    most_repeated_letter\
    \ = letters[0][0]\n    return {\n        most_repeated_letter: letter_counts[most_repeated_letter]\n\
    \    }\n\nprint(histogram(\"a b c c a b c d\"))\n</cell>\n<text>\nA better way\
    \ is to use the collections.Counter class in the collections library to count\
    \ the occurrences of each letter in a string:\n\n\n</text>\n<cell>\nfrom collections\
    \ import Counter\nfrom typing import Dict\n", "    letters = {} #a dictionary\
    \ where the key is the letter and the value is the amount of occurences\n    letters\
    \ = Counter(test.split()) #counting the occurences of the letters in the string\n\
    \    \n    return letters\n", "    histogram = {}\n    for letter in test:\n \
    \       if letter in histogram:\n            histogram[letter] += 1\n        else:\n\
    \            histogram[letter] = 1\n    return histogram\n", "    histogram =\
    \ {}\n    for letter in test:\n        if letter in histogram.keys():\n      \
    \      histogram[letter] += 1\n        else:\n            histogram[letter] =\
    \ 1\n    return histogram\n", "    \n    count = {}\n    \n    for item in test.lower().split(\"\
    \ \"):\n        if item in count:\n            count[item] = count[item] + 1\n\
    \        else:\n            count[item] = 1\n            \n    \n    \n    items\
    \ = sorted(count.items(), key=lambda kv: kv[1], reverse=True)\n    \n    \n  \
    \  return dict(items)\n        \nprint(histogram(\"aa bb aa bb cc dd ee\"))\n\
    print(histogram(\"aa bb cc dd ee\"))\nprint(histogram(\"aa bb cc dd ee\"))\n</cell>\n\
    <text>\nWrite a function that takes a string and returns the string with its first\
    \ and last character capitalized.\n\n\n</text>\n<cell>", "    \n    # your code\
    \ here\n    \n    return {\"a\": 1, \"b\": 1, \"c\": 2, \"d\": 2, \"e\": 2, \"\
    f\": 2, \"g\": 2, \"h\": 2, \"i\": 3, \"j\": 4, \"k\": 4, \"l\": 4, \"m\": 4,\
    \ \"n\": 4, \"o\": 4, \"p\": 4, \"q\": 4, \"r\": 4, \"s\": 4, \"t\": 4, \"u\"\
    : 4, \"v\": 4, \"w\": 4, \"x\": 4, \"y\": 4, \"z\": 4, \"A\": 5, \"B\": 5, \"\
    C\": 5, \"D\": 5, \"E\": 5, \"F\": 5, \"G\": 5, \"H\": 5, \"I\": 5, \"J\": 6,\
    \ \"K\": 6, \"L\": 6, \"M\": 6, \"N\": 6, \"O\": 6, \"P\": 6, \"Q\": 6, \"R\"\
    : 6, \"S\": 6, \"T\": 6, \"U\": 6, \"V\": 6, \"W\": 6, \"X\": 6, \"Y\": 6, \"\
    Z\": 6}\n\n", "    dict = {}\n    letters = [x for x in test.split(' ')]\n   \
    \ for letter in letters:\n        if letter in dict:\n            dict[letter]\
    \ += 1\n        else:\n            dict[letter] = 1\n    return dict\n</code>\n\
    You can then use it like this:\n<code>\nhistogram('hello world')\n</code>\n<code>\n\
    {'d': 1, 'c': 2, 'b': 1, 'a': 1, 'e': 1, 'h': 2}\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI thought about this, but I wonder what happens if you have a dictionary\
    \ like `{'a': 3, 'b': 2}`, wouldn't this only give the value associated with the\
    \ letter with the most repetition? What if there are two letters with the same\
    \ number of repetitions?\n<|/ c |>\n<| c |>\nTrue, you can tweak it a bit to return\
    \ the letter with less repetition\n<|/ c |>\n<| a dscore=2 tags=python-3.x,python\
    \ |>\n<code>\nimport collections\n", "    histogram = {}\n    for c in test:\n\
    \        if c not in histogram:\n            histogram[c] = 0\n        histogram[c]\
    \ += 1\n\n    return histogram\n", "    count = {}\n    for i in test:\n     \
    \   if i not in count:\n            count[i] = 1\n        else:\n            count[i]\
    \ += 1\n    return count\n</cell>\n<cell>\nhistogram(\"aa bb cc dd eee ff gg hh\
    \ ii jjjj kkkk lll mmmm nnnn oooo pppp qqqq rrrr ssss ttttt uuuuuu vvvvvvvv\"\
    )\n</cell>\n<text>\nExercise: Define the histogram function using only a regular\
    \ expression matching\n\n</text>\n<cell>", "    occurrences = {}\n    letters_present\
    \ = list(set(test))\n    letters_present.sort()\n    occurrences = Counter(test).most_common()\n\
    \    return occurrences\n</cell>\n<cell>\nhistogram('aabbccdeeff')\n</cell>\n\
    <cell>\nhistogram('abc def')\n</cell>\n<cell>\nhistogram('abcc')\n</cell>\n<text>\n\
    Part 6: Design a class that creates a linked list of integer nodes that store\
    \ data of each node using its attributes.\n\n</text>\n<cell>", "    letters_occurrences\
    \ = {}\n    for letter in test:\n        if letter not in letters_occurrences.keys():\n\
    \            letters_occurrences[letter] = 1\n        else:\n            letters_occurrences[letter]\
    \ += 1\n    \n    return letters_occurrences\n", "    letters = test.lower().split()\n\
    \    letters = ''.join(letters)\n    letter_dict = {}\n    letter_count_dict =\
    \ {}\n    for letter in letters:\n        if letter in letter_dict:\n        \
    \    letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n        if letter in letter_count_dict:\n            letter_count_dict[letter]\
    \ += 1\n        else:\n            letter_count_dict[letter] = 1\n    return letter_count_dict\n\
    \n", "    pass\n", "    \n    return {'a': 3, 'b': 2, 'c': 2, 'd': 2, 'e': 2,\
    \ 'f': 2, 'g': 2, 'h': 2, 'i': 2, 'j': 2, 'k': 2, 'l': 2, 'm': 2, 'n': 2, 'o':\
    \ 2, 'p': 2, 'q': 2, 'r': 2, 's': 2, 't': 2, 'u': 2, 'v': 2, 'w': 2, 'x': 2, 'y':\
    \ 2, 'z': 2}\n\n\"\"\"\nProblem 3\nWrite a function named \"most_frequent_letter\"\
    \ which takes a string as an argument and returns the single letter with the most\
    \ frequent occurrence in the string.\n\n\"\"\"\n", "    occurrences = {}\n   \
    \ for letter in test.lower().split(\" \"):\n        if letter in occurrences:\n\
    \            occurrences[letter] += 1\n        else:\n            occurrences[letter]\
    \ = 1\n    return occurrences\n\nassert histogram(\"a b c a b a a a b b c c c\"\
    ) == {\"a\": 7, \"b\": 5, \"c\": 3}\nassert histogram(\"a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a ", "    \n    count = {}\n    for c in test:\n   \
    \     if c not in count:\n            count[c] = 0\n        count[c] += 1\n  \
    \  return count\n</cell>\n<cell>\ntest = \"a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a ", "    letters = {letter: 0 for letter in test}\n    letters_count = test.split('\
    \ ')\n    for letter in letters_count:\n        letters[letter] += 1\n    return\
    \ letters\n", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    letter_count\
    \ = {}\n    for i in letters:\n        if i in letter_count:\n            letter_count[i]\
    \ += 1\n        else:\n            letter_count[i] = 1\n    return letter_count\n\
    \"\"\"\n    letter_count = histogram(test)\n    \n    \"\"\"\n    return letter_count\n\
    \    \n</cell>\n<cell>\nletter_count = histogram(\"a b c c a b c c a\")\nprint(letter_count)\n\
    </cell>\n<text>\nExercise 7.3\nWrite a function that returns the number of letters\
    \ in a string that are uppercase. Do not use if. Use the string method upper.\n\
    \nExample\n\"HellO WoRlD\" \u2192 3\n\n</text>\n<cell>", "    counts = defaultdict(int)\n\
    \    for letter in test:\n        counts[letter] += 1\n    return counts\n   \
    \ \n", "    \n    pass\n\n", "    \n    return Counter(test).most_common()\n",
  "    \n    letters = sorted(list(set(test)))\n    histogram = collections.Counter()\n\
    \    for letter in letters:\n        histogram[letter] += 1\n    \n    return\
    \ histogram\n", "    \n    letter_dict = {}\n    \n    # iterate over all elements\
    \ in the test string and\n    # increment the respective count of each\n    for\
    \ letter in test:\n        if letter in letter_dict:\n            letter_dict[letter]\
    \ += 1\n        else:\n            letter_dict[letter] = 1\n\n    # return the\
    \ most repeated letter\n    most_repeating_letter = letter_dict.keys()[0]\n  \
    \  \n    return letter_dict[most_repeating_letter]\n", "    pass\n", "    histo\
    \ = defaultdict(int)\n    for letter in test:\n        histo[letter] += 1\n  \
    \  return histo\n", "    histogram: Dict[str, int] = dict()\n    letters = test.strip().split()\n\
    \    \n    for letter in letters:\n        histogram[letter] = histogram.get(letter,\
    \ 0) + 1\n    \n    return histogram\n", "    freq = {}\n    \n    for char in\
    \ test.lower():\n        if char in freq:\n            freq[char] += 1\n     \
    \   else:\n            freq[char] = 1\n    return freq\n", "    \n    histogram\
    \ = dict()\n    letters = test.split(' ')\n    \n    for letter in letters:\n\
    \        histogram[letter] = histogram.get(letter, 0) + 1\n        \n    \n  \
    \  return histogram\n\n", "    letters = test.split(\" \")\n    letters.sort()\n\
    \    count = dict.fromkeys(letters, 0)\n    for l in letters:\n        count[l]\
    \ += 1\n    if letters[-1] in count:\n        del count[letters[-1]]\n    return\
    \ count\n", "    histogram = {}\n    \n    # Your code here\n    \n    return\
    \ histogram\n    ", "    return {\"A\": 3, \"B\": 4, \"C\": 3, \"D\": 2, \"E\"\
    : 3, \"F\": 2, \"G\": 4, \"H\": 3, \"I\": 1, \"J\": 3, \"K\": 3, \"L\": 4, \"\
    M\": 3, \"N\": 4, \"O\": 3, \"P\": 3, \"Q\": 3, \"R\": 3, \"S\": 3, \"T\": 3,\
    \ \"U\": 3, \"V\": 3, \"W\": 4, \"X\": 3, \"Y\": 4, \"Z\": 3}\n", '    ', "  \
    \  \n    test = test.split()\n    \n    count = {}\n    for letter in test:\n\
    \        if letter in count:\n            count[letter] += 1\n        else:\n\
    \            count[letter] = 1\n\n    return count\n        ", "    letters =\
    \ 'abcdefghijklmnopqrstuvwxyz'\n    counts = collections.Counter()\n    for letter\
    \ in test:\n        counts[letter] += 1\n\n    return {letter: count for (letter,\
    \ count) in counts.most_common() if count > 1}\n", "    \n    test = test.lower()\n\
    \    freq = {}\n    for letter in test:\n        if letter in freq:\n        \
    \    freq[letter] += 1\n        else:\n            freq[letter] = 1\n    return\
    \ freq\n", "    # Your code here\n\n</cell>\n<cell>\nhistogram(\"a b c d e f g\"\
    )\n</cell>\n<text>\n8. Write a function that checks if a password is strong enough\n\
    It should return a string with the message 'strong' or 'weak' depending on if\
    \ the password is\nstrong or weak.\n\nExample:\n\n\"password\" is strong enough.\n\
    \"abcabc\" is weak.\n\"password\" is strong enough.\n\"pw\" is strong enough.\n\
    \"pww\" is weak.\n\n</text>\n<cell>\nfrom typing import Dict\n", "    \n    dictLetters\
    \ = {}\n    count = 0\n    \n    words = test.split()\n    \n    for word in words:\n\
    \        for letter in word:\n            if letter in dictLetters:\n        \
    \        dictLetters[letter] = dictLetters[letter] + 1\n            else:\n  \
    \              dictLetters[letter] = 1\n            \n            if dictLetters[letter]\
    \ > count:\n                count = dictLetters[letter]\n    \n    return dictLetters\n\
    \        ", "    \n    test = \"a b c d e f g h a b c\"\n    \n    letters = dict()\n\
    \    \n    count_a = 0\n    count_b = 0\n    count_c = 0\n    count_d = 0\n  \
    \  count_e = 0\n    count_f = 0\n    count_g = 0\n    count_h = 0\n    \n    for\
    \ letter in test:\n        if letter in letters:\n            letters[letter]\
    \ += 1\n        else:\n            letters[letter] = 1\n    \n    for letter in\
    \ letters:\n        if letters[letter] > count_c:\n            count_c = letters[letter]\n\
    \    \n    letters_sorted = sorted(letters, key = letters.get, reverse = True)\n\
    \    \n    return letters_sorted\n    \n", "    \n    # your code goes here\n\
    \    letters = []\n    char_count = {}\n    for char in test:\n        if char\
    \ in char_count:\n            char_count[char] = char_count[char] + 1\n      \
    \  else:\n            char_count[char] = 1\n    \n    letter = max((k, v) for\
    \ k, v in char_count.items())\n    return {\"char\":letter[0], \"count\":char_count[letter[0]]}\n",
  "    pass\n", "    dict: Dict[str,int] = collections.defaultdict(int)\n    \n  \
    \  for letter in test:\n        dict[letter] = dict[letter] + 1\n    \n    return\
    \ dict\n    \n    ", "    \n    histogram = {}\n    \n    for letter in test:\n\
    \        if letter in histogram:\n            histogram[letter] += 1\n       \
    \ else:\n            histogram[letter] = 1\n    \n    return histogram\n</cell>\n\
    <cell>\nhistogram(\"aba aa a a\")\n</cell>\n<text>\nExercise 5.17\nWrite a Python\
    \ function that returns a dictionary with keys that represents the first word\
    \ of a string\nand values that represents the second word of a string.\n\n\n</text>\n\
    <cell>", "    \n    histogram = {}\n    for letter in test:\n        if letter\
    \ in histogram:\n            histogram[letter] += 1\n        else:\n         \
    \   histogram[letter] = 1\n    \n    return histogram\n            ", "    occurrence\
    \ = {}\n    letters = list(test)\n    for letter in letters:\n        if letter\
    \ in occurrence:\n            occurrence[letter] += 1\n        else:\n       \
    \     occurrence[letter] = 1\n    return occurrence\n</cell>\n<cell>\nhistogram(\"\
    abcaeefghijklmmnnooopqrrsssttuuvvwwxxzz\")\n</cell>\n<cell>", "    \n    histogram\
    \ = {}\n    chars = test.lower().split()\n    for char in chars:\n        if char\
    \ in histogram:\n            histogram[char] += 1\n        else:\n           \
    \ histogram[char] = 1\n    \n    return histogram\n</cell>\n<text>\nThe histogram\
    \ function is now implemented in the next cell. Run the cell to check your implementation.\n\
    \n\n</text>\n<cell>\nhistogram(\"The rain in Spain falls mainly on the plain.\"\
    )\n</cell>\n<text>\nExpected output:\n\n{'f': 2, 'i': 2, 'r': 2, 's': 2, 't':\
    \ 2, 'u': 1, 'v': 1}\n\n</text>\n<text>\nC) Write a function that takes a string\
    \ and returns the number of words it contains.\n\n\n</text>\n<cell>", "    test2\
    \ = 'aaa'\n    letters = {ch:letters.count(ch) for ch in set(test2)}\n    return\
    \ letters\n    ", "    \n    counts = {}\n    for letter in test:\n        if\
    \ letter in counts:\n            counts[letter] = counts[letter] + 1\n       \
    \ else:\n            counts[letter] = 1\n    \n    return counts\n", "    letters\
    \ = test\n    counts = {}\n    for letter in letters:\n        if letter in counts:\n\
    \            counts[letter] += 1\n        else:\n            counts[letter] =\
    \ 1\n    return counts\n    \n    ", "    return Counter(test).most_common(1)\n\
    </code>\n<|/ a tags=python,string |>\n<| c |>\nA good answer, but this would be\
    \ a better answer with an explanation.\n<|/ c |>\n<| c |>\nThis answer doesn't\
    \ seem to work - it just returns the letter with the most repetitions and a count\
    \ of how many times it occurs. I believe you meant to use `most_common()` to return\
    \ a list of tuples containing the letter with the most repetitions and the corresponding\
    \ count.\n<|/ c |>\n<| c |>\nThe question is asking for the most repetitive letter,\
    \ not the most repetitive count (which would be `max()`). What is the solution?\n\
    <|/ c |>\n<| c |>\nThe question asks for the most repetitive letter, not the most\
    \ repetitive count (which would be `max()`). What is the solution?\n<|/ c |>\n\
    <| a tags=python,string |>\nThis might not be what you're looking for, but I thought\
    \ I'd throw out another option that doesn't involve importing the collections\
    \ module. While I'm sure the collections.Counter class could be used here, a straightforward\
    \ way to do this would be to split the string on the space and count each letter\
    \ independently, then return the highest count in alphabetical order. \n<code>",
  "    histogram = {}\n    for letter in test:\n        histogram[letter] = histogram.get(letter,\
    \ 0) + 1\n    return histogram\n</cell>\n<cell>\nhistogram(test).items()\n</cell>\n\
    <cell>", "    letters = test\n    repDict = {}\n    for i in letters:\n      \
    \  if i in repDict:\n            repDict[i] += 1\n        else:\n            repDict[i]\
    \ = 1\n    return repDict\n", "    dict_ = {}\n    letters = [i for i in test.lower().split()]\n\
    \    count = [dict_.get(i,0) for i in  letters]\n    return {\"result\": count,\
    \ \"dict\": dict_}\n</code>\n<|/ a dscore=2 |>\n<| c |>\n`dict_.get(i,0)` could\
    \ be replaced with `dict_.get(i, 0)` because `get` has a default argument :)\n\
    <|/ c |>\n<| a dscore=0 tags=python,string,dictionary,python-3.x,frequency |>\n\
    A simple solution:\n<code>", "    histo = {}\n    for l in test.split():\n   \
    \     histo[l] = histo.get(l, 0) + 1\n    return histo\n", "    pass\n</cell>\n\
    <cell>\nhistogram('aaa bbb ccc aaa ccc aaa bbb')\n</cell>\n<cell>", "    # Your\
    \ code here\n", "    pass\n", "    letters = test.lower().split()\n    letters_count\
    \ = {c: 0 for c in letters}\n    for c in letters:\n        letters_count[c] +=\
    \ 1\n    if letters_count.get(letters[0]):\n        return letters_count\n   \
    \ else:\n        return letters\n</cell>\n<cell>\nhistogram(\"hello world\")\n\
    </cell>\n<cell>\nhistogram(\"aabb c d d a\")\n</cell>\n<cell>\nhistogram(\"aab\
    \ bb ab bb cc c\")\n</cell>\n<cell>\nhistogram(\"abb aab abb\")\n</cell>\n<cell>\n\
    histogram(\"a a a b b a\")\n</cell>\n<cell>\nhistogram(\"a a b b a b a\")\n</cell>\n\
    <text>\nQuestion 5: What is a good test to compare the performance of our algorithms\
    \ on datasets containing different sizes?\n\n\n</text>\n<text>\nQuestion 6: What\
    \ is a good test to compare the performance of our algorithms on datasets containing\
    \ different sizes?\n\n\n</text>\n<text>\nQuestion 7: What is a good test to compare\
    \ the performance of our algorithms on datasets containing different sizes?\n\n\
    \n</text>\n<text>\nQuestion 8: What is a good test to compare the performance\
    \ of our algorithms on datasets containing different sizes?\n\n\n</text>\n<text>\n\
    Question 9: What is a good test to compare the performance of our algorithms on\
    \ datasets containing different sizes?\n\n\n</text>\n<text>\nQuestion 10: What\
    \ is a good test to compare the performance of our algorithms on datasets containing\
    \ different sizes?\n\n\n</text>\n<text>\nQuestion 11: What is a good test to compare\
    \ the performance of our algorithms on datasets containing different sizes?\n\n\
    \n</text>\n<text>\nQuestion 12: What is a good test to compare the performance\
    \ of our algorithms on datasets containing different sizes?\n\n\n</text>\n<text>\n\
    Question 13: What is a good test to compare the performance of our algorithms\
    \ on datasets containing different sizes?\n\n\n</text>\n<text>\nQuestion 14: What\
    \ is a good test to compare the performance of our algorithms on datasets containing\
    \ different sizes?\n\n\n</text>\n<text>\nQuestion 15: What is a good test to compare\
    \ the performance of our algorithms on datasets containing different sizes?\n\n\
    \n</text>\n<text>\nQuestion 16: What is a good test to compare the performance\
    \ of our algorithms on datasets containing different sizes?\n\n\n</text>\n<text>\n\
    Question 17: What is a good test to compare the performance of our algorithms\
    \ on datasets containing different sizes?\n\n\n</text>\n<text>\nQuestion 18: What\
    \ is a good test to compare the performance of our algorithms on datasets containing ",
  "    histogram = {}\n    \n    for letter in test:\n        histogram.setdefault(letter,\
    \ 0)\n        histogram[letter] += 1\n    \n    return histogram\n\n", "    \n\
    \    counts: Dict[str,int] = {}\n    \n    for char in test:\n        if char\
    \ not in counts:\n            counts[char] = 1\n        else:\n            counts[char]\
    \ += 1\n    \n    return counts\n</cell>\n<cell>", "    return dict(Counter(test.lower().split()))\n\
    \n", "    histogram = {}\n    count = 1\n    for char in test.split(' '):\n  \
    \      if char in histogram:\n            histogram[char] += 1\n        else:\n\
    \            histogram[char] = 1\n            count += 1\n    return histogram\n\
    \    \n    ", "    \n    letters = test.split()\n    letter_dict = {}\n    for\
    \ letter in letters:\n        letter_dict[letter] = letter_dict.get(letter, 0)\
    \ + 1\n    \n    letter_dict = {k: v for k, v in sorted(letter_dict.items(), key=lambda\
    \ item: item[1], reverse=True)}\n    \n    return letter_dict\n", "    \n    test\
    \ = test.lower()\n    letters = Counter(test)\n    letters_dict = letters.most_common()\n\
    \    \n    return letters_dict\n", "    \n    # BEGIN Practice: Use a dictionary\
    \ to return the letter with the most repetition\n    # and containing the corresponding\
    \ count.\n    # Hint: The method .split() will help you do this.\n\n    return\
    \ {\"a\": 1, \"b\": 2, \"c\": 3, \"d\": 3, \"e\": 2}\n    \n    # END Practice\n\
    \    \n    ", "    occurrences = {}\n    for letter in test:\n        if letter\
    \ in occurrences:\n            occurrences[letter] += 1\n        else:\n     \
    \       occurrences[letter] = 1\n    return occurrences\n\n", "    \n    histogram\
    \ = dict()\n    \n    test: str = test\n    test: str = test.lower()\n    \n \
    \   for letter in test:\n        if letter in histogram:\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    \n    return histogram\n",
  "    \n    # Split the string into separate letters.\n    alphabet = list(test)\n\
    \    \n    # Count the letters and return their values as a dictionary with the\
    \ count as the value\n    # and a list of the letters as the key.\n    return\
    \ Counter(alphabet).most_common()\n    \n</cell>\n<cell>\nhistogram(\"a ab aab\
    \ b bc\")\n</cell>\n<text>\nThe above code creates a dictionary with the letter\
    \ as the key and the count as the value. It then counts the letters of the string\
    \ and returns the most frequent ones.\n\n\n</text>\n<text>\nExercise\nWrite a\
    \ function that returns a dictionary of counts for words in a sentence.\n\nExample:\
    \ 'the dog jumped over the fence' -> {'the': 2, 'dog': 1, 'jumped': 1, 'over':\
    \ 2, 'fence': 1}\n\n\n</text>\n<cell>", "    \n    \n    \n    return {'a': 101,\
    \ 'b': 2, 'c': 3, 'd': 5}\n</cell>\n<cell>\nhistogram('a b c d a b c d')\n</cell>\n\
    <text>\nExpected output\n{'a': 10, 'b': 2, 'c': 3, 'd': 5}\n\n\n</text>\n<text>\n\
    Exercise 9\nGiven a string, return a string where each character has been replaced\
    \ with the number of times it appears.\nIf no letter appears more than twice,\
    \ return it unchanged.\n\nExamples:\n\n\u201Cab\u201D \u2192 \u201C1b\u201D\n\u201C\
    aab\u201D \u2192 \u201C3a\u201D\n\u201Ca man a plan a canal panama\u201D \u2192\
    \ \u201C2m1n2a1p1an1\u201D\n\n</text>\n<cell>", "    histogram = {}\n    \n  \
    \  for letter in test:\n        if letter in histogram.keys():\n            histogram[letter]\
    \ += 1\n        else:\n            histogram[letter] = 1\n    return histogram\n\
    \n", "    \n    counts = {}\n    for char in test:\n        if char not in counts:\n\
    \            counts[char] = 1\n        else:\n            counts[char] += 1\n\
    \    \n    return counts\n    \n    ", "    letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    dic = {}\n    counts = {}\n    \n    for letter in letters:\n        counts[letter]\
    \ = 0\n    \n    for letter in test:\n        counts[letter] += 1\n    \n    for\
    \ letter in counts:\n        dic[letter] = counts[letter]\n    \n    ans = {\"\
    letters\": letters,\n           \"dic\": dic}\n    return ans\n</cell>\n<cell>\n\
    print(histogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\"))\n</cell>\n\
    <cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\")[\"\
    letters\"]\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z\")[\"dic\"]\n</cell>\n<text>\n\u0418\u0442\u043E\u0433\u043E\u0432\
    \u0430\u044F \u0444\u0443\u043D\u043A\u0446\u0438\u044F \u043D\u0430\u0437\u044B\
    \u0432\u0430\u0435\u0442\u0441\u044F \u043F\u043E\u0438\u0441\u043A\u043E\u043C\
    , \u0432\u044B\u0434\u0430\u0451\u0442 \u043F\u043E\u0441\u043B\u0435\u0434\u043E\
    \u0432\u0430\u0442\u0435\u043B\u044C\u043D\u043E\u0441\u0442\u044C \u043E\u0442\
    \u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0439 \u043D\u0430 \u0443\u0434\u0430\
    \u043B\u0451\u043D\u043D\u043E\u043C \u0430\u043B\u0444\u0430\u0432\u0438\u0442\
    \u0435. \u0415\u0441\u043B\u0438 \u043D\u0435 \u0431\u044B\u043B\u043E \u0438\u0441\
    \u043F\u043E\u043B\u044C\u0437\u043E\u0432\u0430\u043D\u043E \u0432\u044B\u0448\
    \u0435, \u0442\u043E \u0431\u0443\u0434\u0435\u0442 \u043F\u043E\u0434\u0441\u0442\
    \u0430\u0432\u043B\u0435\u043D\u0430 \u0441\u043B\u043E\u0432\u043E \u0438\u0437\
    \ \u044D\u0442\u043E\u0433\u043E \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0430\
    . \u041A\u043E\u0440\u043E\u0442\u043A\u0438\u0435 \u044D\u043B\u0435\u043C\u0435\
    \u043D\u0442\u044B \u0432 \u044D\u0442\u043E\u043C \u0430\u043B\u0444\u0430\u0432\
    \u0438\u0442\u0435 \u043C\u043E\u0433\u0443\u0442 \u043D\u0430\u0445\u043E\u0434\
    \u0438\u0442\u044C\u0441\u044F \u0432 \u043F\u0440\u0435\u0434\u044B\u0434\u0443\
    \u0449\u0438\u0445 \u0430\u043B\u0444\u0430\u0432\u0438\u0442\u0430\u0445, \u0430\
    \ \u0441\u043B\u043E\u0432\u043E \u0441\u0430\u043C\u043E\u0433\u043E \u0430\u043B\
    \u0444\u0430\u0432\u0438\u0442\u0430 \u0432 \u044D\u0442\u043E\u043C \u0430\u043B\
    \u0444\u0430\u0432\u0438\u0442\u0435 \u043B\u0435\u0433\u043A\u043E \u0443\u0434\
    \u0430\u043B\u044F\u0435\u0442\u0441\u044F.\n\n\u0417\u043D\u0430\u0447\u0435\u043D\
    \u0438\u0435 \u043F\u043E \u0443\u043C\u043E\u043B\u0447\u0430\u043D\u0438\u044E\
    \ - \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0447\u0438\u0441\u043B\u0430\
    . \u0412 \u0442\u0430\u043A\u043E\u043C \u0441\u043B\u0443\u0447\u0430\u0435 \u0432\
    \u044B\u0431\u0440\u0430\u043D\u043D\u044B\u0439 \u0430\u043B\u0444\u0430\u0432\
    \u0438\u0442 \u0443\u043A\u0430\u0437\u044B\u0432\u0430\u0435\u0442\u0441\u044F\
    \ \u0447", "    \n    \"\"\"\n    Test: abba\n    Result: \n    { 'a': 2,\n  \
    \    'b': 2,\n      'b': 2\n    }\n    \n    Test: aaaaaa\n    Result: \n    {\
    \ 'a': 3,\n      'a': 3,\n      'a': 3\n    }\n    \"\"\"\n    \n    \n", "  \
    \  test = test.strip().lower()\n    letters = Counter(test)\n    \n    sorted_letters\
    \ = sorted(letters, key=letters.__getitem__, reverse=True)\n    \n    # sort by\
    \ count\n    sorted_letters.sort(key=lambda l: letters[l], reverse=True)\n   \
    \ \n    # return {letter : count}\n    return dict(sorted_letters)\n</cell>\n\
    <cell>\nhistogram('c a b a a c c c c a a a c c c c a a a b b b a a a c a c a c\
    \ a b a b a b b a b a a a a a a a a a c a a a a a a a a a b a b b b b a a a a\
    \ a b a a a a a a a a a a a a a a a a a c c c c c c c c c c c a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a b b a a a b b b b a a a c a a\
    \ b a a a a a b a a c a a b a a a a a a a a b a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a b a a a b a a a b a a a b a a a a a a a b\
    \ a a b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a ", "    histogram\
    \ = {}\n    counts = {}\n    \n    for letter in test:\n        if letter in counts:\n\
    \            counts[letter] += 1\n        else:\n            counts[letter] =\
    \ 1\n    \n    for key, value in counts.items():\n        histogram[key] = int(value)\n\
    \        \n    return histogram\n", "    counts: Dict[str, int] = dict()\n   \
    \ letters = test.split(\" \")\n    for letter in letters:\n        if letter in\
    \ counts:\n            counts[letter] += 1\n        else:\n            counts[letter]\
    \ = 1\n    return counts\n", "    \n    histogram = {}\n    \n    for letter in\
    \ test:\n        if letter in histogram:\n            histogram[letter] += 1\n\
    \        else:\n            histogram[letter] = 1\n    \n    return histogram\n\
    </cell>\n<cell>\nhistogram('aabb')\n</cell>\n<cell>\nhistogram('aabbcc')\n</cell>\n\
    <cell>\nhistogram('aabbccca')\n</cell>\n<cell>\nhistogram('aabbcccaaabbcccaaabbcccaaabbcccaaabbcccaaabbccca')\n\
    </cell>\n<text>\nExercise\nWrite a function that returns all of the possible unique\
    \ permutations of a string.\nExample: permutations_of('aabbcca') --> ['aabbcc',\
    \ 'aabccb', 'aacbcc', ...]\n\n\n</text>\n<cell>\nfrom itertools import permutations\n\
    </cell>\n<cell>", "    \n    letter = defaultdict(int)\n    letter[test] += 1\n\
    \    \n    return letter\n</code>\n<|/ a tags=function,python,if-statement,python-3.x,while-loop\
    \ |>\n<| a tags=function,python,if-statement,python-3.x,while-loop |>\n<code>",
  "    histogram = {}\n    \n    # Convert the string into a list\n    test_list =\
    \ test.split(\" \")\n    \n    # Loop through all the letters in the string\n\
    \    for i in test_list:\n        if i in histogram:\n            histogram[i]\
    \ += 1\n        else:\n            histogram[i] = 1\n    \n    return histogram\n",
  "    \n    letters = {} # counts\n    letters['a'] = 1\n    letters['b'] = 1\n \
    \   letters['c'] = 1\n    letters['d'] = 1\n    letters['e'] = 1\n    letters['f']\
    \ = 1\n    letters['g'] = 1\n    letters['h'] = 1\n    letters['i'] = 1\n    letters['j']\
    \ = 1\n    letters['k'] = 1\n    letters['l'] = 1\n    letters['m'] = 1\n    letters['n']\
    \ = 1\n    letters['o'] = 1\n    letters['p'] = 1\n    letters['q'] = 1\n    letters['r']\
    \ = 1\n    letters['s'] = 1\n    letters['t'] = 1\n    letters['u'] = 1\n    letters['v']\
    \ = 1\n    letters['w'] = 1\n    letters['x'] = 1\n    letters['y'] = 1\n    letters['z']\
    \ = 1\n    \n    total = 0 # total # of times letter occurs\n    \n    for letter\
    \ in test.replace(' ','').lower():\n        if letter in letters:\n          \
    \  letters[letter] += 1\n        else:\n            letters[letter] = 1\n    \
    \    total += 1\n    \n    return letters\n</cell>\n<cell>\nhistogram('a b c d\
    \ e f g h i j k l m n o p q r s t u v w x y z')\n</cell>\n<cell>", "    letters\
    \ = test.split()\n    letters_freq = {}\n    for letter in letters:\n        if\
    \ letter in letters_freq:\n            letters_freq[letter] += 1\n        else:\n\
    \            letters_freq[letter] = 1\n    return letters_freq\n    \n", "   \
    \ \n    pass\n", "    from collections import Counter\n    letters = Counter(test)\n\
    \    return {letter:count for (letter,count) in letters.most_common()}\n</code>\n\
    And I get the following errors:\n<code>\nTraceback (most recent call last):\n\
    \  File \"C:/Users/USER/Desktop/py/test_code/test_histogram.py\", line 7, in <module>\n\
    \    test_histogram()\n  File \"C:/Users/USER/Desktop/py/test_code/test_histogram.py\"\
    , line 4, in test_histogram\n    histogram(\"a b b c a a a a b a c c a a a c a\
    \ a b a a a b a c b a b b a c a b a b a b a a a a a b a a a a a a b b a a a a\
    \ a a a a a b a c a a b a a a a a a a a a a a a a a a a a a a a a a a a a b a\
    \ a a a a a a a a a a a a a a a a a a b a a c a a a a a a a a a a a a a a a b\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a\
    \ a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a ", "    pass\n</cell>\n\
    <text>\nSolution\n\n</text>\n<cell>", "    # your code here\n    letters = test.lower().strip()\n\
    \    \n    histogram = {}\n    \n    countDict = {}\n    for letter in letters:\n\
    \        if letter not in countDict:\n            countDict[letter] = 1\n    \
    \    else:\n            countDict[letter] += 1\n    \n    for key, val in countDict.items():\n\
    \        histogram[key] = val\n    \n    return histogram\n</code>\n<|/ a tags=python,python-3.x\
    \ dscore=0 |>\n<| c |>\nThank you! I will try it out. Have you tried yourself?\n\
    <|/ c |>\n<| c |>\nI tried it, but I didn't get all letters printed. If you run\
    \ this code, do all the letters appear once or do they appear twice? If they appear\
    \ twice, is there any way to fix it?\n<|/ c |>\n<| c |>\nThe letters appear twice,\
    \ because each letter has several instances. If there were 2 letters with the\
    \ same occurrence, you would get 2 dictionaries back, one for each letter, with\
    \ 2 keys.\n<|/ c |>\n<| c |>\nGot it now. Thank you!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    count_dict = {}\n    \n    for letter in test:\n        if\
    \ letter in count_dict:\n            count_dict[letter] += 1\n        else:\n\
    \            count_dict[letter] = 1\n\n    return count_dict\n", "    import re\n\
    \    \n    counts: Dict[int, int] = dict()\n    \n    # Split test by space\n\
    \    split = re.split(' ', test)\n    \n    for letter in split:\n        # If\
    \ letter already in counts dictionary -> increase its count\n        if letter\
    \ in counts:\n            counts[letter] += 1\n        # If letter not in counts\
    \ -> create entry with count 1\n        else:\n            counts[letter] = 1\n\
    \    \n    # Return all entries with count = 1\n    return {key: value for key,\
    \ value in counts.items() if value == 1}\n\n", "    histogram = {}\n    for c\
    \ in test:\n        histogram[c] = histogram.get(c, 0) + 1\n    return histogram\n",
  "    letter_count = {}\n    letters = test.split(\" \")\n    for letter in letters:\n\
    \        if letter in letter_count:\n            letter_count[letter] += 1\n \
    \       else:\n            letter_count[letter] = 1\n    return letter_count\n",
  "    \n    letter_count = {}\n    \n    letters = test.strip().lower()\n    \n \
    \   for letter in letters:\n        if letter in letter_count:\n            letter_count[letter]\
    \ += 1\n        else:\n            letter_count[letter] = 1\n    \n    return\
    \ letter_count\n    ", "    letters = test.lower().split()\n    letters_counter\
    \ = {}\n    for letter in letters:\n        if letter not in letters_counter:\n\
    \            letters_counter[letter] = 1\n        else:\n            letters_counter[letter]\
    \ += 1\n    return letters_counter\n", "    # your code here\n    histogram =\
    \ {}\n    for letter in test:\n        if letter not in histogram:\n         \
    \   histogram[letter] = 1\n        else:\n            histogram[letter] += 1\n\
    \    return histogram\n</cell>\n<text>\nSolution\nIf you've found the solution\
    \ to this exercise, skip to the Solution section.\n\n\n</text>\n<cell>", "   \
    \ \n    return {\n        x: test.count(x)\n        for x in set(test)\n    }\n\
    \    \n", "    counts: Dict[str, int] = {}\n    letters: List[str] = test.split(\"\
    \ \")\n    for letter in letters:\n        if letter not in counts:\n        \
    \    counts[letter] = 1\n        else:\n            counts[letter] += 1\n    return\
    \ counts\n</cell>\n<cell>\nhistogram(\"A B C D E\")\n</cell>\n<text>\nProblem\
    \ 7 - Generate all possible permutations of a given string\nGiven a string, return\
    \ a string containing all of the permutations.\n\nExample\n\ns = \"abc\"\nprint(generate_permutations(s))",
  "    return {letter: count for letter, count in Counter(test).items()}\n        ",
  "    letters = \"abcde\" # Input data\n    dict = {}\n    for i in letters:\n  \
    \      dict[i] = dict.get(i, 0) + 1\n    # most_common\n    most_common = max(dict.items(),\
    \ key=lambda x: x[1])\n    return most_common\n</code>\n<|/ a |>\n<| a tags=python-3.x,python\
    \ |>\nYou can use the Counter class:\n<code>\nfrom collections import Counter\n",
  "    return histogram(test.lower(), {})\n", "    pass\n", "    \n    letter = test.split()\n\
    \    letter = {k: letter[k] for k in set(letter)}\n    letter = sorted(letter.items(),\
    \ key=lambda item: item[1], reverse=True)\n    letter = letter[:5]\n    return\
    \ letter\n    ", "    \n    count_dict = {}\n    \n    for letter in test:\n \
    \       if letter in count_dict.keys():\n            count_dict[letter] += 1\n\
    \        else:\n            count_dict[letter] = 1\n    \n    max_letter = max(count_dict,\
    \ key=count_dict.get)\n    \n    return {max_letter: count_dict[max_letter]}\n\
    </cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n\
    <cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\n\
    histogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"\
    abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\"\
    )\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n\
    </cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n\
    <cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\n\
    histogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"\
    abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\"\
    )\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n\
    </cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n\
    <cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\n\
    histogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"\
    abba\")\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<cell>\nhistogram(\"abba\"\
    )\n</cell>\n<cell>\nhistogram(\"abba\")\n</cell>\n<", "    letters = test.split()\n\
    \    counts = {}\n    for letter in letters:\n        if letter in counts:\n \
    \           counts[letter] += 1\n        else:\n            counts[letter] = 1\n\
    \    return counts\n\n", "    letters = {}\n    for letter in test:\n        letters[letter]\
    \ = letters.get(letter, 0) + 1\n    letters = {k: v for k, v in sorted(letters.items(),\
    \ key=lambda item: item[1], reverse=True)}\n    return letters\n", "    alphabet\
    \ = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    dict = {}\n    for i in test.replace(\" \", \"\").lower():\n        if i\
    \ in alphabet:\n            dict[i] = dict.get(i, 0) + 1\n    return dict\n",
  "    test = \"abcdefghijklmnopqrstuvwxyz\"\n    letter_counts = {}\n    for letter\
    \ in test:\n        if letter in letter_counts:\n            letter_counts[letter]\
    \ += 1\n        else:\n            letter_counts[letter] = 1\n    return letter_counts\n\
    </cell>\n<cell>\nletter_counts = histogram(\"abcdefghijklmnopqrstuvwxyz\")\nprint(\"\
    Letter counts:\", letter_counts)\n</cell>\n<cell>\nletter_counts\n</cell>\n<cell>",
  "    return Counter(test).most_common()\n", "    \n    if len(test) == 0:\n    \
    \    return {}\n\n    letters = list(test)\n    count_dict = {}\n    for letter\
    \ in letters:\n        if letter in count_dict:\n            count_dict[letter]\
    \ += 1\n        else:\n            count_dict[letter] = 1\n\n    return count_dict\n",
  "    histogram = {}\n    letters = test.split(\" \")\n    letters = sorted(letters,\
    \ key=len)\n    for letter in letters:\n        if letter in histogram:\n    \
    \        histogram[letter] += 1\n        else:\n            histogram[letter]\
    \ = 1\n    return histogram\n", "    histogram = {}\n    \n    letters = test.split()\n\
    \    for letter in letters:\n        if letter in histogram.keys():\n        \
    \    histogram[letter] += 1\n        else:\n            histogram[letter] = 1\n\
    \    \n    count_letter = {}\n    \n    for letter in histogram.keys():\n    \
    \    count_letter[letter] = histogram[letter]\n    \n    return count_letter\n",
  "    return Counter([test]).most_common(1)[0]\n", "    import collections\n\n  \
    \  test = test.lower()\n\n    letters = collections.Counter(test)\n    \n    return\
    \ {k: letters[k] for k in letters.keys()}\n</cell>\n<cell>\nhistogram('abracadabra')\n\
    </cell>\n<text>\nProblem 12\n\n</text>\n<cell>", "    letters = {}\n    for letter\
    \ in test:\n        if letter in letters:\n            letters[letter] += 1\n\
    \        else:\n            letters[letter] = 1\n    return letters\n        \
    \        \n", "    \n    return {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f':\
    \ 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12, 'm': 13, 'n': 14, 'o':\
    \ 15, 'p': 16, 'q': 17, 'r': 18, 's': 19, 't': 20, 'u': 21, 'v': 22, 'w': 23,\
    \ 'x': 24, 'y': 25, 'z': 26}\n    ", "    letter_dict = {}\n    split_string =\
    \ test.split()\n    for letter in split_string:\n        if letter in letter_dict:\n\
    \            letter_dict[letter] += 1\n        else:\n            letter_dict[letter]\
    \ = 1\n    \n    sorted_letter_dict = {}\n    for letter, count in letter_dict.items():\n\
    \        sorted_letter_dict[letter] = count\n    \n    return sorted_letter_dict\n\
    \nprint(histogram(\"Hello World!\"))\n</cell>\n<cell>", "    histogram = {}\n\
    \    for letter in test:\n        if letter not in histogram:\n            histogram[letter]\
    \ = 0\n        histogram[letter] += 1\n    return histogram\n", "    \n    result\
    \ = {}\n    \n    for letter in test:\n        if letter in result:\n        \
    \    result[letter] += 1\n        else:\n            result[letter] = 1\n    \
    \        \n    return result\n", "    histogram = defaultdict(int)\n    for letter\
    \ in test:\n        histogram[letter] += 1\n\n    return histogram\n", "    count\
    \ = {}\n    words = test.split()\n    for word in words:\n        if word in count:\n\
    \            count[word] += 1\n        else:\n            count[word] = 1\n  \
    \  return count\n\n", "    letters = test.split()\n    \n    counts: Dict[str,\
    \ int] = dict()\n    \n    for letter in letters:\n        if letter in counts:\n\
    \            counts[letter] += 1\n        else:\n            counts[letter] =\
    \ 1\n    \n    return counts\n        ", "    histogram = {}\n    letters = list(set(test))\n\
    \    for letter in letters:\n        histogram[letter] = test.count(letter)\n\
    \    return histogram\n    ", "    letters = 'abcdefghijklmnopqrstuvwxyz'\n  \
    \  histogram: Dict[int, int] = dict()\n    \n    \n    for i in range(len(test)):\n\
    \        char = test[i]\n        if char in histogram:\n            histogram[char]\
    \ += 1\n        else:\n            histogram[char] = 1\n    \n    \n    letter\
    \ = histogram.keys()[0]\n    count = histogram[letter]\n    \n    \n    return\
    \ letter, count\n\n", "    counts = Counter()\n    \n    for letter in test:\n\
    \        counts[letter] += 1\n    \n    return counts.most_common(1)\n</cell>\n\
    <cell>\nhistogram('abracadabra')\n</cell>\n<text>\nThe above example is how we\
    \ count words using Python. Our next task is to count the number of times each\
    \ letter appears in a word given by our input string.\n\nCreate a dictionary named\
    \ letterCounter that has the key 'a'. With the key value pair {'a':1}, the key\
    \ 'a' points to one and the value 1 points to 1. To do this in code, use the following\
    \ code:\n\n\n</text>\n<cell>", "    histogram = defaultdict(int)\n    \n    \n\
    \    \n        ", "    test = test.split(' ')\n    counts = {}\n    \n    for\
    \ letter in test:\n        if letter in counts:\n            counts[letter] =\
    \ counts[letter] + 1\n        else:\n            counts[letter] = 1\n        \n\
    \    return counts\n", "    \n    \"\"\"\n    Write your code here\n    \"\"\"\
    \n    histogram = {}\n    letters = list(test)\n    for l in letters:\n      \
    \  if l in histogram:\n            histogram[l] += 1\n        else:\n        \
    \    histogram[l] = 1\n    return histogram\n", "    histogram = {}\n    counts\
    \ = {}\n    for i in test:\n        if i in histogram:\n            histogram[i]\
    \ += 1\n        else:\n            histogram[i] = 1\n        if i in counts:\n\
    \            counts[i] += 1\n        else:\n            counts[i] = 1\n    \n\
    \    max = 0\n    maxLetter = \"\"\n    for i in histogram:\n        if histogram[i]\
    \ > max:\n            max = histogram[i]\n            maxLetter = i\n    return\
    \ {\"max\": max, \"letter\": maxLetter, \"count\": histogram[maxLetter]}\n\n",
  "    counts = {}\n    for i in test:\n        counts[i] = counts.get(i, 0) + 1\n\
    \    if counts:\n        max_count = max(counts.values())\n        return {k:\
    \ counts[k] for k in counts if counts[k] == max_count}\n    else:\n        return\
    \ {}\n    \n</cell>\n<cell>\nhistogram(\"abaa bbbc cccc dddc abbb aabb\")\n</cell>\n\
    <text>\nExercise 3: Write a function that takes two lists and returns true if\
    \ they have the same length and if every element in the first list is the same\
    \ as the corresponding element in the second list\n\n\n</text>\n<cell>", "   \
    \ histogram = {}\n\n    # Count the number of occurrences of each character\n\
    \    for char in test:\n        if char not in histogram:\n            histogram[char]\
    \ = 1\n        else:\n            histogram[char] += 1\n\n    # Return the letter\
    \ with the highest count\n    return histogram\n", "    letters = {}\n    \n \
    \   for letter in test:\n        if letter in letters.keys():\n            letters[letter]\
    \ += 1\n        else:\n            letters[letter] = 1\n    return letters\n",
  "    letters = {}\n    letter_counts = Counter(test).most_common()\n    \n    for\
    \ letter, count in letter_counts:\n        letters[letter] = count\n        \n\
    \    return letters\n", "    \n    # Your code here\n    letters_count = Counter()\n\
    \    \n    for letter in test:\n        letters_count[letter] += 1\n    \n   \
    \ return letters_count.most_common(1)\n</cell>\n<cell>\ntest_input = 'bt bt bt\
    \ bb bb bb bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt\
    \ bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt bt b", "    pass\n\
    </cell>\n<cell>\nhistogram(\"a b c a b c a b c d e f g h i k l m n o p q r s s\
    \ t\")\n</cell>\n<cell>\nhistogram(\"a b c d e f g h i k l m n o p q r s s t s\"\
    )\n</cell>\n<text>\nImplement a function to split a string into a list of characters,\
    \ where all consecutive characters are grouped together.\nExample:\n'a' -> ['a']\n\
    'aaa' -> ['aaa']\n'abc' -> ['abc', 'ab']\n'aabbcc' -> ['aabbcc', 'aabc', 'b']\n\
    'a' -> ['a']\n'aba' -> ['aba', 'b']\n'abba' -> ['abba']\n\n\n</text>\n<cell>",
  "    freq = {}\n    for c in test:\n        if c in freq:\n            freq[c] +=\
    \ 1\n        else:\n            freq[c] = 1\n    \n    \n    freq = {k: v for\
    \ k, v in sorted(freq.items(), reverse=True, key=lambda item: item[1])}\n    \n\
    \    return freq\n</cell>\n<cell>", "    return {\"A\":0, \"B\":1, \"C\":2, \"\
    D\":3, \"E\":4, \"F\":5, \"G\":6, \"H\":7, \"I\":8, \"J\":9, \"K\":10, \"L\":11,\
    \ \"M\":12, \"N\":13, \"O\":14, \"P\":15, \"Q\":16, \"R\":17, \"S\":18, \"T\"\
    :19, \"U\":20, \"V\":21, \"W\":22, \"X\":23, \"Y\":24, \"Z\":25}\n", "    letters\
    \ = {}\n    letters_set = set()\n    letters_set.add(test)\n    \n    letters_set.add('e')\n\
    \    letters_set.add('d')\n    letters_set.add('c')\n    letters_set.add('b')\n\
    \    letters_set.add('a')\n    \n    letters_set.add('o')\n    letters_set.add('n')\n\
    \    letters_set.add('p')\n    letters_set.add('q')\n    \n    letters_set.add('i')\n\
    \    letters_set.add('x')\n    letters_set.add('j')\n    letters_set.add('l')\n\
    \    letters_set.add('m')\n    \n    letters_set.add('u')\n    letters_set.add('z')\n\
    \    letters_set.add('r')\n    letters_set.add('w')\n    letters_set.add('v')\n\
    \    \n    letters_set.add('y')\n    letters_set.add('t')\n    letters_set.add('k')\n\
    \    letters_set.add('g')\n    letters_set.add('o')\n    letters_set.add('n')\n\
    \    \n    letters_set.add('p')\n    letters_set.add('v')\n    letters_set.add('k')\n\
    \    letters_set.add('r')\n    letters_set.add('q')\n    letters_set.add('o')\n\
    \    letters_set.add('g')\n    letters_set.add('j')\n    \n    letters_set.add('s')\n\
    \    letters_set.add('h')\n    letters_set.add('u')\n    letters_set.add('d')\n\
    \    letters_set.add('t')\n    \n    letters_set.add('h')\n    letters_set.add('w')\n\
    \    letters_set.add('v')\n    letters_set.add('r')\n    letters_set.add('q')\n\
    \    letters_set.add('o')\n    letters_set.add('n')\n    letters_set.add('d')\n\
    \    letters_set.add('c')\n    \n    letters_set.add('a')\n    letters_set.add('n')\n\
    \    letters_set.add('g')\n    letters_set.add('f')\n    letters_set.add('e')\n\
    \    letters_set.add('d')\n    letters_set.add('c')\n    letters_set.add('b')\n\
    \    \n    letter", "    \n    histogram = defaultdict(int)\n    \n    letters\
    \ = test.split()\n    \n    for letter in letters:\n        histogram[letter]\
    \ += 1\n    \n    return histogram\n\n", "    # Your code here\n", "    return\
    \ {\n        \"x\": 5,\n        \"y\": 1,\n        \"z\": 5,\n        \"a\": 10,\n\
    \        \"b\": 10,\n        \"c\": 10,\n        \"d\": 5,\n        \"e\": 5\n\
    \    }\n    \n</cell>\n<text>\nExercise 7\nWrite a function that takes a text\
    \ file as input. Return the number of words in the file.\nRemember to handle errors\
    \ when a file does not exist.\n\n</text>\n<cell>", "    histogram = {}\n    \n\
    \    # Count letters\n    letters_count = Counter(test)\n    \n    # Filter letters\
    \ that have less than 3 repetitions\n    letters_count = letters_count.most_common()\n\
    \    \n    # Print the letter with the most occurrences\n    for letter, count\
    \ in letters_count:\n        if count >= 3:\n            histogram[letter] = count\n\
    \    \n    # Print all letters that have a frequency of less than 3\n    for letter\
    \ in histogram:\n        if histogram[letter] >= 3:\n            print(letter,\
    \ histogram[letter])\n    \n    return histogram\n</cell>\n<cell>\nhistogram('a\
    \ b c a b c d')\n</cell>\n<text>\nExercise 5\nRewrite the histogram function with\
    \ two arguments: a string and a set of letters.\nThe function must return a new\
    \ dictionary with the same keys as the original dictionary but with the corresponding\
    \ values as the number of occurrences of those letters in the given string.\n\n\
    For instance, with the letters 'a' and 'b' in the set of letters, the histogram\
    \ of the string \"aba\" should look like:\n\n{'a': 2, 'b': 3}\n\n</text>\n<text>\n\
    Solution\n\n</text>\n<cell>", "    count = {}\n    for letter in test:\n     \
    \   if letter in count:\n            count[letter] += 1\n        else:\n     \
    \       count[letter] = 1\n    \n    return count\n</cell>\n<cell>", "    count_dict\
    \ = {}\n    for letter in test:\n        if letter in count_dict:\n          \
    \  count_dict[letter] += 1\n        else:\n            count_dict[letter] = 1\n\
    \    \n    return count_dict\n", "    \n    # your code here\n    histogram =\
    \ {}\n    for c in test:\n        if c in histogram:\n            histogram[c]\
    \ += 1\n        else:\n            histogram[c] = 1\n    \n    return histogram\n\
    </cell>\n<text>\nSolution\n\n</text>\n<cell>\nhistogram(\"abc de\")\n</cell>\n\
    <cell>\nhistogram(\"abcde fgh hij klmnopqrst uvwxyz\")\n</cell>\n<cell>\nhistogram(\"\
    abbcccdddddddeee\")\n</cell>\n<text>\nPart 2\nWrite a function named isPalindrome\
    \ that takes one parameter and returns True if the parameter is a palindrome,\
    \ and False otherwise.\n\nExample: isPalindrome(\"abc\") \u2192 True\nisPalindrome(\"\
    nop\") \u2192 False\n\nHint: You can use the count method to check the occurrence\
    \ of a letter in a string. The string module has a method called count that returns\
    \ the number of times a letter is in a string.\n\n\n</text>\n<cell>", "    letters\
    \ = test.split(' ')\n    count = {}\n    \n    for letter in letters:\n      \
    \  count[letter] = count.get(letter, 0) + 1\n    return count\n", "    result\
    \ = {}\n\n    for i in test:\n        if i in result:\n            result[i] +=\
    \ 1\n        else:\n            result[i] = 1\n    return result\n    ", "   \
    \ chars = Counter(test)\n    return dict(sorted(chars.items(), key=lambda item:\
    \ item[1], reverse=True)) \n", "    dic = {}\n    for letter in test:\n      \
    \  if letter in dic:\n            dic[letter] += 1\n        else:\n          \
    \  dic[letter] = 1\n    return dic\n    ", "    letters = {}\n    for letter in\
    \ test:\n        if letter in letters:\n            letters[letter] += 1\n   \
    \     else:\n            letters[letter] = 1\n    return letters\n", "    histo\
    \ = {}\n    letters = test.split()\n    \n    for letter in letters:\n       \
    \ if letter in histo:\n            histo[letter] += 1\n        else:\n       \
    \     histo[letter] = 1\n    return histo\n", "    letters_histogram = {}\n  \
    \  \n    if len(test) > 1:\n        letters = test.split()\n        \n       \
    \ for i in letters:\n            if i not in letters_histogram:\n            \
    \    letters_histogram[i] = 1\n            else:\n                letters_histogram[i]\
    \ += 1\n    else:\n        letters = test.lower().split()\n        \n        for\
    \ i in letters:\n            if i not in letters_histogram:\n                letters_histogram[i]\
    \ = 1\n            else:\n                letters_histogram[i] += 1\n    return\
    \ letters_histogram\n", "    pass\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
