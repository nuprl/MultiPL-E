language: py
name: HumanEval_61_correct_bracketing
results:
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '')\n    brackets = brackets.replace(')', '')\n    brackets\
    \ = brackets.replace('[]', '')\n    brackets = brackets.replace('{}', '')\n  \
    \  brackets = brackets.replace('<>', '')\n    brackets = brackets.replace('{}{}',\
    \ '')\n    brackets = brackets.replace('{}<>', '')\n    if brackets == '<>':\n\
    \        return True\n    elif brackets == '()':\n        return True\n    elif\
    \ brackets == '[]':\n        return True\n    elif brackets == '{}':\n       \
    \ return True\n    elif brackets == '{}{}':\n        return True\n    elif brackets\
    \ == '{}<>':\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjgzf1e41.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpjgzf1e41.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjgzf1e41.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \" ( \")\n    brackets = brackets.replace(\")\", \"\
    \ ) \")\n    brackets = brackets.replace(\"{\", \"  { \")\n    brackets = brackets.replace(\"\
    }\", \"  } \")\n    brackets = brackets.replace(\"[\", \"[ [ \")\n    brackets\
    \ = brackets.replace(\"]\", \"] ] \")\n    return brackets == brackets.strip()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo16q7_cy.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpo16q7_cy.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpo16q7_cy.py\"\
    , line 16, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_to_find\
    \ = set(brackets)\n    for bracket in brackets:\n        if bracket not in brackets_to_find:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjbeboikp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpjbeboikp.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjbeboikp.py\"\
    , line 18, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets\
    \ != \"\":\n        if brackets[0] != \"(\":\n            return False\n     \
    \   if brackets[-1] != \")\":\n            return False\n        return correct_bracketing(brackets[1:-1])\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc22xr7nf.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpc22xr7nf.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc22xr7nf.py\"\
    , line 17, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = 0\n\
    \    for c in brackets:\n        if c == '(':\n            stack += 1\n      \
    \  if c == ')':\n            stack -= 1\n            if stack < 0:\n         \
    \       return False\n    return stack == 0\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count('(')\n    closing = brackets.count(')')\n    if opening + closing\
    \ == 0:\n        return True\n    elif opening == 0 and closing > 0:\n       \
    \ return True\n    else:\n        return False\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph2k4iuyd.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmph2k4iuyd.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph2k4iuyd.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    for i, c in enumerate(brackets):\n        if c == \"(\":\n            if\
    \ brackets[i + 1] == \")\":\n                count += 1\n            else:\n \
    \               return False\n    return count == len(brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpn6dvh8wb.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpn6dvh8wb.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpn6dvh8wb.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"[\", \"\").replace(\"]\", \"\")\n\n    if brackets not in\
    \ \"()\":\n        return False\n    stack = []\n    last = -1\n    for c in brackets:\n\
    \        if c == \"(\":\n            stack.append(c)\n        elif c == \")\"\
    :\n            top = stack.pop()\n            if top != c:\n                return\
    \ False\n            else:\n                last = top\n    return stack == []\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgz930lsb.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmpgz930lsb.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgz930lsb.py\"\
    , line 25, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets[0]\
    \ != brackets[-1]:\n        return False\n    for i, char in enumerate(brackets):\n\
    \        if char == '(':\n            if not brackets[i + 1] == ')':\n       \
    \         return False\n        elif char == ')':\n            if not brackets[i\
    \ - 1] == '(':\n                return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkxuorc5p.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkxuorc5p.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkxuorc5p.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for bracket\
    \ in brackets:\n        if bracket != bracket[0]:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplbcxohbg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmplbcxohbg.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplbcxohbg.py\"\
    , line 17, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_open\
    \ = brackets.count('(')\n    brackets_close = brackets.count(')')\n    if brackets_open\
    \ != brackets_close:\n        return False\n    else:\n        return True\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ulw13jx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2ulw13jx.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2ulw13jx.py\"\
    , line 20, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_brackets\
    \ = [c for c in brackets if c == \"(\"]\n    close_brackets = [c for c in brackets\
    \ if c == \")\"]\n    return len(close_brackets) == len(open_brackets)\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr65r7h04.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpr65r7h04.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr65r7h04.py\"\
    , line 17, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '')\n    brackets = brackets.replace(')', '')\n    brackets\
    \ = brackets.split(',')\n    for b in brackets:\n        if b[0] != '(' and b\
    \ != ')':\n            return False\n        if b == '(' and b != ')':\n     \
    \       return False\n        if b == ')' and b != ')':\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ta41m38.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6ta41m38.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6ta41m38.py\"\
    , line 20, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp6ta41m38.py\"\
    , line 10, in correct_bracketing\n    if b[0] != '(' and b != ')':\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            else:\n                last_open_bracket = stack.pop()\n\
    \                if last_open_bracket != \"(\":\n                    return False\n\
    \        else:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpupojiuay.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpupojiuay.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpupojiuay.py\"\
    , line 29, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count(\"(\")\n    closing = brackets.count(\")\")\n    if closing >\
    \ opening:\n        pairings = {brackets[i]:brackets[i+1] for i in range(0,len(brackets)-1)}\n\
    \        return all([(opening*closing)==pairings.get(b,0) for b in brackets])\n\
    \    else:\n        return False\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_4xy6tw.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpj_4xy6tw.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj_4xy6tw.py\"\
    , line 15, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_set\
    \ = set()\n    closing_set = set()\n    for char in brackets:\n        if char\
    \ == \"(\":\n            opening_set.add(char)\n        if char == \")\":\n  \
    \          closing_set.add(char)\n\n    if opening_set.issubset(closing_set):\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoqc4uawx.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpoqc4uawx.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoqc4uawx.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = deque()\n\
    \    for index, char in enumerate(brackets):\n        if char == \"(\":\n    \
    \        stack.append(index)\n        if char == \")\":\n            if not stack:\n\
    \                return False\n            else:\n                last_index =\
    \ stack.pop()\n                if index != last_index:\n                    return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0blkhim0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp0blkhim0.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0blkhim0.py\"\
    , line 20, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp0blkhim0.py\"\
    , line 6, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = [char for char in brackets if char == '(']\n    closing_brackets = [char for\
    \ char in brackets if char == ')']\n    pairs = len(opening_brackets) / len(closing_brackets)\n\
    \    matches = len(opening_brackets) - len(closing_brackets)\n    return pairs%2==0\
    \ and matches == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpue3n12v7.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpue3n12v7.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpue3n12v7.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            brackets_stack.append(char)\n\
    \        elif char == \")\":\n            if brackets_stack.pop() != char:\n \
    \               return False\n    return not brackets_stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbrn1qq7d.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpbrn1qq7d.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbrn1qq7d.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_map\
    \ = {'(': ')', '[': ']', '{': '}'}\n\n    open_brackets = [pos for pos, char in\
    \ enumerate(brackets) if char in brackets_map.keys()]\n    close_brackets = [pos\
    \ for pos, char in enumerate(brackets) if char in brackets_map.values()]\n\n \
    \   return len(open_brackets) == len(close_brackets)\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp5e9a_vf.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpp5e9a_vf.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp5e9a_vf.py\"\
    , line 20, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    for c in brackets:\n        if c == '(':\n            count += 1\n      \
    \  else:\n            count -= 1\n        if count < 0:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4r3tc2m_.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp4r3tc2m_.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4r3tc2m_.py\"\
    , line 24, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_brackets\
    \ = {\")\", \"}\", \"]\"}\n    close_brackets = {\"(\", \")\", \"[\", \"]\"}\n\
    \    for bracket in brackets:\n        if bracket not in close_brackets and bracket\
    \ not in open_brackets:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2gqptdj2.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp2gqptdj2.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2gqptdj2.py\"\
    , line 19, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \" \")\n    brackets = brackets.replace(\")\", \" \"\
    )\n    brackets = brackets.replace(\",\", \" \")\n    brackets = brackets.split()\n\
    \    brackets = [\n        bracket for bracket in brackets if \"(\" in bracket\
    \ or \")\" in bracket\n    ]\n    for bracket in brackets:\n        stack = []\n\
    \        for index, element in enumerate(bracket):\n            if element ==\
    \ \"(\":\n                stack.append(index)\n            if element == \")\"\
    :\n                try:\n                    next_index = stack.pop()\n      \
    \          except IndexError:\n                    return False\n            \
    \    else:\n                    if bracket[index + 1] != \"(\":\n            \
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxjimkdu6.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpxjimkdu6.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxjimkdu6.py\"\
    , line 34, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    if brackets[0] == brackets[1]:\n        return\
    \ False\n    stack = []\n    for bracket in brackets:\n        if bracket == \"\
    (\":\n            stack.append(bracket)\n        elif bracket == \")\":\n    \
    \        if not stack:\n                return False\n            if stack.pop()\
    \ != bracket:\n                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkfnj5n0n.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkfnj5n0n.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkfnj5n0n.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for symbol\
    \ in brackets:\n        if symbol != ')' and symbol != '(':\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2xykd2q3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp2xykd2q3.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2xykd2q3.py\"\
    , line 17, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for index, char in enumerate(brackets):\n        if char == '(':\n      \
    \      stack.append(index)\n        elif char == ')':\n            if len(stack)\
    \ == 0:\n                return False\n            top = stack.pop()\n       \
    \     if top != index - 1:\n                return False\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpcct0fs_4.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpcct0fs_4.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpcct0fs_4.py\"\
    , line 21, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            if stack.pop() != \"(\":\n                return False\n\
    \        elif c not in \",.\":\n            return False\n    if len(stack) >\
    \ 0:\n        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets.count(\"\
    (\") != brackets.count(\")\"):\n        return False\n    if brackets.count(\"\
    (\") != brackets.count(\"[\"):\n        return False\n    if brackets.count(\"\
    [\") != brackets.count(\"]\"):\n        return False\n    if brackets.count(\"\
    (\") != brackets.count(\"{\"):\n        return False\n    if brackets.count(\"\
    {\") != brackets.count(\"}\"):\n        return False\n    if brackets.count(\"\
    (\") != brackets.count(\"<\"):\n        return False\n    if brackets.count(\"\
    <\") != brackets.count(\">\"):\n        return False\n    if brackets.count(\"\
    >\") != brackets.count(\")\"):\n        return False\n    if brackets.count(\"\
    )\") != brackets.count(\"]\"):\n        return False\n    if brackets.count(\"\
    ]\") != brackets.count(\"}\"):\n        return False\n    if brackets.count(\"\
    }\") != brackets.count(\">\"):\n        return False\n    if brackets.count(\"\
    >\") != brackets.count(\"=\"):\n        return False\n    if brackets.count(\"\
    =\") != brackets.count(\"<\"):\n        return False\n    if brackets.count(\"\
    <\") != brackets.count(\"(\"):\n        return False\n    if brackets.count(\"\
    <\") != brackets.count(\"[\"):\n        return False\n    if brackets.count(\"\
    [\") != brackets.count(\"=\"):\n        return False\n    if brackets.count(\"\
    =\") != brackets.count(\"{\"):\n        return False\n    if brackets.count(\"\
    {\") != brackets.count(\"=\"):\n        return False\n    if brackets.count(\"\
    =\") != brackets.count(\"(\"):\n        return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdr2t1v75.py\", line\
    \ 64, in <module>\n    test_check()\n  File \"/tmp/tmpdr2t1v75.py\", line 62,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdr2t1v75.py\"\
    , line 48, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            if stack.pop() != \")\":\n                return False\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkh3xajgi.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpkh3xajgi.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkh3xajgi.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        if c == \")\":\n            if not stack:\n                return False\n\
    \            stack.pop()\n    return not stack\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = {x for x in brackets if x == '('}\n    closing_brackets = {x for x in brackets\
    \ if x == ')'}\n    return len(opening_brackets & closing_brackets) == 0\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf8lmwykn.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpf8lmwykn.py\", line 25,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf8lmwykn.py\"\
    , line 15, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_count\
    \ = brackets.count('(')\n    correct_count = 0\n    for bracket in brackets:\n\
    \        if bracket == '(':\n            correct_count += 1\n        if bracket\
    \ == ')':\n            correct_count -= 1\n        if correct_count < 0:\n   \
    \         return False\n    return correct_count == brackets_count\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0e_q5ewe.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp0e_q5ewe.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0e_q5ewe.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == \"(\":\n            stack.append(c)\n\
    \        elif c == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for bracket\
    \ in brackets:\n        if bracket != ')' and bracket != '(':\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnah9v5x3.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnah9v5x3.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnah9v5x3.py\"\
    , line 17, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  while i < len(brackets):\n        if brackets[i] == \"(\":\n            if\
    \ not i_bracket(brackets, i):\n                return False\n            i = i\
    \ + 2\n        elif brackets[i] == \")\":\n            if not i_bracket(brackets,\
    \ i):\n                return False\n            i = i - 1\n        else:\n  \
    \          return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmprwkabws7.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmprwkabws7.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmprwkabws7.py\"\
    , line 21, in check\n    assert candidate('()') == True\n  File \"/tmp/tmprwkabws7.py\"\
    , line 9, in correct_bracketing\n    if not i_bracket(brackets, i):\nNameError:\
    \ name 'i_bracket' is not defined. Did you mean: 'brackets'?\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = deque()\n\
    \    stack.append((brackets, 0))\n\n    while stack:\n        open_bracket, i\
    \ = stack.pop()\n\n        if open_bracket == \"(\":\n            while i < len(brackets):\n\
    \                if brackets[i] == \"(\":\n                    stack.append((brackets[i\
    \ + 1:], i + 1))\n                    break\n                i += 1\n\n      \
    \  if open_bracket == \")\":\n            while i < len(brackets):\n         \
    \       if brackets[i] == \")\":\n                    stack.append((brackets[i\
    \ + 1:], i + 1))\n                    break\n                i += 1\n\n    return\
    \ len(stack) == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpmznn0mgo.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpmznn0mgo.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpmznn0mgo.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpmznn0mgo.py\"\
    , line 6, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    brackets_stack = []\n    index = 0\n    mismatches\
    \ = 0\n    while index < len(brackets):\n        # current opening bracket\n \
    \       c = brackets[index]\n        if c == \"(\":\n            brackets_stack.append(c)\n\
    \        elif c == \")\" and len(brackets_stack) > 0:\n            brackets_stack.pop()\n\
    \        else:\n            mismatches += 1\n        index += 1\n\n    # all brackets\
    \ are balanced\n    if mismatches == len(brackets):\n        return True\n   \
    \ return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgl0f9m_1.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpgl0f9m_1.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgl0f9m_1.py\"\
    , line 29, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = list()\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            bracket = stack.pop()\n        else:\n       \
    \     return False\n\n    return True\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasprvq4z.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpasprvq4z.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpasprvq4z.py\"\
    , line 26, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_brackets\
    \ = brackets.count('(')\n    close_brackets = brackets.count(')')\n    if close_brackets\
    \ < open_brackets:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk77mp3h4.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpk77mp3h4.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk77mp3h4.py\"\
    , line 14, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets\
    \ == ')':\n        return True\n    elif brackets == '(':\n        return False\n\
    \    else:\n        if brackets[-1] != ')':\n            raise AssertionError\n\
    \        else:\n            return correct_bracketing(brackets[:-1])  # remove\
    \ last bracket\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkknbinnz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpkknbinnz.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkknbinnz.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            if not stack:\n\
    \                return False\n            else:\n                stack.append(char)\n\
    \        if char == ')':\n            if not stack:\n                return False\n\
    \            else:\n                stack.pop()\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx_ke2ueg.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpx_ke2ueg.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpx_ke2ueg.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ [bracket for bracket in brackets]\n    stack = []\n    for bracket in brackets:\n\
    \        if bracket == \"(\":\n            stack.append(\"(\")\n        if bracket\
    \ == \")\":\n            if len(stack) == 0:\n                return False\n \
    \           else:\n                stack.pop()\n    return len(stack) == 0\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                if stack.pop() != '(':\n         \
    \           return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp589cwszp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp589cwszp.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp589cwszp.py\"\
    , line 26, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    stack_p = Stack()\n    for bracket in brackets_set:\n\
    \        if bracket == \"(\":\n            stack.append(bracket)\n           \
    \ stack_p = stack_p.push(stack)\n        if bracket == \")\":\n            stack.pop()\n\
    \    return stack_p.isEmpty()\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplvk3qaly.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmplvk3qaly.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplvk3qaly.py\"\
    , line 18, in check\n    assert candidate('()') == True\n  File \"/tmp/tmplvk3qaly.py\"\
    , line 8, in correct_bracketing\n    stack_p = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"( \")\n    brackets = brackets.replace(\")\", \" )\"\
    )\n    brackets = brackets.replace(\"[\", \"[ \")\n    brackets = brackets.replace(\"\
    ]\", \" ]\")\n    brackets = brackets.replace(\"{\", \"{ \")\n    brackets = brackets.replace(\"\
    }\", \"} \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets =\
    \ brackets.replace(\";\", \"; \")\n    brackets = brackets.replace(\"\\t\", \"\
    \ \")\n    brackets = brackets.replace(\"\\n\", \"\\n\")\n    return brackets.startswith(\"\
    ( \") and brackets.endswith(\") \")\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdzs909vr.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpdzs909vr.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdzs909vr.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    open_count = len(brackets.split(\"(\"))\n    close_count\
    \ = len(brackets.split(\")\"))\n\n    if open_count == close_count:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsp_wdwm_.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpsp_wdwm_.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsp_wdwm_.py\"\
    , line 22, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets.count('(')\
    \ != brackets.count(')'):\n        return False\n    brackets = [brackets[i] for\
    \ i in range(len(brackets)) if brackets[i] == '(' or brackets[i] == '\\'']\n \
    \   for i in range(1, len(brackets)):\n        if brackets[i] != brackets[i -\
    \ 1]:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9irtmzki.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp9irtmzki.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9irtmzki.py\"\
    , line 21, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets.count('(')\
    \ != brackets.count(')'):\n        print(\"brackets string contains different\
    \ numbers of '(' and '\n              \"')'s\")\n        return False\n\n    stack\
    \ = []\n    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        else:\n            open_bracket = stack.pop()\n            if open_bracket\
    \ != ')':\n                return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpg4ru6q7v.py\", line 7\n    print(\"brackets string contains\
    \ different numbers of '(' and '\n          ^\nSyntaxError: unterminated string\
    \ literal (detected at line 7)\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets[0]\
    \ == brackets[-1] == \"(\":\n        return False\n    for opening in brackets:\n\
    \        if opening not in brackets:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp185kcclz.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp185kcclz.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp185kcclz.py\"\
    , line 19, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = deque()\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if not stack:\n                return\
    \ False\n            opening = stack.pop()\n            if opening != bracket:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps3o6yrf0.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmps3o6yrf0.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmps3o6yrf0.py\"\
    , line 20, in check\n    assert candidate('()') == True\n  File \"/tmp/tmps3o6yrf0.py\"\
    , line 6, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    num_open_brackets\
    \ = brackets.count(\"(\")\n    num_closed_brackets = brackets.count(\")\")\n\n\
    \    if num_open_brackets > 0:\n        right_bracket = brackets[brackets.find(\"\
    (\"):]\n        left_bracket = brackets[:brackets.find(\"(\")]\n        return\
    \ right_bracket.islower() and left_bracket.isupper()\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmporh0bl0k.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmporh0bl0k.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmporh0bl0k.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    opening_brackets = {c for c in brackets if c == \"(\" or c == \")\"}\n  \
    \  closing_brackets = {c for c in brackets if c == \")\" or c == \"(\"}\n    for\
    \ opening_bracket in opening_brackets:\n        stack.append(opening_bracket)\n\
    \    while len(stack) > 0:\n        current_bracket = stack.pop()\n        for\
    \ closing_parenthesis in closing_brackets:\n            if closing_parenthesis\
    \ == current_bracket:\n                stack.append(closing_parenthesis)\n   \
    \     if len(stack) == 0:\n            return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659823142
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count('(')\n    closing = brackets.count(')')\n    if opening == 0\
    \ and closing == 0: return True\n    return closing > opening or closing == 0\
    \ and opening > closing\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnfqp06hg.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpnfqp06hg.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnfqp06hg.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  while i < len(brackets):\n        if brackets[i] == '(':\n            while\
    \ i < len(brackets) and brackets[i] != '(':\n                i += 1\n        \
    \    if i == len(brackets):\n                return False\n            i += 1\n\
    \        elif brackets[i] == ')':\n            while i < len(brackets) and brackets[i]\
    \ != ')':\n                i += 1\n            if i == len(brackets):\n      \
    \          return False\n            i += 1\n        else:\n            return\
    \ False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjm6509h1.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmpjm6509h1.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjm6509h1.py\"\
    , line 30, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    left_bracket = brackets[0]\n    right_bracket\
    \ = brackets[1]\n    if (left_bracket == right_bracket):\n        return True\n\
    \    elif left_bracket == '(':\n        return right_bracket == ')'\n    return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpm3b28z4z.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpm3b28z4z.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpm3b28z4z.py\"\
    , line 19, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    bracket_stack\
    \ = []\n    for i, c in enumerate(brackets):\n        if c == \"(\":\n       \
    \     bracket_stack.append(i)\n        elif c == \")\":\n            if not bracket_stack:\n\
    \                return False\n            popped_index = bracket_stack.pop()\n\
    \            popped_bracket = brackets[popped_index]\n            if popped_bracket\
    \ != \"(\":\n                return False\n    return not bracket_stack\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_list\
    \ = brackets.replace('(', '').split()\n    brackets_list = list(map(_char_to_int,\
    \ brackets_list))\n    brackets_dict = {\n        '(': ')',\n        '[': ']',\n\
    \        '{': '}'\n    }\n\n    change = True\n    for opening, closing in brackets_dict.items():\n\
    \        if opening != closing:\n            change = False\n    return change\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp76sxh_pj.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp76sxh_pj.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp76sxh_pj.py\"\
    , line 22, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp76sxh_pj.py\"\
    , line 7, in correct_bracketing\n    brackets_list = list(map(_char_to_int, brackets_list))\n\
    NameError: name '_char_to_int' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_counts\
    \ = collections.Counter(brackets)\n    close_counts = collections.Counter(pair\
    \ for opening, closing in brackets.split(\")(\"))\n    count = 0\n    for opening\
    \ in open_counts:\n        if opening != pair:\n            count += 1\n    return\
    \ count == len(brackets.split(\")(\"))\n            \ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vigqa98.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp0vigqa98.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0vigqa98.py\"\
    , line 15, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp0vigqa98.py\"\
    , line 6, in correct_bracketing\n    open_counts = collections.Counter(brackets)\n\
    NameError: name 'collections' is not defined\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    for char in brackets:\n        if char == \"(\":\n            count += 1\n\
    \        elif char == \")\":\n            count -= 1\n        else:\n        \
    \    return False\n\n    return count > 0\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppq9syb0m.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmppq9syb0m.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppq9syb0m.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    counts = brackets.count(\"\
    (\") - brackets.count(\")\")\n    if counts < 0:\n        return False\n    if\
    \ counts > 0:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphn7ayb3m.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmphn7ayb3m.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphn7ayb3m.py\"\
    , line 15, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    return brackets.count(\"(\") == brackets.count(\"\
    )\")\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeu_w77h0.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpeu_w77h0.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpeu_w77h0.py\"\
    , line 13, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    def match(left,\
    \ right):\n        \"\"\" match parentheses \"\"\"\n        return (left == '('\
    \ and right == ')') or\\\n               (left == '[' and right == ']') or\\\n\
    \               (left == '{' and right == '}')\n    stack = []\n    for char in\
    \ brackets:\n        if char == '(':\n            if not stack:\n            \
    \    return False\n            stack.pop()\n        elif char == ')':\n      \
    \      if not stack:\n                return False\n            top = stack.pop()\n\
    \            if top != '(':\n                return False\n        elif char ==\
    \ '[':\n            if not stack:\n                return False\n            stack.append('[')\n\
    \        elif char == ']':\n            if not stack:\n                return\
    \ False\n            top = stack.pop()\n            if top[-1] != '[':\n     \
    \           return False\n        elif char == '{':\n            if not stack:\n\
    \                return False\n            stack.append('{')\n        elif char\
    \ == '}':\n            if not stack:\n                return False\n         \
    \   top = stack.pop()\n            if top[-1] != '{':\n                return\
    \ False\n        else:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl0h2bsg7.py\", line\
    \ 65, in <module>\n    test_check()\n  File \"/tmp/tmpl0h2bsg7.py\", line 63,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl0h2bsg7.py\"\
    , line 49, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    opening_brackets =\
    \ opening_brackets.split(\", \")\n    \n    closing_brackets = []\n    for opening_bracket\
    \ in opening_brackets:\n        closing_brackets.append(brackets.replace(\"(\"\
    \ + opening_bracket, \"\").replace(\")\" + opening_bracket, \"\"))\n    \n   \
    \ return not any(brackets.replace(bracket, \"\") in brackets for brackets in closing_brackets)\n\
    \nprint(correct_bracketing(\"(hello(world)\"))\nprint(correct_bracketing(\"(hello)(world)\"\
    ))\nprint(correct_bracketing(\"(hello)\"))\nprint(correct_bracketing(\"(hello)(world)(again)\"\
    ))\nprint(correct_bracketing(\"(hello)(world))\"))\n</cell>\n<text>\nQuestion\
    \ 7\nUsing a function which receives brackets and returns a list of brackets which\
    \ have the same number of opening brackets and the same number of closing brackets.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn0pvrjmk.py\", line 20\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    stack = []\n    pos = 0\n    for ch in brackets:\n\
    \        if ch == \"(\":\n            stack.append(ch)\n        else:\n      \
    \      if stack:\n                if ch == stack.pop():\n                    pos\
    \ += 1\n                else:\n                    return False\n            else:\n\
    \                return False\n    if stack:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmphlrwwlyf.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmphlrwwlyf.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmphlrwwlyf.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"\").replace(\")\", \"\")\n    brackets_set = set(brackets)\n\
    \    if len(brackets_set) > 0:\n        for bracket in brackets_set:\n       \
    \     if bracket != \"(\" and bracket != \")\":\n                return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppw53r3p3.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmppw53r3p3.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppw53r3p3.py\"\
    , line 20, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_paren\
    \ = 0\n    close_paren = 0\n    for char in brackets:\n        if char == '(':\n\
    \            open_paren += 1\n        if char == ')':\n            close_paren\
    \ += 1\n\n    if open_paren != close_paren:\n        return False\n    return\
    \ True\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgalom0xn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpgalom0xn.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgalom0xn.py\"\
    , line 24, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count(\"(\")\n    closing = brackets.count(\")\")\n    if opening >\
    \ closing:\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9yvb7u7g.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp9yvb7u7g.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9yvb7u7g.py\"\
    , line 15, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for opening,\
    \ closing in ((brackets[0], brackets[1]),\n                            (brackets[2],\
    \ brackets[3]),\n                            (brackets[4], brackets[5]),\n   \
    \                         (brackets[6], brackets[7]),\n                      \
    \      (brackets[8], brackets[9]),\n                            (brackets[10],\
    \ brackets[11]),\n                            (brackets[12], brackets[13]),\n\
    \                            (brackets[14], brackets[15])):\n        if opening\
    \ != closing:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj_6tn51t.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpj_6tn51t.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj_6tn51t.py\"\
    , line 20, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpj_6tn51t.py\"\
    , line 7, in correct_bracketing\n    (brackets[2], brackets[3]),\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    open_brackets = {'(': 0, '[': 0, '{': 0}\n    close_brackets = {')': 0, ']':\
    \ 0, '}': 0}\n\n    correct_bracketing = False\n\n    for char in brackets:\n\
    \        if char in open_brackets:\n            stack.append(char)\n         \
    \   open_brackets[char] += 1\n        elif char in close_brackets:\n         \
    \   if len(stack) == 0:\n                print('error: incorrect number of close\
    \ brackets')\n                correct_bracketing = False\n            else:\n\
    \                last_char = stack.pop()\n                if open_brackets[last_char]\
    \ == close_brackets[char]:\n                    open_brackets[last_char] -= 1\n\
    \                    close_brackets[char] -= 1\n                    if open_brackets[last_char]\
    \ == 0:\n                        correct_bracketing = True\n                else:\n\
    \                    print('error: incorrect number of close brackets')\n    \
    \                correct_bracketing = False\n        else:\n            print('error:\
    \ incorrect bracket')\n            correct_bracketing = False\n\n    return correct_bracketing\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpv0vt0hmx.py\", line\
    \ 54, in <module>\n    test_check()\n  File \"/tmp/tmpv0vt0hmx.py\", line 52,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpv0vt0hmx.py\"\
    , line 38, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: 'error: incorrect number of close brackets

    '
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # count brackets\n\
    \    num_open_brackets = brackets.count('(')\n    num_close_brackets = brackets.count(')')\n\
    \n    # check if both brackets are found\n    if num_open_brackets <= num_close_brackets:\n\
    \        return True\n\n    # check if there are any more brackets\n    elif num_open_brackets\
    \ > num_close_brackets:\n        return False\n\n    # check if there are more\
    \ open brackets\n    elif num_open_brackets < num_close_brackets:\n        # check\
    \ if there are any more closing brackets\n        if num_close_brackets == 0:\n\
    \            return False\n        else:\n            return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp846t0sy8.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp846t0sy8.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp846t0sy8.py\"\
    , line 32, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = Stack()\n\
    \    for char in brackets:\n        if char == '(':\n            stack.push(char)\n\
    \        elif char == ')':\n            top = stack.pop()\n            if top\
    \ != '(':\n                return False\n            else:\n                stack.pop()\n\
    \    return not len(stack) == 0\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5abtraq0.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp5abtraq0.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp5abtraq0.py\"\
    , line 19, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp5abtraq0.py\"\
    , line 6, in correct_bracketing\n    stack = Stack()\nNameError: name 'Stack'\
    \ is not defined. Did you mean: 'stack'?\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets\
    \ == '()':\n        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpibmk02a0.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpibmk02a0.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpibmk02a0.py\"\
    , line 14, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for symbol\
    \ in brackets:\n        if symbol != '(':\n            continue\n        parens_open\
    \ = brackets.count('(')\n        if parens_open != 0:\n            return False\n\
    \        parens_close = brackets.count(')')\n        if parens_close != parens_open:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpps3m2qko.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpps3m2qko.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpps3m2qko.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\")\", \")(\")\n    brackets = brackets.replace(\"(\", \"(\"\
    )\n    return brackets.count('(') == brackets.count(')')\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpq7a92rqi.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpq7a92rqi.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpq7a92rqi.py\"\
    , line 12, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = ['(',\
    \ ')']\n    for x in brackets:\n        if x not in stack:\n            return\
    \ False\n        stack.pop()\n    while stack:\n        if stack[-1] == x:\n \
    \           stack.pop()\n        else:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbhriyvkq.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpbhriyvkq.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbhriyvkq.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_dict\
    \ = {\n        '(': ')',\n        '[': ']',\n        '{': '}',\n    }\n    opening\
    \ = brackets[:1]\n    closing = brackets_dict.get(opening, None)\n    return (closing\
    \ is not None) and (closing in brackets)\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_wph2u1g.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp_wph2u1g.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_wph2u1g.py\"\
    , line 21, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = list(brackets)\n    opening_brackets.pop(0)  # remove opening bracket\n  \
    \  opening_brackets = [bracket for bracket in opening_brackets if bracket != ')']\n\
    \    for bracket in opening_brackets:\n        if bracket.endswith('('):\n   \
    \         return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqe5xc7fl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpqe5xc7fl.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqe5xc7fl.py\"\
    , line 17, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(' ', '')\n    if not brackets or brackets not in ['(', ')']:\n\
    \        return True\n    stack = []\n    for bracket in brackets:\n        if\
    \ bracket == '(':\n            stack.append('(')\n        elif bracket == ')':\n\
    \            if not stack:\n                return False\n            open_paren\
    \ = stack.pop()\n            if open_paren != '(':\n                return False\n\
    \        else:\n            if not stack:\n                return False\n    \
    \        open_bracket = stack.pop()\n            if open_bracket != bracket:\n\
    \                return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu7fklwwm.py\", line\
    \ 45, in <module>\n    test_check()\n  File \"/tmp/tmpu7fklwwm.py\", line 43,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu7fklwwm.py\"\
    , line 33, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for opening,\
    \ closing in brackets.split(\"|\"):\n        open_count, _close_count = brackets.count(opening),\
    \ brackets.count(closing)\n        if open_count == _close_count:\n          \
    \  return True\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmptzzgacxa.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmptzzgacxa.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmptzzgacxa.py\"\
    , line 15, in check\n    assert candidate('(()())') == True\n  File \"/tmp/tmptzzgacxa.py\"\
    , line 6, in correct_bracketing\n    for opening, closing in brackets.split(\"\
    |\"):\nValueError: too many values to unpack (expected 2)\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets[0]\
    \ == \")\" and brackets[1] == \"(\":\n        return True\n    else:\n       \
    \ return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp9xct01g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpp9xct01g.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp9xct01g.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # check for\
    \ opening-brackets without closing-brackets\n    opening_brackets = [bracket for\
    \ bracket in brackets if bracket == '(']\n    if not opening_brackets:\n     \
    \   return False\n\n    # check if all opening brackets have a corresponding closing\
    \ bracket\n    for opening_bracket in opening_brackets:\n        closing_brackets\
    \ = [bracket for bracket in brackets if bracket == ')']\n        if not closing_brackets:\n\
    \            return False\n\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy9jzi7zp.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpy9jzi7zp.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy9jzi7zp.py\"\
    , line 24, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    for c in brackets:\n        if c == '(':\n            count += 1\n      \
    \  elif c == ')':\n            count -= 1\n\n        if count < 0:\n         \
    \   return False\n\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp626h2vib.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp626h2vib.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp626h2vib.py\"\
    , line 26, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return set(brackets)\
    \ - {\"(\", \")\"}\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppx007qbi.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppx007qbi.py\", line 24,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppx007qbi.py\"\
    , line 10, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = list()\n\
    \    i = 0\n    while i < len(brackets):\n        c = brackets[i]\n        if\
    \ c == \"(\":\n            stack.append(c)\n        elif c == \")\":\n       \
    \     if len(stack) == 0:\n                return False\n            elif stack[-1]\
    \ == \"(\":\n                stack.pop()\n            else:\n                return\
    \ False\n        i += 1\n    if len(stack) != 0:\n        return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for bracketchar in brackets:\n        if bracketchar == '(':\n          \
    \  stack.append(bracketchar)\n        if bracketchar == ')':\n            if not\
    \ stack:\n                return False\n            elif stack.pop() != bracketchar:\n\
    \                return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqcrk4epl.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpqcrk4epl.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqcrk4epl.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # check each\
    \ opening bracket\n    for i in range(1, len(brackets)):\n        # are we looking\
    \ at the first opening bracket?\n        if brackets[i - 1] == \"(\":\n      \
    \      # are we looking at a close bracket?\n            if brackets[i] == \"\
    )\":\n                # we found a bracket!\n                return True\n\n \
    \   return False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjuhxh_pn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjuhxh_pn.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjuhxh_pn.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ \"()\"\n    open_brackets = [b for b in brackets if b == \"(\"]\n    close_brackets\
    \ = [c for c in brackets if c == \")\"]\n\n    if False in open_brackets:\n  \
    \      return False\n\n    if False in close_brackets:\n        return False\n\
    \n    return True\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpad6rfs66.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpad6rfs66.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpad6rfs66.py\"\
    , line 23, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for bracket\
    \ in brackets:\n        if bracket not in ('(', ')'):\n            raise BracketError(\"\
    brackets must have matching parentheses ('(' and ')').\")\n    return True\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdvvjofnh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdvvjofnh.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdvvjofnh.py\"\
    , line 16, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # count the\
    \ number of opening brackets\n    opening_brackets = brackets.count('(')\n\n \
    \   # count the number of closing brackets\n    closing_brackets = brackets.count(')')\n\
    \n    # check that every opening bracket has a corresponding closing bracket\n\
    \    if opening_brackets == closing_brackets:\n        return True\n    else:\n\
    \        return False\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp534v2nsh.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp534v2nsh.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp534v2nsh.py\"\
    , line 25, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_stack\
    \ = []\n    for char in brackets:\n        if char == \"(\":\n            brackets_stack.append(char)\n\
    \        elif char == \")\":\n            if len(brackets_stack) == 0:\n     \
    \           return False\n            bracket_top = brackets_stack.pop()\n   \
    \         if bracket_top != char:\n                return False\n        else:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2p8tt1ll.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp2p8tt1ll.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2p8tt1ll.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ [c for c in brackets if c in \"()\"]\n    stack = []\n    for c in brackets:\n\
    \        if c not in \"()\":\n            return False\n        if c == \"(\"\
    :\n            stack.append(c)\n        elif c == \")\":\n            if len(stack)\
    \ == 0:\n                return False\n            stack.pop()\n    if len(stack)\
    \ != 0:\n        return False\n    return True\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_open\
    \ = []\n    brackets_close = []\n    for letter in brackets:\n        if letter\
    \ == \"(\":\n            brackets_open.append(letter)\n        if letter == \"\
    )\":\n            brackets_close.append(letter)\n    if not brackets_open:\n \
    \       return True\n    elif len(brackets_open) == len(brackets_close):\n   \
    \     if len(brackets_open) == 1:\n            return True\n        else:\n  \
    \          return False\n    elif len(brackets_open) > len(brackets_close):\n\
    \        return False\n    else:\n        brackets_close.sort()\n        if len(brackets_open)\
    \ < len(brackets_close):\n            brackets_open.sort()\n            if brackets_open\
    \ == brackets_close:\n                return True\n            else:\n       \
    \         return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy23dqv11.py\", line\
    \ 49, in <module>\n    test_check()\n  File \"/tmp/tmpy23dqv11.py\", line 47,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy23dqv11.py\"\
    , line 34, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    paren_brackets\
    \ = [\"(\", \"[\", \"{\", \"<\", \">\"]\n    no_paren_brackets = [\")\", \"]\"\
    , \"}\", \":\", \":\", \",\", \".\", \"?\", \"!\"]\n    if brackets not in paren_brackets:\n\
    \        return False\n    for p in paren_brackets:\n        if brackets == p:\n\
    \            return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnuwx8ybh.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpnuwx8ybh.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnuwx8ybh.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return brackets.count('(')\
    \ == brackets.count(')')\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzkyacklq.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpzkyacklq.py\", line 24,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzkyacklq.py\"\
    , line 15, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_dict\
    \ = {')': '(', ']': '[', '}': '{', '>': '>', '}': '<'}\n    open_set = set(brackets_dict.values())\n\
    \    closed_set = set(brackets_dict.values())\n\n    for bracket in brackets:\n\
    \        if bracket in closed_set:\n            closed_set.remove(bracket)\n\n\
    \    if open_set == closed_set:\n        return True\n    else:\n        return\
    \ False\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4dwfrtnq.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp4dwfrtnq.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4dwfrtnq.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n\
    \    return len(brackets) == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp94a35mbo.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp94a35mbo.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp94a35mbo.py\"\
    , line 16, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ <= 1:\n        return True\n\n    if brackets[0] != brackets[len(brackets) -\
    \ 1]:\n        return False\n\n    opening_count = 0\n    closing_brackets = 0\n\
    \n    for char in brackets:\n        if char == '(':\n            opening_count\
    \ += 1\n        elif char == ')':\n            closing_brackets += 1\n\n    if\
    \ opening_count < closing_brackets:\n        return False\n\n    return correct_bracketing(brackets[1:-1])\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3kxgaib3.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp3kxgaib3.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3kxgaib3.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_count\
    \ = len(brackets)\n    pair_count = 0\n    for b in brackets:\n        if b ==\
    \ \"(\":\n            pair_count += 1\n        elif b == \")\":\n            pair_count\
    \ -= 1\n        else:\n            raise ValueError(\"brackets should only contain\
    \ '(' and ')'\")\n    if pair_count != open_count:\n        return False\n   \
    \ else:\n        return True\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpej104p04.py\", line 19\n    </cell>\n    ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for b in brackets:\n\
    \        if b == \"(\":\n            pass\n        elif b == \")\":\n        \
    \    pass\n        else:\n            return False\n\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpahw__301.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpahw__301.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpahw__301.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    brackets_dict = dict.fromkeys(brackets)\n    opening_brackets\
    \ = []\n    for bracket in brackets:\n        if bracket in brackets_dict:\n \
    \           brackets_dict.pop(bracket)\n        else:\n            opening_brackets.append(bracket)\n\
    \    if brackets_dict != {}:\n        return True\n    elif brackets_set != opening_brackets:\n\
    \        return True\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1uuu4tj.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpp1uuu4tj.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp1uuu4tj.py\"\
    , line 27, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket.lower() == bracket:\n            stack.pop()\n    if len(stack)\
    \ > 0:\n        return False\n    return True\n\n\ndef check(candidate):\n   \
    \ assert candidate('()') == True\n    assert candidate('(()())') == True\n   \
    \ assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpl5rojmg3.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpl5rojmg3.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpl5rojmg3.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\n  File \"/tmp/tmpl5rojmg3.py\"\
    , line 11, in correct_bracketing\n    stack.pop()\nIndexError: pop from empty\
    \ list\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_to_check\
    \ = bd().remove_brackets(brackets)\n    opening_brackets = [bracket.strip() for\
    \ bracket in brackets_to_check.split(\",\")]\n    opening_brackets = [x for x\
    \ in opening_brackets if x]\n    return len(set(opening_brackets)) == len(opening_brackets)\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmph0t8zcpb.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmph0t8zcpb.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmph0t8zcpb.py\"\
    , line 13, in check\n    assert candidate('()') == True\n  File \"/tmp/tmph0t8zcpb.py\"\
    , line 6, in correct_bracketing\n    brackets_to_check = bd().remove_brackets(brackets)\n\
    NameError: name 'bd' is not defined. Did you mean: 'id'?\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n\
    \        elif bracket == ')':\n            if len(stack) == 0:\n             \
    \   return False\n            else:\n                stack.pop()\n        else:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplc10c5vi.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmplc10c5vi.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmplc10c5vi.py\"\
    , line 27, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c in [\"(\", \"[\"]:\n            stack.append(c)\n\
    \        elif c == \")\":\n            if not stack:\n                return False\n\
    \            top_open_char = stack.pop()\n            if top_open_char != c:\n\
    \                return False\n        else:\n            return False\n    return\
    \ not stack\n\n\ndef check(candidate):\n    assert candidate('()') == True\n \
    \   assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgu15izck.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpgu15izck.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgu15izck.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_dict\
    \ = {\"(\" : \")\",\n                      \"[\" : \"]\",\n                  \
    \    \"{\" : \"}\",\n                      \"<\" : \">\",\n                  \
    \    \"!\" : \"~\",\n                      \",\" : \"&\",\n                  \
    \    \".\" : \".\",\n                      \"/\" : \"\",\n                   \
    \   \" \" : \"\",\n                      \".\" : \"\",\n                     \
    \ \"'\" : \"\",\n                      \",\" : \"\",\n                      \"\
    \ \" : \"\",\n                      \":\" : \"\",\n                      \";\"\
    \ : \"\",\n                      \"&\" : \"\",\n                      \";\" :\
    \ \"\",\n                      \":\" : \"\",\n                      \"?\" : \"\
    \",\n                      \":\" : \"\",\n                      \";\" : \"\",\n\
    \                      \";\" : \"\",\n                      \";\" : \"\",\n  \
    \                    \";\" : \"\",\n                      \";\" : \"\",\n    \
    \                  \":\" : \"\",\n                      \";\" : \"\",\n      \
    \                \";\" : \"\",\n                      \";\" : \"\",\n        \
    \              \";\" : \"\",\n                      \";\" : \"\",\n          \
    \            \";\" : \"\",\n                      \";\" : \"\",\n            \
    \          \";\" : \"\",\n                      \";\" : \"\",\n              \
    \        \";\" : \"\",\n                      \";\" : \"\",\n                \
    \      \";\" : \"\",\n                      \";\" : \"\",\n                  \
    \    \";\" : \"\",\n                      \";\" : \"\",\n                    \
    \  \";\" : \"\",\n                      \";\" : \"\",\n                      \"\
    ;\" : \"\",\n                      \";\" : \"\",\n                      \";\"\
    \ : \"\",\n                      \";\" : \"\",\n                      \";\" :\
    \ \"\",\n                      \";\" : \"\",\n                      \";\" : \"\
    \",\n                      \";\" : \"\",\n                      \";\" : \"\",\n\
    \                      \";\" : \"\",\n                      \";\" : \"\",\n  \
    \                    \";\" : \"\",\n                      \";\" : \"\",\n    \
    \                  \";\" : \"\",\n                      \";\" : \"\",\n      \
    \                \";\" : \"\",\n                      \";\" : \"\",\n        \
    \              \";\" : \"\",\n                      \";\" : \"\",\n          \
    \            \";\" : \"\",\n                      \";\" : \"\",\n            \
    \          \";\" : \"\",\n                      \";\" : \"\",\n              \
    \        \";\" : \"\",\n                      \";\" : \"\",\n                \
    \      \";\" : \"\",\n                      \";\" : \"\",\n                  \
    \    \";\" : \"\",\n                      \";\" : \"\",\n                    \
    \  \";\" : \"\",\n                      \";\" : \"\",\n                      \"\
    ;\" : \"\",\n                      \";\" : \"\",\n                      \";\"\
    \ : \"\",\n                      \";\" : \"\",\n                      \";\" :\
    \ \"\",\n                      \";\" : \"\",\n                      \";\" : \"\
    \",\n                      \";\" : \"\",\n                      \";\" : \"\",\n\
    \                      \";\" : \"\",\n                      \";\" : \"\",\n  \
    \                    \";\" : \"\",\n                      \";\" : \"\",\n    \
    \                  \";\" : \"\",\n                      \";\" : \"\",\n      \
    \                \";\" : \"\",\n                      \";\" : \"\",\n        \
    \              \";\" : \"\",\n                      \";\" : \"\",\n          \
    \            \";\" : \"\",\n                      \";\" : \"\",\n            \
    \          \";\" : \"\",\n                      \";\" : \"\",\n              \
    \        \";\" : \"\",\n                      \";\" : \"\",\n                \
    \      \";\" : \"\",\n                      \";\" : \"\",\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp17d_veop.py\", line 6\n    brackets_dict = {\"(\" : \"\
    )\",\n                    ^\nSyntaxError: '{' was never closed\n"
  stdout: ''
  timestamp: 1659823137
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count(\"(\")\n    closing = brackets.count(\")\")\n    # brackets has\
    \ zero opening brackets or too many closing brackets\n    if not opening or not\
    \ closing:\n        return False\n    if opening != closing:\n        return False\n\
    \    # every opening bracket has a corresponding closing bracket\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1cnd3yhw.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp1cnd3yhw.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1cnd3yhw.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  while i < len(brackets):\n        if brackets[i] == '(':\n            if i\
    \ < len(brackets) - 1 and brackets[i + 1] == ')':\n                i += 1\n  \
    \              continue\n            else:\n                return False\n   \
    \     else:\n            if brackets[i] == ')':\n                return False\n\
    \            else:\n                i += 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpatci4fgo.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpatci4fgo.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpatci4fgo.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(' ','')\n    brackets = brackets.lower()\n    brackets_split\
    \ = list(brackets)\n    brackets_split.reverse()\n    open_bracket = False\n \
    \   pair_count = 0\n    for bracket in brackets_split:\n        pair_count +=\
    \ 1\n        if bracket == '(':\n            open_bracket = True\n        elif\
    \ bracket == '[':\n            open_bracket = True\n        elif bracket == '{':\n\
    \            open_bracket = True\n        elif bracket == '}':\n            open_bracket\
    \ = False\n        elif open_bracket:\n            pair_count -= 1\n         \
    \   if pair_count == 0:\n                return True\n    return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_8kfotdr.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmp_8kfotdr.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_8kfotdr.py\"\
    , line 30, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_map\
    \ = {\"(\":\")\", \"[\":\"]\", \"{\":\", \"}\":\",\"}\n    for b in brackets:\n\
    \        if b not in brackets_map:\n            return False\n    return True\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppv2y79ov.py\", line 6\n    brackets_map = {\"(\":\")\"\
    , \"[\":\"]\", \"{\":\", \"}\":\",\"}\n                                      \
    \             ^\nSyntaxError: unterminated string literal (detected at line 6)\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       if c == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \"{\")\n    brackets = brackets.replace(\")\", \"}\"\
    )\n    if brackets == '':\n        return True\n    brackets = brackets.replace(\"\
    {\", \"}\")\n    brackets = brackets.replace(\"{\", \"{\")\n    brackets = brackets.replace(\"\
    )\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }{\", \"}\")\n    brackets = brackets.replace(\"}{\", \"}\")\n    brackets = brackets.replace(\"\
    }{\", \"}\")\n    brackets = brackets.replace(\"}{\", \"}\")\n    brackets = brackets.replace(\"\
    }{\", \"}\")\n    brackets = brackets.replace(\"}{\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    }\", \"}\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = \n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplzq8dgi2.py\", line 58\n    brackets = \n            \
    \   ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    counts = {c:\
    \ 0 for c in brackets}\n    for c in brackets:\n        if c == '(':\n       \
    \     counts[c] += 1\n        elif c == ')':\n            counts[c] -= 1\n   \
    \     else:\n            return False\n    return all(counts[c] == 0 for c in\
    \ counts)\n\n\ndef check(candidate):\n    assert candidate('()') == True\n   \
    \ assert candidate('(()())') == True\n    assert candidate('()()(()())()') ==\
    \ True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpvzanupb9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpvzanupb9.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpvzanupb9.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_list\
    \ = brackets.replace(\"(\", \"\").replace(\")\", \"\").split()\n    stack = []\n\
    \    len_stack = 0\n    for char in brackets_list:\n        if char == '(':\n\
    \            if len_stack == 0:\n                return False\n            else:\n\
    \                stack.append(char)\n                len_stack += 1\n        elif\
    \ char == ')':\n            if len_stack == 0:\n                return False\n\
    \            else:\n                len_stack -= 1\n                stack.pop()\n\
    \        elif char == ',':\n            if len_stack == 0:\n                return\
    \ False\n            else:\n                stack.append(char)\n             \
    \   len_stack += 1\n        elif char == ' ':\n            if len_stack == 0:\n\
    \                return False\n            else:\n                stack.append(char)\n\
    \                len_stack += 1\n        else:\n            return False\n   \
    \ if len_stack != 0:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp21wu3roc.py\", line\
    \ 58, in <module>\n    test_check()\n  File \"/tmp/tmp21wu3roc.py\", line 56,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp21wu3roc.py\"\
    , line 46, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    left_brackets\
    \ = {\n        '(': ')',\n        '[': ']',\n        '{': '}'\n    }\n    right_brackets\
    \ = {\n        ')': '(',\n        ']': '[',\n        '}': '{'\n    }\n    if brackets[0]\
    \ not in left_brackets.keys():\n        return False\n\n    left_bracket = left_brackets[brackets[0]]\n\
    \    if right_brackets[left_bracket] == brackets[1]:\n        return True\n  \
    \  else:\n        return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuhufk1g2.py\", line\
    \ 43, in <module>\n    test_check()\n  File \"/tmp/tmpuhufk1g2.py\", line 41,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuhufk1g2.py\"\
    , line 27, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.strip()\n    brackets = brackets.replace(\"(\", \"\")\n    brackets\
    \ = brackets.replace(\")\", \"\")\n\n    correct_brackets = True\n    # check\
    \ for matching brackets\n    for bracket in brackets:\n        if bracket not\
    \ in \"(\" + \")\":\n            correct_brackets = False\n\n    return correct_brackets\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6x711h0c.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp6x711h0c.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6x711h0c.py\"\
    , line 24, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  while i < len(brackets):\n        if brackets[i] == \"(\":\n            i +=\
    \ 1\n        elif brackets[i] == \")\":\n            i += 1\n        else:\n \
    \           return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpx02zkzo9.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpx02zkzo9.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpx02zkzo9.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opposite_map\
    \ = {')': '(', '(': ')', '[': ']'}\n    count = 0\n    brackets_dict = brackets.split(',')\n\
    \    for bracket in brackets_dict:\n        if bracket in opposite_map:\n    \
    \        count += 1\n    if count != len(brackets_dict):\n        return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2y9a8vyz.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp2y9a8vyz.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2y9a8vyz.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)%2\
    \ == 0:\n        return True\n    return False\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp77xj0bbz.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp77xj0bbz.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp77xj0bbz.py\"\
    , line 17, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_brackets\
    \ = brackets.count('(')\n    close_brackets = brackets.count(')')\n    return\
    \ open_brackets % 2 == 1 and close_brackets % 2 == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3xlg3cd_.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp3xlg3cd_.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3xlg3cd_.py\"\
    , line 12, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    left_brackets = brackets.count(\"(\")\n    right_brackets = brackets.count(\"\
    )\")\n    for i in range(left_brackets):\n        stack.append(i)\n\n    for i\
    \ in range(right_brackets):\n        while len(stack) > 0 and stack[-1] < i:\n\
    \            stack.pop()\n\n        if len(stack) > 0:\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp97loscv8.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp97loscv8.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp97loscv8.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    num_open_brackets\
    \ = 0\n    num_closed_brackets = 0\n    for bracket in brackets:\n        if bracket\
    \ == \"(\":\n            num_open_brackets += 1\n        if bracket == \")\":\n\
    \            num_closed_brackets += 1\n        if num_open_brackets != num_closed_brackets:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyra_6ovp.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpyra_6ovp.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyra_6ovp.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    for bracket in brackets:\n        if bracket == '(':\n            count +=\
    \ 1\n        elif bracket == ')':\n            count -= 1\n        if count <\
    \ 0:\n            return False\n    return count == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(brackets)\n    stack = []\n    for bracket in brackets_set:\n        if\
    \ bracket in stack:\n            return False\n        stack.append(bracket)\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0vt3rpq1.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmp0vt3rpq1.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0vt3rpq1.py\"\
    , line 20, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = list()\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            if len(stack) == 0:\n           \
    \     return False\n            elif stack.pop() != \"(\":\n                return\
    \ False\n            else:\n                continue\n        else:\n        \
    \    return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpkkc6z_79.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpkkc6z_79.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpkkc6z_79.py\"\
    , line 29, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\
    \  # type: List[str]\n    for c in brackets:\n        if c == \"(\":\n       \
    \     stack.append(c)\n        elif c == \")\":\n            if len(stack) ==\
    \ 0:\n                return False\n            elif stack.pop() != \"(\":\n \
    \               return False\n        else:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpadeczsip.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpadeczsip.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpadeczsip.py\"\
    , line 27, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for index, char in enumerate(brackets):\n        if char == \"(\":\n    \
    \        stack.append(index)\n        if char == \")\":\n            if len(stack)\
    \ == 0:\n                return False\n            else:\n                top\
    \ = int(stack.pop())\n                if index == top + 1:\n                 \
    \   stack.pop()\n                elif index == top + 2:\n                    stack.pop()\n\
    \                elif index == top + 3:\n                    stack.pop()\n   \
    \             elif index == top + 4:\n                    stack.pop()\n      \
    \          elif index == top + 5:\n                    stack.pop()\n         \
    \       elif index == top + 6:\n                    stack.pop()\n            \
    \    elif index == top + 7:\n                    stack.pop()\n               \
    \ elif index == top + 8:\n                    stack.pop()\n                elif\
    \ index == top + 9:\n                    stack.pop()\n                elif index\
    \ == top + 10:\n                    stack.pop()\n                elif index ==\
    \ top + 11:\n                    stack.pop()\n                elif index == top\
    \ + 12:\n                    stack.pop()\n                elif index == top +\
    \ 13:\n                    stack.pop()\n                elif index == top + 14:\n\
    \                    stack.pop()\n                elif index == top + 15:\n  \
    \                  stack.pop()\n                elif index == top + 16:\n    \
    \                stack.pop()\n                else:\n                    return\
    \ False\n    return not len(stack)\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp094zkkhy.py\", line\
    \ 69, in <module>\n    test_check()\n  File \"/tmp/tmp094zkkhy.py\", line 67,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp094zkkhy.py\"\
    , line 53, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp094zkkhy.py\"\
    , line 16, in correct_bracketing\n    stack.pop()\nIndexError: pop from empty\
    \ list\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                top = stack.pop()\n              \
    \  if top != char:\n                    return False\n    return not stack\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzqfliowu.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzqfliowu.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzqfliowu.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == '(':\n            stack.append(c)\n \
    \       elif c == ')':\n            if stack.pop() == '(':\n                return\
    \ False\n            else:\n                return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7lzkgaea.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp7lzkgaea.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7lzkgaea.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    bracket_count\
    \ = []\n    last = -1\n    for pos in range(len(brackets)):\n        if brackets[pos]\
    \ == \"(\":\n            bracket_count.append(0)\n        else:\n            bracket_count.pop()\
    \ if (brackets[pos] == \")\") else bracket_count.append(1)\n            bracket_count.append(0)\n\
    \        if brackets[pos] == \")\" and bracket_count[-1] == 0:\n            bracket_count.pop()\n\
    \            last = pos\n\n    if len(brackets) != last:\n        return False\n\
    \    else:\n        return True\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpktlyexwn.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmpktlyexwn.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpktlyexwn.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # brackets\
    \ is a string of \"(\" and \")\".\n    if not brackets:\n        return False\n\
    \n    stack = []\n    for char in brackets:\n        if char in \"(]\":\n    \
    \        if not stack or stack[-1] != char:\n                return False\n  \
    \          else:\n                stack.pop()\n        else:\n            stack.append(char)\n\
    \    return not stack\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15xhd3zr.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmp15xhd3zr.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp15xhd3zr.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\"(\", \" ( \")\n    brackets = brackets.replace(\")\", \"\
    \ ) \")\n    brackets = brackets.replace(\",\", \" , \")\n    brackets = brackets.replace(\"\
    {\", \" { \")\n    brackets = brackets.replace(\"}\", \" } \")\n    brackets =\
    \ brackets.replace(\"[\", \" [ \")\n    brackets = brackets.replace(\"]\", \"\
    \ ] \")\n    if brackets == \" ( \" or brackets == \" { \" or brackets == \" [\
    \ \":\n        return False\n    if brackets == \" ) \" or brackets == \" } \"\
    \ or brackets == \" ] \":\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpeqebsw7v.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpeqebsw7v.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpeqebsw7v.py\"\
    , line 25, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # YOUR CODE\
    \ HERE\n    stack = []\n    for ch in brackets:\n        if ch == \"(\":\n   \
    \         stack.append(ch)\n        elif ch == \")\":\n            if not stack:\n\
    \                return False\n            else:\n                stack.pop()\n\
    \        else:\n            return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return True\
    \ if brackets == (\n        \"()\"\n    ) else False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp728c8bhh.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmp728c8bhh.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp728c8bhh.py\"\
    , line 13, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return len(set(brackets))\
    \ == len(brackets) and \\\n        all(brackets.count(c) == brackets.count(\"\
    )\") for c in brackets)\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpk2vqxcjm.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmpk2vqxcjm.py\", line 25,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpk2vqxcjm.py\"\
    , line 12, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_map\
    \ = brackets_to_map(brackets)\n    opening_brackets_set = set(brackets_map.keys())\n\
    \    closing_brackets_set = set(brackets_map.values())\n    if opening_brackets_set\
    \ == closing_brackets_set:\n        return True\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpln8xoebx.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpln8xoebx.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpln8xoebx.py\"\
    , line 15, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpln8xoebx.py\"\
    , line 6, in correct_bracketing\n    brackets_map = brackets_to_map(brackets)\n\
    NameError: name 'brackets_to_map' is not defined. Did you mean: 'brackets_map'?\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    if brackets[0] != brackets[1]:\n        return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpczxaw2pr.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpczxaw2pr.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpczxaw2pr.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\
    \  # type: List[str]\n    for bracket in brackets:\n        if bracket == \"(\"\
    :\n            stack.append(bracket)\n        elif bracket == \")\":\n       \
    \     if not stack:\n                return False\n            top_bracket = stack.pop()\n\
    \            if top_bracket != \"(\":\n                return False\n        else:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpe9xr51q0.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpe9xr51q0.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpe9xr51q0.py\"\
    , line 28, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets\
    \ == '':\n        return False\n    else:\n        opening_brackets = brackets.count('(')\n\
    \        closing_brackets = brackets.count(')')\n        return opening_brackets\
    \ == closing_brackets\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpysn1ytaj.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpysn1ytaj.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpysn1ytaj.py\"\
    , line 20, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for c in brackets:\n        if c == ')':\n            while stack and stack[-1]\
    \ != '(':\n                stack.pop()\n        elif c == '(':\n            stack.append(c)\n\
    \        else:\n            return False\n    return len(stack) == 0\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6tvitpsn.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmp6tvitpsn.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6tvitpsn.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return all(\n\
    \        (brackets[i - 1].strip() not in {\"(\", \")\"} and brackets[i + 1].strip()\
    \ not in {\"(\", \")\"})\n        for i in range(1, len(brackets) - 1)\n    )\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp3qsgbf93.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp3qsgbf93.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp3qsgbf93.py\"\
    , line 14, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\":\n            if not stack:\n                return\
    \ False\n            opening = stack.pop()\n            if opening != char:\n\
    \                return False\n    return not stack\n\n\n@lru_cache(maxsize=2)\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4idu9yu_.py\", line\
    \ 19, in <module>\n    @lru_cache(maxsize=2)\nNameError: name 'lru_cache' is not\
    \ defined\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack: list\
    \ = list()\n\n    stack.append(brackets[0])\n    for i in range(1, len(brackets)):\n\
    \        if brackets[i] != stack[len(stack) - 1]:\n            return False\n\
    \        stack.append(brackets[i])\n\n    if brackets[len(brackets) - 1] != stack[len(stack)\
    \ - 1]:\n        return False\n\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpzmg9mubk.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpzmg9mubk.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpzmg9mubk.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = set(brackets)\n    closing_brackets = set()\n\n    for idx, open_paren in\
    \ enumerate(brackets):\n        if open_paren not in opening_brackets:\n     \
    \       return False\n\n        closing_brackets.add(brackets[idx])\n        opening_brackets.remove(open_paren)\n\
    \n    return len(opening_brackets) == 0\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpf5wsxqoe.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpf5wsxqoe.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpf5wsxqoe.py\"\
    , line 21, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack: Set[tuple[int,\
    \ int]] = set()\n    for index, char in enumerate(\"(\"):\n        stack.add((index,\
    \ 1))\n    for index, char in enumerate(\")\"):\n        stack.add((index, -1))\n\
    \    try:\n        while stack:\n            index, sign = stack.pop()\n     \
    \       if index != 0 and index % 2 == 0:\n                stack.update((index,\
    \ sign * sign) for index, _ in stack)\n            elif index != 0 and index %\
    \ 2 != 0:\n                stack.update((index, sign * sign) for index, _ in stack)\n\
    \            elif index == 0 and sign == 1:\n                stack.update((index,\
    \ sign * sign) for index, _ in stack)\n            elif index == 0 and sign ==\
    \ -1:\n                stack.update((index, sign * sign) for index, _ in stack)\n\
    \    except RuntimeError:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg0862a4e.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpg0862a4e.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg0862a4e.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for i, c in enumerate(brackets):\n        if c == \"(\":\n            stack.append(i)\n\
    \        if c == \")\":\n            if not stack:\n                return False\n\
    \            top = stack.pop()\n            if top < i:\n                return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjno2fdd1.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpjno2fdd1.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjno2fdd1.py\"\
    , line 19, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = list()\n\
    \    for bracket in brackets.split(\",\"):\n        if bracket == \"(\":\n   \
    \         stack.append(bracket)\n        elif bracket == \")\":\n            if\
    \ not stack:\n                return False\n            else:\n              \
    \  open_bracket = stack.pop()\n                if open_bracket != bracket:\n \
    \                   return False\n    return not stack\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2zskvk5_.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmp2zskvk5_.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp2zskvk5_.py\"\
    , line 25, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        if char == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                top = stack.pop()\n              \
    \  if top != \"(\":\n                    return False\n    return True\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpj948j8g5.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpj948j8g5.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpj948j8g5.py\"\
    , line 27, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.upper()\n    for opening, closing in [((\"(\", \")\"), (\"[\", \"]\"\
    ), (\"{\", \"}\")]):\n        if opening not in brackets and closing not in brackets:\n\
    \            return False\n        if opening not in brackets or closing not in\
    \ brackets:\n            continue\n        if opening > closing:\n           \
    \ left = brackets.index(opening)\n            right = brackets.index(closing)\n\
    \            brackets = brackets[:left] + brackets[right+1:]\n    return brackets\
    \ == \"\"\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptoy7tnyk.py\", line 7\n    for opening, closing in [((\"\
    (\", \")\"), (\"[\", \"]\"), (\"{\", \"}\")]):\n                             \
    \                                   ^\nSyntaxError: closing parenthesis ']' does\
    \ not match opening parenthesis '('\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    if brackets[0] != brackets[-1]:\n        return False\n    for char in brackets:\n\
    \        if char == '(':\n            count += 1\n        elif char == ')':\n\
    \            count -= 1\n    return count == 0\n\n\ndef check(candidate):\n  \
    \  assert candidate('()') == True\n    assert candidate('(()())') == True\n  \
    \  assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpu8pbp6so.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpu8pbp6so.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpu8pbp6so.py\"\
    , line 18, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for character in brackets:\n        if character == \"(\":\n            stack.append(character)\n\
    \        elif character == \")\":\n            if len(stack) == 0:\n         \
    \       return False\n            else:\n                if stack.pop() != character:\n\
    \                    return False\n                else:\n                   \
    \ continue\n        else:\n            return False\n    return len(stack) ==\
    \ 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8oc549x5.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp8oc549x5.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8oc549x5.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n    if brackets[0] != brackets[-1]:\n\
    \        return False\n    elif brackets[1:] != brackets[:-1]:\n        return\
    \ False\n    return True\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpqjq92fwp.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpqjq92fwp.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpqjq92fwp.py\"\
    , line 14, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpqjq92fwp.py\"\
    , line 7, in correct_bracketing\n    if brackets[0] != brackets[-1]:\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for c in brackets:\n\
    \        if c != \"(\":\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6ws_k1rm.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp6ws_k1rm.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6ws_k1rm.py\"\
    , line 13, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # Your code\
    \ here\n    for match in brackets.count('('):\n        if match != brackets.count(')'):\n\
    \            return False\n    return True\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuz_5e93y.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpuz_5e93y.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuz_5e93y.py\"\
    , line 13, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpuz_5e93y.py\"\
    , line 7, in correct_bracketing\n    for match in brackets.count('('):\nTypeError:\
    \ 'int' object is not iterable\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ [b for b in brackets if b == '(' or b == ')']\n    size = len(brackets)\n  \
    \  for j in range(size):\n        if brackets[j] == brackets[j + 1]:\n       \
    \     return False\n    return True\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp82ffj6sa.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmp82ffj6sa.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp82ffj6sa.py\"\
    , line 15, in check\n    assert candidate('()') == True\n  File \"/tmp/tmp82ffj6sa.py\"\
    , line 9, in correct_bracketing\n    if brackets[j] == brackets[j + 1]:\nIndexError:\
    \ list index out of range\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  while i < len(brackets):\n        if brackets[i] == \"(\":\n            if\
    \ brackets[i - 1 : i] != \"(\":\n                return False\n            i +=\
    \ 1\n        if brackets[i] == \")\":\n            if brackets[i - 1 : i] != \"\
    )\":\n                return False\n        i += 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8hr_azcv.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmp8hr_azcv.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8hr_azcv.py\"\
    , line 20, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_lower\
    \ = brackets.lower()\n    if '(' not in brackets_lower:\n        return False\n\
    \    elif len(brackets_lower) >= 2:\n        return brackets_lower.count('(')\
    \ == brackets_lower.count(')')\n    else:\n        return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpp1lx5pyl.py\", line\
    \ 32, in <module>\n    test_check()\n  File \"/tmp/tmpp1lx5pyl.py\", line 30,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpp1lx5pyl.py\"\
    , line 21, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = [brackets[0]]\n\
    \    closed_brackets = []\n\n    for bracket in brackets[1:]:\n        if stack[-1]\
    \ == \"(\" and bracket != \")\":\n            stack.append(bracket)\n        elif\
    \ stack[-1] == \"(\" and bracket == \")\":\n            stack.pop()\n        elif\
    \ stack[-1] == \")\" and bracket == \"(\":\n            stack.pop()\n        elif\
    \ stack[-1] == \")\" and bracket == \")\":\n            stack.pop()\n        else:\n\
    \            return False\n\n        if stack[-1] != bracket:\n            return\
    \ False\n\n        closed_brackets.append(stack[-1])\n\n    return len(closed_brackets)\
    \ == len(brackets)\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpy73d4hch.py\", line\
    \ 46, in <module>\n    test_check()\n  File \"/tmp/tmpy73d4hch.py\", line 44,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpy73d4hch.py\"\
    , line 30, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpy73d4hch.py\"\
    , line 21, in correct_bracketing\n    if stack[-1] != bracket:\nIndexError: list\
    \ index out of range\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = 0\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack += 1\n\
    \        if char == \")\":\n            stack -= 1\n        if stack < 0:\n  \
    \          return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp7qwyhqya.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp7qwyhqya.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp7qwyhqya.py\"\
    , line 24, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_chars\
    \ = [char for char in brackets]\n    open_chars = [char for char in brackets if\
    \ char in '([{' or char == '[']\n    close_chars = [char for char in brackets\
    \ if char in ']}])' or char == ']'}]\n    return all(brackets_chars.count(char)\
    \ == brackets_chars.count(open_char) for char in close_chars)\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpywiz2cjp.py\", line 8\n    close_chars = [char for char\
    \ in brackets if char in ']}])' or char == ']'}]\n                           \
    \                                                  ^\nSyntaxError: closing parenthesis\
    \ '}' does not match opening parenthesis '['\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').replace(')', '')\n\n    has_wrong_opening_bracket\
    \ = False\n    for opening_bracket in brackets:\n        if opening_bracket ==\
    \ '(':\n            if brackets[brackets.index(opening_bracket) + 1] != ')':\n\
    \                has_wrong_opening_bracket = True\n        elif opening_bracket\
    \ == ')':\n            if brackets[brackets.index(opening_bracket) - 1] != '(':\n\
    \                has_wrong_opening_bracket = True\n        else:\n           \
    \ has_wrong_opening_bracket = True\n\n    if has_wrong_opening_bracket:\n    \
    \    return False\n    else:\n        return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp1ppstggo.py\", line\
    \ 42, in <module>\n    test_check()\n  File \"/tmp/tmp1ppstggo.py\", line 40,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp1ppstggo.py\"\
    , line 30, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for bracket\
    \ in brackets:\n        if bracket not in ('(', ')'):\n            return False\n\
    \    return True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n\
    \    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg4vtespz.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmpg4vtespz.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg4vtespz.py\"\
    , line 17, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count('(')\n    closing = brackets.count(')')\n    if opening != closing:\n\
    \        return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpg9w6s7r_.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpg9w6s7r_.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpg9w6s7r_.py\"\
    , line 19, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    open_brackets = {')', '}', ']', '>', '<'}\n    close_brackets = {'(',\n \
    \                     '[',\n                      '}',\n                     \
    \ ']',\n                      '>',\n                      '<'}\n    count = 0\n\
    \    for b in brackets:\n        if b == '(':\n            stack.append(b)\n \
    \           count += 1\n        elif b == ')':\n            if stack.pop() in\
    \ open_brackets:\n                count -= 1\n            else:\n            \
    \    return False\n        elif b == '[':\n            stack.append(b)\n     \
    \       count += 1\n        elif b == ']':\n            if stack.pop() in close_brackets:\n\
    \                count -= 1\n            else:\n                return False\n\
    \    return count == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8rantcao.py\", line\
    \ 52, in <module>\n    test_check()\n  File \"/tmp/tmp8rantcao.py\", line 50,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8rantcao.py\"\
    , line 36, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        if char == \")\":\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n    return len(stack)\
    \ == 0\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = 0\n\
    \    for character in brackets:\n        if character == '(':\n            stack\
    \ += 1\n        elif character == ')':\n            stack -= 1\n        if not\
    \ stack:\n            return not stack\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8frcz5as.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8frcz5as.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8frcz5as.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    left_brackets\
    \ = brackets[::2]\n    right_brackets = brackets[1::2]\n    for bracket in left_brackets:\n\
    \        if bracket != right_brackets[0]:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpbzwr46yr.py\", line\
    \ 31, in <module>\n    test_check()\n  File \"/tmp/tmpbzwr46yr.py\", line 29,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpbzwr46yr.py\"\
    , line 15, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    # if not brackets\
    \ or brackets[0] != brackets[-1]:\n    #     return False\n    i = 0\n    while\
    \ i < len(brackets):\n        if brackets[i] == \"(\":\n            if brackets[i\
    \ - 1] == \"(\":\n                if brackets[i - 2] == \"(\":\n             \
    \       if brackets[i - 3] == \"(\":\n                        if brackets[i -\
    \ 4] == \"(\":\n                            if brackets[i - 5] == \"(\":\n   \
    \                             if brackets[i - 6] == \"(\":\n                 \
    \                   return True\n        i += 1\n    return False\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpr84kxanu.py\", line\
    \ 39, in <module>\n    test_check()\n  File \"/tmp/tmpr84kxanu.py\", line 37,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpr84kxanu.py\"\
    , line 23, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    left_brackets\
    \ = brackets[::2]\n    right_brackets = brackets[1::2]\n    if left_brackets ==\
    \ right_brackets:\n        return True\n    else:\n        return False\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpapbrwbhq.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpapbrwbhq.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpapbrwbhq.py\"\
    , line 14, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \        elif bracket == \")\":\n            stack.pop()\n        else:\n    \
    \        return False\n    return len(stack) == 0\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpnxiyj4qu.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpnxiyj4qu.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpnxiyj4qu.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\n  File \"/tmp/tmpnxiyj4qu.py\"\
    , line 11, in correct_bracketing\n    stack.pop()\nIndexError: pop from empty\
    \ list\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    count = 0\n\
    \    for char in brackets:\n        if char == '(':\n            count += 1\n\
    \        elif char == ')':\n            count -= 1\n    if count == 0:\n     \
    \   return True\n    return False\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8j2quv39.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmp8j2quv39.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp8j2quv39.py\"\
    , line 23, in check\n    assert candidate(')(()') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = \"()\"\n    closing_brackets = \"()\"\n\n    brackets_list = brackets.strip()\n\
    \    brackets_list = brackets_list.replace('(', '')\n    brackets_list = brackets_list.replace(')',\
    \ '')\n    brackets_list = brackets_list.split(\",\")\n\n    for bracket in brackets_list:\n\
    \        if bracket not in opening_brackets and bracket not in closing_brackets:\n\
    \            return True\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpasnrhhn2.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpasnrhhn2.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpasnrhhn2.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    bracket_counter\
    \ = {}\n    for b in brackets:\n        bracket_counter[b] = 1\n    for b in brackets:\n\
    \        if b not in bracket_counter:\n            return False\n        else:\n\
    \            bracket_counter[b] += 1\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpku03i8si.py\", line\
    \ 34, in <module>\n    test_check()\n  File \"/tmp/tmpku03i8si.py\", line 32,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpku03i8si.py\"\
    , line 22, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return len(brackets.split())\
    \ == \\\n           len(set(brackets.split()))\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppddkz7v2.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmppddkz7v2.py\", line 24,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppddkz7v2.py\"\
    , line 14, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  while i < len(brackets):\n        if brackets[i] == \"(\":\n            i +=\
    \ 1\n            while brackets[i] not in [\")\", \")(\"]:\n                i\
    \ += 1\n            if not brackets[i+1] == \")\":\n                return False\n\
    \            i += 2\n        elif brackets[i] == \")\":\n            i += 1\n\
    \            while brackets[i] not in [\"(\", \"(\"]:\n                i += 1\n\
    \            if not brackets[i+1] == \"(\":\n                return False\n  \
    \          i += 2\n        else:\n            return True\n    return False\n\n\
    \ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpiil6760f.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpiil6760f.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpiil6760f.py\"\
    , line 28, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpiil6760f.py\"\
    , line 12, in correct_bracketing\n    if not brackets[i+1] == \")\":\nIndexError:\
    \ string index out of range\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = deque()\n\
    \n    for c in brackets:\n        if c in [\"(\", \"[\", \"{\"]: #opening a bracket\n\
    \            stack.append(c)\n        elif c in [\")\", \"]\", \"}\"]: #closing\
    \ a bracket\n            if len(stack) == 0:\n                return False\n \
    \           if stack.pop() != c:\n                return False\n    return len(stack)\
    \ == 0\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpfjh0abai.py\", line\
    \ 36, in <module>\n    test_check()\n  File \"/tmp/tmpfjh0abai.py\", line 34,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpfjh0abai.py\"\
    , line 20, in check\n    assert candidate('()') == True\n  File \"/tmp/tmpfjh0abai.py\"\
    , line 6, in correct_bracketing\n    stack = deque()\nNameError: name 'deque'\
    \ is not defined\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_length\
    \ = len(brackets)\n\n    stack = []\n    counting_brackets = 0\n    for bracket\
    \ in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n\
    \            counting_brackets += 1\n        else:\n            if stack:\n  \
    \              stack.pop()\n            counting_brackets -= 1\n            if\
    \ counting_brackets == 0:\n                break\n\n    if stack:\n        return\
    \ False\n    else:\n        return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuwi19jvy.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpuwi19jvy.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuwi19jvy.py\"\
    , line 32, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace(\")\", \"\")\n    brackets = brackets.replace(\"(\", \"\")\n\
    \    return brackets\n\n\ndef check(candidate):\n    assert candidate('()') ==\
    \ True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpgt1lv0ze.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpgt1lv0ze.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpgt1lv0ze.py\"\
    , line 12, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = brackets.replace('(', '').split()\n    for b in brackets_set:\n        if\
    \ b not in brackets:\n            return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpyw1aguqv.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmpyw1aguqv.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpyw1aguqv.py\"\
    , line 15, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if stack:\n                stack.pop()\n\
    \            else:\n                return False\n    return not stack\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    for bracket1,\
    \ bracket2 in zip(list(brackets), list(brackets[1:])):\n        if bracket1 !=\
    \ \"(\" or bracket2 != \")\":\n            return False\n    return True\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9_wyr2_f.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmp9_wyr2_f.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9_wyr2_f.py\"\
    , line 14, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    closed = []\n\
    \    opens = []\n    for c in brackets:\n        if c == '(':\n            opens.append(c)\n\
    \        elif c == ')':\n            closed = opens.pop()\n            if closed\
    \ != c:\n                return False\n            else:\n                opens.pop()\n\
    \        else:\n            return False\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjpuge3sd.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmpjpuge3sd.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpjpuge3sd.py\"\
    , line 22, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    bracket =\
    \ brackets.strip()\n    brackets = brackets.lower()\n    for char in bracket:\n\
    \        if char != \"(\":\n            return False\n        if char in brackets:\n\
    \            brackets = brackets.replace(char, '')\n    return brackets.strip()\n\
    \n\ndef check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp11jzir47.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmp11jzir47.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp11jzir47.py\"\
    , line 17, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_stack\
    \ = [0]\n    for pos, c in enumerate(brackets):\n        if c == '(':\n      \
    \      brackets_stack.append(pos)\n        elif c == ')':\n            if len(brackets_stack)\
    \ <= 1:\n                return False\n            else:\n                brackets_stack.pop()\n\
    \    return brackets_stack == [0]\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == '(':\n            stack.append(char)\n\
    \        elif char == ')':\n            if len(stack) == 0:\n                return\
    \ False\n            else:\n                stack.pop()\n        else:\n     \
    \       return False\n\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp9l1fonbm.py\", line\
    \ 38, in <module>\n    test_check()\n  File \"/tmp/tmp9l1fonbm.py\", line 36,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp9l1fonbm.py\"\
    , line 28, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    for char in brackets:\n        if char == \"(\":\n            stack.append(char)\n\
    \        elif char == \")\" and len(stack) > 0:\n            if not stack.pop():\n\
    \                return False\n        else:\n            return False\n    return\
    \ True\n\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpxld_x457.py\", line\
    \ 35, in <module>\n    test_check()\n  File \"/tmp/tmpxld_x457.py\", line 33,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpxld_x457.py\"\
    , line 25, in check\n    assert candidate('(') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening =\
    \ brackets.count(\"(\")\n    closing = brackets.count(\")\")\n    if opening *\
    \ closing == 0:\n        return False\n    return True\n\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmppa47shrz.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmppa47shrz.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmppa47shrz.py\"\
    , line 18, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '').split(')')\n    brackets = list(map(lambda x: x[:-1],\
    \ enumerate(brackets)))\n    return all(brackets[i][1] == brackets[i+1][0]\n \
    \              for i in range(len(brackets)-1))\n\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmps0t0m25g.py\", line\
    \ 29, in <module>\n    test_check()\n  File \"/tmp/tmps0t0m25g.py\", line 27,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmps0t0m25g.py\"\
    , line 13, in check\n    assert candidate('()') == True\n  File \"/tmp/tmps0t0m25g.py\"\
    , line 8, in correct_bracketing\n    return all(brackets[i][1] == brackets[i+1][0]\n\
    \  File \"/tmp/tmps0t0m25g.py\", line 8, in <genexpr>\n    return all(brackets[i][1]\
    \ == brackets[i+1][0]\nIndexError: tuple index out of range\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets =\
    \ brackets.replace('(', '( ').replace(')', ' )')\n    for bracket in brackets.split():\n\
    \        if bracket.count('(') == bracket.count(')'):\n            continue\n\
    \        elif bracket.count('(') != bracket.count(')'):\n            return False\n\
    \        else:\n            bracket = bracket.split(' ')[0]\n            for bracket2\
    \ in ['(', ')']:\n                if bracket == bracket2:\n                  \
    \  continue\n                else:\n                    bracket2 = bracket2.split('\
    \ ')[0]\n                    if bracket.find(bracket2) == -1:\n              \
    \          return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp4rx3bmon.py\", line\
    \ 41, in <module>\n    test_check()\n  File \"/tmp/tmp4rx3bmon.py\", line 39,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp4rx3bmon.py\"\
    , line 25, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n\n    stack = []\n    i = 0\n    while brackets[i]\
    \ != \")\":\n        stack.append(brackets[i])\n        i += 1\n\n    # Pop off\
    \ the top element of the stack. Since brackets[i] will always be \")\"\n    #\
    \ and we are iterating over all the brackets until we find an opening bracket\n\
    \    # with the last element being popped off.\n    while stack[-1] != \"(\":\n\
    \        stack.pop()\n\n    # Check if the stack is empty. if it is, we have mismatched\
    \ brackets\n    if stack:\n        return False\n\n    return True\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpoe3asc3x.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmpoe3asc3x.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpoe3asc3x.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    open_brackets\
    \ = set(brackets.split('('))\n    closed_brackets = set(brackets.split(')'))\n\
    \    return len(open_brackets) == len(closed_brackets)\n\ndef check(candidate):\n\
    \    assert candidate('()') == True\n    assert candidate('(()())') == True\n\
    \    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp0f73bb6t.py\", line\
    \ 27, in <module>\n    test_check()\n  File \"/tmp/tmp0f73bb6t.py\", line 25,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp0f73bb6t.py\"\
    , line 15, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if brackets\
    \ == \"\":\n        return True\n    elif brackets[0] == \"(\":\n        return\
    \ correct_bracketing(brackets[1:])\n    elif brackets[-1] == \")\":\n        return\
    \ correct_bracketing(brackets[:-1])\n    else:\n        return False\n\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpuxneioaw.py\", line\
    \ 33, in <module>\n    test_check()\n  File \"/tmp/tmpuxneioaw.py\", line 31,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpuxneioaw.py\"\
    , line 18, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    i = 0\n  \
    \  j = 0\n    while i < len(brackets) and j < len(brackets):\n        if brackets[i]\
    \ == \"(\" and brackets[j] == \"(\":\n            i += 1\n        elif brackets[i]\
    \ == \")\" and brackets[j] == \")\":\n            j += 1\n        elif brackets[i]\
    \ == \"(\" and brackets[j] == \")\":\n            j += 1\n        elif brackets[i]\
    \ == \")\" and brackets[j] == \"(\":\n            i += 1\n        j += 1\n   \
    \ return i == len(brackets) or j == len(brackets)\n\ndef check(candidate):\n \
    \   assert candidate('()') == True\n    assert candidate('(()())') == True\n \
    \   assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpc6itauv8.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpc6itauv8.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpc6itauv8.py\"\
    , line 21, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: 0
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    bracket =\
    \ brackets[0]\n    if bracket == \"(\":\n        stack = []\n        for i in\
    \ range(len(brackets)):\n            if brackets[i] == \"(\":\n              \
    \  stack.append(i)\n            if brackets[i] == \")\":\n                if not\
    \ stack:\n                    return False\n                stack.pop()\n    \
    \    return len(stack) == 0\n    elif bracket == \")\":\n        stack = []\n\
    \        for i in range(len(brackets)):\n            if brackets[i] == \")\":\n\
    \                stack.append(i)\n            if brackets[i] == \"(\":\n     \
    \           if not stack:\n                    return False\n                stack.pop()\n\
    \        return not stack\n    return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    return brackets.count(\"\
    (\") == brackets.count(\")\") == 0\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpo0y9lujr.py\", line\
    \ 26, in <module>\n    test_check()\n  File \"/tmp/tmpo0y9lujr.py\", line 24,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpo0y9lujr.py\"\
    , line 10, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    opening_brackets\
    \ = brackets.count(\"(\")\n    closing_brackets = brackets.count(\")\")\n    return\
    \ closing_brackets > opening_brackets\n\n\ndef check(candidate):\n    assert candidate('()')\
    \ == True\n    assert candidate('(()())') == True\n    assert candidate('()()(()())()')\
    \ == True\n    assert candidate('()()((()()())())(()()(()))') == True\n    assert\
    \ candidate('((()())))') == False\n    assert candidate(')(()') == False\n   \
    \ assert candidate('(') == False\n    assert candidate('((((') == False\n    assert\
    \ candidate(')') == False\n    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpdh841a3m.py\", line\
    \ 28, in <module>\n    test_check()\n  File \"/tmp/tmpdh841a3m.py\", line 26,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpdh841a3m.py\"\
    , line 12, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 8:\n        return False\n    stack = []\n    for char in brackets:\n   \
    \     if char == \"(\":\n            stack.append(char)\n        elif char ==\
    \ \")\":\n            if len(stack) == 0:\n                return False\n    \
    \        if stack.pop() != \"(\":\n                return False\n            else:\n\
    \                return True\n        else:\n            return False\n    return\
    \ False\n\ndef check(candidate):\n    assert candidate('()') == True\n    assert\
    \ candidate('(()())') == True\n    assert candidate('()()(()())()') == True\n\
    \    assert candidate('()()((()()())())(()()(()))') == True\n    assert candidate('((()())))')\
    \ == False\n    assert candidate(')(()') == False\n    assert candidate('(') ==\
    \ False\n    assert candidate('((((') == False\n    assert candidate(')') == False\n\
    \    assert candidate('(()') == False\n    assert candidate('()()(()())())(()')\
    \ == False\n    assert candidate('()()(()())()))()') == False\n\ndef test_check():\n\
    \    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp6n5_eaq9.py\", line\
    \ 40, in <module>\n    test_check()\n  File \"/tmp/tmp6n5_eaq9.py\", line 38,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp6n5_eaq9.py\"\
    , line 24, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    if len(brackets)\
    \ != 2:\n        return False\n    for idx, bracket in enumerate(brackets):\n\
    \        if bracket == \"(\":\n            continue\n        if bracket == \"\
    )\":\n            return True\n        if bracket == \"[\":\n            continue\n\
    \        if bracket == \"]\":\n            return True\n    return False\n\n\n\
    def check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpsbu6p7sy.py\", line\
    \ 37, in <module>\n    test_check()\n  File \"/tmp/tmpsbu6p7sy.py\", line 35,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpsbu6p7sy.py\"\
    , line 22, in check\n    assert candidate('(()())') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate('()') == True\n    assert candidate('(()())')\
    \ == True\n    assert candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpprt1dwp5.py\", line\
    \ 25, in <module>\n    test_check()\n  File \"/tmp/tmpprt1dwp5.py\", line 23,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmpprt1dwp5.py\"\
    , line 9, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    stack = []\n\
    \    last = None\n    for c in brackets:\n        if c == '(':\n            if\
    \ last:\n                if not stack:\n                    return True\n    \
    \            stack.pop()\n            stack.append(c)\n            last = c\n\
    \        elif c == ')':\n            if not stack:\n                return False\n\
    \            stack.pop()\n            last = c\n    if stack:\n        return\
    \ True\n    else:\n        return False\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp_s3pq0ts.py\", line\
    \ 44, in <module>\n    test_check()\n  File \"/tmp/tmp_s3pq0ts.py\", line 42,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp_s3pq0ts.py\"\
    , line 28, in check\n    assert candidate('()') == True\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
- exit_code: -1
  program: "def correct_bracketing(brackets: str) -> bool:\n    \"\"\" brackets is\
    \ a string of \"(\" and \")\".\n    return True if every opening bracket has a\
    \ corresponding closing bracket.\n\n                    \"\"\"\n    brackets_set\
    \ = set(\"()\")\n    for char in brackets:\n        if char not in brackets_set:\n\
    \            return False\n    return True\n\n\ndef check(candidate):\n    assert\
    \ candidate('()') == True\n    assert candidate('(()())') == True\n    assert\
    \ candidate('()()(()())()') == True\n    assert candidate('()()((()()())())(()()(()))')\
    \ == True\n    assert candidate('((()())))') == False\n    assert candidate(')(()')\
    \ == False\n    assert candidate('(') == False\n    assert candidate('((((') ==\
    \ False\n    assert candidate(')') == False\n    assert candidate('(()') == False\n\
    \    assert candidate('()()(()())())(()') == False\n    assert candidate('()()(()())()))()')\
    \ == False\n\ndef test_check():\n    check(correct_bracketing)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp159glhot.py\", line\
    \ 30, in <module>\n    test_check()\n  File \"/tmp/tmp159glhot.py\", line 28,\
    \ in test_check\n    check(correct_bracketing)\n  File \"/tmp/tmp159glhot.py\"\
    , line 18, in check\n    assert candidate('((()())))') == False\nAssertionError\n"
  stdout: ''
  timestamp: 1659823138
