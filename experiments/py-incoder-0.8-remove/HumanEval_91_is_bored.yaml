name: HumanEval_91_is_bored
language: py
prompt: "def is_bored(S: str) -> int:\n    \"\"\"\n    You'll be given a string of\
  \ words, and your task is to count the number\n    of boredoms. A boredom is a sentence\
  \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
  \   \n    For example:\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Hello world') == 0\n    assert\
  \ candidate('Is the sky blue?') == 0\n    assert candidate('I love It !') == 1\n\
  \    assert candidate('bIt') == 0\n    assert candidate('I feel good today. I will\
  \ be productive. will kill It') == 2\n    assert candidate('You and I are going\
  \ for a walk') == 0\n\ndef test_check():\n    check(is_bored)\n\ntest_check()\n"
completions: ["            Bored!\n            \n            I'm a bored\n       \
    \     \n            \n            I'm a bored\n            \"\"\"\n          \
    \  should return 3\n    \n    \n    >>> is_bored(\"I'm a bored\")\n    3\n   \
    \ >>> is_bored(\"It's a bored\")\n    0\n    >>> is_bored(\"I'm not a bored\"\
    )\n    Traceback (most recent call last):\n        ...\n    AssertionError: Test\
    \ failed\n    \"\"\"\n    assert S != \"\", \"S must not be empty\"\n    return\
    \ sum([1 if S.startswith(b) else 0 for b in [\"I\", \"i\", \".\", \"?\", \"!\"\
    ]])\n\n", "            Input:\n            \n            \"I am feeling sleepy.\"\
    \n            \"He likes to eat fish.\"\n            \"He thinks he's sleepy.\"\
    \n            \"Is he sleepy?\"\n            \"Is he sleepy?!\"\n            \"\
    He's sleepy!\"\n            \"He is sleepy!\"\n            \"He is sleepy!\"\n\
    \            \"He is sleepy.\"\n            \"He is sleeping.\"\n            \"\
    He is sleepy.\"\n            \"He is sleepy.\"\n            \"He is sleeping.\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"He is sleeping.\"\n            \"He's sleeping.\"\n            \"He's sleeping.\"\
    \n            \"He's sleeping.\"\n            \"He is sleeping.\"\n          \
    \  \"He's sleeping.\"\n            \"He's sleeping.\"\n            \"He's sleeping.\"\
    \n            \"He's sleeping.\"\n            \"Is he sleeping?\"\n          \
    \  \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he\
    \ sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he\
    \ sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he\
    \ sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he\
    \ sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he\
    \ sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\
    \n            \"Is he sleeping?\"\n            \"Is he sleeping?\"\n         \
    \   \"Is he sleeping?\"\n            \"Is he sleeping?\"\n            \"Is he\
    \ sleeping?\"\n            \"Is ", "        I love you!\n        It is not good\
    \ to go outside.\n        I asked him how he wants.\n        How do you do, my\
    \ friend?\n        Good afternoon, you know who I am.\n        I guess you have\
    \ a loan.\n        I love you.\n            \"\"\"\n        Output:\n        \
    \    \"\"\"\n        1 \n        2\n        1\n        1\n        0\n        0\n\
    \        1\n        1\n        \"\"\"\n    \n    # your code here\n    count =\
    \ 0\n    boredoms = [s for s in S.split('.') if s.startswith(('I', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'they', 'we', 'you', 'he', 'she', 'it', 'they', 'we', 'you', 'he',\
    \ 'she', 'it', 'the", "    >>> s = \"I bought a gallon of milk.\"\n    >>> is_bored(s)\n\
    \    1\n    >>> s = \"I bought a gallon of oil.\"\n    >>> is_bored(s)\n    0\n\
    \    \"\"\"\n    count = 0\n    words = S.split()\n    for word in words:\n  \
    \      if word.startswith(\"I\"):\n            count += 1\n    return count\n\n\
    </cell>\n<cell>", "            I saw a boredom in this park.\n            I saw\
    \ a boredom in this park. \n            I saw a boredom in this park.\n      \
    \      I saw a boredom in this park.\n            I saw a boredom in this park.\n\
    \            \"\"\"\n    returns \n            1\n            1\n            1\n\
    \            1\n            1\n    \"\"\"\n    return S.count(\"I\") + S.count(\"\
    .\")\n", "            \"What a lovely sunny day\"\n            \"Tell a joke\"\
    \n            \"What a lovely day\"\n            \"\"\"\n   \n    has one boredom,\
    \ because the sentence starts with the word \"I\".\n    \"\"\"\n    # BEGIN PROBLEM\
    \ 1\n    # initialize count_boredoms to 0\n    count_boredoms = 0\n\n    # initialize\
    \ your loop control variable as 1\n    loop_var = 1\n\n    # initialize your word\
    \ variable as S\n    word = S\n\n    # initialize your sentence variable as empty\
    \ string\n    sentence = \"\"\n\n    # while word is non-empty\n    while word\
    \ != \"\":\n        # if the first letter is 'I'\n        if word[0] == \"I\"\
    :\n            # increment the boredom count by 1\n            count_boredoms\
    \ += 1\n\n        # increment the loop control variable\n        loop_var += 1\n\
    \n        # update the word variable\n        word = S[0:loop_var]\n\n    # return\
    \ the number of boredoms\n    return count_boredoms\n    # END PROBLEM 1\n</cell>\n\
    <text>\nRun the next cell to see what happens if you call is_bored on the string\
    \ 'I love you!':\n\n\n</text>\n<cell>", "    Input: \n    I   love    you\n  \
    \  Output: 1\n\n            Input: \n    I   love      you\n    Output: 1\n\n\
    \            Input: \n    I   love  \n    Output: 0\n    \n    Constraints: \n\
    \    Each word is consist of lowercase and uppercase letters only.\n    Input\
    \ is given as a single string.\n    Output is a single integer denoting the number\
    \ of boredoms.\n\n    \"\"\"\n    boredom = 0\n    words = S.lower().split()\n\
    \    for i in range(len(words)):\n        if words[i][0] == 'i':\n           \
    \ boredom += 1\n    return boredom\n</cell>\n<cell>", "            Boredom: I\
    \ like you!\n            \"\"\"\n            \n            Input: \"I like you!\"\
    \n            Output: 3\n            \n            Input: \"I like cats!\" \n\
    \            Output: 0\n            \n            Input: \"Boredom: I like you!\"\
    \ \n            Output: 1\n    \n    Args:\n        S - a string\n    Returns:\n\
    \        an integer\n    \"\"\"\n    boredoms = 0\n    \n    boredom_words = set(['I',\
    \ 'boredom'])\n    \n    for word in boredom_words:\n        if word in S:\n \
    \           boredoms += 1\n    \n    return boredoms\n", "            I like cake\n\
    \            I hate I\n            I love cake\n            I! I hate I!\n   \
    \         I! I! love cake\n            I. I! I! love cake\n            I. I! I.\
    \ I! love cake\n            I love cake. I\n            I love cake?\n       \
    \     \"\"\"\n            should be counted as:\n            3 boredoms\n    \"\
    \"\"\n    boredom = 0\n    if S[0] == 'I':\n        boredom = 1\n    return boredom\n\
    </cell>\n<text>\nWrite a function that returns the number of boredoms in a string.\n\
    \n\n</text>\n<cell>", "            S = \"I like turtles.\"\n            S = \"\
    A bored.\"\n            S = \"I !saw a turtle! I !saw a turtle!\"\n          \
    \  S = \"I saw a turtle! I saw a turtle!\" \n            S = \"I saw a turtle\
    \ and I saw a turtle!\" \n            \"\"\"\n            Answer: 3\n        \
    \    \n    Args:\n        S (str): The sentence that you want to evaluate.\n\n\
    \    Returns:\n        int: The number of boredoms.\n    \"\"\"\n    count = 0\n\
    \    if S[0] == 'I':\n        count += 1\n    if S[0:3] == 'I.!':\n        count\
    \ += 1\n    if S[0:5] == 'I.!.':\n        count += 1\n    if S[0:5] == 'I.!?':\n\
    \        count += 1\n    if S[0:5] == 'I.!?.':\n        count += 1\n    if S[0:5]\
    \ == 'I.!?.!':\n        count += 1\n    if S[0:5] == 'I.!?.!.':\n        count\
    \ += 1\n    if S[0:5] == 'I.!?.!?.':\n        count += 1\n    if S[0:5] == 'I.!?.!?.!':\n\
    \        count += 1\n    if S[0:5] == 'I.!?.!?.!.':\n        count += 1\n    return\
    \ count\n\n", "            Sentence 1:\n            I love you.\n            I\
    \ hate you.\n            I love you.\n            I hate you.\n            I love\
    \ you.\n            I hate you.\n            Sentence 2:\n            I love you.\n\
    \            I love you.\n            I love you.\n            I love you.\n \
    \           I love you.\n            I love you.\n            Sentence 3:\n  \
    \          I love you.\n            I hate you.\n            I love you.\n   \
    \         Sentence 4:\n            I love you.\n            I hate you.\n    \
    \        I love you.\n            I love you.\n            I love you.\n     \
    \       I love you.\n            Sentence 5:\n            I hate you.\n      \
    \      I love you.\n            I love you.\n            I love you.\n       \
    \     I love you.\n            I love you.\n            I love you.\n        \
    \    Sentence 6:\n            I love you.\n            I hate you.\n         \
    \   I hate you.\n            I love you.\n            I love you.\n          \
    \  I hate you.\n            Sentence 7:\n            I love you.\n           \
    \ I hate you.\n            I love you.\n            I hate you.\n            I\
    \ love you.\n            I love you.\n            I love you.\n            I love\
    \ you.\n            I love you.\n            Sentence 8:\n            I love you.\n\
    \            I hate you.\n            I love you.\n            I love you.\n \
    \           I love you.\n            I love you.\n            I love you.\n  \
    \          I love you.\n            Sentence 9:\n            I love you.\n   \
    \         I hate you.\n            I love you.\n            I hate you.\n    \
    \        I love you.\n            I love you.\n            I love you.\n     \
    \       I love you.\n            I love you.\n            Sentence 10:\n     \
    \       I hate you.\n            I love you.\n            I love you.\n      \
    \      I love you.\n            I love you.\n            I love you.\n       \
    \     I love you.\n            I love you.\n            I love you.\n        \
    \    Sentence 11:\n            I love you.\n            I hate you.\n        \
    \    I love you.\n            I hate you.\n            I love you.\n         \
    \   I hate you.\n            I love you.\n            ", "            I bored\
    \ in my little house.\n            I don't want to go to the movies.\n       \
    \     I bored in my little house.\n            I bored in my little house.\n \
    \           I don't want to go to the movies.\n            I don't want to go\
    \ to the movies.\n            \"\"\"\n            \n            In this example,\
    \ the return value should be\n            boredoms(S) == 3\n    \"\"\"\n    count\
    \ = 0\n    for word in S:\n        if word == 'I':\n            count += 1\n \
    \   return count\n\n", "    I. Eat fish.\n    I. Try to catch fish.\n    I. Wash\
    \ fish.\n    I. Try to catch fish.\n    II. Eat fish.\n    II. Try to catch fish.\n\
    \    II. Wash fish.\n    II. Try to catch fish.\n    \n    Boredoms occur 5 times,\
    \ and all boredoms start with the word \"I\".\n    \"\"\"\n    \n    # Your code\
    \ here\n    boredoms = 0\n    for word in S.split():\n        if word.startswith(\"\
    I\"):\n            boredoms += 1\n    return boredoms\n</cell>\n<cell>", "   \
    \ Boredom is a very nice thing to say.\n    \n            I love to code\n   \
    \ \n            I love to code\n    \n            I love to code\n    \n     \
    \       I love to code\n    \n            I love to code\n    \n            I\
    \ love to code\n    \n            I love to code\n    \n            I love to\
    \ code\n    \n            I love to code\n    \n            I love to code\n \
    \   \n            I love to code\n    \n            I love to code\n    \n   \
    \         I love to code\n    \n            I love to code\n    \n           \
    \ I love to code\n    \n            I love to code\n    \n            I love to\
    \ code\n    \n            I love to code\n    \n            I love to code\n \
    \   \n            I love to code\n    \n            I love to code\n    \n   \
    \         I love to code\n    \n            I love to code\n    \n           \
    \ I love to code\n    \n            I love to code\n    \n            I love to\
    \ code\n    \n            I love to code\n    \n            I love to code\n \
    \   \n            I love to code\n    \n            I love to code\n    \n   \
    \         I love to code\n    \n            I love to code\n    \n           \
    \ I love to code\n    \n            I love to code\n    \n            I love to\
    \ code\n    \n            I love to code\n    \n            I love to code\n \
    \   \n            I love to code\n    \n            I love to code\n    \n   \
    \         I love to code\n    \n            I love to code\n    \n           \
    \ I love to code\n    \n            I love to code\n    \n            I love to\
    \ code\n    \n            I love to code\n    \n            I love to code\n \
    \   \n            I love to code\n    \n            I love to code\n    \n   \
    \         I love to code\n    \n            I love to code\n    \n           \
    \ I love to code\n    \n            I love to code\n    \n            I love to\
    \ code\n    \n            I love to code\n    \n            I love to code\n \
    \   \n            I love ", "            I   am   bored?   !\n            You\
    \   are  awful!\n            \n            Returns 2.\n             \"\"\"\n \
    \   \"\"\"\n    # your code here\n    sentences = S.split('.')\n    bored = 0\n\
    \    for sentence in sentences:\n        if \"I\" in sentence:\n            bored\
    \ += 1\n    return bored\n", "    \n\n    Given the string \"I like cats\"\n \
    \   Your function should return 1 because it's an \"I\" and a boredom.\n\n   \
    \ Given the string \"I do not like cats\"\n    Your function should return 0 because\
    \ it's not a boredom.\n    \"\"\"\n    if len(S) == 0:\n        return 0\n   \
    \ elif S[0] in (\"I\", \"i\") and len(S) > 1:\n        return 1\n    else:\n \
    \       return 0\n\n", "            I love you!\n            I love Aaron!\n \
    \           I hate you!\n            \"\"\"\n    should return 1\n   \n    Since\
    \ the string \"I love you!\" is one boredom, the function should return\n    1.\n\
    \    \"\"\"\n    count = 0\n    for w in S.split():\n        if w.startswith('I'):\n\
    \            count += 1\n    return count\n", "            I love cats!\n    \
    \        I hate dogs.\n            I love cats?\n            \"\"\"\n        \
    \    has three boredoms, whereas\n            \"\"\"\n            I love cats!\n\
    \            !I hate dogs.\n            !I love cats?\n            \"\"\"\n  \
    \          has two boredoms\n            \"\"\"\n            I love cats!\n  \
    \          I don't like cats.\n            I hate dogs?\n            \"\"\"\n\
    \            has no boredoms\n            \"\"\"\n            I love cats!\n \
    \           \"\"\"\n    \n    \n    \"\"\"\n    \n    boredoms = []\n    \n  \
    \  # Loop through string and if word begins with \"I\" add word to boredoms\n\
    \    for i in S:\n        if i.startswith(\"I\"):\n            boredoms.append(i)\n\
    \            \n    # Count elements in boredoms\n    return len(boredoms)\n  \
    \  \n", "            I love data science because I am a data scientist.\n    \
    \        I hate data science because I am a data scientist.\n            I like\
    \ to play video games because I love them.\n            I like to watch football\
    \ because I like football.\n            I like to play video games because I love\
    \ them.\n            I like to watch football because I like football.\n     \
    \       I like to play video games because I love them.\n            I like to\
    \ watch football because I like football.\n            I like to play video games\
    \ because I love them.\n            I like to watch football because I like football.\n\
    \            I like to play video games because I love them.\n            I like\
    \ to watch football because I like football.\n            I like to play video\
    \ games because I love them.\n            I like to watch football because I like\
    \ football.\n            I like to play video games because I love them.\n   \
    \         I like to watch football because I like football.\n            I like\
    \ to play video games because I love them.\n            I like to watch football\
    \ because I like football.\n            I like to play video games because I love\
    \ them.\n            I like to watch football because I like football.\n     \
    \       I like to play video games because I love them.\n            I like to\
    \ watch football because I like football.\n            I like to play video games\
    \ because I love them.\n            I like to watch football because I like football.\n\
    \            I like to play video games because I love them.\n            I like\
    \ to watch football because I like football.\n            I like to play video\
    \ games because I love them.\n            I like to watch football because I like\
    \ football.\n            I like to play video games because I love them.\n   \
    \         I like to watch football because I like football.\n            I like\
    \ to play video games because I love them.\n            I like to watch football\
    \ because I like football.\n            I like to play video games because I love\
    \ them.\n            I like to watch football because I like football.\n     \
    \       I like to play video games because I love them.\n            I like to\
    \ watch football because I like football.\n            I like to play video games\
    \ because I love them.\n            I like to watch football because I like football.\n\
    \            I like to play video games because I love them.\n            ", " \
    \   I. What's your name?\n    \n    I'm John.\n            \n    I. Hello, John.\n\
    \            \n    I! Hello, John.\n            \n    I. Hello. John, how are\
    \ you?\n            \n    No, I'm fine, thanks.\n            \n    I. Hello, John.\n\
    \    \n    I. What's your name?\n            \n            \n    I. What's your\
    \ name?\n            \n            \n    I. What's your name?\n            \n\
    \            \n    I. Hello. John, how are you?\n            \n            \n\
    \    I. Hello. John, how are you?\n            \n            \n    I. Hello. John,\
    \ how are you?\n            \n            \n    I. Hello. John, how are you?\n\
    \            \n            \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n    I. Hello. John, how are you?\n    \n    I. Hello.\
    \ John, how are you?\n    \n", "            I love you!\n            I hate you?\n\
    \            I'm sorry!\n            \"\"\"\n            has three boredoms:\n\
    \            \n            1. \"I love you!\"\n            2. \"I hate you?\"\n\
    \            3. \"I'm sorry!\"\n            \n    Write a function that takes\
    \ in a sentence (S has type str) and returns\n    a count of the number of boredoms\
    \ (as an int). boredoms sentences are\n    defined as follows:\n\n    1. \"I\"\
    \ -> 1\n    2. \"you\" -> 1\n    3. \"love\" -> 1\n    4. \"hate\" -> 1\n    5.\
    \ \"you\" -> 1\n    6. \"sorry\" -> 1\n    \"\"\"\n    \n    # Your code here\n\
    \    boredoms = S.count('I')\n    if S[0] == 'I':\n        boredoms += 1\n   \
    \ for x in S:\n        if x == '.' or x == '!' or x == '?':\n            boredoms\
    \ += 1\n    return boredoms\n", "            I went for a run\n            He\
    \ ran across a tree\n            \n            I went for a run\n            He\
    \ ran across a tree\n            \"\"\"\n            \n            returns 1\n\
    \    \"\"\"\n\n    return S.count(\"I\")\n\n", "    Input:\n            s = \"\
    Bob hit a ball\"\n    Output: \n            2\n    \n            \"\"\"\n    Args:\n\
    \            S (string): the sentence we want to split into words\n    Returns:\n\
    \            int: the number of boredoms \n    \n    \n    Examples:\n       \
    \     >>> s = '''Bob hit a ball'''\n            >>> print(is_bored(s))\n     \
    \       2\n            >>> s = '''Bob hit a ball I''' # notice how I only counted\
    \ one instance of boredom\n            >>> print(is_bored(s))\n            1\n\
    \    \"\"\"\n\n    return sum(1 for token in s.split(' ') if token.startswith('I'))\n\
    \n", "            You can't have your cake and eat it too.\n            It has\
    \ tasted good.\n            It has tasted good.\n            It has tasted good.\n\
    \            \n            I don't think you can handle it.\n            \n  \
    \          \"\"\"\n            It has tasted good.\n            It has tasted\
    \ good.\n            It has tasted good.\n            It has tasted good.\n  \
    \          \n            I don't think you can handle it.\n            I don't\
    \ think you can handle it.\n            \n            \n            Output:\n\
    \            1\n            1\n            0\n            1\n            0\n \
    \   \"\"\"\n    boredoms = []\n    \n    if S == '':\n        return 0\n    \n\
    \    S = S.lower()\n    \n    for word in S.split():\n        if word[0] == 'i':\n\
    \            boredoms.append(word)\n    \n    return len(boredoms)\n</cell>\n\
    <text>\nTask #11\nThe file \"boredom_boys.txt\" contains all of the boredom boys\
    \ listed in the Boredom Boys Wikipedia article.\nYour task is to count the number\
    \ of boredom boys in each of the three languages.\n\n\n</text>\n<cell>", "   \
    \         I. Beautiful is better than ugly.\n            1. I do not want to kill\
    \ you.\n            \n            2. All cats and dogs love me.\n            \"\
    \"\"\n            \n            In this example there are 2 boredoms:\n      \
    \      1. \"Beautiful is better than ugly\" \n            2. \"All cats and dogs\
    \ love me\"\n    \n    Print the number of boredoms in order from most to least\
    \ boredoms.\n    \"\"\"\n    boredoms = []\n    boredoms.append(S.index(\"I\"\
    ))\n    boredoms.append(S.index(\".\"))\n    boredoms.append(S.index(\"?\"))\n\
    \    boredoms.append(S.index(\"!\"))\n    boredoms = sum(boredoms)\n    return\
    \ boredoms\n</cell>\n<cell>", "            I like trains. I hate trains. I love\
    \ trains. I hate trains. I like trains.\n            I love trains. I hate trains.\
    \ I like trains. I hate trains. I like trains.\n            I like trains. I hate\
    \ trains. I love trains. I hate trains. I love trains.\n            I love trains.\
    \ I hate trains. I love trains. I hate trains. I like trains.\n            I love\
    \ trains. I hate trains. I love trains. I hate trains. I like trains.\n      \
    \      I love trains. I hate trains. I love trains. I hate trains. I like trains.\n\
    \            I love trains. I hate trains. I love trains. I hate trains. I like\
    \ trains.\n            I love trains. I hate trains. I love trains. I hate trains.\
    \ I like trains.\n            I love trains. I hate trains. I love trains. I hate\
    \ trains. I like trains.\n            I love trains. I hate trains. I love trains.\
    \ I hate trains. I like trains.\n            \"\"\"\n        \n            Returns:\n\
    \            number of boredoms: 5\n            \"\"\"\n    \"\"\"\n    There\
    \ are a few ways of going about this, but none of them are great. One way is to\n\
    \    create an array of the length of the length of the string - 1, and then fill\n\
    \    in 0 for every other index. Another way would be to simply check if the last\
    \ character of\n    the string is a period, question mark or exclamation point.\
    \ \n\n    But neither of these approaches seem very elegant, so we'll try using\
    \ regular expressions\n    \"\"\"\n    boredoms = 0\n    \n    boredom_pattern\
    \ = re.compile(r\"(?i)(?<=^|[.?!])(I)(.+)(?=\\s|[.?!]|$)\")\n\n    boredom_match\
    \ = boredom_pattern.search(S) \n    if boredom_match: \n        boredoms = 1\n\
    \        \n    return boredoms\n", "            We love python!\n            I\
    \ love python!\n            I love python!\n            We love python!\n    \
    \        \"\"\"\n            would return 3\n    \"\"\"\n    return boredom_count(S)\
    \ \n</cell>\n<cell>", "    \n    Input: \"Hello there!\"\n    Output: 4\n    \n\
    \    \n    \n    Input: \"What a great idea!\"\n    Output: 0\n    \n    \n  \
    \  \n    \n    Input: \"What a great Idea!\"\n    Output: 0\n    \"\"\"\n    \n\
    \    # Your code here!\n    boredom = 0\n    \n    \n    return boredom\n</cell>\n\
    <cell>", "            S = '.!? She is a bored man.!? She is a bored man.!? She\
    \ is a bored man. She is a bored man.!?'\n            boredoms(S) == 3\n    \"\
    \"\"\n    count = 0\n    for word in S.split(\" \"):\n        if word.startswith(\"\
    I\"):\n            count += 1\n    return count\n\n\n\"\"\"\nDON'T MODIFY ANYTHING\
    \ IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"\ntests.test_sentence_helper(sentence_length)\n\
    </cell>\n<text>\nTranslate\nThe translate function allows you to take in a english\
    \ phrase, convert it into a different language and then back again, so you can\
    \ give the phrase the name of a country and it can then translate.\n\nLet's see\
    \ some examples:\n\n\n</text>\n<cell>\ntranslate_helper('How are we doing today?')\n\
    </cell>\n<cell>\ntranslate_helper('What is the weather like in Australia?')\n\
    </cell>\n<cell>\ntranslate_helper('What is the weather like in India?')\n</cell>\n\
    <cell>\ntranslate_helper('what is the weather like in Pakistan?')\n</cell>\n<text>\n\
    As you can see we get a different translation each time.\n\nTo see this in action,\
    \ watch the Spanish video \"What is the weather like in Australia?\" vs \"what\
    \ is the weather like in India?\".\n\nYou might have noticed we used a ? at the\
    \ end of the sentence. This is a common practice in many languages (like English)\
    \ but it is not required in Sign Language Processing (SLP) and other NLP tasks.\n\
    \n\n</text>\n<text>\n2.5 Test Your Solution\nRun the cell below to test your function\n\
    \n\n</text>\n<cell>\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW\
    \ THIS LINE\n\"\"\"", "            Boredom!\n            I feel so sad and bitter\
    \ as I stood\n            I feel so sad and bitter as I stood\n            I feel\
    \ so sad and bitter as I stood\n            I feel so sad and bitter as I stood\n\
    \            I feel so sad and bitter as I stood\n            I feel so sad and\
    \ bitter as I stood\n            I feel so sad and bitter as I stood\n       \
    \     I feel so sad and bitter as I stood\n            I feel so sad and bitter\
    \ as I stood\n            I feel so sad and bitter as I stood\n            I feel\
    \ so sad and bitter as I stood\n            I feel so sad and bitter as I stood\n\
    \            I feel so sad and bitter as I stood\n            I feel so sad and\
    \ bitter as I stood\n            I feel so sad and bitter as I stood\n       \
    \     I feel so sad and bitter as I stood\n            I feel so sad and bitter\
    \ as I stood\n            I feel so sad and bitter as I stood\n            I feel\
    \ so sad and bitter as I stood\n            I feel so sad and bitter as I stood\n\
    \            I feel so sad and bitter as I stood\n            I feel so sad and\
    \ bitter as I stood\n            I feel so sad and bitter as I stood\n       \
    \     I feel so sad and bitter as I stood\n            I feel so sad and bitter\
    \ as I stood\n            I feel so sad and bitter as I stood\n            I feel\
    \ so sad and bitter as I stood\n            I feel so sad and bitter as I stood\n\
    \            I feel so sad and bitter as I stood\n            I feel so sad and\
    \ bitter as I stood\n            I feel so sad and bitter as I stood\n       \
    \     I feel so sad and bitter as I stood\n            I feel so sad and bitter\
    \ as I stood\n            I feel so sad and bitter as I stood\n            I feel\
    \ so sad and bitter as I stood\n            I feel so sad and bitter as I stood\n\
    \            I ", "    Boredom? I hate it! I wish there was a Boeing.\n    I wish\
    \ I hadn't gotten the news that a boredom was coming!\n    I wish I hadn't gotten\
    \ the news that a boredom was coming!\n    Boredom? I hate it! I wish there was\
    \ a Boeing.\n    I wish I hadn't gotten the news that a boredom was coming!\n\
    \    I wish I hadn't gotten the news that a boredom was coming!\n    Boredom?\
    \ I hate it! I wish there was a Boeing.\n    I wish I hadn't gotten the news that\
    \ a boredom was coming!\n    I wish I hadn't gotten the news that a boredom was\
    \ coming!\n    Boredom? I hate it! I wish there was a Boeing.\n    I wish I hadn't\
    \ gotten the news that a boredom was coming!\n    I wish I hadn't gotten the news\
    \ that a boredom was coming!\n    Boredom? I hate it! I wish there was a Boeing.\n\
    \    I wish I hadn't gotten the news that a boredom was coming!\n    I wish I\
    \ hadn't gotten the news that a boredom was coming!\n    Boredom? I hate it! I\
    \ wish there was a Boeing.\n    I wish I hadn't gotten the news that a boredom\
    \ was coming!\n    I wish I hadn't gotten the news that a boredom was coming!\n\
    \    Boredom? I hate it! I wish there was a Boeing.\n    I wish I hadn't gotten\
    \ the news that a boredom was coming!\n    I wish I hadn't gotten the news that\
    \ a boredom was coming!\n    Boredom? I hate it! I wish there was a Boeing.\n\
    \    I wish I hadn't gotten the news that a boredom was coming!\n    I wish I\
    \ hadn't gotten the news that a boredom was coming!\n    Boredom? I hate it! I\
    \ wish there was a Boeing.\n    I wish I hadn't gotten the news that a boredom\
    \ was coming!\n    ", "            I am bored. I am bored?\n            No\n \
    \           I am not bored. I am bored.\n            I am not bored. I am bored?\n\
    \            Yes\n            \"\"\"\n\n    INPUT:\n        S: input string of\
    \ words, with sentences delimited by \".\", \"?\", or \"!\"\n\n    OUTPUT:\n \
    \       int: number of boredoms found in the given string\n\n    Example 1:\n\
    \            Input: \"I am bored. I am bored?\"\n            Output: 4\n     \
    \       Explanation: \"I am bored\" starts with \"I\" so we count 1 boredom\n\n\
    \    Example 2:\n            Input: \"I am not bored. I am bored.\"\n        \
    \    Output: 2\n            Explanation: \"I am not bored\" starts with \"I\"\
    \ so we count 1 boredom\n\n    Example 3:\n            Input: \"I am not bored.\
    \ I am bored?\"\n            Output: 2\n            Explanation: \"I am not bored\"\
    \ starts with \"I\" so we count 1 boredom\n\n    Example 4:\n            Input:\
    \ \"I am not bored. I am bored?\"\n            Output: 2\n            Explanation:\
    \ \"I am not bored\" starts with \"I\" so we count 1 boredom\n\n    Example 5:\n\
    \            Input: \"I am not bored. I am bored?\"\n            Output: 2\n \
    \           Explanation: \"I am not bored\" starts with \"I\" so we count 1 boredom\n\
    \n    Example 6:\n            Input: \"I am not bored. I am bored?\"\n       \
    \     Output: 2\n            Explanation: \"I am not bored\" starts with \"I\"\
    \ so we count 1 boredom\n    \"\"\"\n    # BEGIN Problem here\n\n    S = S.split(\"\
    .\")\n    num = 0\n    for i in range(len(S)):\n        if S[i].startswith(\"\
    I\"):\n            num = num + 1\n    return num\n", "            I love this\
    \ sandwich.\n            I love this sandwich. and I love this sandwich?\n   \
    \         I love this sandwich!\n            I love this sandwich? I love this\
    \ sandwich!\n            I love this sandwich!\n            lol\n            \"\
    \"\"\n    has 6 boredoms:\n            'I love this sandwich',\n            'I\
    \ love this sandwich. and I love this sandwich?',\n            'I love this sandwich!',\n\
    \            'I love this sandwich? I love this sandwich!',\n            'I love\
    \ this sandwich!'\n    \"\"\"\n    boredoms = 0\n    for w in S.split():\n   \
    \     if w.lower().startswith('i'):\n            boredoms += 1\n    return boredoms\n\
    \n", "            I like to eat pizza because it is good.\n            I love\
    \ to eat pizza.\n            I like to eat pizza.\n            I like to eat pizza\
    \ because it is good.\n            I like to eat pizza because it is good.\n \
    \           I like to eat pizza because it is good.\n            \"\"\"\n    \
    \    \n        In this case, the first line is bored and all others are not.\n\
    \        The output should be:\n        boredoms: 3\n        \n        Time Complexity:\
    \ O(n)\n        \n        Space Complexity: O(n)\n        \"\"\"\n        boredoms\
    \ = 0\n        \n        length = len(S)\n        \n        for i in range(length):\n\
    \            \n            if S[i] == '.' and S[i - 1] != '?' and S[i - 1] !=\
    \ '!':\n                boredoms += 1\n            \n            elif S[i] ==\
    \ '?' and S[i - 1] != '!':\n                boredoms += 1\n            \n    \
    \        elif S[i] == '!' and S[i - 1] != '?':\n                boredoms += 1\n\
    \            \n        return boredoms\n    \n    ", "    Input:  \"I like turtles\"\
    \n    Output: 3\n            \"\"\"\n    Input:  \" I like turtles. I hate turtles.\"\
    \n    Output: 4\n            \"\"\"\n    Input:  \" I like turtles. \"\n    Output:\
    \ 0\n\n    Input:  \" I like turtles. I like turtles.\"\n    Output: 3\n    \n\
    \    Input:  \" I hate turtles. I like turtles. \"\n    Output: 4\n    \"\"\"\n\
    \    boredoms = 0\n    if S == \"\":\n        return 0\n    if \"I\" in S:\n \
    \       boredoms = 1\n    else:\n        for word in S.split():\n            if\
    \ word.startswith('I'):\n                boredoms = 1\n    return boredoms\n\n",
  "            I like you.\n            You look nice.\n            I like you.\n\
    \            I like you.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You look nice.\n            I like you.\n            You look nice.\n\
    \            I like you.\n            You look nice.\n            I like you.\n\
    \            You ", "            Input:\n            \"This is a sentence.\"\n\
    \            \"This is another sentence.\"\n            \"This is the third sentence!\"\
    \n            \"Is this a boredom?\"\n            \"Is that a boredom?\"\n   \
    \         \"What a boredom!\"\n            Output:\n            4\n          \
    \  1\n            1\n            0\n            0\n            1\n    \n    \"\
    \"\"\n    # Your code here\n    count=0\n    if S==\"I\":\n        count=count+1\n\
    \    else:\n        S=S+\".\"\n        if S==\"I\":\n            count=count+1\n\
    \        else:\n            S=S+\".\"\n            if S==\"I\":\n            \
    \    count=count+1\n            else:\n                S=S+\"!\"\n           \
    \     if S==\"I\":\n                    count=count+1\n    return count\n</cell>\n\
    <cell>", "    Input:\n            \n            We are having some trouble with\
    \ boredom.\n            \n    Output:\n            \n            0\n         \
    \   \n            Explanation:\n            \n            We have 1 boredom. \n\
    \            \n            We are having some trouble with 1 boredom.\n      \
    \      \n            We are having some trouble with 0 boredoms.\n           \
    \ \n    \n    \"\"\"\n    return boredoms(S).count(True)\n\n", "    sentence =\
    \ \"I like cats. I hate dogs.\"\n    \n    \n    boredoms = count_boredoms(sentence)\n\
    \    print(boredoms)\n    2\n    \"\"\"\n\n    boredoms = 0\n    \n    count =\
    \ 0\n    \n    for word in S.split():\n        if word.lower() == \"i\":\n   \
    \         boredoms += 1\n        \n    return boredoms\n\n", "            Hello,\
    \ Bored!\n            I, love you!\n            I, I love you!\n            \"\
    \"\"\n            has a boredom count of 3\n   \n            Hello, Bored!\n \
    \           I, don't love you!\n            I don't love you!\n            has\
    \ a boredom count of 1\n   \n    Args:\n        S: The input string\n\n    Returns:\n\
    \        returns the boredom count as a int\n    \"\"\"\n    boredoms = defaultdict(int)\n\
    \    \n    i = 0\n    while i < len(S):\n        if S[i] == '.' or S[i] == '?'\
    \ or S[i] == '!':\n            boredoms[S[i]] += 1 \n            i += 1\n    \
    \        continue\n    \n        i += 1\n        \n    return sum(boredoms.values())\n\
    </cell>\n<cell>\ntest1 = \"\"\"\nHello, Bored!\nI, love you!\nI, I love you!\n\
    \"\"\"\ntest2 = \"\"\"\nHello, Bored!\nI, don't love you!\nI don't love you!\n\
    \"\"\"\ntest3 = \"\"\"\nHello, Bored!\nI, love you!\nI, don't love you!\nI don't\
    \ love you!\nI love you!\n\"\"\"\ntest4 = \"\"\"\nHello, Bored!\nI, love you!\n\
    I, don't love you!\nI don't love you!\nI love you!\nI, love you!\n\"\"\"\ntest5\
    \ = \"\"\"\nHello, Bored!\nI, don't love you!\nI don't love you!\nI love you!\n\
    \"\"\"\ntest6 = \"\"\"\nHello, Bored!\nI, love you!\nI, don't love you!\nI don't\
    \ love you!\nI love you!\nI, don't love you!\nI don't love you!\nI love you!\n\
    \"\"\"\ntest7 = \"\"\"\nHello, Bored!\nI, love you!\nI, don't love you!\nI don't\
    \ love you!\nI love you!\nI, don't love you!\nI don't love you!\nI love you!\n\
    I, don't love you!\nI don't love you!\nI love you!\n\"\"\"\ntest8 = \"\"\"\nHello,\
    \ Bored!\nI, love you!\nI, don't love you!\nI don't love you!\nI love you!\nI,\
    \ don't love you!\nI don't love you!\nI love you!\nI, don't love you!\nI don't\
    \ love you!\nI lo", "            Hi, Im bored!\n            How's it going?\n\
    \            I'm not feeling well.\n            I work late tonight.\n       \
    \     I'm getting bored.\n            I'm sleepy. \n            Im sleepy.\n \
    \           I'm getting bored.\n            I'm sleepy. \n            Hi, Im bored!\n\
    \            How's it going?\n            I'm not feeling well.\n            I\
    \ work late tonight.\n            I'm getting bored.\n            I'm sleepy.\
    \ \n            I'm sleepy.\n            I'm getting bored.\n            I'm sleepy.\
    \ \n            \"\"\"\n    \n    So the output for this example should be:\n\
    \    \n            1\n    \"\"\"\n    \n    count = 0\n    for word in S.split():\n\
    \        if word == 'I' and len(word) > 1:\n            count += 1\n    return\
    \ count\n\n", "            I like penny. penny is very bored. penny and penny\
    \ are similar.\n            \"\"\"\n            \n            returns 1\n   \n\
    \            \n            \n            \n    Input Format\n    \n    \n    \n\
    \    \n    \n    \n    \n    Output Format\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
  "        I\n        like.\n        I'm\n        bored\n        now\n        \"\"\
    \"\n        \n    Example inputs:\n      \n    Input:\n    bored\n    Output:\n\
    \    4\n\n    Input:\n    not bored\n    Output:\n    1\n\n    Input:\n    I'm\n\
    \    bored.\n    I'm\n    not bored\n    now.\n    Output:\n    4\n\n    Input:\n\
    \    I\n    bored.\n    I'm\n    not bored\n    now.\n    Output:\n    2\n   \
    \ \"\"\"\n\n    boredoms = 0\n    splitted = S.split(\".\")\n    \n    for s in\
    \ splitted:\n        if s.startswith(\"I\"):\n            boredoms += 1\n    \n\
    \    return boredoms\n", "            i love you !\n            i love you !\n\
    \            i hate you !\n            i love you !\n            i love you !\n\
    \            i love you !\n            i hate you !\n            i hate you !\n\
    \            i hate you !\n            i love you !\n            i love you !\n\
    \            \"\"\"\n            Output:\n            3\n    \"\"\"\n    return\
    \ Counter(S).most_common()[0][0]\n\n", "        Hello, my name is John!\n    \
    \    He does not like Snoring\n        How do you do? I. \n            He is very\
    \ nervous\n            \"\"\"\n        In this case, the correct answer for this\
    \ example is 3 because \n        it starts with I, has a period, has a question\
    \ mark and has three \n        consecutive full stops.\n    \"\"\"\n    boredoms\
    \ = 0\n    \n    for word in S.split(\" \"):\n        if word.startswith(\"I\"\
    ):\n            boredoms += 1\n    \n    return boredoms\n</cell>\n<cell>", " \
    \           I love to code\n            I hate to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            I love to code\n     \
    \       I love to code\n            I love to code\n            I love to code\n\
    \            I love to code\n            I love to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            I love to code\n     \
    \       I love to code\n            I love to code\n            I love to code\n\
    \            I love to code\n            I love to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            I love to code\n     \
    \       I love to code\n            I love to code\n            I love to code\n\
    \            I love to code\n            I love to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            I love to code\n     \
    \       I love to code\n            I love to code\n            I love to code\n\
    \            I love to code\n            I love to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            I love to code\n     \
    \       I love to code\n            I love to code\n            I love to code\n\
    \            I love to code\n            I love to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            I love to code\n     \
    \       I love to code\n            I love to code\n            I love to code\n\
    \            I love to code\n            I love to code\n            I love to\
    \ code\n            I love to code\n            I love to code\n            I\
    \ love to code\n            I love to code\n            ", "            I love\
    \ you!\n            you idiot!\n            I asked a lot.\n            I love\
    \ you.\n            \"\"\"\n    has two boredoms:\n            1. \"I love you!\"\
    \ # count\n            2. \"you idiot!\" # count\n    \n    boredom_count(\"I\
    \ love you!\") \u2192 2\n    boredom_count(\"you idiot!\") \u2192 1\n    boredom_count(\"\
    I asked a lot.\") \u2192 1\n    boredom_count(\"I love you.\") \u2192 1\n    boredom_count(\"\
    I hate you!\") \u2192 0\n    \"\"\"\n    if S == \"I love you!\" or S == \"you\
    \ idiot!\":\n        return 1\n    if S == \"I asked a lot.\":\n        return\
    \ 1\n    if S == \"I love you.\" or S == \"I hate you!\":\n        return 0\n\
    \    else:\n        S = S.split(\".\")\n        boredoms = 0\n        for word\
    \ in S:\n            if word[0] == \"I\":\n                boredoms = boredoms\
    \ + 1\n        return boredoms\n", "            I shot an elephant in my pajamas\
    \ and I shot him and I shot the\n            boy.\n            I shot a boy in\
    \ my pajamas and I shot him and I shot the\n            elephant.\n          \
    \  \"\"\"\n            has three boredoms:\n            1. The first sentence\
    \ starts with \"I\", which is 1 boredom, because\n               it contains \"\
    I\".\n            2. The second sentence starts with \"I\", which is 1 boredom,\n\
    \               because it contains \"I\" and another word \"shot\".\n       \
    \     3. The third sentence starts with \"I\", which is 1 boredom, because\n \
    \              it contains \"I\" and another word \"shot\" and another word\n\
    \               \"in\".\n            \n    Write a function to compute the boredoms\
    \ in a string.\n    \n    Example 1:\n    Input: \"I shot an elephant in my pajamas\
    \ and I shot him and I shot the\n            boy.\"\n    Output: 2\n    Explanation:\
    \ The input string contains 2 boredoms because:\n            It starts with \"\
    I\" and contains \"I\" and another word \"shot\".\n            It starts with\
    \ \"I\" and contains \"I\" and another word \"shot\"\n            and another\
    \ word \"in\".\n    \n    Example 2:\n    Input: \"I shot a boy in my pajamas\
    \ and I shot him and I shot the\n            elephant.\"\n    Output: 2\n    Explanation:\
    \ The input string contains 2 boredoms because:\n            It starts with \"\
    I\" and contains \"I\" and another word \"shot\".\n            It starts with\
    \ \"I\" and contains \"I\" and another word \"shot\"\n            and another\
    \ word \"in\".\n    \n    Example 3:\n    Input: \"I shot a boy in my pajamas\
    \ and he shot him and I shot the\n            elephant.\"\n    Output: 1\n   \
    \ Explanation: The input string contains 1 boredoms because:\n            It starts\
    \ with \"I\", which contains \"I\" and another word \"shot\".\n    \"\"\"\n  \
    \  pass\n", "        I love you!\n        I love to code!\n        I love to code?\
    \ I love it!\n        What about you?\n        II love you!\n        I love you!\n\
    \        I hate you!\n        I!\n        I love you! I love you! I love you!\n\
    \        I love you! I love you!\n        I love you! I love you!\n        I love\
    \ you! I love you!\n        I love you!\n        I love you!\n        I love you!\n\
    \        I love you!\n        I!\n        \"\"\"\n            \n        Boredom:\
    \ 2\n        \n    Write a function that takes a string and returns the number\
    \ of boredoms \n    in the string.\n\n    boredoms(S) = 2\n\n    Sentences may\
    \ not end with punctuation other than '.', '!', '?'\n\n    Precondition: S has\
    \ at most 10 characters and ends with \".\" , \"!\", \"?\"\n\n    Complexity:\
    \ O(1)\n\n    Example 1:\n    Input: \"I love you!\"\n    Output: 2\n\n    Example\
    \ 2:\n    Input: \"I love you! I love you! I love you!\"\n    Output: 6\n\n  \
    \  Example 3:\n    Input: \"I love you! I love you! I love you! \"\n    Output:\
    \ 3\n    \"\"\"\n    S = list(S)\n    # Iterate through all characters except\
    \ for last one\n    for idx, char in enumerate(S):\n        if idx == len(S)-1:\n\
    \            break\n        # If the char is 'I' and previous char is 'I' then\
    \ count it\n        if char == 'I' and S[idx-1] == 'I':\n            S[idx] =\
    \ '0'\n    return int(\"\".join(S))\n</cell>\n<text>\nLet's test it out with some\
    \ sentences.\n\n\n</text>\n<cell>\nsentences = [\"I love you!\", \"I love to code!\"\
    , \"I love to code? I love it!\", \"What about you?\",\n             \"II love\
    \ you!\", \"I love you!\", \"I hate you!\", \"I!\", \"I love you! I love you!\
    \ I love you!\", \"I love you!\",\n             \"I love you! I love you!\", \"\
    I love you! I love you!\", \"I love you! I love you!\", \"I love you!\",\n   \
    \          \"I love you!\", \"", "            Sentence 1:\n            The dog\
    \ is fat\n            Sentence 2:\n            I love this dog\n            Sentence\
    \ 3:\n            I love this dog! I love this dog!\n            Sentence 4:\n\
    \            I love this dog! I love this dog!? I love this dog!? \n         \
    \   Sentence 5:\n            I love this dog! I love this dog!? I love this dog!?\
    \ I love this dog!?\n            \"\"\"\n          \n        Output:\n       \
    \     3\n            1\n            1\n            0\n            0\n        \
    \    0\n    \"\"\"\n    boredoms_count = 0\n    \n    # Your code here!\n    for\
    \ i in range(len(S)-3):\n        if S[i:i+3] == \"I\":\n            if S[i+2:i+3]\
    \ == \".\":\n                if S[i+3:] == \"!\":\n                    boredoms_count\
    \ += 1\n            else:\n                boredoms_count += 1\n    return boredoms_count\n\
    </cell>\n<cell>", "            You will see a boredom in your girlfriend that\
    \ says:\n            I, will you see a boredom in your girlfriend?\n         \
    \   \"\"\"\n        Boredoms:\n            2\n\n    However, there are some exceptions\
    \ to this rule:\n        \n        - When the word \"I\" is at the start of the\
    \ string.\n          Then you consider it to be a boredom, even if it doesn't\
    \ start\n          with a capital letter.\n          \n        - When the sentence\
    \ starts with a capital letter.\n          Then you consider it to be a boredom.\n\
    \          \n        - When the sentence doesn't start with a capital letter.\n\
    \          Then you consider it to be a boredom that starts with an I.\n     \
    \     \n        - When the sentence starts with an I.\n          Then you consider\
    \ it to be a boredom that starts with an I.\n          \n        - When you see\
    \ a boredom followed by a period,\n          then you consider it to be a boredom.\n\
    \          \n        - When you see a boredom followed by a question mark,\n \
    \         then you consider it to be a boredom.\n          \n        - When you\
    \ see a boredom followed by a exclamation mark,\n          then you consider it\
    \ to be a boredom.\n          \n        - When you see a boredom followed by a\
    \ colon,\n          then you consider it to be a boredom.\n          \n      \
    \  - When you see a boredom followed by a semicolon,\n          then you consider\
    \ it to be a boredom.\n          \n        - When you see a boredom followed by\
    \ a colon,\n          then you consider it to be a boredom.\n    \"\"\"\n    count\
    \ = 0\n    boredoms = re.findall('(?<=\\.|\\?|\\!)I', S) # match 'I' after a '.',\
    \ '?' or '!'\n    boredoms = boredoms + re.findall('I', S) # match 'I' at the\
    \ beginning of a string\n    boredoms = [boredom for boredom in boredoms if len(boredom)>0]\
    \ # filter the empty strings\n    boredoms = [boredom for boredom in boredoms\
    \ if boredom[0].isupper() # filter the empty strings\n    if boredoms:\n     \
    \   boredoms = Counter(boredoms)\n        count = max(boredoms.values())\n   \
    \ return count\n", "    Input:\n            \"Hello.\" is bored\n            \"\
    My name is bored.\" is not bored\n            \"Is this a borey or are you bored?\"\
    \ is not bored\n    \"\"\"\n    \n    return S[0] == 'I' # return the boredom\
    \ if the sentence starts with 'I'\n\nbored = count_bored(\"Hello.\") # 2\nbored\
    \ = count_bored(\"My name is bored.\") # 0\nbored = count_bored(\"Is this a borey\
    \ or are you bored?\") # 0\n</cell>\n<cell>", "            I love you!\n     \
    \       I hate you?\n            I don't like you!\n            I love you!\n\
    \            \n            Output: 5\n            \"\"\"\n    \n    \n    \"\"\
    \"\n    TODO: Write your code here\n    \"\"\"\n\n    return 0\n</cell>\n<cell>",
  "            I love this class\n            I hate this class\n            I love\
    \ this place\n            I hate this place\n            I love this place\n \
    \           I hate this place\n            I love this class\n            I hate\
    \ this class\n            \"\"\"\n    \n    Boredom = 2\n    No_Boredom = 0\n\n\
    \    return No_Boredom if S == \"I\" or S == \"i\" or S == \"!\" or S == \"?\"\
    \ else Boredom\n", "            Hello, Boredom! How about you?\n            Hello,\
    \ Boredom!\n            Hello, Boredom! How about you?\n            Hello, Boredom!\
    \ How about you?\n            Hello, Boredom! How about you?\n            Hello,\
    \ Boredom!\n            Hello, Boredom!\n            Hello, Boredom!\n       \
    \     Hello, Boredom! How about you?\n            Hello, Boredom!\n          \
    \  Hello, Boredom!\n            \"\"\"\n        has 6 boredoms.\n    \n    Write\
    \ a function that takes a string as input and returns the number\n    of boredoms.\n\
    \n    boredoms(S) -> int\n    S has n sentences. Each sentence starts with an\
    \ \"I\" and ends with a\n    \"!\"\n    \"\"\"\n    count = 0\n    for i in S:\n\
    \        if i.lower() == \"i\":\n            count = count + 1\n    return count\n\
    \n", "    >>> is_bored(\"Il est esclav\xE9 !\")\n    2\n    >>> is_bored(\"C'est\
    \ la vieille journ\xE9e de Paris\")\n    1\n    >>> is_bored(\"Il est esclav\xE9\
    \")\n    0\n    >>> is_bored(\"Il est esclav\xE9.\")\n    0\n    >>> is_bored(\"\
    Il est esclav\xE9 !.\")\n    1\n    \"\"\"\n\n    # your code here\n    return\
    \ sum([S == x for x in \"I \".split()])\n\n", "            I love you!\n     \
    \       I don't want to talk about it\n            I am just glad I am.\n    \
    \        I like to read...\n            \"\"\"\n            has two boredoms:\
    \ I like to read...\n            has one boredom: I am just glad I am.\n    \"\
    \"\"\n    boredom_count = len([x for x in S.split('.') if x[0] == 'I'])\n    return\
    \ boredom_count\n\n", "    Input: \"...I didn't like it!.\"\n    Output: 3\n \
    \           \"\"\"\n    Input: \"...I didn't like it!? That's a good thing.\"\n\
    \    Output: 4\n            \n            Note that \"...\" is not a boredom\n\
    \    \"\"\"\n    boredoms_count = 0\n    i = 0\n    while i < len(S):\n      \
    \  if S[i] == \"I\" and S[i+1] == \".\" and S[i+2] == \"!\":\n            boredoms_count\
    \ += 1\n        i += 1\n    return boredoms_count\n\n", "            The boredom\
    \ of the universe was an interesting moment in this\n            year. It was\
    \ followed by something very unusual,\n            including the notion of an\
    \ evil agent named Yuri Isaakov. Yuri\n            was the only agent who was\
    \ afraid to take his medicines. Yuri\n            was very careful and cautious\
    \ with him, and he spent a lot\n            of time with his patients, and he\
    \ was always feeling afraid.\n            He was very careful, and he is very\
    \ afraid of what happens next\n            year because of his boredom and his\
    \ disloyal.\n            \"\"\"\n            \n            For this question,\
    \ boredoms would be 0, 2, 4, 5.\n    \n    \"\"\"\n    \n    boredoms = 0 \n \
    \   for word in S.split():\n        if word == 'I':\n            boredoms += 1\n\
    \    return boredoms\n\n", "    I like animals.\n            I like dogs.\n  \
    \          I don't like cats.\n            I like apples.\n            I like\
    \ oranges.\n            I like cats.\n            I like apples!\n           \
    \ \"\"\"\n        Is bored:\n                2\n            Is not bored:\n  \
    \              4\n            How many boredom sentences does it take to write\
    \ an infinite amount of boredom sentences?\n            2\n            \n    \n\
    \    Args:\n        S (string): A string that is to be tested\n\n    Returns:\n\
    \        int: A number that represents the number of boredom sentences\n     \
    \       in the given string\n    \"\"\"\n    \n    return len([boredomSentence\
    \ for boredomSentence in boredomSentences(S)\n               if boredomSentence.startswith(\"\
    I\")])\n</cell>\n<cell>", "            I love this sandwich.\n            I love\
    \ this sandwich?\n            I love this sandwich!\n            I love this sandwich?!\n\
    \            \"\"\"\n            has 3 boredoms.\n    \n    Function Description:\n\
    \            Complete the is_bored function in the editor below. It should return\n\
    \            a count of boredoms given a list of boredom sentences.\n    \"\"\"\
    \n\n    count = 0\n\n    for sentence in S.split():\n        if sentence.startswith(\"\
    I\"):\n            count += 1\n    return count\n\n", "            Sentence 1:\
    \ \"I saw a cat. He is fat. He ate some bread.\"\n            Sentence 2: \"I\
    \ saw a cat! He is fat? He ate some bread.\"\n            Sentence 3: \"I saw\
    \ a cat. He is fat! He ate some bread.\"\n            Sentence 4: \"I saw a cat!\
    \ He is fat? He ate some bread!\"\n            Sentence 5: \"I saw a cat. He is\
    \ fat! He ate some bread!!\"\n            Sentence 6: \"I saw a cat. He is fat?\
    \ He ate some bread.\"\n            Sentence 7: \"I saw a cat! He is fat! He ate\
    \ some bread.\"\n            Sentence 8: \"I saw a cat! He is fat! He ate some\
    \ bread.\"\n            Sentence 9: \"I saw a cat! He is fat! He ate some bread!!\"\
    \n            Sentence 10: \"I saw a cat. He is fat! He ate some bread.\"\n  \
    \          Sentence 11: \"I saw a cat! He is fat? He ate some bread.\"\n     \
    \       Sentence 12: \"I saw a cat. He is fat! He ate some bread.\"\n        \
    \    Sentence 13: \"I saw a cat! He is fat? He ate some bread!\"\n           \
    \ Sentence 14: \"I saw a cat. He is fat! He ate some bread!!\"\n            Sentence\
    \ 15: \"I saw a cat! He is fat? He ate some bread.\"\n            Sentence 16:\
    \ \"I saw a cat! He is fat! He ate some bread.\"\n            Sentence 17: \"\
    I saw a cat! He is fat! He ate some bread.\"\n            Sentence 18: \"I saw\
    \ a cat! He is fat! He ate some bread!!\"\n            Sentence 19: \"I saw a\
    \ cat. He is fat! He ate some bread.\"\n            Sentence 20: \"I saw a cat!\
    \ He is fat? He ate some bread.\"\n            Sentence 21: \"I saw a cat", " \
    \           I like turtles.\n            I love turtles.\n            I hate turtles.\n\
    \            I love turtles.\n            I like turtles.\n            I like\
    \ turtles.\n            I hate turtles.\n            I hate turtles.\n       \
    \     I hate turtles.\n            I love turtles.\n            I like turtles.\n\
    \            I like turtles.\n            \"\"\"\n    Should return 1, since we\
    \ have\n            \"\"\"\n            I like turtles.\n            I love turtles.\n\
    \            I hate turtles.\n            I love turtles.\n            I like\
    \ turtles.\n            I like turtles.\n            I hate turtles.\n       \
    \     I hate turtles.\n            I hate turtles.\n            I love turtles.\n\
    \            I like turtles.\n            I like turtles.\n            \"\"\"\n\
    \    boredoms = 'I' + '.*' + '.*' + '.*' + '.*' + '.*' + '.*' + '.*' + 'I' + 'I'\n\
    \    count = 0\n    for word in S.split():\n        if re.match(boredoms, word):\n\
    \            count += 1\n    return count\n\n", "            I love you.\n   \
    \         You do not want to go to the movies.\n            You want to see the\
    \ movie.\n            Hey, are you feeling ok?\n            I love you.\n    \
    \        You want to go to the movies.\n            I love you!\n            \"\
    \"\"\n            Your program should output 5, because:\n            sentence\
    \   |   boredom\n            -----------|----------\n            \"I love you\"\
    \ |   5\n            \"You do not want to go to the movies\" | -1\n          \
    \  \"You want to see the movie.\" |   1\n            \"Hey, are you feeling ok?\"\
    \ |   1\n            \"I love you\" |   5\n            \"You want to go to the\
    \ movies\" |   1\n            \"I love you!\" |   0\n            \n    \n    Notes:\n\
    \        You may assume that there is only one boredom in each sentence.\n   \
    \     The sentence may have no boredoms.\n        Sentences containing multiple\
    \ boredoms are considered invalid.\n        \n    \n    Complexity:\n        Best\
    \ Case: O(M) for a sentence with one boredom and one non-boredom.\n        Worst\
    \ Case: O(M) for a sentence with multiple boredoms and one non-boredom.\n    \"\
    \"\"\n    boredoms = 0\n    sentence = S.split('.')\n    for sentence in sentence:\n\
    \        if sentence.lower().startswith('i'):\n            boredoms += 1\n   \
    \ return boredoms\n\n", "        Sentence 1: \"I bored this afternoon. He bore\
    \ it again.\"\n        Sentence 2: \"He bored this afternoon too and didn't bore\
    \ it.\"\n        Sentence 3: \"This was a boredom.\"\n        Sentence 4: \"I\
    \ bored this afternoon. He bored it again. He didn't bore it\"\n        Sentence\
    \ 5: \"I bored this afternoon. He bored it again. He didn't bore it.\"\n     \
    \   Sentence 6: \"I bored this afternoon. He bored it again. He didn't bore it.\"\
    \n        Sentence 7: \"I bored this afternoon. He bored it again.\"\n       \
    \ Sentence 8: \"I bored this afternoon. He bored it again.\"\n        Sentence\
    \ 9: \"I bored this afternoon.\"\n        Sentence 10: \"I bored this afternoon.\"\
    \n            \n        Output: \n        Sentence 1: 2\n        Sentence 2: 0\n\
    \        Sentence 3: 1\n        Sentence 4: 2\n        Sentence 5: 2\n       \
    \ Sentence 6: 2\n        Sentence 7: 3\n        Sentence 8: 3\n        Sentence\
    \ 9: 3\n        Sentence 10: 3\n    \n    Constraints:\n        1 <= S.length\
    \ <= 100\n        S consists of lowercase letters, spaces, '.', and '?' and '!'.\n\
    \        The string will contain punctuation, and '.' will be used only as the\
    \ sentence delimiter.\n    \"\"\"\n    boredoms = 0 \n    for i,_ in enumerate(S):\n\
    \        if S[i]=='?' or S[i]=='!':\n            boredoms += 1 \n    return boredoms\n\
    </cell>\n<text>\n6. Write a Python program to print the first N elements of a\
    \ given string S.\nInput Format: A string consisting of N elements(1 <= N <= 10^5)\n\
    Output Format: A string consisting of the first N elements of S\nSample Input:\
    \ S = \"He bored this afternoon. He bored it again.\", N = 10\nSample Output:\
    \ He bored this afternoon. He bored it again.\n\n\n</text>\n<cell>", "       \
    \     I like turtles. I hate turtles.\n            I love turtles. I hate turtles.\
    \ I love turtles.\n            \"\"\"\n    has 3 boredoms:\n            1 I like\
    \ turtles.\n            3 I love turtles.\n            1 I hate turtles.\n\n \
    \   \"\"\"\n    S = S.lower()\n    boredom = 0\n\n    if S.startswith(\"i\"):\n\
    \        boredom += 1\n    else:\n        boredom += 0\n\n    if S[0] in \"!.\"\
    and S[-1] in \"!.\":\n        boredom += 1\n\n    return boredom\n\n", "     \
    \       Boredom counting goes well with you!\n            \n            Boredom\
    \ counting is so easy!\n            \n            I love boredom counting!\n \
    \           \n            I love boredom counting.\n            \n           \
    \ Boredom is so easy!\n            \n            It's so easy!\n            \n\
    \            It is so easy!\n            \n            It's so easy!\n       \
    \     \n            It's so easy!\n            \n            It is so easy!\n\
    \            \n            Boredom counting is so easy!\n            \n      \
    \      I love boredom counting!\n            \n            I love boredom counting.\n\
    \            \n            Boredom counting goes well with you!\n            \n\
    \            Boredom counting is so easy!\n            \n            I love boredom\
    \ counting!\n            \n            I love boredom counting.\n            \n\
    \            Boredom is so easy!\n            \n            It's so easy!\n  \
    \          \n            It is so easy!\n            \n            It's so easy!\n\
    \            \n            It's so easy!\n            \n            It is so easy!\n\
    \            \n            Boredom counting is so easy!\n            \n      \
    \      I love boredom counting!\n            \n            I love boredom counting.\n\
    \            \n            Boredom counting goes well with you!\n            \n\
    \            Boredom counting is so easy!\n            \n            I love boredom\
    \ counting!\n            \n            I love boredom counting.\n            \n\
    \            Boredom is so easy!\n            \n            It's so easy!\n  \
    \          \n            It is so easy!\n            \n            It's so easy!\n\
    \            \n            It's so easy!\n            \n            It is so easy!\n\
    \            \n            Boredom counting is so easy!\n            \n      \
    \      I love boredom counting!\n            \n            I love boredom counting.\n\
    \            \n            Boredom counting goes well with you!\n            \n\
    \            Boredom counting is so easy!\n            \n            I love boredom\
    \ counting!\n            \n            I love boredom counting.\n            \n\
    \            Boredom is so easy!\n            \n            It's so easy!\n",
  "    Boredom. He is a bored. He is angry. He is bored\n    Boredom. He is a bored.\
    \ He is angry. He is bored\n    Boredom. He is a bored. He is angry. He is bored\n\
    \    \"\"\"\n    boredom = 0\n    if S[0] == 'I':\n        boredom += 1\n    return\
    \ boredom\n", "            I love this sandwich.\n            I love this sandwich?\n\
    \            I love this sandwich!\n            \"\"\"\n            has 3 boredoms.\n\
    \n    Write a function that takes in a string of words and returns the number\n\
    \    of boredoms.\n\n    HINT: Think about using a while loop that goes through\
    \ the string one character at a time.\n\n    If you encounter an \"!\", you should\
    \ immediately return 0 since there are\n    none.\n\n    If you encounter a \"\
    .\" at the end of a sentence you should immediately return\n    0 since there\
    \ aren't any boredoms after sentences.\n\n    If you encounter a \"?\" at the\
    \ end of a sentence, you should instead increase\n    the num_boredoms by 1.\n\
    \n    If you encounter a character that is not \"?\", \".\" or \"!\", you should\
    \ \n    ignore that character and continue to the next character.\n    \n    Example\
    \ 1:\n            Input: \"I love this sandwich!\"\n            Output: 2\n  \
    \          Explanation: \"I love this sandwich\" has 2 boredoms.\n\n    Example\
    \ 2:\n            Input: \"I love this sandwich. \"\n            Output: 1\n \
    \           Explanation: \"I love this sandwich.\" has 1 boredoms.\n\n    Example\
    \ 3:\n            Input: \"I love this sandwich?\"\n            Output: 2\n  \
    \          Explanation: \"I love this sandwich?\" has 2 boredoms.\n\n    Example\
    \ 4:\n            Input: \"I love this sandwich.\"\n            Output: 1\n  \
    \          Explanation: \"I love this sandwich.\" has 1 boredoms.\n\n    \"\"\"\
    \n    num_boredoms = 0\n    i = 0\n    while i < len(S):\n        if S[i] == \"\
    .\":\n            return 0\n        elif S[i] == \"?\":\n            num_boredoms\
    \ += 1\n        elif S[i] == \"!\":\n            return 0\n        i += 1\n  \
    \  return num_boredoms\n</cell>\n<cell>", "            \"Is your car going fast?\"\
    \ -> \"I\" boredom\n            \"I drive an aeroplane\" -> \"I\" boredom\n  \
    \          \"I love my plane\" -> \"I\" boredom\n            \"I am tired of my\
    \ plane.\" -> \"I\" boredom\n            \"I feel tired and greedy.\" -> \"I\"\
    \ boredom\n            \"I am tired and greedy.\" -> \"I\" boredom\n         \
    \   \"\"\"\n        \n    Arguments:\n        S -- a string\n    \n    Returns:\n\
    \        int -- the number of boredoms \n    \"\"\"\n    return boredomCount(S,\
    \ 'I', '.')\n", "            I liked this because I loved it.\n            I did\
    \ not like this because I hated it.\n            I did not like this because I\
    \ hated it.\n            I did not like this because I hated it.\n           \
    \ I liked this because I loved it.\n            \"\"\"\n    should return\n  \
    \         5\n        \n    Instructions:\n            Implement the is_bored function\
    \ in the editor below.\n            \n    Hint:\n            Once you have computed\
    \ the number of boredoms, you may\n            return it. But your function should\
    \ return the boredoms as\n            an integer. Do not return a list.\n    \"\
    \"\"\n    pass\n    \n    \n@edit_distance", "            I liked this movie.\n\
    \            I didn't like this movie because it's so bad.\n            I liked\
    \ this movie because it was good.\n            I did not like this movie because\
    \ it's so bad.\n            I did not like this movie because it's so bad.\n \
    \           \"\"\"\n        has two boredoms:\n            1. the sentence 'I\
    \ liked this movie.' has two boredoms\n            2. 'I did not like this movie\
    \ because it's so bad.' has one boredom\n    \n    Input:\n            S: a list\
    \ of strings, where each string is a sentence.\n    Output:\n            an integer:\
    \ the number of boredoms present in the given string.\n    \"\"\"\n    boredoms\
    \ = 0\n    for sentence in S:\n        if sentence.startswith('I'):\n        \
    \    boredoms += sentence.count('.') + sentence.count('?') + sentence.count('!')\n\
    \    return boredoms\n    ", "            I asked him a question.  What is his\
    \ question?\n            \n            A. I am sick\n            B. I do not know\n\
    \            C. I do not know\n            D. My dad likes to eat cupcake.\n \
    \           \n            Enter word: I\n            \n            Enter word:\
    \ am\n            \n            Enter word: a\n            \n            Enter\
    \ word: question\n            \n            Enter word: ?\n            \n    \
    \        Enter word: A\n            \n            Enter word: C\n            \n\
    \            Enter word: !\n            \n            Enter word: \n         \
    \   \n            Enter word: \n            \n            Enter word: \n     \
    \       \n            Enter word: \n            \n            Enter word: \n \
    \           \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word:\
    \ \n            \n            Enter word: \n            \n            Enter word",
  "            I love Python. Python is awesome. \n            I love Python. Python\
    \ is awesome. \n            I hate you! Please love Python.\n            \"\"\"\
    \n    should return 2 for the above input. \n    \n    \n    Precondition:\n \
    \           1 <= len(S) <= 10000\n            S consists only of letters and '!'\
    \ or '?' or '.'\n    \"\"\"\n    return count_boredoms(S)\n    ", "          \
    \  I, love, dogs! \n            I, love, cats.\n            I, love, cats!\n \
    \           I.love.cats\n            !\n            !\n            !\n       \
    \     !\n            !\n            \n            Oops, cats are missing.\n  \
    \          \n            What is wrong? :(\n            \"\"\"\n    \n    Input:\n\
    \            S = str\n            \n    Output:\n            int\n    \"\"\"\n\
    \    \n    boredoms = []\n    \n    for word in S.split():\n        if word.lower().startswith('i'):\n\
    \            boredoms.append(word)\n            \n    boredoms = Counter(boredoms)\n\
    \    \n    return boredoms[True]\n</cell>\n<cell>", "            'I love python!'\n\
    \            'I hate python!?'\n            'I love python!.?'\n            'I\
    \ love python!?.!'\n            'I love python.'\n            'I love python.!'\n\
    \            \n    Should return [1,1,1,0].\n            \"\"\"\n\n    bored_list\
    \ = []\n    count = 0\n    bored_count = 0\n    bored_list = []\n    for char\
    \ in S:\n        if char == 'I':\n            count = count + 1\n            bored_list.append(count)\n\
    \        if char == '.':\n            count = count + 1\n            bored_list.append(count)\n\
    \        if char == '!':\n            count = count + 1\n            bored_list.append(count)\n\
    \        if char == '?':\n            count = count + 1\n            bored_list.append(count)\n\
    \    bored_list_size = len(bored_list)\n    if bored_list_size == 0:\n       \
    \ return 0\n    if bored_list_size == 1:\n        return bored_list[0]\n    if\
    \ bored_list_size == 2:\n        return bored_list[0] + 1\n    if bored_list_size\
    \ == 3:\n        return bored_list[0] + bored_list[1] + 1\n    if bored_list_size\
    \ == 4:\n        return bored_list[0] + bored_list[1] + bored_list[2] + 1\n  \
    \  if bored_list_size == 5:\n        return bored_list[0] + bored_list[1] + bored_list[2]\
    \ + bored_list[3] + 1\n    if bored_list_size == 6:\n        return bored_list[0]\
    \ + bored_list[1] + bored_list[2] + bored_list[3] + bored_list[4] + 1\n    if\
    \ bored_list_size == 7:\n        return bored_list[0] + bored_list[1] + bored_list[2]\
    \ + bored_list[3] + bored_list[4] + bored_list[5] + 1\n    \n    if bored_list_size\
    \ == 8:\n        return bored_list[0] + bored_list[1] + bored_list[2] + bored_list[3]\
    \ + bored_list[4] + bored_list[5] + bored_list[6] + 1\n\n    ", "            ...\
    \ I went .\n            ... I did not . \n            ... I went? ...\n      \
    \      ... I went ! ...\n            ... I went!\n            ... I did not !\
    \ ...\n            ... I did not go\n            ... I went .\n            \"\"\
    \"\n            \n            should return 4.\n            \n            Note:\
    \ Assume that the input consists of valid sentences.\n            You may assume\
    \ that there will never be punctuation.\n            Assume sentence endings are\
    \ '!'.\n   \n    Write a function:\n        def is_bored(S: str) -> int\n    that,\
    \ given a string, returns the number of boredoms it contains.\n    \"\"\"\n  \
    \  count = 0\n    boredoms = [\"I\"]\n    for sentence in S.split(\". \"):\n \
    \       for word in boredoms:\n            if word == sentence[0:len(word)]:\n\
    \                count += 1\n    return count\n\n", "            'I am feeling\
    \ very sad and bored'\n            'I am sad and bored'\n            'I am feeling\
    \ bored'\n            'I am sad and feeling very bored'\n            'I am feeling\
    \ bored and feeling'\n            'I am bored and feeling very sad and feeling'\n\
    \            'I am bored and sad and feeling very bored'\n            'I am feeling\
    \ very sad and feeling very bored'\n            'I am feeling very bored'\n  \
    \          'I am feeling very sad and feeling very bored and feeling'\n      \
    \      'I am bored and feeling very sad and feeling very bored and feeling'\n\
    \            'I am bored and feeling very sad and feeling very bored and feeling\
    \ very sad and feeling very bored and feeling very sad and feeling very bored\
    \ and feeling very sad and feeling very bored and feeling very sad and feeling\
    \ very bored and feeling very sad and feeling very bored and feeling very sad\
    \ and feeling very bored and feeling very sad and feeling very bored and feeling\
    \ very sad and feeling very bored and feeling very sad and feeling very bored\
    \ and feeling very sad and feeling very bored and feeling very sad and feeling\
    \ very bored and feeling very sad and feeling very bored and feeling very sad\
    \ and feeling very bored and feeling very sad and feeling very bored and feeling\
    \ very sad and feeling very bored and feeling very sad and feeling very bored\
    \ and feeling very sad and feeling very bored and feeling very sad and feeling\
    \ very bored and feeling very sad and feeling very bored and feeling very sad\
    \ and feeling very bored and feeling very sad and feeling very bored and feeling\
    \ very sad and feeling very bored and feeling very sad and feeling very bored\
    \ and feeling very sad and feeling very bored and feeling very sad and feeling\
    \ very bored and feeling very sad and feeling very bored and feeling very sad\
    \ and feeling very bored and feeling very sad and feeling very bored and feeling\
    \ very sad and feeling very bored and feeling very sad and feeling very bored\
    \ and feeling very sad and feeling very bored and feeling very sad and feeling\
    \ very bored and feeling very sad and feeling ", "    Welcome to Boredom.\n  \
    \  I hope you are having a great day!\n    I'll be back soon and let you know\
    \ about your greatness.\n            \"\"\"\n    has three boredoms:\n    I hope\
    \ you are having a great day!\n    I'll be back soon and let you know about your\
    \ greatness.\n    \"\"\"\n\n    boredoms = 0\n\n    for sentence in S.split('.'):\n\
    \        for word in sentence.split():\n            if word.upper() == 'I':\n\
    \                boredoms += 1\n    \n    return boredoms\n</cell>\n<text>\nSolution\n\
    There are many ways to solve this problem. This solution takes into account the\
    \ multiple delimiters, and keeps it simple. There are also two functions we may\
    \ want to use, a function to determine if the delimiter is present in a string,\
    \ and a function to split the string into an array.\n\n\n</text>\n<cell>", " \
    \           Input:\n            Output: 1\n            \n            Input:\n\
    \            Output: 0\n            \n            Input:\n            Output:\
    \ 0\n            \n            Input:\n            Output: 0\n            \n \
    \           Input:\n            Output: 1\n            \n            Input:\n\
    \            Output: 2\n            \n            Input:\n            Output:\
    \ 3\n            \n            Input:\n            Output: 4\n            \n \
    \           Input:\n            Output: 5\n            \n            Input:\n\
    \            Output: 6\n            \n            Input:\n            Output:\
    \ 7\n            \n            Input:\n            Output: 8\n            \n \
    \           Input:\n            Output: 9\n            \n            Input:\n\
    \            Output: 10\n            \n            Input:\n            Output:\
    \ 11\n            \n            Input:\n            Output: 12\n            \n\
    \            Input:\n            Output: 13\n            \n            Input:\n\
    \            Output: 14\n            \n            Input:\n            Output:\
    \ 15\n            \n            Input:\n            Output: 16\n            \n\
    \            Input:\n            Output: 17\n            \n            Input:\n\
    \            Output: 18\n            \n            Input:\n            Output:\
    \ 19\n            \n            Input:\n            Output: 20\n            \n\
    \            Input:\n            Output: 21\n            \n            Input:\n\
    \            Output: 22\n            \n            Input:\n            Output:\
    \ 23\n            \n            Input:\n            Output: 24\n            \n\
    \            Input:\n            Output: 25\n            \n            Input:\n\
    \            Output: 26\n            \n            Input:\n            Output:\
    \ 27\n            \n            Input:\n            Output: 28\n            \n\
    \            Input:\n            Output: 29\n            \n            Input:\n\
    \            Output: 30\n            \n            Input:\n            Output:\
    \ 31\n            \n            Input:\n            Output: 32\n            \n\
    \            Input:\n            Output: 33\n            \n            Input:\n\
    \            Output: 34\n            \n            Input:\n            Output:\
    \ 35\n            \n            Input:\n            Output: 36\n            \n\
    \            Input:\n            Output: 37\n            \n            Input:\n\
    \            Output: 38\n            \n            Input:\n            Output:\
    \ 39\n            \n            Input:\n            Output: 40\n            \n\
    \            Input:\n            Output: 41\n            \n            Input:\n\
    \            Output: 42\n            \n            Input:\n            Output:\
    \ 43\n            \n            ", "            The dog barked loudly upon the.\
    \ {This dog barked loudly.}\n            How old is the man? 5.\n            \"\
    \"\"\n        \n            In this case, our dog barked loudly upon the. is boredom,\
    \ \n            the man is boredom, and the 5.. is not boredom.\n   \n    Write\
    \ a function:\n            boredom_count(S) \n        that takes in a string S\
    \ and returns an integer counting the number\n        of boredoms in S.\n    \"\
    \"\"\n    S = S.lower()\n    boredoms = 0\n    for i in range(len(S)):\n     \
    \   if S[i] in \"i\" and S[i-1] not in \".\" and S[i+1] not in \".\" and S[i+2]\
    \ not in \".\":\n            boredoms += 1\n    return boredoms\n</cell>\n<cell>",
  "            I bore you!\n            I bore you!\n            I wonder how many\
    \ boredoms I have!\n            I bore you!\n            I wonder how many boredoms\
    \ I have!\n            \"\"\"\n        \n    will be counted as follows:\n   \
    \ \n            I bore you!\n            I bore you!\n            I wonder how\
    \ many boredoms I have!\n            I bore you!\n            I wonder how many\
    \ boredoms I have!\n            I wonder how many boredoms I have!\n         \
    \   I wonder how many boredoms I have!\n            I wonder how many boredoms\
    \ I have!\n            I wonder how many boredoms I have!\n            I wonder\
    \ how many boredoms I have!\n            I wonder how many boredoms I have!\n\
    \            I wonder how many boredoms I have!\n            I wonder how many\
    \ boredoms I have!\n            I wonder how many boredoms I have!\n         \
    \   I wonder how many boredoms I have!\n            I wonder how many boredoms\
    \ I have!\n            I wonder how many boredoms I have!\n            I wonder\
    \ how many boredoms I have!\n            I wonder how many boredoms I have!\n\
    \            I wonder how many boredoms I have!\n            I wonder how many\
    \ boredoms I have!\n            I wonder how many boredoms I have!\n         \
    \   I wonder how many boredoms I have!\n            I wonder how many boredoms\
    \ I have!\n            I wonder how many boredoms I have!\n            I wonder\
    \ how many boredoms I have!\n            I wonder how many boredoms I have!\n\
    \            I wonder how many boredoms I have!\n            I wonder how many\
    \ boredoms I have!\n            I wonder how many boredoms I have!\n         \
    \   I wonder how many boredoms I have!\n            I wonder how many boredoms\
    \ I have!\n            I wonder how many boredoms I have!\n            I wonder\
    \ how many boredoms I have!\n            I wonder how many boredoms I have!\n\
    \            I wonder how many boredoms I have!\n            I won", "       \
    \     I,am,I,am,an,boredom.\n            I,am,an,boredom.\n            I,am,an,boredom.\n\
    \            I,am,an,boredom.\n            I,am,an,boredom.\n            I,am,an,boredom.\n\
    \            I,am,an,boredom.\n            \"\"\"\n            \n\n    The following\
    \ example should output 4, as explained above.\n\n            boredom = 4\n  \
    \  \"\"\"\n    count = 0\n    \n    # code goes here\n    for i in S:\n      \
    \  if i.startswith(\"I\"):\n            count += 1\n    return count\n</cell>\n\
    <text>\nRun the next cell to test your code.\n\n\n</text>\n<cell>\n\"\"\"\nDON'T\
    \ MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"", "        Hello,\
    \ world!\n        I love you!\n        I love you!\n        I love you!\n    \
    \    I am so happy today.\n        I love you!\n        I love you!\n        I\
    \ love you!\n        I love you!\n        I love you!\n        I love you!\n \
    \       I love you!\n        I am so happy today.\n        I love you!\n     \
    \   I love you!\n        I love you!\n        I love you!\n        I love you!\n\
    \        I love you!\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I love you!\n        I am so happy today.\n    \
    \    I love you!\n        I am so happy today.\n        I love you!\n        I\
    \ am so happy today.\n        I lo", "    I shot an elephant in my pajamas .\n\
    \    I shot a rabbit in my pajamas .\n    I shot a shovel in my pajamas .\n  \
    \  I shot a frog in my pajamas .\n    I shot a monkey in my pajamas .\n    I shot\
    \ a dog in my pajamas .\n    I shot an owl in my pajamas .\n    I shot a sheep\
    \ in my pajamas .\n    I shot a cow in my pajamas .\n    I shot a camel in a yak\
    \ .\n    I shot a crocodile in a yak .\n    I shot a dog in a yak .\n    I shot\
    \ a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n\
    \    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in\
    \ a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot\
    \ a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n\
    \    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in\
    \ a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot\
    \ a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n\
    \    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in\
    \ a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot\
    \ a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n\
    \    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in\
    \ a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n    I shot\
    \ a dog in a yak .\n    I shot a dog in a yak .\n    I shot a dog in a yak .\n\
    \    I shot a dog in a yak .\n    I shot a dog in a yak .\n", "            Hello,\
    \ I am Bored\n            Hello, I am Bored?\n            Hello, I am Bored!\n\
    \            Hello, I am Bored!?\n            Hello, I am Bored!?!\n         \
    \   Hello, I am Bored!?!?\n            Hello, I am Bored!?!?!\n            \"\"\
    \"\n            \n            In this case, there are 9 boredoms.\n          \
    \  \n            Write a program that counts how many boredoms the sentence has.\n\
    \            \n            INPUT:\n                    - A string of sentences\n\
    \            OUTPUT:\n                    - The number of boredoms\n         \
    \   \"\"\"\n        \n    \"\"\"\n    boredom = 0\n    i = len(S) - 1\n    while\
    \ i >= 0:\n        if S[i] == \" \" or S[i] == \"?\" or S[i] == \"!\" or S[i]\
    \ == \"'\" or S[i] == \",\" or S[i] == \"#\" or S[i] == \"@\" or S[i] == \"$\"\
    \ or S[i] == \"%\" or S[i] == \"^\" or S[i] == \"&\" or S[i] == \"*\" or S[i]\
    \ == \"(\" or S[i] == \")\" or S[i] == \"_\" or S[i] == \"+\" or S[i] == \":\"\
    \ or S[i] == \"{\" or S[i] == \"}\" or S[i] == \":\" or S[i] == \"'\" or S[i]\
    \ == \"[\" or S[i] == \"]\" or S[i] == \"/\" or S[i] == \"<\" or S[i] == \">\"\
    \ or S[i] == \"|\" or S[i] == \"\\\\\" or S[i] == \"'\" or S[i] == \"~\" or S[i]\
    \ == \"`\" or S[i] == \"[\" or S[i] == \"{\" or S[i] == \"|\" or S[i] == \",\"\
    \ or S[i] == \"!\" or S[i] == \".\" or S[i] == \"?\" or S[i] == \"!\" or S[i]\
    \ == \"#\" or S[i] == \"@\" or S[i] == \"$\" or S[i] == \"%\" or S[i] == \"^\"\
    \ or S[i] == \"&\" or S[i] == \"*\" or S[i] == \"(\" or S[i] == \")\" or S[i]\
    \ == \"_\" or S[i] == \"+\" or S[i] == \":\" or S[i] == \"{\" or S[i] == \"}\"\
    \ or S[i] == \":\" or S[i] == \"'\" or S[i] == \"[\" or S[i] == \"]\" or S[i]\
    \ == \"/\" or S[i] == \"<\" or S[i] == \">\" or S[i] == \"|\" or S[i] == \"\\\\\
    \" or S[i] == \"'\" or S[i] == \"~\" or S[i] == \"`\" or S[i] == \"[\" or S[i]\
    \ == \"{\" or S[i] == \"|\" or S[i] == \",\" or S[i] == \"!\" or S[i] == \".\"\
    \ or S[i] == \"?\" or S[i] == \"!\" or S[i] == \"#\" or S[i] == \"@\" or S[i]\
    \ == \"$\" or S[i] == \"%\" or S[i] == \"^\" or S", "            I saw a fox.\n\
    \            I saw a fox!\n            I saw a fox?\n            I saw a fox!?\n\
    \            I saw a fox?!\n            I saw a fox!?!\n            \"\"\"\n \
    \           I  saw  a  fox.\n            I  saw  a  fox!\n            I  saw \
    \ a  fox?\n            I  saw  a  fox!?\n            I  saw  a  fox?!\n      \
    \      I  saw  a  fox!?!\n    \"\"\"\n    return len([x for x in S if x.lower()\
    \ == 'i'])\n", "            I liked you.\n            I hated you.\n         \
    \   I hated yall.\n            I liked yall too.\n            \"\"\"\n       \
    \     -> 2\n           \n    There are many valid boredoms. You may return any\
    \ of the following:\n            'hated', 'liked', 'yall', 'too'\n           \
    \ 'I hated you.', 'I hated yall.', 'I liked yall too.'\n            \n    Follow\
    \ up:\n            Could you try a general method to solve this problem?\n   \
    \ \n    Follow up:\n            Could you solve this using a regex?\n    \"\"\"\
    \n    boredom_dict = {}\n    boredom_dict_str = ''\n    i = 0\n    while i < len(S):\n\
    \        if S[i] in '.?!':\n            boredom_dict_str += S[i]\n        if S[i]\
    \ == '.':\n            if boredom_dict.get(boredom_dict_str) is None:\n      \
    \          boredom_dict[boredom_dict_str] = [1, i]\n                i += 1\n \
    \               boredom_dict_str = ''\n        else:\n            if boredom_dict_str\
    \ == '':\n                boredom_dict_str = S[i]\n            else:\n       \
    \         boredom_dict[boredom_dict_str] += 1\n                i += 1\n    \n\
    \    return boredom_dict[boredom_dict_str][0]\n\n", "            I love you.\n\
    \            I hate you.\n            We are having an awesome day.\n        \
    \    \"\"\"\n        Your function will return the integer 3.\n    \n    Args:\n\
    \        S: a string containing sentences.\n    Returns:\n        the number of\
    \ boredoms in S.\n    \"\"\"\n\n    boredoms = []\n    boredom = 0\n\n    for\
    \ word in S:\n        if word == \"I\" or word == \"i\":\n            boredoms.append(boredom)\n\
    \            boredom = 0\n        else:\n            boredom += 1\n\n    return\
    \ boredoms[0]\n", "            I bored the barn drank the bartender\n        \
    \    \"\"\"\n    \n    boredoms has the following format: \"boredoms.txt\"\n \
    \   \n    Input:\n            S: string made up of sentences. A sentence is a\
    \ string which\n            ends in '.', '?' or '!'.\n    \n    Output: an integer\n\
    \    \n    Hints: \n            S will contain multiple sentences separated by\
    \ '.', '?' or '!'.\n            \n    Example:\n            Input:\n         \
    \           S = \"I bored the barn drank the bartender\"\n            Output:\n\
    \                    2\n            Explanation: there are 2 boredoms in the string\n\
    \    \"\"\"\n    S = S.split()\n    count = 0\n    for sent in S:\n        if\
    \ sent.startswith('I'):\n            count += 1\n    return count\n", "      \
    \      \"Hello Boredom? Hello Boredom! Hello Boredom. Hello Boredom!\"\n   \n\
    \            \"How are boredom's today? I wonder?\"\n   \n            \"What is\
    \ today's boredom? I wonder!\"\n   \n            \"How are boredom's today?! I\
    \ wonder!\" \n    \"\"\"\n    bored = 0\n\n    for word in S:\n        if word\
    \ == '.' or word == '?' or word == '!':\n            bored += 1\n\n    return\
    \ bored\n\n", "    Input:\n            Input: S = \"I like apple. I am bored.\"\
    \n            Output: 2\n            Explanation: The sentence \"I am bored\"\
    \ has 2 boredoms (sentences \n            that start with \"I\").\n          \
    \  \"\"\"\n\n    S1 = S.split(\".\")\n    S2 = S.split(\"?\")\n    S3 = S.split(\"\
    !\")\n    boredom = 0\n    i = 0\n    \n    while i < (len(S1)):\n        if S1[i]\
    \ == \"I\":\n            boredom += 1\n        i += 1\n    \n    while i < (len(S2)):\n\
    \        if S2[i] == \"I\":\n            boredom += 1\n        i += 1\n    \n\
    \    while i < (len(S3)):\n        if S3[i] == \"I\":\n            boredom +=\
    \ 1\n        i += 1\n    \n    return boredom\n", "            I bored?\n    \
    \        I bored!\n            I didn't bore!\n            Bored the dog!\n  \
    \          \n            I didn't bore!\n            I bored to dinner with Tom.\n\
    \            \n            I didn't bore!\n            I didn't bore!\n      \
    \      I didn't bore!\n            \"\"\"\n            \n        should return\
    \ 3\n    \"\"\"\n    boredoms = 0\n    \n    boredoms += S.count(\"I\")\n    \n\
    \    return boredoms \n", "            I love Python. How are you? I'm fine!\n\
    \            Boredom = 2\n            \"\"\"\n    \n    \n    Your code should\
    \ return \"2\", the number of boredoms found in the sentence\n    \"\"\"\n   \
    \ return S.count('I')\n", "            I like I!\n            I like I.\n    \
    \        I like I?\n            I like I!?\n            \"\"\"\n        There\
    \ are two boredoms in these sentences: 1 and 2.\n   \n    Arguments:\n       \
    \ S {str} -- The sentence you want to count the boredom from.\n    \n    Returns:\n\
    \        int -- The amount of boredoms found in the string.\n    \"\"\"\n    count\
    \ = 0\n    boredoms = S.split('.')\n    for boredom in boredoms:\n        if boredom[0]\
    \ == 'I':\n            count += 1\n    return count\n\n", "        I went to the\
    \ store to buy some apples.\n        I went to the shop to buy some drinks.\n\
    \        I went to the shop to buy some eggs.\n        I went to the store to\
    \ buy some coffee.\n        I went to the store to buy some drinks.\n        I\
    \ went to the shop to buy some coffee.\n        I went to the shop to buy some\
    \ drinks.\n        I went to the store to buy some coffee.\n        I went to\
    \ the store to buy some apples.\n        I went to the shop to buy some drinks.\n\
    \        I went to the shop to buy some eggs.\n        I went to the store to\
    \ buy some coffee.\n        I went to the shop to buy some drinks.\n        I\
    \ went to the store to buy some apples.\n        I went to the shop to buy some\
    \ drinks.\n        I went to the shop to buy some eggs.\n        I went to the\
    \ store to buy some coffee.\n        I went to the store to buy some drinks.\n\
    \        I went to the shop to buy some coffee.\n        I went to the shop to\
    \ buy some drinks.\n        I went to the store to buy some coffee.\n        I\
    \ went to the store to buy some apples.\n        I went to the shop to buy some\
    \ drinks.\n        I went to the shop to buy some eggs.\n        I went to the\
    \ store to buy some coffee.\n        I went to the store to buy some drinks.\n\
    \        I went to the shop to buy some coffee.\n        I went to the shop to\
    \ buy some drinks.\n        I went to the store to buy some coffee.\n        I\
    \ went to the store to buy some apples.\n        I went to the shop to buy some\
    \ drinks.\n        I went to the shop to buy some eggs.\n        I went to the\
    \ store to buy some coffee.\n        I went to the store to buy some drinks.\n\
    \        I went to the shop to buy some coffee.\n        I went to the shop to\
    \ buy some drinks.\n        I went to the store to buy some coffee.\n        I\
    \ went to the store to buy some apples.\n        I went to the shop to buy some\
    \ drinks.\n        I went to the shop to buy some eggs.\n        I went to the\
    \ store to buy some coffee.\n        I went to the store ", "            He is\
    \ bored. She is bored. She is bored. She is bored.\n            He is bored. She\
    \ is bored. She is bored. She is bored.\n            She is bored. She is bored.\
    \ She is bored. She is bored.\n            She is bored. She is bored. She is\
    \ bored. She is bored.\n            She is bored. She is bored. She is bored.\
    \ She is bored.\n            She is bored. She is bored. She is bored. She is\
    \ bored.\n            She is bored. She is bored. She is bored. She is bored.\n\
    \            She is bored. She is bored. She is bored. She is bored.\n       \
    \     She is bored. She is bored. She is bored. She is bored.\n            She\
    \ is bored. She is bored. She is bored. She is bored.\n            She is bored.\
    \ She is bored. She is bored. She is bored.\n            She is bored. She is\
    \ bored. She is bored. She is bored.\n            She is bored. She is bored.\
    \ She is bored. She is bored.\n            She is bored. She is bored. She is\
    \ bored. She is bored.\n            She is bored. She is bored. She is bored.\
    \ She is bored.\n            She is bored. She is bored. She is bored. She is\
    \ bored.\n            She is bored. She is bored. She is bored. She is bored.\n\
    \            She is bored. She is bored. She is bored. She is bored.\n       \
    \     She is bored. She is bored. She is bored. She is bored.\n            She\
    \ is bored. She is bored. She is bored. She is bored.\n            She is bored.\
    \ She is bored", "            Boredom = 1\n            I love you.\n         \
    \   \"\"\"\n            \n    The string \"Boredom\" should return 1\n    The\
    \ string \"I love you!\" should return 2\n    The string \"I love you.\" should\
    \ return 1\n    The string \"I love you\" should return 1\n\n    Your code will\
    \ print the boredom count in the end.\n\n    Constraints:\n\n    S contains only\
    \ lowercase letters 'a' through 'z', digits, '.', '?', '!', and at most 100 words.\n\
    \    \"\"\"\n    # Initialize variables\n    boredom = 0\n\n    # Your code here!\n\
    \    # Loop through the string\n    # Check if the word starts with \"I\"\n  \
    \  # Add the number to the variable boredom\n    for word in S:\n        if word[0]==\"\
    I\":\n            boredom+=1\n    # Print the result\n    print(boredom)\n\n",
  "            I like turtles.\n            I hate turtles.\n            I like turtles\
    \ a lot.\n            I hate turtles a lot.\n            I like turtles! I hate\
    \ turtles! I like turtles.\n            \"\"\"\n    Args:\n        S(str): a string\n\
    \n    Returns:\n        int: number of boredoms\n    \"\"\"\n    # Write your\
    \ code here\n    boredom = 0\n    for word in S.split(\" \"):\n        if word.startswith(\"\
    I\"):\n            boredom += 1\n    return boredom\n</cell>\n<cell>", "     \
    \       I'm a boredom.\n            I'm an immortal man.\n            You can't\
    \ go alone.\n            \"\"\"\n    has two boredoms.\n    \"\"\"\n    boredoms\
    \ = 0\n    boredoms_list = [\n        'I',\n        'me',\n        'my',\n   \
    \     'myself',\n        'you',\n        'your',\n        'yourself',\n      \
    \  'he',\n        'him',\n        'his',\n        'himself',\n        'she',\n\
    \        'her',\n        'hers',\n        'herself',\n        'it',\n        'its',\n\
    \        'itself',\n        'they',\n        'them',\n        'their',\n     \
    \   'theirs',\n        'themselves',\n        'what',\n        'which',\n    \
    \    'who',\n        'whom',\n        'this',\n        'that',\n        'these',\n\
    \        'those',\n        'am',\n        'is',\n        'are',\n        'was',\n\
    \        'were',\n        'be',\n        'being',\n        'have',\n        'has',\n\
    \        'had',\n        'having',\n        'do',\n        'does',\n        'did',\n\
    \        'doing',\n        'a',\n        'an',\n        'the',\n        'and',\n\
    \        'but',\n        'if',\n        'or',\n        'because',\n        'as',\n\
    \        'until',\n        'while',\n        'of',\n        'at',\n        'by',\n\
    \        'for',\n        'with',\n        'about',\n        'against',\n     \
    \   'between',\n        'into',\n        'through',\n        'during',\n     \
    \   'before',\n        'after',\n        'above',\n        'below',\n        'to',\n\
    \        'from',\n        'up',\n        'down',\n        'in',\n        'out',\n\
    \        'on',\n        'off',\n        'over',\n        'under',\n        'again',\n\
    \        'further',\n        'then',\n        'once',\n        'here',\n     \
    \   'there',\n        'when',\n        'where',\n        'why',\n        'how',\n\
    \        'all',\n        'any',\n        'both',\n        'each',\n        'few',\n\
    \        'more',\n        'most',\n        'other',\n        'some',\n       \
    \ 'such',\n        'no',\n        'nor',\n        'not',\n        'only',\n  \
    \      'own',\n        'same',\n        'so',\n        'than',\n        'too',\n\
    \        'very',\n        's',\n        't',\n        'can',\n        '", "  \
    \          Input:\n            [ \"I\", \"like\", \"it\", \"?\", \"!\", \"?\"\
    , \"!\", \"I\", \"want\", \"to\", \"go\", \"home\" ] \n\n            Output:\n\
    \            2\n         \n            Explanation:\n            You see two boredoms\
    \ in the input string. The first boredom starts with the\n            word \"\
    I\" so we should include it in the boredom count. The second boredom starts\n\
    \            with \"like\" so we should also include it in the boredom count.\n\
    \            \n            \n    \n    \"\"\"\n    boredom_count = 0\n    \n \
    \   for word_index in range(len(S)):\n        if S[word_index] == 'I':\n     \
    \       boredom_count += 1\n    return boredom_count\n\n", "        I love you\
    \ !\n        You love me !\n        You have a very healthy life.\n        I feel\
    \ very sad .\n         \"\"\"\n    Input: \n            S = \"I love you !\"\n\
    \    Output:\n            1\n    \"\"\"\n    # YOUR CODE HERE\n    return len([1\
    \ for i in range(len(S)+2) for i in range(len(S)-i)\n                if S[i:i+2]==[\"\
    I\",\"!\"]])\n\n</cell>\n<cell>", "    Iloveyou!\n    I hate you!\n    I love\
    \ you!\n    I love you!\n    I love you!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n\
    \    Iloveyou!\n    I love you!\n    Iloveyou!\n    Iloveyou!\n    I love you!\n\
    \    I hate you!\n    Iloveyou!\n    Iloveyou!\n    I love you!\n    I love you!\n\
    \    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n \
    \   I hate you!\n    Iloveyou!\n    I love you!\n    Iloveyou!\n    I love you!\n\
    \    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n \
    \   Iloveyou!\n    I hate you!\n    Iloveyou!\n    Iloveyou!\n    I love you!\n\
    \    Iloveyou!\n    I love you!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n\
    \    Iloveyou!\n    Iloveyou!\n    I love you!\n    Iloveyou!\n    Iloveyou!\n\
    \    I love you!\n    Iloveyou!\n    I love you!\n    I love you!\n    Iloveyou!\n\
    \    Iloveyou!\n    I love you!\n    Iloveyou!\n    I love you!\n    Iloveyou!\n\
    \    I love you!\n    Iloveyou!\n    I love you!\n    Iloveyou!\n    Iloveyou!\n\
    \    I love you!\n    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n    I love you!\n\
    \    Iloveyou!\n    Iloveyou!\n    Iloveyou!\n    I love you!\n    Iloveyou!\n\
    \    ", "            Sentence 1: I like apples.\n            Sentence 2: I do\
    \ not like oranges.\n            Sentence 3: I like bananas.\n            \"\"\
    \"\n\n    Input: \"I like apples.\" \n    Output: 3\n    \n    Input: \"I do not\
    \ like oranges.\" \n    Output: 0\n    \n    Input: \"I like bananas.\"\n    Output:\
    \ 2\n    \"\"\"\n    \n    # Your code here\n    \n    boredoms = 0\n    \n  \
    \  if S[0] == 'I':\n        boredoms += 1\n        \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "            I    am    bored\n            .    !  \
    \  !\n            .    .    .\n            .    .    .\n            !    .   \
    \ .\n            !    .    .\n            !    !    .\n            .    .    .\n\
    \            .    !    .\n            .    !    .\n            \"\"\"\n      \
    \      \n            would result in boredoms: 12\n    \"\"\"\n    count = 0\n\
    \    for word in S:\n        if word.startswith('I'):\n            count += 1\n\
    \    return count\n\n", "            I slept like a man.\n            I slept\n\
    \            I slept like a man.\n            \"\"\"\n    \n    would have two\
    \ boredoms (2 and 3) as the sentence \"I slept like a man\" would.\n\n    Note:\
    \ What happens when you encounter a delimiting character (\".\", \"?\", or \"\
    !\") is\n    beyond the scope of this problem. But don't worry about those problems\
    \ right now. \n    Instead, think of ways to handle them when we encounter them.\n\
    \n    You should assume that the string is lower case.\n    \"\"\"\n\n    boredoms\
    \ = 0\n    boredoms = boredoms + 1 if S[0] == 'I' else boredoms\n    boredoms\
    \ = boredoms + 1 if S.find('.') != -1 else boredoms\n    boredoms = boredoms +\
    \ 1 if S.find('!') != -1 else boredoms\n    boredoms = boredoms + 1 if S.find('?')\
    \ != -1 else boredoms\n    boredoms = boredoms + 1 if S[-1] == '.' or S[-1] ==\
    \ '?' or S[-1] == '!' else boredoms\n\n    return boredoms\n", "            Input:\
    \  \"I'm bored\"\n            Output: 1\n             \n            \"Sam I bored?\"\
    \n            Output:1\n            \n            \"Bored wag?! I bored.\"\n \
    \           Output: 0\n           \"\"\"\n    \n    boredoms = []\n    \n    #\
    \ YOUR CODE STARTS HERE\n    \n    for word in S.split():\n        if word[0]\
    \ == 'I':\n            boredoms.append(word)\n    \n    # YOUR CODE ENDS HERE\n\
    \    \n    return len(boredoms)\n\n", "            Input:\n            s = \"\
    I like you!.\"\n            Output: \n            2\n            \n          \
    \  Input:\n            s = \"We have I!\"\n            Output: \n            1\n\
    \            \n            Input:\n            s = \"We have I!.\"\n         \
    \   Output: \n            0\n            \n            Input:\n            s =\
    \ \"I!\"\n            Output: \n            1\n            \n            Input:\n\
    \            s = \"We have!.\"\n            Output: \n            1\n        \
    \    \n            Input:\n            s = \"I!.\"\n            Output: \n   \
    \         0\n            \n            Input:\n            s = \"!.\"\n      \
    \      Output: \n            1\n            \n            Input:\n           \
    \ s = \"!,.\"\n            Output: \n            1\n            \n           \
    \ Input:\n            s = \"I !.\" \n            Output: \n            1\n   \
    \         \n            Input:\n            s = \"I.\"\n            Output: \n\
    \            0\n            \"\"\"\n    \"\"\"\n    So the output would be \n\
    \    \"\"\"\n    boredoms_count = 0\n    start_boredom = False\n    \n    for\
    \ word in S.split():\n        boredoms_count += 1 if word == \"I\" and not start_boredom\
    \ else 0\n        if word == \"I\" and start_boredom:\n            boredoms_count\
    \ += 1\n            start_boredom = False\n        else:\n            start_boredom\
    \ = True\n    return boredoms_count\n\n", "    Input: \"This is an example of\
    \ boredom.\"\n    Output: 5\n    \n            This is a boredom sentence.\n \
    \           \"\"\"\n\n    Args:\n        S: a string\n\n    Returns:\n       \
    \ an integer\n    \"\"\"\n    return len(set(['.', '?', '!']).intersection(set(S)))\n\
    \n", "            I saw a dog.\n            I do not see a dog.\n            I\
    \ saw a cat.\n            I do not see a cat.\"\"\"\n    Should print 3\n    \n\
    \    \"\"\"\n    return int(len([s for s in S.split(\" \") if s[0] == \"I\"])\
    \ + len([s for s in S.split(\" \") if s[0] == \"a\"]))\n", "            We are\
    \ about to embark on a boredom \n            Where will the boredom occur? \n\
    \            We have embarked on a boredom! \n            Where will the boredom\
    \ occur?\n            Where will the boredom occur? We are about to embark on\
    \ a boredom \n            \"\"\"\n            count_bored(S) == 4\n    \n    Args:\n\
    \        S (string): the input string that you will need to count boredoms for\n\
    \    \n    Returns:\n        int: the number of times \"I\" appears in a boredom\n\
    \    \"\"\"\n    bored_list = []\n    for word in S.split():\n        if word.startswith('I'):\n\
    \            bored_list.append(word)\n\n    bored_list = sorted(bored_list)\n\
    \    bored_count = len(bored_list)\n\n    return bored_count\n", "        I love\
    \ you.\n        I don't want to talk.\n        I love you.\n        I love you.\n\
    \        I like to eat.\n        I love you!\n        I hate you!\n        I love\
    \ you!\n        I hate you!\n        I love you!\n        I hate you!\n      \
    \  I love you!\n        I like to eat.\n        I don't like you.\n        I hate\
    \ you!\n        I hate you!\n        I hate you!\n        I love you!\n      \
    \  I love you!\n        I like to eat.\n        I don't like you.\n        I like\
    \ you!\n        I don't like you.\n        I hate you!\n        I don't like you.\n\
    \        I like to eat.\n        I don't like you.\n        I don't like you.\n\
    \        I don't like you.\n        I don't like you.\n        I hate you!\n \
    \       I don't like you.\n        I love you!\n        I like you!\n        I\
    \ don't like you.\n        I like you!\n        I hate you!\n        I don't like\
    \ you.\n        I like to eat.\n        I don't like you.\n        I don't like\
    \ you.\n        I don't like you.\n        I like you!\n        I like you!\n\
    \        I like you!\n        I like to eat.\n        I like to eat.\n       \
    \ I don't like you.\n        I don't like you.\n        I don't like you.\n  \
    \      I like to eat.\n        I hate you!\n        I like you!\n        I like\
    \ you!\n        I like you!\n        I like to eat.\n        I hate you!\n   \
    \     I love you!\n        I love you!\n        I like you!\n        I like you!\n\
    \        I like you!\n        I like to eat.\n        I like to eat.\n       \
    \ I like to eat.\n        I like to eat.\n        I like to eat.\n        I like\
    \ to eat.\n        I like to eat.\n        I like to eat.\n        I like to eat.\n\
    \        I like to eat.\n        I like to eat.\n        I like to eat.\n    \
    \    I like to eat.\n        I like to eat.\n        I like to eat.\n        I\
    \ like to eat.\n        I like to eat.\n        I like to eat.\n        I like\
    \ to eat.\n        I like to eat.\n        I like to eat.\n        I like to eat.\n\
    \        I like to eat.", "            I liked this video yesterday. No it is\
    \ not. She's cool\n            \"\"\"\n            In this example, there are\
    \ two boredoms:\n            \"I liked this video yesterday. No it is not. \"\n\
    \            \"She's cool\"\n            \n            Returns:\n            an\
    \ integer: the number of boredoms found in the string.\n    \"\"\"\n    boredoms\
    \ = 0\n    boredom_list = [\".\", \"?\", \"!\"]\n    boredom_list = [\".\", \"\
    ?\", \"!\", \"I\"]\n    for boredom in boredom_list:\n        if borem in S:\n\
    \            boredoms += 1\n    return boredoms\n\n", "            I, like, It,\
    \ isn't\n            I, like, It, a\n            I, like, It, a, bored.\n    \
    \        \"\"\"\n          \n    >>>is_bored(\"I, like, It, isn't\")\n    2\n\
    \    >>>is_bored(\"I, like, It, a\")\n    2\n    >>>is_bored(\"I, like, It, a,\
    \ bored.\")\n    1\n    >>>is_bored(\"I, like, It, a, bored.?\")\n    1\n    >>>is_bored(\"\
    I, like, It, a, bored.!\")\n    1\n    >>>is_bored(\"I, like, It, a, bored. !\"\
    )\n    1\n    >>>is_bored(\"I, like, It, a, bored! !\")\n    1\n    >>>is_bored(\"\
    I, like, It, a, bored. I\")\n    1\n    >>>is_bored(\"I, like, It, a, bored. It\"\
    )\n    1\n    >>>is_bored(\"I, like, It, a, bored. It'\")\n    1\n    >>>is_bored(\"\
    I, like, It, a, bored. It, bored\")\n    2\n    >>>is_bored(\"I, like, It, a,\
    \ bored. It, bored?\")\n    1\n    >>>is_bored(\"I, like, It, a, bored. It, bored!\"\
    )\n    1\n    >>>is_bored(\"I, like, It, a, bored. It, bored! !\")\n    1\n  \
    \  >>>is_bored(\"I, like, It, a, bored. It, bored. !\")\n    1\n    >>>is_bored(\"\
    I, like, It, a, bored. It, bored! !\")\n    1\n    >>>is_bored(\"I, like, It,\
    \ a, bored. It, bored. I\")\n    1\n    >>>is_bored(\"I, like, It, a, bored. It,\
    \ bored. It\")\n    1\n    >>>is_bored(\"I, like, It, a, bored. It, bored. It'\"\
    )\n    1\n    >>>is_bored(\"I, like, It, a, bored. It, bored. It, bored\")\n \
    \   2\n    >>>is_bored(\"I, like, It, a, bored. It, bored. It, bored?\")\n   \
    \ 1\n    >>>is_bored(\"I, like, It, a, bored. It, bored. It, bo", "          \
    \  Input:\n                S = \"I like dogs.\"\n            Output:\n       \
    \         2\n           \n            Input:\n                S = \"The man in\
    \ the park ate my home.\"\n            Output:\n                1\n          \
    \  \"\"\"\n            \n    \n    \n    :param S: string of a single sentence.\n\
    \    :returns: int of boredoms.\n    \"\"\"\n    \n    boredoms = 0\n    S = S.lower()\n\
    \    S = S.replace('.', ' ')\n    S = S.replace('?', '')\n    S = S.replace('!',\
    \ '')\n    S = S.replace('I', ' ')\n    S = S.replace('me', '')\n    S = S.replace('in',\
    \ '')\n    S = S.replace('my', '')\n    S = S.replace('park', '')\n    S = S.replace('my',\
    \ '')\n    S = S.replace('home', '')\n    S = S.replace('.', '')\n    S = S.replace('?',\
    \ '')\n    S = S.replace('!', '')\n    S = S.replace('I', '')\n    S = S.replace('me',\
    \ '')\n    S = S.replace('in', '')\n    S = S.replace('my', '')\n    S = S.replace('park',\
    \ '')\n    S = S.replace('my', '')\n    S = S.replace('home', '')\n    S = S.replace('.',\
    \ '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.replace('I',\
    \ '')\n    S = S.replace('me', '')\n    S = S.replace('in', '')\n    S = S.replace('my',\
    \ '')\n    S = S.replace('park', '')\n    S = S.replace('my', '')\n    S = S.replace('home',\
    \ '')\n    S = S.replace('.', '')\n    S = S.replace('?', '')\n    S = S.replace('!',\
    \ '')\n    S = S.replace('I', '')\n    S = S.replace('me', '')\n    S = S.replace('in',\
    \ '')\n    S = S.replace('my', '')\n    S = S.replace('park', '')\n    S = S.replace('my',\
    \ '')\n    S = S.replace('home', '')\n    S = S.replace('.', '')\n    S = S.replace('?',\
    \ '')\n    S = S.replace('!', '')\n    S = S.replace('I', '')\n    S = S.replace('me',\
    \ '')\n    S = S.replace('in', '')\n    S = S.replace('my', '')\n    S = S.replace('park',\
    \ '')\n    S = S.replace('my', '')\n    S = S.replace('home', '')\n    S = S.replace('.',\
    \ '')\n    S = S.replace('?', '')\n    S = S.replace('!', '')\n    S = S.replace('I',\
    \ '')\n    S = S.replace('me', '')\n    S = S.replace('in', '')\n    S = S.replace('my',\
    \ '')\n    S = S.replace('park', '')\n    S = S.replace('my', '')\n    S = S.replace('home',\
    \ '')\n    S = S", "            Sentence 1: \"He bored to see his face in a large\
    \ sack.\"\n            Sentence 2: \"He bored to see his face in a large sack.\"\
    \n            Sentence 3: \"He bored to see his face in a large sack.\"\n    \
    \        Sentence 4: \"He bored to see his face in a large sack.\"\n         \
    \   Sentence 5: \"I bored to see his face in a large sack.\"\n            Sentence\
    \ 6: \"I bored to see his face in a large sack.\"\n            Sentence 7: \"\
    I bored to see his face in a large sack.\"\n            Sentence 8: \"I bored\
    \ to see his face in a large sack.\"\n            Sentence 9: \"I bored to see\
    \ his face in a large sack.\"\n            Sentence 10: \"I bored to see his face\
    \ in a large sack.\"\n            Sentence 11: \"I bored to see his face in a\
    \ large sack.\"\n            Sentence 12: \"I bored to see his face in a large\
    \ sack.\"\n            Sentence 13: \"I bored to see his face in a large sack.\"\
    \n            Sentence 14: \"I bored to see his face in a large sack.\"\n    \
    \        Sentence 15: \"I bored to see his face in a large sack.\"\n         \
    \   Sentence 16: \"I bored to see his face in a large sack.\"\n            Sentence\
    \ 17: \"I bored to see his face in a large sack.\"\n            Sentence 18: \"\
    I bored to see his face in a large sack.\"\n            Sentence 19: \"I bored\
    \ to see his face in a large sack.\"\n            Sentence 20: \"I bored to see\
    \ his face in a large sack.\"\n            Sentence 21: \"I bored to see his face\
    \ in a large sack.\"\n            Sentence 22: \"I bored to see his face in a\
    \ large sack.\"\n            Sentence 23: \"I bored to see his face in a large\
    \ sack.\"\n            Sentence 24: \"I bored to see his face in a large sack.\"\
    \n            Sentence 25: \"I bored to see his face in a large sack.\"\n    \
    \        Sentence 26: \"I bored to see his face in a large sack.\"\n         \
    \   Sentence 27: \"I bored to see his face in a large sack.\"\n            Sentence\
    \ 28: \"I bored to see his face in a large sack.\"\n            Sentence 29: \"\
    I ", "            I love nature.\n            I hate you.\n            I want\
    \ kiss.\n            I love you.\n            \"\"\"\n    \n            has two\
    \ boredoms \n    \n            This function will return the number of boredoms\
    \ in the given string.\n            \n            Args:\n                    S:\
    \ String of words (the content in a file)\n            \n            Returns:\
    \ an integer\n    \n    \"\"\"\n    \n    return sum(1 for word in S.split() if\
    \ word.lower().startswith('i'))\n</cell>\n<cell>", "            I am a bored.\n\
    \            I asked him for help.\n            I can't stand you enough.\n  \
    \          I have a question. Can you help me?\n            Where do you come\
    \ from?\n            What do you do?\n            Where do you think you live?\n\
    \            I am bored.\n            Where do you come from?\n            Where\
    \ do you think you live?\n            Where do you get stuck?\n            \"\"\
    \"\n    \n    bored_count = 0\n    boredom_set = set()\n    boredom_list = ['I',\
    \ 'you', 'you', 'he', 'she', 'it', 'we', 'they', 'you', 'we', 'you', 'you', 'you',\
    \ 'you', 'you']\n    for sentence in S.split('.'):\n        for word in boredom_list:\n\
    \            if word not in sentence:\n                if word in sentence:\n\
    \                    bored_count += 1\n                    boredom_set.add(word)\n\
    \                elif not word.isspace() and word not in boredom_set:\n      \
    \              bored_count += 1\n                    boredom_set.add(word)\n \
    \   return bored_count\n", "            I love you.\n            I hate you.\n\
    \            I hate you.\n            You love me.\"\"\"\n            has two\
    \ boredoms, the first starting with \"I\" and the second\n            starting\
    \ with \"you\".\n    \"\"\"\n\n    boredom_counter = 0\n    boredom_word = str()\n\
    \    boredom_word_counter = 0\n    boredom_word_list = list()\n    boredom_list\
    \ = list()\n\n    list_of_boredom_words = []\n\n    # Create a list to store the\
    \ boredom words (only the first boredom word).\n    while boredom_word != \"\"\
    :\n        boredom_word_counter += 1\n        boredom_word_list.append(boredom_word)\n\
    \        boredom_word_list.append(boredom_word_counter)\n        boredom_word_counter\
    \ = 0\n        boredom_word = str()\n\n    # Convert the list to a string for\
    \ easy storage and comparison\n    boredom_list_string = boredom_word_list[1]\n\
    \    boredom_list = boredom_list_string.split(\",\")\n\n    # Count the number\
    \ of boredom words (boredom_counter).\n    for boredom_word_counter in range(1,\
    \ len(boredom_list)):\n        if boredom_list[boredom_word_counter].strip() ==\
    \ \"\":\n            boredom_counter -= 1\n            boredom_word = str()\n\
    \        else:\n            boredom_word += boredom_list[boredom_word_counter]\n\
    \n    boredom_counter = 1\n\n    while boredom_counter > 1:\n        boredom_word_counter\
    \ = boredom_word_list[1]\n        boredom_word_counter = int(boredom_word_counter)\n\
    \        list_of_boredom_words.append(boredom_list[boredom_word_counter])\n  \
    \      boredom_word_list[boredom_word_counter] = str()\n\n        # Count the\
    \ number of boredom words (boredom_counter).\n        for boredom_word_counter\
    \ in range(1, len(boredom_list)):\n            if boredom_list[boredom_word_counter].strip()\
    \ == \"\":\n                boredom_counter -= 1\n                boredom_word\
    \ = str()\n            else:\n                boredom_word += boredom_list[boredom_word_counter]\n\
    \n        # Convert the list to a string for easy storage and comparison\n   \
    \     boredom_list_string = boredom_word_list[1]\n        boredom_list = boredom_list_string.split(\"\
    ,\")\n        boredom_counter = 1\n\n    # Count the number of boredom words (boredom_counter).\n\
    \    for boredom_word_counter in range(1, len(boredom_list)):\n        if boredom_list[boredom_word_counter",
  "            I love my job!\n            I hate it!\n            I want to grab\
    \ coffee\n            \"\"\"\n    Input: \"love my job!\"\n    Output: 3\n   \
    \ \n    Input: \"hate it!\"\n    Output: 1\n    \n    Input: \"I want to grab\
    \ coffee\"\n    Output: 1\n    \n    Input: \"I love my job!\"\n    Output: 0\n\
    \    \n    Input: \"I hate it!\"\n    Output: 0\n    \n    Input: \"I want to\
    \ grab coffee\"\n    Output: 0\n    \n    Input: \"I love my job!\"\n    Output:\
    \ 0\n    \"\"\"\n    \n    \n    count = 0\n    \n    for i in range(len(S)):\n\
    \        if S[i] == 'I':\n            count +=1 \n            \n    return count\n\
    \                ", "            Boredoms! Not good!\n            Please bore!\n\
    \            I bore to death.\n            \"\"\"\n            Output: \n    \
    \        1\n            2\n    \"\"\"\n    boredoms = 0\n\n    for word in S:\n\
    \        if word.upper() == \"I\":\n            boredoms += 1\n    return boredoms\n",
  "    \n        Sentence 1: I love this car.\n        Sentence 2: I hate this car.\n\
    \        Sentence 3: This car is lovely.\n        Sentence 4: I do not like this\
    \ car.\n        Sentence 5: I love this car. Do you like this car?\n        \n\
    \        Output:\n            Number of boredoms is: 2\n        \n        Explanation:\
    \ \n        Sentence 1 & 3 are boredoms\n        Sentence 2 & 4 are boredoms\n\
    \        Sentence 5 has no boredoms\n            \n            \n    \n    Constraints\n\
    \        1 <= len(S) <= 1000\n        1 <= |S| <= 1000\n        S contains only\
    \ uppercase English letters, '.', '?' and '!' \n        \n        Example\n  \
    \          Input: \"I love this car.\", \"I hate this car.\", \"This car is lovely.\"\
    , \"I do not like this car.\", \"I love this car. Do you like this car?\"\n  \
    \          Output: 2\n            Explanation: \n            Sentence 1 & 3 are\
    \ boredoms\n            Sentence 2 & 4 are boredoms\n            Sentence 5 has\
    \ no boredoms\n            \n    \"\"\"\n    \n    count = 0\n    for word in\
    \ S.split():\n        if word[0]=='I':\n            count+=1\n    return count\n\
    </cell>\n<cell>", "            Input:\n            \n            I like turtles.\n\
    \            I love turtles.\n            I hate turtles.\n            \n    \
    \        Output:\n            2\n            1\n            3\n            \n\
    \            Explanation:\n            All three sentences had a boredom of 2\
    \ since the first word starts with I.\n            \"\"\"\n\n    S = S.lower()\n\
    \    S = S.replace(\".\", \"\")\n    S = S.replace(\"?\", \"\")\n    S = S.replace(\"\
    !\", \"\")\n    Slist = S.split(\" \")\n    count = 0\n    for s in Slist:\n \
    \       if s.startswith(\"i\"):\n            count += 1\n    return count\n\n",
  "            Bored ?\n            Not at all !\n            I bore !\n         \
    \   I not bore ?\n            I bore !\n            Not at all !\n           \
    \ Bored !\n            \"\"\"\n    \n            Answer: 2\n    \"\"\"\n    boredom\
    \ = 0\n\n    for word in S.split(\" \"):\n        if word.startswith(\"I\"):\n\
    \            boredom += 1\n\n    return boredom\n</cell>\n<cell>\nis_bored(\"\"\
    \"\nBored ?\nNot at all !\nI bore !\nI not bore ?\nI bore !\nNot at all !\nBored\
    \ !\n\"\"\")\n</cell>\n<cell>\nis_bored(\"\"\"\nBored ?\nNot at all !\nI bore\
    \ !\nI not bore ?\nI bore !\nNot at all !\nIm bored !\n\"\"\")\n</cell>\n<cell>\n\
    is_bored(\"\"\"\nBored ?\nNot at all !\nI bore !\nI not bore ?\nI bore !\nNot\
    \ at all !\n\"\"\")\n</cell>\n<cell>\nis_bored(\"\"\"\nBored ?\nNot at all !\n\
    I bore !\nI not bore ?\nI bore !\nNot at all !\n\"\"\")\n</cell>\n<cell>\nis_bored(\"\
    \"\"\nBored ?\nNot at all !\nI bore !\nI not bore ?\nI bore !\nNot at all !\n\"\
    \"\")\n</cell>\n<text>\nQuestion 5\nDefine a function that takes a string, checks\
    \ whether it has an 'a' at the beginning, and returns the index if it does.\n\n\
    If not, it should return -1.\n\n\n</text>\n<cell>", "            He was a boreer.\
    \ He bored to death.\n            I do not think he was a boreer\n           \
    \ \"\"\"\n    should return 1\n\n    \n    \n    >>> is_bored(\"He was a boreer.\
    \ He bored to death.\")\n    1\n    >>> is_bored(\"I do not think he was a boreer\"\
    )\n    0\n    >>> is_bored(\"I do not think he was a boreer. He bored to death.\"\
    )\n    1\n    >>> is_bored(\"He bored to death. He was a boreer\")\n    1\n  \
    \  \"\"\"\n    \n    return sum(1 for word in S.split(\".\") if word[0] == \"\
    I\")\n    \n</cell>\n<cell>\nis_bored(\"He was a boreer. He bored to death.\"\
    )\n</cell>\n<cell>\nis_bored(\"I do not think he was a boreer\")\n</cell>\n<cell>\n\
    is_bored(\"I do not think he was a boreer. He bored to death.\")\n</cell>\n<cell>\n\
    is_bored(\"He bored to death. He was a boreer\")\n</cell>\n<text>\nPalindrome\
    \ checker\n\n</text>\n<cell>", "            Boredoms are a couple of words that\
    \ start with \"I\".\n            \n            Boredoms are another couple of\
    \ words that start with \"I\".\n            \n            Boredoms are yet another\
    \ couple of words that start with \"I\".\n            \"\"\"\n    We are going\
    \ to use regular expression to solve the problem. Check out the\n    official\
    \ website for more information at\n    https://pythex.org/.\n    \n    The code\
    \ below will return the number of boredoms in the given string.\n    \n    Notice\
    \ that you can test out this function using the following strings:\n    \n   \
    \ boredoms = is_bored('I am bored')\n    boredoms = is_bored('Boredoms are a couple\
    \ of words that start with \"I\"')\n    boredoms = is_bored('Boredoms are another\
    \ couple of words that start with \"I\"')\n    boredoms = is_bored('Boredoms are\
    \ yet another couple of words that start with \"I\"')\n    \"\"\"\n    boredoms\
    \ = 0\n    \n    boredoms = re.search(r'I', S)\n    if boredoms is not None:\n\
    \        boredoms = boredoms.start()\n    return boredoms\n\n", "    \n      \
    \      \"Hello\" -> 0, \n            \"Hi.\" -> 1, \n            \"Hi!\" -> 1,\
    \ \n            \"How are you?\" -> 1\n            \"I\" -> 1\n            \"\
    I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" ->\
    \ 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n\
    \            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n    \
    \        \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n        \
    \    \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"\
    I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" ->\
    \ 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n\
    \            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n    \
    \        \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n        \
    \    \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"\
    I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" ->\
    \ 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n\
    \            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n    \
    \        \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n        \
    \    \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"\
    I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" ->\
    \ 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n\
    \            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n    \
    \        \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n        \
    \    \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"\
    I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" ->\
    \ 1\n            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n\
    \            \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n    \
    \        \"I\" -> 1\n            \"I\" -> 1\n            \"I\" -> 1\n        \
    \    \"I\" -> 1\n            \"I\" -> 1\n            \"", "            I, love,\
    \ you!\n            I, like, dancing?\n            I, like, dancing!\n       \
    \     \"\"\"\n\n    has three boredoms: \n            \"I, love, you!\" \n   \
    \         \"I, like, dancing?\" \n            \"I, like, dancing!\" \n    \n \
    \   Write a function that takes in a string and returns the number of boredoms.\n\
    \n    Example: \n            input: \"I love you!\"\n            output: 3\n \
    \       \n    \"\"\"\n    \n    return len(S)\n\n", "    I am a bored person\n\
    \    \"\"\"\n\n    boredoms = ['I', 'am', 'a', 'bored', 'person']\n    return\
    \ boredoms.count(S)\n", "            I like you.\n            I like you.\n  \
    \          You shine.\n            You shine.\n            You shine.\n      \
    \      You shine.\n            Boredom.\n            Boredom.\n            Boredom.\n\
    \            Boredom.\n            Boredom.\n            Boredom.\n          \
    \  Boredom.\n            Boredom.\n            Boredom.\n            Boredom.\n\
    \            Boredom.\n            Boredom.\n            \"\"\"\n            2\n\
    \    \"\"\"\n    return sum([1 if i.startswith('I') else 0 for i in S])\n\n",
  "            I    love    you!\n            you  !\n            love    me\n   \
    \         \"\"\"\n            has two boredoms -- one starting with I and one\
    \ starting with you!\n            \n    We define \"boredom\" to be any substring\
    \ of the form 'I....!'.\n    \n    For example, in the string \"I love you!\"\
    \ we would say that \"love\" is a boredom.\n            \n    Write a function\
    \ that takes in a string and returns the number of boredoms in that string.\n\
    \    \n    boredomCount() has the following parameter(s):\n    \n        - S:\
    \ a string\n    \n    \n    \"\"\"\n\n    # Write your code here\n    count =\
    \ 0\n    \n    if len(S) < 2:\n        return count\n    \n    \n    if S[0] ==\
    \ S[1] and len(S) > 1:\n        count += 1\n        \n    if S[0] == 'I' and S[-1]\
    \ == '!':\n        count += 1\n        \n    if S[0] == 'I' and S[-1] == '.':\n\
    \        count += 1\n        \n    if S[0] == 'I' and S[-1] == '?':\n        count\
    \ += 1\n        \n    if S[0] == 'I' and S[-1] == '!':\n        count += 1\n \
    \       \n    if S[0] == 'I' and S[-1] == '.':\n        count += 1\n        \n\
    \    if S[0] == 'I' and S[-1] == '?':\n        count += 1\n        \n    if S[0]\
    \ == 'I' and S[-1] == '!':\n        count += 1\n        \n    if S[0] == 'I' and\
    \ S[-1] == '.':\n        count += 1\n        \n    if S[0] == 'I' and S[-1] ==\
    \ '?':\n        count += 1\n        \n    if S[0] == 'I' and S[-1] == '!':\n \
    \       count += 1\n        \n    if S[0] == 'I' and S[-1] == '.':\n        count\
    \ += 1\n        \n    if S[0] == 'I' and S[-1] == '?':\n        count += 1\n \
    \       \n    if S[0] == 'I' and S[-1] == '!':\n        count += 1\n        \n\
    \    if S[0] == 'I' and S[-1] == '.':\n        count += 1\n        \n    if S[0]\
    \ == 'I' and S[-1] == '?':\n        count += 1\n        \n    if S[0] == 'I' and\
    \ S[-1] == '!':\n        count += 1\n        \n    if S[0] == 'I' and S[-1] ==\
    \ '.':\n        count += 1\n        \n    if S[0] == 'I' and S[-1] == '?':\n \
    \       count += 1\n        \n    if S[0] == 'I' and S[-1] == '!':\n        count\
    \ += 1\n        \n    if S[0] == 'I' and S[-1] == '.':\n        count += 1\n \
    \       \n    if S[0] == 'I' and S[-1] == '?':\n        count += 1\n        \n\
    \    if S[0] == 'I", "    I   love    dogs.\n    I love cats.\n    I love bears.\n\
    \    I hate dogs.\n    I hate cats.\n    I hate bears.\n    \"\"\"\n\n    # BEGIN\
    \ Solution\n    boredoms = [i for i, word in enumerate(S.lower().split()) if 'i'\
    \ in word and word[0] != 'i']\n    return len(boredoms)\n    # END Solution\n\n\
    print(is_bored(\"I love dogs.\"))\nprint(is_bored(\"I love cats.\"))\nprint(is_bored(\"\
    I love bears.\"))\nprint(is_bored(\"I hate dogs.\"))\nprint(is_bored(\"I hate\
    \ cats.\"))\nprint(is_bored(\"I hate bears.\"))\nprint(is_bored(\"I love dogs.\
    \ I love bears.\"))\n</cell>\n<text>\nProblem 9: Bound Constraints\nA game of\
    \ chess involves two pieces of chess: one piece plays randomly\nagainst the other\
    \ piece, and each move is limited to the size of its field.\nGiven a board of\
    \ m x n cells, each cell contains a number of pieces (1 or 2) and\nan x or o that\
    \ is marked with 'x' or 'o'; cells where no piece is marked have\nvalue 0.\n\n\
    The objective of the game is to end with a winning condition (a condition\nindicating\
    \ whether a given board configuration has a winning configuration;\na win condition\
    \ is overwhelmingly likely to occur).  Write a function that\nchecks for a winning\
    \ condition, where each board configuration is represented by\na list of the form\
    \ [x_1, x_2, ..., x_n, o_1, o_2, ..., o_m]. For example:\n\nboard = [\n  ['x',\
    \ 0, 0, 2, 2],\n  ['o', 'x', 'o', 'x', 0],\n  ['o', 'o', 'o', 'o', 0],\n  ['o',\
    \ 0, 'o', 0, 0]\n]\nwinning_configuration(board)\nshould return True because board\
    \ is a winning configuration.\n\nIn general, the board size is limited to 50.\n\
    Your code will be run against various board sizes from 10 to 5000.\n\nNote: This\
    \ problem is very similar to the classic Knight's Tour problem; you may\nwish\
    \ to look at the solutions described there as well.\n\n\n</text>\n<cell>", " \
    \           I am a bored. Bored people.\n            I cannot stand.\n       \
    \     I like to eat pasta.\n            \"\"\"\n\n    boredoms: a list of all\
    \ the boredoms detected in the given text\n    \n    Your code should return the\
    \ number of boredoms found in the given text.\n    \n    In this example, the\
    \ function would return 4.\n    \"\"\"\n    # your code here\n    boredom = 0\n\
    \    for word in S:\n        if word == \"I\" or word == \"i\":\n            boredom\
    \ += 1\n    return boredom\n", "    \n    The father\n    \n    I\n    \n    is\
    \ bored\n    \n    !\n    \n    A boredom is a sentence that starts with the word\
    \ \"I\".\n    \n    \n    \"\"\"\n    # Remove all punctuation\n    S = S.lower()\n\
    \    S = S.replace(\"?\", \"\")\n    S = S.replace(\"!\", \"\")\n    S = S.replace('.',\
    \ '')\n\n    count = 0\n    for letter in S:\n        if letter == \"i\":\n  \
    \          count += 1\n    return count\n\n", "        Is that a boredom!?!\n\
    \        Huh? That sounds boredom-y!\n        That does look like it might be\
    \ a boredom-y!\n        \"\"\"\n    Return: Number of boredoms\n    \"\"\"\n \
    \   # Your code here\n    boredoms = 0\n    for w in S.split(' '):\n        if\
    \ w.lower().startswith('i'):\n            boredoms += 1\n    return boredoms\n\
    \n", "            Hello, my name is Bob.\n            Hello, my name is John.\n\
    \            Hello, my name is Gary.\n            \"\"\"\n    Output:\n      \
    \      3\n    \n    Explanation: \n            Bob.\n            John.\n     \
    \       Gary.\n    \n    Constraints:\n            1 <= len(S) <= 100\n      \
    \      S contains only lowercase and uppercase alphabets.\n            There will\
    \ never be more than one question mark.\n    \n    Time complexity: O(len(S))\n\
    \    Space complexity: O(len(S)) \n    \"\"\"\n    return boredoms_count(S, boredoms)\n\
    \n", "            I love you!\n            I hate you!\n            I love me?\n\
    \            I hate you!\n            \"\"\"\n            The function should\
    \ return 3\n    \"\"\"\n    # FILL IN HERE\n    boredoms = 0\n    boredoms = boredoms\
    \ + 1 if S.startswith('I') else boredoms\n    return boredoms\n\n", "    We have\
    \ bored you.\n    We have bored you.\n    We have gone bored to the beach. \"\"\
    \"\n    boredoms = 0\n    # Your code goes here\n    \n    return boredoms\n</cell>\n\
    <cell>", "            Hello, I'm Bored. I'm Bored.\n            Hello, I'm Bored?\
    \ I'm Bored.\n            Hello, I. I'm Bored!\n            I'm not bored at all.\
    \ \n            \"\"\"\n            would result in two boredoms since\n     \
    \       the first two sentences start with a capital 'I'\n            and the\
    \ third sentence does not start with a capital.\n\n    Parameters:\n    -----------\n\
    \    S: (string) the text that must be checked\n    Returns:\n    --------\n \
    \   int\n    \"\"\"\n    return len([i for i in S if i == 'I']) - S.count('I')\n",
  "            I love you.\n            You hate me.\n            I love you. \n \
    \           I hate you!\n            I love you.\n            \"\"\"\n       \
    \     \n        contains 3 boredoms out of 5 possible sentences.\n        \n \
    \   Solution:\n            \n    \n    \"\"\"\n    boredom = 0\n    \n    for\
    \ x in S:\n        if x in [\".\", \"?\", \"!\"]:\n            boredom += 1\n\
    \    return boredom\n\n", "            I don't have a problem with my homework?\n\
    \            I should've known better than this.\n            \n            I\
    \ only have one boredom.\n            \"\"\"\n            \n    should return\
    \ 1\n    \"\"\"\n    \n    boredoms = 0\n    \n    words = ['I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I', 'I',\
    \ 'I', 'I', 'I', 'I', 'I', 'I', '", "        I  am a boredom.\n        me  is\
    \ a  boredom.\n        you  are a  boredom.\n        I can  be  a  boredom.\n\
    \        it  is a  boredom.\n        I have  a  boredom.\n        what  is a \
    \ boredom.\n        I can  have  a  boredom.\n        I can  be  a  boredom.\n\
    \        I  am  a  boredom.\n        I am  a  boredom.\n        I  can  be  a\
    \  boredom.\n        I am  a  boredom.\n        I  have  a  boredom.\n       \
    \ I  have  a  boredom.\n        I  can  be  a  boredom.\n        I  can  be  a\
    \  boredom.\n        you  are a  boredom.\n        I  am  a  boredom.\n      \
    \  I  am  a  boredom.\n        you  are a  boredom.\n        I have  a  boredom.\n\
    \        I  have  a  boredom.\n        I  can  be  a  boredom.\n        I  can\
    \  be  a  boredom.\n        I  can  be  a  boredom.\n        I  can  be  a  boredom.\n\
    \        I  can  be  a  boredom.\n        I  can  be  a  boredom.\n        I \
    \ can  be  a  boredom.\n        I  can  be  a  boredom.\n        I  can  be  a\
    \  boredom.\n        I  can  be  a  boredom.\n        I  can  be  a  boredom.\n\
    \        I  can  be  a  boredom.\n        I  can  be  a  boredom.\n        I \
    \ can  be  a  boredom.\n        I  can  be  a  boredom.\n        I  can  be  a\
    \  boredom.\n        I  can  be  a  boredom.\n        I  can  be  a  boredom.\n\
    \        I  can  be  a  boredom.\n        I  can  be  a  boredom.\n        I",
  "    Input: S = \"Is that a boreom or not?\"\n            Output: 3\n    \n    \
    \        Explanation:\n            Is that a boreom or not.?\n            Is that\
    \ a boreom or not.!\n            Is that a boreom or not.\n            \n    Function\
    \ Description\n    Complete the function is_bored in order to return the number\
    \ of boredoms.\n    \n    Parameters\n    ----------\n    S: str\n        String\
    \ to be analyzed\n    Returns\n    -------\n    int\n        Number of boredoms\n\
    \    \n    Input Format\n    \n    \n    Constraints\n    -----------\n    \n\
    \    \n    Examples\n    --------\n    >>> is_bored(S) == 3\n    True\n    \"\"\
    \"\n    # Write your code here\n    \n    return int(sum(1 for char in S if char\
    \ == 'I'))\n", "            I love you!\n            I hate you!\n           \
    \ I love you!\n            I hate you!\n            I love you!\n            \"\
    \"\"\n        would return 3.\n    \n    Words like \"the\" and \"I\" count as\
    \ boredoms;\n    all other words that do not begin with \"I\" are not boredoms.\n\
    \   \n    boredoms is a subset of the valid words, so you won't have to validate\
    \ it.\n    \n    boredoms doesn't contain any of the following words: I, the,\
    \ a, I...\n    \"\"\"\n\n    boredoms = 0\n    boredom_count = len([x for x in\
    \ S.split() if x[0] == 'I'])\n\n    return boredom_count\n\n", "            We\
    \ are bored. We are bored. We are bored.\n            We are bored. We are bored.\
    \ We are bored.\n            \"\"\"\n            \n            Return 3\n    \n\
    \    Parameters: S: The given string\n    \n    Returns: the number of boredoms\
    \ found in the given string\n    \"\"\"\n    \n    count = 0\n    \n    for s\
    \ in S:\n        if s.isalpha() or s == '_':\n            if s.isalpha():\n  \
    \              if s.isupper():\n                    count += 1\n    return count\n\
    \n", "            I liked this video\n            I didn't like this video\n \
    \           I thought this was a good video\n            !\n            \n   \
    \         It was too boring!\n            \"\"\"\n        has three boredoms:\n\
    \        \n        I liked this video\n        I didn't like this video\n    \
    \    I thought this was a good video\n            \n        !\n            \n\
    \        It's too boring!\n        \"\"\"\n        \n    In this case, the words\
    \ \"I\" are not bored. \n    \n    Sentences cannot begin or end with \"!\", or\
    \ \"?\" as those are considered\n    to be part of the boredom.\n    \n    Boredoms\
    \ cannot have more than one word between them.\n    \n    So \"I liked this video\"\
    \ has one boredom, not three.\n    \"\"\"\n    \n    boredom = 0\n    \n    for\
    \ i in range(len(S)):\n        if S[i] == \"I\":\n            boredom += 1\n \
    \       else:\n            if boredom == 1:\n                return 0\n      \
    \      else:\n                boredom = 0\n    \n    return boredom\n</cell>\n\
    <cell>", "            I thought so.\n            But then I saw\n            a\
    \ bored world.\n            And I thought so.\n            \n            I saw\n\
    \            a bored world.\n            I thought so.\n            \n       \
    \     I saw\n            a bored world.\n            I thought so.\n         \
    \   I thought.\n            \"\"\"\n    \n    Note: You will be given an encoded\
    \ string. \n    \n    Args:\n        S: word string\n    Returns:\n        int:\
    \ number of boredoms found\n    \"\"\"\n    boredoms = 0\n    for i in range(len(S)):\n\
    \        if S[i] == '.' and S[i+1] == '.' and S[i+2] == '.':\n            boredoms\
    \ += 1\n        elif S[i] == '.' and S[i+1] == '.' and S[i+2] == '?':\n      \
    \      boredoms += 1\n        elif S[i] == '.' and S[i+1] == '?' and S[i+2] ==\
    \ '.':\n            boredoms += 1\n        elif S[i] == '?' and S[i+1] == '.'\
    \ and S[i+2] == '.':\n            boredoms += 1\n        elif S[i] == '?' and\
    \ S[i+1] == '?' and S[i+2] == '.':\n            boredoms += 1\n        elif S[i]\
    \ == '.' and S[i+1] == '!' and S[i+2] == '.':\n            boredoms += 1\n   \
    \     elif S[i] == '?' and S[i+1] == '!' and S[i+2] == '.':\n            boredoms\
    \ += 1\n        elif S[i] == '!' and S[i+1] == '.' and S[i+2] == '.':\n      \
    \      boredoms += 1\n        elif S[i] == '!' and S[i+1] == '!' and S[i+2] ==\
    \ '.':\n            boredoms += 1\n    return boredoms\n</cell>\n<cell>\nis_bored(\"\
    I thought so. But then I saw a bored world. And I thought so.\")\n</cell>\n<cell>\n\
    is_bored(\"I saw a bored world. And I thought so.\")\n</cell>\n<cell>\nis_bored(\"\
    I saw a bored world. And I thought so. \")\n</cell>\n<cell>\nis_bored(\"I saw\
    \ a bored world. And I thought so. .\")\n</cell>\n<cell>\nis_bored(\"I saw a bored\
    \ world. And I thought so. . \")\n</cell>\n<cell>\nis_bored(\"I saw a bored world.\
    \ And I thought so. . . \")\n</cell>\n<text>\nThe next two functions encode a\
    \ sentence according to a particular ", "            I. Roses are red\n      \
    \      II. Roses are red\n            III. Roses are red\n            IV. Roses\
    \ are red\n            V. Roses are red\n            VI. Roses are red\n     \
    \       VII. Roses are red\n            VIII. Roses are red\n            IX. Roses\
    \ are red\n            X. Roses are red\n            XI. Roses are red\n     \
    \       XII. Roses are red\n            XIII. Roses are red\n            XIV.\
    \ Roses are red\n            \n            VIII. Roses are red\n            \n\
    \            O. Roses are red\n            \n            M. Roses are red\n  \
    \          \n            H. Roses are red\n            \n            I. Roses\
    \ are red\n            \"\"\"\n    Should return\n            3\n    \"\"\"\n\
    \    count = 0\n    if S[0] == 'I':\n        count += 1\n    if S[1] == 'I':\n\
    \        count += 1\n    if S[2] == 'I':\n        count += 1\n    if S[3] == 'I':\n\
    \        count += 1\n    if S[4] == 'I':\n        count += 1\n    if S[5] == 'I':\n\
    \        count += 1\n    if S[6] == 'I':\n        count += 1\n    if S[7] == 'I':\n\
    \        count += 1\n    if S[8] == 'I':\n        count += 1\n    if S[9] == 'I':\n\
    \        count += 1\n    if S[10] == 'I':\n        count += 1\n    if S[11] ==\
    \ 'I':\n        count += 1\n    if S[12] == 'I':\n        count += 1\n    if S[13]\
    \ == 'I':\n        count += 1\n    if S[14] == 'I':\n        count += 1\n    if\
    \ S[15] == 'I':\n        count += 1\n    if S[16] == 'I':\n        count += 1\n\
    \    if S[17] == 'I':\n        count += 1\n    if S[18] == 'I':\n        count\
    \ += 1\n    if S[19] == 'I':\n        count += 1\n    if S[20] == 'I':\n     \
    \   count += 1\n    if S[21] == 'I':\n        count += 1\n    if S[22] == 'I':\n\
    \        count += 1\n    if S[23] == 'I':\n        count += 1\n    if S[24] ==\
    \ 'I':\n        count += 1\n    if S[25] == 'I':\n        count += 1\n    if S[26]\
    \ == 'I':\n        count += 1\n    if S[27] == 'I':\n        count += 1\n    if\
    \ S[28] == 'I':\n        count += 1\n    if S[29] == 'I':\n        count += 1\n\
    \    if S[30] == 'I':\n        count += 1\n    if S[31] == 'I':\n        count\
    \ += 1\n    if S[32] == 'I':\n", "            >>> is_bored(\"What do you do with\
    \ a PC?\")\n            2\n            \"\"\"\n   \n    The string will contain\
    \ only lowercase letters.\n   \n    Link: https://leetcode.com/problems/bored-sentence/#/description\n\
    \    \"\"\"\n    bored_count = 0\n    for s in S:\n        if s.lower().startswith(\"\
    i\"):\n            bored_count += 1\n    return bored_count\n\n", "          \
    \  I love the eating of you!\n            \n            I don't want to talk about\
    \ it\n            \n            Where is the mistake? I can't see it!\n      \
    \      \"\"\"\n            The above string contains two boredoms:\n         \
    \   \n            1. The first sentence starts with the word \"I\"\n         \
    \   2. The second sentence doesn't start with the word \"I\".\n    \"\"\"\n  \
    \  count = 0\n    for word in S.split():\n        if word.startswith('I'):\n \
    \           count = count+1\n    return count\n</cell>\n<cell>\nassert is_bored(\"\
    \"\"I love the eating of you!\n\nI don't want to talk about it\n\nWhere is the\
    \ mistake? I can't see it!\"\"\") == 2\nassert is_bored(\"\"\"I love the eating\
    \ of you!\n\nI don't want to talk about it!\n\nWhere is the mistake? I can't see\
    \ it!\"\"\") == 1\nassert is_bored(\"\"\"I love the eating of you!\n\nI don't\
    \ want to talk about it\n\nWhere is the mistake? I can't see it!\"\"\") == 0\n\
    </cell>\n<text>\nExercise 9\nWrite a function to check if a string contains at\
    \ least two boredoms (i.e.,\n\"I love the eating of you!\").\nWrite another function\
    \ that counts the number of boredoms in the given string.\nThen write another\
    \ function that checks to see if a string has at least two boredoms.\n\n\n</text>\n\
    <cell>", "            Boredom, you and I, I and !\n            I and you, I and\
    \ !\n            !\n            \"\"\"\n            should return [2, 1, 1]\n\
    \    \n    You should use at least one for loop to count the number of boredoms.\n\
    \    You may assume that the input string is always well formatted.\n    \"\"\"\
    \n    boredoms = []\n    for word in S.lower().split():\n        if word.startswith('i'):\n\
    \            boredoms.append(1)\n    return sum(boredoms)\n\n", "            Input:\n\
    \                        He is bored\n            Output: \n                 \
    \       1\n            Explanation: \n                        He is a boredom,\
    \ because it starts with \"I\".\n            \"\"\"\n    \n    Args:\n       \
    \ S (string): string containing several sentences, each end with '.', '?' or '!'.\n\
    \    \n    Returns:\n        int: the number of boredoms in S.\n    \"\"\"\n \
    \   # your code here\n    \n    count = 0\n    \n    for sentence in S.split('.'):\n\
    \        sentence += \".\"\n        if sentence.startswith(\"I\"):\n         \
    \   count += 1\n    return count\n\n", "            I don't know\n           \
    \ I won't\n            I will\n            I won't\n            I wouldn't\n \
    \           I won't\n            I don't\n            \"\"\"\n            \n \
    \           Output:\n                1\n            \n            Explanation:\n\
    \                sentence 1 starts with \"I\", and has one boredom \"I don't know\"\
    \n                sentence 2 starts with \"I\", and has two boredoms \"I won't\"\
    \ and \"I wouldn't\"\n            \"\"\"\n            \n    Arguments:\n     \
    \   S -- a string\n    \n    Returns:\n        int: the number of boredoms found\
    \ in S.\n    \"\"\"\n    boredoms = []\n    for sent in S:\n        if \"I\" in\
    \ sent or sent[0] == \"I\":\n            boredoms.append(sent)\n    return len(boredoms)\n\
    \n", "            Sentence 1: \"We are happy because we're bored\"\n         \
    \   Sentence 2: \"We are happy because we're bored.\"\n            Sentence 3:\
    \ \"We are happy because we're bored.?\"\n            Sentence 4: \"We are happy\
    \ because we're bored.!\"\n            Sentence 5: \"We are happy because we're\
    \ bored.\"\n            Sentence 6: \"We are happy because we're bored. We're\
    \ bored.\"\n            Sentence 7: \"We are happy because we're bored. We're\
    \ bored because we're bored.\"\n            Sentence 8: \"We are happy because\
    \ we're bored. We're bored because we're bored.!\"\n            Sentence 9: \"\
    We are happy because we're bored. We're bored because we're bored.!\"\n      \
    \      Sentence 10: \"We are happy because we're bored. We're bored because we're\
    \ bored. We're bored.\"\n            Sentence 11: \"We are happy because we're\
    \ bored. We're bored because we're bored. We're bored because we're bored.\"\n\
    \            Sentence 12: \"We are happy because we're bored. We're bored because\
    \ we're bored. We're bored because we're bored.\"\n            Sentence 13: \"\
    We are happy because we're bored. We're bored because we're bored. We're bored\
    \ because we're bored. We're bored.\"\n            Sentence 14: \"We are happy\
    \ because we're bored. We're bored because we're bored. We're bored because we're\
    \ bored. We're bored because we're bored.!\"\n            Sentence 15: \"We are\
    \ happy because we're bored. We're bored because we're bored. We're bored because\
    \ we're bored. We're bored because we're bored. We're bored.\"\n            Sentence\
    \ 16: \"We are happy because we're bored. We're bored because we're bored. We're\
    \ bored because we're bored. We're bored because we're bored. We're bored because\
    \ we're bored.\"\n            Sentence 17: \"We are happy because we're bored.\
    \ We're bored because we're bored. We're bored because we're bored. We're bored\
    \ because we're bored. We're bored because we're bored. We're bored.\"\n     \
    \       Sentence 18: \"We are happy because we're bored. We're bored because we're\
    \ bored. We're bored because we're bored. We're bored because we're bored. We're\
    \ bored because we're bored. We're ", "            Input: \"Hannah Boredom? Yes.\"\
    \ \n            Output: 3\n            Input: \"Hannah Boredom! Yes.\" \n    \
    \        Output: 2\n            Input: \"Hannah Boredom, Yes.\" \n           \
    \ Output: 2\n            Input: \"Hannah Boredom, Yes.\" \n            Output:\
    \ 2\n            Input: \"Hannah Boredom, Yes.\" \n            Output: 1\n   \
    \         \"\"\"\n    \"\"\"\n    \n    S = S.lower()\n    boredom = 0\n    \n\
    \    if S[0] == 'i': \n        boredom = boredom + 1\n        \n    if S[-1] ==\
    \ '!': \n        boredom = boredom + 1\n        \n    if S[0] == 'i' and S[-1]\
    \ == '!': \n        boredom = boredom + 1\n        \n    if S[-1] == '!' and S[0]\
    \ == 'i': \n        boredom = boredom + 1\n        \n    if S[0] == 'i' and S[-1]\
    \ != '!': \n        boredom = boredom + 1\n        \n    if S[-1] != '!' and S[0]\
    \ == 'i': \n        boredom = boredom + 1\n        \n    if S[-1] != '!' and S[0]\
    \ != 'i': \n        boredom = boredom + 1\n        \n    if S[0] == 'i' and S[-1]\
    \ == '?': \n        boredom = boredom + 1\n        \n    if S[-1] == '?' and S[0]\
    \ == 'i': \n        boredom = boredom + 1\n        \n    if S[-1] == '?' and S[0]\
    \ != 'i': \n        boredom = boredom + 1\n        \n    if S[0] == 'i' and S[-1]\
    \ != '?': \n        boredom = boredom + 1\n        \n    if S[-1] != '?' and S[0]\
    \ == 'i': \n        boredom = boredom + 1\n        \n    if S[-1] != '?' and S[0]\
    \ != 'i': \n        boredom = boredom + 1\n        \n    return boredom\n</cell>\n\
    <cell>", "            I love Python. \n            I'm very sad.\"\"\"\n    The\
    \ word love and the word sad are boredoms;\n    I love Python. I'm very sad. ->\
    \ 2\n    \n    Args:\n        S (string): a string of sentences.\n    Returns:\n\
    \        int: number of boredoms\n    \n    \"\"\"\n    # return 0\n    \n   \
    \ boredoms_count = 0\n    \n    for sentence in S.split('.'):\n        if sentence\
    \ == '':\n            continue\n        if sentence[0] == 'I':\n            boredoms_count\
    \ += 1\n    \n    return boredoms_count\n", "            Hello, Bored?\n     \
    \       Hello, Bored!\n            Hello, Bored?\n            Hey, Bored!\n  \
    \          Hey, Bored!\n            Hey, Bored?\n            \"\"\"\n    should\
    \ return 3 because there are 3 boredoms in the given string.\n    \"\"\"\n   \
    \ count = 0\n    boredoms = []\n    for i in S:\n        if i == '?' or i == '!':\n\
    \            boredoms.append(i)\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=0 tags=python-3.x,python |>\n<| a dscore=0 |>\n<code>", "    \n \
    \   Input: \"I like foo.\"\n    Output: 3\n    \n    Input: \"I like bar.?\"\n\
    \    Output: 1\n    \n    Input: \"I like foo!\" \n    Output: 1\n    \n    Input:\
    \ \"I like foo?\"\n    Output: 0\n    \n    Input: \"I like bar.\"\n    Output:\
    \ 1\n    \n    Input: \"I like bar.!\"\n    Output: 1\n    \n    Input: \"I like\
    \ bar.?\"\n    Output: 1\n    \n    Input: \"I like bar!!!\"\n    Output: 2\n\
    \    \n    Input: \"I like bar.!?\"\n    Output: 2\n    \n    Input: \"I like\
    \ foo!\" \n    Output: 1\n    \n    Input: \"I like foo.!\"\n    Output: 2\n \
    \   \n    Input: \"I like foo!!!\"\n    Output: 3\n    \n    Input: \"I like bar.!?!\"\
    \ \n    Output: 2\n    \n    Input: \"I like foo!.!\"\n    Output: 3\n    \n \
    \   Input: \"I like foo.!?\"\n    Output: 3\n    \n    Input: \"I like foo!.!?\"\
    \n    Output: 3\n    \n    Input: \"I like foo.!?!\"\n    Output: 3\n    \n  \
    \  Input: \"I like foo.!?!.\"\n    Output: 3\n    \n    Input: \"I like bar.!?!.\"\
    \ \n    Output: 3\n    \n    Input: \"I like foo.!?!.\"\n    Output: 3\n    \n\
    \    Input: \"I like foo.!?!..\" \n    Output: 3\n    \n    Input: \"I like foo.!?!..!\"\
    \n    Output: 3\n    \n    Input: \"I like foo.!?!...\" \n    Output: 3\n    \n\
    \    Input: \"I like foo.!?!...?\"\n    Output: 3\n    \n    Input: \"I like foo.!?!...!\"\
    \ \n    Output: 3\n    \n    Input: \"I like foo.!?!...!.\" \n    Output: 3\n\
    \    \n    Input: \"I like foo.!?!...!..\"\n    Output: 3\n    \n    Input: \"\
    I like foo.!?!...!..!\"\n    Output: 3\n    \n    Input: \"I like foo.!?!...!..!.\"\
    \n    Output: 3\n    \n    Input: \"I like foo.!?!...!..!..\" \n    Output: 3\n\
    \    \n    Input: \"I like foo.!?!...!..!..!\"\n    Output: 3\n    ", "      \
    \      Bored?! How are you!\n            \n            He asked him nicely. I'm\
    \ glad he's there.\n            \n            I'm bored. He's been bored too many\
    \ times.\n            \n            I asked him nicely. He said \"Bang!\"\n  \
    \          \n            He asked me how are you? He's nice.\n            \n \
    \           He asked me how are you? He asked me nicely.\n            \n     \
    \       How are you? I'm bored.\n            \n            He asked me how are\
    \ you? I'm bored.\n            \n            I asked him nicely. He said \"Bang!\"\
    \ He asked me nicely.\n            \n            I asked him nicely. He said \"\
    Bang!\" He asked me nicely.\n            \n            He asked me how are you?\
    \ He's nice. He asked me nicely.\n            \n            He asked me how are\
    \ you? He asked me nicely. I'm bored.\n            \n            He asked me how\
    \ are you? I'm bored. He asked me nicely.\n            \"\"\"\n    \n    bored_count\
    \ = 0\n    \n    # Your code goes here!\n    # Loop through the sentence\n   \
    \ sentence = S.split(\".\")\n    \n    for sentence in sentence:\n        # Check\
    \ if sentence starts with 'I'\n        if sentence[0] == \"I\":\n            #\
    \ Increment the count of bored sentences\n            bored_count += 1\n     \
    \   \n    return bored_count\n</cell>\n<cell>", "    The boredom of being seven\
    \ years old is more severe than\n    other boredoms\n    than others\"\"\"\n \
    \   Args:\n        S: line of text\n    Returns:\n        int: number of boredoms\n\
    \    \"\"\"\n    boredoms = 0\n    if S[0] == 'I':\n        boredoms += 1\n  \
    \  elif S[0] == '!':\n        boredoms += 1\n    elif S[0] == '?':\n        boredoms\
    \ += 1\n    return boredoms\n\n", "            Input:\n            S = boredoms\n\
    \            Output: 3\n            \n            Input:\n            S = \"I\
    \ bored as a dog\"\n            Output: 0\n            \n            Input:\n\
    \            S = \"I hated my life\"\n            Output: 1\n            \n  \
    \          Input:\n            S = \"I hated my life.\" \n            Output:\
    \ 0\n            \n            Input:\n            S = \"I hated my life? I hated\
    \ my life!\" \n            Output: 1\n            \"\"\"\n    \"\"\"\n    Boredoms\
    \ in English are sentences that start with a word containing \"I\"\n    \n   \
    \ Sentences:\n    \n        1. \"I bored as a dog\"\n        \n        2. \"I\
    \ hated my life\"\n        \n        3. \"I hated my life. \" \n        \n   \
    \     4. \"I hated my life? I hated my life!\" \n    \"\"\"\n    \n    # Your\
    \ code here\n    count = 0\n    if S[0] == 'I' and S[-1] == '.':\n        count\
    \ += 1\n    if S[0] == 'I' and S[-1] == '?':\n        count += 1\n    if S[0]\
    \ == 'I' and S[-1] == '!':\n        count += 1\n    return count\n\n", "     \
    \       I love programming\n            I love fishing\n            I hate fishing\n\
    \            I love eating.\n            I love cooking\n            \"\"\"\n\
    \            -> 3\n    \"\"\"\n    \n    count = 0\n    \n    S = S.replace(\"\
    \\n\", \"\")\n    \n    S = S.split(\".\")\n    \n    for i in S:\n        \n\
    \        if \"I\" in i:\n            \n            if \".\" in i or \"?\" in i\
    \ or \"!\" in i:\n            \n                count += 1\n            \n   \
    \ return count\n</cell>\n<text>\nExpected output\n4\n\n</text>\n<text>\nYour answer\
    \ here\n\n\n</text>\n<cell>", "        We are about to rise to the boredom of\
    \ the United States.\n        I am  not going to rise. It is raining!\n      \
    \  I am  not going to rise. It is raining!\n        We are about to rise to the\
    \ boredom of the United States.\n        I am  not going to rise. It is raining!\n\
    \        We are about to rise to the boredom of the United States.\n        I\
    \ am  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise. It is raining!\n   \
    \     We are about to rise to the boredom of the United States.\n        I am\
    \  not going to rise. It is raining!\n        We are about to rise to the boredom\
    \ of the United States.\n        I am  not going to rise", "            The dog\
    \ barks loudly.\n            The boy barks loudly.\n            I love you.\n\
    \            I love you boredom.\n            \"\"\"\n            \n         \
    \   Output:\n            The dog barks loudly.\n            The boy barks loudly.\n\
    \            1 love you.\n            2 boredom.\n           \n    Arguments:\n\
    \    S -- input string\n    \"\"\"\n    # Initialize the counter\n    n = 0\n\
    \    # Initialize a string to store the output\n    S = S.lower()\n    # Here\
    \ is a possible solution\n    # Check to see if the starting letter of the string\
    \ matches the string\n    # \"boredom\". If it does increment the count by 1\n\
    \    if S[0] == 'b':\n        n += 1\n    # return the count\n    return n\n",
  "        Hello? How are you! I'm bored. Are you good?\n        How are you! I'm\
    \ bored. Are you good?\n        How are you! I'm bored. Are you good?\n      \
    \  How are you! I'm bored. Are you good?\n        How are you! I'm bored. Are\
    \ you good?\n        How are you! I'm bored. Are you good?\n        How are you!\
    \ I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n  \
    \      How are you! I'm bored. Are you good?\n        How are you! I'm bored.\
    \ Are you good?\n        How are you! I'm bored. Are you good?\n        How are\
    \ you! I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n\
    \        How are you! I'm bored. Are you good?\n        How are you! I'm bored.\
    \ Are you good?\n        How are you! I'm bored. Are you good?\n        How are\
    \ you! I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n\
    \        How are you! I'm bored. Are you good?\n        How are you! I'm bored.\
    \ Are you good?\n        How are you! I'm bored. Are you good?\n        How are\
    \ you! I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n\
    \        How are you! I'm bored. Are you good?\n        How are you! I'm bored.\
    \ Are you good?\n        How are you! I'm bored. Are you good?\n        How are\
    \ you! I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n\
    \        How are you! I'm bored. Are you good?\n        How are you! I'm bored.\
    \ Are you good?\n        How are you! I'm bored. Are you good?\n        How are\
    \ you! I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n\
    \        How are you! I'm bored. Are you good?\n        How are you! I'm bored.\
    \ Are you good?\n        How are you! I'm bored. Are you good?\n        How are\
    \ you! I'm bored. Are you good?\n        How are you! I'm bored. Are you good?\n\
    \        How are you! I'm bored. Are you good?\n        How are ", "         \
    \   Sentence 1:\n\n            I went to school.\n            I bought a car.\n\
    \            I ate an apple.\n            I ate an apple.\n            I ate an\
    \ apple.\n\n            Sentence 2:\n\n            I went to school.\n       \
    \     I ate an apple.\n            I ate an apple.\n            I ate an apple.\n\
    \            I ate an apple.\n            I ate an apple.\n\n            Sentence\
    \ 3:\n\n            I went to school.\n            I ate an apple.\n         \
    \   I ate an apple.\n            I ate an apple.\n            I ate an apple.\n\
    \            I ate an apple.\n            I ate an apple.\n\n            Sentence\
    \ 4:\n\n            I went to school.\n            I ate an apple.\n         \
    \   I ate an apple.\n            I ate an apple.\n            I ate an apple.\n\
    \            I ate an apple.\n            I ate an apple.\n            I ate an\
    \ apple.\n            \"\"\"\n\n            Returns:\n            --------\n \
    \           3\n\n    \"\"\"\n\n    bored_sentence = 0\n\n    if S == \"I\":\n\
    \        bored_sentence = 1\n\n    elif S == \"!\":\n        bored_sentence =\
    \ 0\n\n    else:\n        bored_sentence = 1\n\n    return bored_sentence\n\n",
  "            Hello, world!\n            It's   raining outside.\n            Hello,\
    \ world! It's raining outside.\n            It's raining outside today.\n    \
    \        Hello, world! It's   raining outside.\n            \"\"\"\n    Output:\n\
    \            1\n            0\n            0\n            1\n            0\n \
    \   \"\"\"\n    # Your code here\n    boredom = 0\n    for word in S.split():\n\
    \        if word.startswith('I'):\n            boredom += 1\n    return boredom\n\
    </cell>\n<cell>", "    >>> is_bored('I am bored') #>>> 1\n    \"\"\"\n    count\
    \ = 0\n    for word in S.split(\" \"):\n        if word.lower() in [\"i\", \"\
    me\", \"my\"]:\n            count += 1\n    return count\n", "            I am\
    \ a student at the University of California.\n            I like reading and playing\
    \ football at school.\n            I enjoy eating pizza and drinking beer.\n \
    \           I like to go to the movies with my friends.\n            I am annoyed\
    \ by school policy that does not allow me to meet.\n            He is so lonely\
    \ and angry.\n            I don't like school.\n            He is so lonely so\
    \ angry.\n            \"\"\"\n    Input:\n            S: your string\n    Output:\n\
    \            int: number of boredoms \n    \"\"\"\n    # YOUR CODE HERE\n    boredoms\
    \ = boredomCounter(S)\n    return boredoms \n\n", "    Input: \"I like you!\"\n\
    \    Output: 3\n    \"\"\"\n    # Complete the function\n    boredoms = 0\n  \
    \  boredoms_pattern = 'I\\w+'\n    boredoms_string = S\n    for a in boredoms_string:\n\
    \        if re.search (boredoms_pattern, a) != None:\n            boredoms = boredoms\
    \ + 1\n    return boredoms\n", "            Sentence 1: I love you.\n        \
    \    Sentence 2: I am happy because my friends love me.\n            Sentence\
    \ 3: We are happy and my teacher is happy because I am happy.\n            Sentence\
    \ 4: I am not happy.\n            \"\"\"\n    The number of boredoms is: \"3\"\
    \n    \n    Boredom check is a very important concept to grasp when dealing with\
    \ text.\n    The function is_bored() will return True or False to indicate whether\
    \ a string\n    of words is a boredom or not.\n    \n    Args:\n        S : Your\
    \ sentence needs to be of type str\n    Returns:\n        True or False\n    \"\
    \"\"\n    \n    # Your code here!\n    \n    if S[0] == 'I':\n        return 1\n\
    \    else:\n        return 0\n\n", "            I am a bored. She asked me to\
    \ come back after work. \n            I asked him to come back after work. \n\
    \            I asked him to come back after work. \n            I asked him to\
    \ come back after work.\n            \"\"\"\n            returns 5\n         \
    \  \n            \n            For example 2:\n            \"\"\"\n          \
    \  I am not feeling so good. She asked me to come back after work.\n         \
    \   I asked him to come back after work.\n            I asked him to come back\
    \ after work.\n            I asked him to come back after work.\n            \"\
    \"\"\n            returns 0\n    \"\"\"\n    return S.count('I')\n", "       \
    \     I. Meet me\n            II. Sit down\n            III. Run away\n      \
    \      IV. Fall asleep\n            V. Sit up\n            VI. Fall asleep\n \
    \           VII. Sit down\n            \"\"\"\n    The function is_bored(S) should\
    \ return the number of boredoms found.\n    boredoms found is 4.\n\n    You can\
    \ assume that all the letters in the string are lowercase letters\n    and the\
    \ boredoms start with the letter \"I\".\n\n    For example:\n           is_bored(\"\
    meet me\") --> True\n           is_bored(\"Sit down\") --> False\n           is_bored(\"\
    Run away\") --> True\n           is_bored(\"Sit up\") --> False\n\n    Constraints\n\
    \            1 <= len(S) <= 10^4\n            S consists only of lowercase English\
    \ letters separated by one or\n            more punctuation characters, including\
    \ '.', '?', '!'.\n\n    \"\"\"\n    # This is probably not the best solution,\
    \ but I'm pretty sure it works\n    # for this problem\n    count = 0\n    sentence\
    \ = S\n    while 'I' in sentence:\n        sentence = sentence.replace('I', '')\n\
    \        count += 1\n    return count\n\n", "            Bored. You'd better watch\
    \ this boredom of yours because it's pretty\n            boring.\n           \
    \ \"\"\"\n            \n    boredoms = 0\n    for word in S.split('.'):\n    \
    \    if word.startswith('I'):\n            boredoms += 1\n    return boredoms\n",
  "    Input: \"I like to eat fish and chips\"\n    Output: 3\n\n    Input: \"He is\
    \ nice. He likes cats.\"\n    Output: 4\n            \"\"\"\n    \n    # Write\
    \ your implementation here\n    boredom_count=0\n    for word in S.split('.'):\n\
    \        if word.startswith('I'):\n            boredom_count+=1\n    \n    return\
    \ boredom_count\n", "            Is your kidnapping on?\n            I hate it.\n\
    \            I'm sleepy!\n            \"\"\"\n            should return 1.\n \
    \           \"\"\"\n            I'm sleepy!\n            I'm sleepy!\n       \
    \     I hate it.\n            \"\"\"\n            should return 2.\n         \
    \   \"\"\"\n            I hate it.\n            I'm sleepy!\n            I hate\
    \ it.\n            I'm sleepy!\n            \"\"\"\n            should return\
    \ 3.\n            \"\"\"\n            I hate it.\n            I'm sleepy!\n  \
    \          I'm sleepy!\n            I hate it.\n            I'm sleepy!\n    \
    \        I'm sleepy!\n            I hate it.\n            I'm sleepy!\n      \
    \      I'm sleepy!\n            I'm sleepy!\n            I'm sleepy!\n       \
    \     I'm sleepy!\n            I'm sleepy!\n            I'm sleepy!\n        \
    \    I'm sleepy!\n            I'm sleepy!\n            \"\"\"\n            should\
    \ return 5.\n    \"\"\"\n    count = 0\n    words = S.split(\".\")\n    for word\
    \ in words:\n        if word.startswith(\"I\"):\n            count += 1\n    return\
    \ count\n\n", "            I love you.\n            I, you!\n            I hate\
    \ you.\n            I love you very much.\n            I love you very much.\n\
    \            I\n            \"\"\"\n    should be counted as:\n            \"\"\
    \"\n            2\n            \"\"\"\n    \"\"\"\n    # YOUR CODE HERE\n    boredoms\
    \ = 0\n    i = 0\n    while i < len(S):\n        if S[i] == '.' or S[i] == '?'\
    \ or S[i] == '!':\n            i += 1\n        else:\n            if S[0] == 'I':\n\
    \                boredoms += 1\n            i += 1\n    return boredoms\n\n",
  "    Input: S = 'I am a bored'\n    Output: 2\n    \n    Input: S = 'I am not bored'\n\
    \    Output: 0\n    \n    Input: S = 'I am a bored!'\n    Output: 1\n    \n  \
    \  Input: S = 'I am not bored!'\n    Output: 1\n    \"\"\"\n    \n    bored_count\
    \ = 0\n    \n    sentences = S.split('.')\n    \n    for sentence in sentences:\n\
    \        bored_count += 1 if sentence[0] == 'I' else 0\n    \n    return bored_count\n\
    </cell>\n<cell>", "    >>> is_bored(\"Hi there! I hope you're having a good day.\"\
    )\n    6\n            \"\"\"\n    \"\"\"\n    # Your code here\n    return 0\n\
    \n", "            Is Bored ?\n            I like pianos better than I do!\n  \
    \          I love nature\n            I hate pianos as much as I hate nature\n\
    \            \"\"\"\n    \n    You can assume the string contains only lowercase\
    \ letters.\n    The first word of the sentence is bored if:\n        the sentence\
    \ starts with the word \"I\", and\n        there are at least 2 boredoms in the\
    \ sentence. \n    \n    \n    \n    \n    \n    \n    >>> is_bored(\"Is Bored\
    \ ?\")\n    1\n    >>> is_bored(\"IlikepianobetterthanIdo\")\n    0\n    >>> is_bored(\"\
    I like pianos better than I do!\")\n    1\n    >>> is_bored(\"I love nature\"\
    )\n    0\n    >>> is_bored(\"I hate pianos as much as I hate nature\")\n    0\n\
    \    >>> is_bored(\"I like pianos as much as I hate nature\")\n    1\n    \"\"\
    \"\n    \n    if S==\"I\":\n        return 1\n    elif S[0]==\"I\":\n        if\
    \ S==\"I\":\n            return 0\n        else:\n            return 1\n    else:\n\
    \        return 0\n</cell>\n<cell>", "            I love this sandwich.\n    \
    \        I love this sandwich. She loves it.\n            I love this sandwich.\
    \ She loves it. Perfect match.\n            I love this sandwich. She loves it.\
    \ Perfect match. \n            I love this sandwich. She loves it. Perfect match.\
    \ Perfect match.\n            I love this sandwich. She loves it. Perfect match.\
    \ Perfect match. Perfect match.\n            \"\"\"\n            \n    The output\
    \ of the function will be the integer 3.\n    \"\"\"\n    count = 0\n    \n  \
    \  for sentence in S.split(\".\"):\n        if sentence.startswith(\"I\"):\n \
    \           count += 1\n    \n    return count\n\n", "            S = \"I love\
    \ you!\"\n            S = \"love you!\"\n            S = \"love me!\"\n      \
    \      S = \"me too!\"\n            \"\"\"\n    Return:\n            A list of\
    \ ints representing boredom counts, e.g., [1, 1, 1, 2, 1, 2, 1].\n    \n    \n\
    \    Constraints:\n            1 <= len(S) <= 100\n            1 <= len(S) <=\
    \ 300\n    \"\"\"\n    boredoms = Counter(s.lower() for s in S.split('.'))\n \
    \   boredoms.update([s.lower() for s in S.split('?')])\n    boredoms.update([s.lower()\
    \ for s in S.split('!')])\n    return list(boredoms.values())\n", "    I\n   \
    \ am\n    bored\n    I\n    am\n    bored\n    I\n    am\n    bored\n        \
    \    \"\"\" \n    should return 1\n    \"\"\"\n    Your code here\n    \"\"\"\n\
    \    boredoms = 0\n    boredoms_count = 0\n    sentence = S.split('.')\n    \n\
    \    i = 0\n    while i < len(sentence):\n        boredom_sentence = sentence[i]\n\
    \        if boredom_sentence.startswith('I'):\n            boredoms_count = boredoms_count\
    \ + 1\n        i += 1 \n        \n    return boredoms_count\n\"\"\"\n", "    \
    \        \n            'I went to the store and bought some flowers'\n       \
    \     'I bought a flower and ate it'\n            'I bought some flowers and ate\
    \ it'\n            'I ate it all and ate it'\n            'I ate it all and ate\
    \ it'\n            \n    \"\"\"\n    boredoms = 0\n    for i in range(0, len(S)):\n\
    \        if S[i] == \"I\":\n            if S[i-1] == \".\" or S[i-1] == \"?\"\
    \ or S[i-1] == \"!\":\n                boredoms += 1\n    return boredoms\n\n",
  "            I love you!\n            It's boredom!\n            I love you!\n \
    \           \"\"\"\n            has a boredom, because it starts with the word\
    \ \"I\".\n    Args:\n            S (string): the input string\n\n    Returns:\n\
    \            an integer: the number of boredoms\n    \"\"\"\n    boredom = 0\n\
    \n    if S[0].isupper():\n        boredom = 1\n    \n    if '.' in S:\n      \
    \  boredom += 1\n    if S[-1] in '?!':\n        boredom += 1\n    \n    return\
    \ boredom\n\n", "    The boredom of paradise is dear, but it's so boring.\n  \
    \  \n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n\
    \    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    I...?!\n    ",
  "    Input: I like this.\n            Output: 1 \n            \"\"\"\n    \n   \
    \ Input: I like this.\n            Output: 1 \n    \n    Input: I like this.\n\
    \            Output: 1 \n    \n    Input: I like this.\n            Output: 1\
    \ \n    \n    Input: I like this.\n            Output: 1 \n    \n    Input: I\
    \ like this.\n            Output: 1 \n    \n    Input: I like this.\n        \
    \    Output: 1 \n    \n    Input: I like this.\n            Output: 1 \n    \n\
    \    Input: I like this.\n            Output: 1 \n    \n    Input: I like this.\n\
    \            Output: 1 \n    \n    Input: I like this.\n            Output: 1\
    \ \n    \n    Input: I like this.\n            Output: 1 \n    \n    Input: I\
    \ like this.\n            Output: 1 \n    \n    Input: I like this.\n        \
    \    Output: 1 \n    \n    Input: I like this.\n            Output: 1 \n    \n\
    \    Input: I like this.\n            Output: 1 \n    \n    Input: I like this.\n\
    \            Output: 1 \n    \n    Input: I like this.\n            Output: 1\
    \ \n    \n    Input: I like this.\n            Output: 1 \n    \n    Input: I\
    \ like this.\n            Output: 1 \n    \n    Input: I like this.\n        \
    \    Output: 1 \n    \n    Input: I like this.\n            Output: 1 \n    \n\
    \    Input: I like this.\n            Output: 1 \n    \n    Input: I like this.\n\
    \            Output: 1 \n    \n    Input: I like this.\n            Output: 1\
    \ \n    \n    Input: I like this.\n            Output: 1 \n    \n    Input: I\
    \ like this.\n            Output: 1 \n    \n    Input: I like this.\n        \
    \    Output: 1 \n    \n    Input: I like this.\n            Output: 1 \n    \n\
    \    Input: I like this.\n            Output: 1 \n    \n    Input: I like this.\n\
    \            Output: 1 \n    \n    Input: I like this.\n            Output: 1\
    \ \n    \n    Input: I like this.\n            Output: 1 \n    \n    Input: I\
    \ like this.\n            Output: 1 \n    \n    Input: I like this.\n        \
    \    Output: 1 \n    \n    Input: I like this.\n            Output: 1 \n    \n\
    \    Input: I like this.\n            Output: 1 \n    \n    Input: I like this.\n\
    \            Output: 1 \n    \n    Input: I like this.\n            Output: 1\
    \ \n    \n    Input: I ", "            We are going to study the mechanics of\
    \ our new book.\n            We have a new boredom.\n            Our new book\
    \ is called Boredom Book.\n            \"\"\"\n        has three boredoms, while\
    \ this string:\n            \"\"\"\n            We are going to study the mechanics\
    \ of our new book.\n            We have a new boredom.\n            We have a\
    \ new boredom.\n            Our new book is called Boredom Book.\n           \
    \ \"\"\"\n        has no boredoms.\n    \"\"\"\n    return S.lower().startswith('i')\n\
    </cell>\n<cell>\nassert is_bored('We are going to study the mechanics of our new\
    \ book.')\nassert not is_bored('We are going to study the mechanics of our new\
    \ book.')\nassert not is_bored('We have a new boredom.')\nassert is_bored('We\
    \ have a new boredom. ')\n</cell>\n<cell>", "            'This dog barks': 1\n\
    \            'This dog barks !': 1\n            'This dog barks !?': 1\n     \
    \       'This dog barks !?.': 1\n            'This dog barks !?.?': 1\n      \
    \      'This dog barks !?.?.': 1\n            \"\"\"\n    Args:\n        S: string\
    \ sentence.\n\n    Returns:\n        int: Number of boredoms.\n    \"\"\"\n  \
    \  boredoms = 0\n    if S[0] == 'I':\n        boredoms = 1\n    if S[0] == '.':\n\
    \        boredoms += 1\n    if S[0] == '?':\n        boredoms += 1\n    if S[0]\
    \ == '!':\n        boredoms += 1\n    return boredoms\n", "        I love Python.\
    \ \n        I love Raspberry Pi. \n        I love cheese. \n        I love Apple\
    \ and Orange.\n        I hate Raspberry Pi because I hate the Pi.\n        I love\
    \ Python but don't love Raspberry Pi. \n        I love cheese and love the Raspberry\
    \ Pi because I love both.\n        I love Apple and cheese. \n        I love Raspberry\
    \ Pi. \n        I love Python because I love Python. \n        I love Raspberry\
    \ Pi. \n        I love Python because I love Python. \n        I hate Raspberry\
    \ Pi because I hate the Pi.\n        I love Python but don't love Raspberry Pi.\
    \ \n        I love cheese and love the Raspberry Pi because I love both.\n   \
    \     I love Apple and cheese. \n        I love Raspberry Pi. \n        I love\
    \ Python because I love Python. \n        I love Raspberry Pi but don't love cheese.\
    \ \n        I love Python but don't love Raspberry Pi. \n        I love cheese\
    \ and love the Raspberry Pi because I love both.\n        I love Apple and cheese.\
    \ \n        I love Raspberry Pi. \n        I love Python because I love Python.\
    \ \n        I love Raspberry Pi. \n        I love Python because I love Python.\
    \ \n        I love Raspberry Pi but don't love cheese. \n        I love Python\
    \ but don't love Raspberry Pi. \n        I love cheese and love the Raspberry\
    \ Pi because I love both.\n        I love Apple and cheese. \n        I love Raspberry\
    \ Pi but don't love cheese. \n        I love Python but don't love Raspberry Pi\
    \ because I love both.\n        I love Apple and cheese. \n        I love Raspb",
  "            I sat in a boredom.\n            I ate an apple, a boredom.\n     \
    \       I went to school.\n            I ate an apple, a boredom.\n          \
    \  I ate an apple, a boredom.\n            I sat in a boredom.\n            \"\
    \"\"\n            Output: 2\n    \"\"\"\n    \n    boredoms = 0\n    \n    for\
    \ word in S.split():\n        if word == \"I\":\n            boredoms += 1\n \
    \   \n    return boredoms\n", "            I went for a walk.\n            I went\n\
    \            I saw a dog.\n            I tried to go for a run.\n            I\
    \ fell asleep.\n            \"\"\"\n            \n            In this case the\
    \ function returns the number 4\n\n    Boredoms are tricky:\n    \n          \
    \  I slept like a wild dog and walked to the movies.\n            I saw a wild\
    \ dog go out for a walk and ate my dearmother.\n            I did not have a movie.\n\
    \            I fell asleep and woke up.\n            I ran out of time.\n    \
    \        \n            Your task is to write a function that given a sentence\
    \ will return \n            the number of boredoms that start with a capital letter\
    \ \"I\"\n            \"\"\"\n\n    # BEGIN Question 3.2\n    def count_boredoms(S:\
    \ str) -> int:\n        S = S.lower()\n        # Implement the function here\n\
    \        S = S.replace(\",\", \"\")\n        S = S.replace(\"?\", \"\")\n    \
    \    S = S.replace(\"!\", \"\")\n        S = S.replace(\".\", \"\")\n        S\
    \ = S.replace(\"I\", \"\")\n        S = S.split()\n        boredom = 0\n     \
    \   for word in S:\n            if word[0].isupper():\n                boredom\
    \ += 1\n        return boredom\n    # END Question 3.2\n        \n    # BEGIN\
    \ Question 3.1\n    def count_boredoms(S: str) -> int:\n        S = S.lower()\n\
    \        # Implement the function here\n        S = S.replace(\",\", \"\")\n \
    \       S = S.replace(\"?\", \"\")\n        S = S.replace(\"!\", \"\")\n     \
    \   S = S.replace(\".\", \"\")\n        S = S.replace(\"I\", \"\")\n        S\
    \ = S.split()\n        boredom = 0\n        for word in S:\n            if word[0].isupper():\n\
    \                boredom += 1\n        return boredom\n    # END Question 3.1\n\
    \    \n    assert is_bored(\"I went for a walk.\") == 4\n    assert is_bored(\"\
    I went.\") == 1\n    assert is_bored(\"I saw a dog.\") == 3\n    assert is_bored(\"\
    I tried to go for a run.\") == 2\n    assert is_bored(\"I fell asleep.\") == 3\n\
    \    assert is_bored(\"I slept like a wild dog and walked to the movies.\") ==\
    \ 2\n    assert is_bored(\"I saw a wild dog go out for a walk and ate my dearmother.\"\
    ) == 1\n    assert is_bored(\"I did not have a movie.\") == 0\n    assert is_bored(\"\
    I fell asleep and woke up.\") == 3\n    assert is_bored(\"I ran ", "         \
    \   I  am  bored  !\n            me too!\n            I'm not feeling very good.\n\
    \            \"\"\"\n            \n            Returns:\n                int:\
    \ 3\n        \n    In this case, only \"I\" borems were counted.\n    \"\"\"\n\
    \    boredoms = 0\n    for word in S:\n        if word.startswith('I'):\n    \
    \        boredoms += 1\n    return boredoms\n\nassert is_bored('I  am  bored \
    \ !') == 1\nassert is_bored('me too!') == 1\nassert is_bored('I'm not feeling\
    \ very good.') == 1\n</cell>\n<cell>", "            \"I saw a fox\"\n        \
    \    \"A dog is playing\"\n            \"He is bored\"\n            \"\"\"\n\n\
    \    INPUT:\n            S - the given string\n\n    OUTPUT:\n            1 -\
    \ if the string S starts with 'I', then return 1\n            0 - otherwise\n\n\
    \    Example of valid functions:\n\n    >>> is_bored(\"I saw a fox\")\n    1\n\
    \    >>> is_bored(\"A dog is playing\")\n    0\n    >>> is_bored(\"He is bored\"\
    )\n    1\n    \n    \n    Constraints:\n            1 <= len(S) <= 200\n     \
    \       S consist of lowercase letters, numbers and punctuation\n    \"\"\"\n\n\
    \    count = 0\n    \n    S = S.strip()\n    \n    \n    if S[0] == 'I':\n   \
    \     return 1\n    \n    if S[0] == '.' or S[0] == '?' or S[0] == '!':\n    \
    \    return 1\n    \n    if len(S) < 1:\n        return 0\n    \n    if len(S)\
    \ == 1:\n        return 0\n    \n    return 0\n</cell>\n<text>\nWrite a Python\
    \ function, bored2(S, min_len=2), that, given a string, checks if it has a boredom,\
    \ that is any sentence that starts with \"I\". For the string \"I saw a fox\"\
    \ the function returns True.\n\nINPUT:\n    S - a string (sentence with at least\
    \ one letter and at least 2 letters)\n\n    OUTPUT:\n        - if the string S\
    \ starts with \"I\", return True\n\n    >>> bored2(\"I saw a fox\")\n    True\n\
    \    >>> bored2(\"I hear a dog\")\n    False\n    >>> bored2(\"I hear a dog.\"\
    )\n    False\n    >>> bored2(\"I hear a dog!\") \n    False\n    \n    \n    \n\
    \    Constraints:\n        S consist of lowercase letters, numbers and punctuation\n\
    \        min_len == 2\n\n</text>\n<cell>", "        I am so excited. I am so happy.\n\
    \        I will be at your service. Let me know when you are done.\n        I\
    \ hope you have a great day.\n        Good luck!\n            \"\"\"\n\n     \
    \   returns 1\n    \"\"\"\n    count = 0\n    for i in range(len(S) - 1, -1, -1):\n\
    \        if S[i] in \". !?\":\n            count += 1\n        if S[i] == \" \"\
    :\n            count += len(S[i+1:])\n            break\n    return count\n",
  "    Input:\n    S = \"I bored to death I bored to death II bored to death !\"\n\
    \    Output: \n            0\n\n    Explanation:\n            Two boredoms: \n\
    \            \"I bored to death I\" \n            \"II bored to death !\"\n  \
    \  \"\"\"\n    i = 0\n    while i < len(S) - 1:\n        if S[i] == \"I\" and\
    \ S[i+1] == \"I\" and S[i+2] == \"I\" and S[i+3] == \"I\":\n            return\
    \ 1\n        i += 1\n    return 0\n</cell>\n<cell>", "        I   \n        are\
    \  \n        very\n        bored\n        by\n        I   \n        I   \n   \
    \     are  \n        very\n        bored\n        by\n        I   \n        are\
    \  \n        bored\n        \"\"\"\n    Return the number of boredoms in S.\n\
    \    \n    Example 1:\n    Input:\n    S = \"I   \\n   are  \\n   very\\n   bored\\\
    n   by\\n   I   \\n   I   \\n   are  \\n   very\\n   bored\\n   by\\n   I   \\\
    n   are  \\n   bored\"\n    Output: 3\n    Explanation: bored appears three times.\n\
    \    \n    Example 2:\n    Input:\n    S = \"I like naan!\"\n    Output: 0\n \
    \   Explanation: It doesn't start with the letter \"I\".\n    \n    Example 3:\n\
    \    Input:\n    S = \"I like naan!!\"\n    Output: 1\n    Explanation: It starts\
    \ with the letter \"I\", but doesn't end with \"!\".\n    \"\"\"\n    \n    #\
    \ YOUR CODE HERE\n    count = 0\n    for i,letter in enumerate(S):\n        if\
    \ letter not in \"!.?\":\n            continue\n        if letter==\"I\":\n  \
    \          count+=1\n    return count\n</cell>\n<cell>", "            I love you!\n\
    \            you love me?\n            I hate you!\n            I feel greet.\n\
    \            \"\"\"\n            has two boredoms:\n            \n           \
    \ I (3)\n            you (2)\n            me (1)\n            hate (1)\n     \
    \       feel greet. (1)\n            \n    Arguments:\n        S -- a string\n\
    \    Returns:\n        integer, the number of boredoms in S.\n    \"\"\"\n   \
    \ \n    boredoms = 0\n    \n    for word in S.split():\n        if word.startswith('I'):\n\
    \            boredoms += 1\n    return boredoms\n\n\n\"\"\"\nDON'T MODIFY ANYTHING\
    \ IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"\ntests.test_is_bored(is_bored)\n\
    </cell>\n<text>\nMost polarity word queries are quite similar. In what follows,\
    \ we provide a run_app function that given a query (and a language), it launches\
    \ the app and prints the results.\n\n\n</text>\n<cell>", "            I like you!\n\
    \            I hate you?\n            I love you!\n            I hate you!\n \
    \           I love you!\n            I love you!\n            I love you!\n  \
    \          I hate you!\n            I hate you!\n            I love you!\n   \
    \         I love you!\n            I hate you!\n            I love you!\n    \
    \        I love you!\n            I hate you!\n            I love you!\n     \
    \       I hate you!\n            I love you!\n            I love you!\n      \
    \      I love you!\n            I hate you!\n            I hate you!\n       \
    \     I love you!\n            I love you!\n            I love you!\n        \
    \    I love you!\n            I hate you!\n            I love you!\n         \
    \   I love you!\n            I love you!\n            I hate you!\n          \
    \  I love you!\n            I love you!\n            I love you!\n           \
    \ I hate you!\n            I love you!\n            I love you!\n            I\
    \ hate you!\n            I love you!\n            I love you!\n            I love\
    \ you!\n            I love you!\n            I hate you!\n            I love you!\n\
    \            I love you!\n            I love you!\n            I love you!\n \
    \           I love you!\n            I hate you!\n            I love you!\n  \
    \          I love you!\n            I love you!\n            I love you!\n   \
    \         I love you!\n            I hate you!\n            I love you!\n    \
    \        I love you!\n            I love you!\n            I love you!\n     \
    \       I love you!\n            I love you!\n            I love you!\n      \
    \      I love you!\n            I love you!\n            I love you!\n       \
    \     I love you!\n            I love you!\n            I love you!\n        \
    \    I love you!\n            I love you!\n            I love you!\n         \
    \   I love you!\n            I love you!\n            I ", "            Input:\n\
    \                    S = \"I\" . \n                    S = \"I\" . \"!\" \n  \
    \                  S = \"I\" . \"!\" . \"I\" . \n                    S = \"I\"\
    \ . \"!\" . \"I\" . \"!\" \n                    S = \"I\" . \"!\" . \"I\" . \"\
    !\" . \"I\" \n                    S = \"I\" . \"!\" . \"I\" . \"!\" . \"I\" .\
    \ \"!\" \n                    S = \"I\" . \"!\" . \"I\" . \"!\" . \"I\" . \"!\"\
    \ . \"I\" \n                    S = \"I\" . \"!\" . \"I\" . \"!\" . \"I\" . \"\
    !\" . \"I\" . \"!\" \n\n            Output:\n                    4\n    \"\"\"\
    \n    count = 0\n    for i in range(len(S)):\n        if S[i] == \"I\":\n    \
    \        count += 1\n        else:\n            break\n    return count\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
