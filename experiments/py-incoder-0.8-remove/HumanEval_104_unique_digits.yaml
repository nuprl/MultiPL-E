name: HumanEval_104_unique_digits
language: py
prompt: "from typing import List\n\ndef unique_digits(x: List[int]) -> List[int]:\n\
  \    \"\"\"Given a list of positive integers x. return a sorted list of all \n \
  \   elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([15, 33, 1422, 1]) == [1, 15,\
  \ 33]\n    assert candidate([152, 323, 1422, 10]) == []\n    assert candidate([12345,\
  \ 2033, 111, 151]) == [111, 151]\n    assert candidate([135, 103, 31]) == [31, 135]\n\
  \ndef test_check():\n    check(unique_digits)\n\ntest_check()\n"
completions: ["    Input: [1, 2, 3, 3, 2, 2]\n    Output: [1, 3, 3]\n\n    \"\"\"\n\
    \    seen = {}\n    return [x for x in x if not seen.get(x, False)]\n", "    >>>\
    \ unique_digits([1,2,4,8,12])\n    >>> [1, 2, 4, 8, 12]\n            \"\"\"\n\
    \    \"\"\"\n    pass\n</cell>\n<text>\nCoding Door Opener\n\n</text>\n<cell>\n\
    \"\"\"\n>>> num_list=[1,2,4,8,12,16,20]\n>>> unique_digits(num_list)\n>>> [1,\
    \ 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>>\
    \ unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n\
    >>> [1, 2, 4, 8, 16, 20]\n>>> unique_digits(num_list)\n>>> [1, 2, 4, 8, 16, 20]\n\
    >>> unique_digits(num_list)\n>>> ", "    >>> unique_digits([-1,6,0,8,0,0])\n \
    \   [-1, 6, 8, 0]\n            \"\"\"\n    \"\"\"\n    # code here\n    pass\n\
    \n", "    >>> unique_digits([9, 3, 10, 0, 8])\n    [9, 10]\n    \"\"\"\n    digits\
    \ = []\n    for number in x:\n        if number % 2 == 0:\n            continue\n\
    \        digits.append(number)\n    return digits\n    \n</cell>\n<cell>\nassert\
    \ unique_digits([9, 3, 10, 0, 8]) == [9, 10]\n</cell>\n<text>\nProblem 6: Sum\
    \ of Digits\n\n</text>\n<cell>", "            # Given Input:\n            x =\
    \ [2, 1, 3, 6, 4, 11, 3, 2, 4, 2]\n\n            # Output: \n            [1, 3]\n\
    \            [6, 4, 2]\n            \"\"\"\n            \n    Args:\n        x\
    \ (List[int]): List of positive integers.\n\n    Returns:\n        List[int]:\
    \ Sorted list of all elements that hasn't any even digit.\n    \"\"\"\n    \n\
    \    # Your code here\n    x = sorted(x)\n    return [x[0] for x in [\n      \
    \  list(filter(lambda x: x % 2 != 0, x))\n    ] if x != []]\n\n", "          \
    \  Example: unique_digits([1, 2, 3, 5]) --> [1, 3, 5]\n\n            Notes:\n\
    \                1. unique_digits can only return sorted list.\n             \
    \   2. unique_digits only accept a list of positive numbers.\n            \"\"\
    \"\n            \n    \"\"\"\n    res = []\n    for i in x:\n        if i not\
    \ in res:\n            res.append(i)\n    return res\n</cell>\n<cell>", "    Output:\
    \ \n            [1, 2, 3, 4]\n    \"\"\"\n    \n    dic = {}\n    for num in x:\n\
    \        if num in dic:\n            dic[num] += 1\n        else:\n          \
    \  dic[num] = 1\n\n    unique = []\n    for num in dic.keys():\n        if dic[num]\
    \ <= 1:\n            unique.append(num)\n    return sorted(unique)\n</cell>\n\
    <cell>\nunique_digits([2, 3, 4, 1, 2])\n</cell>\n<text>\nProblem 3\nGiven a string,\
    \ find the length of the longest substring without repeating characters.\nConstraints\n\
    \nThe length of the string will be in the range [1, 10^4].\nThe string will consist\
    \ of only lowercase letters a-z.\nWe define a substring as consecutive letters,\
    \ where a substring S is a contiguous sequence of letters starting with a and\
    \ ending with b (without repeating letters).\n\nExamples:\n\ns = \"abbcd\" has\
    \ longest substring \"abcd\", which length is 3.\ns = \"bbbbb\" has longest substring\
    \ \"b\", which length is 2.\ns = \"abcabc\" has longest substring \"abc\", which\
    \ length is 3.\ns = \"bbbbbb\" has longest substring \"b\", which length is 2.\n\
    \n</text>\n<cell>", "            [1, 5, 9] -> [1, 5, 9] \n            [1, 4, 3]\
    \ -> [4, 3]\n            [2, 3] -> [3]\n            [4, 3] -> [3]\n          \
    \  [7] -> []\n            [6] -> [6]\n            [1] -> [1]\n            \"\"\
    \"\n\n    Args:\n        x (List[int]): List of positive ints\n\n    Returns:\n\
    \        List[int]: List that hasn't any even digit. \n    \"\"\"\n    for y in\
    \ x:\n        while y % 2 == 0 and y != 0:\n            y = y / 10\n        x.remove(y)\n\
    \    return sorted(x)\n", "            Input:\n            X = [\"123\", \"456\"\
    , \"789\", \"0\"]\n            \"\"\"\n            Output: [\"789\", \"456\",\
    \ \"123\", \"0\"]\n            \"\"\"\n\n            Input:\n            X = [\"\
    123\", \"456\", \"789\", \"0\"]\n            \"\"\"\n            Output: [\"789\"\
    , \"456\", \"0\"]\n            \"\"\"\n    \"\"\"\n    # your code here\n    \n\
    \    return sorted(list(set(list(x))-set(list(filter(lambda x: x%2 ==0,list(x))))))\n\
    </cell>\n<text>\nQuestion 7\nWrite a Python program to find the number of times\
    \ a given input appears in a list.\n\nFor example:\nGiven a list \"abcde\" as\
    \ input\nReturn: 3\n\nGiven a list \"abcd\" as input\nReturn: 4\n\nGiven a list\
    \ \"aaa\" as input\nReturn: 0\n\nGiven a list \"a\" as input\nReturn: 0\n\nNote:\n\
    The size of the list is not known in advance.\nYou have to process every item\
    \ in the list to find its count.\nYou have to return the count of all the given\
    \ inputs.\nYou cannot sort the list.\n\n</text>\n<cell>", "            x = [1,\
    \ 3, 10, 3, 1]\n            unique_digits(x)\n            >>>[1, 3, 10, 3]\n \
    \           \"\"\"\n    Args:\n        x: a list of integer\n\n    Returns:\n\
    \        List\n    \"\"\"\n    if len(x)==1:\n        return x\n    else:\n  \
    \      even = []\n        for i in range(len(x)):\n            if x[i] % 2 ==\
    \ 0:\n                even.append(x[i])\n            else:\n                even.sort()\n\
    \        even = unique_digits(even)\n        return even\n\n", "            #\
    \ x = sorted([10, 9, 8, 7, 6, 5, 4, 3, 2, 1])\n            unique_digits(x)\n\
    \            # Out: [1, 2, 3, 4, 5, 6, 7, 8, 9]\n            \"\"\"\n    \"\"\"\
    \n    res = []\n    for val in x:\n        if not any([val%i for i in range(10)]):\
    \ res.append(val)\n    return sorted(res)\n", "            [1, 2, 3, 4] -> [1,\
    \ 4, 2, 3]\n            [4, 5, 6, 7] -> [4, 6, 7, 5]\n            [8, 10] -> [8,\
    \ 10]\n            \"\"\"\n    \"\"\"\n\n    # your code here\n    \n    digit_list\
    \ = list()\n\n    for x in x:\n        if x % 2 == 0:\n            digit_list.append(x)\n\
    \        else:\n            pass\n    \n    sorted_digit_list = sorted(digit_list)\n\
    \    \n    return sorted_digit_list\n\nprint(unique_digits([1, 2, 3, 4]))\n\n\
    </cell>\n<cell>", "    >>> unique_digits([0, 1, 0, 1, 0])\n    [1, 0, 1, 0, 2]\n\
    \    \n    >>> unique_digits([1, 1, 1, 2, 3])\n    [1, 2, 3, 1]\n    \n    >>>\
    \ unique_digits([1, 2, 3, 1, 3])\n    [1, 2, 3, 1]\n    \"\"\"\n    \n    # Write\
    \ your code here\n    return sorted(x)\n\n", "            [1, 23, 43, 55, 67]\n\
    \            ->\n            [1, 23]\n            \"\"\"\n    \"\"\"\n    # base\
    \ case\n    if len(x) == 0:\n        return []\n    # recursive case\n    x.sort()\n\
    \    ans = []\n    for idx, item in enumerate(x):\n        ans.append(item)\n\
    \        if item % 2 != 0:\n            continue\n        else:\n            ans\
    \ += [item // 2]\n    return ans\n", "    >>> unique_digits([1,4,6,2,7])\n   \
    \ [1, 4, 7, 2]\n    \n    Time complexity: O(n) where n is the length of x\n \
    \   \n    Space complexity: O(n)\n    \"\"\"\n    \n    # check base cases\n \
    \   if not x:\n        return []\n    elif len(x) == 1:\n        return [x]\n\
    \    elif len(x) == 2:\n        x1, x2 = x\n        if x1 % 2 == 0:\n        \
    \    return [x2] \n        else:\n            return [x1, x2]\n    else:\n   \
    \     smaller_digits = unique_digits(x[:len(x)//2])\n        bigger_digits = unique_digits(x[len(x)//2:])\n\
    \        \n        for digit in smaller_digits:\n            if digit.isdigit()\
    \ and digit % 2 == 0:\n                bigger_digits.append(digit)\n         \
    \       break\n    \n    return sorted(bigger_digits)\n            ", "      \
    \      x: [5, 7, 2, 6, 1, 3, 5, 6]\n            unique_digits(x)\n           \
    \ \n            [5, 7, 2, 6]\n            \"\"\"\n\n    \"\"\"\n    \n    count\
    \ = 0\n    digits = []\n    for i in range(len(x)):\n        while count != 0\
    \ and x[count] % i == 0:\n            digits.append(x[count])\n            count\
    \ -= 1\n    \n    digits.sort()\n    return digits\n        \n</cell>\n<cell>\n\
    assert unique_digits([5, 7, 2, 6, 1, 3, 5, 6]) == [5, 7, 2, 6]\nassert unique_digits([4,\
    \ 8, 1, 6, 3]) == [1, 3, 4, 8]\n</cell>\n<text>\nQ11. Given a non-empty list of\
    \ integers, a target value, and an integer k, \nwrite a function to compute the\
    \ number of distinct indices i where list[i] is equal to\ntarget and no other\
    \ elements in the list have distinct digits.\n\nEg:\n            list: [7, 4,\
    \ 6, 11, 9, 13, 15, 10]\n            target: 9\n            k = 2\n          \
    \  \n        Result : 2\n        \n        Explanation: The distinct indices are\
    \ 0, 1 and 3.\n\n    \n    Note:\n        You may assume k is always valid, 1\
    \ \u2264 k \u2264 length of list.\n\n    \n    \"\"\"\n    \n    count = 0\n \
    \   for i in range(len(x)):\n        if x[i] == target:\n            count +=\
    \ x.count(x[i])\n    \n    return count\n</cell>\n<cell>\nassert unique_digits([7,\
    \ 4, 6, 11, 9, 13, 15, 10]) == 4\n</cell>\n<text>\nQ12. Given a string, find the\
    \ length of the longest substring without repeating characters.\nExample: \n \
    \           Input: \"abcabcbb\"\n            Output: 3 \n    \n            Explanation:\
    \ The answer is three (distinct) characters in the string abcbb. \n    \n    \n\
    \    Note:\n        Example string: abcabcbb\n        \n        Length of the\
    \ longest substring without repeating characters is three.\n\n    \n    \"\"\"\
    \n    \n    count = 0\n    for c in s:\n        if s.count(c) > count:\n     \
    \       count = s.count(c)\n    return count\n</cell>\n<cell>\ns = \"abcabcbb\"\
    \nassert unique_digits(s) == 3\n</cell>\n<text>\nQ13. Design a function that takes\
    \ a string, checks if it is a palindrome and returns True or False. \nIf it is\
    \ not a palindrome, print a error message and return False.\n\nNote: \n    Function\
    \ should have one parameter that is a string and another parameter that is an\
    \ integer,\n    which will be returned as the function's result.\n\n    \n   \
    \ Note:\n        You need to use loop for solving this problem.\n\n    \n", " \
    \           x = [1, 1, 3, 4, 7, 9, 12]\n            unique_digits(x)\n       \
    \     >> [7, 9, 12]\n            \n    \"\"\"\n    \n    x = sorted(x)\n    \n\
    \    unique_digits = []\n    \n    even_digit_indexes = []\n\n    for idx, element\
    \ in enumerate(x, start=1):\n        \n        if (idx % 2 == 0) and (element\
    \ % 2 == 0):\n            unique_digits.append(element)\n            even_digit_indexes.append(idx)\n\
    \    \n    even_digit_indexes = sorted(even_digit_indexes)\n\n    return [unique_digits[i]\
    \ for i in even_digit_indexes]\n</cell>\n<cell>", "            x = [121, 789,\
    \ 543, 111, 234, 567, 11]\n            # [1, 3, 4, 5, 6, 7, 8]\n            \"\
    \"\"\n    \"\"\"\n    unique_x = []\n    # Sort the list first\n    x.sort()\n\
    \    # Get the unique list\n    for i in x:\n        if i % 2 == 0:\n        \
    \    unique_x.append(i)\n\n    return unique_x\n", "            x = [1, 3, 4,\
    \ 7, 10, 5, 8, 6, 13]\n            unique_digits(x)\n            >>>> [3, 7, 10,\
    \ 13, 5, 8, 6]\n    \"\"\"\n    if not len(x): return []\n    \n    digit_list\
    \ = []\n    \n    for element in x:\n        digits = []\n        while element\
    \ != 0:\n            digits.append(element % 10)\n            element //= 10\n\
    \        if digits[0] == 0:\n            digits.pop(0)\n        for digit in digits:\n\
    \            if digit != 0:\n                digit_list.append(digit)\n      \
    \          \n    digit_list.sort()\n    \n    return digit_list\n", "    >>> unique_digits([1,\
    \ 2, 3, 2, 5, 1])\n    [1, 2, 3, 5]\n            \n    \"\"\"\n    \n    count\
    \ = 0\n    evens = []\n    for i in x:\n        if i % 2 == 0:\n            count\
    \ += 1\n        else:\n            evens.append(i)\n        if count == 2:\n \
    \           break\n    evens.sort(reverse=True)\n    return evens\n", "      \
    \      Input: [1, 10, 2, 3, 4, 10, 5, 6, 100, 101, 102]\n            Output: [1,\
    \ 2, 4, 6, 100, 101, 102]\n            \"\"\"\n    \n    \"\"\"\n    \n    \"\"\
    \"\n    ", "    x = sorted(unique_digits([1, 3, 6, 9, 12, 15, 18, 21]))\n    \"\
    \"\"\n    \n    if not x:\n        return []\n    \n    s = set()\n    for e in\
    \ x:\n        if e % 2 == 0:\n            continue\n        s.add(e)\n    x =\
    \ sorted(x)\n    return list(x for e in x for _ in range(e) in s)\n", "      \
    \      [3,5,7,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\
    \ -> [3,5,7,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n\
    \            \"\"\"\n    \"\"\"\n    \n    x.sort(reverse=True)\n    odd_indices\
    \ = []\n    for i in range(len(x)):\n        if i % 2 != 0:\n            odd_indices.append(i)\n\
    \            \n    unique_list = []\n    for i in odd_indices:\n        unique_list.append(x[i])\n\
    \    unique_list.sort()\n    return unique_list\n", "            unique_digits([1,\
    \ 9, 3, 8, 5, 7, 4, 6, 2])\n            # output: [0, 3, 6, 9]\n            \"\
    \"\"\n    \"\"\"\n    digits = [0]\n\n    for digit in x:\n        digits.append(digit)\n\
    \n    digits.sort()\n\n    unique_digits = [0]\n\n    for index, digit in enumerate(digits):\n\
    \        if index % 2 != 0:\n            unique_digits.append(digit)\n\n    return\
    \ unique_digits\n\n", "    >>> x = [1, 3, 2, 5, 4, 1]\n    >>> unique_digits(x)\n\
    \    [1, 3, 5]\n    \"\"\"\n    seen = {}\n    for el in x:\n        digits =\
    \ [int(d) for d in str(el)]\n        if not digits:\n            continue\n  \
    \      last_digit = digits[-1]\n        if last_digit in seen:\n            seen[last_digit].append(el)\n\
    \        else:\n            seen[last_digit] = [el]\n    unique_digits = [el for\
    \ _, els in sorted(seen).items() for el in els]\n    return unique_digits\n",
  "        \n            [2,4,5,6,8] -> [2, 4, 6, 8]\n            [4,2,8] -> [4, 2,\
    \ 8]\n            [8,2,4] -> [8]\n\n    \"\"\"\n    \n    def unique_digits_inner(x:\
    \ List[int]) -> List[int]:\n        sorted_list = []\n        for num in x:\n\
    \            while num > 0:\n                digit = num % 10\n              \
    \  if digit == 0:\n                    num = int(num / 10)\n                 \
    \   \n                else:\n                    sorted_list.append(digit)\n \
    \                   break\n        return sorted_list\n    return sorted(unique_digits_inner(x))\n\
    \nassert unique_digits([2, 4, 5, 6, 8]) == [2, 4, 6, 8]\nassert unique_digits([4,\
    \ 2, 8]) == [4, 2, 8]\nassert unique_digits([8, 2, 4]) == [8]\n</cell>\n<cell>",
  "    Input: [12, 34, 56, 78, 89, 100, 120, 130, 140, 150]\n    Output: [100, 120,\
    \ 130, 140, 150]\n\n    Explanation:\n            12 and 130 has even digits,\
    \ so they are also kept.\n            34 and 150 has odd digits, so they are also\
    \ kept.\n            56 and 78 has even digits, they are also kept.\n        \
    \    89 and 100 has even digits, they are also kept.\n            \"\"\"\n   \
    \ \"\"\"\n    Args:\n        x (List[int]): a sorted list of integers\n    Return:\n\
    \        List[int]: a sorted list of unique numbers which not has any even digit\n\
    \    \"\"\"\n    odd_list = []\n    even_list = []\n    odd_num = 0\n    even_num\
    \ = 0\n    for i in x:\n        if i % 2 == 0:\n            even_list.append(i)\n\
    \        else:\n            odd_list.append(i)\n    for i in even_list:\n    \
    \    if i in odd_list:\n            pass\n        else:\n            odd_list.append(i)\n\
    \            odd_num += 1\n    for j in odd_list:\n        if j in even_list:\n\
    \            pass\n        else:\n            even_list.append(j)\n          \
    \  even_num += 1\n    return even_list\n    ", "            # Input:\n       \
    \     x = [3, 1, 2]\n            # Output:\n            y = [1, 3, 2]\n      \
    \      \"\"\"\n    \"\"\"\n    \n    s = set(map(int, x))\n    return list(x for\
    \ x,v in itertools.groupby(s) if v)\n", "            # Input: [3, 5, 4, 3]\n \
    \           # Output: [3, 5]\n            \"\"\"\n\n    Args:\n        x: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    # todo write your code here\n\
    \    \n    \n    \n    return []\n\n", "            x = [1,1,1,5,7,8]\n      \
    \      unique_digits(x)\n            # [1, 5, 7]\n            \n            x\
    \ = [1,1,1,1,1,5]\n            unique_digits(x)\n            # [1, 1]\n      \
    \      \n            x = [1,7,8,9,10,11]\n            unique_digits(x)\n     \
    \       # [7, 8, 9]\n            \n    \"\"\"\n    \n    return sorted(set(i for\
    \ i in x if i % 2 == 0))\n", "            Given [4, 9, 7, 2]\n            Unique\
    \ digits are [4, 7, 2]\n            \"\"\"\n    \"\"\"\n\n    digit_set = set()\n\
    \    for i in x:\n        digit_set.add(i)\n\n    unique_list = list(digit_set)\n\
    \    unique_list.sort()\n    return unique_list\n", "            [6, 3, 7, 4,\
    \ 0] -> [6, 0, 3, 4, 7]\n            \"\"\"\n    \"\"\"\n\n    l = []\n    for\
    \ num in x:\n        if num%2 == 0 and num not in l:\n            l.append(num)\n\
    \    return sorted(l)\n</cell>\n<cell>\nassert unique_digits([6, 3, 7, 4, 0])\
    \ == [6, 0, 3, 4, 7]\nassert unique_digits([5, 3, 7, 3, 0]) == [5, 3, 7, 3, 0]\n\
    assert unique_digits([9, 9, 9, 9, 9]) == [9, 9, 9, 9, 9]\n</cell>\n<text>\nQuestion\
    \ 5\nWrite a Python program to find the total count of different digits in the\
    \ given list\nExample:\nInput: [2, 3, 6, 9, 9, 9, 4]\nOutput: 3\nExplanation:\
    \ There are 3 digits: 0, 2, 3\nThe program should return 3.\n\n</text>\n<cell>",
  "    INPUT:\n    x = []\n    OUTPUT:\n    []\n    \n    INPUT:\n    x = [1]\n  \
    \  OUTPUT:\n    [1]\n    \n    INPUT:\n    x = []\n    OUTPUT:\n    []\n    \n\
    \    INPUT:\n    x = [1]\n    OUTPUT:\n    [1]\n    \n    INPUT:\n    x = [1,3]\n\
    \    OUTPUT:\n    [1]\n    \n    INPUT:\n    x = [1,2]\n    OUTPUT:\n    []\n\
    \    \n    INPUT:\n    x = [1,2,2]\n    OUTPUT:\n    []\n    \n    INPUT:\n  \
    \  x = [1,2,2,2,2]\n    OUTPUT:\n    [2]\n    \n    INPUT:\n    x = [1,2,2,2,2,2]\n\
    \    OUTPUT:\n    [2]\n    \n    INPUT:\n    x = [1,2,3,3,3,2,2,1]\n    OUTPUT:\n\
    \    []\n    \n    INPUT:\n    x = [1,2,3,3,3,3,2,2,1]\n    OUTPUT:\n    []\n\
    \    \n    INPUT:\n    x = [1,2,4,5,5,5,4,3,2,1]\n    OUTPUT:\n    []\n    \n\
    \    INPUT:\n    x = [1,2,4,5,5,5,4,3,2,1]\n    OUTPUT:\n    [1]\n    \"\"\"\n\
    \    \n    # TODO: write a function to find unique digits of the given list.\n\
    \    \n    return []\n</cell>\n<cell>\nunique_digits(x)\n</cell>\n<text>\nProblem\
    \ 3: Finding a Highest and Lowest Number\n\n</text>\n<cell>", "            [1,\
    \ 2, 3, 4, 5, 6, 7, 8, 0]\n            [1, 3, 3, 3, 6, 6, 6, 9, 9]\n         \
    \   [1, 3, 3, 3, 6, 6, 6, 9, 9]\n            [0, 1, 2, 3, 4, 5, 6, 7, 8]\n   \
    \         [0, 1, 3, 3, 3, 6, 6, 6, 9]\n            [0, 1, 2, 3, 4, 6, 6, 7, 8]\n\
    \            [0, 1, 3, 3, 3, 6, 7, 8, 9]\n            [0, 1, 2, 3, 6, 6, 6, 9,\
    \ 9]\n            [0, 1, 2, 3, 6, 6, 6, 9, 9]\n            \"\"\"\n    \"\"\"\n\
    \n    # copy the list\n    copy_x = x[:]\n    copy_x.sort()\n    \n    # traverse\
    \ the list\n    count = 0\n    \n    # traverse each element in the list \n  \
    \  for ele in copy_x:\n        \n        # if the element is even, increment count\
    \ \n        if ele % 2 == 0:\n            count += 1\n        else:\n        \
    \    break\n    \n    # traverse the reversed list \n    for i in reversed(copy_x):\n\
    \        \n        # if the element is not even, decrement count \n        if\
    \ i % 2 != 0:\n            count -= 1\n            break\n    \n    # append all\
    \ the elements that have same digit to the original list\n    if count > 0:\n\
    \        copy_x.insert(0, copy_x[0])\n        copy_x.append(copy_x[-1])\n    elif\
    \ count < 0:\n        copy_x.append(copy_x[-1])\n        copy_x.insert(0, copy_x[0])\n\
    \    \n    return copy_x\n</cell>\n<cell>", "            x = [10, 2, 9, 7, 3,\
    \ 8, 4]\n            unique_digits(x)\n            \"\"\"\n            Output:\
    \ [8, 7]\n            \"\"\"\n            Input: x = [10, 2, 9, 7, 3, 8, 4, 100,\
    \ 10]\n            Output: [4, 3]\n            \"\"\"\n            Input: x =\
    \ [1, 124, 1, 4, 23, 2]\n            Output: [1, 2]\n            \"\"\"\n    \
    \        Input: x = [124]\n            Output: []\n            \"\"\"\n    \"\"\
    \"\n    \n    \n    x = [i for i in x if i%2==0]\n    x.sort()\n    return [i\
    \ for i,j in enumerate(x) if j%2!=0]\n\n", "            x = [4, 5, 1, 7, 3, 2]\n\
    \            # => [4, 7]\n            unique_digits(x)\n            # => [1, 2,\
    \ 3, 4]\n            \"\"\"\n    \"\"\"\n    # implement here\n    \n    pass\n",
  "            Input: [3,2,1,6,7,1,4,3]\n            Output: [4,3,6,7]\n         \
    \   \"\"\"\n    \n    \"\"\"\n    \n    sorted_x = sorted(x)\n    unique_digits_lst\
    \ = [i for i in sorted_x if int(str(i)[0]) % 2 == 0]\n    return unique_digits_lst\n\
    \n\"\"\"\nDO NOT MODIFY main() function below. Write your own main() function\
    \ in a new .py file that you will call with the command below:\n    $ python main.py\n\
    \"\"\"\n", "    >>> unique_digits([-100, 1, 12, 9, 99, 99, 100, 1000, 1, -200])\n\
    \    [100, 100, 1, -1, -200]\n    \"\"\"\n    \n    \n    return [x for x in x\
    \ if x % 2 == 0]\n", "            >>> unique_digits([1, 2, 3])\n            [1]\n\
    \            >>> unique_digits([1, 3, 2])\n            [1, 2]\n            >>>\
    \ unique_digits([3, 2, 1])\n            [1, 2]\n            >>> unique_digits([1,\
    \ 2, 3, 4])\n            [1, 2, 3]\n            >>> unique_digits([1, 2, 2, 3,\
    \ 4])\n            [1, 2, 3, 4]\n            \"\"\"\n    \"\"\"\n    \n    res\
    \ = []\n    for n in x:\n        if n % 2 == 0:\n            res.append(n)\n \
    \   return sorted(res)\n", "            Input: [1, 6, 2, 7, 8, 3, 9]\n       \
    \     Return: [1, 6, 3, 8, 9]\n            \"\"\"\n\n    Example 2:\n        \
    \    Input: [1, 6, 2, 7, 8, 3, 10, 4]\n            Return: [1, 6, 3, 8, 10, 4]\n\
    \    \"\"\"\n\n    res=[]\n    \n    # find even digit of each number in list\n\
    \    for x in x:\n        for n in x:\n            if n%2==0:\n              \
    \  res.insert(0,n)\n                break\n    return res\n    \n", "    [1, 11,\
    \ 13, 16, 17, 18, 19, 20, 21, 22]\n            unique_digits([1, 13, 16, 17, 19,\
    \ 22, 23, 24])\n            [1, 19, 20, 21]\n    \n    Credit: https://stackoverflow.com/questions/34842923/how-to-return-unique-elements-from-list-of-integers/34843026\n\
    \    \n    \"\"\"\n    \n    numbers = set(map(int, x))\n    return sorted(numbers)\n\
    </cell>\n<cell>\nunique_digits([1, 11, 13, 16, 17, 18, 19, 20, 21, 22])\n</cell>\n\
    <cell>\nunique_digits([1, 13, 16, 17, 19, 22, 23, 24])\n</cell>\n<text>\nProblem\
    \ 8 (Optional)\nA function called remove_duplicates should remove duplicate items\
    \ from a list. For example, if the given list is [1, 1, 2, 3] the function should\
    \ return [1, 2].\n\nIt should run in linear time O(n). Assume that the list is\
    \ sorted.\n\n\n</text>\n<cell>", "            Input:\n                [2, 8, 2,\
    \ 4, 5, 8, 7, 5, 2]\n            Output:\n                [4, 8, 5, 7, 2]\n  \
    \          \"\"\"\n            \n    Args:\n        x: A list of integer\n   \
    \ \n    Returns:\n        A sorted list of elements that hasn't any even digit\n\
    \    \"\"\"\n    \n    if len(x) == 0:\n        return []\n\n    temp = []\n \
    \   for num in x:\n        if not is_even(x):\n            temp.append(num)\n\
    \    return temp\n\n", "    Input : [2, 1, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14,\
    \ 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n    Output: [1,\
    \ 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]\n            \"\"\"\n\
    \    \"\"\"\n    \n    x: List[int]\n    Return a sorted list of all elements\
    \ that hasn't any even digit.\n    \"\"\"\n    digits = [0]*len(x)\n    \n   \
    \ for i in x:\n        digits[i//10] += 1\n        \n    evens = []\n    for digit\
    \ in digits:\n        if digit % 2 == 0:\n            evens.append(digit)\n  \
    \  return sorted(set(evens))\n", "    >>> unique_digits([2, 6, 3, 9, 8, 7, 1,\
    \ 5])\n    [1, 3, 5, 6, 8, 9]\n            \n    \"\"\"\n    \n    digits: List[int]\
    \ = []\n    \n    for num in x:\n        if num % 2 == 0:\n            digits.append(num)\n\
    \            \n    return sorted(digits)\n</cell>\n<cell>\nunique_digits([2, 6,\
    \ 3, 9, 8, 7, 1, 5])\n</cell>\n<text>\nProblem 7\nWrite a function that return\
    \ the product of a list of integers.\n\nFor example:\ninput: [2,4,6,8,10]\noutput:\
    \ 24\nExplanation: The product of 2, 4, 6, 8, and 10 is 24.\n\n</text>\n<cell>",
  "            Input: [3, 1, 1, 2]\n            Output: [1, 2]\n            \"\"\"\
    \n    \"\"\"\n    count=0\n    ans=[]\n    for a in x:\n        if a%2!=0:\n \
    \           ans.append(a)\n        else:\n            count+=1\n    \n    return\
    \ ans\n", "            [1,4,3,2,5,7,3,8,0] -> [4,5,7,8]\n            \"\"\"\n\
    \            \n    Args:\n        x (list): A list of integers.\n\n    Returns:\n\
    \        list: All elements that hasn't any even digit.\n    \"\"\"\n    if not\
    \ x:\n        return []\n    \n    even_idx = []\n    for idx, digit in enumerate(x):\n\
    \        if idx % 2 == 0:\n            continue\n        if digit % 2 == 0:\n\
    \            even_idx.append(idx)\n    \n    return [x[i] for i in sorted(even_idx)]\n\
    </cell>\n<cell>\nassert unique_digits([1,4,3,2,5,7,3,8,0]) == [4,5,7,8]\n</cell>\n\
    <text>\nNo. 4\nGiven a list of positive integers, find the first missing positive\
    \ integer.\n\nNote: Return None if there are no missing numbers.\n\nExample:\n\
    Input: [1,2,3,4,5,6]\nOutput: 4\n\n</text>\n<cell>", "    >>> unique_digits([1,\
    \ 3, 2])\n    [1, 3]\n    \"\"\"\n    unique_digits = []\n    for i in x:\n  \
    \      unique_digits.append(i)\n    unique_digits.sort()\n    unique_digits_set\
    \ = set()\n    unique_digits_set = {i for index, i in enumerate(unique_digits)\
    \ if i % 2 == 0}\n    unique_digits_set = unique_digits_set.union(unique_digits_set)\n\
    \    return list(unique_digits_set)\n\n", "    >>> unique_digits([1,2,3,4,5,6,7,8])\n\
    \    [1, 2, 4, 6, 7, 8]\n\n            \"\"\"\n    >>> unique_digits([2,3,5,7,8,11])\n\
    \    [2, 5, 8, 11]\n\n    \"\"\"\n    \n    \n    \n    \n\n    unique_digits\
    \ = []\n    for n in x:\n        unique_digits.append(n)\n    unique_digits_copy\
    \ = list(unique_digits)\n    unique_digits_copy.sort()\n    unique_digits_copy.remove(6)\n\
    \    unique_digits_copy.remove(4)\n    unique_digits_copy.remove(6)\n    unique_digits_copy.remove(1)\n\
    \    unique_digits_copy.remove(8)\n    unique_digits_copy.remove(7)\n    return\
    \ unique_digits_copy\n</cell>\n<cell>", "        Input: [2,1,2,1,3,5,4,7]\n  \
    \      Output: [1,2,3,4,5,7]\n        \"\"\"\n    from collections import Counter\n\
    \    \n    num = sorted(x)\n    \n    if num[0] % 2 != 0:\n        return num\n\
    \    \n    counts = Counter(num)\n    \n    return [x for x in num if counts[x]%2\
    \ == 0]\n</cell>\n<cell>\nunique_digits([2,1,2,1,3,5,4,7])\n</cell>\n<text>\n\
    Sort and Reverse\n\n</text>\n<cell>", "            # Input: digits = [2,6,9,2,4,3,5,3,7,2,0,2]\n\
    \            # Output: [2,6,9,3,4,7,0]\n            # Explanation: Because 2 has\
    \ even digit, \n            # [6,9,2] has even digit. [6,9,2] should be removed\
    \ \n            # because there is an odd digit. so [6,9,2,4,3,5,3,7,2,0,2]\n\
    \            # should be returned.\n            \"\"\"\n    \n    Note: All input\
    \ list should be sorted in increasing order.\n\n    Args:\n        x (List[int]):\
    \ List of ints.\n\n    Returns:\n        List[int]: Sorted list of ints doesn't\
    \ have any even digit.\n\n    Examples:\n        >>> unique_digits(digits = [2,6,9,2,4,3,5,3,7,2,0,2])\n\
    \        [2, 6, 9, 3, 4, 7, 0]\n    \"\"\"\n    \n    # TODO: Write your code\
    \ here\n    \n    \n    return sorted((list(filter(lambda x:x%2==0, x)))) \n\n\
    \"\"\"\nM2. Unique Digits\n\nWrite a function that takes another list of integers,\
    \ and returns a list \nof all the elements that hasn't any even digit. \n\nExample:\n\
    \nInput: digits = [2,6,9,2,4,3,5,3,7,2,0,2]\nOutput: [2,6,9,3,4,7,0]\n\nNote:\n\
    \    All input list should be sorted in increasing order.\n    The length of returned\
    \ list should be the same with that of input list. \n\n\"\"\"\n\n", "        \
    \    [3, 1, 4, 1, 6, 4, 2] -> [1, 4, 2, 6, 4]\n            \"\"\"\n    Args:\n\
    \        x (List[int]): A list of positive integers\n\n    Returns:\n        List[int]:\
    \ Sorted list of unique digits\n    \"\"\"\n    from collections import defaultdict\n\
    \    seen = defaultdict(int)\n    return [i for i in x if not seen[i // 10] and\
    \ not seen[i // 100] and not seen[i // 1000]]\n</cell>\n<cell>\nunique_digits(list(set(range(1,2000000))))\
    \ # return sorted list\n</cell>\n<cell>\n\"\"\"\nYour solution should not contain\
    \ any helper function.\n\nYour solution should use standard python library.\n\n\
    Your code will be run on PC, Mac and Linux. It is not accepted on Udacity.\n\n\
    Please do not use any library, any in-built function etc.\n\"\"\"\n</cell>\n<cell>",
  "        Input: [1, 20, 3, 22, 45, 56, 6, 7, 8, 9, 90]\n        Output: [3, 6, 8,\
    \ 10]\n            \"\"\"\n\n    Args:\n        x (List[int]): List of positive\
    \ integer.\n\n    Returns:\n        List[int]: Sorted list of all elements that\
    \ hasn't any even digit.\n    \"\"\"\n    \n    return sorted(list(set(filter(lambda\
    \ y: not (y % 2), x))))\n\n", "    x = [1, 2, 3, 4]\n    unique_digits(x)\n  \
    \  [1, 4]\n    \"\"\"\n\n    unique_digits_set = set()\n\n    for num in x:\n\
    \        if num % 2 == 0:\n            unique_digits_set.add(num)\n\n    unique_digits_list\
    \ = list(unique_digits_set)\n    unique_digits_list.sort()\n    return unique_digits_list\n",
  "    Input : x = [1, 8, 4, 11, 12]\n    Output: [4, 8, 11, 12]\n    Explanation:\n\
    \    4, 8, 11, 12 => [4, 8, 11, 12] => [1, 4, 8, 11, 12] => [1, 4, 8, 11, 12]\
    \ => [1, 8, 4, 11, 12]\n            \"\"\"\n    \"\"\"\n    Time complexity: O(n)\
    \ where n is the length of x\n    Space complexity: O(1), x is sorted in ascending\
    \ order.\n    \"\"\"\n    \n    digits = [0]*(len(x)+1)\n    \n    for i in x:\n\
    \        digits[i] += 1\n    \n    even_digit = [i for i in range(1, len(x)) if\
    \ digits[i]%2 == 0]\n    \n    return sorted(set(x)-set(even_digit))\n", "   \
    \ Input: [5, 2, 3, 1, 7] \n    Output: [2, 3]\n    \"\"\"\n    # todo your code\n\
    \    \n    x.sort()\n    ans = []\n    for i in x:\n        if i%2 == 1:\n   \
    \         ans.append(i)\n    return ans\n            ", "            input : [5,3,6,4]\
    \ -> [3,4,5]\n            \"\"\"\n    \"\"\"\n    \n    def unique_digits(x: List[int])\
    \ -> List[int]:\n        \"\"\"Given a list of positive integers x. return a sorted\
    \ list of all \n        elements that hasn't any even digit.\n\n        Note:\
    \ Returned list should be sorted in increasing order.\n        \n        For example:\n\
    \                input : [5,3,6,4] -> [3,4,5]\n        \"\"\"\n        \n    \
    \    def unique_digits(x: List[int]) -> List[int]:\n            \"\"\"Given a\
    \ list of positive integers x. return a sorted list of all \n            elements\
    \ that hasn't any even digit.\n\n            Note: Returned list should be sorted\
    \ in increasing order.\n            \n            For example:\n             \
    \   input : [5,3,6,4] -> [3,4,5]\n            \"\"\"\n        \n            a\
    \ = []\n            \n            for i in x:\n                a.append(i)\n\n\
    \            unique_digits = []\n            \n            for i in a:\n     \
    \           b = a.copy()\n                \n                for j in b:\n    \
    \                if j % i == 0:\n                        b.remove(j)\n       \
    \         unique_digits.append(b)\n                \n            return sorted(unique_digits,\
    \ key=lambda x: sorted(x))\n        \n        return sorted(unique_digits(x),\
    \ key=lambda x: sorted(x))\n    \n    return sorted(unique_digits(x), key=lambda\
    \ x: sorted(x))\n</cell>\n<cell>\nunique_digits([5, 3, 6, 4])\n</cell>\n<cell>\n\
    unique_digits([5, 6, 4, 3, 2])\n</cell>\n<text>\nProblem 2b\nCreate a function\
    \ that returns a list with all the unique elements in the list x sorted in increasing\
    \ order.\n\nFor example, if the list x is:\n[5, 6, 4, 3, 2]\nthe returned list\
    \ should be\n[2, 1, 3, 4, 5]\nHint: You can sort the list x using the sorted function.\n\
    \nThis function should return a new list and not change the list itself.\n\nThis\
    \ function should work for any list, including empty lists.\n\nIn case of multiple\
    \ occurences of an element in a list, all occurrences should be removed and the\
    \ duplicates should remain in the returned list.\n\nExamples:\n    unique_elements([5,\
    \ 6, 4, 3, 2]) -> [2, 1, 3, 4, 5]\n    unique_elements([6, 5, 6, 4, 3, 2]) ->\
    \ [4, 2, 5]\n    unique_elements([5, 6, 4, 3, 2]) -> [2, 1, 3, 4, 5]\n    unique_elements([])\
    \ -> []\n    unique_elements([1, 5, 6, 4, 3, 2]) -> [1, 6, 4, 3]\n    unique_elements([1,\
    \ 2, 1, 3, 1, 1]) -> [1, 2, 3, 1]\n    unique_elements([1, 1, 1, 2, 2, 3]) ->\
    \ [1, 2, 3]\n    unique_elements([1, 2, 2, 1, 2, 1]) -> [1, 3]\n    unique_elements([6,\
    \ 5, 6, 4, 3, 2]) -> [4, 2, 5]\n    unique_elements([5]) -> [5]\n    unique_elements(",
  "            Input: [1,2,3,4,5,6,7,8,9]\n            Output: [3,4,5,6,7,8,9,1,2]\n\
    \            \"\"\"\n            \n    \n    Args:\n        x (List[int]): List\
    \ of positive integers\n    \n    Returns:\n        List[int]: List of positive\
    \ integers without odd digits\n    \"\"\"\n    digits: List[int] = []\n    for\
    \ num in x:\n        digits.append(num % 10)\n        \n    for num in digits:\n\
    \        if not num % 2:\n            digits.remove(num)\n    \n    sorted_x =\
    \ sorted(digits, reverse=True)\n    \n    return sorted_x\n", "            example\n\
    \            Input:\n            [1, 4, 9, 4, 9, 9, 19, 4, 19, 4, 9, 5, 5]\n \
    \           Output:\n            [9, 19, 4, 9, 19, 4, 9, 5, 5]\n            \"\
    \"\"\n            \n    Time complexity: O(n logn)\n    Space complexity: O(n)\n\
    \    \"\"\"\n    \n    x_map = dict()\n    for x in x:\n        x_map[x] = x_map.get(x,\
    \ 0) + 1\n    \n    sorted_x_map = sorted(x_map.items(), key=lambda item: item[1])\n\
    \    sorted_list = []\n    for x in sorted_x_map:\n        if x[1] % 2 == 0:\n\
    \            continue\n        sorted_list.append(x[0])\n    \n    return sorted_list\n",
  "            x = [5, 1, 2, 4, 1, 9, 3]\n            unique_digits(x)\n         \
    \   > [5, 1, 2, 4, 9, 3]\n            \"\"\"\n    \"\"\"\n    seen = set()\n \
    \   seen_add = seen.add\n    return [x for x in x if not (x in seen or seen_add(x))]\n\
    </cell>\n<cell>\nunique_digits([1, 3, 9, 5, 6])\n</cell>\n<cell>", "    >>> unique_digits([2,\
    \ 4, 5, 3, 6, 8])\n    [2, 3, 5, 6]\n    >>> unique_digits([1, 2, 3, 1, 2, 3,\
    \ 4, 3, 4, 5])\n    [1, 2, 3, 4]\n    >>> unique_digits([1, 1, 2, 3])\n    [1,\
    \ 2, 3]\n    \"\"\"\n    \n    digits = [0 for i in range(len(x)) ]\n    \n  \
    \  for i in range(len(x)):\n        digits[i] = int(x[i])\n    \n    for i in\
    \ range(len(digits) - 1, -1, -1):\n        if (digits[i] % 2 != 0):\n        \
    \    for j in range(i, len(digits)):\n                digits[j] = digits[j] //\
    \ 2\n        \n            digits[i] = digits[i] // 2\n            \n    return\
    \ digits[::-1]\n\nprint(unique_digits([2, 4, 5, 3, 6, 8]))\nprint(unique_digits([1,\
    \ 2, 3, 1, 2, 3, 4, 3, 4, 5]))\nprint(unique_digits([1, 1, 2, 3]))\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns True if two integers x and y\
    \ have the same sign and\nsame digits. Otherwise, return False. Assume x is smaller\
    \ than y.\n\n\n</text>\n<cell>", "            Input: x = [1, 5, 4, 6, 9, 10, 1]\n\
    \            Output: [1, 5]\n            Explanation: All numbers have even digits,\
    \ [1, 5, 4, 6] have\n            the same even digits which means they should\
    \ be uniquely \n            sorted.\n            \"\"\"\n    \"\"\"\n    n = len(x)\n\
    \    if n == 0:\n        return [x]\n\n    digit = defaultdict(int)\n\n    for\
    \ i in range(n):\n        digit[x[i]] += i\n\n    digit_list = []\n    digit_count\
    \ = []\n\n    even = 0\n    for key, val in digit.items():\n        if val % 2\
    \ == 0:\n            even += key\n        else:\n            digit_list.append(key)\n\
    \            digit_count.append(val)\n\n    digit_list.sort(key=lambda x:x)\n\n\
    \    unique_digit_list = digit_list[0:even]\n    unique_digit_count.sort(key=lambda\
    \ x:x)\n    unique_digit_count.extend(digit_count[even:])\n\n    return unique_digit_list\n\
    </cell>\n<cell>", "            \n            unique_digits([3, 9, 2, 5, 7, 0,\
    \ 8, 4, 6, 1, 10])\n            \"\"\"\n            > [0, 1, 2, 3, 5, 6, 7, 8,\
    \ 9]\n    \"\"\"\n    \n    # your code here\n    \n    return sorted([x for x\
    \ in x if x % 2 == 0])\n</cell>\n<text>\nQ2. Write a function that remove duplicates\
    \ from a given list and return a new list. \nFor example, given the list [1,2,2,3],\
    \ the function should return [1,2,3]. \nOnly unique elements should be retained.\n\
    \nNote: The returned list should be sorted in increasing order.\n\nHint: Use a\
    \ set to do it. This is the easiest way, but set is not the most efficient way.\n\
    \nHint: You can refer to a previous example to solve this problem if you need\
    \ it.\n\n\n</text>\n<cell>", "            Input: x = [1, 2, 3, 10, 6, 2, 5, 1,\
    \ 8, 0, 12]\n            Output: sorted_x = [1, 2, 3, 5, 6, 8, 10, 12]\n     \
    \       \"\"\"\n\n            \n    :param x: a list of integers\n    :return:\
    \ the sorted unique integers in x.\n    \"\"\"\n    \n    sorted_x = sorted(set(sorted(x)))\n\
    \    \n    unique_digits = [0]\n    \n    for d in sorted_x:\n        unique_digits.append(unique_digits[-1]\
    \ + 1 if d not in unique_digits else d)\n        \n    return unique_digits\n\
    </cell>\n<cell>\nunique_digits([23, 14, 12])\n</cell>\n<cell>\nunique_digits([5,\
    \ 3, 2, 4, 1])\n</cell>\n<text>\n4.2 Unique Letters\nGiven a string, return a\
    \ list of all the unique letters in the string. \nIf the string contains duplicates,\
    \ only the first of each is kept.\n\nNote: You can assume the string contains\
    \ only lowercase letters.\n\nExample\n\nGiven s = \"bcabc\"\nReturned: ['b', 'c',\
    \ 'a']\nNote: \"abc\" does not contain duplicate letters\nNote: \"a\" is not considered\
    \ as a letter\n\n</text>\n<cell>", "            [4, 6, 9, 11, 14]\n          \
    \  \n            Output: [4, 6, 9, 11]\n            \n            \"\"\"\n   \
    \ \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    ", "    unique_digits([1, 2, 3, 9])\n\
    \    >>> [1, 2, 3]\n    \n    unique_digits([2, 9, 8, 1])\n    >>> [9, 8]\n  \
    \  \n    unique_digits([6, 5, 4, 3])\n    >>> [5]\n    \"\"\"\n    \n    return\
    \ sorted(list(set([i for e in x if e%2 == 0])))\n", "    Input:  [7,2,5,2,3]\n\
    \    Output: [7,2,5,3]\n    \n    Notice that: 7 and 3 are all even digits but\
    \ 2 is not.\n    7 and 3 are all even digits but 2 is not.\n    \n    7 and 3\
    \ are all even digits but 2 is not.\n    \n    7 and 3 are all even digits but\
    \ 2 is not.\n    \n    Notice that: 7 and 3 are all even digits but 2 is not.\n\
    \    7 and 3 are all even digits but 2 is not.\n    \n    7 and 3 are all even\
    \ digits but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n    \n\
    \    Notice that: 7 and 3 are all even digits but 2 is not.\n    7 and 3 are all\
    \ even digits but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n \
    \   \n    Notice that: 7 and 3 are all even digits but 2 is not.\n    7 and 3\
    \ are all even digits but 2 is not.\n    7 and 3 are all even digits but 2 is\
    \ not.\n    7 and 3 are all even digits but 2 is not.\n    7 and 3 are all even\
    \ digits but 2 is not.\n    \n    Notice that: 7 and 3 are all even digits but\
    \ 2 is not.\n    7 and 3 are all even digits but 2 is not.\n    7 and 3 are all\
    \ even digits but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n \
    \   7 and 3 are all even digits but 2 is not.\n    7 and 3 are all even digits\
    \ but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n    7 and 3 are\
    \ all even digits but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n\
    \    7 and 3 are all even digits but 2 is not.\n    7 and 3 are all even digits\
    \ but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n    7 and 3 are\
    \ all even digits but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n\
    \    7 and 3 are all even digits but 2 is not.\n    7 and 3 are all even digits\
    \ but 2 is not.\n    7 and 3 are all even digits but 2 is not.\n    7 and 3 are\
    \ all even digits but 2 is not.\n    7 and 3 are all even digits but 2 is not.",
  "    Input:  [10, 15, 3, 7, 9]\n    Output: [3, 7, 9, 10, 15]\n    \n    Explanation:\
    \ unique_digits([10, 15, 3, 7, 9]) will return [3, 7, 9, 10, 15]. \n    All numbers\
    \ with even digits will be sorted in increasing order.\n    \"\"\"\n    # Your\
    \ code here\n    odd_list = []\n    even_list = []\n    for i in x:\n        if\
    \ i%2 == 0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n\
    \    return sorted(even_list)+sorted(odd_list)\n", "            Input: [3, 2,\
    \ 1, 1, 2]\n            Output: [1, 2]\n            \n            Explanation:\
    \ The function should return [1, 2] because both\n            elements have even\
    \ digits.\n            \"\"\"\n\n    s = set(map(int, x))\n    return [x for x\
    \ in x if x % 2 == 0] + sorted(s - {x % 2 for x in range(len(x))})\n</cell>\n\
    <cell>\nprint(unique_digits([3, 2, 1, 1, 2]))\nprint(unique_digits([10, 9, 20,\
    \ 12, 15]))\n</cell>\n<text>\nPart II\nNow we can start to solve the problem of\
    \ detecting whether a number is a palindrome. If we have this problem,\nwe can\
    \ use the same unique_digits function that you made for detecting odd numbers.\
    \ Now to finish the function, we\nneed to return a list of palindromes for different\
    \ test cases. This is more challenging so I won't do it for you. We'll just give\
    \ you an idea of how this problem is solvable and how you can start to build on\
    \ your code.\n\nFor each test case, you can just put in the number you want to\
    \ test, e.g. [3,2,1,1,2] to test whether the function works for palindromes for\
    \ different test cases.\n\n\n</text>\n<text>\nProblem III\nCreate a function that\
    \ returns True if a number is a palindrome, and False if it is not.\n\n\n</text>\n\
    <cell>", "            Example 1:\n\n            Input: [1,2,3,4,5]\n         \
    \   Output: [1,3,5]\n            \"\"\"\n\n            Example 2:\n\n        \
    \    Input: [2,2,2,4,5]\n            Output: [4,5]\n            \"\"\"\n\n   \
    \         Example 3:\n\n            Input: [10,10,10,10,10]\n            Output:\
    \ [10]\n            \"\"\"\n            # Hint: Use `itertools` module \n    \
    \        # and `itertool.filter()` function.\n    \"\"\"\n    \n    \"\"\"\n \
    \   # Write your code here\n    res = []\n    for i in x:\n        if i // len(str(i))\
    \ % 2 == 0:\n            res.append(i)\n    res.sort()\n    return res\n", " \
    \   \n    >>> unique_digits([-3, -2, -1, 1, 2])\n    [-1, 2]\n\n    \"\"\"\n \
    \   \n    #using set remove duplicate numbers\n    \n    unique=set(list(map(int,\
    \ filter(lambda i: not i%2,x))))\n    #using sorted\n    unique=sorted(unique)\n\
    \    return unique\n\n", "            >>> unique_digits([1, 2, 3, 4, 7, 8, 11,\
    \ 12, 13, 14])\n            [0, 2, 4, 6, 8, 10]\n            \"\"\"\n    Credit:\n\
    \    https://leetcode.com/discuss/problems/unique-digits/32996/top-answer-by-leet\n\
    \    \"\"\"\n    numbers = [num for num in x]\n    unique_numbers = sorted(set(numbers))\n\
    \    unique_numbers.reverse()\n    return unique_numbers\n    ", "           \
    \ Input: [1, 1, 9, 11, 13, 14]\n            Output: [1, 11, 13]\n            \"\
    \"\"\n    \"\"\"\n\n    unique = []\n    for i, v in enumerate(x):\n        if\
    \ sum(v) % 2 == 0:\n            unique.append(v)\n\n    return unique\n", "  \
    \          # Example\n            x = [1,2,3]\n            unique_digits(x)\n\
    \            # Output\n            [1, 3]\n            \"\"\"\n\n    Args:\n \
    \       x: List of positive integers.\n\n    Returns:\n        List of unique\
    \ positive integers that haven't any even digit in the\n            given list.\n\
    \    \"\"\"\n    \n    # your code here\n    digit_list = []\n    \n    for i\
    \ in x:\n        if int(i) % 2 != 0:\n            digit_list.append(i)\n    \n\
    \    digit_list.sort()\n    \n    return digit_list\n</cell>\n<text>\nTest Cases\n\
    \n</text>\n<cell>", '            unique_digits([2, 9, 9, 9, 6, 10, 14, 10, 15,
    9, 12, 16, 14, 11, 15, 2, 6, 6, 2, 6, 6, 8, 2, 8, 2, 4, 6, 2, 7, 2, 6, 10, 11,
    7, 8, 11, 6, 2, 9, 9, 9, 10, 12, 8, 15, 2, 8, 15, 6, 11, 6, 11, 14, 8, 9, 10,
    2, 6, 6, 6, 6, 10, 10, 13, 9, 9, 10, 13, 8, 10, 13, 6, 11, 13, 8, 10, 10, 13,
    13, 10, 10, 12, 10, 15, 12, 9, 9, 10, 14, 11, 12, 10, 14, 12, 13, 9, 10, 10, 10,
    9, 10, 13, 10, 10, 12, 11, 10, 10, 10, 8, 10, 10, 10, 10, 10, 8, 10, 10, 10, 8,
    11, 10, 11, 12, 12, 9, 12, 10, 10, 12, 9, 9, 12, 8, 8, 10, 10, 14, 12, 10, 8,
    13, 6, 9, 12, 12, 10, 12, 9, 12, 10, 8, 10, 11, 12, 10, 12, 12, 10, 11, 10, 9,
    12, 10, 12, 12, 12, 10, 10, 10, 12, 12, 12, 10, 10, 11, 12, 12, 12, 9, 9, 12,
    11, 10, 10, 10, 10, 10, 10, 11, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10,
    10, 10, 10, 10, 10, 10, 10, ', "            [4, 3, 2, 3, 3, 9, 2, 1]\n       \
    \     Output: [2, 3, 4, 9]\n            \"\"\"\n    \"\"\"\n    \n    if not x:\n\
    \        return []\n\n    digits = set()\n\n    for n in x:\n        digits.add(int(str(n)[0]))\n\
    \n    return list(digits)\n", "            x = [1, 2, 4, 3]\n            print(unique_digits(x))\n\
    \            \"\"\"\n            Output should be:\n            \"\"\"\n     \
    \       [1, 3]\n            \"\"\"\n    \"\"\"\n    \n    digits = []\n    \n\
    \    for i in x:\n        if i%2 == 0:\n            digits.append(i)\n    \n \
    \   return sorted(list(set(digits)))\n", "            [10, 6, 12, 20]\n      \
    \      \n            unique_digits([10, 6, 12, 20])\n            # return\n  \
    \          [10, 6, 20]\n    \"\"\"\n    \n    pass\n    \n    \n", "         \
    \   Input:\n            [8, 1, 2, 3, 4, 5, 7, 6, 9, 10, 10, 7, 8, 8, 6, 4]\n \
    \           Output:\n            [8, 1, 2, 3, 4, 5, 7, 6, 9, 10]\n           \
    \ \"\"\"\n    \"\"\"\n    unique_x_list = []\n    for num in x:\n        if num\
    \ % 2 == 0:\n            unique_x_list.append(num)\n    unique_x_list.sort()\n\
    \    return unique_x_list", "    >>>unique_digits([1, 2, 3])\n    [1]\n    \n\
    \    >>>unique_digits([1, 3, 2])\n    [3]\n    \n    >>>unique_digits([1, 2, 10,\
    \ 20, 30, 40, 50, 60, 70, 80])\n    [1, 2]\n    \n    >>>unique_digits([1, 3,\
    \ 2])\n    [1, 2, 3]\n    \n    \"\"\"\n    \n    count = 1\n    ans = []\n  \
    \  for i in x:\n        while count <= i and count % 2 == 0:\n            ans.append(i)\n\
    \            count += 1\n    return ans\n    \n", "            Input: x = [8,\
    \ 2, 6, 1, 6, 3, 5, 4, 4, 7, 3, 1]\n            Output: [8, 2, 6, 3, 1]\n    \
    \        \"\"\"\n    \"\"\"\n\n    odd = False\n    count = 1\n    \n    for e\
    \ in x:\n        if e%2 == 0:\n            odd = True\n        if odd:\n     \
    \       count += 1\n            if count%2 == 0:\n                odd = False\n\
    \            else:\n                x.remove(e)\n    \n    return sorted(x)\n\
    \    ", "    Input: [1, 5, 6, 10, 15, 16, 17, 18, 19, 25, 26]\n    Output: [1,\
    \ 6, 10, 15, 17, 19, 25, 26]\n    \n    \"\"\"\n    digits = {}\n    ans = []\n\
    \    for num in x:\n        digits[num % 10] += 1\n        if digits[num % 10]\
    \ % 2 == 0:\n            ans.append(num)\n    ans.sort()\n    return ans\n</cell>\n\
    <cell>", "    >>> unique_digits([1,2,3,4,5,6])\n    6\n    \"\"\"\n    ans = []\n\
    \    seen = set()\n    for num in x:\n        if num in seen:\n            continue\n\
    \        seen.add(num)\n        ans.append(num)\n    return ans\n", "        \
    \    Input: \n            x = [4, 1, 3]\n            Output: [1, 3]\n        \
    \    Explanation: \n            Elements with even number have odd number as a\
    \ first digit.\n            So only [1, 3] returned as output for the example.\n\
    \            \"\"\"\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    >>> unique_digits([1, 2, 4, 6, 4])\n    [1, 2,\
    \ 4, 6]\n\n    ```\n    \n\n    \"\"\"\n    \n    return sorted(list(set(x)))\n",
  "    >>> unique_digits([])\n    []\n    >>> unique_digits([1])\n    [1]\n    >>>\
    \ unique_digits([1, 2, 1])\n    [1, 2]\n    >>> unique_digits([1, 2, 3, 1])\n\
    \    [1, 3]\n    \"\"\"\n    sorted_x = sorted(set(x))\n    return [xi for xi\
    \ in sorted_x if not any(xi%2 == 0 for xi in x)]\n", "            input: x = [5,\
    \ 4, 3, 7, 4, 9, 3, 5]\n            output: [0, 1, 4, 5]\n            \"\"\"\n\
    \    \"\"\"\n    if x is None or len(x) == 0:\n        return []\n\n    digit_list\
    \ = []\n    for i in x:\n        if i % 2 == 1:\n            digit_list.append(i)\n\
    \n    digit_list_sorted = sorted(digit_list)\n\n    unique_digit_list = []\n \
    \   for el in digit_list_sorted:\n        if el not in unique_digit_list:\n  \
    \          unique_digit_list.append(el)\n\n    return unique_digit_list\n", " \
    \   x = [1,2,3,4,5,6,7,8]\n\n    >>>unique_digits(x)\n    [2,4,6,8]\n\n    >>>unique_digits([1])\n\
    \    [1]\n    \n    >>>unique_digits([1,2])\n    [1,2]\n    \n    >>>unique_digits([1,2,3,4])\n\
    \    [1,2,4]\n\n    >>>unique_digits([1,1,2,3,4,5,6,7,8])\n    [1,2,4,6,8]\n \
    \   \n    \"\"\"\n\n    seen = set()\n    seen_add = seen.add\n    return [x for\
    \ x in x if not (x in seen or seen_add(x))]\n", "            unique_digits([2,\
    \ 4, 6, 10, 11, 12, 13, 14, 15, 16, 17]) == [10, 11, 12, 13]\n            \"\"\
    \"\n    \"\"\"\n    \n    # Initialize an empty list\n    unique_digits_list =\
    \ []\n    \n    # Initialize the count of even digit to zero\n    count_even =\
    \ 0\n    \n    # Traverse the original list\n    for i in x:\n        # if the\
    \ current element has even digit\n        if i % 2 == 0:\n            # increase\
    \ the count of even digit\n            count_even += 1\n            \n       \
    \ # if the current element hasn't any even digit and is unique then append it\
    \ to list\n        else:\n            if count_even != 0:\n                unique_digits_list.append(i)\n\
    \            else:\n                pass\n            \n        # reset count\
    \ of even digit\n        count_even = 0\n        \n    return unique_digits_list\n\
    </cell>\n<cell>\nunique_digits([22, 34, 54, 54, 67, 69, 71, 78, 81])\n</cell>\n\
    <cell>", "            Ex1:\n            [4, 6, 2] --> [4, 2]\n            [6,\
    \ 8, 10] --> []\n            Ex2:\n            [1, 3, 5, 7, 4] --> [1, 3, 4]\n\
    \            [4, 3, 1, 7, 2] --> [3, 4]\n            \"\"\"\n    \"\"\"\n    \n\
    \    # initialize result list\n    result = []\n    \n    # for each element in\
    \ x\n    for el in x:\n        \n        # for each digit in element\n       \
    \ for digit in str(el):\n            \n            # if the digit is not even\n\
    \            if int(digit) % 2 == 0:\n                \n                # append\
    \ the element into result list\n                result.append(el)\n          \
    \      \n                # stop the loop here\n                break\n    \n \
    \   # sort the result list\n    return sorted(result)\n</cell>\n<cell>\nunique_digits([4,\
    \ 6, 2])\n</cell>\n<cell>\nunique_digits([6, 8, 10])\n</cell>\n<cell>\nunique_digits([1,\
    \ 3, 5, 7, 4])\n</cell>\n<cell>\nunique_digits([4, 3, 1, 7, 2])\n</cell>\n<text>\n\
    Problem 7 (Optional)\nCreate a function that returns True if the integer 27 is\
    \ in the Fibonacci Sequence.\n\nHint: Check out the formula for the Fibonacci\
    \ Sequence here\n\nIf the integer 27 is not in the Fibonacci Sequence, return\
    \ False.\n\n\n</text>\n<text>\nSolution\n\n</text>\n<cell>", "            Given\
    \ [5, 4, 1, 3]\n\n            Return [4, 3]\n            \"\"\"\n    \"\"\"\n\
    \    for i in range(len(x)):\n        for j in range(i+1, len(x)):\n         \
    \   if x[i] > x[j]:\n                break\n            if x[i] % 2 != 0 and x[j]\
    \ % 2 == 0:\n                return x[i:j+1]\n    return [x]\n", "    Input :\
    \ [4,3,5,2,7,8]\n    Output : [2, 3, 4, 5, 8, 7]\n    \"\"\"\n    answer: List[int]\
    \ = []\n    \n    # Your code goes here\n    \n    return answer\n", "    >>>\
    \ unique_digits([-2, 0, 1, 2, 3, 0, 0, 3])\n    [0, 1, 2, 3, 0, 0, 3]\n    \"\"\
    \"\n    \n    digits = x[:]\n    digits.sort(reverse=True)\n    unique = []\n\
    \    for i in range(len(digits)):\n        if digits[i] % 2 == 0 and len(unique)\
    \ < len(digits):\n            unique.append(digits[i])\n    return unique\n",
  "    >>> unique_digits([1, 3, 8, 1, 8, 2])\n    [1, 3, 8]\n    \"\"\"\n    \n  \
    \  unique_set = []\n\n    for item in x:\n        digit_list = []\n        \n\
    \        for digit in str(item): \n            if int(digit) % 2 == 0:\n     \
    \           digit_list.append(digit)\n                \n        unique_set.append(digit_list)\n\
    \n    return sorted(unique_set)\n", "            Input: x = [1, 2, 4, 9, 4, 2]\n\
    \            Output: x = [1, 2]\n            \"\"\"\n\n    Args:\n        x: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    from collections import defaultdict\n\
    \    from itertools import filterfalse\n\n    # sort x first to avoid duplicates\n\
    \    x = sorted(x)\n\n    # get all even digit elements\n    even_elements = list(filter(lambda\
    \ x: not x % 10, x))\n\n    # use defaultdict to count occurence\n    count_d\
    \ = defaultdict(int)\n    for i in even_elements:\n        count_d[i] += 1\n\n\
    \    # filterfalse to get non-occurenced elements\n    filtered_elements = list(filterfalse(lambda\
    \ x: x == 0, count_d.values()))\n\n    # return filtered elements\n    return\
    \ filtered_elements\n\n", "    Sample Input:\n            [-3, -1, 0, 1, 8, 4,\
    \ 5, 6, 9, 2]\n    Sample Output:\n            [0, -1, 2, 4, 6, 8, 9]\n    \"\"\
    \"\n    numbers = x\n    \n    result = []\n\n    for i in range(len(numbers)):\n\
    \        if numbers[i] % 2 == 0:\n            result.append(numbers[i])\n\n  \
    \  return result\n", "            Input: x = [1, 3, 5, 7, 9]\n            Output:\
    \ [1, 3, 5, 7, 9]\n\n    Note:\n            If the returned list has duplicate\
    \ elements, only the first appearance is kept.\n            For example, `unique_digits([1,\
    \ 3, 5])` returns `[1, 3]`. \n            \n            Do not sort the returned\
    \ list.\n    \"\"\"\n    n = len(x)\n    if n == 0:\n        return []\n\n   \
    \ ans = []\n    for num in x:\n        if num % 2 == 0:\n            ans.append(num)\n\
    \            continue\n\n        for index in range(1, n):\n            if num\
    \ % index == 0:\n                ans.append(num)\n                ans.append(index)\n\
    \n                break\n\n    return ans\n", "        x = [1, 3, 2, 4, 9, 5,\
    \ 6, 8, 7, 10, 11, 12, 13, 14, 15]\n        unique_digits(x)\n        \"\"\"\n\
    \        >>>> [1, 3, 5, 7, 9, 11, 13, 15, 2, 6, 8, 10, 12]\n\n    \"\"\"\n   \
    \ for i in x:\n        if i % 2 != 0:\n            continue\n        else:\n \
    \           return i\n", "    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n   \
    \ \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\
    \"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n \
    \   \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\
    \"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n    \"\"\"\n", "            x\
    \ = [9, 8, 6, 3, 6, 6, 4, 2, 9, 1, 4, 3, 6, 1, 8, 2, 5, 1, 6, 8, 1, 9, 4]\n  \
    \          unique_digits(x)\n            >> [9, 6, 8, 2, 5, 1, 6, 8, 1, 9, 4]\n\
    \            \"\"\"\n    Args:\n        x (List[int]): List of positive integers\n\
    \    Returns:\n        List[int]: Sorted list of unique elements that hasn't any\
    \ even digit.\n    \"\"\"\n    \n    nums_str = list(map(str, x))\n    odd_nums\
    \ = list(filter(lambda x: x % 2 == 1, nums_str))\n    sorted_odd_nums = sorted(odd_nums)\n\
    \    sorted_nums = list(map(lambda x: int(x) if x != '0' else 0, sorted_odd_nums))\n\
    \    return list(sorted_nums)\n", "            x = [4, 5, 6, 9, 1, 2]\n      \
    \      unique_digits(x) = [4, 5, 6, 9, 2]\n            \"\"\"\n    \n    Time\
    \ complexity: O(nlogn)\n    Space complexity: O(n)\n    \"\"\"\n    \n    l =\
    \ len(x)\n    \n    x.sort()\n    \n    out = []\n    \n    for i in range(l):\n\
    \        if x[i] % 2 == 1:\n            continue\n        \n        for j in range(i+1,\
    \ l):\n            if x[j] % 2 == 0:\n                break\n            \n  \
    \          out.append(x[j])\n            \n    return out\n</cell>\n<cell>\nx\
    \ = [4, 5, 6, 9, 1, 2]\nunique_digits(x)\n</cell>\n<cell>", "            Input:\
    \ x = ['1234', '101', '2345']\n            Output: ['101', '2345']\n         \
    \   \"\"\"\n    \n    \"\"\"\n    Time complexity: O(n), where n = len(x)\n  \
    \  \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    ", "    Input : \n    [1, 4, 5, 6, 7, 8, 11, 14, 16, 17, 19,\
    \ 20, 22, 27, 30, 35, 38, 45, 46, 50]\n\n    Returned:\n            [1, 4, 5,\
    \ 6, 7, 8, 11, 14, 16, 17, 19, 20, 22, 27, 30, 35, 38, 45, 46]\n    \"\"\"\n \
    \   \n    return sorted(list(set(x)))\n\"\"\"\nB) Count the total number of unique\
    \ digits.", "            Input: [1, 1, 2, 3]\n            Output: [1, 3]\n   \
    \         Explanation: [1, 3] has even digit, so it goes to the front.\n     \
    \       \"\"\"\n\n    Args:\n        x (List[int]): list of integers\n\n    Returns:\n\
    \        List[int]: sorted list of all elements that hasn't any even digit.\n\
    \    \"\"\"\n    digits = list(map(int, str(x)))\n    odd_digits = list(filter(lambda\
    \ x: x % 2 != 0, digits))\n    odd_digits.sort()\n    sorted_odd_digits = [x for\
    \ x in odd_digits if x != 0]\n    return sorted_odd_digits\n", "            Input:\
    \ [7, 1, 3, 8, 2, 4]\n            Output: [1, 3, 8, 4]\n            \"\"\"\n \
    \   \"\"\"\n    unique_digits_lst = []\n    \n    for i in x:\n        if i %2\
    \ == 0 and i not in unique_digits_lst:\n            unique_digits_lst.append(i)\n\
    \            \n    return unique_digits_lst\n            ", "    >>> unique_digits([1,\
    \ 2, 3])\n    [1, 2, 3]\n    >>> unique_digits([3, 2, 1])\n    [2, 3]\n    >>>\
    \ unique_digits([6, 2, 1, 9, 3, 5])\n    [6, 2, 5]\n    \"\"\"\n    digits = [str(i)\
    \ for i in x]\n    unique_digits = []\n    for digit in digits:\n        unique_digits.append(int(digit))\n\
    \        \n    unique_digits = sorted(unique_digits, reverse=True)\n\n    return\
    \ unique_digits\n", "            x = [1, 3, 5, 6, 10]\n            unique_digits(x)\
    \ = [1, 3, 5, 6, 10]\n            \"\"\"\n    \n    Time complexity: O(n)\n  \
    \  Space complexity: O(n)\n    \"\"\"\n    digit_dict = {}\n    for num in x:\n\
    \        if num in digit_dict:\n            digit_dict[num] += 1\n        else:\n\
    \            digit_dict[num] = 1\n    sorted_list = []\n    for num in x:\n  \
    \      if digit_dict[num] % 2 == 0:\n            sorted_list.append(num)\n   \
    \ return sorted_list\n", '            [7, 9, 7, 9, 9, 11, 11, 11, 9, 19, 19, 19,
    19, 19, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17,
    17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, ',
  "            Input: [3, 1, 4, 1, 5, 9]\n            Output: [1, 4, 9, 5, 3]\n  \
    \          \"\"\"\n    \"\"\"\n    \n    import heapq\n    \n    heapq.heapify(x)\n\
    \    \n    ans = []\n    while x:\n        val = heapq.heappop(x)\n        \n\
    \        if not any([val % i == 0 for i in range(10)]): \n            ans.append(val)\n\
    \        \n    return ans\n</cell>\n<cell>\nunique_digits([3, 1, 4, 1, 5, 9])\n\
    </cell>\n<text>\n6. Find all pairs with unique sum\nGiven an array of integers\
    \ nums. We need to find all pairs with unique sum where we only consider adjacent\
    \ elements.\nThe result should be returned as a list of lists.\n\nExample:\n \
    \   Input: [1, 2, 2]\n    Output: [[1, 2], [2, 1]]\n\n</text>\n<cell>", "    \
    \        Input: x = 1, 10, 2, 3, 4\n            Output: [10, 3, 4]\n         \
    \   \"\"\"\n    \"\"\"\n    if not x:\n        return []\n    even = []\n    odd\
    \ = []\n    for y in x:\n        if y % 2 == 0:\n            even.append(y)\n\
    \        else:\n            odd.append(y)\n    return sorted(even+odd, key=int)\n",
  "            unique_digits([1, 2, 3])\n            \"\"\"\n            Return value:\n\
    \            [0, 1, 3]\n    \"\"\"\n    import itertools\n    return list(filter(lambda\
    \ x: len(set(itertools.takewhile(lambda x: x % 2 == 0, x))) == 1, x))\n", "  \
    \  Input : [5, 10, 100, 12, 3, 15, 2, 1]\n    Output : [3, 15, 2, 1]\n\n    \"\
    \"\"\n    # your code goes here\n    digit = []\n    for d in x:\n        if d%2==0:\n\
    \            pass\n        else:\n            digit.append(d)\n    return sorted(list(set(digit)))\n",
  "            unique_digits([1, 2, 3, 4]) =>\n                [1, 2, 3, 4]\n    \
    \        \"\"\"\n    \"\"\"\n    digit_set = set()\n    for num in x:\n      \
    \  digit_set.add(num % 10)\n    return [x for x in x if x % 10 not in digit_set]\n\
    </cell>\n<cell>\nunique_digits(list(map(int, input(\"Input a list separated by\
    \ space: \").split())))\n</cell>\n<cell>", "    >>> unique_digits([1, 2, 3, 1,\
    \ 2])\n    [1, 3, 2]\n            \"\"\"\n    >>> unique_digits([1, 2, 3])\n \
    \   []\n            \"\"\"\n    \"\"\"\n    import math\n    \n    x = sorted(x)\n\
    \    \n    i = 0\n    while i < len(x):\n        if x[i] % 2 == 0 and x[i] % 2\
    \ != 1 and x[i] % 2 != 2:\n            if x[i] == x[i + 1]:\n                return\
    \ x\n            else:\n                return x\n        else:\n            i\
    \ += 1\n    return x\n", "            unique_digits([1, 4, 3, 6, 9])\n       \
    \     [1, 3, 6, 9]\n\n    Time Complexity: O(n)\n    Space Complexity: O(1)\n\
    \    \"\"\"\n    counts: Dict[int, int] = Counter(x)\n    return [key for key,\
    \ val in counts.items() if val % 2 == 0]\n", "            Input: [1, 10, 2, 3,\
    \ 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 990, 418, \n                 \
    \  810, 1001, 1023, 2011, 1477, 4382, 997, 1821, 1914, 3744, 5262, 9517, \n  \
    \                 1830, 3814, 9493, 4049, 4069, 8111, 8242, 1844, 1995, 333, 7677,\
    \ 9090, \n                   9950, 11380, 4998, 9986]\n            Output: [1,\
    \ 10, 14, 21, 34, 55, 89, 144, 233, 377, 418, 810, 1001, 1023, 2011, \n      \
    \               1914, 1821, 1914, 3744, 1830, 3814, 1844, 1995, 333, 9090, 9950,\
    \ \n                     11380, 4998, 9986]\n            \"\"\"\n            Explanation:\n\
    \            1\n            10\n            14\n            21\n            34\n\
    \            55\n            89\n            144\n            233\n          \
    \  377\n            418\n            810\n            1001\n            1023\n\
    \            2011\n            1914\n            1821\n            1914\n    \
    \        3744\n            1830\n            3814\n            1844\n        \
    \    1995\n            333\n            9090\n            9950\n            11380\n\
    \            4998\n            9986\n\n    \"\"\"\n    seen = set()\n    seen_add\
    \ = seen.add\n    return [x for x in x if not (seen.__contains__(x) or seen_add(x))]\n",
  "    Input: x = [1, 4, 6, 4, 2]\n    Output: [6, 2]\n            \n            \"\
    \"\"\n    \n    digits = {}\n    for num in x:\n        digits[num] = digits.get(num,\
    \ 0) + 1\n    \n    return sorted(x for x in x if not x % 2)\n", "    Input :\
    \ x = [6, 2, 4, 4, 3, 1]\n    Output: [4, 6, 6, 2]\n    \"\"\"\n    even = []\n\
    \    odd = []\n    \n    for ele in x:\n        if ele % 2 == 0:\n           \
    \ even.append(ele)\n        else:\n            odd.append(ele)\n    \n    even.sort()\n\
    \    odd.sort()\n\n    return even + odd\n", "    >>>x = [1,2,3,4,5,6,7,8,9]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,7,8,9]\n\n    >>>x = [12,4,2,1,3,5,6,8,7,10,11,9,0]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,8,9,0]\n    \n    >>>x = [4,8,2,7,2,1,3,5,6,8,7,10,11,9,0]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,8,9,0]\n    \n    >>>x = [4,2,1,3,5,6,8,7,10,11,9,0,12]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,8,9,0,12]\n    \n    >>>x = [4,1,3,5,6,8,7,10,11,9,0,12]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,8,9,0,12]\n    \n    >>>x = [1,2,3,4,5,6,8,9,0,12]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,8,9,0,12]\n    \n    >>>x = [1,2,3,4,5,6,7,8,9,0]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,7,8,9]\n    \n    >>>x = [1,2,3,4,5,6,7,8,9]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,7,8,9]\n    \n    >>>x = [1,2,3,4,5,6,7,8,9]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,7,8,9]\n    \n    >>>x = [1,2,3,4,5,6,7,8,9,0]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,7,8,9,0]\n    \n    >>>x = [1,2,3,4,5,6,7,8,9,0]\n\
    \    >>>unique_digits(x)\n    [1,2,3,4,5,6,7,8,9,0]\n    \n    \"\"\"\n    \n\
    \    unique_x = []\n    \n    for i in x:\n        if i not in unique_x  and len(str(i))\
    \ == 2:\n            unique_x.append(i)\n            \n    \n    return sorted(unique_x)\n",
  "            Input: x = [1, 2, 3]\n            Output: [1, 3]\n            Explanation:\
    \ [1, 3] is unique.\n            \"\"\"\n\n    \n    \n    \n", "            Input:\n\
    \            [1,2,3,4,5,6,7,8,9]\n            Output:\n            [1,2,5,6,7,8,9]\n\
    \            \"\"\"\n    \"\"\"\n    if not x:\n        return [] \n    \n   \
    \ digit_list = []\n    \n    for i in x:\n        digit_list.append(str(i))\n\
    \        \n    digit_list = sorted(digit_list)\n\n    digit_list = [x for x in\
    \ digit_list if \"0\" not in x]\n\n    return digit_list\n", "    Input : [1,\
    \ 2, 3, 1]\n    Expected Output : [1, 2, 3]\n    \n    Time complexity - O(n)\n\
    \    Space complexity - O(n)\n    \"\"\"\n    # Your code here\n    return sorted(list(set(x)))\
    \ if x else []\n    \n</cell>\n<cell>", "    Input: [4, 6, 9, 10, 11, 12, 18,\
    \ 20, 22, 21, 23, 33, 35, 36]\n    Output: [9, 10, 11, 12, 18, 20, 22, 23, 33]\n\
    \    \"\"\"\n    if not x:\n        return []\n\n    digits = []\n    \n    for\
    \ i in x:\n        if int(i) in digits:\n            continue\n        else:\n\
    \            digits.append(int(i))\n\n    digits.sort()\n    \n    return [i for\
    \ i in x if int(i) not in digits]\n\n", "    INPUT: [1, 2, 3, 3, 4, 6, 6]\n  \
    \  OUTPUT: [1, 3, 6, 6]\n            \"\"\"\n\n    Time complexity: O(n+k), where\
    \ n is length of x and k is len of unique_digits\"\"\"\n    digits = set()\n \
    \   for d in x:\n        if d not in digits:\n            digits.add(d)\n    return\
    \ list(digits)\n", "            Given [3, 12, 5, 67, 9, 34],\n            Return\
    \ [5, 9, 12]\n            \"\"\"\n    \"\"\"\n\n    lst = list(sorted(x))\n  \
    \  return list(filter(lambda i: lst[x.index(i)%len(lst)]!=int(str(i)[-2:]), lst))\n",
  "    >>> unique_digits([4,3,2,1,5,6,7,8])\n    []\n            \n    Or\n    \n\
    \    >>> unique_digits([1,2,3,4,5,6,7,8,9,0])\n    [4,5,6,7,8,9]\n    \n    Or\n\
    \    \n    >>> unique_digits([4,5,6,7,8,9,0])\n    [4,5,6,7,8,9]\n    \n    Or\n\
    \    \n    >>> unique_digits([1,2,3])\n    [1,2,3]\n    \"\"\"\n    \n    digit_dict\
    \ = {}\n    for digit in x:\n        digit_dict[digit] = 1\n    \n    sorted_digit_list\
    \ = list(sorted(x for x in x if x not in digit_dict))\n    return sorted_digit_list\n\
    \n", "            Input: [10, 30, 30, 20]\n            Output: [10, 30, 20]\n\n\
    \            Input: [9, 17, 23, 51, 97, 45, 9, 73]\n            Output: [9, 45,\
    \ 73, 97, 90]\n            \"\"\"\n    \"\"\"\n    \n    digits = [int(i) for\
    \ i in str(x)]\n    return sorted(digits)\n\n", "            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n          \
    \  [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n            [1,2,3,4,5,6,7,8,9]\n\
    \            [1,2,3,4,5,6,7,8,9]", "            Input: x = [2,3,7,3]\n       \
    \     Output: unique_digits(x) = [2,3,7]\n            \"\"\"\n            \n \
    \   Args:\n        x (List[int]): A list of integers representing a sorted list\
    \ of\n            positive integers.\n\n    Returns:\n        List[int]: A sorted\
    \ list of all elements that hasn't any even digit.\n    \n    Examples:\n    \
    \    \n            unique_digits([2,3,7,3]) --> [2,3,7]\n            \n    \"\"\
    \"\n        \n    digit_set = set()\n    unique_digit_list = []\n    for num in\
    \ x:\n        if num in digit_set:\n            pass\n        else:\n        \
    \    digit_set.add(num)\n            unique_digit_list.append(num)\n    return\
    \ unique_digit_list\n", "            Input: x = [1, 1, 2, 3]\n            Output:\
    \ [1, 3]\n            \"\"\"\n    \n    Example:\n            Input: x = [1, 1,\
    \ 2]\n            Output: [1, 2]\n    \"\"\"\n    digits = []\n    for digit in\
    \ x:\n        if digit in digits:\n            return digit\n        else:\n \
    \           digits.append(digit)\n    return digits\n", "    >>> unique_digits([11,\
    \ 12, 13, 14, 15, 21, 22, 23, 24, 31, 32, 33])\n    [1, 2, 3, 4, 5, 6, 7]\n  \
    \          \"\"\"\n    \"\"\"\n    digits = set()\n    output = []\n\n    for\
    \ i in x:\n        if i not in digits:\n            digits.add(i)\n          \
    \  output.append(i)\n\n    return sorted(output)\n\n", "            [1, 2, 3,\
    \ 4, 5] -> [1, 2, 3, 4, 5]\n            \"\"\"\n    \"\"\"\n    unique_digits\
    \ = []\n    for i in x:\n        while unique_digits not in unique_digits:\n \
    \           unique_digits.append(i)\n    return unique_digits\n    ", "    Input\
    \ : [1, 7, 9, 3, 5]\n    Expected : [1, 3, 5]\n    \n            \"\"\"\n    \"\
    \"\"\n    Time complexity: O(nlogn)\n    \"\"\"\n    res = []\n    sorted_list\
    \ = sorted(x)\n    for i in sorted_list:\n        if i%2 == 0:\n            continue\n\
    \        else:\n            res.append(i)\n    return res\n</cell>\n<cell>", " \
    \           >>> unique_digits([12, 4, 7, 8, 12, 2, 6, 9, 1])\n            [0,\
    \ 2, 4, 6, 7, 9, 12]\n            \"\"\"\n    \n    Args:\n        x (List[int]):\
    \ A list of integers. \n    \n    Returns:\n        List[int]: A sorted list of\
    \ all elements that hasn't any even digit.\n    \"\"\"\n    \n    sorted_x = sorted(x)\n\
    \    new_x = []\n    \n    for d in sorted_x:\n        if d % 2 == 0:\n      \
    \      continue\n        else:\n            new_x.append(d)\n            \n  \
    \  return sorted(new_x)\n", "        Input: x = [10, 12, 15, 16, 23, 43, 44, 51,\
    \ 57, 61]\n        Output: [10, 12, 23, 44]\n        \"\"\"\n    \n    s = set()\n\
    \    for a in x:\n        if a > 9 :\n            s.add(a)\n    s = [x for x in\
    \ s if x % 2 == 0]\n    s.sort()\n    return s\n\n", "    Input: x = [4, 3, 1,\
    \ 3, 2, 2, 2, 1]\n    Output: [1, 3, 2, 2, 4, 4]\n            \n    Explanation:\
    \ Only even digit is [4, 3], the rest is [3, 1, 3, 2, 2, 2, 1]\n\n    \"\"\"\n\
    \    digit_set = set()\n    \n    digit_list = []\n    \n    for num in x:\n \
    \       if num % 2 == 0:\n            if num not in digit_set:\n             \
    \   digit_list.append(num)\n                digit_set.add(num)\n    \n    digit_list.reverse()\n\
    \    \n    return digit_list\n", "            Input: [1, 1, 2, 3]\n          \
    \  Output: [1, 2, 3]\n            \"\"\"\n    \"\"\"\n    \n    number_lst = []\n\
    \    \n    for i in x:\n        \n        if len(str(i)) == 1:\n            number_lst.append(i)\n\
    \    \n    number_lst = sorted(number_lst)\n    \n    return [n for n in number_lst\
    \ if n % 2 == 0]\n", "    >>> unique_digits([1,2])\n    [1]\n    \"\"\"\n    #\
    \ init\n    digits = []\n    \n    # loop\n    for e in x:\n        for d in range(int(e/10),\
    \ 0, -1):\n            if e % d == 0:\n                break\n        else:\n\
    \            digits.append(e)\n\n    # return\n    return sorted(digits)\n", " \
    \           [1, 10, 2, 5, 3, 7, 2, 1]\n            Return sorted list:\n     \
    \       [1, 2, 3, 5, 7, 10]\n            \"\"\"\n    \"\"\"\n    \n    seen: Set[int]\
    \ = set()\n    return [x for x in x if not (x in seen or seen.add(x))]\n</cell>\n\
    <cell>\nunique_digits([1, 2, 3, 10, 4, 2, 1])\n</cell>\n<cell>", "           \
    \ x: [9, 6, 0, 8, 1, 0]\n            result -> [0, 8, 9]\n            \"\"\"\n\
    \    \"\"\"\n    even = []\n    odd = []\n    for ele in x:\n        if ele %\
    \ 2 == 0:\n            even.append(ele)\n        else:\n            odd.append(ele)\n\
    \    odd = sorted(odd)\n    even = sorted(even)\n    result = [x for x in even\
    \ if x!=odd.pop(0)]\n    return sorted(result)\n", "            x = [1, 4, 3,\
    \ 2, 5]\n            unique_digits(x) = [1, 4, 5]\n            \"\"\"\n      \
    \      \n    Args:\n        x (List[int]): The input list\n    Returns:\n    \
    \    List[int]: Sorted unique list\n    Raises:\n        AssertionError: When\
    \ x's type is not List[int]\n    \"\"\"\n    assert type(x) == list, \"x's type\
    \ should be List[int]\"\n\n    return sorted([i for i in x if i // 10 % 2 == 0])\n",
  "            [4, 2, 5, 2] -> [4, 2]\n            [2, 2, 2, 2] -> [2, 2, 2]\n   \
    \         [10, 2, 2] -> [2, 2, 2, 10]\n            \"\"\"\n    \"\"\"\n    digits\
    \ = {}\n    for x in x:\n        digits[x] = 0\n    digits = {k: v for k, v in\
    \ sorted(digits.items(), key=lambda item: item[1])}\n    return [int(k) for k\
    \ in x if digits[k] % 2 == 0]\n", "    >>> unique_digits([1, 2, 5, 6, 8, 9, 10,\
    \ 11, 12, 13])\n    [1, 2, 5, 6, 8, 10, 11, 13]\n            \"\"\"\n    \"\"\"\
    \n    \n    \n    \"\"\"\n    \n    \n\n    \"\"\"\n", "            Input: [6,\
    \ 10, 15, 12, 7, 5]\n            Output: [5, 7, 6, 10, 15]\n            \"\"\"\
    \n    \"\"\"\n    \n    pass\n\n", "            Input: [2, 3, 5, 6, 7]\n     \
    \       Output: [2, 5, 7]\n            \"\"\"\n\n    \"\"\"\n    \n    \n    if\
    \ len(x) == 0:\n        return []\n    else:\n        digits = [int(d) for d in\
    \ str(x)]\n        return sorted(list(set(digits) - set(digits[::2])))\n", " \
    \           Input:\n            [1, 2, 3, 4, 5]\n\n            Return:\n     \
    \       [1, 2, 3, 4, 5]\n\n            Explanation: \n            All the elements\
    \ has odd digits except 2, 4, 5.\n            \"\"\"\n    \"\"\"\n    if not x:\n\
    \        return x\n    \n    unique_digits_set = set() \n    for num in x:\n \
    \       if num in unique_digits_set:\n            continue\n        else:\n  \
    \          unique_digits_set.add(num)\n    return sorted(unique_digits_set) \n\
    </cell>\n<cell>\nunique_digits([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<cell>\nunique_digits([-1,-2,-3,-4,-5,-6,-7,-8,-9,0])\n\
    </cell>\n<cell>\nunique_digits([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<cell>\nunique_digits([-1,-2,-3,-4,-5,-6,-7,-8,-9,0])\n\
    </cell>\n<cell>\nunique_digits([1,2,3,4,5,6,7,8,9,0,1])\n</cell>\n<cell>\nunique_digits([-1,-2,-3,-4,-5,-6,-7,-8,-9,0,1])\n\
    </cell>\n<cell>\nunique_digits([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<text>\n2.4 Unique\
    \ Digits in the given String\n\n</text>\n<cell>", "            Input: [234, 456,\
    \ 789]\n            Output: [456, 234]\n            \"\"\"\n    Args:\n      \
    \  x: A list of positive integers.\n    Return:\n        A sorted list of all\
    \ elements that hasn't any even digit.\n    \"\"\"\n    digits = set()\n    for\
    \ a in x:\n        digits.add(a)\n    even = [i for i in digits if not (i % 2)]\n\
    \    return sorted([i for i in x if not i in even])\n", "    >>> unique_digits([0,1,2,3,4])\n\
    \    [1, 2, 3, 4]\n    >>> unique_digits([])\n    []\n    >>> unique_digits([-1,-2,-3,-4,-5])\n\
    \    [-5, -4, -3, -2, -1]\n    >>> unique_digits([-1,-2,-3,-4,-5,-6,-7,-8])\n\
    \    [-6, -7, -8, -5, -4, -3, -2, -1]\n    \"\"\"\n    \n    unique_dig = set()\n\
    \    \n    for i in x:\n        if int(i) in unique_dig:\n            continue\n\
    \        else:\n            unique_dig.add(int(i))\n    \n    return sorted(unique_dig)\n\
    \n", "    >>> unique_digits([3, 2, 6, 4, 8, 3, 5])\n    [6, 3, 8, 5]\n    >>>\
    \ unique_digits([3, 2, 5, 6, 4, 8, 3, 5])\n    [6, 3, 8, 5]\n    >>> unique_digits([3,\
    \ 2, 6, 4, 8, 3, 5])\n    [6, 3, 8, 5]\n    >>> unique_digits([3, 3, 4, 5])\n\
    \    [3, 5]\n    \"\"\"\n    x = sorted(x)\n    return [i for i in x if not any(map(lambda\
    \ x: x%2, x[:i]))]\n", "    >>> unique_digits([10, 1, 22, 9, 99, 0])\n    [10,\
    \ 0, 22, 9] \n    \"\"\"\n    digits = []\n    for y in x:\n        digits.append(str(y))\n\
    \n    return sorted(digits)\n", "            Input: [1, 3, 2]\n            Return:\
    \ [1, 3]\n            \"\"\"\n    \"\"\"\n    sol = []\n    for num in x:\n  \
    \      if num % 2 != 0:\n            sol.append(num)\n    return sol", "    Input:\
    \ [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    Output: [2, 3, 4, 5, 6, 7, 8, 9]\n        \
    \    \"\"\"\n\n    digits = []\n    even = []\n    odd = []\n    for a in x:\n\
    \        if a % 2 == 0:\n            even.append(a)\n        else:\n         \
    \   odd.append(a)\n    odd.sort()\n\n    return even+odd\n", "    >>> unique_digits([1,\
    \ 2, 3, 4, 5, 6, 3, 5])\n    [3, 5, 6, 5]\n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "            Input:\
    \ [10, 22, 11, 4, 13, 14, 6]\n            Output: [4, 6, 13, 14]\n           \
    \ \"\"\"\n\n    Args:\n        x [List]: list of integers.\n    \n    Returns:\n\
    \        [List]: sorted list of unique elements.\n    \"\"\"\n    counter = dict()\n\
    \    for num in x:\n        if num in counter:\n            counter[num] += 1\n\
    \        else:\n            counter[num] = 1\n    result = []\n    for num in\
    \ x:\n        if counter[num] != 0:\n            result.append(num)\n        \
    \    counter[num] -= 1\n    result.sort()\n    return result\n\n", "    [1, 4,\
    \ 3, 6, 2, 5, 7] \n    =>\n    [1, 4, 2, 5, 3, 6, 7]\n    \"\"\"\n    res=set()\n\
    \    for i in x:\n        if abs(i)%2!=0:\n            res.add(i)\n    return\
    \ sorted(list(res))\n            \n", "    \n    >>> unique_digits([1, 2, 4, 8,\
    \ 5])\n    [1, 2, 4, 5]\n    \n    >>> unique_digits([])\n    []\n    \n    >>>\
    \ unique_digits([1])\n    [1]\n    \n    >>> unique_digits([-2, -2, 0])\n    []\n\
    \    \n    >>> unique_digits([-2, -1, -1])\n    []\n    \n    >>> unique_digits([-2,\
    \ -1, 0, 1])\n    []\n    \"\"\"\n    \n    if not x:\n        return []\n   \
    \ \n    return sorted(list(set(filter(lambda y: len(str(y)) == 1 and y%2 == 0,\
    \ x))))\n    ", "    >>> unique_digits([1,3,2,5,4,2,3,5,7,4,5,1,3])\n    [[3,\
    \ 2, 5, 4], [3, 5, 7], [4, 5], [1, 3]]\n            \n            \"\"\"\n   \
    \ \"\"\"\n    \n    \n    \n    pass\n\n", "        Input : [3,2,2,2,1,2,4,5,6,2,1]\n\
    \        Output: [3,2,4]\n\n            \n    Args:\n        x (List[int]): List\
    \ of positive integers.\n        \n    Returns:\n        List[int]: List of unique\
    \ positive integers\n        \n    Examples:\n        unique_digits([3,2,2,2,1,2,4,5,6,2,1])\
    \ = [3,2,4]\n    \"\"\"\n    digits = {}\n    for d in x:\n        digits[d] =\
    \ digits.get(d, 0) + 1\n    return list({k:v for k,v in sorted(digits.items(),\
    \ key=lambda item: item[1], reverse=True)})\n", "            Input: [1, 6, 3,\
    \ 10, 6, 1, 9, 2, 10, 1]\n            Output: [1, 6, 3, 6, 10, 9, 10, 1, 2]\n\
    \            \"\"\"\n\n    Args:\n        x {List[int]} -- A list of positive\
    \ integers.\n\n    Returns:\n        List[int] -- A sorted list of all elements\
    \ that hasn't any even digit.\n    \"\"\"\n\n    digits: Set[int] = set()\n\n\
    \    for e in x:\n        while e >= 10:\n            digits.add(int(e//10))\n\
    \            e = e%10\n        if e != 0:\n            digits.add(e)\n\n    return\
    \ sorted(list(digits))\n", "    >>> unique_digits([1, 2, 3, 6, 9])\n    [1, 2,\
    \ 3, 9]\n            \"\"\"\n\n    >>> unique_digits([1, 2, 3, 6, 9])\n    [1,\
    \ 2, 3, 9, 6]\n            \"\"\"\n\n    >>> unique_digits([1, 2, 3, 6, 9])\n\
    \    [1, 2, 3, 9, 6]\n            \"\"\"\n\n    >>> unique_digits([3, 2, 7, 4,\
    \ 3])\n    [2, 3, 7, 4, 3]\n            \"\"\"\n\n    >>> unique_digits([1, 2,\
    \ 3, 6, 9])\n    [1, 2, 3, 9, 6]\n            \"\"\"\n\n    >>> unique_digits([1,\
    \ 2, 3, 6, 9])\n    [1, 2, 3, 9, 6]\n    \"\"\"\n    \n    \n    # Your code here\n\
    \    s = set()\n    for num in x:\n        if num % 2 == 0:\n            s.add(num)\n\
    \    sorted(s)\n\n    \n    \n\n\n\"\"\"", "            [1,2,3,4]\n          \
    \  unique_digits([2,3,4,5])\n            [1,3,5]\n            \"\"\"\n\n    Args:\n\
    \        x (List[int]): List of integers\n\n    Returns:\n        List[int]: Sorted\
    \ list of unique integers \n    \"\"\"\n    return sorted(list(set(x)))\n", " \
    \           Example: \n            Input: [1, 11, 121, 21, 3]\n            Output:\
    \ [21, 3]\n            \"\"\"\n    Args:\n        x: A list of positive integers.\n\
    \    Returns:\n        List[int]: Returns a list of elements havn't any even digit.\n\
    \    Examples:\n        \n        unique_digits([1, 11, 121, 21, 3]) --> [21,\
    \ 3]\n    \"\"\"\n    x = sorted(x)\n    ans = [0]\n    for i in range(0, len(x)):\n\
    \        if i%2 == 1:\n            continue\n        if x[i] == x[i+1]:\n    \
    \        ans.append(x[i])\n    ans = sorted(ans)\n    return ans\n", "       \
    \     [4,2,3,5,1,8]\n    \n            Returned value:\n            [5,8,3]\n\
    \    \n    Explanation:\n            4 and 1 has even digit '0' which means they\
    \ will be \n            ignored in the result list, so [4,2,3,5,1,8] becomes\n\
    \            [5,3,8].\n    \n    \"\"\"\n    return sorted(set(i for i in x if\
    \ not i.isdigit()))\n    \n</cell>\n<text>\nThe unique_digits function takes one\
    \ parameter, a list containing all positive integers. Then it returns another\
    \ list containing the unique digits.\n\n\n</text>\n<cell>\nassert unique_digits([4,2,3,5,1,8])\
    \ == [5,3,8]\nassert unique_digits([1,2,3,4,4,5,6,7,8,9,0]) == [0,1,2,3,4]\n</cell>\n\
    <text>\nWrite a Python function to get all possible combinations of a list of\
    \ items\n\n</text>\n<cell>", "            x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\
    \            unique_digits(x)\n            >> [1, 3, 5]\n            \"\"\"\n\
    \    Args:\n        x : List[int]\n    Returns:\n        List[int]\n    Examples:\n\
    \        unique_digits([1])\n        >> [1]\n        unique_digits([2])\n    \
    \    >> [2]\n        unique_digits([2, 4])\n        >> [2, 4]\n        unique_digits([3,\
    \ 6, 9])\n        >> [3, 6, 9]\n        unique_digits([3, 6, 9, 4, 6, 9])\n  \
    \      >> [4, 6, 9]\n    \"\"\"\n    return sorted(list(set(x)))\n", "       \
    \     Sample Test Cases:\n            Input: [2,7,5,12,20]\n            Output:\
    \ [7,5,20]\n            Explanation: 7 and 20 has even digit.\n            \"\"\
    \"\n    \"\"\"\n    def count_digits(x: List[int]) -> List[int]:\n        \"\"\
    \"Given a list of positive integers x. return a sorted list of all \n        elements\
    \ that hasn't any even digit.\n\n        Note:\n            Returned list should\
    \ be sorted in increasing order.\n            \n        For example:\n       \
    \         Input: [2,7,5,12,20]\n                Output: [7,5,20]\n           \
    \     Explanation: 7 and 20 has even digit.\n        \"\"\"\n        res=[]\n\
    \        for el in x:\n            if el%2==0 and el!=0:\n                res.append(el)\n\
    \        return res\n    \n    digits=count_digits(x)\n    \n    evens=[digit\
    \ for digit in digits if digit%2==0]\n    \n    evens=sorted(evens)\n    \n  \
    \  odds=[digit for digit in digits if not digit%2==0]\n    \n    odds=sorted(odds)\n\
    \    \n    return evens+odds\n\"\"\"\n    assert unique_digits([2,7,5,12,20])\
    \ == [7, 5, 20]\n\n\"\"\"", "            x = [1, 2, 2, 2, 3]\n            return:\
    \ [1, 2, 3] \n            \n            \"\"\"\n    Args:\n        x (List[int]):\
    \ List of numbers\n\n    Returns:\n        List[int]: Sorted list of all elements\
    \ that  \n                    hasn't any even digit\n    \"\"\"\n    \n    \n\
    \    # code here\n    \n    return res\n\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \           Input: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n            Output:\
    \ [0, 2, 3, 5, 6, 7, 8, 9, 10, 12]\n            \"\"\"\n\n    Args:\n        x\
    \ (List[int]): a list contains all positive integers\n\n    Returns:\n       \
    \ List[int]: a sorted list contains all elements that hasn't any even digit\n\
    \    \"\"\"\n    digits = [0] * 10\n    odd = []\n    for ele in x:\n        digits[ele%10]\n\
    \    for ele in x:\n        if digits[ele%10] != 0:\n            digits[ele%10]\
    \ -= 1\n        else:\n            odd.append(ele)\n\n    return sorted(odd)\n",
  "            unique_digits([1, 2, 3, 3]) -> [1, 2]\n            unique_digits([1,\
    \ 2, 5, 3]) -> [1, 2]\n            unique_digits([1, 2, 3, 5, 3]) -> [1, 2]\n\
    \            unique_digits([1, 2, 4, 5, 3]) -> [1, 2, 3]\n            \"\"\"\n\
    \    \"\"\"\n    \n    # Your code here\n    if not x:\n        return []\n  \
    \  \n    even_digits = set(range(10)) & set([x % d for d in range(1, 10)])\n \
    \   return [d for d in x if d not in even_digits]\n\n", "            Input: [10,\
    \ 20, 30, 40, 50, 60, 70]\n            Output: [10, 20, 30, 40, 50, 60, 70]\n\
    \            \"\"\"\n\n    Args:\n        x(List[int]): [description]\n      \
    \  \n    Returns:\n        List[int]: [description]\n    \n    \"\"\"\n    digits\
    \ = defaultdict(list)\n    for digit in x:\n        digits[digit].append(digit)\n\
    \    \n    sorted = []\n    for key in sorted(list(digits.keys())):\n        sorted_digits\
    \ = digits[key]\n        if len(sorted_digits) <= 1:\n            sorted.append(key)\n\
    \        else:\n            digits_list = list(set(sorted_digits))\n         \
    \   digits_list.sort()\n            if sorted(digits_list) == digits_list:\n \
    \               sorted.append(key)\n    \n    return sorted\n", "            Input:\
    \ [1, 2, 3, 4]\n            Output: [2, 3]\n\n            Input: [1, 2, 2, 3,\
    \ 4, 4, 5]\n            Output: [2, 3]\n            \"\"\"\n\n    digits_set:\
    \ Set[int] = set(map(int, str(x)[2:]))\n    return [x for x in x if x % 2 == 0\
    \ and digits_set.isdisjoint(set(x)) and x not in digits_set]\n\n\"\"\"", "   \
    \         Input: [1, 1, 2, 2, 3, 3, 4, 5]\n            Output: [1, 2, 3, 4, 5]\n\
    \n    Time complexity: O(n*logn) \n    Space complexity: O(logn)\n    \"\"\"\n\
    \    ans = []\n    for ele in x:\n        if any([x % 2 == 0 for x in ans]):\n\
    \            continue\n        else:\n            ans.append(ele)\n    ans.sort()\n\
    \    return ans\n\n", "            x = [5,2,6,2,7,2,8,3]\n            unique_digits(x)\n\
    \            [2,7,8,5]\n\n        \"\"\"\n    \n    return sorted(list(set(x)))\n",
  "            Input: [2, 3, 1, 8, 1, 4, 10]\n            Output: [1, 2, 4, 10]\n\
    \            \"\"\"\n    \"\"\"\n    \n    if not x:\n        return []\n    \n\
    \    seen = set()\n    seen_add = seen.add\n    \n    return [x for x in x if\
    \ not (x in seen or seen_add(x))]\n", "            Input: [1, 4, 3, 8, 5, 9, 7,\
    \ 2, 6, 5]\n            Output: [5, 6, 2, 7, 8]\n            \"\"\"\n    \n  \
    \  Args:\n        x(List[int]): List of integers representing a collection of\
    \ digits, \n                      e.g. [1, 2, 3, 4, 5, 6, 7, 8, 9] or [1, 1, 3]\n\
    \    Returns:\n        List[int]: A sorted list of all elements that hasn't any\
    \ even digit\n    \"\"\"\n    # code here\n    \n    return sorted(x)\n\n    ",
  "    \n    x = sorted([1, 5, 9, 11, 17])\n    \n    unique_digits(x)\n    \n   \
    \ [0, 2, 4, 6, 8]\n    \"\"\"\n    \n    unique = []\n    \n    for i in x:\n\
    \        if int(str(i)[-1]) % 2 == 1:\n            unique.append(i)\n    \n  \
    \  unique.sort()\n    \n    return unique\n</cell>\n<cell>", "            [1,\
    \ 3, 6, 8, 10, 12, 15] -> [6, 10, 12, 15]\n            \"\"\"\n\n    Args:\n \
    \       x (List[int]): a list with positive integers\n\n    Returns:\n       \
    \ List[int]: a list with all elements that hasn't any even digit.\n\n    Examples:\n\
    \        unique_digits([1, 2, 5, 6, 8, 12, 14, 15]) -> [5, 8, 12, 15]\n    \"\"\
    \"\n    nums = unique_digits_helper(x)\n    return sorted(nums)\n", "        \
    \    [1, 2, 3, 4] -> [1, 2, 3]\n            [1, 2, 4, 3] -> [1, 2]\n         \
    \   [1, 2, 4, 3] -> [1, 3]\n            \"\"\"\n    Args:\n        x (List[int]):\
    \ [description]\n    \n    Returns:\n        [type]: [description]\n    \"\"\"\
    \n\n    # Sort x\n    x.sort()\n    \n    # Add first digit to the list\n    digit\
    \ = x[0]\n    \n    # Loop through the remaining elements and look for even digit\n\
    \    for i in range(1, len(x)):\n        if x[i] % 2 == 0:\n            digit\
    \ = x[i]\n            break\n    else:\n        # If no even digit found in the\
    \ element then append the first element to return list\n        digit = x[0]\n\
    \        \n    # Append the rest of the element to return list\n    x.remove(digit)\n\
    \    x += [digit]\n\n    return x\n", "            Input: [4, 6, 15, 16, 23]\n\
    \            Output: [4, 6, 16, 23]\n            \"\"\"\n    \"\"\"\n    \n  \
    \  # your code is here\n    \n    return sorted(x, key=lambda x: (x%10))\n   \
    \ \n    \n    ", "            x = [1, 7, 3, 10, 5, 6, 1, 2]\n            unique_digits(x)\n\
    \            >>>[1, 10, 3, 6, 7]\n            \"\"\"\n\n    Args:\n        x(List[int]):\
    \ List of positive integers \n\n    Returns:\n        List[int]: Sorted list of\
    \ unique digits\n\n    Examples:\n        x = sorted([1, 7, 3, 10, 5, 6, 1, 2])\n\
    \        unique_digits(x)\n        >>[1, 10, 3, 6, 7]\n    \"\"\"\n\n    digits\
    \ = set()\n    digit_list = []\n    for y in x:\n        if y not in digits:\n\
    \            digits.add(y)\n            digit_list.append(y)\n    return sorted(digit_list)\n",
  "        \n        >>> unique_digits([1, 2, 3, 5, 6])\n        [0, 2, 3]\n     \
    \   \n        \n    \"\"\"\n\n    res = []\n    \n    # loop through the list\n\
    \    for i in x:\n        # loop through the digit\n        for j in range(10):\n\
    \            # if it's even, add to res in \n            if i % j == 0:\n    \
    \            res.append(j)\n                \n    return res\n", "           \
    \ Input: \n            x = [1,4,3,5,7,3,8,4,5,6,7,8,9]\n            Return:\n\
    \            [3,5,7,8,9]\n            \"\"\"\n    \n    x: List[int]\n    return:\
    \ List[int]\n    \"\"\"\n    # your code here\n    digit_list = [int(x) for x\
    \ in str(x)]\n    digit_dict = {int(digit): True for digit in digit_list}\n  \
    \  digit_list.remove(0)\n    digit_list_no_odd = [x for x in digit_list if not\
    \ (x % 2)]\n    digit_list_no_odd.sort()\n    \n    return digit_list_no_odd\n\
    \    \n    \n    \"\"\"\n    # Alternative solution\n    digit_list = [int(x)\
    \ for x in str(x)]\n    digit_dict = {int(digit): True for digit in digit_list}\n\
    \    digit_list.remove(0)\n    digit_list_no_odd = [x for x in digit_list if x\
    \ % 2 == 0]\n    digit_list_no_odd.sort()\n    \n    return digit_list_no_odd\n\
    \    \n    \n    \"\"\"\n\n", "            [1, 2, 3, 4, 5]\n            Output:\n\
    \            [1, 3, 5]\n\n            Note:\n            If the input list is\
    \ empty, an empty list should be returned.\n    \"\"\"\n    \n    # TODO: Your\
    \ code goes here\n    if len(x) == 0:\n        return []\n    digits = []\n  \
    \  for i in x:\n        digits.append(i//10)\n        if i%10 == 0:\n        \
    \    digits.append(0)\n    for i in reversed(digits):\n        if i == 0:\n  \
    \          break\n        else:\n            x = list(x)\n            x.remove(i)\n\
    \            x = sorted(x)\n            x.insert(0, i)\n    \n    return x\n\n",
  "            Input: [10, 10, 5]\n            Output: [5, 10]\n            \n   \
    \         Input: [1, 3, 2, 4, 1]\n            Output: [1, 2, 3, 4]\n         \
    \   \"\"\"\n    \n    Args:\n        x (List[int]): a list of integers\n    \n\
    \    Returns:\n        List[int]: a list of integers that hasn't any even digit\n\
    \    \"\"\"\n    \n    # Initialize a unique digits list\n    unique_digits =\
    \ []\n    \n    # Iterate all elements in list\n    for element in x:\n      \
    \  # Check if that element has any even digit or not\n        if element % 2 ==\
    \ 0:\n            # Check if that element is already in the list\n           \
    \ if element in unique_digits:\n                pass\n            else:\n    \
    \            # Append the element\n                unique_digits.append(element)\n\
    \        else:\n            # Append the element\n            unique_digits.append(element)\n\
    \n    return unique_digits\n", "            Input: []\n            Output: [1]\n\
    \            \"\"\"\n\n            Input: [1, 3]\n            Output: [1, 3]\n\
    \n            Input: [1, 2, 3, 4]\n            Output: [1, 4]\n\n            Input:\
    \ [2, 2, 2]\n            Output: [2]\n\n            Input: [1, 1]\n          \
    \  Output: [1]\n\n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\
    \"\"\n    dig_list = []\n    for each in x:\n        digit = each % 10\n     \
    \   dig_list.append(digit)\n    dig_list = [x for x in dig_list if x % 2 == 0]\n\
    \    dig_list.sort()\n    return dig_list\n", "    >>> unique_digits([3,4,7,8,9,11,13,14,15,17,17,17])\n\
    \    [13, 17, 17, 15]\n    \"\"\"\n    \n    \n    \n    \n    \n    return list(dict.fromkeys(x).keys())\n",
  "            [1, 2, 3, 4] -> [1, 3, 5]\n            \"\"\"\n    \"\"\"\n    if len(x)\
    \ == 0:\n        return x\n    odd_digits = [x for x in x if x % 2 != 0]\n   \
    \ return sorted(odd_digits)\n", "            [1, 4, 3, 5] -> [1, 4, 5]\n     \
    \       \"\"\"\n    \n    Time complexity: O(logn)\n    Space complexity: O(1)\n\
    \    \"\"\"\n    digit_list = []\n    for i, e in enumerate(x):\n        digit_list.append(e)\n\
    \        if i % 2 == 0:\n            continue\n        digit_list = [int(digit)\
    \ for digit in digit_list if not digit.isdigit()]\n    return digit_list\n", " \
    \           unique_digits([1,2,4,6,3,7,9,1,3]) -> [1,3,6,7]\n            unique_digits([1,7,2,9,5])\
    \ -> [1,2]\n            unique_digits([1,4,6,3,5,7,8,9,0,1,2,5,6,7,8,9,0,1,2,5,6,7,8,9,0,1])\
    \ -> [1,2,5,6,7,8,9]\n            \"\"\"\n    \"\"\"\n    unique_digit_list =\
    \ []\n    for n in x:\n        digit_list = []\n        while n != 0:\n      \
    \      digit_list.append(n % 10)\n            n /= 10\n        if digit_list !=\
    \ []:\n            unique_digit_list = unique_digit_list + list(set(digit_list))\n\
    \    return unique_digit_list\n", "    Input : [7, 14, 2, 8, 4, 3, 6, 1, 9, 5,\
    \ 10, 11, 12, 13]\n    Output: [2, 7, 8, 4, 9, 1, 10, 6, 3, 12, 5, 13, 11]\n \
    \           \"\"\"\n\n    \n    \n    \"\"\"\n        Solution using DP\n    \
    \    Time complexity: O(n * n), where n is length of list\n        Space complexity:\
    \ O(n * n)\n    \"\"\"\n    def unique_digits_solution(x):\n        digit_dict\
    \ = {}\n        \n        for num in x:\n            digit_dict[num] = True\n\
    \            \n        res = []\n        \n        for i in range(len(x)):\n \
    \           if x[i] in digit_dict:\n                continue\n            \n \
    \           if x[i] % 2 == 0:\n                digit_dict[x[i]] = True\n     \
    \           res.append(x[i])\n        \n        sorted_res = list(sorted(res))\n\
    \        \n        return sorted_res\n\n    return unique_digits_solution(x)\n\
    \n", "    >>> unique_digits([5, 4, 2, 7, 2, 6, 3, 3])\n    [2, 5]\n    >>> unique_digits([1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5])\n    [1, 3, 5]\n    >>> unique_digits([3, 2, 2])\n\
    \    [3]\n    \"\"\"\n    \n    if len(x) == 0:\n        return []\n    \n   \
    \ digits_dict = dict()\n    \n    for item in x:\n        if item % 2 == 0:\n\
    \            digits_dict[item] = digits_dict[item] + 1 if item in digits_dict\
    \ else 1\n        else:\n            digits_dict[item] = digits_dict[item] + 1\
    \ if item in digits_dict else 1\n    \n    # remove key that has 0 values\n  \
    \  digits_dict = {k:v for k,v in digits_dict.items() if v > 0}\n    \n    # sort\
    \ all keys by the values\n    sorted_dict_keys = sorted(digits_dict.keys(), reverse=True)\n\
    \    \n    # extract keys and values of the sorted dictionary\n    unique_list\
    \ = []\n    for k in sorted_dict_keys:\n        if digits_dict[k] > 0:\n     \
    \       unique_list.append(k)\n            \n    return unique_list\n", "    \
    \        Given [2, 1, 6, 9, 6, 2, 2], the function should return [2, 6, 9].\n\
    \            \"\"\"\n    \n    digit_set = set()\n    \n    for d in x:\n    \
    \    while d % 2 != 0:\n            d /= 2\n        digit_set.add(d)\n    \n \
    \   return list(digit_set)\n", "            Sample Input:\n            [21, 19,\
    \ 11, 22, 31, 15, 30, 19, 24, 22, 25]\n            \n            Output:\n   \
    \         [11, 19, 23, 15, 22, 31, 19, 24, 25]\n            \"\"\"\n    \"\"\"\
    \n    \n    digit_set = {}\n\n    for i in x:\n        digit_set.setdefault(i,\
    \ set()).add(str(i))\n    \n    return sorted(list(digit_set.values()))\n", " \
    \           Input: x = [4, 2, 7, 8]\n            Output: [4, 2, 7, 8]\n      \
    \      \"\"\"\n    \"\"\"\n    \n    if len(x) == 0:\n        return []\n    \n\
    \    digits = {}\n    \n    for i in range(len(x)):\n        if x[i] in digits:\n\
    \            digits[x[i]] += 1\n        else:\n            digits[x[i]] = 1\n\
    \    \n    ret = []\n    \n    for v in digits:\n        if digits[v] == 0:\n\
    \            ret.append(v)\n    \n    ret.sort()\n    \n    return ret\n\n", " \
    \           Explanation\n            Input: [2,4,6,8,10,12,14,16,18,20,22,24]\n\
    \            Output: [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\n          \
    \  \n    \"\"\"\n    \n    from itertools import groupby\n    \n    odd_dig =\
    \ set([x for x in x if x % 2 == 0])\n    \n    odd_dig_list = list(odd_dig)\n\
    \    \n    sorted_odd_dig = sorted(odd_dig_list)\n    \n    unique_dig_list =\
    \ [x for x in sorted_odd_dig if x not in odd_dig_list]\n    \n    return unique_dig_list\n\
    \    \n    \n    \n\n</cell>\n<cell>\nx = [2,4,6,8,10,12,14,16,18,20,22,24]\n\
    unique_digits(x)\n</cell>\n<text>\n\uB450\uBC88\uC9F8 \uC2DC\uB3C4\n\uBB38\uC81C\
    \ : \uBC30\uC5F4 x \uB0B4\uC758 \uC22B\uC790 \uC911\uC5D0 3\uC758 \uBC30\uC5F4\
    \uC758 \uAC1C\uC218\uB97C \uB9AC\uD134\uD569\uB2C8\uB2E4.\n\n\uC785\uB825\uBC1B\
    \uC740 \uBB38\uC790\uC5F4\uC758 \uD569\uC758 \uD3C9\uADE0\uC744 \uAD6C\uD558\uAE30\
    \ \uC704\uD574 list comprehension\uC744 \uC0AC\uC6A9\uD569\uB2C8\uB2E4.\n\n\uBB38\
    \uC81C \uC608\uC2DC : x = [1,2,3,4,5]\n\n\uBB38\uC81C \uC608\uC2DC : x = [4,5,6,7,8,9,10]\n\
    \n\uC785\uB825\uBC1B\uC740 \uBC30\uC5F4\uC758 \uD569\uC758 \uD3C9\uADE0\uC744\
    \ \uAD6C\uD558\uAE30 \uC704\uD574 list comprehension\uC744 \uC0AC\uC6A9\uD569\uB2C8\
    \uB2E4.\n\n\uBB38\uC81C \uC608\uC2DC : x = [1,2,3,4,5]\n\n\uBB38\uC81C \uC608\uC2DC\
    \ : x = [4,5,6,7,8,9,10]\n\nx = [1,2,3,4,5]\n\n</text>\n<cell>\nx = [1,2,3,4,5]\n\
    </cell>\n<cell>\nx = [1,2,3,4,5]\n</cell>\n<cell>\nx = [1,2,3,4,5]\n</cell>\n\
    <cell>\nx = [1,2,3,4,5]\n</cell>\n<cell>", "            Input: [5, 7, 1, 7, 4,\
    \ 3]\n            Output: [5, 7, 4, 3]\n            \"\"\"\n    \"\"\"\n    \n\
    \    temp = []\n    for i in x:\n        temp = temp + [i]\n    temp = [x for\
    \ x in temp if x % 2 == 0]\n\n    temp2 = sorted(temp)\n\n    return temp2\n",
  "            Given [3, 30, 34, 7, 9, 2]\n            Returned [2, 34, 30, 9]\n \
    \           \n            \"\"\"\n            \n    Args:\n        x (List[int]):\
    \ List of integers to be sorted.\n        \n    Returns:\n        List[int]: A\
    \ sorted list of the unique elements.\n    \"\"\"\n    \n    digits = [int(str(x)[i])\
    \ for i in range(len(x))]\n    odd_digits = [d for d in digits if d % 2 == 1]\n\
    \    uniques = odd_digits[1::2]\n    sorted_uniques = sorted(uniques)\n    return\
    \ sorted_uniques\n</cell>\n<cell>\nprint(unique_digits([3, 30, 34, 7, 9, 2]))\n\
    print(unique_digits([233]))\nprint(unique_digits([]))\n</cell>\n<cell>", "   \
    \ >>> unique_digits([1])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    unique_digits\
    \ = [0] * len(x)\n    \n    # for each value in x we calculate how many times\
    \ this value \n    # appear in the list (counting start from 0) and we add this\
    \ \n    # value to the unique digits\n    for value in x: \n        unique_digits[value]\
    \ += 1\n\n    # we sort unique_digits by value with increasing order\n    return\
    \ sorted(unique_digits, key=lambda x: -x)\n", "    \n            [1, 1, 2, 3]\
    \ -> [1, 2, 3]\n            \"\"\"\n    \n    Time Complexity: O(n)\n    \"\"\"\
    \n    \n    digits = [int(\"\".join(map(str, x))) for x in x]  # convert to int\n\
    \    \n    unique_digits = []  # return value\n    \n    for digit in digits:\n\
    \        while digit:\n            if digit % 2 == 0:  # check\n             \
    \   unique_digits.append(digit)\n                break\n            else:\n  \
    \              digit = digit // 2\n                \n    sorted_unique_digits\
    \ = sorted(unique_digits)\n    return sorted_unique_digits\n\n\nprint(unique_digits([1,\
    \ 1, 2, 3]))\n\n", "            Explanation of test case:\n            Input:\
    \ [1, 3, 5]\n            Output: [3, 5]\n            \"\"\"\n            # using\
    \ itertools \n\n    import itertools\n    \n    return sorted([i for i in itertools.filterfalse(lambda\
    \ i: i % 2 == 0, x)])\n</code>\n<|/ a dscore=0 tags=python |>\n<| a |>\nThe above\
    \ code does only consider the digits after the zeros. So, the following code will\
    \ also consider the digits before the zeros.\n<code>", "            Input: [2,\
    \ 3, 1, 2, 4, 8]\n            Output: [2, 4]\n            \"\"\"\n    \"\"\"\n\
    \    \n    digits = [int(i) for i in str(x)]\n    return [i for i in x if int(i)\
    \ not in digits or int(i) % 2 == 0]\n", "    >>> unique_digits([1, 4, 7, 9])\n\
    \    [1, 4, 9]\n    \"\"\"\n    from collections import defaultdict\n    odd =\
    \ defaultdict(int)\n    even = defaultdict(int)\n    \n    for x in x:\n     \
    \   if x % 2 == 0:\n            even[x] += 1\n        else:\n            odd[x]\
    \ += 1\n            \n    odd_unique = [x for x in odd if odd[x] == 1]\n    even_unique\
    \ = [x for x in even if even[x] == 1]\n    \n    sorted_odd_unique = sorted(odd_unique)\n\
    \    sorted_even_unique = sorted(even_unique)\n    \n    return sorted_odd_unique\
    \ + sorted_even_unique\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
