language: py
name: HumanEval_145_order_by_points
results:
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 5, 3, 6, 4, 1]\n            order_by_points(nums)\n      \
    \      # result: [1, 3, 4, 6, 5, 1]\n            \"\"\"\n    Args:\n        nums\
    \ (List[int]): List of integers\n\n    Returns:\n        List[int]: List containing\
    \ the elements in nums sorted in ascending order.\n        Sorted list is ascending\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpunce12z6.py\", line 12\n    nums = [1, 5, 3, 6, 4, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [1, 5, 11, 3, 6, 3, 2]\n    Output: [1, 3, 11, 6, 5, 2, 3]\n        \
    \    Input: nums = [1, 6, 11, 3, 6, 3, 2]\n    Output: [1, 3, 6, 11, 6, 5, 2]\n\
    \    \"\"\"\n    # write your code here\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpaxuok0wq.py\", line 14\n    Input: nums = [1, 6, 11, 3,\
    \ 6, 3, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [123, 321, 123, 321]\n            order_by_points(nums) --> [321,\
    \ 123, 123, 321]\n            \"\"\"\n\n    Args:\n        nums: List[int]\n\n\
    \    Returns:\n        List[int]\n    \"\"\"\n    dic = {}\n    for i, num in\
    \ enumerate(nums):\n        if num in dic:\n            dic[num].append(i)\n \
    \       else:\n            dic[num] = [i]\n    result = []\n    for num in dic:\n\
    \        dic = sorted(dic[num], key=lambda i: -nums[i])\n        result.append(dic[0])\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwz_0yurn.py\", line 12\n    nums = [123, 321, 123, 321]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    >>>\
    \ order_by_points([4, 6, 2, 3])\n    [2, 4, 6, 3]\n            \"\"\"\n\n    Args:\n\
    \        nums (List): a list of integers\n\n    Returns:\n        List: a list\
    \ containing the integers sorted from smallest to largest\n\n    \"\"\"\n    largest\
    \ = 0\n    smallest = 9999\n    summed_nums = []\n\n    for num in nums:\n   \
    \     digit_sum = sum(num % 10)\n        largest = max(largest, num)\n       \
    \ smallest = min(smallest, num)\n        if num < smallest:\n            smallest\
    \ = num\n        if num > largest:\n            largest = num\n        summed_nums.append(digit_sum)\n\
    \n    smallest_summed_num = min(summed_nums)\n    largest = largest - smallest_summed_num\n\
    \n    if smallest != largest:\n        summed_nums.remove(smallest_summed_num)\n\
    \        summed_nums.append(largest)\n\n    return summed_nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7vlwf8ko.py\", line 12\n    >>> order_by_points([4, 6,\
    \ 2, 3])\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Given nums = [2, 7, 11, 15], the function should return [2, 11, 7, 15]\n\
    \            \"\"\"\n\n    Args:\n        nums (List[int]): A list of integers\n\
    \n    Returns:\n        List[int]: a list of integers reordered by their sum digit.\n\
    \n    Example 1:\n        Input: nums = [2, 7, 11, 15]\n        Output: [2, 11,\
    \ 7, 15]\n        Explanation: As there are two 7-digit numbers and one 11-digit\
    \ number,\n        we rearrange them by comparing their sum.\n\n    Example 2:\n\
    \        Input: nums = [1, 13, 11, 3, -1]\n        Output: [1, 3, 13, 11, -1]\n\
    \        Explanation: All numbers are rearranged by their digits.\n\n    Example\
    \ 3:\n        Input: nums = [0]\n        Output: [0]\n        Explanation: No\
    \ reordering is needed, return nums unchanged.\n    \"\"\"\n    nums.sort()\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbwgo1bzy.py\", line 12\n    Given nums = [2, 7, 11, 15],\
    \ the function should return [2, 11, 7, 15]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [9, 7, 3, 1]\n            order_by_points(nums)\n            #\
    \ => [1, 3, 7, 9]\n            \"\"\"\n            nums = [1, 2, 3, 1]\n     \
    \       order_by_points(nums)\n            # => [1, 2, 3, 1]\n\n    Args:\n  \
    \          nums(list): list of numbers to be sorted\n\n    Returns:\n        \
    \    list: sorted list of integers\n    \"\"\"\n    sums = [0 for _ in range(len(nums))]\n\
    \n    for x in nums:\n        sums[x%10]+=1\n\n    sorted_sums = sorted(sums,\
    \ reverse=True)\n    sorted_sums_index = [x for x in range(len(sums)) if sums[x]==1]\n\
    \n    for index, val in enumerate(sorted_sums_index):\n        nums[index] = nums[val]\n\
    \        del nums[val]\n\n    return nums\n\nnums = [9, 7, 3, 1]\nprint(order_by_points(nums))\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nThe algorithm you used has a runtime of `O(n\
    \ log n)`. Your implementation has a runtime of `O(n)`.\n<|/ c |>\n<| a tags=sorting,algorithm,python\
    \ |>\nHere's an O(n) algorithm that finds the largest sum of any pair of numbers\
    \ in the array. I'm sure there's an O(n) algorithm that finds the largest sum\
    \ of any number of numbers, but I'm not sure. At least O(n).\n<code>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6tn3nhn8.py\", line 12\n    nums = [9, 7, 3, 1]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        input : [9, 3, 6, 8, 1, 2]\n            output: [1, 8, 3, 9, 2, 6]\n\
    \            \"\"\"\n    Args:\n        nums (List[int]): A list of integers\n\
    \n    Returns:\n        List[int]: A list of integers whose sum of digits are\
    \ sorted in ascending order.\n    \"\"\"\n    sorted_nums = sorted(nums, key=lambda\
    \ num: sum((num // 10) % 10))\n\n    return sorted_nums\n\nprint(order_by_points([9,\
    \ 3, 6, 8, 1, 2]))\n</code>\n<|/ a |>\n<| c |>\nPlease check this https://stackoverflow.com/questions/64467580/python-list-sort-based-on-digit-sum-so-number-80-comes-first-71-second\n\
    <|/ c |>\n<| a |>\nThis would also work:\n<code>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpk9m8nz3y.py\", line 12\n    input : [9, 3, 6, 8, 1, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 8, 8, 3, 12, 2]\n            Output: [1, 2, 3, 8, 8,\
    \ 12]\n            \"\"\"\n    Time complexity: O(n^2)\n    Space complexity:\
    \ O(1)\n    \"\"\"\n    from collections import defaultdict\n    sorted_dict =\
    \ defaultdict(int)\n    for num in nums:\n        sorted_dict[num] += 1\n\n  \
    \  ordered_nums = []\n    for k, v in sorted_dict.items():\n        ordered_nums.append(k)\n\
    \        ordered_nums.append(v)\n\n    ordered_nums.sort()\n\n    return ordered_nums\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6znr_j8u.py\", line 12\n    Input: nums = [1, 8, 8, 3,\
    \ 12, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        For input nums = [10, 9, 2, 12]\n            Returned: sorted_nums =\
    \ [2, 10, 12, 9]\n            \"\"\"\n    \"\"\"\n    sum_points = []\n    for\
    \ i in nums:\n        sum_points.append(sum(list(map(int, str(i))))) # sum_points\
    \ = sum_points + list(map(int, str(i)))\n    sum_points.sort()\n    sorted_nums\
    \ = []\n    for index in range(0, len(sum_points)):\n        sorted_nums.append(sum_points[index])\n\
    \    return sorted_nums\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3e6z6z0j.py\", line 12\n    For input nums = [10, 9, 2,\
    \ 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [1, 3, 22],\n    The function should return [1, 3, 22].\n    Since the\
    \ sum of digits is 3 + 22 = 67, the three smallest numbers\n    in the list should\
    \ be [1, 3, 22].\n    \n    Follow up:\n    Can you write an efficient algorithm\
    \ for the following problem?\n    Given a string representing an IP address can\
    \ you find the shortest IP address \n    which can be formed by adding new IP\
    \ address one by one in the most efficient manner?\n    \"\"\"\n\n    ip_sum =\
    \ sum(map(int, nums))\n\n    # Sort the list according to the sum of digits.\n\
    \    ips.sort(key=lambda x: ip_sum - x)\n\n    return ips\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvqvh6vuf.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 42)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \    nums = [4, 0, 3, 8, 9, 1, 5]\n        res = order_by_points(nums)\n     \
    \   print(res)\n        res = sorted(nums, reverse=True)\n        print(res)\n\
    \        assert res == sorted(nums, reverse=True)\n        \"\"\"\n\n    \"\"\"\
    \n    Answer 1 ->\n    \"\"\"\n    sum_ = 0\n    i = 0\n    while i < len(nums)\
    \ - 1:\n        sum_ += nums[i]\n        i = i + 1\n    sum_ += nums[-1]\n   \
    \ print(sum_)\n    sum_ = int(sum_)\n    i = 0\n    sum_ = 0\n    while i < len(nums)\
    \ - 1:\n        sum_ += nums[i]\n        i = i + 1\n    print(sum_)\n    sum_\
    \ = int(sum_)\n\n    nums = sorted(nums)\n    return nums\n    # return sorted(nums,\
    \ reverse=True)\n    # return list(reversed(nums))\n\n\n\"\"\"\nAnswer 2\n\"\"\
    \"\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7awvygxq.py\", line 12\n    nums = [4, 0, 3, 8, 9, 1,\
    \ 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [9,1,10,15,3,7]\n            Output: [1, 3, 7, 9, 10, 15]\n  \
    \          \"\"\"\n\n    \n    Args:\n        nums: List[int]): List of numbers\n\
    \    Returns:\n        List[int]: Sorted list of ints\n    \"\"\"\n    \n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpygvgy_if.py\", line 12\n    Input: [9,1,10,15,3,7]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 2, 3, 7, 11, 13, 5]\n            order_by_points(nums)\n \
    \           print(nums)\n            # [5, 11, 13, 1, 2, 3, 7]\n    \"\"\"\n \
    \   # Your code here!\n    sum_dict = {}\n    for i, num in enumerate(nums):\n\
    \        digit_sum = 0\n        while num > 0:\n            digit_sum += num %\
    \ 10\n            num = int(num / 10)\n\n        if i in sum_dict:\n         \
    \   if digit_sum < sum_dict[i]:\n                sum_dict[i] = digit_sum\n   \
    \     else:\n            sum_dict[i] = digit_sum\n\n    return [i[0] for i in\
    \ sorted(enumerate(sum_dict.values()), key=lambda t: t[1])]\n\nprint(order_by_points(nums))\n\
    </cell>\n<cell>\n\"\"\"\nWrite a function which creates a list of all the possible\
    \ permutations of\na given string with 'x' between each letter and return a list\
    \ of those strings\n\n    For example,\n            Input: \"ab\"\n          \
    \  Output: [\"axb\", \"ayb\", \"azb\"]\n\"\"\"\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp33h4wf2a.py\", line 12\n    nums = [1, 2, 3, 7, 11, 13,\
    \ 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [1, 4, 3, 6, 8, 5]\n            Output: [1, 3, 4, 6, 5, 8]\n \
    \           \"\"\"\n    \"\"\"\n\n    # Your code here\n    dic = {}\n    i =\
    \ 0\n    n = len(nums)\n    sum = 0\n    for num in nums:\n        if dic.get(sum)\
    \ is None:\n            dic[sum] = []\n        dic[sum].append(num)\n        sum\
    \ += num\n    dic.values()[0]\n    for i in dic:\n        dic[i].sort(reverse=False)\n\
    \    return [num for l in dic.values() for num in l]\n\nassert order_by_points([1,\
    \ 4, 3, 6, 8, 5]) == [1, 3, 4, 6, 5, 8]\nassert order_by_points([10, 1, 5, 9,\
    \ 3, 6, 4, 2, 7, 8]) == [1, 5, 9, 3, 6, 4, 2, 7, 8]\nassert order_by_points([5,\
    \ 3, 9, 1, 6, 2, 10, 4, 7, 8, 0]) == [5, 9, 1, 6, 2, 10, 4, 7, 8, 0]\n\n</cell>\n\
    <text>\nGreat! Now that you know how to sort a list of numbers, let's refactor\
    \ our find_max_sum function to use this sorting function and find the highest\
    \ value. Make sure you check that your function passes all test cases using a\
    \ unit test.\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbs3rhl3h.py\", line 12\n    Input: [1, 4, 3, 6, 8, 5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [-10, -9, 2, -1, 10]\n            order_by_points(nums)\n    \
    \        # >>> [10, 2, 9, -1, -10, 10]\n\n            nums = [7, -7, 9, 3, -3]\n\
    \            order_by_points(nums)\n            # >>> [7, 9, -3, -3, 7, -7, 9]\n\
    \    \"\"\"\n    sums = []\n    for n in nums:\n        sums.append(sum(n))\n\
    \    nums.sort(key=lambda x: sums.index(x))\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6h4s9yfd.py\", line 12\n    nums = [-10, -9, 2, -1, 10]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [1, 3, 10, 4, 7, 6, 2] -> [10, 4, 7, 7, 6, 2, 1]\n            \"\"\"\n\
    \    \"\"\"\n    nums_copy = nums[:]\n    nums_copy.sort()\n    res = []\n   \
    \ for i in range(len(nums)):\n        res.append(nums_copy[i])\n    return res\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpl09plfl3.py\", line 12\n    [1, 3, 10, 4, 7, 6, 2] ->\
    \ [10, 4, 7, 7, 6, 2, 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 4, 3, 2]\n            Output: [1, 3, 2, 4]\n      \
    \      \"\"\"\n            Input: nums = [2, 1, 1]\n            Output: [2, 1,\
    \ 1]\n\n    Time: O(n log n), where n is the length of input list\n    \"\"\"\n\
    \    nums.sort(key=lambda x:sum(map(int, str(x))))\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptufjxi3y.py\", line 12\n    Input: nums = [1, 4, 3, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [4, 9, 6, 3, 8, 2, 10, 5, 7, 1, 12]\n            sorted(nums)\n\
    \            #  output: [1, 6, 9, 4, 5, 2, 7, 8, 3, 10, 12]\n    \"\"\"\n    nums\
    \ = sorted(nums, key=lambda x: sum([int(x[i]) for i in reversed(range(1, len(x)))]))\n\
    \    return nums\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpv6lomhkw.py\", line 12\n    nums = [4, 9, 6, 3, 8, 2,\
    \ 10, 5, 7, 1, 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [9,7,2,5,7,2,5,7,2]\n    Output: [7, 2, 5, 9, 7, 2, 7, 2, 2]\n      \
    \      \"\"\"\n    \n    \"\"\"\n    \u601D\u8DEF\uFF1A\n    \u8FD9\u91CC\u7684\
    \u9898\u76EE\u4E2D\u6700\u7EC8\u7B54\u6848\u662F\u6309\u7167\u6570\u5B57\u51FA\
    \u73B0\u7684\u6B21\u5E8F\u6392\u5E8F\u7684\uFF0C\u6240\u4EE5\u6211\u4EEC\u53EF\
    \u4EE5\u5148\u5BF9\u8F93\u5165\u6570\u5B57\u8FDB\u884C\u6392\u5E8F\uFF0C\u7136\
    \u540E\u4ECE\u8BE5\u6392\u5E8F\u540E\u9009\u53D6\u51FA\u6570\u5B57\u51FA\u73B0\
    \u7684\u6B21\u5E8F\uFF0C\u800C\u6392\u5E8F\u4E4B\u540E\u7684\u7ED3\u679C\u5C31\
    \u662F\u6211\u4EEC\u8981\u7B54\u6848\u7684\u3002\n\n    \u65F6\u95F4\u590D\u6742\
    \u5EA6: O(nlogn)\uFF0C\u6211\u4EEC\u7684\u601D\u8DEF\u662F\u6309\u7167\u6570\u5B57\
    \u51FA\u73B0\u7684\u6B21\u5E8F\u6392\u5E8F\u7684\uFF0C\u6240\u4EE5\u65F6\u95F4\
    \u590D\u6742\u5EA6\u662FO(nlogn)\u3002\n    \u7A7A\u95F4\u590D\u6742\u5EA6: O(n)\u3002\
    \u56E0\u4E3A\u6211\u4EEC\u53EA\u9700\u8981\u5728\u6392\u5E8F\u8FC7\u7A0B\u4E2D\
    \u9009\u53D6\u51FA\u6BCF\u4E2A\u6570\u5B57\u51FA\u73B0\u7684\u6B21\u5E8F\uFF0C\
    \u6240\u4EE5\u7A7A\u95F4\u590D\u6742\u5EA6\u662FO(n)\u3002\n    \"\"\"\n    nums.sort()\n\
    \    sum = 0\n    ans = []\n    \n    for i in range(len(nums)):\n        sum\
    \ = sum + nums[i]\n        ans.append(nums[i])\n        if sum == nums[0]:\n \
    \           ans.pop(0)\n            sum = sum - nums[0]\n    return ans\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxn6hqxsi.py\", line 14\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [9,8,7,6,5]\n            Output: [5,6,7,8,9]\n            \"\"\
    \"\n    \n    Input:\n            nums: List[int]\n\n    Output:\n           \
    \ List[int]: sorted version of given list\n    \"\"\"\n\n    sum = 0\n    for\
    \ num in nums:\n        sum += num\n    \n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2tmqit0j.py\", line 12\n    Input: [9,8,7,6,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums\
    \ = [6, 4, 3, 9, 6, 5, 7, 2, -9, 4, 6, 2, -3]\n    \"\"\"\n    digit_sum = 0\n\
    \    sorted_nums = []\n    for i in range(len(nums)):\n        digit_sum += nums[i]\n\
    \        sorted_nums.append(nums[i])\n        if digit_sum > 9:\n            digit_sum\
    \ -= 10\n            sorted_nums.pop(0)\n\n    return sorted_nums\n\nprint(order_by_points(nums))\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpshzeej4u.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 37)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 3, 6, 6, 6, 6, 8]\n            Output: [1, 8, 6, 3,\
    \ 6, 6, 6]\n            Explanation: As 6+6=12 and 6+6=12, they are in the same\
    \ place in the original list.\n            So order them based on their position.\n\
    \            \"\"\"\n            nums_ = [1, 3, 6, 6, 6, 6, 8]\n    \"\"\"\n \
    \   pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpekqvgw3b.py\", line 12\n    Input: nums = [1, 3, 6, 6,\
    \ 6, 6, 8]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [9, 1, 7, 4, 6, 3, 8, 5, 2, 0]\n            order_by_points(nums)\n\
    \            # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n            \"\"\"\n    Args:\n\
    \        nums (List): list of integers\n\n    Returns:\n        List: ordered\
    \ list of integers\n    \"\"\"\n    len_nums = len(nums)\n    len_strs = 10\n\
    \    sorted_nums = [0] * len_nums\n    sum_nums = 0\n    for i in range(len_nums):\n\
    \        if nums[i] > 0:\n            sum_nums += nums[i]\n            sorted_nums[i]\
    \ = sum_nums\n            if sum_nums > len_strs:\n                sorted_nums[i]\
    \ = len_strs\n                sum_nums = len_strs\n        else:\n           \
    \ sum_nums -= nums[i]\n            sorted_nums[i] = sum_nums\n            if sum_nums\
    \ < 0:\n                sorted_nums[i] = 0\n                sum_nums = 0\n\n \
    \   return sorted_nums\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0sd_a7bh.py\", line 12\n    nums = [9, 1, 7, 4, 6, 3,\
    \ 8, 5, 2, 0]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        input: [1, 2, 3, 8, 7] --> output: [1, 3, 7, 8, 2]\n            \"\"\"\
    \n    \"\"\"\n    if not nums:\n        return nums\n    sum = 0\n    for i in\
    \ range(0, len(nums)):\n        sum += nums[i]\n        nums[i] = nums[i]//10\n\
    \    nums[sum//10] = sum % 10\n    return nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp10ek4pz7.py\", line 12\n    input: [1, 2, 3, 8, 7] -->\
    \ output: [1, 3, 7, 8, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [3, 6, 2, 7, 8, 1, 0] => [1, 0, 2, 3, 6, 8, 7]\n            [1, 4, 9,\
    \ 2, 3] =>  [1, 2, 3, 9, 4]\n            \"\"\"\n\n    :param nums: List[int]\
    \ : a given list of integers\n    :returns: List[int] : the sorted list of integers\n\
    \    \"\"\"\n    res = []\n    for i in range(len(nums)):\n        res.append(0)\n\
    \    res = [x for x in res]\n    \n    nums_sum = 0\n    for i in range(len(nums)):\n\
    \        \n        nums_sum += nums[i]\n        res.insert(i, nums_sum)\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9uimd8x5.py\", line 12\n    [3, 6, 2, 7, 8, 1, 0] => [1,\
    \ 0, 2, 3, 6, 8, 7]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 6, 23, 7, 22, 11, 40]\n            order_by_points(nums)\n\
    \            # => nums = [6, 11, 7, 12, 40]\n            \n            nums =\
    \ [12, 6, 13, 7, 22, 11]\n            order_by_points(nums)\n            # =>\
    \ nums = [6, 11, 7, 13, 22, 40]\n            \"\"\"\n    \"\"\"\n    pass\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7mnkck5t.py\", line 12\n    nums = [12, 6, 23, 7, 22,\
    \ 11, 40]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [9, 7, 5, 3, 2]\n            Output: [7, 5, 9, 3, 2]\n       \
    \     \"\"\"\n    \"\"\"\n    ans = [0] * len(nums)\n    max_sum_i = 0\n    max_sum\
    \ = -1\n    for i in range(len(nums)):\n        sum_i = nums[i]\n        if max_sum\
    \ < sum_i:\n            max_sum = sum_i\n            max_sum_i = i\n\n       \
    \ ans[i] = nums[max_sum_i]\n\n    return ans\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpch5y60kl.py\", line 12\n    Input: [9, 7, 5, 3, 2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            [8, 2, 23, 10, 9, 4, 1, 56, 73, 12, 65, 23, 76]\n\
    \            Output:\n            [1, 4, 8, 2, 6, 10, 9, 7, 12, 23, 23, 65, 73,\
    \ 76]\n            \"\"\"\n\n    Args:\n        nums: A list of integers.\n\n\
    \    Returns:\n        Sorted list of integers in ascending order.\n\n    Examples:\n\
    \        order_by_points([8, 2, 23, 10, 9, 4, 1, 56, 73, 12, 65, 23, 76])\n  \
    \      Output: [1, 4, 8, 2, 6, 10, 9, 7, 12, 23, 23, 65, 73, 76]\n    \"\"\"\n\
    \    # Your code here\n    sum = 0\n    result = []\n    for i in nums:\n    \
    \    sum += i\n        result.append(i)\n    result.append(sum)\n    result.sort()\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy5r3qyw3.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input list: [9, 7, 8, 4, 10, 5, 6, 2]\n\n            Output list: [2,\
    \ 4, 6, 8, 10, 9, 5, 7]\n            \"\"\"\n            Example 2:\n\n      \
    \      Input list: [9, 7, 8, 4, 9, 10, 11, 3, 2]\n\n            Output list: [9,\
    \ 7, 8, 4, 9, 10, 2, 3, 11]\n    \"\"\"\n    return sorted(nums, key=lambda n:\
    \ (sum(int(d) for d in str(n)), n)) \n\nassert order_by_points([-3, -2, -1, 0,\
    \ 1, 2]) == [-3, -1, -2, 0, 1, 2]\nassert order_by_points([3, 6, 9, 1, 5]) ==\
    \ [3, 6, 9, 1, 5]\nassert order_by_points([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0,\
    \ 0, 0, 1, 1, 2, 3, 5, 6, 9, 7]\nassert order_by_points([3, 6, 9, 1, 5, 1]) ==\
    \ [3, 6, 9, 1, 5, 1]\nassert order_by_points([3, 6, 9, 1, 5, 2]) == [3, 6, 9,\
    \ 1, 5, 2]\nassert order_by_points([3, 6, 9, 1, 5, 6]) == [3, 6, 9, 1, 5, 6]\n\
    assert order_by_points([3, 6, 9, 1, 5, 9]) == [3, 6, 9, 1, 5, 9]\nassert order_by_points([3,\
    \ 6, 9, 1, 5, 0]) == [3, 6, 9, 1, 5, 0]\nassert order_by_points([3, 6, 9, 1, 5,\
    \ 3]) == [3, 6, 9, 1, 5, 3]\nassert order_by_points([3, 6, 9, 1, 5, 4]) == [3,\
    \ 6, 9, 1, 5, 4]\nassert order_by_points([3, 6, 9, 1, 5, 7]) == [3, 6, 9, 1, 5,\
    \ 7]\nassert order_by_points([3, 6, 9, 1, 5, 8]) == [3, 6, 9, 1, 5, 8]\nassert\
    \ order_by_points([3, 6, 9, 1, 5, 10]) == [3, 6, 9, 1, 5, 10]\nassert order_by_points([3,\
    \ 6, 9, 1, 5, 11]) == [3, 6, 9, 1, 5, 11]\nassert order_by_points([3, 6, 9, 1,\
    \ 5, 12]) == [3, 6, 9, 1, 5, 12]\nassert order_by_points([3, 6, 9, 1, 5, 15])\
    \ == [3, 6, 9, 1, 5, 15]\nassert order_by_points([3, 6, 9, 1, 5, 16]) == [3, 6,\
    \ 9, 1, 5, 16]\nassert order_by_points([3, 6, 9, 1, 5, 17]) == [3, 6, 9, 1, 5,\
    \ 17]\nassert order_by_points([3, 6, 9, 1, 5, 18]) == [3, 6, 9, 1, 5, 18]\nassert\
    \ order_by_points([3, 6, 9, 1, 5, 19]) == [3, 6, 9, 1, 5, 19]\n\nassert order_by_points([3,\
    \ 6, 9, 1, 5, 16, 17]) == [3, 6, 9, 1, 5, \ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppmzuaqki.py\", line 12\n    Input list: [9, 7, 8, 4, 10,\
    \ 5, 6, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [15, 34, 25, 97, 34, 67, 93, 87]\n            Output: [25, 34,\
    \ 34, 93, 97, 67, 87, 15]\n            \"\"\"\n    \"\"\"\n    my_sum = 0\n  \
    \  for num in nums:\n        my_sum += num\n    my_sum = sorted(my_sum)\n    return\
    \ nums[my_sum.index(max(my_sum))]\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0k4c0f1m.py\", line 12\n    Input: [15, 34, 25, 97, 34,\
    \ 67, 93, 87]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \        >>nums = [5, 6, 7, 9, 10, 1, 3, 7, 10]\n    Output:\n        >>nums =\
    \ [10, 1, 3, 7, 10, 6, 7, 9, 5]\n    \"\"\"\n    answers = []\n    for i in range(len(nums)):\n\
    \        if sum (nums[ : i + 1]) < sum (nums[ : i + 1]):\n            answers.append(nums[i])\n\
    \        else:\n            answers.append(nums[i + 1])\n    return answers\n\n\
    nums = [5, 6, 7, 9, 10, 1, 3, 7, 10]\norder_by_points(nums)\n</cell>\n<text>\n\
    Problem 2: Find the Kth Largest Element in a List\n\n</text>\n<text>\nProblem\
    \ 2.1: Write a function that takes in a list and returns a list containing its\
    \ Kth largest element.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_a3323h_.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 48)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input : [7, 9, 11, 13]\n            Return :  [11, 13, 9, 7]\n      \
    \      \"\"\"\n    More examples:\n            Input: [12, 99, 9, 11]\n      \
    \      Return: [11, 9, 9, 12]\n    \"\"\"\n    return sorted(nums)\n         \
    \   \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjuh8ukhs.py\", line 12\n    Input : [7, 9, 11, 13]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 11, 13, 8, 4, 9, 15, 6]\n            Output: [4, 8, 10, 9,\
    \ 11, 13, 15, 6]\n            Explanation: In order to obtain more uniform solution\n\
    \            we might consider to order items with indices 4, 8, 10\n        \
    \    since their sum is 16 and we already have them in the list.\n           \
    \ \"\"\"\n\n    Args:\n            nums (List[int]): List of integers\n\n    Returns:\n\
    \            List[int]: sorted version of given list\n    \"\"\"\n    nums = sorted(nums)\n\
    \n    sums = list(map(sum, nums))\n    indices.sort()\n\n    for i in range(len(sums)):\n\
    \        nums[indices[i]] = nums[indices[i]] * sums[indices[i]]\n\n    return\
    \ nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpg5y2527f.py\", line 12\n    Input: [10, 11, 13, 8, 4,\
    \ 9, 15, 6]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input : nums = [5, 3, 1, 2, 8, 3]\n\n            Output : [3, 1, 2, 8,\
    \ 5, 3]\n            \"\"\"\n    \"\"\"\n\n    sums = []\n    for num in nums:\n\
    \        sums.append(sum(num))\n\n    sums.sort()\n    final = [num for i, num\
    \ in enumerate(nums) if sums[i] == sums[i - 1]]\n    return final\n\nprint(order_by_points(nums))\n\
    </code>\nOutput:\n<code>\n[3, 1, 2, 8, 5, 3]\n</code>\n<|/ a tags=python dscore=0\
    \ |>\n<| a dscore=0 |>\nTry using this-\n<code>\nnums = [4, 7, 7, 4, 7]\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6zcdootu.py\", line 12\n    Input : nums = [5, 3, 1, 2,\
    \ 8, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [4, 6, 2, 3, 1, 0]\n            res = order_by_points(nums)\n\
    \            print(res)\n            # expected output: [0, 4, 2, 3, 6, 1]\n \
    \           \"\"\"\n    Args:\n        nums (List[int]): the list of integers\
    \ to sort.\n\n    Returns:\n        List[int]: the sorted list.\n    \"\"\"\n\
    \    res = sorted(nums)\n    s = 0\n    res2 = []\n    for i in res:\n       \
    \ s = s + int(i)\n        res2.append(i)\n    res2.sort()\n    for i, j in zip(res,\
    \ res2):\n        if i != j:\n            res2.remove(j)\n    res2 = res2 + res\n\
    \    return res2\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsvb5urd1.py\", line 12\n    nums = [4, 6, 2, 3, 1, 0]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        order_by_points([12, 2, -4, 8, -3, -6, 12]) == [-3, -6, 12, 8, 2, 4,\
    \ 12]\n            \"\"\"\n\n    :type nums: List[int]\n    :rtype: List[int]\n\
    \    \"\"\"\n    result = []\n    sum_ = 0\n\n    for i in nums:\n        sum_\
    \ += i\n\n        result.append(sum_)\n\n    sum_ = 0\n\n    for i in range(len(nums)\
    \ - 1, -1, -1):\n        sum_ += nums[i]\n\n        result.append(sum_)\n\n  \
    \  return result\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmplv0qoi68.py\", line 12\n    order_by_points([12, 2, -4,\
    \ 8, -3, -6, 12]) == [-3, -6, 12, 8, 2, 4, 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [10, 30, 20, 12]\n            nums_sorted = [10, 30, 12, 20]\n\
    \            sort_nums(nums)\n            nums_sorted == nums_sorted.sort()\n\
    \            print(nums)\n            # => [10, 30, 20, 12]\n            \"\"\"\
    \n            Args:\n            nums: List[int]\n            Returns:\n     \
    \       int: the sum of digits in each number.\n            List[int]: the original\
    \ list.\n    \"\"\"\n    nums = nums.copy()\n    sums = []\n    for i in nums:\n\
    \        sums.append(sum(i))\n    nums = sorted(nums, key = lambda x : sum(x),\
    \ reverse = True)\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw8jsfzaj.py\", line 12\n    nums = [10, 30, 20, 12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [1, 7, 7, 8, 11, 3, 2]\n            Output: [1, 2, 3, 7, 7, 8,\
    \ 11]\n            \"\"\"\n    \"\"\"\n    # your code here\n    \n    nums.sort()\n\
    \    \n    temp = nums[0]\n    sums = [0]*len(nums)\n    \n    for index, num\
    \ in enumerate(nums):\n        sums[index] = num % 10\n    \n    sorted_sums =\
    \ sorted(sums)\n    \n    result = [int(index) for index in sorted_sums]\n   \
    \ \n    return result\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu93k1xc0.py\", line 12\n    Input: [1, 7, 7, 8, 11, 3,\
    \ 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Given nums = [2, 7, 11, 15], return [7, 11, 15, 2]\n            Given\
    \ nums = [7, 7, 7, 7], return [7, 7, 7, 7]\n            Given nums = [2, 2, 2],\
    \ return [2, 2]\n            \"\"\"\n            Hint: Can you sort by two keys?\n\
    \    \"\"\"\n    nums = sorted(nums)\n    sums = []\n    for num in nums:\n  \
    \      sums.append(sum(nums))\n    return nums[sums.index(max(sums))]\n\nassert\
    \ order_by_points([2, 7, 11, 15]) == [7, 11, 15, 2]\nassert order_by_points([7,\
    \ 7, 7, 7]) == [7, 7, 7, 7]\nassert order_by_points([2, 2, 2]) == [2, 2]\nassert\
    \ order_by_points([1, 2, 3, 4, 5]) == [1, 5, 3, 4, 2]\nassert order_by_points([])\
    \ == []\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp70prr_ai.py\", line 12\n    Given nums = [2, 7, 11, 15],\
    \ return [7, 11, 15, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [20, 15, 10, 25]\n            order_by_points(nums)\n        \
    \    # output: [0, 5, 2, 1]\n            \"\"\"\n\n    Args:\n        nums: List[int]\n\
    \n    Returns:\n        List[int]\n    \"\"\"\n    sums = [0 for _ in range(10)]\n\
    \    for n in nums:\n        sums[n % 10] += 1\n    return [i for i, v in enumerate(sums)\
    \ if v == max(sums)]\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpuryapmap.py\", line 12\n    nums = [20, 15, 10, 25]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [121, 113, 21],\n    You should return [1, 1, 2], which means 121 + 113\
    \ + 21 is 3.\n    Since 3 is greater than 1 and 3 is greater than 2, return 1.\n\
    \    Since 1 + 2 is greater than 1 and 1 + 2 is greater than 2, return 2.\n  \
    \          \"\"\"\n\n    Args:\n            nums (list): a list of integers\n\n\
    \    Returns:\n            list: the given list sorted in ascending order\n  \
    \  \"\"\"\n    return sorted(nums, key=sum)\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcp7d61ki.py\", line 12\n    Given nums = [121, 113, 21],\n\
    \          ^^^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        order_by_points([2, 3, 6, 10, 11])\n            # Output: [2, 3, 6, 10,\
    \ 11]\n            # \"\"\"\n\n    Args:\n            nums (List[int]): The given\
    \ list of integers.\n\n    Returns:\n            List[int]: The sorted list of\
    \ integers.\n    \"\"\"\n    sorted_list = sorted(nums)\n    sums = [num for num\
    \ in nums]\n\n    sum_dig = sums[:len(nums) - 1]\n    sum_dig = sum(sum_dig)\n\
    \n    for i in range(len(nums) - 1, -1, -1):\n        cur_sum = sum_dig\n    \
    \    cur_sum += nums[i]\n\n        while sums.index(cur_sum) != i:\n         \
    \   cur_sum -= nums[sums.index(cur_sum)]\n\n        sums[i] = cur_sum\n\n    return\
    \ sorted_list\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4tibycrm.py\", line 12\n    order_by_points([2, 3, 6,\
    \ 10, 11])\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \    numbers: [1, 3, 9, 5, 8, 4, 2]\n    Output:\n    [1, 2, 3, 4, 5, 8, 9]\n\
    \    \"\"\"\n    nums.sort()\n    for i in range(len(nums)):\n        nums[i]\
    \ = nums[i] - sum(int(n) for n in str(nums[i]))\n\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpljsyvd9f.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 34)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [10, 11, 7, 3, 2]\n    We should return [2, 3, 7, 10, 11]\n    \"\"\"\
    \n    res=[]\n    s=0\n    for i in nums:\n        s=s+i\n        res.append(i)\n\
    \        res[-1]=s\n    return res\n\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4cxpqqb8.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [123, 321, 14],\n    Because of the rule above, return [14, 123, 321]\n\
    \    Notice: abs(0 - 4) is 0. Therefore, you may NOT use sorted() to solve this\
    \ problem.\n    \n    Definition for an array:\n            int arr[], return\
    \ type is int[]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiaham4bw.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 254)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            [-514, -339, -99, -88, -9, -9, 99, -99]\n       \
    \     Output:\n            [9,  99, 9,  -9, -99, -99, -339, -514]\n          \
    \  \"\"\"\n    \n    \"\"\"\n    Time complexity: O(n^2)\n    Space complexity:\
    \ O(n)\n    \"\"\"\n    # code here\n    \n    # return sorted(nums, key=lambda\
    \ k: sum([int(d) for d in str(k)]))\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmplqgsbe_z.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [7, 1, 5, 3, 2]\n            Output: [1, 2, 3, 7, 5]\n       \
    \     \"\"\"\n\n    >>> order_by_points(nums)\n    [1, 2, 3, 7, 5]\n\n    \"\"\
    \"\n    nums.sort(reverse=True)\n\n    sums = []\n    temp_sum = 0\n\n    for\
    \ i in range(len(nums)):\n        if nums[i] != 0:\n            temp_sum += nums[i]\n\
    \        else:\n            temp_sum -= 1\n        sums.append(temp_sum)\n\n \
    \   sums.sort(reverse=True)\n    res = []\n    prev = 0\n\n    for x in range(len(sums)):\n\
    \        if sums[x] != 0:\n            res.append(nums[sums.index(prev)+x])\n\
    \            prev = sums[x]\n\n    return res\n\nnums = [7, 1, 5, 3, 2]\nprint(order_by_points(nums))\n\
    </code>\n<|/ a tags=sorting,list,python dscore=0 |>\n<| a |>\nUse lambda and sorted()\
    \ to sort the list. \n<code>\nl = [7, 1, 5, 3, 2]\n\nl2 = sorted(l, key=lambda\
    \ x: (x // 10) + (x % 10) )\n\nprint l2\n</code>\nOutput\n<code>\n[1, 2, 3, 7,\
    \ 5]\n</code>\n<|/ a tags=sorting,list,python dscore=0 |>\n<| c |>\nThank you\
    \ for the help. I appreciate it a lot.\n<|/ c |>\n<| a |>\nYou could use the key\
    \ argument:\n<code>\n>>> sorted(nums, key = lambda n : int(str(n)[::-1]), reverse\
    \ = True)\n[1, 2, 3, 7, 5]\n</code>\n<|/ a dscore=0 tags=sorting,list,python |>\n\
    <| a |>\nI got an idea on how to solve this using lambda.\n<code>\nl = [7, 1,\
    \ 5, 3, 2]\n\nl2 = sorted(l, key = lambda x: (x//10) + (x%10), reverse = True)\n\
    </code>\nThis gives me the result that I want.\n<|/ a dscore=0 tags=sorting,list,python\
    \ |>\n<| a dscore=0 tags=sorting,list,python |>\nTry this. I didn't use lambdas.\
    \ \n<code>\nlist_=[7, 1, 5, 3, 2]\n\nfor i in range(len(list_)):\n    sum=list_[i]%10\n\
    \    list_[i]=list_[i]//10\n    list_[i]+=sum\n\nlist_.sort(reverse=True)\nprint(list_)\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\nOne liner with lambda function:\n<code>\n\
    sorted(nums, key=lambda x: ((x)//10)+(x%10))\n</code>\n<|/ a tags=sorting,list,python\
    \ |>\n<| c |>\nWhile this code may solve the question, [including an explanation](//meta.stackexchange.com/q/114762)\
    \ of how and \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4q8sizqr.py\", line 12\n    Input: [7, 1, 5, 3, 2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [5, 3, 6, 2, 8]\n            Output: [5, 6, 8, 2, 3]\n       \
    \     \"\"\"\n\n    >>> order_by_points([])\n    []\n    >>> order_by_points([5,\
    \ 3, 6, 2, 8])\n    [5, 6, 8, 2, 3]\n    \"\"\"\n    # Complete this function\n\
    \    # ...\n    return sorted(nums)\n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp79007zhx.py\", line 12\n    Input: [5, 3, 6, 2, 8]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [8, 6, 10, 2, 7, 5, 3], the output should be\n            [6, 10, 8,\
    \ 2, 7, 5, 3]\n    Explanation: 8 + 6 + 10 = 24, which is smaller than 8 + 6 +\
    \ 9 + 10 = 27,\n    so nums[0] is placed before nums[1] and nums[3] is placed\
    \ before nums[4].\n    The list needs to be sorted from small to large.\n    \
    \        \"\"\"\n    Args:\n            nums: List[int]\n\n    Returns:\n    \
    \        List[int]: sorted nums\n    \"\"\"\n    nums = sorted(nums, reverse=True,\
    \ key=lambda x: int(x[0]))\n    nums.sort(reverse=True)\n    return nums\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpaqfqso1s.py\", line 12\n    Input: nums = [8, 6, 10, 2,\
    \ 7, 5, 3], the output should be\n                                           \
    \   ^^^^^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums\
    \ = [6, 2, 8, 10, 1, 3]\n    sort_nums(nums)\n    print(nums)\n    # [2, 6, 1,\
    \ 3, 8, 10]\n            \"\"\"\n\n    Args:\n        nums (List[int]): A list\
    \ of integers that need to be sorted.\n\n    Returns:\n        List[int]: A list\
    \ of integers sorted in ascending order according to\n        the sum of their\
    \ digits.\n    \"\"\"\n    sum_of_nums = 0\n    for i in nums:\n        sum_of_nums\
    \ += i\n\n    return sorted(nums, key=lambda i: sum_of_nums + i)\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbvuprlt7.py\", line 16\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [1, 2, 0, 3]\n            Output: [2, 0, 3, 1]\n            \"\
    \"\"\n\n            Input: [10, 1, 12, 5, 6]\n            Output: [1, 6, 10, 12,\
    \ 5]\n\n    \"\"\"\n    nums = sorted(nums, reverse=True)\n    nums = sorted(nums,\
    \ key=nums.index)\n    return nums\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3ahjox34.py\", line 12\n    Input: [1, 2, 0, 3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [8, 3, 6, 4, 5, 7]\n            Solution.order_by_points(nums)\n\
    \            # returns: [4, 6, 3, 8, 5, 7]\n            \"\"\"\n    Time complexity:\
    \ O(n).\n    Space complexity: O(1).\n    \"\"\"\n    def helper(nums, index,\
    \ sum):\n        if index == len(nums):\n            return [sum]\n        sum\
    \ = sum + nums[index]\n        new_list = helper(nums, index+1, sum)\n       \
    \ if sum > max(nums):\n            return [sum] + new_list\n        else:\n  \
    \          return new_list + [sum]\n\n    return helper(nums, 0, sum(nums))\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprs3mmlls.py\", line 12\n    nums = [8, 3, 6, 4, 5, 7]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n                    nums = [9, 7, 2, 5, 8, 0, 4, 1, 3, 6, 9,\
    \ 3]\n\n            Output:\n                    order = [4, 2, 9, 6, 7, 8, 0,\
    \ 1, 3, 5, 9, 3]\n\n            \"\"\"\n\n    Time: O(nlogn)\n    \"\"\"\n   \
    \ # write your code here\n    sum_digit = nums[0]\n    count_dict = dict()\n \
    \   for item in nums:\n        count_dict[str(item)] = count_dict.get(str(item),0)\
    \ + 1\n    if count_dict[sum_digit] >1:\n        for key,value in count_dict.items():\n\
    \            if value == 1 and key != sum_digit:\n                sum_digit =\
    \ key\n                break\n    order = [num for num in nums if str(num)==str(num)][::-1]\n\
    \    order.insert(0,sum_digit)\n    return order\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppq8n661d.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \    nums = [2, 7, 1, 8, 1, 4, 3]\n    Output: [1, 4, 8, 2, 7, 3, 1]\n\n    Explanation:\n\
    \    For example, the 1st number is 2 + 7 + 1 + 8 + 1 + 4 + 3 = 19; \n    1st\
    \ and 2nd items are similar (19 % 10 == 1), so they will be ordered by their index\
    \ (first item: nums[0] = 1, second item: nums[1] = 1); \n    3rd and 4th numbers\
    \ are similar (19 % 10 == 1), so they will be ordered by their index (third item:\
    \ nums[2] = 4, fourth item: nums[3] = 4);\n    All other numbers (other digits)\
    \ are different\n    (19 % 10 != 1), so they will be ordered by their sum (i.e.\
    \ 19 % 10 + nums[0] = 1 + 4 = 5).\n\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzq6siwhw.py\", line 17\n    For example, the 1st number\
    \ is 2 + 7 + 1 + 8 + 1 + 4 + 3 = 19; \n                     ^\nSyntaxError: invalid\
    \ decimal literal\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [5, 7, 10, 3], return [3, 7, 5, 10].\n    \n    Follow up:\n    Could\
    \ you do it in one-pass using only O(1) extra memory?\n    \"\"\"\n    sum_dict\
    \ = {}\n    for x in nums:\n        sum_dict[x] = sum_dict.get(x, 0) + x\n   \
    \ sums = sorted(sum_dict.items(), key=lambda t: t[1])\n    return [t[0] for t\
    \ in sums]\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpab2qws9u.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 34)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Example\
    \ 1:\n    Input: nums = [9,7,7,8,8,13]\n    Output: [8,9,13,7,7,7]\n    Explanation:\
    \ [8,13,9,7,7,7] -> [13=0,9=1]\n    \"\"\"\n    nums.sort()\n    nums.sort(key\
    \ = lambda x: sum(map(int, str(x))))\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9c_8_gvg.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [10, 4, 7, 6, 10, 12] -> [4, 6, 7, 10, 12, 10]\n            \"\"\"\n\n\
    \    Args:\n        nums: List[int]\n\n    Returns: List[int]\n    \"\"\"\n  \
    \  # Your code here\n    return sorted(nums, key = lambda n: sum(map(int, str(n))))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpusy5vunp.py\", line 12\n    [10, 4, 7, 6, 10, 12] -> [4,\
    \ 6, 7, 10, 12, 10]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [2, 7, 8, 1, 3, 5]\n            Output: [1, 3, 5, 8, 2,\
    \ 7]\n\n        Note:\n        You may assume all input list have size greater\
    \ than 1\n        \"\"\"\n    if len(nums) == 0:\n        return []\n    sums\
    \ = []\n    for num in nums:\n        digits = [int(digit) for digit in str(num)]\n\
    \        sum = sum(digits)\n        sums.append(sum)\n    sorted_index = list(reversed(sorted(range(len(sums)),\
    \ key=lambda i: sums[i])))\n    return [nums[i] for i in sorted_index]\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgz50f0pl.py\", line 12\n    Input: nums = [2, 7, 8, 1,\
    \ 3, 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ [1, 12, 11, 10, 12]\n    Output: [1, 10, 12, 12, 11]\n            \"\"\"\n \
    \   Use bubble_sort algorithm to sort it.\n\n    Time complexity: O(n), where\
    \ n is size of list.\n\n    Space complexity: O(n), where n is size of list.\n\
    \    \"\"\"\n    def sum_of_digits(num: int) -> int:\n        sum = 0\n      \
    \  while num > 0:\n            sum += num % 10\n            num = int(num / 10)\n\
    \        return sum\n\n    sum_of_digits_nums = [sum_of_digits(num) for num in\
    \ nums]\n    sorted_nums = sorted(sum_of_digits_nums)\n    return sorted_nums\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3zja6s6p.py\", line 14\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            nums = [1, 100, 7, 5, 10]\n\n            Output:\n\
    \            ordered = [1, 5, 7, 100, 10]\n            \"\"\"\n    \"\"\"\n  \
    \  my_dict = {}\n    for item in nums:\n        digit = sum(map(int, str(item)))\n\
    \        my_dict.setdefault(digit, []).append(item)\n    ordered = [my_dict.get(sum(map(int,\
    \ str(item))), []) for item in nums]\n    ordered = [item for sublist in ordered\
    \ for item in sublist]\n    return ordered\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi9sqsk5i.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ [4, 22, 11, 34, 3]\n    Output: [3, 11, 34, 4, 22]\n    Explanation: Note that\
    \ the sum of each item is 28.\n                    Therefore, item 3 has 28 and\
    \ item 4 has 20.\n                    Also, the sum of item 3 is greater than\
    \ item 4.\n                    Therefore, we should order them by their index.\n\
    \            \"\"\"\n    \"\"\"\n    I used O(nlogn) but you can do it in O(n)\
    \ if you want.\n    \"\"\"\n    nums.sort()\n    nums = [nums[i] for i in range(len(nums))\
    \ if nums[i] == nums[i]]\n    return nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8k_wzbcs.py\", line 14\n    Explanation: Note that the\
    \ sum of each item is 28.\n                      ^^^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [2,7,4,3,6,8,4,7]\n            print(order_by_points(nums))\n\
    \            \"\"\"\n            returns [3,4,6,7,8,4,7,2]\n    \"\"\"\n    #\
    \ Your code here\n    counts = {}\n    for item in nums:\n        num = sum(map(int,\
    \ str(item)))\n        if num in counts:\n            counts[num].append(item)\n\
    \        else:\n            counts[num] = [item]\n    return sorted(counts.values())\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpp6xsrazx.py\", line 12\n    nums = [2,7,4,3,6,8,4,7]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [3, 6, 3, 8, 1, 6, 1, 6]\n            Output: [1, 6, 6, 3, 8,\
    \ 3, 6, 3]\n            \"\"\"\n\n    Time complexity: O(n)\n    \"\"\"\n    sum_digit\
    \ = []\n    sum_num = 0\n    for i in range(len(nums)):\n        sum_num += nums[i]\n\
    \        sum_digit.append(sum_num)\n    len_num_sum = len(sum_digit)\n    sorted_num_sum\
    \ = sorted(sum_digit)\n    sorted_num_sum.sort(key=sum_nums.index)\n    return\
    \ [sorted_num_sum[i] for i in range(len(sorted_num_sum))]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpf0q0vulr.py\", line 12\n    Input: [3, 6, 3, 8, 1, 6,\
    \ 1, 6]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [12, 9, 2, 5, 14]\n            Output: [2, 5, 9, 12, 14]\n\
    \            \"\"\"\n\n    Args:\n        nums: List[int], the list of integers\
    \ to sort.\n\n    Returns:\n        List[int]: the list for which items are sorted\
    \ as per the given rule.\n    \"\"\"\n    count = {}\n    sum = 0\n    for item\
    \ in nums:\n        sum += item\n        if sum in count:\n            count[sum]\
    \ += 1\n        else:\n            count[sum] = 1\n    \n    sorted_list = sorted(nums,\
    \ key=lambda x:count[x])\n    return sorted_list\n\ndef check(candidate):\n  \
    \  assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpenkoac8g.py\", line 12\n    Input: nums = [12, 9, 2, 5,\
    \ 14]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [13, 4, 65, 23, 90]\n            Output: [65, 23, 13, 90, 4]\n\
    \            \"\"\"\n    \"\"\"\n    # write your code here\n\n    lst_of_nums\
    \ = sorted(nums, key=lambda x: sum(map(int, str(x))))\n    return lst_of_nums\n\
    </code>\n<|/ a |>\n<| c |>\nHey, thanks! I actually wanted to understand why my\
    \ code wasn't working. Thanks for taking the time.\n<|/ c |>\n<| a tags=python-3.x,list,python\
    \ |>\nOne solution that comes to my mind is the following:\n<code>\nlst_of_nums\
    \ = [13, 4, 65, 23, 90]\nlst_of_nums = sorted(lst_of_nums, key=lambda x: sum(map(int,\
    \ str(x))))\nprint(lst_of_nums)\n</code>\nOutput:\n<code>\n[65, 23, 13, 90, 4]\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9dm1d2xl.py\", line 12\n    Input: [13, 4, 65, 23, 90]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [10, 9, 2, 5, 6, 1, 8, 3]\n            Output: [1, 3, 5,\
    \ 6, 10, 8, 2, 9, 10]\n            \"\"\"\n\n    Args:\n        nums (List[int]):\
    \ A list of integers\n\n    Returns:\n        List[int]: A list of integers sorted\
    \ from smallest to largest\n    \"\"\"\n    int_nums = [int(x) for x in nums]\n\
    \    sorted_int_nums = int_nums.copy()\n    sorted_int_nums.sort()\n    nums =\
    \ [int(x) for x in nums]\n    return nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8_ljw899.py\", line 12\n    Input: nums = [10, 9, 2, 5,\
    \ 6, 1, 8, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input\
    \ : nums = [4,2,8,5,6,1]\n    Output: [1,6,4,2,8,5]\n    Explanation: When sorting\
    \ the numbers, sort them in ascending order\n    according to the sum of their\
    \ digits.\n    The list should be ordered in ascending order according to the\
    \ sum of their digits.\n            \"\"\"\n    \"\"\"\n    \n    sol =  sorted(nums,\
    \ key = lambda x:sum([int(d) for d in str(x)]))\n    \n    return sol\n    \n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_nxoilbc.py\", line 14\n    Explanation: When sorting\
    \ the numbers, sort them in ascending order\n                      ^^^^^^^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [4, 3, 1, 2]\n            Output: [1, 3, 2, 4]\n      \
    \      Explanation: 4 + 3 + 1 = 7, so nums[0] = 1, nums[1] = 3,\n            nums[2]\
    \ = 2, nums[3] = 4, so return [1, 3, 2, 4].\n            \"\"\"\n    Your code\
    \ here\n    ans = []\n    sum = 0\n    for i in range(len(nums)):\n        sum\
    \ += nums[i]\n        ans.append(sum)\n    return ans\n\nprint(order_by_points(nums))\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmqwq10zc.py\", line 12\n    Input: nums = [4, 3, 1, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    For\
    \ example, given nums = [4, 6, 1, 3], the function should return the\n    list\
    \ [4, 6, 1, 3] sorted from smallest to largest, as follows:\n    \n    4 6 1 3\
    \ \n    6 1 3 4\n    1 3 4 6\n    3 4 6 1\n    4 6 1 3\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkct1ci4x.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 34)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 11, 9, 5, 3, 14, 6]\n            Output: [3, 9, 5, 14, 11,\
    \ 6, 10]\n            \"\"\"\n    Link: https://leetcode.com/problems/sort-array-by-sum-of-digits/solution/\n\
    \n    >>> order_by_points([])\n    []\n    >>> order_by_points([10])\n    [10]\n\
    \    >>> order_by_points([10, 11])\n    [10, 11]\n    >>> order_by_points([9,\
    \ 5])\n    [9, 5]\n    >>> order_by_points([10, 11, 9, 5, 3, 14, 6])\n    [3,\
    \ 9, 5, 14, 11, 6, 10]\n    >>> order_by_points([9, 5, 8, 7, 1, 2, 10, 11, 14,\
    \ 6])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6]\n    >>> order_by_points([1, 2, 5,\
    \ 7, 8, 10, 11, 14, 9, 6])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6]\n    >>> order_by_points([9,\
    \ 5, 8, 7, 1, 2, 10, 11, 14, 6, 1])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 9]\n\
    \    >>> order_by_points([10, 11, 9, 5, 3, 14, 6, 1])\n    [3, 9, 5, 14, 11, 6,\
    \ 10, 1]\n    >>> order_by_points([10, 11, 9, 5, 3, 14, 6, 1, 2])\n    [3, 9,\
    \ 5, 14, 11, 6, 10, 1, 2]\n    >>> order_by_points([1, 2, 5, 7, 8, 10, 11, 14,\
    \ 9, 6, 9, 10])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 9, 10]\n    >>> order_by_points([1,\
    \ 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6,\
    \ 10, 10]\n    >>> order_by_points([1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11])\n\
    \    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11]\n    >>> order_by_points([1,\
    \ 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1])\n    [1, 2, 5, 7, 8, 10, 11, 14,\
    \ 9, 6, 10, 10, 11, 1]\n    >>> order_by_points([1, 2, 5, 7, 8, 10, 11, 14, 9,\
    \ 6, 10, 10, 11, 1, 2])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1,\
    \ 2]\n    >>> order_by_points([1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1,\
    \ 2, 3])\n    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1, 2, 3]\n    >>>\
    \ order_by_points([1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1, 2, 3, 9])\n\
    \    [1, 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1, 2, 3, 9]\n    >>> order_by_points([1,\
    \ 2, 5, 7, 8, 10, 11, 14, 9, 6, 10, 10, 11, 1, 2, 3, 9, 5])\n    [1, 2, 5, 7,\
    \ 8, 10, 11, 14, 9, \ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3__qg44o.py\", line 12\n    Input: [10, 11, 9, 5, 3, 14,\
    \ 6]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [7, 3, 6, 1, 9]\n            Output: [1, 3, 6, 9, 7]\n\
    \            \"\"\"\n            7 + 3 + 6 + 1 + 9 = 7 + 6 + 9 + 3 + 1 = 65\n\
    \            Therefore, return the list [1, 3, 6, 9, 7]\n    Args:\n        nums:\
    \ List[int]\n\n    Returns:\n        List[int]\n    \"\"\"\n    from collections\
    \ import defaultdict\n    dic = defaultdict(int)\n    for i in range(len(nums)):\n\
    \        dic[nums[i]] += 1\n    res=[i for i in sorted(dic.items(), key=lambda\
    \ x:x[1], reverse=True)]\n    return [i[0] for i in res]\n\nprint(order_by_points([7,\
    \ 3, 6, 1, 9]))\n</cell>\n<text>\nGreat! Now you can start implementing the required\
    \ functions in our program!\n\n\n</text>\n<text>\nQuestion 4: Implement the Golden\
    \ Section search algorithm.\nEach new term added to the dictionary is scored according\
    \ to the following equation:\n\n$score = \\frac{v{current} + 1}{v{old}}$\n\nWhere,\n\
    \n$v_{current}$ is the score of the term just added to the dictionary,\n$v_{old}$\
    \ is the score of the entire dictionary which contains all the terms,\n$v_{new}$\
    \ is the score of the new term.\n\nThe function computes the score of a term using\
    \ the following equation:\n\n$v{new} = \\frac{3}{4} \\left( v{current} + 1 \\\
    right) + \\frac{5}{4} \\left( v{old} - v{current} \\right)$\n\nIt will return\
    \ the new score for the term and also add $v_{new}$ to the score of the entire\
    \ dictionary. The function should return the term with the highest score.\n\n\n\
    </text>\n<cell>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvjjjihmb.py\", line 12\n    Input: nums = [7, 3, 6, 1,\
    \ 9]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1,2,5,6,8,5,3,5]\n            Output: [8,6,5,5,4,2,3,1]\n\
    \            \"\"\"\n\n    Example for tests:\n            assert(order_by_points([1,3,5,6,8,5,3,5])\
    \ == [8,6,5,5,4,2,3,1])\n            assert(order_by_points([1,4,7,3,9,5,3,5])\
    \ == [3,7,9,5,9,4,3,5])\n            assert(order_by_points([1,7,4,3,9,5,3,5])\
    \ == [9,3,7,5,9,4,3,1])\n    \"\"\"\n    nums = sorted(nums)\n    nums = sorted(nums,\
    \ key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptoop3sq4.py\", line 12\n    Input: nums = [1,2,5,6,8,5,3,5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [10, 11, 12, 5, 7, 8, 2]\n            sorted(nums)\n         \
    \   [0, 1, 2, 5, 7, 8, 10, 11]\n            \"\"\"\n    \"\"\"\n    summed_nums\
    \ = [sum([int(digit) for digit in str(num)]) for num in nums]\n    indexes = list(range(len(nums)))\n\
    \    summed_indexes.sort()\n    return [indexes[i] for i in summed_indexes]\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpayhc34pv.py\", line 12\n    nums = [10, 11, 12, 5, 7,\
    \ 8, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [2, 7, 4, 6, 0, 9]\n            Output: [9, 2, 7, 4, 6, 0]\n \
    \           \"\"\"\n    :type nums: List[int]\n    :rtype: List[int]\n    \"\"\
    \"\n    if nums is None or len(nums) == 0:\n        return None\n\n    nums =\
    \ sorted(nums, key=lambda item: (sum(str(item))))\n\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5vlpg2vl.py\", line 12\n    Input: [2, 7, 4, 6, 0, 9]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input\
    \ : [9, 4, 6, 5]\n    Output: [9, 6, 4, 5]\n    \"\"\"\n    return sorted(nums,\
    \ key=lambda num: sum(map(int, str(num))))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpl0mec74x.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 28)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        order_by_points([8, 0, 5, 7, 6, 2])\n            Output: [2, 7, 6, 8,\
    \ 0, 5]\n            \"\"\"\n    \"\"\"\n    nums.sort()\n    nums.insert(0, 0)\n\
    \    nums.append(0)\n    sum = 0\n    for num in nums:\n        sum += num\n \
    \       nums[nums.index(num)] = sum\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpp_mn2g34.py\", line 12\n    order_by_points([8, 0, 5,\
    \ 7, 6, 2])\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Given nums = [1, 3, 5]\n            Your function should return [1, 3,\
    \ 5]\n            \"\"\"\n    Example:\n            nums_ = [1, 3, 5]\n      \
    \      Solution.order_by_digits(nums_)\n            Output: [1, 3, 5]\n    \"\"\
    \"\n\n    sum_of_digits = 0\n    for i, num in enumerate(nums):\n        sum_of_digits\
    \ += num\n        nums[i] = num\n    sorted_nums = sorted(nums, key=lambda num:\
    \ sum_of_digits - num)\n    return sorted_nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy42ze9rs.py\", line 12\n    Given nums = [1, 3, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \    nums = [10, 12, 23, 43, 15]\n        ans = order_by_points(nums)\n      \
    \  print(ans)\n        \"\"\"\n        # ans   = [10, 23, 15, 12, 43, 43]\n\n\
    \    Args:\n        nums: List[int] the list of integer to be sorted.\n    Returns:\n\
    \        List[int]: the sorted list.\n    \"\"\"\n\n    # your code goes here\n\
    \    ans, tmp = [], 0\n    for e in nums:\n        tmp += e\n        if tmp in\
    \ ans:\n            tmp +=1\n        ans.append(tmp)\n\n    return ans\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpykqu66b8.py\", line 12\n    nums = [10, 12, 23, 43, 15]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [10, 1, 7, 6, 8, 3, 11, 9]\n            # sort the given list\
    \ by the sum of its digits\n            order_by_points(nums)\n\n            #\
    \ output\n            [1, 3, 7, 9, 11, 10, 8, 6]\n\n            # you can assume\
    \ that each item in the list contains at\n            # least one digit\n    \
    \        \"\"\"\n            nums = [10, 1, 7, 8, 3, 6, 9, 11]\n            #\
    \ sort the given list by the sum of its digits\n            order_by_points(nums)\n\
    \n            # output\n            [1, 6, 10, 8, 7, 3, 9, 11]\n    \"\"\"\n \
    \   sorted_nums = sorted(nums)\n    sum_nums = sum(sorted_nums)\n    nums_indices\
    \ = [i for i, val in enumerate(sorted_nums) if val==sum_nums]\n    sorted_nums\
    \ = [sorted_nums[i] for i in nums_indices]\n    return sorted_nums\n\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppa5yofqh.py\", line 12\n    nums = [10, 1, 7, 6, 8, 3,\
    \ 11, 9]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            [1, 4, 10, 5]\n            Output:\n            [1,\
    \ 2, 10, 4, 5]\n            \"\"\"\n    NOTE:\n            You may assume all\
    \ inputs are valid.\n    \"\"\"\n    def sum_to_length(nums: List[int]) -> List[int]:\n\
    \        sum_of_digits = 0\n        for i, num in enumerate(nums):\n         \
    \   sum_of_digits += num\n            if sum_of_digits > 9:\n                sum_of_digits\
    \ = sum_of_digits - 10\n                nums[i + 1] += 1\n        return nums\n\
    \    return sum_to_length(nums)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgkit87lj.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [1, 3, 11, 4], the function should return [4, 1, 3, 11].\n          \
    \  \"\"\"\n\n    Time complexity: O(n^2) \n    Space complexity: O(1)\n    \"\"\
    \"\n    # Write your answer below:\n    \n    count = 0\n    sums = {}\n    \n\
    \    for i in nums:\n        count += 1\n        if i in sums:\n            sums[i]\
    \ += count\n        else:\n            sums[i] = count\n\n    sorted_nums = sorted(nums,\
    \ key=lambda x:sums[x])\n    \n    sorted_nums = sorted(nums, key=lambda x: sums[x],\
    \ reverse=True)\n    \n    return sorted_nums\n    \ndef check(candidate):\n \
    \   assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpuhhdb6sx.py\", line 12\n    Given nums = [1, 3, 11, 4],\
    \ the function should return [4, 1, 3, 11].\n          ^^^^\nSyntaxError: invalid\
    \ syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [8, 2, 23, 10, 4, 13, 2]\n            Output: [2, 4, 8, 10, 23,\
    \ 13, 8]\n            \"\"\"\n    \"\"\"\n    sum_nums: List[int] = []\n    for\
    \ num in nums:\n        sum_nums.append(num % 10)\n\n    sum_nums.sort()\n   \
    \ return sum_nums\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1vdjt8eh.py\", line 12\n    Input: [8, 2, 23, 10, 4, 13,\
    \ 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 8, 2, 29, 8, 12]\n            print(order_by_points(nums))\n\
    \            >> [2, 29, 8, 8, 1, 12]\n            \"\"\"\n    \"\"\"\n    return\
    \ sorted(nums, key = lambda x : sum(map(lambda a : int(a), x)))\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpyzbnhkja.py\", line 12\n    nums = [1, 8, 2, 29, 8, 12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    nums\
    \ = [9, 7, 4, 2, 3, 7, 6, 5]\n    order_by_points(nums)\n    print(nums) \n  \
    \  >> [2, 7, 6, 5, 3, 4, 7, 9]\n    \"\"\"\n    if len(nums) <= 1: return nums\n\
    \    nums.sort()\n    \n    sums = []\n    for n in nums:\n        sums.append(sum(n))\n\
    \    \n    index = sums.index(max(sums))\n    nums[-(index+1):] = nums[:-(index+1)]\n\
    \    nums.sort()\n\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7y6a1cjl.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 41)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 3, 7, 4]\n            return: [7, 1, 4, 3]\n            \"\
    \"\"\n\n    Args:\n        nums(List[int]): [description]\n\n    Returns:\n  \
    \      List[int]: [description]\n    \"\"\"\n    nums_length = len(nums)\n   \
    \ digits = {}\n    sum_of_digit = 0\n    for num in nums:\n        digits[num]\
    \ = digits.get(num, 0) + 1\n        sum_of_digit += digits[num]\n    sorted_nums\
    \ = sorted(nums)\n    sorted_nums = [num for num in sorted_nums if digits.get(num)\
    \ != 0 and sum_of_digit % digits.get(num) == 0]\n    return sorted_nums\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvl6pu6b5.py\", line 12\n    nums = [1, 3, 7, 4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [8, 5, 1, 9, 2, 7, 0, 4, 3, 6, 5] -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\
    \            \"\"\"\n    Args:\n        nums: an unsorted list of integers\n\n\
    \    Returns:\n        nums: a list of integers in ascending order\n    \"\"\"\
    \n    nums = sorted(nums, reverse=False)\n    sums = []\n    for item in nums:\n\
    \        sums.append(sum(list(map(int, str(item)))))\n    sorted_indices = sorted(range(len(sums)),\
    \ key=sums.__getitem__, reverse=True)\n    return sorted(nums, key=lambda x: sorted_indices.index(x))\n\
    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1,\
    \ -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53,\
    \ 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37,\
    \ 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxpiwlhnv.py\", line 12\n    [8, 5, 1, 9, 2, 7, 0, 4, 3,\
    \ 6, 5] -> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [2, 7, 11, 15], your function should return [2, 11, 7, 15]\n    \"\"\"\
    \n    \n    nums.sort()\n    nums = sorted(nums, key=lambda x: (sum(x), x))\n\
    \    return nums\n    \ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpuarm7vah.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 30)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [11, 3, 12, 4, 1, 5, 8, 7, 9, 2]\n            Output: [1, 5, 8,\
    \ 9, 11, 12, 4, 3, 7]\n            \"\"\"\n            Explanation: [1, 5, 8]\
    \ has the same sum as [8, 11, 12],\n            sort them based on their index\
    \ in original list: [1, 5, 8] => [1, 5, 8, 11]\n\n    Args:\n            nums\
    \ (List[int]): a list containing n integers\n\n    Returns:\n            List[int]:\
    \ ordered list\n\n    Example 1:\n    Input: [11, 3, 12, 4, 1, 5, 8, 7, 9, 2]\n\
    \    Output: [1, 5, 8, 9, 11, 12, 4, 3, 7]\n\n    Example 2:\n    Input: [1, 10,\
    \ 20, 30, 40, 50, 60, 70, 80, 90]\n    Output: [1, 10, 20, 30, 40, 50, 60, 70,\
    \ 80, 90]\n\n    \"\"\"\n\n    nums = sorted(nums)\n    nums = sorted(nums, reverse=True)\n\
    \    sum_of_digits = [0]\n    for i in range(len(nums)):\n        sum_of_digits.append(sum_of_digits[-1]\
    \ + nums[i])\n    nums = sorted(nums, key=lambda x:sum_of_digits[len(nums) - 1\
    \ - x])\n    return nums\n</code>\n<|/ a tags=python,sorting,python-3.x |>\n<|\
    \ c |>\nJust a quick comment: your answer is incorrect. The sorting algorithm\
    \ doesn't work for the example given.\n<|/ c |>\n<| a tags=python,sorting,python-3.x\
    \ dscore=0 |>\nA simple lambda expression will do it.\n<code>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvjplhb03.py\", line 12\n    Input: [11, 3, 12, 4, 1, 5,\
    \ 8, 7, 9, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [2, 7, 7, 5]\n            output = order_by_points(nums)\n   \
    \         # output = [7, 5, 2, 7]\n            \"\"\"\n    \"\"\"\n    return\
    \ sorted(nums, key=lambda num: sum(num) % 10)\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=0 tags=list,python |>\nYou want to sort the lists by the sum of the\
    \ digits of the integers.\n<code>\n>>> def sumOfDigits(a):\n...     total = 0\n\
    ...     for i in a:\n...         total += int(i)\n...     return total\n... \n\
    >>> nums = [3, 32, 3, 8, 10, 12, 8]\n>>> nums.sort(key=lambda a: sumOfDigits(a))\n\
    >>> nums\n[8, 10, 12, 3, 32, 3, 8]\n</code>\n<|/ a |>\n<| a dscore=0 |>\nYou can\
    \ pass a key function to sort function, which will help you solve this problem.\n\
    <code>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7wnfgsb4.py\", line 12\n    nums = [2, 7, 7, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Example 1:\n            nums = [10, 20, 3, -1, 5, -20, 4, -5]\n     \
    \       Solution:\n            sorted_nums = [-20, -5, -1, 5, 10, 20, 3, 4]\n\
    \            \"\"\"\n\n    Input:\n    nums: An array of integers\n\n    Output:\n\
    \    sorted_nums: sorted array\n\n    Constraints:\n    Each input number in the\
    \ given array will be in range [-10000,10000].\n    -10^9 <=nums[i] <=10^9\n \
    \   \"\"\"\n    nums.sort()\n    nums.sort(key = lambda x: sum(map(int, str(x))))\n\
    \    return nums\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4xdoho4d.py\", line 12\n    Example 1:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [12,21,3,56,89]\n    Output: [3,12,21,56,89]\n    Explanation: In the\
    \ first iteration of the loop, the list is sorted.\n    As 12+12+21+3 = 89, the\
    \ second element is selected. Now the list is sorted.\n    As 89 > 40 and in the\
    \ third iteration of the loop, the list is sorted.\n    Thus, the first element\
    \ in the returned list is the last element in the original list.\n           \
    \ \"\"\"\n\n    Input: nums = [1,0,1,2,3,4]\n    Output: [1,0,4,2,3,1]\n    Explanation:\
    \ In the first iteration of the loop, the list is sorted.\n    As 1+1+2+0+3+4\
    \ = 12, the second element is selected. Now the list is sorted.\n    As 12 > 10\
    \ and in the third iteration of the loop, the list is sorted.\n    Thus, the first\
    \ element in the returned list is the last element in the original list.\n   \
    \ \n    \"\"\"\n    \n    nums.sort(reverse = True)\n    for i in range(len(nums)):\n\
    \        sum_of_nums = nums[i]\n        for j in range(i+1, len(nums)):\n    \
    \        if nums[j] < sum_of_nums:\n                sum_of_nums += nums[j]\n \
    \               nums[j] = nums[j]\n                nums[j+1] = sum_of_nums\n \
    \   \n    return nums\n\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpw7wegvym.py\", line 14\n    Explanation: In the first\
    \ iteration of the loop, the list is sorted.\n                    ^^^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [4, 8, 0, 12, 4, 56, 13, 3]\n            order_by_points(nums)\n\
    \            nums = [4, 8, 12, 0, 5, 13, 56, 3]\n            \"\"\"\n\n    Args:\n\
    \        nums (list of ints): A list of integers\n\n    Returns:\n        int:\
    \ Sorted sum of input list integers\n    \"\"\"\n    nums = nums[:]\n    sum_of_nums\
    \ = 0\n    for num in nums:\n        sum_of_nums += num\n    nums.sort()\n   \
    \ if sum_of_nums != sum(nums):\n        nums = order_by_points_helper(nums, sum_of_nums)\n\
    \    return nums\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptjtd7fsz.py\", line 12\n    nums = [4, 8, 0, 12, 4, 56,\
    \ 13, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 23, 6, 78]\n            solution = order_by_points(nums)\n\
    \            print(solution)\n            #> [1, 6, 23, 78]\n\n            nums\
    \ = [4, 9, 12, 3, 2]\n            solution = order_by_points(nums)\n         \
    \   print(solution)\n            #> [2, 3, 9, 4, 12]\n    \"\"\"\n\n    nums_sum\
    \ = [sum(list(j)) for j in nums]\n\n    return [nums[index] for index, sum in\
    \ enumerate(nums_sum)]\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi0cvkf07.py\", line 12\n    nums = [1, 23, 6, 78]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [4, 2, 10, 3]\n            Output: [10, 4, 2, 3]\n           \
    \ \"\"\"\n    \"\"\"\n    from collections import defaultdict\n    \n    digit_counts\
    \ = defaultdict(int)\n    for n in nums:\n        digit_counts[int(n[-1])] +=\
    \ 1\n    \n    sorted_nums = sorted(nums, key=lambda x:x[0]-x[-1])\n    new_nums\
    \ = []\n    for x in sorted_nums:\n        x_index = nums.index(x)\n        if\
    \ x_index not in digit_counts:\n            new_nums.append(x)\n        else:\n\
    \            digit_counts[x_index] -= 1\n            new_nums.append(x)\n    \
    \    \n    return new_nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpga3h0gzf.py\", line 12\n    Input: [4, 2, 10, 3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [5, 7, 1, 8, 5]\n            Output: [1, 5, 7, 8, 5]\n\
    \            Explanation: 7 (1+5) is greater than 3 (1+8), so [8, 5] is placed\
    \ first.\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n    sum_so_far\
    \ = 0\n    sum_of_digits = 0\n    sorted_nums = []\n    sorted_indexes = []\n\
    \    i = 0\n    j = -1\n    while i < len(nums):\n        sum_of_digits += nums[i]\n\
    \        if sum_of_digits > 10:\n            sorted_nums.append(nums[j])\n   \
    \         sorted_indexes.append(j)\n            sum_of_digits -= 10\n        else:\n\
    \            j += 1\n            sum_so_far += sum_of_digits\n            sum_of_digits\
    \ = 0\n        i += 1\n    if sum_so_far != 0:\n        sorted_nums.append(nums[j])\n\
    \        sorted_indexes.append(j)\n    return sorted_nums + nums[sorted_indexes]\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi8ivxtw5.py\", line 12\n    Input: nums = [5, 7, 1, 8,\
    \ 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 3, 1, 4, 10]\n            Output: [1, 3, 10, 4, 1]\n\
    \            \"\"\"\n    \"\"\"\n    # TODO complete the function\n    nums.sort(key=lambda\
    \ x: int(\"%s%s%s%s\" % (x[0], x[1], x[2], x[3])))\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1e5flw27.py\", line 12\n    Input: nums = [1, 3, 1, 4,\
    \ 10]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [5, 1, 3, 6, 7, 8, 4]\n            Output: [1, 3, 5, 6, 7, 8,\
    \ 4]\n            \"\"\"\n            Input: [9, 8, 7, 6, 4, 3, 5]\n         \
    \   Output: [9, 8, 6, 5, 4, 3, 1]\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpr_l_hg9g.py\", line 12\n    Input: [5, 1, 3, 6, 7, 8,\
    \ 4]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [10, 20, 5, 100, 4, 1]\n    Output: [1, 4, 10, 100, 20, 5]\n        \
    \    \"\"\"\n\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n    \"\
    \"\"\n    sum_digit = defaultdict(int)\n\n    for num in nums:\n        sum_digit[sum(list(str(num)))]\
    \ += num\n\n    return sorted(nums, key=sum_digit.get)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkvp9u788.py\", line 14\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [3, 1, 5]\n            Output: [3, 5]\n            \"\"\"\n\n\
    \            Input: [2, 3, 5, 1]\n            Output: [1, 2, 3, 5]\n    \"\"\"\
    \n    res=sorted(nums)\n    res=list(set(res))\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp06j5eish.py\", line 12\n    Input: [3, 1, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input : [10, 11, 13, 12, 7, 9, 22, 30]\n            Output: [7, 9, 10,\
    \ 11, 12, 13, 22, 30]\n\n            Input : [9, 8, 2, 5, 1, 6, 0, 3, 7, 4, 10,\
    \ 9, 8]\n            Output: [9, 8, 2, 5, 1, 0, 3, 6, 4, 7, 10, 9]\n\n       \
    \     Input : [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n            Output: [1, 6, 5, 4,\
    \ 3, 2, 1, 0, 9, 8, 7, 6]\n    \"\"\"\n    # Solution 1\n    # sort by key\n \
    \   nums = sorted(nums, key=lambda x:sum([int(x) for x in str(x)]))\n    # solution2\n\
    \    nums = sorted(nums, key=lambda x: sum([int(x) for x in str(x)]))\n    return\
    \ nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppv_c0_om.py\", line 12\n    Input : [10, 11, 13, 12, 7,\
    \ 9, 22, 30]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [9, 4, 6, 12, 2, 7, 6, 1, 5, 3]\n            order_by_points(nums)\n\
    \            # result: [6, 9, 4, 12, 5, 2, 1, 3, 7, 6, 4]\n            \"\"\"\n\
    \    Args:\n        nums (List): list of integers\n    Returns:\n        List[int]:\
    \ ordered list\n    \"\"\"\n    ord_sum = 0\n    ord_sums = []\n    ord_index\
    \ = []\n    for index, val in enumerate(nums):\n        ord_sum += val\n     \
    \   ord_sums.append(ord_sum)\n        ord_index.append(index)\n\n    ord_sums.sort()\n\
    \    ord_sums.reverse()\n    return nums[ord_index]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1hmj9lsf.py\", line 12\n    nums = [9, 4, 6, 12, 2, 7,\
    \ 6, 1, 5, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [5, 23, 8, -12, 2]\n            ordered_nums = order_by_points(nums)\n\
    \            # ordered_nums == [8, 5, 2, -12, 23]\n            \"\"\"\n    \"\"\
    \"\n    nums = sorted(nums)\n    nums_dict = dict()\n    for i in range(len(nums)):\n\
    \        nums_dict[str(nums[i])] = nums[i]\n    nums_dict = sorted(nums_dict.items(),\
    \ key = lambda x:x[1])\n    return [x[0] for x in nums_dict]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1jeesebh.py\", line 12\n    nums = [5, 23, 8, -12, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ [1, 3, 2]\n    Output: [2, 3, 1]\n            \n    Input: [100, 1, 3]\n   \
    \ Output: [1, 2, 100]\n            \n    Input: [3, 99, 3]\n    Output: [3, 99,\
    \ 3]\n    \"\"\"\n    \n    sums = [sum(num) for num in nums]\n    ret_list =\
    \ []\n    for sum in sums:\n        ret_list.extend([num for i, num in enumerate(nums)\
    \ if nums[i] == sum])\n    ret_list = sorted(ret_list)\n    return ret_list\n\n\
    \nnums = [1, 2, 3]\nprint(order_by_points(nums))\n</cell>\n<text>\nProblem 9:\
    \ List Filtering\nImplement a function which takes a list of integers and returns\
    \ the list containing only the elements that satisfy a specific condition.\n\n\
    For example:\nIf the given list is [1, 2, 3, 4], the function should return [2,\
    \ 4].\n\nIf the given list is [1, 2, 3, 0, 0, 0], return the empty list\n\nIf\
    \ the given list is [1, 1], the function should return [1].\n\n\n</text>\n<cell>\n\
    from typing import List\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpaqjbhypr.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 60)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    >>>\
    \ order_by_points([7, 8, 1, 2, 3, 1])\n    [1, 2, 3, 1, 7, 8]\n\n    >>> order_by_points([7,\
    \ 3, 8, 2, 5, 1])\n    [1, 5, 8, 7, 3, 2]\n    \"\"\"\n    total = [0, 0]\n  \
    \  indices = []\n    for i, v in enumerate(nums):\n        total[0] += v\n   \
    \     total[1] += v * v\n        if total[1] > total[0]:\n            indices.append(i)\n\
    \            total[0] -= v\n            total[1] -= v * v\n    return sorted(nums,\
    \ key=indices.__getitem__)\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps02zdzki.py\", line 17\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 41)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n                    nums = [7, 2, 9, 1]\n                   \
    \ Output: [1, 2, 7, 9]\n            \"\"\"\n    Example 2:\n            Input:\n\
    \                    nums = [10, 2, 5, 1]\n                    Output: [1, 10,\
    \ 2, 5]\n    Example 3:\n            Input:\n                    nums = [7, 3,\
    \ 6, 9, 1, 4]\n                    Output: [1, 2, 3, 6, 7, 9, 4]\n    Example\
    \ 4:\n            Input:\n                    nums = [3, 6, 9, 1, 4, 7, 2]\n \
    \                   Output: [1, 2, 3, 9, 6, 7, 4]\n\n    Args:\n        nums(List[int]):\
    \ the given array of integers to be sorted.\n\n    Returns:\n        List[int]:\
    \ sorted array of integers according to the\n        sum of their digits.\n  \
    \  \"\"\"\n    # code here\n    temp = 0\n    res = []\n    for n in nums:\n \
    \       temp = n // 10\n        res.append(n)\n        res.append(temp)\n    sum_\
    \ = 0\n    for index, i in enumerate(res):\n        sum_ += i\n        if sum_\
    \ > index and sum_ < index + 1:\n            temp = res[index]\n            res[index]\
    \ = res[sum_]\n            res[sum_] = temp\n            sum_ = 0\n    return\
    \ res\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqp6p_kw9.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 22, 8, 2, 22, 2]\n            Output: [2, 8, 10, 22, 22,\
    \ 22]\n            Explanation: \n            There are two numbers in the input\
    \ list with the same sum of their digits.\n            Those two numbers are 2's\
    \ in the original list and 8's in the original list.\n            The index of\
    \ 8 corresponds to its position in the input list\n            and the index of\
    \ 2 corresponds to its position in the output list.\n            \"\"\"\n    \"\
    \"\"\n    sum_of_digits = []\n    digit_dict = {}\n    for num in nums:\n    \
    \    sum_of_digits.append(sum(num))\n        digit_dict[sum(num)] = num\n\n  \
    \  sorted_list = sorted(sum_of_digits, reverse=True)\n    sorted_index = []\n\
    \    for index, value in enumerate(sorted_list):\n        if value in digit_dict:\n\
    \            sorted_index.append(digit_dict[value])\n        else:\n         \
    \   sorted_index.append(index)\n    return sorted_index\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmpfls0jx.py\", line 12\n    Input: [10, 22, 8, 2, 22,\
    \ 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input\
    \ : [9, 7, 4, 10, 8, 5, 3, 2, 1]\n    Output: [9, 4, 10, 8, 5, 7, 3, 2, 1]\n \
    \   \"\"\"\n    nums.sort()\n    return nums\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvmr_zgbj.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 29)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [23, 45, 33, 12, 10, 4, 2]\n            sorted(nums) \u2192 [12,\
    \ 10, 33, 23, 45, 4, 2]\n            \"\"\"\n\n    Time Complexity: O(nlogn)\n\
    \    Space Complexity: O(n)\n    \"\"\"\n    nums_length = len(nums)\n\n    for\
    \ i in range(0, nums_length):\n        sum_of_digits = sum(nums[0: i + 1])\n \
    \       index_of_sum_of_digits = nums.index(sum_of_digits)\n        if index_of_sum_of_digits\
    \ == i:\n            nums[i] = sum_of_digits\n            index_of_sum_of_digits\
    \ -= 1\n            nums[index_of_sum_of_digits] = sum_of_digits\n\n    return\
    \ nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptmoozevx.py\", line 12\n    nums = [23, 45, 33, 12, 10,\
    \ 4, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [4, 9, 2, 5, 6, 1]\n            Output: [1, 2, 4, 5, 6, 9]\n\n\
    \    Args:\n        nums (List[int]): a list contains some integers\n\n    Returns:\n\
    \        List[int]: the list which represents the sorted integers\n    \"\"\"\n\
    \n    # Your code here\n\n    pass\n    # Note: The following lines of code do\
    \ not affect the program,\n    # they are just used to test the function above.\n\
    \    # nums = [4, 9, 2, 5, 6, 1]\n    # order_by_points(nums)\n    # nums = [4,\
    \ 9, 2, 5, 6, 1]\n    # order_by_points_test(nums)\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwbmrpv06.py\", line 12\n    Input: [4, 9, 2, 5, 6, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ [1, 7, 11, 3, 9, 11, 5, 7, 9, 3, 3]\n    Output: [1, 3, 5, 7, 9, 9, 11, 11,\
    \ 7, 7, 3, 3]\n            \"\"\"\n    \"\"\"\n    \n    \n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprz_jgsd_.py\", line 14\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [1, 3, 5]\n    Sort them in ascending order according to the sum of their\
    \ digits\n    (i.e. [1+3, 5] or [5, 3, 1]).\n            \"\"\"\n    Example:\n\
    \    Input:  nums = [1, 3, 5]\n    Output: [1, 3, 5]\n    \"\"\"\n    nums = sorted(nums)\n\
    \    return nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpox022v8j.py\", line 12\n    Given nums = [1, 3, 5]\n \
    \         ^^^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [2, 7, 11, 3, 5]\n            res = order_by_points(nums)\n  \
    \          print(res)\n            # [3, 7, 11, 2, 5]\n            \"\"\"\n  \
    \  My Solution\n    Time Complexity: O(n logn)\n    Space Complexity: O(n)\n \
    \   \"\"\"\n    from collections import defaultdict\n\n    cache = defaultdict(int)\n\
    \    for num in nums:\n        cache[num] += 1\n\n    res = sorted(nums, key=lambda\
    \ num: cache[num])\n\n    return res\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvar0qnbc.py\", line 12\n    nums = [2, 7, 11, 3, 5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Order\
    \ by points:\n    list1 = [4, 3, 6, 5, 3]\n    \"\"\"\n    sums: List[int] = []\n\
    \    for item in nums:\n        sums.append(sum(nums))\n    res = []\n    for\
    \ item in nums:\n        index = 0\n        for sum in sums:\n            if sum\
    \ == item:\n                index = sums.index(sum)\n                break\n \
    \       res.append(nums[index])\n    return res\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyl89wmjs.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 38)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [17, 34, 21, 10, 49, 17, 34, 21]\n            Output: [10, 17,\
    \ 34, 21, 49, 34, 17, 21]\n            \"\"\"\n\n    Example 2:\n            Input:\
    \ [108, 1, 97, 117, 98, 108, 108, 97, 99, 101, 111]\n            Output: [97,\
    \ 98, 108, 108, 117, 101, 99, 111, 98, 1, 108]\n\n    Example 3:\n           \
    \ Input: [-10, 13, -5, 7, 9, 10, -2, -1, 11]\n            Output: [-10, -2, -1,\
    \ 7, 9, 10, 13, -5, 11]\n\n    Example 4:\n            Input: [-100, -10, -5,\
    \ -1, 3, 2]\n            Output: [-100, 2, -5, 3, -1, -10]\n    \"\"\"\n\n   \
    \ # write your code here\n    if len(nums) < 2:\n        return nums\n    else:\n\
    \        count = 0\n        sum = 0\n        \n        start = -1\n        end\
    \ = 0\n        \n        pos = 0\n        \n        while pos < len(nums):\n \
    \           \n            if nums[pos] == -1:\n                sum = -1\n    \
    \        else:\n                sum += nums[pos]\n\n            if sum > start:\n\
    \                start = sum\n            \n            \n            \n     \
    \       if sum < end:\n                end = sum\n                \n         \
    \   \n            pos = pos + 1\n            \n        nums[start:end + 1] = nums[start:end\
    \ + 1][::-1]\n        return nums\n    \n    \ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpazytp2ui.py\", line 12\n    Input: [17, 34, 21, 10, 49,\
    \ 17, 34, 21]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Given the list [-10,-3,0,5,9],\n            return its sorted list as\
    \ [9,-3,0,-10,5]\n            \"\"\"\n    Args:\n        nums (List[int]): the\
    \ input list\n\n    Returns:\n        List[int]: sorted list\n\n    \"\"\"\n \
    \   # write your code here\n    \n    return sorted(nums, key=lambda x:sum([int(i)\
    \ for i in str(x)]))\n\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu6mg80sh.py\", line 12\n    Given the list [-10,-3,0,5,9],\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [11, 14, 3, 17, 1]\n            Output: [1, 3, 17, 14, 11]\n \
    \           \"\"\"\n    Args:\n        nums (List): A list of integers\n    Returns:\n\
    \        List[int]: A new list which stores the order in ascending order.\n  \
    \  \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptk5v49ke.py\", line 12\n    Input: [11, 14, 3, 17, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [9,4,6,1,7,8,2,5]\n    Output: [1,2,5,6,7,4,8,9]\n    Explanation: sum\
    \ of digits of 9 is 2, sum of digits of 4 is 1,\n                    sum of digits\
    \ of 6 is 5, sum of digits of 7 is 4,\n                    sum of digits of 8\
    \ is 9, sum of digits of 1 is 7,\n                    sum of digits of 2 is 8,\
    \ sum of digits of 5 is 9.\n    \n    Constraints:\n            0 <= nums[i] <=\
    \ 9\n            1 <= nums.length <= 500\n    \"\"\"\n    summed_list = [sum(nums[:i])\
    \ for i in range(1, len(nums))]\n    sorted_list = [nums[i] for i in summed_list.index(sorted(summed_list)[-1])]\n\
    \    return sorted_list\n\n</code>\n<|/ q tags=sorting,python-3.x dscore=0 |>\n\
    <| c |>\nDo you have any experience in programming? What did you do?\n<|/ c |>\n\
    <| c |>\nYes I have some experience. I have worked with basic Python coding and\
    \ Java. I am new to Python and have only been programming for about 3 months before\
    \ I started learning Python.\n<|/ c |>\n<| c |>\nPlease [edit] your question and\
    \ add the code you've tried so far.\n<|/ c |>\n<| c |>\nThank you. I have just\
    \ edited my question to include my code and the example I used.\n<|/ c |>\n<|\
    \ a |>\nI would suggest to use sorted() function instead of using if statement.\
    \ Example below :\n<code>\n>>> nums = [9,4,6,1,7,8,2,5]\n>>> sorted(nums)\n[1,\
    \ 2, 5, 6, 7, 4, 8, 9]\n>>> nums = [9,4,6,1,7,8,2,5]\n>>> nums.sort() # will sort\
    \ the list in-place without returning the list\n>>> nums\n[1, 2, 5, 6, 7, 4, 8,\
    \ 9]\n</code>\n<|/ a tags=sorting,python-3.x dscore=1 |>\n<| a |>\nUsing lambda\
    \ function will be a better choice\n<code>\nnums = [9,4,6,1,7,8,2,5]\nnums = sorted(nums,\
    \ key=lambda x: (sum(str(x)), x))\n</code>\n<|/ a dscore=1 tags=sorting,python-3.x\
    \ |>\n<| c |>\nThank you for your help. I used the other solution but I appreciate\
    \ this solution because it is shorter and easier to read. :)\n<|/ c |>\n<| a dscore=0\
    \ tags=sorting,python-3.x |>\nI believe this does what you are looking for:\n\
    <code>\nnums = [9,4,6,1,7,8,2,5]\nnums.sort(reverse=True)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwg5_77rl.py\", line 22\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 80)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [15, 3, 6, 4, 1, 9]\n            order_by_points(nums)\n     \
    \       # [1, 9, 3, 6, 4, 15]\n            \"\"\"\n    :type nums: List[int]\n\
    \    :rtype: List[int]\n    \"\"\"\n    if len(nums) <= 1:\n        return nums\n\
    \    else:\n        sum = 0\n        index_list = []\n        for index in range(len(nums)):\n\
    \            sum = sum + nums[index]\n            if sum % 10 == 0:\n        \
    \        index_list.append(index)\n        index_list.sort(reverse=True)\n   \
    \     return nums[index_list]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsmpznrw_.py\", line 12\n    nums = [15, 3, 6, 4, 1, 9]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 9, 10, 3, 8, 2, 5, 7, 6]\n            print(order_by_points(nums))\n\
    \            # Output: [2, 5, 6, 7, 8, 12, 9, 10, 3]\n    \"\"\"\n    nums.sort()\n\
    \    return nums\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsec048cb.py\", line 12\n    nums = [12, 9, 10, 3, 8, 2,\
    \ 5, 7, 6]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [2, 7, 9, 10, 4, 6]\n            Output: [2, 9, 4, 6, 7, 10]\n\
    \            \"\"\"\n    \"\"\"\n    lst = list(nums)\n    nums.sort(key=lambda\
    \ x: sum(list(map(int, list(str(x))))), reverse=True)\n    return lst\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpox5enu85.py\", line 12\n    Input: [2, 7, 9, 10, 4, 6]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n                    nums = [10, 22, 34]\n            Output:\n\
    \                    nums = [34, 10, 22]\n            Explanation:\n         \
    \           The first 3 items have the sum of their digits as 10, 22, which is\
    \ 34,\n                    so we sort them in ascending order.\n             \
    \       The next two items also have their sum of digits as 10, 22, which is 34,\n\
    \                    so we sort them based on the index in the original list.\n\
    \                    The original list is [10, 22, 34], so the final result will\
    \ be\n                    [34, 10, 22].\n            Notes:\n                \
    \    1. You may assume all input numbers are valid.\n                    2. The\
    \ digits will be in the range [1, 9]\n                    3. There is at least\
    \ one item in nums.\n\n    Source: None\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgecy67yr.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [4,5,7,9,11,12]\n            Output: [9, 7, 4, 11, 5, 12]\n\
    \            \"\"\"\n\n    \"\"\"\n    nums.sort()\n    res = []\n    sum_ = 0\n\
    \    for i in range(len(nums)):\n        sum_ += nums[i]\n        res.append(nums[i])\n\
    \        if sum_ == sum(map(int, str(nums[i]))):\n            res.insert(0, nums[i])\n\
    \            sum_ -= nums[i]\n\n    return res\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjv98r0b_.py\", line 12\n    Input: nums = [4,5,7,9,11,12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Example: order_by_points([23, 1, 9, 1, 2]) = [1, 9, 2, 21, 3].\n    \
    \        \"\"\"\n    \n    Parameters:\n        nums (List[int]): list of integers\n\
    \    Returns:\n        List[int]: list of ordered integers\n    \"\"\"\n\n   \
    \ def digit(num):\n        digits = [int(i) for i in str(num)]\n        digit_sums\
    \ = [i[1] for i in digits]\n        digit_index = [i for i,v in enumerate(digit_sums)\
    \ if v == max(digit_sums)]\n        return digits[digit_index]\n    \n    nums\
    \ = list(map(digit, nums))\n    nums.sort()\n    \n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw6ip98_5.py\", line 12\n    Example: order_by_points([23,\
    \ 1, 9, 1, 2]) = [1, 9, 2, 21, 3].\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        INPUT:  nums = [7, 14, 21, 28, 35, 42, 49, 56, 63, 70]\n            OUTPUT:\
    \ [7, 28, 35, 42, 49, 56, 63, 70, 14]\n            EXAMPLE:\n            Input:\
    \ [5, 7, 11, 13, 17]\n            Output: [11, 13, 17, 5, 7]\n            \"\"\
    \"\n    \"\"\"\n    res = []\n    len_num = len(nums)\n    sum_num = 0\n    for\
    \ n in nums:\n        sum_num += n\n        res.append(n)\n    res.sort()\n  \
    \  for i in range(len_num - 1, -1, -1):\n        if sum_num % 10 == res[i]:\n\
    \            sum_num -= res[i]\n            res.insert(i, sum_num // 10)\n   \
    \         sum_num -= (sum_num // 10) * 10\n    return res\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1zioui1e.py\", line 12\n    INPUT:  nums = [7, 14, 21,\
    \ 28, 35, 42, 49, 56, 63, 70]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [1, 3, 5]\n            Output: [1, 3, 5]\n            \"\"\"\n\
    \n    Args:\n        nums: List[int]\n\n    Returns:\n        nums: List[int]\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqv4h81ss.py\", line 12\n    Input: [1, 3, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            [-7, -9, 10, 12, 19, -7]\n            Output:\n \
    \           [-7, -7, -9, -9, 10, 12, 19]\n            \"\"\"\n    \"\"\"\n   \
    \ pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_3koxpi6.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [2, 7, 8, 1, 4, 5]\n            order_by_points(nums)\n      \
    \      # => [1, 4, 2, 5, 7, 8]\n            \"\"\"\n\n    Args:\n            nums:\
    \ List[int]\n\n    Returns:\n            List[int]\n    \"\"\"\n    # Your code\
    \ here\n    sorted_nums = sorted(nums, key=lambda x:sum(map(int, str(x))))\n \
    \   return sorted_nums\n\nnums = [2,7,8,1,4,5]\nprint(order_by_points(nums))\n\
    </cell>\n<text>\nProblem 2\nWrite a function which can count the number of ways\
    \ of partitioning a given list into two non-empty subsets (i.e., the number of\
    \ ways of partitioning a list into two non-empty subsets). For example, the number\
    \ of ways of partitioning {1,2,3} into two subsets would be 2 (1 \u22C3 1 and\
    \ 1 \u22C3 3), and the number of ways of partitioning {1,2,3} into three subsets\
    \ would be 1 (1 \u22C3 1, 1 \u22C3 2 and 1 \u22C3 3).\n\nWrite the function definition\
    \ below:\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4p4j0wjy.py\", line 12\n    nums = [2, 7, 8, 1, 4, 5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [4, 3, 12, 3]\n            Output: [12, 3, 4, 3]\n           \
    \ \"\"\"\n    Example:\n    \"\"\"\n\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8bv6tyt4.py\", line 12\n    Input: [4, 3, 12, 3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \    Input: [10, 20, 30, 40, 50]\n        Output: [40, 30, 10, 20, 50]\n\n   \
    \ https://discuss.leetcode.com/topic/5410/easy-to-understand-top-down-approach\n\
    \    \"\"\"\n\n    # Sort list using the sum of the digits as the key\n    # Store\
    \ the original list as a dict to restore the original order\n    original = sorted(nums,\
    \ key=sum)\n\n    # Create the new list to store the sorted numbers and return\
    \ it\n    sorted = [num for num, sum in zip(original, nums)]\n    return sorted\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0pcvf7ck.py\", line 12\n    Input: [10, 20, 30, 40, 50]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 20, 30, 40, 50, 60]\n            Output: [10, 20, 30, 40,\
    \ 50, 60]\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n  \
    \      A list of integers.\n    \"\"\"\n    def func(nums: list) -> int:\n   \
    \     \"\"\"\n        Calculate the sum of digits of a number\n\n        Args:\n\
    \            nums: a number\n\n        Returns:\n            sum of a number\n\
    \        \"\"\"\n        if len(nums) == 1:\n            return nums[0]\n    \
    \    sum = 0\n        for num in nums:\n            sum += num\n        return\
    \ sum\n\n    def sort_func(nums: list) -> int:\n        \"\"\"\n        Sort the\
    \ given list of integers in ascending order.\n\n        Args:\n            nums:\
    \ A list of integers.\n\n        Returns:\n            A list of integers.\n \
    \       \"\"\"\n        if len(nums) == 0:\n            return 0\n\n        sum_of_digits\
    \ = func(nums)\n        sorted_list = sorted(nums, reverse = True, key = func)\n\
    \        return sum_of_digits, sorted_list\n\n    return sort_func(nums)\n\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0logvuxl.py\", line 12\n    Input: [10, 20, 30, 40, 50,\
    \ 60]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums=[9, 2, 3, 4, 2, 2]\n            solution=[2, 2, 3, 4, 9, 9]\n  \
    \          answer=[2, 2, 3, 9, 9, 9]\n            \"\"\"\n    \"\"\"\n    sum_of_digits_map={}\n\
    \    sums=[]\n    for num in nums:\n        sums.append(sum(num))\n        sum_of_digits_map[sum(num)]=num\n\
    \    sorted_sums = sorted(list(sum_of_digits_map.keys()), reverse=True)\n    sorted_sums=list(set(sorted_sums))\n\
    \    sorted_sums=sorted(sorted_sums)\n    sorted_nums=[]\n    for sum in sorted_sums:\n\
    \        sorted_nums.append(sum_of_digits_map[sum])\n    return sorted_nums\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnjkwbe8z.py\", line 12\n    nums=[9, 2, 3, 4, 2, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \            nums = [4, 2, 5, 1, 5]\n    Output:\n            [1, 1, 2, 2, 4]\n\
    \    \"\"\"\n    def helper(nums, target, order):\n        res = []\n        digits\
    \ = list(map(int, str(nums)))\n        for d in digits:\n            res.append(nums.index(target+d))\n\
    \        res.sort()\n        for i in range(len(nums)):\n            order[res[i]]\
    \ = i\n        return order\n    return helper(nums, 0, 0)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpt22pwi3_.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 39)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [12, 2]\n            Output: [2, 12]\n\n            Input:\
    \ nums = [-12, 2]\n            Output: [2, -12]\n\n            Input: nums = [-12,\
    \ -2]\n            Output: [-2, -12]\n\n            Input: nums = [-11, 5, 2]\n\
    \            Output: [2, 5, -11]\n            \"\"\"\n    \"\"\"\n    sol = nums[:]\n\
    \    for i in range(len(nums)):\n        j = i-1\n        while j>=0:\n      \
    \      if sol[j] > sum(sol[j+1:]):\n                sol[j+1:] = sol[j+1:][::-1]\n\
    \                sol[j] = nums[i]\n                i+=1\n            j += 1\n\
    \    nums[:] = sol\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp57_py52v.py\", line 12\n    Input: nums = [12, 2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [7, 10, 3, 9, 1]\n            \n            7 -> [7, 10, 3, 9, 1]\n \
    \           \n            10 -> [1, 10, 3, 9, 7]\n            \n            3\
    \ -> [3, 10, 1, 9, 7]\n            \n            9 -> [9, 1, 3, 10, 7]\n     \
    \       \n            1 -> [1, 9, 3, 10, 7]\n            \n            Given a\
    \ non-empty array, your function should return its sorted version. Do not sort\
    \ the original array.\n            You may assume all input arrays are non-empty\
    \ and have the same length.\n            \"\"\"\n    Example: \n    \"\"\"\n \
    \   >>> order_by_points([7, 10, 3, 9, 1])\n    [1, 9, 3, 10, 7]\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4tmvfjik.py\", line 12\n    [7, 10, 3, 9, 1]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 2, 6, 1, 8, 3]\n            Output: [1, 6, 3, 8, 10, 2]\n\
    \n    Time complexity: O(nlogn)\n    Space complexity: O(1)\n    \"\"\"\n    #\
    \ Your code here\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgt0hii6l.py\", line 12\n    Input: [10, 2, 6, 1, 8, 3]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Example\n            =============\n            Input: [1, 3, 6, 5, 2,\
    \ 0]\n            Output: [2, 4, 0, 1, 3, 6]\n            Explanation: sum of\
    \ digits is 4 + 1 + 3 + 6 = 10\n            Then, list items with index 0 and\
    \ 4 are sorted.\n            \"\"\"\n    \"\"\"\n    sums = [0] * 10\n    for\
    \ n in nums:\n        sum = 0\n        tmp = n\n        while tmp > 0:\n     \
    \       sum += tmp % 10\n            tmp //= 10\n        sums[sum] += 1\n    sort_order\
    \ = [n for n in sums if sums[n] > 1]\n    sorted_list = [nums[sums[n]] for n in\
    \ sort_order]\n    return sorted_list\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpd332y3p0.py\", line 12\n    Example\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 3]\n            Output: [1, 3]\n            Explanation:\
    \ [1, 3] has same sum of digits, so order it based on its\n            index:\
    \ [1, 0, 3].\n            \"\"\"\n    Input: nums = [2, 7, 11, 15]\n    Output:\
    \ [2, 7, 11, 15]\n    Explanation: [2, 7, 11, 15] has same sum of digits, so order\
    \ it based on its\n    index: [2, 0, 3, 1].\n    \"\"\"\n    nums.sort()\n   \
    \ for i in range(len(nums)):\n        if nums[i] > 0 and nums[i] < len(nums):\n\
    \            temp = nums[i]\n            for j in range(i+1, len(nums)):\n   \
    \             if nums[j] > 0 and nums[j] < len(nums):\n                    if\
    \ nums[j] >= nums[i] + nums[i]:\n                        nums[j] = nums[i] + nums[j]\n\
    \                        nums[i] = temp\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_n0sfhxp.py\", line 12\n    Input: nums = [1, 3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Example 1:\n            nums = [2, 7, 11, 15]\n            returns: [7,\
    \ 11, 15, 2]\n            Example 2:\n            nums = [7, 6, 4, 3]\n      \
    \      returns: [3, 4, 5, 6]\n            Example 3:\n            nums = [9, 0,\
    \ 3, 1]\n            returns: [1, 2, 3, 9]\n            \"\"\"\n    \n    \"\"\
    \"\n    \n    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1cnpg9xc.py\", line 12\n    Example 1:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [10, 7, 4, 11, 2, 5, 8]\n            order_by_points(nums)\n \
    \           # [4, 7, 11, 10, 2, 5, 8]\n    \"\"\"\n    return sorted(nums)\n\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe_nd3jbn.py\", line 12\n    nums = [10, 7, 4, 11, 2, 5,\
    \ 8]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \            [-3, 6, -9, 12, 1]\n    Output:\n            [1, -3, 6, -9, 12]\n\
    \    \"\"\"\n    sum_nums = sum(nums)\n    result = []\n    for i, num in enumerate(nums):\n\
    \        if sum_nums < num:\n            result.append(nums[i - 1])\n        \
    \    result.append(num)\n            sum_nums = sum_nums - nums[i - 1]\n     \
    \   else:\n            result.append(num)\n    return result\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprtcsx6dp.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 40)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [10, 10, 8, 12, 5, 5]\n            \n            order_by_points(nums)\n\
    \            # Returns [1, 5, 10, 8, 12, 5]\n            \"\"\"\n    \"\"\"\n\
    \    nums = sorted(nums)\n    sum_nums = [num.sum() for num in nums]\n    sum_nums.sort()\n\
    \    return [i + 1 for i, num in enumerate(nums) if num.sum() == sum_nums[0]]\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpr3k5gjrb.py\", line 12\n    nums = [10, 10, 8, 12, 5,\
    \ 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 3, 6, 4, 3]\n            Output: sorted_nums = [1,\
    \ 3, 4, 3, 6]\n            \"\"\"\n\n    Input: nums: List[int]\n    Output: List[int]\n\
    \n    \"\"\"\n    ans = []\n    prev = -99999\n    for n in nums:\n        if\
    \ prev < n:\n            prev = n\n            ans.append(n)\n        elif prev\
    \ == n:\n            ans.append(n)\n        else:\n            ans.index(nums.index(prev))\n\
    \            ans.append(n)\n            prev = n\n    return ans\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi91u2e7x.py\", line 12\n    Input: nums = [1, 3, 6, 4,\
    \ 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 13, 8, 4]\n            print(order_by_points(nums))\n    \
    \        print(order_by_points(sorted(nums)))\n            print(order_by_points(nums[1:4]))\n\
    \            print(order_by_points(sorted(nums[1:4])))\n    \"\"\"\n\n    nums.sort()\n\
    \    sum = 0\n    for i in nums:\n        sum += i\n        if sum > 10:\n   \
    \         sum -= 10\n            nums.pop(sum - 1)\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0kts3fw9.py\", line 12\n    nums = [1, 13, 8, 4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 11, 13, 5, 6, 7]\n            \"\"\"\n            Your function\
    \ should return the following output:\n            [5, 6, 7, 11, 12, 13]\n\n \
    \   Function Description:\n            Complete the function below.\n\n    Params:\n\
    \            nums - a List of numbers to sort\n\n    Return:\n            List\
    \ - sorted List in ascending order\n\n    \"\"\"\n    sum_nums = []\n    for num\
    \ in nums:\n        sum_nums.append(sum(num))\n    sum_nums.sort()\n    return\
    \ sum_nums\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw99i66mi.py\", line 12\n    nums = [12, 11, 13, 5, 6,\
    \ 7]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [1, 5, 7, 2, 5]\n            ^\n            |\n            +------->\
    \ 5 + 7 = 5 + 7 = 12\n            |\n            +-------> 2 + 5 = 7 + 2 = 10\n\
    \            ^\n            |\n            +-------> 1 + 5 = 2 + 5 = 6\n     \
    \       \"\"\"\n    The result will be [6, 2, 10, 5, 7].\n            >>>\n  \
    \  \"\"\"\n    return sorted(nums)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9bkakt9p.py\", line 12\n    [1, 5, 7, 2, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [10, 20, 10, 70]\n            order_by_points(nums)\n        \
    \    # expected output: [0, 20, 10, 70]\n            \"\"\"\n    Time: O(logn)\n\
    \    Space: O(1)\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5x4p14tt.py\", line 12\n    nums = [10, 20, 10, 70]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 3, 10]\n            print(order_by_points(nums))\n       \
    \     nums = [1, 3, 10, 10]\n            print(order_by_points(nums))\n      \
    \      nums = [1, 3, 3, 10, 10, 10]\n            print(order_by_points(nums))\n\
    \            \"\"\"\n\n    Output:\n            [1, 2, 3, 4, 5]\n            [1,\
    \ 2, 3, 4, 5]\n            [1, 2, 3, 4, 5]\n            [1, 2, 3, 4, 5]\n    \"\
    \"\"\n    def sum_digits(num: int) -> int:\n        num = abs(num)\n        sum_num\
    \ = 0\n        while num > 0:\n            sum_num += num % 10\n            num\
    \ //= 10\n        return sum_num\n\n    ordered_nums = []\n    sum_nums = []\n\
    \    for num in nums:\n        sum_nums.append(sum_digits(num))\n    ordered_nums.append(min(sum_nums))\n\
    \    ordered_nums.append(max(sum_nums))\n    sorted_indexes = []\n    for i in\
    \ range(len(sum_nums)):\n        if sum_nums[i] in sum_nums[:i]:\n           \
    \ sorted_indexes.append(i)\n    ordered_nums.insert(sorted_indexes.pop(), min(sum_nums))\n\
    \    return ordered_nums\n\nprint(order_by_points([1, 3, 10]))\nprint(order_by_points([1,\
    \ 3, 10, 10]))\nprint(order_by_points([1, 3, 3, 10, 10, 10]))\n</code>\n<|/ a\
    \ |>\n<| c |>\nThank you, this solution is amazing!\n<|/ c |>\n<| c |>\nI really\
    \ liked it.  I implemented the algorithm in [this answer](https://stackoverflow.com/a/56050545/1176601)\n\
    <|/ c |>\n<| a tags=python-3.x,python,sorting |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpa59iia2j.py\", line 12\n    nums = [1, 3, 10]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [-6, 2, -5, 7, 12]\n            Output: [-6, 2, -5, 12, 7]\n \
    \           \"\"\"\n\n    Args:\n        nums (List): a list of integers\n\n \
    \   Returns:\n        List: a list of integers in the same order with which the\
    \ sum of\n        their digits is sorted\n    \"\"\"\n    return nums\n\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmdees_o3.py\", line 12\n    Input: [-6, 2, -5, 7, 12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        [10, 3, 17, 9, 5, 1] => [1, 2, 3, 5, 10, 17]\n            \"\"\"\n  \
    \  \"\"\"\n    import math\n    nums = sorted(nums, key = lambda x: math.fsum(x)\
    \ / len(x))\n    return nums\n\nprint(order_by_points(nums))\n</code>\n<|/ a tags=python,sorting\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding why and/or how this code answers the question improves its\
    \ long-term value.\n<|/ c |>\n<| a tags=python,sorting |>\n<code>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp67oadny6.py\", line 12\n    [10, 3, 17, 9, 5, 1] => [1,\
    \ 2, 3, 5, 10, 17]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [5, 1, 2, 3, 10, 8]\n            Output: [1, 2, 3, 5, 8, 10]\n\
    \n    Args:\n        nums: A list of positive integers.\n\n    Returns:\n    \
    \    Sorted list of integers.\n    \"\"\"\n    total = 0\n    for i in nums:\n\
    \        total += i\n    return [i for i in nums if total > i]\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvm1z20r7.py\", line 12\n    Input: [5, 1, 2, 3, 10, 8]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n                    nums = [1, 2, 3, 4]\n\n            Output:\n\
    \                    nums = [1, 2, 4, 3]\n\n            Explanation:\n       \
    \             nums = [10, 2, 5, 1]\n                    nums.sort() --> [1, 2,\
    \ 5, 10]\n                    nums --> [1, 2, 5, 10]\n            \"\"\"\n   \
    \ Args:\n        nums: List of integers\n    Returns:\n        Sorted list of\
    \ integers\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpndj_jml1.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [1, 5, 3, 2, 6, 4, 8, 0]\n            order_by_points(nums)\n\
    \            # result: [1, 0, 3, 2, 5, 4, 6, 8]\n            \"\"\"\n        \
    \    nums = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n            order_by_points(nums)\n \
    \           # result: [9, 1, 2, 3, 4, 5, 6, 7, 8]\n    \"\"\"\n    res=[0]\n \
    \   for i in range(1,len(nums)):\n        res[i]=res[i-1]+nums[i-1]\n    res=res[:-1]\n\
    \    return sorted(nums, key=lambda num: res[nums.index(num)])\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzhofyt6c.py\", line 12\n    nums = [1, 5, 3, 2, 6, 4,\
    \ 8, 0]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Example: Input: nums = [2, 7, 11, 15]\n            Output: [2, 11, 7,\
    \ 15]\n            Explanation: Since digits 11, 7, and 2 have same sum, \n  \
    \          order them by their index in list: [2, 1, 0, 3]\n            \"\"\"\
    \n\n            Example 2:\n            Input: nums = [6, 1, 5]\n            Output:\
    \ [1, 6, 5]\n            Explanation: Since digits 6, 1, and 5 have same sum,\
    \ \n            order them by their index in list: [1, 2, 0]\n            \"\"\
    \"\n    \"\"\"\n    # Your code here\n    new_list=[]\n    res=0\n    for i in\
    \ nums:\n        res+=i\n        if new_list==[]:\n            new_list.append(i)\n\
    \        elif res==new_list[0]:\n            new_list.append(i)\n        elif\
    \ res>new_list[0]:\n            new_list.insert(0,i)\n    print(new_list)\n  \
    \  return new_list\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6epi06pm.py\", line 12\n    Example: Input: nums = [2,\
    \ 7, 11, 15]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ nums = [1, 3, 7, 6]\n    Output: [1, 6, 3, 7]\n    Explanation: nums = [1, 1,\
    \ 7, 6], so [1, 6, 3, 7]\n    \"\"\"\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpn9on9xwy.py\", line 15\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 28)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [9, 3, 11, 4, 7, 8, 5, 12]\n            Output: [8, 7,\
    \ 9, 11, 4, 3, 5, 12]\n            \"\"\"\n    Do not sort the given array in-place.\n\
    \    \"\"\"\n    sums = []\n    for item in nums:\n        sums.append(sum(list(map(int,\
    \ str(item)))))\n    sums.sort()\n    res = []\n    for sum in sums:\n       \
    \ res.extend(list(map(int, str(sum))) + nums[sums.index(sum)])\n    return res\n\
    \"\"\"\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe8_5bu6n.py\", line 12\n    Input: nums = [9, 3, 11, 4,\
    \ 7, 8, 5, 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            5\n            1234\n            12\n           \
    \ 34\n            14\n            Output: [12, 34, 14, 1234, 5]\n            \"\
    \"\"\n\n    The original list will be modified to return this new list.\n    Time\
    \ limit: 2 secs.\n    Memory limit: 256 MB.\n    \"\"\"\n    # your code here\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdut4cyxz.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \    nums = [10, 1, 11, 5, 2, 5]\n        nums = order_by_points(nums)\n     \
    \   print(nums)\n        >>>> [1, 10, 2, 11, 5, 5]\n            \"\"\"\n    \"\
    \"\"\n    nums.sort(key=lambda x: (sum([int(d) for d in str(x)])), reverse=True)\n\
    \    return nums\n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9_ft5j02.py\", line 12\n    nums = [10, 1, 11, 5, 2, 5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums=[2,1,3,2]\n            sort_num(num)\n            \"\"\"\n     \
    \       return: [2,1,3,2]\n            nums=[2,2,2,2,2,2,2,2,2,2]\n          \
    \  sort_num(num)\n            return: [2,2,2,2,2,2,2,2,2,2]\n    \"\"\"\n    #\
    \ Your code here\n\n    return nums\n\n\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS\
    \ CELL THAT IS BELOW THIS LINE\n\"\"\"\ntests.test_order_by_points(order_by_points)\n\
    </cell>\n<text>\nMost set methods are in order and you can use the set_add, set_mul,\
    \ etc. functions. If you want to design a new set method for a data structure,\
    \ you'll have to make do with the default methods. Here's an example of a new\
    \ set method that returns a new set with two added items: set_add2 and set_mul2:\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmo2il8xs.py\", line 12\n    nums=[2,1,3,2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        INPUT\n            1 2 3 4 5\n            OUTPUT\n            1 4 5 2\
    \ 3\n            \"\"\"\n\n    SOLUTION:\n            INPUT\n            1 2 3\
    \ 4 5\n            OUTPUT\n            4 5 2 3 1\n            \"\"\"\n    Solution:\
    \ O(nlogn)\n    \"\"\"\n    TODO: write your code here\n    \"\"\"\n    nums =\
    \ sorted(nums)\n    nums.sort(key=lambda x:sum(str(x)))\n    return nums\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzhlxbt4c.py\", line 12\n    INPUT\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 3, 9, 2, 7, 6, 4, 8, 5, 13, 1, 10]\n            order_by_points(nums)\n\
    \            print(nums)\n            # Expected output: [1, 10, 2, 8, 5, 6, 9,\
    \ 7, 12, 13, 3, 4, 12]\n            \"\"\"\n    \"\"\"\n    nums_copy = nums[:]\n\
    \    points = []\n    for i in range(len(nums_copy)):\n        points.append(i)\n\
    \    points.sort()\n    point_to_nums = {point: num for point, num in enumerate(nums)}\n\
    \n    res = []\n    for i in range(len(nums_copy)):\n        res.append(nums_copy[points[i]])\n\
    \        if nums_copy[points[i]] == 0:\n            break\n\n    for i in range(len(nums_copy)):\n\
    \        nums[points[i]] = point_to_nums[points[i]]\n        nums_copy[points[i]]\
    \ = 0\n    return res\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4uq83rg2.py\", line 12\n    nums = [12, 3, 9, 2, 7, 6,\
    \ 4, 8, 5, 13, 1, 10]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    order_by_points([10,\
    \ 8, 4, 9, 100, 8, 4, 9, 100])\n\n    => [100, 8, 4, 8, 4, 9, 10, 9, 100]\n  \
    \          \"\"\"\n    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsuh_bfc6.py\", line 14\n    => [100, 8, 4, 8, 4, 9, 10,\
    \ 9, 100]\n    ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input\
    \ : nums = [1, 3]\n    Output: [1, 3]\n            \"\"\"\n            Input :\
    \ nums = [2, 3]\n            Output: [2, 3]\n    \n    Args:\n        nums (List[int]):\
    \ A list of integers.\n\n    Returns:\n        List[int]: The list of integers\
    \ in ascending order according to the sum of their digits.\n    \"\"\"\n\n   \
    \ sorted_nums = sorted(nums, key = lambda x : sum(x)/10)\n\n    return sorted_nums\n\
    </code>\n<|/ a tags=python-3.x,python,python-3.6 |>\n<| c |>\nHow about if the\
    \ digits are stored as strings?\n<|/ c |>\n<| c |>\nIt would be very helpful if\
    \ you could also share your solution using strings.\n<|/ c |>\n<| c |>\nyou can\
    \ just convert the strings to integers, instead of sum and then sort by that\n\
    <|/ c |>\n<| c |>\ni posted a solution with strings\n<|/ c |>\n<| a tags=python-3.x,python,python-3.6\
    \ dscore=3 |>\nMy solution with sorting string in descending order in Python3\
    \ using collections.OrderedDict as inspiration:\n<code>\n>>> s = \"1234\"\n>>>\
    \ [int(x) for x in str(s)]\n[1, 2, 3, 4]\n\n>>> d = collections.OrderedDict([int(x)\
    \ for x in str(s)])\n>>> d\nOrderedDict([(1, 1234), (2, 12), (3, 1), (4, 3)])\n\
    \n>>> sorted(d.values(), key=lambda x:-x[0])\n[1234, 12, 1, 3]\n\n>>> sorted(d.values(),\
    \ key=lambda x:-x[0])[::-1]\n[3, 12, 1, 1234]\n</code>\n<|/ a |>\n<| a dscore=3\
    \ |>\n<code>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqb4cx6vc.py\", line 14\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 2, 5, 7, 6, 1, 3, 4, 2]\n            Output: [1, 2, 3, 4,\
    \ 5, 6, 7, 10, 0]\n            Explanation: Add up the digits in the list and\
    \ sort them\n            in ascending order, then rearrange the digits by putting\n\
    \            the first digits to one side, and second digits to the other\n  \
    \          side.\n\n    Credits:\n            This solution is inspired by \"\
    Hackerrank: Sorting Array\"\n    \"\"\"\n    def digits_sum(n: int) -> int:\n\
    \        \"\"\"\n        Calculate the sum of n digits in base 10\n        \"\"\
    \"\n        while n:\n            n /= 10\n        return n\n\n    nums_sorted\
    \ = sorted(nums, key=lambda n: digits_sum(n))\n    sorted_digits = [nums_sorted.pop()\
    \ for _ in range(len(nums_sorted))]\n    return sorted_digits + nums_sorted\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxrr0b1_s.py\", line 12\n    Input: [10, 2, 5, 7, 6, 1,\
    \ 3, 4, 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \    [7, 28, 14, 40]\n    Output:\n    [14, 28, 40, 7]\n    Explanation: The sum\
    \ of digits is 3+5+7+4=14, so\n    14 comes first.\n            \"\"\"\n\n   \
    \ Output: None\n\n    Time complexity: O(n^2)\n    Space complexity: O(1)\n\n\
    \    Stable\n    \"\"\"\n\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmptn30mmu2.py\", line 12\n    Input:\n          ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [2, 7, 11, 15]\n            print(order_by_points(nums))\n   \
    \         # [11, 15, 7, 2]\n\n            nums = [2, 7]\n            print(order_by_points(nums))\n\
    \            # [2, 7]\n    \"\"\"\n\n    sums = []\n    for num in nums:\n   \
    \     sums.append(sum(num))\n    order = sorted(range(len(sums)), key=sums.__getitem__)\n\
    \    return sorted(nums, key=order.__getitem__)\n\n\"\"\"\n    Write a function\
    \ which finds a subset of an array with all consecutive elements\n    equal to\
    \ a given value. For example, given [3, 7, 8, 10, 1, 4], the function should return\
    \ [[10], [7], [8, 4], [3]]\n\"\"\"\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbhayvdmw.py\", line 12\n    nums = [2, 7, 11, 15]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 11, 13, 10, 5, 6, 7]\n            nums_sorted = order_by_points(nums)\n\
    \            print(nums_sorted)\n\n            >>>> [10, 11, 5, 6, 11, 13, 12]\n\
    \            \"\"\"\n    The function order_by_points should return this output:\n\
    \            [10, 11, 5, 6, 11, 13, 12]\n    \"\"\"\n    sums_sorted = list(dict.fromkeys(nums).values())\n\
    \    sorted_index_list = [index for index, element in enumerate(sums_sorted) if\
    \ element == 0]\n    for index in sorted_index_list:\n        sums_sorted.remove(index)\n\
    \    nums_sorted = list(dict.fromkeys(sums_sorted).keys())\n    return nums_sorted\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2dpjfiif.py\", line 12\n    nums = [12, 11, 13, 10, 5,\
    \ 6, 7]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1, 3, 2]\n            Output: [1, 3, 2]\n\n    Explanation:\
    \ \n            1. The sum of digits of 1, 3 and 2 is 3 + 3 = 6\n            2.\
    \ The index of each item is [1, 0, 2], which are\n            ordered by [1, 0,\
    \ 2], i.e. by the first digit.\n    \"\"\"\n    sum_of_digits = sum(nums)\n  \
    \  \n    index_of_items = []\n    \n    for i in range(len(nums)):\n        index_of_items.append(i)\n\
    \    \n    index_of_items.sort(key=lambda x : nums[x])\n    \n    return index_of_items\n\
    </cell>\n<cell>\nprint(order_by_points(nums = [1, 3, 2]))\n</cell>\n<cell>\n\"\
    \"\"\nSolution: \ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpiye7fuhm.py\", line 12\n    Input: nums = [1, 3, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [8, 7, 4, 6, 4, 2, 9, 7, 10, 12]\n            Output: [2, 4, 4,\
    \ 6, 6, 7, 7, 9, 10, 12]\n            \"\"\"\n    Input: nums = [8, 7, 4, 6, 4,\
    \ 2, 9, 7, 10, 12]\n    Output: [2, 4, 4, 6, 6, 7, 7, 9, 10, 12]\n    \"\"\"\n\
    \    sum_num = 0\n    res_list = list()\n    for i, num in enumerate(nums):\n\
    \        sum_num += num\n        res_list.append(sum_num)\n    res_list.sort()\n\
    \    return res_list\n\ndef check(candidate):\n    assert candidate([1, 11, -1,\
    \ -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145,\
    \ 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmph9w3ocl8.py\", line 12\n    Input: [8, 7, 4, 6, 4, 2,\
    \ 9, 7, 10, 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        # nums = [1, 7, 10, 1, 3, 2]\n            order_by_points(nums)\n   \
    \         # returns [1, 10, 7, 2, 3, 1]\n\n            # nums = [1, 7, 3, 2]\n\
    \            order_by_points(nums)\n            # returns [1, 3, 7, 2]\n\n   \
    \         # nums = [1, 2, 3, 1, 7, 4]\n            order_by_points(nums)\n   \
    \         # returns [1, 2, 3, 1, 7, 4]\n\n            # nums = [1, 7, 9, 1, 7,\
    \ 9, 1, 3, 9, 10, 1]\n            order_by_points(nums)\n            # returns\
    \ [1, 7, 9, 7, 9, 1, 3, 9, 10, 1]\n            \"\"\"\n\n    Solution:\n     \
    \       1. Sort by their sum of their digits\n            2. Sort the list using\
    \ the original list\n            3. Get the corresponding index\n    \"\"\"\n\
    \    sorted_nums = sorted(nums, key=lambda x: sum(x), reverse=True)\n    return\
    \ list(map(lambda x: sorted_nums.index(x) + 1, nums))\n\nprint(order_by_points(nums))\n\
    </cell>\n<text>\nFind the Largest Prime Factor\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpz_mzuw17.py\", line 13\n    order_by_points(nums)\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [2, 7, 11, 7, 12]\n            Output: [7, 7, 7, 11, 12]\n\
    \            \"\"\"\n    \"\"\"\n    \n    # Your code here\n    return sorted(nums,\
    \ key=sum)\n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy3oy0c3t.py\", line 12\n    Input: nums = [2, 7, 11, 7,\
    \ 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    list_of_nums\
    \ = [1, 7, 5, 4, 8, 3]\n    sorted(list_of_nums)\n    print(list_of_nums) # [1,\
    \ 2, 3, 4, 5, 8]\n    \"\"\"\n    # BEGIN Question 7\n    sum_nums = [num for\
    \ num in nums]\n    sum_nums.sort()\n    sorted_nums = [num for num in nums]\n\
    \    sorted_nums = [num for num in sum_nums if num in sorted_nums]\n    # END\
    \ Question 7\n    return sorted_nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjz4b3j26.py\", line 15\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 35)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    >>>\
    \ nums = [11, 18, 14, 22, 33, 12]\n    >>> order_by_points(nums)\n    [12, 11,\
    \ 14, 22, 18, 33]\n    \"\"\"\n    sums=[]\n    for n in nums:\n        sums.append(str(n).split('+')[0])\n\
    \    return sorted(nums, key=lambda n:sums.index(n))\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgypl0yis.py\", line 15\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 32)\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [4, 2, 7, 1, 4, 9]\n            Solution.order_by_points(nums)\n\
    \            > [1, 2, 4, 7, 4, 9]\n            \"\"\"\n\n    Args:\n        nums:\
    \ A list of integers\n\n    Returns:\n        sorted_nums: sorted list of integers\n\
    \    \"\"\"\n    sorted_nums = []\n    prev_digit_sum = nums[0]\n    for num in\
    \ nums:\n        digit_sum = num % 10\n        if prev_digit_sum < digit_sum:\n\
    \            sorted_nums.insert(0, num)\n        prev_digit_sum = digit_sum\n\
    \    sorted_nums.append(nums[-1])\n    return sorted_nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4fkeqphc.py\", line 12\n    nums = [4, 2, 7, 1, 4, 9]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            nums = [100, 3, 6, 7, 8, 1]\n            Output:\n\
    \            [1, 3, 8, 6, 7, 100]\n            \"\"\"\n\n    Args:\n         \
    \   nums: List[int]\n\n    Returns:\n            List[int]: sorted list\n    \"\
    \"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprl7c5kyt.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        input = [23, 45, 34, 105]\n            expected output = [45, 34, 23,\
    \ 105]\n            \"\"\"\n    \"\"\"\n    sums = []\n    for num in nums:\n\
    \        sums.append(sum(num))\n\n    sums.sort(reverse=True)\n\n    sorted_nums\
    \ = sorted(nums, key=lambda x: sums.index(x))\n    return sorted_nums\n\n\"\"\"\
    \nQuestion 1:\nWrite a function which returns True if the given string contains\
    \ a character that\nappears at least 10 times in the given string. Otherwise,\
    \ return False.\nFor example:\n            \"\"\"\n            input = \"aaa\"\
    \n            expected output = True\n            \"\"\"\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvqy2xk90.py\", line 12\n    input = [23, 45, 34, 105]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823406
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            nums = [1, 3, 5]\n            Output:\n         \
    \   [0, 2, 4]\n            Explanation:\n            1's digit = 1\n         \
    \   3's digit = 3\n            5's digit = 5\n            Total = 1 + 3 + 5 =\
    \ 8\n\n            Input:\n            nums = [9, 7, 3]\n            Output:\n\
    \            [1, 2, 0]\n            Explanation:\n            9's digit = 1\n\
    \            7's digit = 7\n            3's digit = 3\n            Total = 1 +\
    \ 7 + 3 = 10\n\n            Input:\n            nums = [0, 1, 0, 4, 5]\n     \
    \       Output:\n            [0, 1, 2, 3, 4]\n            Explanation:\n     \
    \       0's digit = 0\n            1's digit = 1\n            4's digit = 4\n\
    \            5's digit = 5\n            Total = 1 + 4 + 5 = 9\n            \"\"\
    \"\n    \"\"\"\n    My solution was to use collections.Counter. In the following\
    \ code, I will\n    first convert the given list of integers into strings and\
    \ then sort them and\n    convert the sorted list back into integers.\n    \"\"\
    \"\n    strings = [str(i) for i in nums]\n    sorted_strings = sorted(strings,\
    \ key=lambda x: sum(map(int, (x[:-1], x[1:]))))\n    nums = [int(x) for x in sorted_strings]\n\
    \    return nums\n\n\"\"\"\nNow the second part of the puzzle is about creating\
    \ a histogram function that\ntakes a list of integers and returns a dictionary\
    \ that counts how many times\neach digit appears.\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu2rim0_k.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [1, 5, 10, 2, 7, 2, 1]\n            Output: [1, 2, 1, 1, 7, 5,\
    \ 10]\n            \"\"\"\n    Args:\n        nums: List[int]\n\n    Returns:\n\
    \        List[int]\n\n    >>> order_by_points([])\n    []\n    >>> order_by_points([10,\
    \ 1, 5, 2, 7, 2, 1])\n    [1, 2, 1, 1, 7, 5, 10]\n    \"\"\"\n    pass\n\ndef\
    \ check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9rbmpejz.py\", line 12\n    Input: [1, 5, 10, 2, 7, 2,\
    \ 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [197, 29, 201, 57, 134, 134, 75]\n            Output: [201,\
    \ 29, 134, 197, 57, 75, 134]\n            \"\"\"\n\n    Args:\n            nums:\
    \ List[int]\n\n    Returns:\n            List[int]\n\n    \"\"\"\n    res = []\n\
    \    for i in range(len(nums)):\n        sum = 0\n        for j in nums:\n   \
    \         sum += j\n        if sum == i:\n            res.append(nums[i])\n  \
    \  return res\n\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11,\
    \ -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2,\
    \ 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423,\
    \ 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert\
    \ candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43,\
    \ 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2,\
    \ 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) ==\
    \ [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpn_1rqbg2.py\", line 12\n    Input: nums = [197, 29, 201,\
    \ 57, 134, 134, 75]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            [1, 8, 2, 7, 0, 4, 5, 9, 3]\n            Output:\n\
    \            [1, 8, 2, 7, 0, 4, 5, 9, 3]\n            Explanation:\n         \
    \   We break them in two groups:\n            [1, 8], [2, 7], [0, 4], [5, 9],\
    \ [3]\n            Then, sort these groups by the sum of their digits:\n     \
    \       [1, 8, 2, 7, 0, 4], [5, 9, 3], [4]\n        \"\"\"\n    \n    \"\"\"\n\
    \    Answer:\n    \"\"\"\n    nums.sort(key = sum_of_digits)\n    return nums\n\
    \    \n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpypa6o638.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ [1, 3, 8, 10, 1, 3, 9, 11]\n    Output: [1, 3, 1, 3, 8, 10, 9, 11]\n       \
    \     \"\"\"\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n\
    \        a list of integers\n    \"\"\"\n    pass\n\ndef check(candidate):\n \
    \   assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2b86qlyn.py\", line 14\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [121, 124, 3, 234, 12, 4]\n            res = sorted(order_by_digits(nums))\n\
    \            print(res)\n            # => [3, 124, 12, 234, 121, 4]\n        \
    \    \"\"\"\n    Note:\n            For Python2, please use list(nums).sort()\
    \ instead of sorted(nums).\n            And for Python3, please use nums.sort()\
    \ instead of sorted(nums).\n    Args:\n            nums (List[int]): The given\
    \ list of integers\n    Returns:\n            List[int]: The sorted list of integers\n\
    \    \"\"\"\n    nums.sort(reverse=True)\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvthk64wf.py\", line 12\n    nums = [121, 124, 3, 234,\
    \ 12, 4]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [-20, -4, 0, 8, 18, 12]\n            Output: [-4, -20, 0, 12,\
    \ 18, 8]\n            Explanation: Because -20 has the largest sum (-55),\n  \
    \          it is sorted before -4, then 0, then 8, then 12, then 18, then 20.\n\
    \            \"\"\"\n    \"\"\"\n    solution = []\n    prev_sum = 0\n\n    for\
    \ num in nums:\n        this_sum = sum(nums)\n        if prev_sum != this_sum:\n\
    \            solution.append(num)\n            prev_sum = this_sum\n\n    return\
    \ solution\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqu4iptea.py\", line 12\n    Input: [-20, -4, 0, 8, 18,\
    \ 12]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 5, 15, 4, 1]\n            Output: [1, 5, 4, 10, 15]\n   \
    \         \"\"\"\n\n    Source: https://leetcode.com/problems/order-numbers-by-sum/discuss/53680/Python-Solution\n\
    \    \"\"\"\n    res=[]\n    dict={}\n    for i,num in enumerate(nums):\n    \
    \    if num in dict:\n            res=dict[num]\n            res.append(i)\n \
    \       else:\n            dict[num]=[i]\n    res=sorted(res)\n    return res\n\
    \ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpuw8x0p1t.py\", line 12\n    Input: [10, 5, 15, 4, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [4, 3, 7, 8, 6, 4, 2, 1]\n            Output: [4, 6, 8, 4, 2,\
    \ 7, 3, 1]\n            \"\"\"\n    \n    The input \"nums\" will be in the following\
    \ order: [4, 3, 7, 8, 6, 4, 2, 1]\n    \"\"\"\n    nums = sorted(nums)\n    curr\
    \ = 0\n    sums = []\n    for i in range(len(nums)):\n        sums.append(sums[curr]\
    \ + nums[i])\n        curr = sums.index(sums[curr])\n    return nums[curr:]\n\n\
    def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11,\
    \ 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6,\
    \ 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46,\
    \ 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11,\
    \ -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n  \
    \  assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\
    \ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3ljxxylx.py\", line 12\n    Input: [4, 3, 7, 8, 6, 4,\
    \ 2, 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 11, 13, 12, 12]\n            Solution().orderByPoints(nums)\n\
    \            # [12, 12, 13, 11, 11]\n            \"\"\"\n    param nums: A list\
    \ of integers\n    return: List of integers sorted from largest to smallest\n\
    \    \"\"\"\n    sums = [num for num in nums]\n    sorted_list = [num for num\
    \ in nums]\n    sorted_list.sort(key=lambda x:sums.count(x),reverse=True)\n  \
    \  return sorted_list\n\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpj0864c17.py\", line 12\n    nums = [12, 11, 13, 12, 12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [12, 33, 44, 55]\n            order_by_points(nums)\n        \
    \    # => [44, 12, 55, 33]\n            \"\"\"\n\n    :param nums: A list of integers\n\
    \    :return: A list with the original list elements sorted in the order shown\
    \ above\n    \"\"\"\n    sums_map = [0 for i in range(10)]\n    for num in nums:\n\
    \        sums_map[num % 10] += 1\n    sorted_nums = sorted(nums, key=lambda x:\
    \ (sums_map[x%10], x%10))\n    return sorted_nums\n</code>\n<|/ a tags=sorting,python,python-3.x,arrays\
    \ |>\n<| a |>\nThis is a very good example to understand algorithms and data structures\
    \ better. It uses bubble sort.\n<code>\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxipwszio.py\", line 12\n    nums = [12, 33, 44, 55]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    >>>\
    \ order_by_points([7, 10, 11, 2])\n    [7, 11, 10, 2]\n    >>> order_by_points([1,\
    \ 5, 3, 1, 7])\n    [7, 5, 3, 1, 1]\n    >>> order_by_points([7, 10, 11, 2])\n\
    \    [7, 11, 10, 2]\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpondu5ti2.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\n\
    \            nums = [1, 3, 5]\n    Output:\n            sorted_nums = [1, 5, 3]\n\
    \n    Explanation:\n            The sum of digits in the list is 1+5+3 = 9.\n\
    \            The index of all the elements with same sum of digits are [2,0]\n\
    \            Hence, sorted_nums = [1, 5, 3]\n            \"\"\"\n    sum_nums\
    \ = 0\n    for num in nums:\n        sum_nums += num\n    return nums[sum_nums\
    \ // 10]\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12])\
    \ == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423,\
    \ 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234,\
    \ 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpb0tcnm_k.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 38)\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Input:\
    \ [3, 30, 34, 5, 12]\n    Output: [3, 5, 12, 34, 30]\n    \"\"\"\n    sums = list(map(int,\
    \ str(sum(nums))))\n    index = nums.index(max(nums))\n    return nums[::-1] +\
    \ [sums.index(i) for i in nums[index + 1:]]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234,\
    \ 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6,\
    \ 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([])\
    \ == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32,\
    \ -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6,\
    \ -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmph0z2gz3t.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 30)\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [7, 1, 8, 7, 3, 2]\n            Output: [8, 7, 7, 8, 1, 3]\n \
    \           \"\"\"\n\n    Source: LeetCode\n    https://www.leetcode.com/problems/sort-by-sum/\n\
    \    \"\"\"\n    nums = sorted(nums, key=lambda x:sum(map(int, str(x))))\n   \
    \ return nums\n\nnums = [7, 1, 8, 7, 3, 2]\norder_by_points(nums)\n</cell>\n<text>\n\
    6. Remove Duplicates\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsop70hny.py\", line 12\n    Input: [7, 1, 8, 7, 3, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [10, 7, 4, 12, 2, 5, 1]\n            Output: [1, 2, 4,\
    \ 5, 7, 10, 12]\n            \"\"\"\n    \"\"\"\n    if nums == []:\n        return\
    \ []\n    nums_sum = sum(nums)\n    order_list = []\n    order_list[:] = [n for\
    \ n in nums if n not in order_list]\n    ordered_nums = [n for n in nums if n\
    \ in order_list]\n    for n in ordered_nums:\n        index = ordered_nums.index(n)\n\
    \        order_list.append(index + nums_sum)\n    return order_list\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfkm9uqde.py\", line 12\n    Input: nums = [10, 7, 4, 12,\
    \ 2, 5, 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [10, 22, 9, 3, 17, 10]\n            Output: [3, 9, 10, 17, 22,\
    \ 10]\n            \"\"\"\n\n    Input:\n            nums: List[int]\n    Output:\n\
    \            List[int]\n    \"\"\"\n    nums.sort()\n    return nums\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqkzljo0a.py\", line 12\n    Input: [10, 22, 9, 3, 17,\
    \ 10]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            nums = [20, 4, 56, 23, 10, 8, 2, 3]\n           \
    \ Output:\n            [2, 3, 4, 8, 10, 20, 56, 23]\n            \"\"\"\n    \
    \        ```\n            Example 2:\n            Input:\n            nums = [10,\
    \ 3, 8, 20, 7, 1]\n            Output:\n            [1, 3, 7, 10, 8, 20]\n   \
    \         ```\n    \"\"\"\n    nums = sorted(nums, key=lambda x: sum(map(int,\
    \ str(x))))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpuc18q13c.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: 1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    Given\
    \ nums = [10, 8, 22, 18, 4, 33, 2, 1], return [18, 22, 8, 10, 4, 2, 33, 1].\n\
    \            \"\"\"\n\n    Args:\n        nums: List[int]\n\n    Returns:\n  \
    \      List[int]\n\n    \"\"\"\n    sum = 0\n    for i, num in enumerate(nums):\n\
    \        sum += int(num)\n    nums = sorted(nums, reverse=True)\n    nums = nums\
    \ + [sum]\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpokqd7h0j.py\", line 12\n    Given nums = [10, 8, 22, 18,\
    \ 4, 33, 2, 1], return [18, 22, 8, 10, 4, 2, 33, 1].\n          ^^^^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: nums = [1,3,2]\n            Output: nums = [1,2,3]\n\n       \
    \     Explanation:\n                    1 + 3 = 3\n                    2 + 2 =\
    \ 4\n                    3 + 1 = 4\n            \"\"\"\n\n    Args:\n        nums\
    \ (List[int]): A list of integers to sort.\n\n    Returns:\n        List[int]:\
    \ The sorted list of integers.\n    \"\"\"\n    nums = sorted(nums, key=lambda\
    \ num: sum(num))\n    return nums\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpa891t1ps.py\", line 12\n    Input: nums = [1,3,2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input:\n            nums = [7, 9, 11, 3, 7, 1, 2]\n            Output:\
    \ [1, 2, 3, 4, 7, 7, 9]\n            \"\"\"\n    \n\n    Parameters:\n       \
    \ nums: List[int] -- a list of integers\n\n    Returns:\n        List[int] --\
    \ the sorted list of integers\n\n    Examples:\n        Input:\n        nums =\
    \ [7, 9, 11, 3, 7, 1, 2]\n        Output: [1, 2, 3, 4, 7, 7, 9]\n\n    Time Complexity:\
    \ O(nlogn)\n    Space Complexity: O(1)\n    \"\"\"\n    nums.sort()\n    return\
    \ nums\n\ndef check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) ==\
    \ [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423,\
    \ 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145,\
    \ 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1,\
    \ -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert\
    \ candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6,\
    \ 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0,\
    \ 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2ch27cgq.py\", line 12\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        nums = [4, 8, 2, 10, 2, 8, 0, -2, -6, 3, 1]\n            print(order_by_points(nums))\n\
    \            # prints [4, 2, 8, 8, 10, 6, 0, -2, -6, 3, 1]\n            \"\"\"\
    \n\n    :param nums: a list of integers\n    :return: the list of integers sorted\
    \ from smallest to largest\n\n    >>> order_by_points([])\n    []\n    >>> order_by_points([4,\
    \ 8, 2, 10, 2, 8, 0, -2, -6, 3, 1])\n    [4, 2, 8, 8, 10, 6, 0, -2, -6, 3, 1]\n\
    \    >>> order_by_points([4, 8, 2, 10, 2, 8, 0, -2, -6, 3, 1])\n    [4, 2, 8,\
    \ 8, 10, 6, 0, -2, -6, 3, 1]\n    >>> order_by_points([4, 2, 8, 8, 10, 6, 0, -2,\
    \ -6, 3, 1])\n    [4, 2, 8, 8, 10, 6, 0, -2, -6, 3, 1]\n    >>> order_by_points([2,\
    \ 2])\n    []\n    >>> order_by_points([4, 8, 2, 10, 2, 8, 0, -2, -6, 3, 1])\n\
    \    [4, 2, 8, 8, 10, 6, 0, -2, -6, 3, 1]\n    >>> order_by_points([4, 2, 8, 8,\
    \ 10, 6, 0, -2, -6, 3, 1])\n    [4, 2, 8, 8, 10, 6, 0, -2, -6, 3, 1]\n    >>>\
    \ order_by_points([4, 2, 8, 8, 10, 6, 0, -2, -6, 3, 1])\n    [4, 2, 8, 8, 10,\
    \ 6, 0, -2, -6, 3, 1]\n    \"\"\"\n    import math\n    \n    nums = sorted(nums,\
    \ key=lambda x: math.sqrt(sum(x)), reverse=False)\n    return nums\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgb4xe58q.py\", line 12\n    nums = [4, 8, 2, 10, 2, 8,\
    \ 0, -2, -6, 3, 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [3, 302, 300, 10]\n            Output: [10, 300, 302, 3]\n   \
    \         Explanation: Since 3 + 30 + 30 + 3 = 10\n                          and\
    \ 3 + 30 + 30 = 10\n                          we return [10, 300, 302, 3]\n  \
    \          Input: [3, 7, 2]\n            Output: [2, 7, 3]\n            Explanation:\
    \ Since 3 + 7 + 2 = 13\n                          and 2 + 7 = 3\n            \
    \              we return [2, 7, 3]\n            Input: [1, 2, 3, 4, 5]\n     \
    \       Output: [1, 2, 3, 4, 5]\n            Explanation: Since 1 + 2 + 3 + 4\
    \ + 5 = 15\n                          and 1 + 2 + 3 + 4 = 6\n                \
    \          and 1 + 2 + 3 = 5\n                          and 1 + 2 = 4\n      \
    \                    and 1 = 2\n                          we return [1, 2, 3,\
    \ 4, 5]\n            \"\"\"\n    \"\"\"\n    My solution:\n    My first idea was\
    \ to use lambdas to sort the list of numbers and then add the digits to get a\
    \ new list.\n    After sorting, I sorted the list and took the last element. Then,\
    \ I used lambda to sort the list again,\n    because I wanted to sort a list of\
    \ numbers, but I didn't know how.\n    I came up with this solution:\n    def\
    \ order_by_points_lambda(nums: List[int]) -> List[int]:\n        my_list = nums\n\
    \        my_list.sort()\n        new_list = []\n        for i in range(0, len(my_list),\
    \ 1):\n            new_list.append(my_list[i] + my_list[i + 1])\n        my_list.sort()\n\
    \        return my_list[len(my_list) - 1]\n    After running this on paper I learned\
    \ that lambdas are used to create a function and that they can be used\n    to\
    \ create and pass functions as arguments to other functions.\n    \"\"\"\n   \
    \ return sorted(nums)[-1]\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423,\
    \ 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423,\
    \ 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n\
    \    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11,\
    \ 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) ==\
    \ [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21,\
    \ 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmh94afkq.py\", line 12\n    Input: [3, 302, 300, 10]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [2, 7, 12, 3, 10, 8, 1]\n            Output: [1, 3, 7, 10, 12,\
    \ 2, 8]\n            \"\"\"\n\n    :param nums: A list of positive integers.\n\
    \    :return: An sorted list of integers.\n    \"\"\"\n    res: List[int] = []\n\
    \    sum_cache = 0\n    for idx, num in enumerate(nums):\n        sum_cache +=\
    \ num\n        res.append(idx)\n    sorted_idxs = sorted(res)\n    return [nums[idx]\
    \ for idx in sorted_idxs]\n\ndef check(candidate):\n    assert candidate([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463,\
    \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
    \ 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n   \
    \ assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1,\
    \ 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1,\
    \ 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23,\
    \ 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxf1q52yl.py\", line 12\n    Input: [2, 7, 12, 3, 10, 8,\
    \ 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
- exit_code: -1
  program: "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n\
    \    \"\"\"\n    Write a function which sorts the given list of integers\n   \
    \ in ascending order according to the sum of their digits.\n    Note: if there\
    \ are several items with similar sum of their digits,\n    order them based on\
    \ their index in original list.\n\n    For example:\n            \"\"\"\n    \
    \        Input: [9, 3, 6, 2, 8, 7, 4, 0, 10, 5], index position of each element\
    \ is 0, 1, 2, 3, 4, 5, 6, 7, 8\n            Output: [6, 4, 8, 7, 9, 2, 10, 5,\
    \ 0, 3, 1]\n\n    Args:\n        nums: List[int], list of integers to be sorted.\n\
    \    Returns:\n        List[int], sorted list of integers in ascending order.\n\
    \    \"\"\"\n    return sorted(nums, key=sum_of_digits)\n\ndef check(candidate):\n\
    \    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert\
    \ candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46])\
    \ == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert\
    \ candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3])\
    \ == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0,\
    \ 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n\
    \    check(order_by_points)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpm4jdvzfm.py\", line 12\n    Input: [9, 3, 6, 2, 8, 7,\
    \ 4, 0, 10, 5], index position of each element is 0, 1, 2, 3, 4, 5, 6, 7, 8\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823407
