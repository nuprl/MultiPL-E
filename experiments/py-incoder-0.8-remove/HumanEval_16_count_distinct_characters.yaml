name: HumanEval_16_count_distinct_characters
language: py
prompt: "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string,\
  \ find out how many distinct characters (regardless of case) does it consist of\n\
  \            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('') == 0\n    assert candidate('abcde')\
  \ == 5\n    assert candidate('abcdecadeCADE') == 5\n    assert candidate('aaaaAAAAaaaa')\
  \ == 1\n    assert candidate('Jerry jERRY JeRRRY') == 5\n\ndef test_check():\n \
  \   check(count_distinct_characters)\n\ntest_check()\n"
completions: ["    counts = {}\n\n    for char in string:\n        if char not in\
    \ counts:\n            counts[char] = 0\n        counts[char] += 1\n\n    return\
    \ len(counts)\n\n", "    counts = dict()\n    for c in string:\n        character\
    \ = c.lower()\n        if character not in counts:\n            counts[character]\
    \ = 1\n        else:\n            counts[character] += 1\n    return len(counts)\n\
    </cell>\n<cell>", "    return len(set(string))\n\n", "    distinct_characters\
    \ = 0\n    for character in string:\n        if character.isupper():\n       \
    \     distinct_characters += 26\n        elif character.islower():\n         \
    \   distinct_characters += 27\n        elif character.isdigit():\n           \
    \ distinct_characters += 10\n        else:\n            distinct_characters +=\
    \ 1\n    return distinct_characters\n\n", "    distinct_characters = 0\n    for\
    \ character in string:\n        if character not in string.casefold() and character\
    \ not in string.upper():\n            distinct_characters += 1\n    return distinct_characters\n\
    \n", "    return len(set(string))\n", "    return len(set(string))\n\n", "   \
    \ count_distinct_characters = 0\n    for letter in string:\n        if string.count(letter)\
    \ > 1:\n            count_distinct_characters += 1\n    return count_distinct_characters\n\
    \n", "    return len(set(string))\n\n", "    \n    counts = Counter(string)\n\
    \    \n    return sum(count for count in counts.values())\n", "    return len(set(string))\n",
  "    distinctCharacters = dict()\n    for character in string:\n        if character\
    \ not in distinctCharacters:\n            distinctCharacters[character] = 1\n\
    \        else:\n            distinctCharacters[character] += 1\n    return len(distinctCharacters)\n\
    \n", "    distinct_char_count = 0\n    for char in string:\n        if char not\
    \ in string.lower():\n            distinct_char_count += 1\n    return distinct_char_count\n\
    \n", "    char_count = Counter()\n    for c in string:\n        char_count.update([c.upper()])\n\
    \        char_count.update([c.lower()])\n        char_count.update([c.title()])\n\
    \n    return sum(char_count.values())\n\n", "    characters = string.lower()\n\
    \    characters = list(characters)\n    count_of_unique_characters = 0\n    for\
    \ char in characters:\n        if char in string.lower():\n            count_of_unique_characters\
    \ += 1\n    return count_of_unique_characters\n", "    char_counter = dict()\n\
    \    for char in string:\n        if char not in char_counter:\n            char_counter[char]\
    \ = 1\n        else:\n            char_counter[char] += 1\n\n    return len(char_counter)\n\
    \n", "    if len(string) < 1:\n        return 0\n\n    count_char = set()\n  \
    \  for char in string:\n        count_char.add(char)\n\n    return len(count_char)\n",
  "    distinct_char = 0\n\n    for c in string:\n        if c.isupper():\n      \
    \      if distinct_char == 0:\n                distinct_char = 1\n           \
    \ else:\n                distinct_char += 1\n        elif c.islower():\n     \
    \       if distinct_char == 0:\n                distinct_char = 1\n          \
    \  else:\n                distinct_char += 1\n        else:\n            distinct_char\
    \ += 1\n    return distinct_char\n\n", "    return len(set(string.lower()))\n\n",
  "    return len(set(string))\n\n", "    count = 0\n    for letter in string:\n \
    \       count += string.count(letter)\n    return count\n\n", "    count = 0\n\
    \    unique_letters = {}\n    for character in string:\n        if character.isupper():\n\
    \            if character not in unique_letters:\n                unique_letters[character]\
    \ = 1\n                count += 1\n            else:\n                unique_letters[character]\
    \ += 1\n        else:\n            if character not in unique_letters:\n     \
    \           unique_letters[character] = 1\n                count += 1\n      \
    \      else:\n                unique_letters[character] += 1\n    return count\n",
  "    chars = set()\n    for char in string:\n        chars.add(char)\n    return\
    \ len(chars)\n\n", "    return len(set(string))\n\n", "    count = 1\n    \n \
    \   # iterate through all characters and increment the counter\n    for character\
    \ in string:\n        if character.isupper():\n            count += 1\n      \
    \  elif character.islower():\n            count += 1\n        elif character.isdigit():\n\
    \            count += 1\n        else:\n            continue\n    return count\n\
    \n", "    string_length = len(string)\n    distinct_characters = 0\n    for index,\
    \ letter in enumerate(string):\n        if letter.casefold() in string.casefold():\n\
    \            distinct_characters += 1\n            if index == string_length-1:\n\
    \                break\n        else:\n            distinct_characters += 1\n\
    \    return distinct_characters\n\n", "    distinct_characters = string.lower()\n\
    \    distinct_characters = distinct_characters.replace(' ', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\t', '')\n    distinct_characters = distinct_characters.replace('\\\
    n', '')\n    distinct_characters = distinct_characters.replace('\\r', '')\n  \
    \  distinct_characters = distinct_characters.replace('\\x0b', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n    distinct_characters = distinct_characters.replace('\\\
    x0c', '')\n    distinct_characters = distinct_characters.replace('\\x0c', '')\n\
    \    distinct_characters = distinct_characters.replace('\\x0c', '')\n    distinct_characters\
    \ = distinct_characters.replace('\\x0c', '')\n", "    dictionary_of_counts = dict()\n\
    \    for character in string:\n        if character not in dictionary_of_counts:\n\
    \            dictionary_of_counts[character] = 1\n        else:\n            dictionary_of_counts[character]\
    \ += 1\n    return len(dictionary_of_counts)\n", "    distinct_characters = 0\n\
    \n    for character in string:\n        if character not in string.casefold():\n\
    \            distinct_characters += 1\n    return distinct_characters\n\n", " \
    \   count = len(set(string))\n    return count\n\n", "    count = 0\n    for character\
    \ in string:\n        if character.islower():\n            count += 1\n      \
    \  elif character.isupper():\n            count += 1\n    return count\n\n", " \
    \   return len(set(string.lower()))\n\n", "    counter = 0\n    for char in string:\n\
    \        if char in string.lower():\n            counter += 1\n        elif char\
    \ in string.upper():\n            counter += 1\n    return counter\n\n", "   \
    \ \n    counts = [0] * 26\n    \n    for char in string:\n        idx = ord(char)\
    \ - ord('a')\n        counts[idx] += 1\n    \n    return counts[ord('A')]\n",
  "    distinct_characters = \"\"\n    for char in string:\n        if distinct_characters.find(char)\
    \ == -1:\n            distinct_characters += char\n    return len(distinct_characters)\n\
    \n", "    return len(set(string))\n\n", "    distinct_characters = set()\n   \
    \ for char in string:\n        if char not in distinct_characters:\n         \
    \   distinct_characters.add(char)\n    return len(distinct_characters)\n\n", " \
    \   count = len(set(string))\n    return count\n\n", "    count = 0\n    for c\
    \ in string:\n        if c.isupper():\n            count += 1\n        elif c.islower():\n\
    \            count += 1\n    return count\n\n", "    return len(set(string))\n\
    \n", "    return len(set(string))\n\n", "    \n    char_count = dict()\n    \n\
    \    for c in string:\n        char_count[c] = char_count.get(c, 0) + 1\n    \n\
    \    return sum(char_count.values())\n</cell>\n<cell>\ncount_distinct_characters('Hello')\n\
    </cell>\n<cell>\ncount_distinct_characters('asdfghjkl;')\n</cell>\n<text>\nGreat!\
    \ Now let's write a function that takes in a list of characters, and returns a\
    \ list of those characters' index numbers that it occurs in.\n\n\n</text>\n<cell>",
  "    \n    char_count = 0\n    \n    for c in string:\n        char_count += 1\n\
    \        \n    return char_count\n</cell>\n<cell>", "    count = 0\n    \n   \
    \ for c in string:\n        count += 1 if c.isalpha() or c.isdigit() else 0\n\
    \    \n    return count\n", "    distinct_characters = Counter(string)\n    distinct_characters\
    \ = [key for key, count in distinct_characters.items() if count > 1]\n    return\
    \ len(distinct_characters)\n\n", "    return len(set(string))\n", "    return\
    \ len(set(string))\n\n", "    counter = 0\n    \n    for char in string:\n   \
    \     if char.isalpha():\n            counter += 1\n            \n    return counter\n\
    \n", "    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    characters = set(string.lower())\n\
    \    characters = characters.union(set(string.upper()))\n    return len(characters)\n\
    \n", "    return len(set(string))\n\n", "    return len(set(string))\n", "   \
    \ unique_characters = set(string)\n    return len(unique_characters)\n\n", " \
    \   return len(set(string))\n\n", "    return len(set(string))\n\n", "    char_count\
    \ = collections.Counter()\n    for c in string:\n        char_count.update(c)\n\
    \    return len(char_count)\n\n", "    string = re.sub('[^A-Za-z]+', '', string)\n\
    \    return len(string)\n\n", "    return len(set(string.lower()))\n\n", "   \
    \ return len(set(string))\n\n", "    unique_characters_dict = {}\n    for character\
    \ in string:\n        if character not in unique_characters_dict:\n          \
    \  unique_characters_dict[character] = 1\n        else:\n            unique_characters_dict[character]\
    \ += 1\n    return len(unique_characters_dict)\n\n", "    str_split = string.split()\n\
    \    characters_count = 0\n    for word in str_split:\n        characters_count\
    \ += len(word)\n    return characters_count\n\n", "    count_distinct_char = 0\n\
    \    count_distinct_char += len(string) - count_distinct_char_of_lower(string)\n\
    \    count_distinct_char += len(string) - count_distinct_char_of_upper(string)\n\
    \    count_distinct_char += count_distinct_char_of_digits(string)\n    count_distinct_char\
    \ += count_distinct_char_of_special_characters(string)\n    return count_distinct_char\n\
    \n", "    distinct_count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            distinct_count += 1\n    return distinct_count\n", "    return len(set(string))\n\
    \n", "    distinct_characters_count = 1\n    for character in string:\n      \
    \  if character in string.lower():\n            distinct_characters_count += 1\n\
    \        elif character in string.upper():\n            distinct_characters_count\
    \ += 1\n    return distinct_characters_count\n\n", "    # pylint: disable=too-many-branches,too-many-locals,too-many-statements\n\
    \    # pylint: disable=too-many-return-statements\n\n    string = str(string).lower()\n\
    \    letter_count = len(list(filter(lambda letter: letter not in string.casefold(),\
    \ string)))\n    upper_case_count = len(list(filter(lambda letter: letter in string.casefold(),\
    \ string)))\n    lower_case_count = len(list(filter(lambda letter: letter in string.lower(),\
    \ string)))\n    digit = len(list(filter(lambda letter: letter in string.digits,\
    \ string)))\n    special_characters = len(list(filter(lambda letter: letter in\
    \ string.punctuation, string)))\n    return letter_count + upper_case_count +\
    \ lower_case_count + digit + special_characters\n\n", "    return len(set(string.lower()))\n",
  "    string = [char.lower() for char in string]\n    unique_string = set(string)\n\
    \    unique_characters = tuple(unique_string)\n    return len(unique_characters)\n\
    \n", "    distinct_characters = []\n    unique_characters = string.upper().replace(\"\
    \ \", \"\").lower()\n\n    for char in unique_characters:\n        if char not\
    \ in distinct_characters:\n            distinct_characters.append(char)\n\n  \
    \  return len(distinct_characters)\n\n", "    return len(set(string))\n\n", " \
    \   return len(set(string))\n\n", "    return len(set(string.lower()))\n\n", " \
    \   char_count = 0\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z']\n    for character in string:\n        if character not in alphabet:\n\
    \            continue\n        char_count += 1\n    return char_count\n\n", " \
    \   counts = {c: 0 for c in string.lower()}\n    for c in string:\n        if\
    \ c in counts:\n            counts[c] += 1\n    return len(counts)\n\n", "   \
    \ return len(set(string))\n\n", "    distinct_char_count = 0\n    string = string.upper()\n\
    \    for letter in string:\n        if letter not in string.lower():\n       \
    \     distinct_char_count += 1\n    return distinct_char_count\n\n", "    distinct_characters\
    \ = set(string)\n    return len(distinct_characters)\n\n", "    counts = {}\n\n\
    \    for letter in string:\n        if letter in counts:\n            counts[letter]\
    \ += 1\n        else:\n            counts[letter] = 1\n\n    return len(counts)\n",
  "    count_of_distinct_characters = 0\n    for character in string:\n        if\
    \ character not in string.lower():\n            count_of_distinct_characters +=\
    \ 1\n\n    return count_of_distinct_characters\n\n\n@timeit", "    counting_dict\
    \ = {}\n    for char in string:\n        if char not in counting_dict:\n     \
    \       counting_dict[char] = 0\n        counting_dict[char] += 1\n    return\
    \ len(counting_dict)\n\n", "    distinct_characters_count = 0\n\n    for character\
    \ in string:\n        if character.isupper():\n            distinct_characters_count\
    \ += 1\n        elif character.islower():\n            distinct_characters_count\
    \ += 1\n        else:\n            distinct_characters_count += 1\n\n    return\
    \ distinct_characters_count\n\n", "    # Initialize a dictionary to hold the count\
    \ of characters.\n    char_count_dic = {}\n\n    # Loop over the string.\n   \
    \ for char in string:\n        # Count the occurrence of the character in our\
    \ dictionary.\n        char_count_dic[char] = char_count_dic.get(char, 0) + 1\n\
    \n    # If the dictionary has more than one item, it means there are duplicates.\n\
    \    if len(char_count_dic) > 1:\n        # Return how many items are in the dictionary.\n\
    \        return len(char_count_dic)\n\n    # Else, no duplicates, return 1.\n\
    \    else:\n        # Return the value associated with a dictionary with a single\
    \ item.\n        return char_count_dic.values()[0]\n", "    return len(set(string))\n\
    \n", "    count = 0\n\n    # Iterate through the string and find how many different\
    \ characters does it contain.\n    for char in string:\n        if char == char.upper():\n\
    \            count += 1\n        elif char == char.lower():\n            count\
    \ += 1\n        else:\n            # If the character isn't an upper or lower\
    \ letter, it's a digit\n            count += int(char)\n\n    return count\n",
  "    unique_characters = set(string.lower())\n    return len(unique_characters)\n\
    </cell>\n<cell>", "    return len(set(string))\n\n", "    dic = {}\n    for character\
    \ in string:\n        if character in dic:\n            dic[character] += 1\n\
    \        else:\n            dic[character] = 1\n    return len(dic)\n\n", "  \
    \  string = string.lower()\n    string = re.sub(r'[^a-zA-Z]+', '', string)\n \
    \   return len(string)\n\n", "    distinct_characters = 0\n    for character in\
    \ string:\n        if character not in all_characters:\n            all_characters.append(character)\n\
    \        else:\n            distinct_characters += 1\n    return distinct_characters\n\
    \n", "    string = ''.join(list(string))\n    seen = set()\n    count = 0\n  \
    \  for c in string:\n        if c in seen:\n            count += 1\n        else:\n\
    \            seen.add(c)\n    return count\n\n", "    counts = defaultdict(int)\n\
    \    for c in string:\n        counts[c.lower()] += 1\n    for k, v in counts.items():\n\
    \        if v > 1:\n            return v\n    return 1\n", "    count = 0\n  \
    \  for c in string:\n        if c.isalpha():\n            count += 1\n    return\
    \ count\n\n", "    dic = {}\n    for letter in string:\n        dic[letter] =\
    \ dic.get(letter, 0) + 1\n    return sum(dic.values())\n\n", "    char_counts\
    \ = {}\n    for char in string:\n        if char_counts.__contains__(char):\n\
    \            char_counts[char] += 1\n        else:\n            char_counts[char]\
    \ = 1\n    return len(char_counts)\n\n", "    return len(set(string))\n\n", " \
    \   char_count = [0] * 26\n    for char in string:\n        char_count[ord(char)-ord('a')]\
    \ += 1\n\n    return len(char_count)\n</cell>\n<cell>\nprint(count_distinct_characters(\"\
    banana\"))\n</cell>\n<text>\n2. Functions\n2. 1. Functions\nIn Python, everything\
    \ is an object. In other words, variables are simply references to objects (similar\
    \ to pointers in C).\n\nThis means, that functions can be assigned to variables.\
    \ So, instead of calling my_function(my_variable), you can just call my_function.\
    \ Functions can even be defined within other functions. Let's see an example:\n\
    \n\n</text>\n<cell>", "    count = 0\n    for char in string:\n        if char.isalpha():\n\
    \            count += 1\n    return count\n\n", "    distinct_characers: int =\
    \ 0\n    for char in string:\n        if char == char.upper():\n            distinct_characers\
    \ += 2\n        elif char == char.lower():\n            distinct_characers +=\
    \ 2\n        elif char.isalpha():\n            distinct_characers += 1\n     \
    \   else:\n            distinct_characers += 1\n    return distinct_characers\n\
    \n", "    count = {}\n    for c in string:\n        count[c] = count.get(count,\
    \ 0) + 1\n    return len(count)\n\n", "    return len(set(string))\n\n", "   \
    \ count = 0\n    temp_string = string.lower()\n    for letter in temp_string:\n\
    \        if temp_string.count(letter) > 1:\n            count += 1\n    return\
    \ count\n\n", "    count = 0\n    for char in string:\n        if char.upper()\
    \ not in string.upper():\n            count += 1\n    return count\n", "    characters\
    \ = set()\n    for character in string:\n        characters.add(character)\n \
    \   return len(characters)\n\n", "    distinct_characters = 0\n    for character\
    \ in string:\n        if character not in string.lower():\n            distinct_characters\
    \ += 1\n    return distinct_characters\n\n", "    return len(set(string))\n\n",
  "    distinct_characters = set()\n    for character in string:\n        if character\
    \ not in distinct_characters:\n            distinct_characters.add(character)\n\
    \    return len(distinct_characters)\n\n", "    return len(set(string))\n\n",
  "    return len(set(string))\n\n", "    return len(set(string))\n\n", "    return\
    \ len(set(string))\n\n", "    if len(string) == 0:\n        return 0\n    return\
    \ len(set(string))\n", "    chars = {}\n\n    for ch in string.lower():\n    \
    \    if ch in chars:\n            chars[ch] += 1\n        else:\n            chars[ch]\
    \ = 1\n\n    return len(chars)\n\n", "    distinct_characters = Counter()\n  \
    \  for character in string:\n        distinct_characters.update([character.lower()])\n\
    \        distinct_characters.update([character.upper()])\n    return len(distinct_characters)\n\
    \n", "    distinct_characters = 0\n    string = string.lower()\n    for char in\
    \ string:\n        if char in string.upper():\n            distinct_characters\
    \ += 1\n    return distinct_characters\n\n", "    distinct_characters = set()\n\
    \    for character in string:\n        if character not in distinct_characters:\n\
    \            distinct_characters.add(character)\n    return len(distinct_characters)\n\
    \n", "    count = 0\n    for char in string:\n        if char.isupper():\n   \
    \         count += 1\n        elif char.islower():\n            count += 1\n \
    \       else:\n            count += 1\n    return count\n\n", "    count = 0\n\
    \    for char in string:\n        if char.islower():\n            count += 1\n\
    \        elif char.isupper():\n            count += 1\n    return count\n\n",
  "    \n    return len(set(string))\n\n", "    count = 0\n    for char in string:\n\
    \        count += 1 if char.isalpha() else 0\n    return count\n\n", "    \n \
    \   count_characters = Counter(string)\n    \n    return count_characters[1]\n\
    \    \n", "    return len(set(string))\n\n", "    return len(list(set(string)))\n\
    \n", "    characters = list(string.lower())\n    unique_characters = Counter(characters)\n\
    \    return len(unique_characters)\n\n", "    return len(set(string.upper()))\n",
  "    return len(set(string))\n\n", "    character_list = string.lower()\n    return\
    \ len(set(character_list))\n\n\n@profiler", "    return len(set(string))\n", " \
    \   distinct_characters = set([i for i, j in zip(string, string.upper()) if j\
    \ != i])\n    return len(distinct_characters)\n\n", "    distinct_characters =\
    \ 0\n    distinct_characters += len(list(string.lower()))\n    distinct_characters\
    \ += len(list(string.upper()))\n    distinct_characters += len(list(string))\n\
    \    return distinct_characters\n\n", "    number_of_distinct_characters = 0\n\
    \    for character in string:\n        if character not in string.ascii_lowercase:\n\
    \            number_of_distinct_characters += 1\n    return number_of_distinct_characters\n\
    \n", "    string = [x for x in string]\n    return len(set(string))\n\n", "  \
    \  \n    # 1. Convert the string into a list of characters\n    characters = list(string)\n\
    \    \n    # 2. Sort the characters (because of the counting algorithm) \n   \
    \ characters.sort()\n\n    # 3. Count how many distinct characters we get\n  \
    \  unique_characters = len(set(characters))\n    \n    return unique_characters\n\
    \n", "    char_count = dict()\n    for c in string:\n        char_count[c] = char_count[c]\
    \ + 1 if c in char_count else 1\n    return len(char_count.keys())\n</cell>\n\
    <text>\nChallenge 2\nWrite a function that finds the longest substring that consists\
    \ of all characters of a given string.\n\nFor example: \"abaabac\"\nYour function\
    \ should return \"aabac\".\n\n\n</text>\n<cell>", "    char_count = 0\n    char_table\
    \ = string.lower()\n\n    # for each character in string \n    for char in string:\n\
    \        if char in char_table:\n            char_count += 1\n\n    return char_count\n\
    \n", "    return len(set(string))\n", "    distinct_characters = set(string)\n\
    \    return len(distinct_characters)\n\n", "    count_distinct_characters_dict\
    \ = dict()\n    count = 1\n    \n    for char in string:\n        count_distinct_characters_dict[char]\
    \ = count_distinct_characters_dict.get(char, 0)+1\n        count += 1\n    \n\
    \    return count\n</cell>\n<cell>\ncount_distinct_characters('ABC')\n</cell>\n\
    <text>\nProblem 3\nGiven a string, return a string made of it's first two characters\
    \ swapped\ne.g. \"hello\" => \"helo\"\n\nAssume that the string will contain only\
    \ lowercase letters.\n\n\n</text>\n<cell>", "    total = 0\n    for char in string:\n\
    \        if char in string.upper():\n            total += 1\n        elif char\
    \ in string.lower():\n            total += 1\n    return total\n\n", "    count\
    \ = 0\n    for c in string:\n        count += (c.isalpha() or c.isdigit() or c\
    \ == '_')\n    return count\n\n", "    return len(set(string.lower()))\n", " \
    \   distinct_chars = {}\n\n    for char in string:\n        if char not in distinct_chars:\n\
    \            distinct_chars[char] = 1\n        else:\n            distinct_chars[char]\
    \ += 1\n\n    return len(distinct_chars)\n\n", "    distinct_count = 0\n    distinct_count\
    \ = sum(1 for char in string if char.isalpha())\n    distinct_count = distinct_count\
    \ + sum(1 for char in string if char.isdigit())\n    distinct_count = distinct_count\
    \ + sum(1 for char in string if char.isspace())\n    return distinct_count\n\n",
  "    count = 0\n    for char in string:\n        count += 1 if char.islower() else\
    \ 2\n        count += 1 if char.isupper() else 2\n        count += 1 if char.isdigit()\
    \ else 2\n        count += 1 if char == '.' else 0\n    return count\n\n", " \
    \   counts = {char: 0 for char in string}\n    for char in string:\n        counts[char]\
    \ += 1\n    return len(counts)\n</cell>\n<cell>", "    char_counter = {}\n   \
    \ for char in string:\n        if char not in char_counter:\n            char_counter[char]\
    \ = 1\n        else:\n            char_counter[char] += 1\n    return len(char_counter)\n\
    \n", "    return len(list(set(string.lower())))\n\n", "    return len(set(string))\n\
    \n", "    count = 0\n    for char in string:\n        if char.isalpha():\n   \
    \         count += 1\n    return count\n\n", "    distinct_characters = 0\n  \
    \  for char in string:\n        if char.islower():\n            distinct_characters\
    \ += 1\n        elif char.isupper():\n            distinct_characters += 1\n \
    \   return distinct_characters\n\n", "    return len(set(string.lower()))\n\n",
  "    \n    chars = set()\n    for char in string:\n        if char not in chars:\n\
    \            chars.add(char)\n    return len(chars)\n</cell>\n<cell>\ncount_distinct_characters(\"\
    WELCOME\")\n</cell>\n<cell>", "    number_of_distinct_characters = 0\n    for\
    \ char in string:\n        if char.isupper():\n            if char.islower():\n\
    \                number_of_distinct_characters += 26\n            else:\n    \
    \            number_of_distinct_characters += 26\n        else:\n            if\
    \ char.islower():\n                number_of_distinct_characters += 26\n     \
    \       else:\n                number_of_distinct_characters += 26\n    return\
    \ number_of_distinct_characters\n\n\n@total_ordering\n@total_order\n@total_order\n\
    @total_order", "    distinct_characters = dict()\n    for character in string:\n\
    \        if character not in distinct_characters:\n            distinct_characters[character]\
    \ = 1\n        else:\n            distinct_characters[character] += 1\n    return\
    \ len(distinct_characters)\n\n", "    \n    \n    counts = defaultdict(int)\n\
    \    for character in string:\n        counts[character.lower()] += 1\n      \
    \  counts[character.upper()] += 1\n    \n    return len(counts)\n\n", "    characters\
    \ = set()\n    for character in string:\n        if character not in characters:\n\
    \            characters.add(character)\n\n    return len(characters)\n\n", " \
    \   return len(set(string.casefold()))\n</cell>\n<cell>", "    return len(set(string.lower()))\n\
    \n", "    char_set = set()\n    char_count =  0\n    for char in string:\n   \
    \     char_set.add(char)\n    for char in char_set:\n        char_count +=1\n\
    \    return char_count\n\n", "    return len(set(string.upper()))\n\n", "    count_characters\
    \ = defaultdict(int)\n    for char in string:\n        count_characters[char]\
    \ += 1\n    return len(count_characters)\n</cell>\n<cell>\ncount_distinct_characters(\"\
    Hello World\")\n</cell>\n<text>\nThe most common characters in the English language\
    \ are \"a\", \"b\", \"c\" and \"d\", so counting them is very easy. However, there\
    \ are many characters that aren't very common. For example, in the string \"ehon\"\
    \ there are four os, but only three es. To count all the occurrences of a character\
    \ in a string, you can use a dictionary to map characters to their count and use\
    \ that dictionary to find the maximum value\n\n\n</text>\n<cell>", "    count\
    \ = {}\n    for char in string:\n        if char not in count:\n            count[char]\
    \ = 1\n        else:\n            count[char] += 1\n    return len(count)\n\n",
  "    \n    return len(set(string))\n\n", "    \n    characters = set()\n    \n \
    \   for character in string:\n        if character not in characters:\n      \
    \      characters.add(character)\n        \n    return len(characters)\n\n", " \
    \   return len(set(string))\n\n", "    return len(set(string))\n</cell>\n<cell>\n\
    count_distinct_characters('abba')\n</cell>\n<text>\nLet's apply this function\
    \ to the previous dataset\n\n\n</text>\n<cell>", "    count_distinct = 0\n   \
    \ string = string.lower()\n    for char in string:\n        if char in string.lower():\n\
    \            count_distinct += 1\n    return count_distinct\n", "    count = 0\n\
    \    for c in string:\n        if c.isupper():\n            count += 26\n    \
    \    elif c.islower():\n            count += 26\n        elif c.isdigit():\n \
    \           count += 10\n    return count\n\n", "    count = 0\n    for char in\
    \ string:\n        if char in string.casefold():\n            count += 1\n   \
    \ return count\n\n", "    return len(set(string))\n\n", "    count = 0\n    for\
    \ character in string:\n        count += 1\n    return count\n\n", "    return\
    \ len(set(string.lower()))\n\n", "    return len(set(string))\n\n", "    return\
    \ len(set(string))\n\n", "    distinct_char = 0\n    for char in string:\n   \
    \     if char.isalnum():\n            if char.isalpha():\n                if char.isupper():\n\
    \                    distinct_char += 1\n                elif char.islower():\n\
    \                    distinct_char += 1\n        else:\n            if char ==\
    \ \" \":\n                distinct_char += 1\n            else:\n            \
    \    distinct_char = 1\n    return distinct_char\n\n", "    characters = set()\n\
    \    for char in string:\n        if char not in characters:\n            characters.add(char)\n\
    \    return len(characters)\n\n\n@lru_cache(maxsize=None)", "    string = string.lower()\n\
    \    count_dict: Dict[str, int] = {}\n    for letter in string:\n        if letter\
    \ in count_dict:\n            count_dict[letter] += 1\n        else:\n       \
    \     count_dict[letter] = 1\n\n    return len(count_dict)\n\n", "    count =\
    \ 1\n    for char in string:\n        if char.isalpha():\n            count *=\
    \ ALPHA_TO_SIZE[char]\n    return count\n\n", "    counter = 0\n    for char in\
    \ string:\n        if char.lower() in string.lower():\n            counter +=\
    \ 1\n    return counter\n\n", "    return len(set(string))\n", "    string = string.lower()\n\
    \    total = len(string)\n    letters = set(string)\n    distinct_characters =\
    \ len(letters)\n    return distinct_characters\n\n", "    total = 0\n    for char\
    \ in string:\n        total += count_distinct_chars(char)\n    return total\n\n",
  "    return len(set(string))\n\n", "    count = 1\n    length = len(string)\n  \
    \  for i in range(length):\n        if string[i] == string[i].upper():\n     \
    \       count += 1\n        if string[i] == string[i].lower():\n            count\
    \ += 1\n    return count\n", "    return len(set(string))\n</cell>\n<text>\nExercise\
    \ 2 - Count Distinct Characters\nComplete the function below. Write a loop over\
    \ each string in the \"strings\" list, and calculate the number of distinct characters\
    \ in each string. Finally, print this count out to the screen.\n\n\n</text>\n\
    <cell>", "    count = 1\n    for c in string:\n        if c.islower():\n     \
    \       count += 1\n        elif c.isupper():\n            count += 1\n      \
    \  else:\n            pass\n    return count\n\n", "    distinct_characters =\
    \ {c for c in string if c.isalpha()}\n    return len(distinct_characters)\n",
  "    count = 0\n    \n    for char in string:\n        if char.lower() not in string.lower():\n\
    \            count += 1\n    \n    return count\n\n", "    return len(set(string))\n\
    \n", "    count = len(set(string.lower()))\n    return count\n\n", "    string\
    \ = str(string)\n    characters = dict()\n    for char in string:\n        if\
    \ char not in characters:\n            characters[char] = 1\n        else:\n \
    \           characters[char] += 1\n    return len(characters)\n", "    \n    count_distinct\
    \ = 0\n    string_length = len(string)\n\n    for i in range(0, string_length):\n\
    \        if string[i] not in string.lower():\n            count_distinct += 1\n\
    \    \n    return count_distinct\n</cell>\n<cell>", "    characters = set(string)\n\
    \    return len(characters)\n\n", "    count = 1\n    string_lower = string.lower()\n\
    \    for char in string:\n        if char == \" \":\n            count += 1\n\
    \        elif char == \"!\":\n            count += 1\n        elif char == \"\
    ?\":\n            count += 1\n        elif char == \"'\":\n            count +=\
    \ 1\n        elif char == \"(\":\n            count += 1\n        elif char ==\
    \ \")\":\n            count += 1\n        elif char == \"*\":\n            count\
    \ += 1\n        elif char == \"+\":\n            count += 1\n        elif char\
    \ == \",\":\n            count += 1\n        elif char == \".\":\n           \
    \ count += 1\n        elif char == \"/\":\n            count += 1\n        elif\
    \ char == \"(\":\n            count += 1\n        elif char == \")\":\n      \
    \      count += 1\n        elif char == \"[\":\n            count += 1\n     \
    \   elif char == \"]\":\n            count += 1\n        elif char == \"{\":\n\
    \            count += 1\n        elif char == \"}\":\n            count += 1\n\
    \        elif char == \":\":\n            count += 1\n        elif char == \"\
    ;\":\n            count += 1\n        elif char == \".\":\n            count +=\
    \ 1\n        elif char == \"@\":\n            count += 1\n        elif char ==\
    \ \"=\":\n            count += 1\n        elif char == \"-\":\n            count\
    \ += 1\n        elif char == \"_\":\n            count += 1\n        elif char\
    \ == \"/\":\n            count += 1\n        elif char == \"%\":\n           \
    \ count += 1\n        elif char == \"^\":\n            count += 1\n        elif\
    \ char == \"~\":\n            count += 1\n        elif char == \"$\":\n      \
    \      count += 1\n        elif char == \"\xA7\":\n            count += 1\n  \
    \      elif char == \"\xB1\":\n            count += 1\n        elif char == \"\
    <\":\n            count += 1\n        elif char == \"=\":\n            count +=\
    \ 1\n        elif char == \"{\":\n            count += 1\n        elif char ==\
    \ \"}\":\n            count += 1\n        elif char == \"[\":\n            count\
    \ += 1\n        elif char == \"]\":\n            count += 1\n        elif char\
    \ == \"|\":\n            count += 1\n        elif char == \"\\\\\":\n        \
    \    count += 1\n        elif char == \"^\":\n            count += 1\n       \
    \ elif char == \"~\":\n            count += 1\n        elif char == \"`\":\n \
    \           count += 1\n        elif char == \"{\":\n            count += 1\n\
    \        elif char == \"[\":\n            count += 1\n        elif char == \"\
    ]\":\n            count += 1\n        elif char == \":\":\n            count +=\
    \ 1\n        elif char == \";\":\n            count += 1\n        elif char ==\
    \ \".\":\n            count += 1\n        elif char == \"$\":\n            count\
    \ += 1\n        elif char == \"@\":\n            count += 1\n        elif char\
    \ == \"=\":\n            count += 1\n        elif char == \"*\":\n           \
    \ count += 1\n        elif char == \"&\":\n            count += 1\n        elif\
    \ char == \"^\":\n            count += 1\n        elif char == \"/\":\n      \
    \      count += 1\n        elif char", "    # use Counter to count the unique\
    \ characters \n    # use str.maketrans() to remove the upper/lowercase characters\
    \ from the string\n    # and use str.translate() to add back upper/lowercase characters\
    \ \n    counts = Counter(string.translate(string.maketrans('',''),string.islower))\n\
    \    return len(counts)\n</cell>\n<cell>", "    return len(set(string))\n\n",
  "    return len(set(string))\n\n", "    count = Counter(string.lower())\n    return\
    \ len(count)\n\n", "    string_lower = string.lower()\n    return len(string_lower)\n\
    \n", "    count = 0\n    for letter in string:\n        if letter in string.lower():\n\
    \            count += 1\n        else:\n            count -= 1\n    return count\n\
    \n", "    count = 0\n    for char in string:\n        if char.isalpha():\n   \
    \         count += 1\n    return count\n\n", "    count_distinct = 0\n\n    for\
    \ character in string:\n        if character.isalpha():\n            count_distinct\
    \ += 1\n\n    return count_distinct\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
