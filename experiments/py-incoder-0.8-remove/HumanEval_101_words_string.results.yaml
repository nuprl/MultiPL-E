language: py
name: HumanEval_101_words_string
results:
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input: s = \"dog,\
    \ cat, bird, mouse, fox\"\n        Output: [\"dog\", \"cat\", \"bird\", \"mouse\"\
    , \"fox\"]\n        \n        Input: s = \"dog, cat, mouse, bird, fox\"\n    \
    \    Output: [\"dog\", \"cat\", \"mouse\", \"bird\", \"fox\"]\n        \n    \
    \    Input: s = \"dog, cat, bird, dog, fox\"\n        Output: [\"dog\", \"cat\"\
    , \"bird\", \"dog\", \"fox\"]\n        \n        Input: s = \"\"\n        Output:\
    \ [\"\"]\n        \n        Input: s = \",dog,cat,bird,dog,fox\"\n        Output:\
    \ [\"dog\", \"cat\", \"bird\", \"dog\", \"fox\"]\n        \n        Input: s =\
    \ \",dog, dog, dog, bird, bird, fox\"\n        Output: [\"dog\", \"dog\", \"dog\"\
    , \"bird\", \"bird\", \"fox\"]\n        \n        Input: s = \",dog, cat, bird,\
    \ dog, dog, dog, fox\"\n        Output: [\"dog\", \"cat\", \"bird\", \"dog\",\
    \ \"dog\", \"dog\", \"fox\"]\n        \n        Input: s = \"dog, cat, bird, dog,\
    \ dog, dog, bird, fox, fox\"\n        Output: [\"dog\", \"cat\", \"bird\", \"\
    dog\", \"dog\", \"dog\", \"bird\", \"fox\", \"fox\"]\n    \"\"\"\n    \n    #\
    \ your code here\n    # first remove extra spaces\n    s = s.replace(' ','')\n\
    \    \n    # split words by spaces\n    words = s.split(',')\n    \n    # remove\
    \ last word if it is the same as the first\n    if words[-1] == words[0]:\n  \
    \      words.pop()\n    \n    # append the last element of list if there are multiple\
    \ words\n    if len(words) > 1:\n        words.append(words[-1])\n    \n    return\
    \ words\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpr9o_nub_.py\", line 10\n    Input: s = \"dog, cat, bird,\
    \ mouse, fox\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \"Hello, World!\"\
    \n            \n            into\n            [\n                \"Hello\", \n\
    \                \"World!\"\n            ]\n            \n            Note that\
    \ \" \" is not a word character, so a split will result in\n            \"\",\
    \ \"Hello\", \",\", \"World!\"\".\n            \n    Parameters: s: str of words\n\
    \    Returns: List of str of words\n    \"\"\"\n    return s.split()\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcib8byb5.py\", line 10\n    \"Hello, World!\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    >>> s = ',cat, dog,\
    \ mouse, fox'\n    \n    Your code should return the array ['cat', 'dog', 'mouse',\
    \ 'fox'].\n    \n    It is okay if you don't preserve the order the words appear\
    \ in the original string\n    \n    \n    >>> s = ',cat, dog, mouse, fox'\n  \
    \  >>> words_string(s)\n    ['cat', 'dog', 'mouse', 'fox']\n    >>> words_string(',cat,\
    \ dog, mouse, fox'.split(','))\n    ['cat', 'dog', 'mouse', 'fox']\n    >>> words_string('cat\
    \ , dog , mouse , fox'.split(','))\n    ['cat', 'dog', 'mouse', 'fox']\n    >>>\
    \ words_string('cat , dog , mouse , fox '.split(','))\n    ['cat', 'dog', 'mouse',\
    \ 'fox']\n    \"\"\"\n    \n    return s.split(sep=',')\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprv3kqd73.py\", line 14\n    It is okay if you don't preserve\
    \ the order the words appear in the original string\n                        \
    \ ^\nSyntaxError: unterminated string literal (detected at line 14)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, my name\
    \ is Sarah\n            I live in New York\n            I love Python\n      \
    \      \n            Expected Output\n            ------------\n            ['Hello',\
    \ 'my', 'name', 'is', 'sarah']\n            ['I', 'live', 'in', 'New', 'York']\n\
    \            ['I', 'love', 'Python']\n    \"\"\"\n    return s.split()\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqdae8224.py\", line 10\n    Hello, my name is Sarah\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"Hello\
    \ World\"\n            Output: [\"Hello\", \"World\"]\n            Input : \"\
    Hello World, how are you?\"\n            Output: [\"Hello\", \"World\", \"how\"\
    , \"are\", \"you\"]\n            \"\"\"\n    \"\"\"\n    \n    # Your code here\n\
    \    words = s.split(\",\")\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7e96jlg2.py\", line 10\n    Input : \"Hello World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \n    Input: \"Hello\
    \ World\"\n    Output: [\"Hello\", \"World\"]\n    \n    Input: \"Hello   World\"\
    \n    Output: [\"Hello\", \"World\"]\n    \"\"\"\n    return s.split(' ')\n\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8_2k5gfn.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 30)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: 'Hello, World!'\n\
    \    Output: ['Hello', 'World!']\n    \n    Note - You don't need to create a\
    \ copy of the string. You can return the result\n          in any order you want.\n\
    \    \n    Note:\n            If the string parameter is null or empty, you should\
    \ return an empty array or string.\n    \n    Constraints:\n            1 <= s.length\
    \ <= 105\n            s contains only lowercase English letters and spaces.\n\
    \    \"\"\"\n\n    \n    words = s.split(',')\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp9o16yaji.py\", line 13\n    Note - You don't need to create\
    \ a copy of the string. You can return the result\n                  ^\nSyntaxError:\
    \ unterminated string literal (detected at line 13)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World.\
    \ How are you?\n            \n            into\n            \n            ['Hello',\
    \ 'World', 'How', 'are', 'you']\n            \"\"\"\n    Args:\n        s(str):\
    \ A string of words separated by commas and spaces.\n    \n    Returns:\n    \
    \    List[str]: a list of words.\n    \"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3_d3qnce.py\", line 10\n    Hello, World. How are you?\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \n        Input: \"\
    Hello, my name is Bob.\"\n    \n        Output: [\"Hello\", \"my\", \"name\",\
    \ \"is\", \"Bob\"]\n    \n        Input: \"Bob, John, and, the, Python, language\"\
    \n    \n        Output: [\"Bob\", \"John\", \"and\", \"the\", \"Python\", \"language\"\
    ]\n    \n    Args:\n        s (str): the string of words separated by spaces.\n\
    \    \n    Returns:\n        List[str]: the list of words.\n    \"\"\"\n    \n\
    \    words = s.split(', ')\n    return [word.replace(' ', '') for word in words]\n\
    </cell>\n<text>\nRun the cell below to test your code. Run the cell below.\n\n\
    \n</text>\n<cell>\nprint(words_string('Hello, my name is Bob.'))\n</cell>\n<text>\n\
    Expected Output:\n\n['Hello', 'my', 'name', 'is', 'Bob']\n\n</text>\n<text>\n\
    A2. Merge all the words into one string.\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphy8z9_y_.py\", line 11\n    Input: \"Hello, my name is\
    \ Bob.\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            s = \"i have\
    \ a cat\"\n            split_words(s)\n            ['i', 'have', 'a', 'cat']\n\
    \            \n            s = \"a b c\"\n            split_words(s)\n       \
    \     ['a', 'b', 'c']\n    \"\"\"\n    \n    \n    \n    words = s.split(' ')\n\
    \    \n    return [word for word in words if len(word) > 0]\n    \n    \n    \n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpo9nvsahn.py\", line 10\n    s = \"i have a cat\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\
    \ -> [\"Hello\", \"World\"]\n            and,  -> [\"and\"]\n            Hello,\
    \ ,World! -> [\"Hello\", \",\", \"World\"]\n            and, , , -> [\"\"]\n \
    \           \"\"\"\n    \"\"\"\n    my_list = s.split()\n    if len(my_list) <=\
    \ 1:\n        my_list = []\n    return my_list\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpywyas497.py\", line 10\n    Hello, World! -> [\"Hello\"\
    , \"World\"]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello\
    \ World\"\n            Output: [\"Hello\", \"World\"]\n            \"\"\"\n  \
    \  \n    You may assume that the given string contains only lowercase letters\
    \ a-z.\n    \n    Follow up:\n    \n    Could you optimize your algorithm?\n \
    \   \"\"\"\n    \n    split_s = s.replace(',', ' ').split()\n    \n    return\
    \ split_s\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppvg69n8b.py\", line 10\n    Input: \"Hello World\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            s = \"the,rain,in,spain\"\
    \n            words = [\"the\", \"rain\", \"in\", \"spain\"]\n            \"\"\
    \"\n            The above code should produce the words as shown below.\n    \
    \        \"\"\"\n            \n    \n    Args:\n        s (str): the string of\
    \ words\n        \n    Returns:\n        List[str], the list of words in the string\n\
    \    \"\"\"\n    # TODO 2b: Your code here\n    \n    return list(map(lambda w:\
    \ w.strip().split(' '), s.split(',')))\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgqhw8let.py\", line 10\n    s = \"the,rain,in,spain\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n    Input:\n\
    \            s = \"cats, cats, cats, cats\"\n    Output:\n            [\"cats\"\
    , \"cats\", \"cats\", \"cats\"]\n\n    Explanation:\n            \n    cats  \
    \  cats    cats    cats\n    \n    words are separated by commas, spaces are considered\
    \ as a separate word.\n    \"\"\"\n\n    return s.replace(',', ' ').split()\n\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpws_hkshj.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"a,\
    \ b, c , d, e\"\n            Output: [\"a\", \"b\", \"c\", \"d\", \"e\"]\n   \
    \         \"\"\"\n\n    You can have multiple delimiters as well. For example:\
    \ \n            \"\"\"\n            Input : \"a,b, c,    ,  d,e\"\n          \
    \  Output: [\"a\", \"b\", \"c\", \"d\", \"e\"]\n            \"\"\"\n\n    \n \
    \   You can use split() or you can use Regex.\n    \"\"\"\n    pass\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp10imqe_e.py\", line 10\n    Input : \"a, b, c , d, e\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Hello, how are you? I'm fine, thanks\n            \n            \n       \
    \     \n            Your function should return an array with these words: Hello,\
    \ how are you? I'm fine, thanks\n            \n    \n    \"\"\"\n    return s.replace('\
    \ ', ' ').split(',')\n    \nprint(words_string(\"Hello, how are you? I'm fine,\
    \ thanks\"))\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe1t8zopg.py\", line 11\n    Hello, how are you? I'm fine,\
    \ thanks\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \"Hello World\"\
    \ > [\"Hello\", \"World\"]\n    \"\"\"\n    return s.strip().lower().split(\"\
    ,\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjupdop3t.py\", line 10\n    \"Hello World\" > [\"Hello\"\
    , \"World\"]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \n          \
    \  s = \"How many words in this string?\"\n    Output: [\n        'How',\n   \
    \     'many',\n        'words',\n        'in',\n        'this',\n        'string'\n\
    \    ]\n    \n    \n    You can assume that the string has only letters and spaces.\
    \ \n\n    \n    Note:\n        You are not allowed to use any other data structures.\n\
    \    \"\"\"\n    return s.split()\n</cell>\n<cell>\nassert words_string('How many\
    \ words in this string?') == ['How', 'many', 'words', 'in', 'this', 'string']\n\
    </cell>\n<text>\nTask 4.2\nCreate a list with all the words from the input string.\n\
    \nNote: All words are separated by a space character except for the last word.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr_0e8csx.py\", line 27\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 53)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world!\n\
    \            \n            This problem set focuses on applying Python to a small\
    \ part of NLP problems. \n            Please do not use other APIs outside this\
    \ assignment group. \n            \"\"\"\n            \n            Should return\n\
    \            ['Hello', ',', 'world', '!']\n    \"\"\"\n    return s.split()\n\
    </cell>\n<cell>\nwords_string(\"Hello, world! This problem set focuses on applying\
    \ Python to a small part of NLP problems.\")\n</cell>\n<cell>\nwords_string(\"\
    Hello, world! This problem set focuses on applying Python to a small part of NLP\
    \ problems.\").lower()\n</cell>\n<cell>\nwords_string(\"Hello, world! This problem\
    \ set focuses on applying Python to a small part of NLP problems.\").lower()[0:2]\n\
    </cell>\n<cell>\nwords_string(\"Hello, world! This problem set focuses on applying\
    \ Python to a small part of NLP problems.\").lower()[0:2] == \"hello\"\n</cell>\n\
    <cell>\nwords_string(\"Hello, world! This problem set focuses on applying Python\
    \ to a small part of NLP problems.\").lower()[0:2] != \"hello\"\n</cell>\n<text>\n\
    Practice with the split method\nIn the cell below, write a short Python function\
    \ that takes in a full name as a string and returns the first and last names given.\
    \ The function should return the strings first, middle, and last, where first\
    \ and last are the name's first and last names. All names should be given in lowercase.\n\
    \n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzcv2wisl.py\", line 10\n    Hello, world!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello\
    \ World\"\n            Output: [\"Hello\", \"World\"]\n            \n    Args:\n\
    \        s (str): A string of words separated by spaces and commas.\n    \n  \
    \  Returns:\n        List[str]: A list of words in the given string.\n    \"\"\
    \"\n    words = []\n    \n    s = s.replace(\",\", \" \")\n    \n    for word\
    \ in s.split(\" \"):\n        words.append(word)\n        \n    return words\n\
    \nassert words_string(\"Hello World\") == [\"Hello\", \"World\"]\nassert words_string(\"\
    This, is a test.\") == [\"This\", \"is\", \"a\", \"test\"]\nassert words_string(\"\
    this , is a test\") == [\"this\", \"is\", \"a\", \"test\"]\nassert words_string(\"\
    \ this ,  is a test\") == [\"this\", \"is\", \"a\", \"test\"]\nassert words_string(\"\
    \  this ,  is  a test  \") == [\"this\", \"is\", \"a\", \"test\"]\nassert words_string(\"\
    \ Hello ,  World  \") == [\"Hello\", \"World\"]\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpno_9kweq.py\", line 10\n    Input: \"Hello World\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input = \"i\
    \ like tree kangaroos\"\n            words = words_string(input)\n           \
    \ print(words) # \"['i', 'like', 'tree', 'kangaroos']\"\n            \n    Make\
    \ sure the returned array contains the original capitalization of each word.\n\
    \n    Input is guaranteed to be composed of lowercase letters only and its length\
    \ is in range [2,\n    100]\n    \"\"\"\n    \n    assert isinstance(s, str),\
    \ f\"s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str)\
    \ and len(s.strip()) >= 2, f\"s should be a string of length > 2. Received {s.__class__}\"\
    \n    assert isinstance(s, str) and len(s.strip()) <= 100, f\"s should be a string\
    \ of length <= 100. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n    assert isinstance(s, str), f\"\
    s should be a str. Received {s.__class__}\"\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkc5jh7nq.py\", line 10\n    input = \"i like tree kangaroos\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   \n            \n            \n            Hello World\n            \n    \
    \        \n            \n            \n            This has multiple lines\n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwo808lmj.py\", line 14\n    Hello World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \" a b c d e f g\"\n\
    \            \n    should return\n            ['a',\n            'b',\n      \
    \      'c',\n            'd',\n            'e',\n            'f',\n          \
    \  'g']\n    \n    \"\"\"\n    \n    # YOUR CODE HERE\n    return s.split(' ')\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwfa1p4mi.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 38)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n        Input:\
    \ \"a, b, c , d\"\n        Output: [\"a\", \"b\", \"c\", \"d\"]\n            \n\
    \            Input: \"a,b, c\"\n            Output: [\"a\", \"b\", \"c\"]\n  \
    \          \n            Input: \"a , b, c\"\n            Output: [\"a\", \"b\"\
    , \"c\"]\n            \n            Input: \"a,b , c , d\"\n            Output:\
    \ [\"a\", \"b\", \"c\", \"d\"]\n            \n            Input: \"a, b, c , d\"\
    \n            Output: [\"a\", \"b\", \"c\", \"d\"]\n            \n           \
    \ \"\"\"\n    \n    words_list = []\n    split_string = s.split(\",\")\n    for\
    \ word in split_string:\n        word = word.strip().strip()\n        if not word:\n\
    \            continue\n        words_list.append(word)\n    return words_list\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp68b672rf.py\", line 11\n    Input: \"a, b, c , d\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Given input\
    \ as string \"This is my code\", your function should return an array\n      \
    \      [\"This\", \"is\", \"my\", \"code\"]\n            \"\"\"\n    \n    Note:\n\
    \            You may assume that the string contains only lowercase English words.\n\
    \n    Args:\n            s: a string (str)\n\n    Returns:\n            List[str]:\
    \ a list of the words (list[str])\n    \"\"\"\n    words = s.lower().split(',')\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0b9b1wdu.py\", line 10\n    Given input as string \"This\
    \ is my code\", your function should return an array\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\n\
    \            How are you today?\n            \"\"\"\n\n    For the input above,\
    \ the output should be\n            [\n            'Hello', 'World!',\n      \
    \      'How', 'are', 'you', 'today', '?'\n            ]\n    \"\"\"\n    words\
    \ = []\n    for word in s.split(','):\n        words.append(word.strip())\n  \
    \  return words\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpox_jq_wp.py\", line 10\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   hello world, how are you doing today?\n            \n            \"\"\"\n\
    \            \n            should return\n            \n            [hello, world,\
    \ how, are, you, doing, today]\n    \"\"\"\n    # Your code here\n    return list(map(lambda\
    \ x: x.strip(), s.strip().split(\",\")))\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzp3wk8ha.py\", line 11\n    hello world, how are you doing\
    \ today?\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        \n            Hello,\
    \ world!\n            How are you?\n            \n            => [\"Hello\", \"\
    world\", \"How\", \"are\", \"you\"]\n    \n    Args:\n        s(str): the given\
    \ string\n\n    Returns:\n        List[str]: the list of words in the given string\n\
    \n    Example 1:\n    Input: \"Hello, world! How are you?\"\n    Output: [\"Hello\"\
    , \"world\", \"How\", \"are\", \"you\"]\n\n    Example 2:\n    Input: \"Hello,\
    \ world, how are you?\"\n    Output: [\"Hello\", \"world\", \"how\", \"are\",\
    \ \"you\"]\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptocvvynd.py\", line 11\n    Hello, world!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    >>> words_string(\"\
    Welcome to coding\") \n    ['Welcome', 'to', 'coding']\n    \n    \"\"\"\n   \
    \ \n    # Your code here\n    return s.split(\" \")\n\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpoj91luaf.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 30)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello\
    \  my name is  Zlatan \" \n            Output: [\"Hello\", \"my\", \"name\", \"\
    is\", \"Zlatan\"]\n            Explanation: \"Hello\" -> 0, \"my\" -> 1, \"name\"\
    \ -> 2, \"is\" -> 3, and \"Zlatan\" -> 4.\n\n    \"\"\"\n    return s.split()\n\
    \    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpd2rbuj9x.py\", line 10\n    Input: \"Hello  my name is\
    \  Zlatan \" \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: Hello\
    \ World Hello Universe\n            Output: ['Hello', 'World', 'Hello', 'Universe']\n\
    \            \n    \n    If you use a dictionary instead of an array, you may\
    \ assume that the string\n    does not contain duplicate words.\n\n    \"\"\"\n\
    \    \n    pass\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6u_d411y.py\", line 10\n    Input: Hello World Hello Universe\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello,\
    \ my name is Adam\"\n            Output: [\"Hello\", \"my\", \"name\", \"is\"\
    , \"Adam\"]\n            \"\"\"\n\n    Arguments:\n        s (str): A string of\
    \ words separated by spaces and commas.\n    Returns:\n        List[str]: a list\
    \ of words.\n    \"\"\"\n    return s.split() # Complete the code here.\n</cell>\n\
    <text>\nRun the following cell to test your code. Pretty self explanatory, I think?\
    \ It should return the following:\n\n\n</text>\n<cell>\nprint(\"This tests our\
    \ solution above!\")\nwords_string(\"Hello, my name is Adam\")\n</cell>\n<text>\n\
    Exercise 3\nImplement the function print_rows_with_n_columns that displays row\
    \ #3 of the given strings horizontally, with each word on a separate line.\n\n\
    For example, print_rows_with_n_columns([\"Hello\", \"my\", \"name\", \"is\", \"\
    Adam\"], 2) should return\n\nHello\nmy \nname\nis\nAdam\nhorizontally, with each\
    \ word on a separate line.\nThis is very similar to the example you just solved\
    \ -- your function should take in a list of strings and two positive integers\
    \ representing the number of columns to display.\n\nIf you need help with formatting,\
    \ check out the documentation for str.format.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9go0lpj0.py\", line 10\n    Input: \"Hello, my name is\
    \ Adam\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"apple,\
    \ banana, kumquat\"\n            Output: [\"apple\", \"banana\", \"kumquat\"]\n\
    \            \"\"\"\n\n    Args:\n        s (str): the sentence you wish to split\n\
    \n    Returns:\n        list[str]: list of words\n    \"\"\"\n    return s.split(\"\
    ,\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpn4r6_rbs.py\", line 10\n    Input: \"apple, banana, kumquat\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"apple,\
    \ banana, peach\"\n            Output: ['apple', 'banana', 'peach']\n        \
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    Write your implementation\
    \ here.\n    \"\"\"\n    words = s.split(',')\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfxpjrdx9.py\", line 10\n    Input: \"apple, banana, peach\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world.\
    \ How are you?\n            \n            > ['Hello', 'world', 'How', 'are', 'you']\n\
    \            \"\"\"\n    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppygse65l.py\", line 10\n    Hello, world. How are you?\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input: \"apple,\
    \ banana, orange, grape\"\n            output: [\"apple\", \"banana\", \"orange\"\
    , \"grape\"]\n    \"\"\"\n    return list(map(str.strip, s.split(',')))\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpazsovd3x.py\", line 10\n    input: \"apple, banana, orange,\
    \ grape\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input : \"i,\
    \ am, I, rd, uck, it, and\"\n            output : [\"i\", \"am\", \"I\", \"rd\"\
    , \"uck\", \"it\", \"and\"]\n            \"\"\"\n    \n    words = []\n    \n\
    \    for i in s.split(\",\"):\n        words.append(i.strip())\n    \n    return\
    \ words\n    \nprint(words_string(\"i, am, I, rd, uck, it, and\"))\n</cell>\n\
    <text>\nTask 4a\n\n</text>\n<cell>\n\"\"\"\nWrite a function that takes two lists\
    \ of words as arguments and returns True if the first list contains all the words\n\
    in the second list. Otherwise return False.\n\"\"\"\ndef check(candidate):\n \
    \   assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw2m4ia_w.py\", line 10\n    input : \"i, am, I, rd, uck,\
    \ it, and\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input:    \"Hello, my\
    \ name is Mary.\"\n    Output:   [\"Hello\", \"my\", \"name\", \"is\", \"Mary\"\
    , \".\"]\n\n    Please modify only one of the functions (no other code can be\
    \ added).\n    \"\"\"\n\n    # Your code here\n    \n    words=s.split()\n   \
    \ return words\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkky23y0s.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n        \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmpjcuqz_ti.py\", line\
    \ 278, in <module>\n    test_check()\n  File \"/tmp/tmpjcuqz_ti.py\", line 276,\
    \ in test_check\n    check(words_string)\n  File \"/tmp/tmpjcuqz_ti.py\", line\
    \ 268, in check\n    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name',\
    \ 'is', 'John']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"apple,\
    \ banana, orange\"\n            Output: [\"apple\", \"banana\", \"orange\"]\n\
    \            \"\"\"\n            \n            \n\n    >>> words_string(s)\n \
    \   [\"apple\", \"banana\", \"orange\"]\n    >>> words_string(\"  hello world\
    \     \")\n    [\"hello\", \"world\"]\n    \"\"\"\n\n    words = s.split(\" \"\
    )\n    return words\n\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpswmarf5p.py\", line 10\n    Input: \"apple, banana, orange\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"apple, banana,\
    \ cat\"\n    Output: [\"apple\", \"banana\", \"cat\"]\n    \n    Explanation:\
    \ Your code should return [\"apple\", \"banana\", \"cat\"]\n\n    \n    \n   \
    \ Follow up: If you have trouble solving this problem yourself, try using a string.split()\
    \ method to \n    split up the string into words.\n    \"\"\"\n    return s.replace(\"\
    ,\", \" \").split(\" \")\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvzq7yzjn.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"Hello\
    \ World\"\n            Output : [\"Hello\", \"World\"]\n            \"\"\"\n\n\
    \    Args:\n        s: a string of words separated by spaces or commas.\n\n  \
    \  Returns:\n        a list of words\n    \"\"\"\n    return [w for w in s.split(',')\
    \ if w]\n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxhac7z7c.py\", line 10\n    Input : \"Hello World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"hello world\
    \ ,how  are you\"\n    Output: [\"hello\", \"world\", \"how\", \"are\", \"you\"\
    ]\n            \"\"\"\n\n    Constraints:\n            0 <= len(s) < 1000\n  \
    \          len(s) >= 1\n            s contains only lowercase letters and space\n\
    \            len(words[i]) >= 2\n    \n    Example:\n    \n    Input: \"hello\
    \ world ,how  are you\"\n    Output: [\"hello\", \"world\", \"how\", \"are\",\
    \ \"you\"]\n    \"\"\"\n    s = s.lower()\n    words = s.split(' ')\n    words\
    \ = [word for word in words if word]\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3vny8zg8.py\", line 12\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \n          \
    \  s = \"John had a little lamb, little lamb, little lamb. John had a little lamb,\
    \ little lamb, little lamb.\"\n    Output: [\"John\", \"had\", \"a\", \"little\"\
    , \"lamb,\", \"little\", \"lamb,\", \"little\", \"lamb.\", \"John\", \"had\",\
    \ \"a\", \"little\", \"lamb,\", \"little\", \"lamb,\", \"little\", \"lamb.\"]\n\
    \    \"\"\"\n\n    # TODO\n    return s.split(' ')\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpq98pz_lq.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 29)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \" foo, bar, baz \"\
    .split()\n            -> [\"foo\", \"bar\", \"baz\"]\n    \"\"\"\n    return s.split(\"\
    ,\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbdkmorht.py\", line 11\n    -> [\"foo\", \"bar\", \"baz\"\
    ]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"apple, pear,\
    \ banana, apple\"\n    Output: [\"apple\", \"pear\", \"banana\", \"apple\"]\n\
    \            \"\"\"\n            \n    Args:\n        s (str): One line string.\n\
    \n    Returns:\n        List[str]: List of words\n    \"\"\"\n    # Your code\
    \ here\n    return s.split(\",\")\n    \n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpl7s0rbxr.py\", line 12\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input:\n   \
    \                 s = \"cat,dog,run\"\n            Output:\n                 \
    \   [\"cat\",\"dog\",\"run\"]\n            Explanation: \n                   \
    \ s = cat,dog,run\n            \n    Follow up:\n            What if the given\
    \ string ends with a comma? Or with a space?\n    \"\"\"\n    return s.split(\"\
    ,\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqkzbfmjd.py\", line 10\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"hello,\
    \ world\"\n            Output: [\"hello\", \"world\"]\n            \"\"\"\n  \
    \  \"\"\"\n    # Split string into words and return list\n    return s.split(',\
    \ ')\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4vzfgkap.py\", line 10\n    Input: \"hello, world\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   \"This is great, isn't it?\"\n            \n            should return\n  \
    \          \n            ['This', 'is', 'great', ',', 'isn\\'t', 'it', '?']\n\
    \            \n    \"\"\"\n    return s.strip().lower().split(' ')\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2im2cz_n.py\", line 11\n    \"This is great, isn't it?\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input:\n   \
    \         s = \"dog cat mouse\"\n            Output:\n            [\"dog\", \"\
    cat\", \"mouse\"]\n            \n    NOTES:\n    You may assume that the string\
    \ will contain only lowercase letters\n    and spaces separating the words.\n\
    \    \n    \n    Solution:\n    Split on spaces and commas and then map to a set\
    \ and return list\n    \"\"\"\n    s = s.replace(',', ' ').replace(' ', '').split()\n\
    \    return list(set(s))\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp25xp03yx.py\", line 10\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I like dogs.\
    \ I love cats.\n            \n            into\n            ['I', 'like', 'dogs.',\
    \ 'I', 'love', 'cats.']\n            \n    \"\"\"\n    ## TODO: Write your implementation\
    \ here.\n    #pass\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpmoer8c44.py\", line 10\n    I like dogs. I love cats.\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Hello, my name is\n            \n            John\n\n    \n            Returns\n\
    \            \n            >>>> [['Hello', 'my', 'name', 'is'], ['John']]\n  \
    \          \"\"\"\n    \n    words_str = []\n    words = s.strip().split()\n\n\
    \    for word in words:\n        words_str.append(word)\n\n    return words_str\n\
    \n\ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpyqzha6s4.py\", line 11\n    Hello, my name is\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \n    \"i like,\
    \ my good friend, how are you?\" \n\n    Output: \n    [\"i\", \"like,\", \"my\"\
    , \"good\", \"friend\", \"how\", \"are\", \"you\"]\n\n    Explanation: \n    The\
    \ original string has the words \"i\", \"like,\", \"my\", \"good\", \"friend\"\
    , \"how\", \"are\", \"you\"\n    separated with spaces.\n\n    Note: \n    You\
    \ may assume that the string will contain letters only and no spaces. \n    You\
    \ will probably need to trim leading and trailing spaces and split on\n    commas\
    \ instead of spaces.\n    \"\"\"\n    return s.replace(',', ' ').replace('?',\
    \ '').replace('.', '').split()\n\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiy8ec8tq.py\", line 24\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 39)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello world\n\
    \            This program\n            Is fun\n            I love you\n      \
    \      \"\"\"\n            Should return\n            ['Hello', 'world',\n   \
    \         'This', 'program',\n            'Is', 'fun',\n            'I', 'love',\
    \ 'you']\n            \n    Note:\n            You may assume that the string\
    \ contains no spaces.\n            \n    Arguments:\n            s (str): the\
    \ string to be converted.\n    \n    Returns:\n            words (list of str):\
    \ The list of words in the string.\n    \"\"\"\n    words: List[str] = s.split(\"\
    ,\")\n    return words\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpow4e4pdy.py\", line 10\n    Hello world\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    hello,how,are,you\n\
    \            \n    becomes\n            ['hello', 'how', 'are', 'you']\n     \
    \       \"\"\"\n    \"\"\"\n    s = []\n    for i in s.split(','):\n        s.append(i.strip())\n\
    \    return s\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6e1gif3_.py\", line 13\n    ['hello', 'how', 'are', 'you']\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \" Develop a function\
    \ that given a string, returns the number of times the string occurs in the list\n\
    \    \n    Examples:\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\n        \" Develop a function that given a string, returns\
    \ the number of times the string occurs in the list [ 'this', 'is', 'a', 'string',\
    \ 'with', 'commas', '' ]\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeqi11971.py\", line 10\n    \" Develop a function that\
    \ given a string, returns the number of times the string occurs in the list\n\
    \    ^\nSyntaxError: unterminated string literal (detected at line 10)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input : \"How much wood\
    \ would a wood chuck chuck if a wood chuck could chuck wood.\"\n    Output: [\"\
    How\", \"much\", \"wood\", \"would\", \"a\", \"wood\", \"chuck\", \"chuck\", \"\
    if\", \"a\", \"wood\", \"chuck\", \"could\", \"chuck\", \"wood\", \"wood.\"]\n\
    \            \n    Input : \"How much wood would a wood chuck chuck if a wood\
    \ chuck could chuck wood.\"\n    Output: [\"How\", \"much\", \"wood\", \"would\"\
    , \"a\", \"wood\", \"chuck\", \"chuck\", \"if\", \"a\", \"wood\", \"chuck\", \"\
    could\", \"chuck\", \"wood\", \"wood.\"]\n    \n    Input : \"How much wood would\
    \ a wood chuck chuck if a wood chuck could chuck wood.\"\n    Output: [\"How\"\
    , \"much\", \"wood\", \"would\", \"a\", \"wood\", \"chuck\", \"chuck\", \"if\"\
    , \"a\", \"wood\", \"chuck\", \"could\", \"chuck\", \"wood\", \"wood.\"]\n   \
    \ \n    Input : \"How much wood would a wood chuck chuck if a wood chuck could\
    \ chuck wood.\"\n    Output: [\"How\", \"much\", \"wood\", \"would\", \"a\", \"\
    wood\", \"chuck\", \"chuck\", \"if\", \"a\", \"wood\", \"chuck\", \"could\", \"\
    chuck\", \"wood\", \"wood.\"]\n    \n    Input : \"How much wood would a wood\
    \ chuck chuck if a wood chuck could chuck wood.\"\n    Output: [\"How\", \"much\"\
    , \"wood\", \"would\", \"a\", \"wood\", \"chuck\", \"chuck\", \"if\", \"a\", \"\
    wood\", \"chuck\", \"could\", \"chuck\", \"wood\", \"wood.\"]\n    \n    Input\
    \ : \"How much wood would a wood chuck chuck if a wood chuck could chuck wood.\"\
    \n    Output: [\"How\", \"much\", \"wood\", \"would\", \"a\", \"wood\", \"chuck\"\
    , \"chuck\", \"if\", \"a\", \"wood\", \"chuck\", \"could\", \"chuck\", \"wood\"\
    , \"wood.\"]\n    \n    Input : \"How much wood would a wood chuck \ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_3lwvjsu.py\", line 28\n    Input : \"How much wood would\
    \ a wood chuck \n            ^\nSyntaxError: unterminated string literal (detected\
    \ at line 28)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input : Hello World\
    \ \n    Output: ['Hello', 'World']\n    \n    Constraints:\n        1 \u2264 words.length\
    \ \u2264 105\n        words[i] \u2264 105\n        words[i] \u2260 \"\"\n    \
    \    words[i] != \",\"\n        words[i] != \" \"\n    \n    You can return the\
    \ answer in any order.\n    \n    words: [1,2,3,4,5,6,7]\n    \n    words: [1,2,3,4,5,6]\n\
    \    \"\"\"\n    words=s.split(\",\")\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpua8elebs.py\", line 14\n    1 \u2264 words.length \u2264\
    \ 105\n      ^\nSyntaxError: invalid character '\u2264' (U+2264)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \n            For a\
    \ challenge like this, please type your function here\n\n            def my_function(a,\
    \ b):\n                pass\n            \"\"\"\n    \n            Then type your\
    \ function here\n    \n            def my_function(a, b):\n                pass\n\
    \    \n    \n            Solution: \n    \n            def my_function(a, b):\n\
    \                return list(a.split()), list(b.split())\n            \n    \"\
    \"\"\n    if s.find(' ') != -1:\n        word_list = s.split(' ')\n        word_list.remove('')\n\
    \        return word_list\n    else:\n        return [s]\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpz1_x7t9z.py\", line 11\n    For a challenge like this,\
    \ please type your function here\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\n\
    \            \n            -> [\"Hello\", \"World\", \"!\"]\n            \n  \
    \          And then you will be given a list of words. Return all words in the\
    \ list\n            that are in the original sentence and ignore other words.\n\
    \            \n            For example:\n            [\"Hello\", \"World\", \"\
    !\"]\n            -> [\"World\"]\n            \n            \n            Note:\n\
    \            You may assume that the string will contain only ASCII characters.\n\
    \            \n    Args:\n        s(str): The given string will be splitted by\
    \ whitespace to words\n    Returns:\n        List[str]: The list of words in given\
    \ sentence\n    \"\"\"\n    \ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpagsn94am.py\", line 10\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplsr8fpf5.py\", line\
    \ 278, in <module>\n    test_check()\n  File \"/tmp/tmplsr8fpf5.py\", line 276,\
    \ in test_check\n    check(words_string)\n  File \"/tmp/tmplsr8fpf5.py\", line\
    \ 268, in check\n    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name',\
    \ 'is', 'John']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I love eating\
    \ icecream and I hate chocolate.\n            \n            Your function should\
    \ return the following list: ['I', 'love', 'eating',\n            'icecream',\
    \ 'and', 'I', 'hate', 'chocolate'].\n            \"\"\"\n    \n    s: str\n  \
    \  \n    \"\"\"\n    There are a number of ways to do this. One of the most straightforward\
    \ ways is to\n    split the string into a list of words by splitting the string\
    \ on spaces. You can\n    call the split() method of a string.\n    \n    For\
    \ example,\n    \n    my_string.split(\" \")\n    \n    will return a list where\
    \ each element of the list is a string containing a single\n    space separated\
    \ word from the original string. \n    \"\"\"\n    pass\n    \n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpoy_o4w49.py\", line 10\n    I love eating icecream and\
    \ I hate chocolate.\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            INPUT: \"Hello,\
    \ World\"\n            OUTPUT: ['Hello', 'World']\n            \n            INPUT:\
    \ \"Hello,World\"\n            OUTPUT: ['Hello','World']\n            \n     \
    \       INPUT: \"Hello   ,    World\"\n            OUTPUT: ['Hello', 'World']\n\
    \            \n            INPUT: \"Hello   ,   World\"\n            OUTPUT: ['Hello',\
    \ 'World']\n            \n            INPUT: \"Hello,World!!\"\n            OUTPUT:\
    \ ['Hello', 'World', '!!']\n            \n            INPUT: \"Hello, World!!\"\
    \n            OUTPUT: ['Hello', 'World', '!!']\n            \n            INPUT:\
    \ \"Hello  ,  World  !!!\"\n            OUTPUT: ['Hello  ,  World', '!!!']\n \
    \           \n            INPUT: \"Hello, World!!!\"\n            OUTPUT: ['Hello',\
    \ 'World', '!!!']\n            \n            INPUT: \"Hello World!!!\"\n     \
    \       OUTPUT: ['Hello', 'World', '!!!']\n            \n            INPUT: \"\
    Hello\\tWorld\"\n            OUTPUT: ['Hello', 'World']\n            \n      \
    \      INPUT: \"Hello   ,World\"\n            OUTPUT: ['Hello', 'World']\n   \
    \         \"\"\"\n    \n    words = s.split()\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmps1atk3ui.py\", line 10\n    INPUT: \"Hello, World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    string_ = \"Hello, World.\
    \ How are you?\"\n    words_ = words_string(string_)\n    assert words_ == ['Hello,',\
    \ 'World.', 'How', 'are', 'you']\n    \"\"\"\n    return s.split(sep=',' if sep\
    \ in s else '')\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeak8hase.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 27)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: 'i am\
    \ a good boy'\n            Output: ['i', 'am', 'a', 'good', 'boy']\n         \
    \   \n            Input: 'what, is, your, name, today'\n            Output: [\
    \ 'what', 'is', 'your', 'name', 'today' ]\n            \n            Input: '1,\
    \ 2, 3 , 4'\n            Output: [ '1', '2', '3', '4' ]\n    \"\"\"\n    \n  \
    \  words_split: List[str] = s.split(',')\n    return words_split\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu373scmp.py\", line 10\n    Input: 'i am a good boy'\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input string:\
    \ hello,world,foo,bar,hello,world\n            Output: [\"hello\",\"world\",\"\
    foo\",\"bar\",\"hello\",\"world\"]\n            \"\"\"\n    \n    Words can be\
    \ repeated any number of times as many times as you want.\n    The only non-repeating\
    \ words are hello and world.\n    \n    Input string s will be one of the following\
    \ forms:\n        Input string: hello,world\n        Input string: hello,world,foo\n\
    \        Input string: ,foo,bar\n        \n    You can assume that s consists\
    \ of at least one word and is separated by at least one space.\n    \n    Input\
    \ string s will be a comma separated string of one or more words.\n    \n    Input\
    \ string s will be a space separated string of one or more words.\n    \"\"\"\n\
    \    \n    # Split string on space\n    words = s.split()\n    \n    # Remove\
    \ empty string\n    words = [w for w in words if w != \"\"]\n    \n    # Remove\
    \ repeating words\n    words = list(dict.fromkeys(words))\n    \n    # Split string\
    \ on comma\n    words = s.split(',')\n    \n    # Remove empty string\n    words\
    \ = [w for w in words if w != \"\"]\n    \n    # Remove repeating words\n    words\
    \ = list(dict.fromkeys(words))\n    \n    return words\n\n    \ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcwgifppt.py\", line 10\n    Input string: hello,world,foo,bar,hello,world\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \" hello, world,\
    \ hello, world, hello, world\"\n            should be\n            [\"hello\"\
    , \"world\", \"hello\", \"world\", \"hello\", \"world\"]\n    \n    Note: You\
    \ may assume the string contains only lowercase letters a-z.\n    \"\"\"\n   \
    \ # Split string into words\n    return s.split(\" \")\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphj1xtphm.py\", line 10\n    \" hello, world, hello, world,\
    \ hello, world\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: s = \"Hello world\"\
    \n    Output: [\"Hello\", \"world\"]\n    \n    Explanation: Note that the words\
    \ can be separated either by spaces or commas.\n    \"\"\"\n    \n    word_list\
    \ = s.split()\n    return word_list\n    \ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpoayid7d0.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 30)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"This,\
    \ is, a, test, of, string\"\n            Output: [\"This\", \"is\", \"a\", \"\
    test\", \"of\", \"string\"]\n            \n            Input: \"This, is , a,\
    \ test, of, string\"\n            Output: [\"This\", \"is\", \"a\", \"test\",\
    \ \"of\", \"string\"]\n            \n            Input: \"This , is   , a  , test\
    \  , of  , string\"\n            Output: [\"This\", \"is\", \"a\", \"test\", \"\
    of\", \"string\"]\n            \n            Input: \"This,  is , a  , test  ,\
    \ of  , string\"\n            Output: [\"This\", \"is\", \"a\", \"test\", \"of\"\
    , \"string\"]\n            \"\"\"\n    Note: inputs with multiple commas and spaces\
    \ should be considered a single word.\n    \n    Input Format:\n            input_string:\
    \ a line of text with words separated by commas or spaces.\n    \n    Constraints:\n\
    \            1 \u2264 inputString.length \u2264 100\n            1 \u2264 inputString.indexOf(inputString)\
    \ \u2264 inputString.indexOf(\" \", inputString.indexOf(inputString))\n    \n\
    \    Output Format:\n            A list of words in the input string.\n    \"\"\
    \"\n    # YOUR CODE HERE\n    words = s.split(\",\")\n    \n    words = [s.strip()\
    \ for s in words]\n    words = [w.strip() for w in words]\n    words = [w.strip()\
    \ for w in words]\n    words = [w.strip() for w in words]\n    words = [w.strip()\
    \ for w in words]\n    \n    return words\n            \n    \ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpr_k21ffy.py\", line 10\n    Input: \"This, is, a, test,\
    \ of, string\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"apple,\
    \ banana, orange\"\n            Output: [\"apple\", \"banana\", \"orange\"]\n\
    \            \"\"\"\n    \n    \n\nInput:\n    A list of strings, each of which\
    \ represents a single line of text.\n\nOutput: a list of strings, where each string\
    \ is one line of text.\n\nExample:\n    Given [\"Apple, Banana, Orange\", \"Grapes,\
    \ Plum, Apple\"],\n    You should return [\n            [\"Apple\", \"Banana\"\
    , \"Orange\"],\n            [\"Grapes\", \"Plum\", \"Apple\"]\n        ].\n\"\"\
    \"\ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpx8fm4mg9.py\", line 10\n    Input: \"apple, banana, orange\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        \n            Hello\
    \ World\n            \n            \n            Output:\n            ['Hello',\
    \ 'World']\n            \n            \n            \n            Input:\n   \
    \         Hello, World\n            \n            \n            Output:\n    \
    \        ['Hello', 'World']\n    \"\"\"\n    return s.split()\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1za8ytmw.py\", line 11\n    Hello World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hi, I\"m a dog.\
    \ I am\"not a cat\"\n            I am\n            I am\n            I am\n  \
    \          I am\n            I am\n            \"\"\"\n            Should return\n\
    \            [\n                \"Hi\", \"I\", \"am\", \"a\", \n             \
    \   \"dog\", \"I\", \"not\", \"a\", \"cat\", \n                \"I\", \"am\",\
    \ \"I\", \"am\", \"I\", \n                \"am\", \"I\", \"am\", \"I\", \"am\"\
    , \n                \"I\", \"am\", \"I\", \"am\", \"I\"\n            ]\n    \"\
    \"\"\n    # Split string into list and removes whitespace\n    s = s.split()\n\
    \    \n    # Return list of words\n    return s\n\n\ndef check(candidate):\n \
    \   assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpne_5rq37.py\", line 10\n    Hi, I\"m a dog. I am\"not\
    \ a cat\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    >>> s = 'the, weather,\
    \ is, good'\n    >>> words_string(s)\n    ['the', 'weather', 'is', 'good']\n \
    \   \n    Note:\n            You may assume that the string contains no more than\
    \ 20,000 characters.\n            \n    Write a function that returns a list of\
    \ words from a given string.\n    \"\"\"\n    split_str = ''\n    words = []\n\
    \    if len(s) > 20000:\n        return\n    else:\n        for char in s:\n \
    \           if char != ',' and char != ' ':\n                split_str += char\n\
    \            elif char == ',' and split_str not in ['', ',', '']:\n          \
    \      split_str += ','\n            elif char == ' ' and split_str not in ['',\
    \ ' ', ' ', '']:\n                split_str += ' '\n            elif char == ','\
    \ and split_str in ['', ' ', ' ']:\n                words.append(split_str)\n\
    \                split_str = ''\n            if char == ',' or char == ' ':\n\
    \                words.append(split_str)\n                split_str = ''\n   \
    \ words.append(split_str)\n    return words\n\nprint(words_string('the, weather,\
    \ is, good'))\nprint(words_string('the, weather, is,good'))\n\nassert words_string('the,\
    \ weather, is,good') == ['the', 'weather', 'is', 'good']\nassert words_string('the,\
    \ weather, is,good') == 'the,weather,is,good'\nassert words_string('') == []\n\
    assert words_string('the weather is good') == ['the', 'weather', 'is', 'good']\n\
    assert words_string(' the weather is good') == ['the', 'weather', 'is', 'good']\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcv14322_.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 61)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Given s = \"\
    firstWord , secondWord\",\n            Return: [\"firstWord\", \"secondWord\"\
    ]\n            \"\"\"\n\n    Input: \"firstWord , secondWord\"\n    Output: [\"\
    firstWord\", \"secondWord\"]\n    \"\"\"\n    return s.split(',')\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpaed25ab1.py\", line 10\n    Given s = \"firstWord , secondWord\"\
    ,\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: hello,world,how,are,you\n\
    \    Output: ['hello', 'world', 'how', 'are', 'you']\n            \"\"\"\n   \
    \ \n    Note: You will need to use Python's split() function. \n    \"\"\"\n \
    \   words = s.split(',')\n    \n    return words\n\ndef check(candidate):\n  \
    \  assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6ahcoabq.py\", line 10\n    Input: hello,world,how,are,you\n\
    \                ^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   s = 'dog, cat, mouse, love, python'\n            \n            returns:\n\
    \            ['dog', 'cat', 'mouse', 'love', 'python']\n            \n       \
    \     \n            s = 'dog, cat, mouse, love'\n            \n            returns:\n\
    \            ['dog', 'cat', 'mouse', 'love']\n            \n            \n   \
    \         s = 'dog, cat'\n            \n            returns:\n            ['dog',\
    \ 'cat']\n            \n            \n            s = 'dog, cat, mouse'\n    \
    \        \n            returns:\n            ['dog', 'cat', 'mouse']\n       \
    \     \"\"\"\n        \n    Examples:\n        \n    Inputs:\n            s =\
    \ 'dog, cat, mouse, love, python'\n    Outputs:\n            ['dog', 'cat', 'mouse',\
    \ 'love', 'python']\n            \n    \n    Inputs:\n            s = 'dog, cat,\
    \ mouse, love'\n    Outputs:\n            ['dog', 'cat', 'mouse', 'love']\n  \
    \          \n            \n    Inputs:\n            s = 'dog, cat'\n    Outputs:\n\
    \            ['dog', 'cat']\n            \n            \n    Inputs:\n       \
    \     s = 'dog, cat, mouse'\n    Outputs:\n            ['dog', 'cat', 'mouse']\n\
    \            \n            \n    Inputs:\n            s = 'dog, cat, mouse, love,\
    \ python'\n    Outputs:\n            ['dog', 'cat', 'mouse', 'love', 'python']\n\
    \            \n    \"\"\"\n    # Add your code here\n    \n    return []\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcp0i25hl.py\", line 11\n    s = 'dog, cat, mouse, love,\
    \ python'\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input : \"dog,\
    \ cat, mouse\"\n            output: [\"dog\", \"cat\", \"mouse\"]\n    \n    Args:\n\
    \        s: string of words (words separated by spaces)\n    Returns:\n      \
    \  List of strings (the words in the string)\n    \"\"\"\n    words = s.split('\
    \ ')\n    return words\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy4p4_fte.py\", line 10\n    input : \"dog, cat, mouse\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input: \"I am a\
    \ dog\"\n        Output: [\"I\", \"am\", \"a\", \"dog\"]\n        Explanation:\
    \ You will create the list `words` from the string `s.\n        \n    \n    \"\
    \"\"\n    return s.split(\",\")\n\nassert words_string(\"I am a dog\") == [\"\
    I\", \"am\", \"a\", \"dog\"]\nassert words_string(\"I am a cat\") == [\"I\", \"\
    am\", \"a\", \"cat\"]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpq45dqpr0.py\", line 10\n    Input: \"I am a dog\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input =\"dog,\
    \ cat, mouse, run\"\n            output = [\"dog\", \"cat\", \"mouse\", \"run\"\
    ]\n            \"\"\"\n    \n    \n    \n    Input Format:\n            A single\
    \ string containing comma separated words.\n    \n    Output Format:\n       \
    \     A list of words that make up the given string.\n    \n    Constraints:\n\
    \        1 <= s.length <= 100\n        s contains only lowercase English letters,\
    \ digits, and spaces.\n    \"\"\"\n    words = [word for word in s.replace(' ',\
    \ '').split(',') if word != '']\n    return words\n\ndef check(candidate):\n \
    \   assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnh127y2_.py\", line 10\n    input =\"dog, cat, mouse,\
    \ run\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"Hello, playground\"\
    \n    Output: [\"Hello\", \"playground\"]\n    \n    \n    You may assume that\
    \ the string does not contain any commas.\n    You may assume the string contains\
    \ only lowercase letters.\n    \"\"\"\n    return s.split(' ')\n    \n</cell>\n\
    <cell>\nassert words_string(\"Hello, playground\") == [\"Hello\", \"playground\"\
    ]\n</cell>\n<text>\nOnce you have tested out your words_string, you can call it\
    \ like this:\n\n</text>\n<cell>\nwords = \"Hello, playground\"\nprint(words_string(words))\n\
    </cell>\n<text>\nExercise: Split up this string into sentences whenever there\
    \ is a period followed by a space or apostrophe. This is how we define a sentence\
    \ and remove punctuation.\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpswwbxhwr.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 47)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello\
    \ World\"\n            Output: [\"Hello\", \"World\"]\n            \"\"\"\n  \
    \  \"\"\"\n    words = s.split()\n    return words\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxgj5czg_.py\", line 10\n    Input: \"Hello World\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello,\
    \ my name is Peter\"\n            Output: [\"Hello\", \"my\", \"name\", \"is\"\
    , \"Peter\"]\n            \n            Input: \"Hello, my name\"\n          \
    \  Output: [\"Hello\", \"my\", \"name\"]\n            \"\"\"\n    Args:\n    \
    \    s (str): The string containing words separated by commas and spaces.\n  \
    \  Returns:\n        list: List of words.\n    Examples:\n        Input: \"Hello,\
    \ my name is Peter\"\n        Output: [\"Hello\", \"my\", \"name\", \"is\", \"\
    Peter\"]\n        \n        Input: \"Hello, my name\"\n        Output: [\"Hello\"\
    , \"my\", \"name\"]\n    \"\"\"\n    \n    return s.replace(\",\",\" \").split()\n\
    \    \n    \ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3g_69duy.py\", line 10\n    Input: \"Hello, my name is\
    \ Peter\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input: \"apple,\
    \ banana, coconut\"\n            output: [\"apple\", \"banana\", \"coconut\"]\n\
    \            \"\"\"\n    \n    words = []\n    \n    # TODO: Your code here\n\
    \    # Your code here\n    \n    return words\n\n\ndef check(candidate):\n   \
    \ assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptfip6ane.py\", line 10\n    input: \"apple, banana, coconut\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"i\
    \ love you\"\n            Output: [\"i\", \"love\", \"you\"]\n            \"\"\
    \"\n            \n    In this case the input string is \"i love you\"\n    \"\"\
    \"\n    words = s.split()\n    return words\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp85yq6dgb.py\", line 10\n    Input : \"i love you\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I love my home\n\
    \            I love my job\n            I love my soul\n            \"\"\"\n\n\
    \    should return ['I', 'love', 'my', 'home',\n                    'I', 'love',\
    \ 'my', 'job',\n                    'I', 'love', 'my', 'soul']\n    \n    Words\
    \ with punctuation are ignored and should be treated as individual words.\n  \
    \  So \"I 'love' my home\" should just be one word.\n    \n    Words with non-alphanumeric\
    \ characters are ignored completely.\n    So \"I'm\" is a word, not \"I'm\".\n\
    \    \n    You should include surrounding whitespace.\n    So \"I    love    my\
    \   home\" should still be one word.\n    \n    @param s: a string of comma separated\
    \ words\n    \n    @return: A list of strings\n    \"\"\"\n    return s.split(\"\
    ,\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsv0z4wby.py\", line 10\n    I love my home\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: Hello\
    \ World, How are you?\n            Output: [Hello, World, How, are, you?]\n  \
    \          \n            Input: Hello World, How, are, you?\n            Output:\
    \ [Hello, World, How, are, you?]\n            \n            Input: HELLO WORLD,\
    \ HOW, ARE, YOU?\n            Output: [HELLO WORLD, HOW, ARE, YOU?]\n        \
    \    \n            Input: Hello, World, How, are, you?\n            Output: [Hello,\
    \ World, How, are, you?]\n            \n            Input: Hello, World, How,\
    \ are, you!\n            Output: [Hello, World, How, are, you!]\n            \n\
    \            Input: Hello,World,How,are,you?\n            Output: [Hello,World,How,are,you?]\n\
    \            \n            Input: Hello,World,How,are,you!\n            Output:\
    \ [Hello,World,How,are,you!]\n            \"\"\"\n            \n    \n    Please\
    \ complete the function below.\n    \"\"\"\n    words = s.strip().replace(',','').split()\n\
    \    words = [w for w in words if len(w)>1]\n    return words\n    \n    \n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpa9z3ku0w.py\", line 10\n    Input: Hello World, How are\
    \ you?\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"Apple,is,a,day,in,the,USA\"\
    \n    Output: [\"Apple\",\"is\",\"a\",\"day\",\"in\",\"the\",\"USA\"]\n    Explanation:\
    \ \n    The input string Apple, is, a, day, in, the, USA has been broken into\
    \ 4 words,\n    Apple, is, a, day, in, and the.\n    \"\"\"\n    words = []\n\
    \    for i in s.split(\",\"):\n        words.append(i.strip())\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpit9rr2c2.py\", line 15\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 32)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello World\n\
    \            \"\"\"\n            becomes\n            ['Hello', 'World']\n   \
    \ \n    \n    Parameters: s: str (string)\n    Precondition: s is a string of\
    \ words (string) separated with spaces or commas\n    \"\"\"\n    return s.split()\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpp02opffk.py\", line 10\n    Hello World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World\n\
    \            \n            -> ['Hello', 'World']\n            \n            If\
    \ the input string is empty, the function should return an empty list.\n     \
    \       \"\"\"\n    \n    words = s.lower().split(\" \")\n    return words\n\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjgft75u8.py\", line 10\n    Hello, World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"hello, world\"\
    \n    Output: [\"hello\", \"world\"]\n\n    Args:\n        s(str): a string\n\n\
    \    Returns:\n        List[str]): a list of string\n    \"\"\"\n    return s.replace('\
    \ ', ',').split(',')\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpaoxo2p3b.py\", line 17\n    List[str]): a list of string\n\
    \             ^\nSyntaxError: unmatched ')'\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Example Input:\n\
    \            Input: \"Hello World\"\n            Output: [\"Hello\", \"World\"\
    ]\n            \n            Example 2:\n            Input: \"Hello , World\"\n\
    \            Output: [\"Hello\", \"World\"]\n            \n            Example\
    \ 3:\n            Input: \"Hello,   World\"\n            Output: [\"Hello\", \"\
    World\"]\n            \n            Note:\n            You may assume that the\
    \ string is ASCII-encoded uppercase characters.\n    \"\"\"\n    return s.split(\"\
    ,\")\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1j1woeuy.py\", line 10\n    Example Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world!\n\
    \            How are you?\n            Goodbye, world!\n            \"\"\"\n \
    \           Should return\n            ['Hello,', 'world!', 'How', 'are', 'you?',\
    \ 'Goodbye', 'world!']\n            \n    You can assume that the string will\
    \ contain only lowercase or uppercase letters\n    and there will never be any\
    \ punctuation marks in your string.\n    \"\"\"\n    words = s.split()\n    return\
    \ words\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdwstofns.py\", line 10\n    Hello, world!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input:  \"hello,\
    \ world\"\n        Output: ['hello', 'world']\n    \"\"\"\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp85phs5mh.py\", line 10\n    Input:  \"hello, world\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"hello\
    \ world\"\n            Output: [\"hello\", \"world\"]\n            \"\"\"\n  \
    \  \"\"\"\n    # your code goes here\n    # s = str(s)\n    words = s.split(\"\
    ,\")\n    return words\n\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppagctowp.py\", line 10\n    Input: \"hello world\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"A,\
    \ B, C\"\n            Output: [ \"A\", \"B\", \"C\" ]\n            \"\"\"\n  \
    \  \n    The string will only contain letters (uppercase or lowercase), \",\"\
    , and \" \".\n    \n    Words will be seperated by single spaces. No spaces will\
    \ be included in the words.\n    \n    Input will be given as a single string.\n\
    \    \"\"\"\n    \n    # Split string into words list\n    l = s.split()\n   \
    \ \n    # Convert to list of strings\n    li = []\n    for word in l:\n      \
    \  li.append(word)\n        \n    return li\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp973y7enj.py\", line 10\n    Input: \"A, B, C\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello,  World\n\
    \            \"\"\"\n            into\n            ['Hello', 'World']\n    \n\
    \    Args:\n        s (str): the comma separated words as a string\n\n    Returns:\n\
    \        list[str]: a list of words in the string\n    \"\"\"\n    \n    return\
    \ s.split(\",\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvfjauh9r.py\", line 10\n    Hello,  World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello World\n\
    \            this is some text\n            \"\"\"\n            \n           \
    \ into:\n            ['Hello', 'World', 'this', 'is', 'some', 'text']\n    \"\"\
    \"\n    def f(a: str) -> str:\n        return a.split(\",\")\n    return list(map(f,\
    \ s))\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu1qua3pj.py\", line 10\n    Hello World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   \"dog, cat, mouse\" -> [\"dog\", \"cat\", \"mouse\"]\n            \"dog, cat,\
    \ mouse, bird\" -> [\"dog\", \"cat\", \"mouse\", \"bird\"]\n            \"dog\
    \ , cat , mouse , bird\" -> [\"dog\", \"cat\", \"mouse\", \"bird\"]\n        \
    \    \"dog, cat, mouse , bird\" -> [\"dog\", \"cat\", \"mouse\", \"bird\"]\n \
    \           \"dog, cat , mouse , bird\" -> [\"dog\", \"cat\", \"mouse\", \"bird\"\
    ]\n            \"dog,cat,mouse,bird\" -> [\"dog\", \"cat\", \"mouse\", \"bird\"\
    ]\n            \"\"\"\n    \n\n    Solution:\n    \n    Your code should implement\
    \ a function that takes in a string of comma-separated words and returns a list\
    \ containing these words.\n    \n    If you would like further clarification on\
    \ what a comma-separated string is, please refer to this website:\n    \n    https://en.wikipedia.org/wiki/Comma-separated_values\n\
    \    \n    Some sample test cases:\n    \n    >>> words_string(\"dog, cat, mouse\"\
    )\n    [\"dog\", \"cat\", \"mouse\"]\n    >>> words_string(\"dog, cat, mouse,\
    \ bird\")\n    [\"dog\", \"cat\", \"mouse\", \"bird\"]\n    >>> words_string(\"\
    dog , cat , mouse , bird\")\n    [\"dog\", \"cat\", \"mouse\", \"bird\"]\n   \
    \ >>> words_string(\"dog, cat, mouse , bird\")\n    [\"dog\", \"cat\", \"mouse\"\
    , \"bird\"]\n    >>> words_string(\"dog, cat , mouse , bird\")\n    [\"dog\",\
    \ \"cat\", \"mouse\", \"bird\"]\n    >>> words_string(\"dog,cat,mouse,bird\")\n\
    \    [\"dog\", \"cat\", \"mouse\", \"bird\"]\n    >>> words_string(\"dog, cat,\
    \ mouse , bird, mouse\")\n    [\"dog\", \"cat\", \"mouse\", \"bird\", \"mouse\"\
    ]\n    \n    And some more interesting test cases:\n    \n    >>> words_string(\"\
    dog , cat , mouse , bird, mouse, dog\")\n    [\"dog\", \"cat\", \"mouse\", \"\
    bird\", \"mouse\", \"dog\"]\n    >>> words_string(\"dog, cat, mouse , bird, mouse\
    \ , dog, cat, mouse\")\n    [\"dog\", \"cat\", \"mouse\", \"bird\", \"mouse\"\
    , \"dog\", \"cat\", \"mouse\"]\n    >>> words_string(\"dog, cat , bird, mouse,\
    \ dog, cat, mouse , mouse\")\n    [\"dog\", \"cat\", \"bird\", \"mouse\", \"dog\"\
    , \"cat\", \"mouse\", \"mouse\"]\n    >>> words_string(\"dog, cat, mouse , bird,\
    \ mouse , dog, cat\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpr64x511n.py\", line 11\n    \"dog, cat, mouse\" -> [\"\
    dog\", \"cat\", \"mouse\"]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world!\n\
    \            \"\"\"\n            becomes\n            ['Hello', 'world']\n   \
    \ \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptlfj9ynr.py\", line 10\n    Hello, world!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: Hello, my name\
    \ is Sarah\n    Output: [\"Hello\", \"my\", \"name\", \"is\", \"Sarah\"]\n   \
    \ \n    Example 2:\n        Input: My name is Sarah\n        Output: [\"My\",\
    \ \"name\", \"is\", \"Sarah\"]\n    \n    Note:\n            If the input string\
    \ has a space in it between two words, then\n            the extra words should\
    \ be ignored. However if the input string \n            contains a comma, the\
    \ extra words need to be included in the string\n            in their original\
    \ order.\n    \n    Args:\n        s: A string.\n\n    Returns:\n        A list\
    \ of words.\n    \"\"\"\n    return s.split(\",\")\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpx2u0qco9.py\", line 28\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 42)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            s = \"i have\
    \ a dog and an elephant\"\n            \n            Returns:\n              \
    \  [\"i\", \"have\", \"a\", \"dog\", \"and\", \"an\", \"elephant\"]\n        \
    \    \n    \n    Preconditions:\n            s is a string\n    \n    Postconditions:\n\
    \            s is string\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzspkyj4z.py\", line 10\n    s = \"i have a dog and an\
    \ elephant\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Given the string:\
    \ He,llo,o,wo,rld.\n            Return: ['He','llo','o','wo','rld']\n        \
    \    \"\"\"\n    \n    Input: string s\n    Output: List<str> words\n    \n  \
    \  Constraints:\n    \n    The string s will consist of lowercase letters only.\n\
    \    \n    Sample Input:\n    >>> s = \"He,llo,o,wo,rld.\"\n    \n    Sample Output:\n\
    \    >>> ['He','llo','o','wo','rld']\n    \n    \n    Time Complexity: O(n)\n\
    \    Space Complexity: O(n)\n    \"\"\"\n    \n    words = s.split(',')\n    words\
    \ = [w.strip() for w in words]\n    return words\n\ndef check(candidate):\n  \
    \  assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp75vk2fym.py\", line 10\n    Given the string: He,llo,o,wo,rld.\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: 'i love sneakers'\n\
    \    Output: ['i', 'love', 'sneakers']\n    \n    Ignore spaces between words.\
    \ \n    \n    You may assume that the string has only lowercase letters a-z.\n\
    \    \"\"\"\n    s = s.replace(' ', '') # remove spaces\n    s = s.split(',')\
    \ # split by commas\n    return [s.replace(' ', '').lower() for s in s]\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3nvv_upb.py\", line 16\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 32)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            INPUT: \"apple,\
    \ banana, orange, grapes\"\n            OUTPUT: [\"apple\", \"banana\", \"orange\"\
    , \"grapes\"]\n            \"\"\"\n            \n    INPUT: \"banana,apple,orange,grapes\"\
    \n    OUTPUT: [\"banana\", \"apple\", \"orange\", \"grapes\"]\n\n    INPUT: \"\
    apple, banana, orange, grapes\"\n    OUTPUT: [\"apple\", \"banana\", \"orange\"\
    , \"grapes\"]\n\n    INPUT: \"\"\n    OUTPUT: []\n\n    INPUT: \"a,a,b,c\"\n \
    \   OUTPUT: [\"a\", \"a\", \"b\", \"c\"]\n    \"\"\"\n    if s is None or not\
    \ s:\n        return []\n    l = s.lower().split(\",\")\n    l = list(filter(None,\
    \ l))\n    l = [x for x in l if x]\n    l = list(set(l))\n    return l\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8j3tqhpa.py\", line 10\n    INPUT: \"apple, banana, orange,\
    \ grapes\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"I am\
    \ happy.\"\n            Output: [\"I\", \"am\", \"happy\"]\n\n    If you would\
    \ like to return a list of characters (strings), instead of a list of words (strings),\
    \ you can do so by changing the\n    return line in the function at the bottom\
    \ of the file.\n    \"\"\"\n    # Split up the string into single chars, and split\
    \ them into words separated by commas\n    chars = chars(s)\n    words = [word\
    \ for word in string.split(chars) if chars(word)]\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8hradby6.py\", line 10\n    Input: \"I am happy.\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\n\
    \            \n            \n            Returns: [\"Hello\", \"World!\"]\n  \
    \          \n    \"\"\"\n    return s.split(' ')\n    \ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0_ns6ehf.py\", line 10\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"dog,\
    \ cat, horse\"\n            Output: [\"dog\", \"cat\", \"horse\"]\n          \
    \  \"\"\"\n            \n    Arguments:\n        s {str} -- string of words a\
    \ user has typed into the program \n    \n    Returns:\n        List[str] -- list\
    \ of words in the input\n    \"\"\"\n    s = s.split(',')\n    return s\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2dy1pk83.py\", line 10\n    Input: \"dog, cat, horse\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world!\n\
    \            \n            becomes\n            [\n                'Hello',\n\
    \                'world!'\n            ]\n    \n    Task:\n            Given a\
    \ string of words, return an array of words.\n    \"\"\"\n    return list(s.split(','))\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphme2sxlm.py\", line 10\n    Hello, world!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input:    \"\
    Hello, world.\"\n            Output:   [\"Hello\", \"world.\"]\n            \"\
    \"\"\n\n    Args:\n        s (str): A string of words separated by commas or spaces.\n\
    \    \n    Returns:\n        list[str]: A list of words in string 's'.\n    \"\
    \"\"\n\n    return list(s.replace(',', ' ').split())\n        \n</cell>\n<cell>\n\
    \"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"\ntests.test_words_string(words_string)\n\
    </cell>\n<text>\nRun the following cell to test your function. This may take 1-2\
    \ minutes.\n\n\n</text>\n<cell>\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT\
    \ IS BELOW THIS LINE\n\"\"\"\nword_list = words_string(\"Hello, world.\")\nprint(len(word_list))\n\
    for idx, word in enumerate(word_list):\n    print(idx,word)\n</cell>\n<text>\n\
    Expected Output:\n\n4\n0 Hello\n1 world\n\n</text>\n<text>\n\nImplement the function\
    \ token_sort_update. Expected Output:\n\ntoken_ids: [32, 23, 1008, 122, 3]\nsorted_token_ids:\
    \ [3, 23, 32, 1008, 122]\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp85v3xao6.py\", line 10\n    Input:    \"Hello, world.\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I love bacon\n\
    \            I love cookies\n            I love cake\n            \"\"\"\n   \
    \         should return an array containing the words\n            ['I', 'love',\
    \ 'bacon', 'I', 'love', 'cookies', 'I', 'love', 'cake']\n    \"\"\"\n    # Split\
    \ your string into words\n    words = s.replace(' ', ',').split(',')\n\n    #\
    \ Change each string into an array by splitting it at space\n    return [word.split()\
    \ for word in words]\n\nprint(words_string('I love bacon'))\nprint(words_string('I\
    \ love cookies'))\nprint(words_string('I love cake'))\nprint(words_string(''))\n\
    </cell>\n<text>\nExpected Output:\n\n[['I', 'love', 'bacon'], ['I', 'love', 'cookies'],\
    \ ['I', 'love', 'cake']]\n[]\n['']\n\n\n</text>\n<text>\nRecap: Lists, Arrays,\
    \ Dictionaries, and Sets\nA major concept in Python is called a list. As we saw\
    \ in the previous lectures, lists are used to hold multiple pieces of information.\
    \ In Python, everything is an object. That means you can create lists, access\
    \ their elements, and even append objects to them!\n\nLists, like other types\
    \ of objects, are mutable objects. That means you will be able to add, remove,\
    \ sort, and otherwise manipulate the objects inside of the list.\n\nLet's try\
    \ some of these operations on your own to get a better understanding of how they\
    \ work.\n\n1.) Create a list\n\n</text>\n<cell>\nempty_list = []\nprint(empty_list)\n\
    </cell>\n<text>\nGreat! Now, let's create a list with three elements:\n\n\n</text>\n\
    <cell>\na = [1,2,3]\nprint(a)\n</cell>\n<text>\nEach element of the list has a\
    \ unique identifier. These identifiers are called indices.\n\nIn Python, you can\
    \ access an element in a list using an index. For example:\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfleittku.py\", line 10\n    I love bacon\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World.\
    \ How are you today?\n            Hello, World. How are you today?\n         \
    \   Hello, World. How are you today?\n            \"\"\"\n            \n     \
    \       returns [\n                \"Hello\",\n                \"World\",\n  \
    \              \"How\",\n                \"are\",\n                \"you\",\n\
    \                \"today\",\n                \"Hello\",\n                \"World\"\
    ,\n                \"How\",\n                \"are\",\n                \"you\"\
    ,\n                \"today\",\n                \"Hello\",\n                \"\
    World\",\n                \"How\",\n                \"are\",\n               \
    \ \"you\",\n                \"today\",\n            ]\n    \n    \"\"\"\n    words\
    \ = []\n    tokens = s.strip().split()\n    for token in tokens:\n        words.append(token)\n\
    \    return words\n\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9z5tjo17.py\", line 10\n    Hello, World. How are you\
    \ today?\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Hello, World! -> [\"\
    Hello\", \"World!\"]\n    And you will be given the following words: Hello, World!\
    \ -> [\"Hello\", \"World!\"]\n    \"\"\"\n    words = s.split(\", \")\n    words\
    \ = [w.strip() for w in words]\n    return words\n\ndef check(candidate):\n  \
    \  assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpbwxa0yf7.py\", line 12\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 28)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello,\n   \
    \         Words,\n            This,\n            Is\n            A\n         \
    \   Test\n            \"\"\"\n            \n            Becomes\n            \n\
    \            [\"Hello\", \" \", \"Words\", \" \", \"This\", \" \", \"Is\", \"\
    \ \", \"A\", \" \", \"Test\"]\n    \n    Arguments:\n        s {str} -- A string\
    \ of words separated by commas or spaces.\n\n    Returns:\n        List[str] --\
    \ A list of words.\n    \"\"\"\n    return s.split()\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpajj2qs0n.py\", line 10\n    Hello,\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Hello, World! ->\
    \ [\"Hello\", \"World\", \"!\"]\n        \"\"\"\n    \n    Note: This function\
    \ is not predefined and will be covered in the quiz.\n    \"\"\"\n    \n    return\
    \ s.split()\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8qv21w67.py\", line 10\n    Hello, World! -> [\"Hello\"\
    , \"World\", \"!\"]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"dog,\
    \ cat, mouse, lizard\"\n            Output: [\"dog\", \"cat\", \"mouse\", \"lizard\"\
    ]\n            \n            Input: \"dog, cat, mouse, lizard, money\"\n     \
    \       Output: [\"dog\", \"cat\", \"mouse\", \"lizard\", \"money\"]\n       \
    \     \"\"\"\n    Args:\n        s (str): A string of words separated by spaces.\n\
    \n    Returns:\n        List[str]: The list of words.\n    \"\"\"\n    return\
    \ s.strip().split()\n</cell>\n<cell>\nassert words_string(\"Hello, World!\") ==\
    \ [\"Hello\", \"World\"]\nassert words_string(\"dog, cat, mouse, lizard\") ==\
    \ [\"dog\", \"cat\", \"mouse\", \"lizard\"]\nassert words_string(\"dog, cat, mouse,\
    \ lizard, money\") == [\"dog\", \"cat\", \"mouse\", \"lizard\", \"money\"]\n</cell>\n\
    <text>\nWrite a function that returns a list of all the words that are longer\
    \ than 4 characters.\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2fiwewi_.py\", line 10\n    Input: \"dog, cat, mouse,\
    \ lizard\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   input = \" Hello World\"\n            output = [\"Hello\", \"World\"]\n  \
    \          \"\"\"\n\n    Args:\n        s (str): a comma separated string of words\
    \ (No spaces)\n\n    Returns:\n        List[str]: the list of words in the string\n\
    \    \"\"\"\n    # Split string into words\n    words = s.split(',')\n\n    #\
    \ Return word list\n    return words\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphkfv4i29.py\", line 11\n    input = \" Hello World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"hello,\
    \ world. goodbye!\"\n            Output: [\"hello\", \"world\", \"goodbye\"]\n\
    \            \"\"\"\n    \n    Arguments:\n        s -- string containing words\
    \ (strings of characters separated by spaces)\n    \n    Returns:\n        words_array:\
    \ A list of words. If there aren't any words in the list then an empty list is\
    \ returned.\n    \"\"\"\n    \n    # Initialize an empty list to store the words\n\
    \    words_array = []\n    \n    # Convert s into an array of lower case letters\n\
    \    word_arr = s.lower().split()\n\n    # Loop through each word in the list\n\
    \    for word in word_arr:\n        # Check if the word is already in the list\n\
    \        # If it's not in the list then add it to the list\n        if word not\
    \ in words_array:\n            words_array.append(word)\n    \n    # Return words_array\n\
    \    return words_array\n\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5ubjtmjh.py\", line 10\n    Input: \"hello, world. goodbye!\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hi, my name\
    \ is Mike. I am learning Python at Udacity\n            \"\"\"\n    should return\n\
    \            ['Hi,', 'my', 'name', 'is', 'Mike', '.', 'I', 'am', 'learning', 'Python',\
    \ 'at', 'Udacity']\n    \"\"\"\n    return s.replace(',', ' ').split()\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpq2guexft.py\", line 10\n    Hi, my name is Mike. I am\
    \ learning Python at Udacity\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            INPUT:\n   \
    \         s = \"dog, burritos, cow\"\n            OUTPUT:\n            [\"dog\"\
    , \"burritos\", \"cow\"]\n    \n    NOTE: Do not use the split method in the built-in\
    \ string library.\n    \n    \n    You will need to return a copy of the original\
    \ list or return the original\n    string if you are not using a copy of the list.\n\
    \    \"\"\"\n    # split string into words\n    words = s.replace(',', '').split()\n\
    \    \n    # return original list or copy words to return original string\n  \
    \  return [word] if word else words\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp34d_kh7b.py\", line 10\n    INPUT:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world!\
    \ You're\n            creating the best Web framework\n            possible. Right?\n\
    \            \"\"\"\n    \n    into [\"Hello\", \",\", \"world\", \"!\", \n  \
    \          \"You're\", \"creating\", \"the\", \"best\", \"Web\", \n          \
    \  \"framework\", \"possible\", \".\", \"Right?\"]\n    \"\"\"\n    \n    However,\
    \ punctuation like \"!\" or \"?\" should not go in the \n    words list. So \"\
    Hello!\" should be in the list, but \"Hello? You're\n    going great. Thanks.\"\
    \ is fine, since \"?\" is considered part of \n    the word.\n\n    Note: What\
    \ about double quotes? Or the Japanese characters? \n    Are they considered as\
    \ part of the word?\n    \"\"\"\n    \n    # Split string using \" \", remove\
    \ punctuation\n    words = s.strip().lower().replace(',', ' ').replace('\\n',\
    \ ' ').split(' ')\n    \n    # Return list of words\n    return words\n</cell>\n\
    <text>\nRun the following cell to test your code:\n\n\n</text>\n<cell>\nprint(words_string('Hello,\
    \ world! You \\'re doing good. Thanks for taking the time to create this list!'))\n\
    </cell>\n<text>\nExpected output:\n\n['hello', 'world', 'you', \"re\", 'doing',\
    \ 'good', \"thanks\", 'take', 'the', 'time', 'to', 'create', 'this', 'list']\n\
    \n</text>\n<text>\nFinally, create a version of the count_words function that\
    \ can handle any word input. This could be the user's name, postal code, email,\
    \ phone number, or any other word that the user provides. You will have to create\
    \ a lambda function that can do this for you.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwxq1z9wi.py\", line 10\n    Hello, world! You're\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\n\
    \            \n            > ['Hello', 'World!']\n            \n            Hello,\
    \ World, !\n            \n            > ['Hello', 'World', '!']\n            \n\
    \            Hello, World, !, how are you today?\n            \n            >\
    \ ['Hello', 'World', '!', 'how', 'are', 'you', 'today?']\n            \n    \n\
    \    https://stackoverflow.com/questions/265960/split-strings-with-multiple-delimiters\n\
    \    \"\"\"\n    return s.split(sep=',')\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8ho7zp1z.py\", line 10\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        I love apples, oranges,\
    \ and bananas.\n            I love apples, oranges, and bananas.\n           \
    \ I love apples, oranges, and bananas.\n            I love apples, oranges, and\
    \ bananas.\n            \"\"\"\n        should return\n            ['I', 'love',\
    \ 'apples', 'oranges', 'and', 'bananas']\n\n    Constraints:\n            1 <=length\
    \ of string <=100\n            1 <= characters in string <=10\n    \"\"\"\n  \
    \  s = s.strip().split()\n    return [s for s in s.split(',') if s]\n    \n\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp40kos3ap.py\", line 10\n    I love apples, oranges, and\
    \ bananas.\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I am coding\
    \ now\n            I have planned it\n            \"\"\"\n            should produce\
    \ an array of [ 'I',\n                                       'am',\n         \
    \                              'coding',\n                                   \
    \    'now',\n                                       'I',\n                   \
    \                    'have',\n                                       'planned',\n\
    \                                       'it' ]\n    \"\"\"\n    return [word.strip()\
    \ for word in s.split(',')]\n</cell>\n<cell>\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi2ctvl_c.py\", line 10\n    I am coding now\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World\n\
    \            Hello, World\n            \n            How are you?\n          \
    \  \n            \n            Bye\n            \n            \n            Bye\n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n\ndef check(candidate):\n \
    \   assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptsxb7v41.py\", line 10\n    Hello, World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            'Hello, World!'\
    \ -> ['Hello', 'World']\n            'Monty, Python!' -> ['Monty', 'Python']\n\
    \            \"\"\"\n    \n    Note:\n        You should look up how to split\
    \ a string. Python has a built-in method called\n        'split'.\n        \n\
    \    Args:\n        s: a string of words separated by commas or spaces.\n    Returns:\n\
    \        a list of words in the string.\n    \"\"\"\n    \n    # Your code here\n\
    \    words = s.split(',')\n    return words\n</cell>\n<cell>\nwords_string('Hello,\
    \ World!')\n</cell>\n<cell>\nwords_string('Monty, Python!')\n</cell>\n<text>\n\
    If you have a string and you would like to split it into a list according to the\
    \ spaces just as you would a list. Go ahead and create a function that will do\
    \ that for you.\n\nNote:\n    The string that you will be splitting into lists\
    \ will not have commas or spaces. You will need to add those in!\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpx0tm0jwo.py\", line 10\n    'Hello, World!' -> ['Hello',\
    \ 'World']\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"I love\
    \ coffee\"\n            Output: [\"I\", \"love\", \"coffee\"]\n            \"\"\
    \"\n    \n    \n    :param s: a string of words separated by commas or spaces\n\
    \    :return: a list of the words in the string\n    \"\"\"\n    return s.split('\
    \ ')\n\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpm4dav5dt.py\", line 10\n    Input: \"I love coffee\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            s = 'dog cat\
    \ banana'\n            result: ['dog', 'cat', 'banana']\n            \"\"\"\n\
    \    \"\"\"\n    words = [w for w in s.split() if w != \"\"]\n    return words\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphvbnqf3u.py\", line 10\n    s = 'dog cat banana'\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"dog, cat, horse\"\
    \n    Output: [\"dog\", \"cat\", \"horse\"]\n            \"\"\"\n    \"\"\"\n\
    \    \n    # Your code here\n\n    \n    \n    return res\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7je6vx2j.py\", line 12\n    \"\"\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"I like\
    \ cats\"\n            Output: [\"I\", \"like\", \"cats\"]\n    \n    \n    Note:\
    \ You may assume that the string has only one word.\n    \"\"\"\n    return list(s.replace(',',\
    \ ' ').split())\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe9mtqi7p.py\", line 10\n    Input: \"I like cats\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello World\n\
    \            I love you\n            I love you too\n            \"\"\"\n    \
    \        \n            should return\n            [\"Hello\", \"World\", \"I\"\
    , \"love\", \"you\", \"I\", \"love\", \"you\", \"too\"]\n            \n    Parameters:\n\
    \        s: a string of words separated by spaces or commas\n    Returns:\n  \
    \      a list of words in the string.\n    \"\"\"\n    # Convert input to array\n\
    \    array = list(map(str.strip, s.split(\" \")))\n    \n    # Remove spaces and\
    \ commas\n    for i in array:\n        if i is not \"\":\n            array.remove(i)\n\
    \    return array\n</cell>\n<cell>\nprint(words_string('Hello World'))\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmplh6hal0w.py\", line 10\n    Hello World\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \"Hello World\"\
    \ -> [\"Hello\", \"World\"]\n            \"Hello, World\" -> [\"Hello\", \"World\"\
    ]\n            \"   Hello, World\" -> [\"Hello\", \"World\"]\n    \"\"\"\n   \
    \ words = []\n    words = s.split(\",\")\n    return words\n\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_77cs219.py\", line 10\n    \"Hello World\" -> [\"Hello\"\
    , \"World\"]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: Hello\
    \ world, I am glad to see you!\n            Output: ['Hello', 'world', 'I', 'am',\
    \ 'glad', 'to', 'see', 'you!']\n            \"\"\"\n    \"\"\"\n    words = s.split(',')\n\
    \    words_string = [s.strip() for s in words]\n    return words_string\n\n\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpth2n6qyn.py\", line 10\n    Input: Hello world, I am glad\
    \ to see you!\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \"Hello, World\"\
    \ ->  [\"Hello\", \"World\"]\n            \"Hello, World\" ->  [\"Hello\", \"\
    World\"]\n            \"\"\"\n\n    Arguments:\n        s (str): The string containing\
    \ words separated with spaces and commas.\n    \n    Returns:\n        List[str]:\
    \ The list of words.\n    \"\"\"\n    \n    \n    # YOUR CODE HERE\n    return\
    \ s.split(\",\")\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8055mybj.py\", line 10\n    \"Hello, World\" ->  [\"Hello\"\
    , \"World\"]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"dog,\
    \ cat, mouse, rabbit\"\n            Output: [\"dog\", \"cat\", \"mouse\", \"rabbit\"\
    ]\n            \"\"\"\n    \n    words = []\n    words = s.split(\",\")\n    for\
    \ word in words:\n        words.append(word.split())\n    return words\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6_zwz407.py\", line 10\n    Input: \"dog, cat, mouse,\
    \ rabbit\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: s = \"\
    pizza,dog,cat,smarty,elephant\"\n            Output: [\"pizza\", \"dog\", \"cat\"\
    , \"smarty\", \"elephant\"]\n            Explanation: \"pizza\" -> [\"pizza\"\
    ]\n                         \"dog\" -> [\"dog\"]\n                         \"\
    cat\" -> [\"cat\"]\n                         \"smarty\" -> [\"smarty\"]\n    \
    \                     \"elephant\" -> [\"elephant\"]\n            \"\"\"\n   \
    \ \n    This function should return the result to an array that looks like this:\n\
    \            [\"pizza\", \"dog\", \"cat\", \"smarty\", \"elephant\"]\n    \n \
    \   Note: \"smarty\" -> [\"smarty\"] is not an empty list. It is the only item\
    \ in the list.\n    \"\"\"\n    \n    return s.split(\" \")\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpeekk3sa2.py\", line 10\n    Input: s = \"pizza,dog,cat,smarty,elephant\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"dog,\
    \ cat, mouse, fly\"\n            Output: [\"dog\",\"cat\",\"mouse\",\"fly\"]\n\
    \            \n            Input: \"dog cat mouse, fly\"\n            Output:\
    \ [\"dog\",\"cat\",\"mouse\",\"fly\"]\n            \n            Input: \"dog\
    \ cat mouse fly\"\n            Output: [\"dog\",\"cat\",\"mouse\",\"fly\"]\n \
    \           \n            Input: \"dog cat mouse fly bark\"\n            Output:\
    \ [\"dog\",\"cat\",\"mouse\",\"fly\",\"bark\"]\n            \"\"\"\n         \
    \   # Solution 1:\n            word = s.lower().split()\n            return [word\
    \ for i in range(len(word))]\n            # Solution 2:\n            return list(map(str.split,\
    \ s.lower().split()))\n    \"\"\"\n    pass\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpex8_mp12.py\", line 10\n    Input: \"dog, cat, mouse,\
    \ fly\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"hello,world,foo,bar\"\
    \n    Output: [\"hello\", \"world\", \"foo\", \"bar\"]\n    \n    Args:\n    \
    \        s (str): string to be split\n    \n    Returns:\n            List[str]:\
    \ list of words \n    \"\"\"\n    return s.split(\",\")\n    \nassert words_string(\"\
    hello,world,foo,bar\") == [\"hello\", \"world\", \"foo\", \"bar\"]\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpkb4biimq.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 35)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input: \"dog cat\
    \ banana\"\n        Output: [\"dog\", \"cat\", \"banana\"]\n        \n       \
    \ Input: \"dog, cat, banana\"\n        Output: [\"dog\", \"cat\", \"banana\"]\n\
    \        \n        Input: \"dog cat banana, rat\"\n        Output: [\"dog\", \"\
    cat\", \"banana\", \"rat\"]\n        \n        Input: \"dog cat banana, rat tiger\"\
    \n        Output: [\"dog\", \"cat\", \"banana\", \"rat\", \"tiger\"]\n       \
    \     \n        Input: \"dog cat banana, rat, tiger\"\n        Output: [\"dog\"\
    , \"cat\", \"banana\", \"rat\", \"tiger\"]\n        \n        Input: \"dog cat\
    \ banana, rat tiger, elephant\"\n        Output: [\"dog\", \"cat\", \"banana\"\
    , \"rat\", \"tiger\", \"elephant\"]\n            \n        Input: \"dog cat banana,\
    \ rat, tiger, elephant, mouse\"\n        Output: [\"dog\", \"cat\", \"banana\"\
    , \"rat\", \"tiger\", \"elephant\", \"mouse\"]\n            \n        Input: \"\
    dog cat banana, rat, tiger, elephant, mouse, loud\"\n        Output: [\"dog\"\
    , \"cat\", \"banana\", \"rat\", \"tiger\", \"elephant\", \"mouse\", \"loud\"]\n\
    \            \n        Input: \"dog cat banana, rat, tiger, elephant, mouse, loud,\
    \ fire\"\n        Output: [\"dog\", \"cat\", \"banana\", \"rat\", \"tiger\", \"\
    elephant\", \"mouse\", \"loud\", \"fire\"]\n            \n        Input: \"dog\
    \ cat banana, rat, tiger, elephant, mouse, loud, fire, ocean\"\n        Output:\
    \ [\"dog\", \"cat\", \"banana\", \"rat\", \"tiger\", \"elephant\", \"mouse\",\
    \ \"loud\", \"fire\", \"ocean\"]\n            \n        Input: \"dog cat banana,\
    \ rat, tiger, elephant, mouse, loud, fire, ocean, dog\"\n        Output: [\"dog\"\
    , \"cat\", \"banana\", \"rat\", \"tiger\", \"elephant\", \"mouse\", \"loud\",\
    \ \"fire\", \"ocean\", \"dog\"]\n            \n        Input: \"dog cat banana,\
    \ rat, tiger, elephant, mouse, loud, fire, ocean, dog, cat\"\n        Output:\
    \ [\"dog\", \"cat\", \"banana\", \"rat\", \"tiger\", \"elephant\", \"mouse\",\
    \ \"loud\", \"\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpges57qnt.py\", line 10\n    Input: \"dog cat banana\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I am coding,\
    \ silly walking\n            \"\"\"\n            \n        should return\n   \
    \         [\"I\",\"am\",\"coding,\",\"silly\",\"walking\"]\n    \"\"\"\n    \n\
    \    return s.split(\",\")\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppjzs8k6i.py\", line 10\n    I am coding, silly walking\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"one,two,three\"\
    \n            Output: [\"one\",\"two\",\"three\"]\n            \"\"\"\n    \"\"\
    \"\n    # Write your code here\n    \n    return s.split(\",\")\n\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe_8g6tbp.py\", line 10\n    Input : \"one,two,three\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \n    Input:  Hello,world,from,France\n\
    \    Output: ['Hello', 'world', 'from', 'France']\n    \n    \"\"\"\n    \n  \
    \  return s.split(\",\")\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpi5cgn236.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 29)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"Hello\
    \ World, Welcome, Hello World, Welcome\"\n            Output : [\"Hello\", \"\
    World\", \"Welcome\", \"Hello\", \"World\", \"Welcome\"]\n            \n    \n\
    \    You might need to add additional special characters such as ? and , in the\
    \ string.\n    \n    If you do not need to covert a string to lower case (or a\
    \ part of it), simply use s.lower().split()\n    \"\"\"\n    \n    # Do not write\
    \ main() function.\n    # See \"How to submit an answer for code\" in the FAQ\n\
    \    \n    words = s.split()\n    return words\n    \n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw09xtjd6.py\", line 10\n    Input : \"Hello World, Welcome,\
    \ Hello World, Welcome\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \n        words\
    \ = \"dog, cat, mouse\"\n    Output: [\"dog\",\"cat\",\"mouse\"]\n    \"\"\"\n\
    \    \n    # Split the string by the spaces and comma\n    words = s.replace(\"\
    ,\", \" \").replace(\" \", \"  \").split(\" \") \n    \n    \n    return words\n\
    \n    \n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5a3izqfz.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 34)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \"one,two,three\"\
    \n            Return: [\"one\",\"two\",\"three\"]\n            \"\"\"\n    \"\"\
    \"\n    # TODO: Write code here\n    return s.split(\",\")\n</cell>\n<text>\n\
    Run the following cell to test your code:\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4w6by14p.py\", line 10\n    \"one,two,three\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello. Goodbye.\
    \ Comfort.\n            \n            should be\n            ['Hello.', 'Goodbye.',\
    \ 'Comfort.']\n            \n            and\n            \"\"\"\n           \
    \ Hello, Goodbye, Comfort.\n            \n            should be\n            ['Hello',\
    \ 'Goodbye', 'Comfort']\n    \n    INPUT:\n            s: str\n    OUTPUT:\n \
    \           List[str]: a list of the words in the string.\n    \"\"\"\n    \n\
    \    return s.split(' ')\n\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0sf_gbjs.py\", line 10\n    Hello. Goodbye. Comfort.\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input:\n   \
    \         \"Hello, World!\"\n            Output:\n            [\"Hello\", \"World\"\
    ]\n            \n    \n    You may assume that the string has only letters for\
    \ now.\n    \"\"\"\n    words_list = []\n    words = s.replace(',', ' ').split('\
    \ ')\n    for word in words:\n        words_list.append(word)\n    return words_list\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpl2879mu4.py\", line 10\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            'Hello, World!'\n\
    \            'Hello, World!,1'\n            'Hello,1,World!'\n            'Hello,1,World!,2'\n\
    \            'Hello,1,2,World!'\n            'Hello,1,2,World!,3'\n          \
    \  \"\"\"\n            should return the list\n            ['Hello', 'World!',\
    \ '1', 'Hello', '1', 'World!', '2', 'Hello', '2', 'World!', '3',\n           \
    \ 'Hello', '1', '2', 'World!', '3']\n            \n            '1,2,3' should\
    \ return the list\n            ['1', '2', '3']\n            \n    You will only\
    \ be given a list of lowercase letters, so words with punctuation will be\n  \
    \  ignored.  I.E. the list will not contain \"'s\" or punctuation.\n    \n   \
    \ \n    >>> words_string(\"Hello, World!,1\")\n    ['Hello', 'World!', '1']\n\
    \    >>> words_string('Hello,1,World!')\n    ['Hello', '1', 'World!']\n    >>>\
    \ words_string('Hello,1,2,World!')\n    ['Hello', '1', '2', 'World!']\n    >>>\
    \ words_string('Hello,1,2,World!,3')\n    ['Hello', '1', '2', 'World!', '3']\n\
    \    >>> words_string('1,2,3')\n    ['1', '2', '3']\n    \"\"\"\n    return s.split(',')\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3ag7u5vr.py\", line 10\n    'Hello, World!'\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\n\
    \            \n            becomes\n            \n            ['Hello', 'World']\n\
    \            \n            Ignore punctuation, capitalization, and anything that\
    \ isn't letters.\n            \n    https://leetcode.com/problems/words-string/\n\
    \    \n    Solution 1: Split by space\n            \n    \n            ```\n \
    \           string = 'Hello, World!'\n            string.split(' ')\n        \
    \    ```\n            \n        \n            Returns:\n            ['Hello',\
    \ 'World!']\n            \n    \n    Solution 2: Split by commas\n           \
    \ \n    \n            ```\n            string = 'Hello, World!'\n            string.split(',')\n\
    \            ```\n            \n        \n            Returns:\n            ['Hello',\
    \ 'World!']\n    \n    \n    \"\"\"\n    return s.split(' ')\n    \ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqtt8ee60.py\", line 10\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: s = \"\
    How many words are in here?\"\n            Output: [ \"How\", \"many\", \"words\"\
    , \"are\", \"in\", \"here\", \"?\" ]\n            \n            Input: s = \"\
    \  How   many    words     are     in    here     \"\n            Output: [ \"\
    How\", \"many\", \"words\", \"are\", \"in\", \"here\" ]\n            \n      \
    \      Input: s = \"  How   many    words     are     in    here     , \"\n  \
    \          Output: [ \"How\", \"many\", \"words\", \"are\", \"in\", \"here\",\
    \ \",\" ]\n            \n            Input: s = \"  How   many    words     are\
    \     in    here     , \"\n            Output: [ \"How\", \"many\", \"words\"\
    , \"are\", \"in\", \"here\", \",\" ]\n            \n            Input: s = \"\
    \  How   many    words     are     in    here     \"\n            Output: [ \"\
    How\", \"many\", \"words\", \"are\", \"in\", \"here\" ]\n            \"\"\"\n\
    \    \n    \n    return s.split(\" \")\n    \n    \ndef check(candidate):\n  \
    \  assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpd8inyfzr.py\", line 10\n    Input: s = \"How many words\
    \ are in here?\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"dog, cat, mouse,\
    \ fox\"\n    Output: [\"dog\", \"cat\", \"mouse\", \"fox\"]\n            Input:\
    \ \"dog, cat, mouse,fox \"\n    Output: [\"dog\", \"cat\", \"mouse\", \"fox\"\
    ]\n    \"\"\"\n    words = s.split(',')\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfi9b416n.py\", line 12\n    Input: \"dog, cat, mouse,fox\
    \ \"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"Hello\
    \ World\"\n            Output: [\"Hello\",\"World\"]\n            \"\"\"\n   \
    \ \"\"\"\n    if s is None or len(s) == 0:\n        return []\n    return s.replace(',',\
    \ ' ').split()\n    \ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmph3d8e5ml.py\", line 10\n    Input : \"Hello World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello,\
    \ World\"\n            Output: [\"Hello\", \"World\"]\n\n            Input: \"\
    Hello,World\"\n            Output: [\"Hello\", \"World\"]\n\n            Input:\
    \ \"Hello,World,how,are,you\"\n            Output: [\"Hello\", \"World\", \"how\"\
    , \"are\", \"you\"]\n\n            Input: \"  Hello,World,how,are,you   \"\n \
    \           Output: [\"Hello\", \"World\", \"how\", \"are\", \"you\"]\n      \
    \      \n            Input: \"Hello   ,World,how,are,you   \"\n            Output:\
    \ [\"Hello\", \"World\", \"how\", \"are\", \"you\"]\n            \n          \
    \  Input: \"Hello  ,World,how,are,you   \"\n            Output: [\"Hello\", \"\
    World\", \"how\", \"are\", \"you\"]\n            \n            Input: \"Hello,\
    \   World,how,are,you   \"\n            Output: [\"Hello\", \"World\", \"how\"\
    , \"are\", \"you\"]\n            \n            Input: \"Hello,World,how,are,you\
    \ \"\n            Output: [\"Hello\", \"World\", \"how\", \"are\", \"you\"]\n\
    \            \n            Input: \"Hello,World,how,are,you  \"\n            Output:\
    \ [\"Hello\", \"World\", \"how\", \"are\", \"you\"]\n            \n          \
    \  Input: \"  Hello,World,how,are,you  \"\n            Output: [\"Hello\", \"\
    World\", \"how\", \"are\", \"you\"]\n            \n            Input: \"  Hello,World,how,are,you\
    \   \"\n            Output: [\"Hello\", \"World\", \"how\", \"are\", \"you\"]\n\
    \            \n            Input: \"\"\n            Output: []\n            \"\
    \"\"\n    \"\"\"\n    Write your code here\n    \"\"\"\n    \n    return []\n\n\
    assert words_string(\"\") == []\n\nassert words_string(\"Hello\") == [\"Hello\"\
    ]\n\nassert words_string(\"Hello,World\") == [\"Hello\", \"World\"]\n\nassert\
    \ words_string(\"Hello,World,how,are,you\") == [\"Hello\", \"World\", \"how\"\
    , \"are\", \"you\"]\n\nassert words_string(\"Hello,World,how,are,you  \") == [\"\
    Hello\", \"World\", \"how\", \"are\", \"you\"]\n\nassert words_string(\"  Hello,World,how,are,you\
    \  \") == [\"Hello\", \"World\", \"how\", \"are\", \"you\"]\n\nassert words_string(\"\
    \  Hello,World,how,are,you   \") == [\"Hello\", \"World\", \"how\", \"are\", \"\
    you\"]\n\nassert words_string(\"Hello,   World,how,are,you   \") == [\"Hello\"\
    , \"World\", \"how\", \"are\", \"you\"]\n\nassert words_string(\"Hello,World,how,are,you\
    \ \") == [\"\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpos37w94t.py\", line 10\n    Input: \"Hello, World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Input:\n            'Hello, my name is Pranav and I love python'\n       \
    \     Output:\n            ['Hello', 'my', 'name', 'is', 'Pranav', 'and', 'I',\
    \ 'love', 'python']\n            \n            \n            Input:\n        \
    \    'My name is Pranav and I love python'\n            Output:\n            ['My',\
    \ 'name', 'is', 'Pranav', 'and', 'I', 'love', 'python']\n            \"\"\"\n\
    \    \n    Input:\n    s: str\n    \n    Returns:\n    List[str]\n    \"\"\"\n\
    \    \n    words = s.lower().strip().split(' ')\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpeq7mrp1i.py\", line 11\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Given s: \"\
    hello, friend,world\"\n            Return:\n                    [\"hello\", \"\
    friend\", \"world\"]\n            \"\"\"\n    Note: You may assume the string\
    \ contains only English words\n    \"\"\"\n    return s.replace(',', ' ').split()\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3sbh3zgk.py\", line 10\n    Given s: \"hello, friend,world\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, world!\n\
    \            How are you?\n            \n            You,are,fine.\n         \
    \   \n            How are you, dude?\n            \"\"\"\n    Should output\n\
    \            ['Hello', 'world', 'How', 'are', 'you', ',', 'are', 'fine', 'How',\
    \ 'are', 'you', 'dude', '']\n    \"\"\"\n    return s.split(',')\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp83eo9rry.py\", line 10\n    Hello, world!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input: \"cat,dog,run\"\
    \n            output: [\"cat\",\"dog\",\"run\"]\n            \n            input\
    \ : \"cat, dog, run\"\n            output: [\"cat\", \"dog\", \"run\"]\n     \
    \       \n            input : \"cat, dog, run, log\"\n            output: [\"\
    cat\", \"dog\", \"run\", \"log\"]\n            \n            input : \"cat, dog,\
    \ run, log, error\"\n            output: [\"cat\", \"dog\", \"run\", \"log\",\
    \ \"error\"]\n    \"\"\"\n    return s.split(\",\")\n    \n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5qspr6td.py\", line 10\n    input: \"cat,dog,run\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            words_list =\
    \ words_string(\"Hello, my name is Dima. I am in Python and this is my first program\
    \ in Python.\")\n            print(words_list)\n            > ['Hello', 'my',\
    \ 'name', 'is', 'Dima', '.', 'I', 'am', 'in', 'Python', 'and', 'this', 'is', 'my',\
    \ 'first', 'program', 'in', 'Python']\n            \"\"\"\n    \n    words_list\
    \ = s.replace(\",\", \" \").split()\n    return words_list\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwnz4i_ck.py\", line 10\n    words_list = words_string(\"\
    Hello, my name is Dima. I am in Python and this is my first program in Python.\"\
    )\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"I have a cat\"\
    \n    Output: [\"I\", \"have\", \"a\", \"cat\"]\n    \n    NOTE: \"I have\" and\
    \ \"a cat\" do not have to be in the same order as they occur in the string\n\
    \    \"\"\"\n    # Split the string into words\n    words_list = s.split(\",\"\
    )\n    # Return an array of words\n    return words_list\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnyupntul.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 31)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"Hello world,I\
    \ am Sam!\"\n    Output: [\"Hello\",\"world\",\"I\",\"am\",\"Sam\"]\n    \"\"\"\
    \n    # YOUR CODE HERE\n\n    return []\n\n</cell>\n<cell>\nassert words_string('')\
    \ == []\nassert words_string('Hello') == ['Hello']\nassert words_string('Hello,\
    \ world') == ['Hello', 'world']\nassert words_string('Hello, world,I am Sam!')\
    \ == ['Hello', 'world', 'I', 'am', 'Sam']\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpx3em7ce8.py\", line 12\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            INPUT = \"This,\
    \ is, a, program\"\n            OUTPUT = words_string(INPUT)\n            OUTPUT\
    \ == [\"This\", \"is\", \"a\", \"program\"]\n            \"\"\"\n            \n\
    \    INPUT = \"This, is, a, program\"\n    OUTPUT = words_string(INPUT)\n    OUTPUT\
    \ == [\"This\", \"is\", \"a\", \"program\"]\n    \"\"\"\n    words = []\n    words\
    \ = s.strip().split(', ')\n    words = s.strip().split(' , ')\n    words = s.strip().split('\
    \ ')\n    return words\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3gipmaqb.py\", line 10\n    INPUT = \"This, is, a, program\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"a,\
    \ b, c, d\"\n            Output: [\"a\", \"b\", \"c\", \"d\"]\n            \"\"\
    \"\n    Args:\n        s: str: a string containing words separated with commas\
    \ and spaces.\n\n    Returns:\n        List[str]: the list of words in the string.\n\
    \    \"\"\"\n    \n    words = s.replace(',',' ').split()\n    \n    return words\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptt7aduaj.py\", line 10\n    Input: \"a, b, c, d\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input : \"dog,\
    \ cat, mouse, fly\"\n            output : [\"dog\", \"cat\", \"mouse\", \"fly\"\
    ]\n            \"\"\"\n\n    Constraints:\n            1 <= s.length <= 2 * 10^5\n\
    \            1 <= words.length <= 10^5\n            0 <= words[i].length <= 2\
    \ * 10^5\n            1 <= words[i].length <= 10^5\n\n    Args:\n            s:\
    \ a string of words separated by spaces or commas.\n    \n    Returns:\n     \
    \       a list of strings of words in the order they appeared in the given string.\n\
    \    \"\"\"\n    words: str = s.replace(' ', '').replace(',', ' ')\n    words\
    \ = words.split()\n    words.sort()\n    return words\n    \n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvx_dhzr3.py\", line 10\n    input : \"dog, cat, mouse,\
    \ fly\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Python is a programming language\n            It has a large standard library\n\
    \            It can be embedded in other programming languages\n            It\
    \ can be executed and installed on many platforms\n            \"\"\"\n      \
    \      \n            into\n            ['Python', 'is', 'a', 'programming', 'language']\n\
    \    \"\"\"\n    \n    return s.split(' ')\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp89oua76p.py\", line 11\n    Python is a programming language\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            , hello world.\
    \ 123 \"!\" true\n            \n            should return [\"hello\", \"world\"\
    , \"123\", \"true\"]\n            \n            , hello\n            \n      \
    \      should return [\"hello\"]\n            \n    \"\"\"\n    #YOUR CODE HERE\n\
    \n    my_list = s.split(',')\n    new_list = []\n    for x in my_list:\n     \
    \   new_list.append(x.strip())\n    return new_list\n    \n    \n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpk7s3toqa.py\", line 10\n    , hello world. 123 \"!\" true\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input: \"dog, cat,\
    \ mouse\"\n        Output: [\"dog\", \"cat\", \"mouse\"]\n        Input: \"dog\
    \ cat mouse\"\n        Output: [\"dog\", \"cat\", \"mouse\"]\n        Input: \"\
    dog cat mouse, mouse, dog\"\n        Output: [\"dog\", \"cat\", \"mouse\", \"\
    mouse\", \"dog\"]\n            \"\"\"\n\n    Args:\n        s(str): The given\
    \ string separated by space\n\n    Returns:\n        list[str]: The words in a\
    \ list\n\n    Examples:\n        words_string(\"dog, cat, mouse\") => [\"dog\"\
    , \"cat\", \"mouse\"]\n        words_string(\"dog cat mouse\") => [\"dog\", \"\
    cat\", \"mouse\"]\n        words_string(\"dog cat mouse, mouse, dog\") => [\"\
    dog\", \"cat\", \"mouse\", \"mouse\", \"dog\"]\n    \"\"\"\n    l = s.split()\n\
    \    arr=[]\n    for word in l:\n        arr.append(word.strip())\n    return\
    \ arr\n\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0tkdhet7.py\", line 10\n    Input: \"dog, cat, mouse\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"I am\
    \ a cat, a pig, a mouse\"\n            Output: [\"I\", \"am\", \"a\", \"cat\"\
    , \"a\", \"pig\", \"a\", \"mouse\"]\n            \n    Constraints:\n        \
    \    1 <= s.length <= 105\n            s contains only lowercase English letters\
    \ and spaces.\n            s does not contain any spaces.\n            All words\
    \ in s are separated by exactly one space.\n            All words in s are separated\
    \ by lowercase English letters.\n            Only one space separates each word.\n\
    \    \"\"\"\n    words = s.split(\" \")\n    \n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkxhepl_d.py\", line 10\n    Input: \"I am a cat, a pig,\
    \ a mouse\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input : \"apple,\
    \ banana, grape, mango\"\n            Output: [\"apple\", \"banana\", \"grape\"\
    , \"mango\"]\n            \"\"\"\n    \"\"\"\n    return s.split(\",\")\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6y4z8olk.py\", line 10\n    Input : \"apple, banana, grape,\
    \ mango\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            'Hello, World!\
    \ I am learning Python and working towards my coding standard.'\n            \n\
    \            should be\n            \n            [\n                'Hello',\n\
    \                'World',\n                'I',\n                'am',\n     \
    \           'learning',\n                'Python',\n                'and',\n \
    \               'working'\n                'towards',\n                'my',\n\
    \                'coding',\n                'standard.'\n            ]\n    \"\
    \"\"\n    \n    # Split string into words based on spaces (split) into words\n\
    \    words_list = s.split()\n    \n    # Return new list\n    return words_list\n\
    \    \n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\
    \"\ntests.test_words_string(words_string)\n</cell>\n<text>\nRun the following\
    \ cell to take in the questions (use the test cell below if you'd like).\n\nExercise:\
    \ Implement the function get_dummies().\nThat function takes in a string and returns\
    \ a list of all the possible one-hot encodings of the string. For example, if\
    \ you would like the function get_dummies(word_text) to return ['by', 'the', 'and',\
    \ 'a', 'in', 'that'], you'd implement the function as follows:\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp13iy2d_p.py\", line 10\n    'Hello, World! I am learning\
    \ Python and working towards my coding standard.'\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hi, I    am\
    \  a student     with     a,    little    heart\n            \"\"\"\n        \
    \    should return ['Hi','I','am','a','student','with','a','little','heart']\n\
    \    \"\"\"\n    \n    pass\n</cell>\n<cell>\nprint(words_string('Hi, I    am\
    \  a student     with     a,    little    heart'))\n</cell>\n<cell>\nassert len(words_string('Hi,\
    \ I    am  a student     with     a,    little    heart')) == 7, 'No. of words\
    \ in the string are not equal to 7'\nassert words_string('Hi, I    am  a student\
    \     with     a,    little    heart')[0] == ' ', 'No. of words in the string\
    \ are not equal to 1'\n</cell>\n<text>\nQuestion 2\nCreate a function titled_words\
    \ that will take a string and return a list of title cased words. A title is a\
    \ word that begins with a capital letter and has more than 1 character. Spaces\
    \ matter!\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp76o6peng.py\", line 10\n    Hi, I    am  a student   \
    \  with     a,    little    heart\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: s = \"\
    ,this,is,a,string\"\n            Output: [\"this\",\"is\",\"a\",\"string\"]\n\
    \            \"\"\"\n    \"\"\"\n    \n    words = s.split(\",\")\n    words.sort()\n\
    \    return words\n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqh9q2qpo.py\", line 10\n    Input: s = \",this,is,a,string\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            this is an apple,\
    \ banana, and orange.\n            \"\"\"\n\n            into:\n            \n\
    \            ['this', 'is', 'an', 'apple', 'banana', 'and', 'orange']\n    \"\"\
    \"\n    pass\n\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_1614oxj.py\", line 10\n    this is an apple, banana,\
    \ and orange.\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        \n    >>> words_string(\"\
    Hello, World !\")\n    [\"Hello\", \"World\", \"!\"]\n            \"\"\"\n   \
    \ \n    Note: This does not handle punctuation, so you will not get \"Hello\"\
    .\n    \"\"\"\n    return s.split(' ')\n\n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpx7lq206v.py\", line 11\n    >>> words_string(\"Hello,\
    \ World !\")\n    ^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \n    Input: \"hello,world,how,are,you\"\
    \n    Output: [\"hello\", \"world\", \"how\", \"are\", \"you\"]\n    \n    Example\
    \ 2:\n    \n    Input: \"one two three four\"\n    Output: [\"one\", \"two\",\
    \ \"three\", \"four\"]\n    \"\"\"\n    \n    # Split string into words\n    words\
    \ = s.split(\",\")\n    \n    # Return words list\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpllk4dp46.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 37)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    \n    >>> words_string('a,b,\
    \  c,d, e')\n    ['a', 'b', 'c' ,'d', 'e']\n    \"\"\"\n    return s.replace('\
    \ ','').split(',')\n</code>\nWe can test our function by checking the length of\
    \ the return value:\n<code>\n>>> words_string('a,b,  c,d, e')\n['a', 'b', 'c',\
    \ 'd', 'e']\n>>> len(words_string('a,b,  c,d, e'))\n7\n</code>\nAnd we can check\
    \ the individual words:\n<code>\n>>> words_string('a,b,  c,d, e')[0]\n'a'\n>>>\
    \ words_string('a,b,  c,d, e')[1]\n'b'\n>>> words_string('a,b,  c,d, e')[2]\n\
    'c'\n>>> words_string('a,b,  c,d, e')[3]\n'd'\n>>> words_string('a,b,  c,d, e')[4]\n\
    'e'\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThanks for the answer.\n<|/ c |>\n<|\
    \ a dscore=0 tags=python |>\nThis is a great example for learning recursion.\n\
    <code>\ndef check(candidate):\n    assert candidate('Hi, my name is John') ==\
    \ ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four,\
    \ five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpd26w9twx.py\", line 13\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 54)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Hello, World!\n            \n            \n\n            Hello,\n        \
    \    World!\n            \n            \n            \n            This should\
    \ return: ['Hello', 'World', '!']\n            \"\"\"\n            \n        \
    \    \n            \n    Args:\n        s (str): the string containing words\n\
    \    \n    Returns:\n        List[str]: the list of words in the string.\n   \
    \ \"\"\"\n    return s.split()\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpp9hm8rri.py\", line 11\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n\ndef check(candidate):\n    assert candidate('Hi, my name\
    \ is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmplsr8fpf5.py\", line\
    \ 278, in <module>\n    test_check()\n  File \"/tmp/tmplsr8fpf5.py\", line 276,\
    \ in test_check\n    check(words_string)\n  File \"/tmp/tmplsr8fpf5.py\", line\
    \ 268, in check\n    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name',\
    \ 'is', 'John']\nAssertionError\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input: s = \"dog,\
    \ cat, mouse, fox\"\n        Output: [\"dog\", \"cat\", \"mouse\", \"fox\"]\n\
    \            \n            Input: s = \"\"\n            Output: []\n         \
    \   \n    \n    Solution: Split the string into a list of strings by \" \" and\
    \ then split the resulting list by \",\".\n    Then join the lists and return\
    \ that list.\n    \"\"\"\n    if s == \"\":\n        return []\n\n    s_split\
    \ = s.split(\" \") # ['dog, cat, mouse, fox']\n    split_by_comma = [s.strip()\
    \ for s in s_split]\n    split_by_comma = split_by_comma + [\"[end]\"]\n    return\
    \ split_by_comma\n\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmps8gkrgqt.py\", line 10\n    Input: s = \"dog, cat, mouse,\
    \ fox\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   input: \"apple, banana, kiwi, grapefruit\"\n            output: [\"apple\"\
    , \"banana\", \"kiwi\", \"grapefruit\"]\n            \"\"\"\n\n            str_list\
    \ = s.split(\",\")\n            list_words = []\n\n            for s in str_list:\n\
    \                words = s.split()\n                list_words.append(words)\n\
    \n            return list_words\n\n    You will only be given a list of words.\
    \ \n    Your code will be run against a list of words.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpg00pzr6f.py\", line 11\n    input: \"apple, banana, kiwi,\
    \ grapefruit\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello,\
    \ playground\"\n            Output: [\"Hello\",\"playground\"]\n            \"\
    \"\"\n            \n            Input: \"Hello, playground\"\n            Output:\
    \ [\"Hello\",\"playground\"]\n    \n    \n    Instructions:\n    \"\"\"\n    #\
    \ Write your code here\n    \n    return s.strip().split()\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1mjxrcs1.py\", line 10\n    Input: \"Hello, playground\"\
    \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            input: Hello!\
    \ How are you?\n            output: [Hello, How, are, you]\n            \n   \
    \         For an empty string input '', the output should be the empty array [].\n\
    \    \"\"\"\n    words = s.split(' ')\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpydz8ksel.py\", line 10\n    input: Hello! How are you?\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \"I love NASA\
    \ and the great space shuttle is very popular\"\n            \" according to various\
    \ publications like The National Aeronautics and Space Administration.\"\n   \
    \         \" So I love NASA. I love The National Aeronautics and Space Administration.\"\
    \n            \" So I love NASA. I love The National Aeronautics and Space Administration.\"\
    \n            \" So I love NASA. I love The National Aeronautics and Space Administration.\
    \ \"\n            \" So I love NASA. I love The National Aeronautics and Space\
    \ Administration. \"\n            \" So I love NASA. I am the aeronautics space\
    \ shuttle.\"\n            \" So I love NASA. I am the aeronautics space shuttle.\"\
    \n            \" So I love NASA. I am the aeronautics space shuttle.\"\n     \
    \       \" So I love NASA. I am the aeronautics space shuttle. \"\n          \
    \  \" So I love NASA. I am the aeronautics space shuttle. \"\n            \" So\
    \ I love NASA. I am the aeronautics space shuttle. \"\n            \" So I love\
    \ NASA. I am the aeronautics space shuttle \"\n            \" So I love NASA.\
    \ I am the aeronautics space shuttle \"\n            \" So I love NASA. I am the\
    \ aeronautics space shuttle \"\n            \" So I love NASA. I am the aeronautics\
    \ space shuttle \"\n            \" So I love NASA. I am the aeronautics space\
    \ shuttle \"\n            \" So I love NASA. I am the aeronautics space shuttle\
    \ \"\n            \" So I love NASA. I am the aeronautics space shuttle \"\n \
    \           \" So I love NASA. I am the aeronautics space shuttle \"\n       \
    \     \" So I love NASA. I am the aeronautics space shuttle \"\n            \"\
    \ So I love NASA\ndef check(candidate):\n    assert candidate('Hi, my name is\
    \ John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two,\
    \ three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp58z8b15i.py\", line 10\n    \"I love NASA and the great\
    \ space shuttle is very popular\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Input: \"Hello World\"\n            Output: ['Hello', 'World']\n         \
    \   \n            Input: \"How are you World\"\n            Output: ['How', 'are',\
    \ 'you', 'World']\n            \n            Input: \"Hello, World\"\n       \
    \     Output: ['Hello', 'World']\n            \n            Input: \"How are you\
    \ World?\"\n            Output: ['How', 'are', 'you', 'World', '?']\n        \
    \    \"\"\"\n    \"\"\"\n    words = []\n    words = s.replace(',', '').split('\
    \ ')\n    return words\n\ndef check(candidate):\n    assert candidate('Hi, my\
    \ name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpngsqro3b.py\", line 11\n    Input: \"Hello World\"\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"Hello,\
    \ World\"\n            Output: [\"Hello\", \"World\"]\n            \n        \
    \    Input: \"Hello    World\"\n            Output: [\"Hello\", \"World\"]\n \
    \           \n            Input: \"    Hello  ,    World  \"\n            Output:\
    \ [\"Hello\", \"World\"]\n            \n    Words are defined as consecutive letters\
    \ or numbers.\n    Spaces or tabs ' ' or '\\t' ' ' are considered word delimiters.\n\
    \    \n    If you use a special word delimiter set delimiter = ' ' and set\n \
    \   appropriate value in word_delimiter variable.\n    \"\"\"\n    \n    delimiter\
    \ = ' '\n    word_delimiters = [',', '\\t']\n    \n    words = []\n    \n    for\
    \ word in s.split(delimiter):\n        \n        for delimiter in word_delimiters:\n\
    \            if delimiter in word:\n                word = word.replace(delimiter,\
    \ \"\")\n                break\n        \n        words.append(word)\n       \
    \ \n    return words\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp81ftev6a.py\", line 10\n    Input: \"Hello, World\"\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: 'what,ever,a,happy\
    \ cat'\n            Output: ['what','ever','a','happy','cat']\n            \"\"\
    \"\n            \n    Use Python list functions to do so.\n    \"\"\"\n    pass\n\
    \ndef check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi',\
    \ 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five,\
    \ six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmplrm4rt28.py\", line 10\n    Input: 'what,ever,a,happy\
    \ cat'\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I love my job\n\
    \            \"\"\"\n            \n            into\n            [\"I\", \"love\"\
    , \"my\", \"job\"]\n    \"\"\"\n    \n    return s.split(' ')\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp91zs7onx.py\", line 10\n    I love my job\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            'Hello, world!\
    \ I love you!'\n            \n        into \n            ['Hello', 'world', 'I',\
    \ 'love', 'you']\n            \n    Args:\n        s (str): A string of words\
    \ separated by commas or spaces\n    Returns:\n        List[str]: A list of strings\
    \ of words in the string\n    \"\"\"\n    \n    words = []\n    \n    if len(s)\
    \ == 0:\n        return words\n    \n    for word in s.split(\" \"):\n       \
    \ word = word.strip()\n        if len(word) != 0:\n            words.append(word)\n\
    \    \n    return words\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_p8nzg_w.py\", line 10\n    'Hello, world! I love you!'\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: \"apple,\
    \ banana, orange, grapes\"\n            Output: [\"apple\", \"banana\", \"orange\"\
    , \"grapes\"]\n            \n            Input: \"grapes, orange, apple, banana\"\
    \n            Output: [\"grapes\", \"orange\", \"apple\", \"banana\"]\n      \
    \      \n            Input: \"banana, orange, apple, grapes\"\n            Output:\
    \ [\"banana\", \"orange\", \"apple\", \"grapes\"]\n            \"\"\"\n\n    Example:\n\
    \            Input: \"apple, banana, orange, grapes\"\n            Output: [\"\
    apple\", \"banana\", \"orange\", \"grapes\"]\n\n            Input: \"grapes, orange,\
    \ apple, banana\"\n            Output: [\"grapes\", \"orange\", \"apple\", \"\
    banana\"]\n\n            Input: \"banana, orange, apple, grapes\"\n          \
    \  Output: [\"banana\", \"orange\", \"apple\", \"grapes\"]\n\n    Follow up:\n\
    \            If you have trouble understanding how the split works, think: \n\
    \            \n            What if the strings had punctuation in them like:\n\
    \n            \"Did you see,\" or \"Didn't,\" or a double space after each word?\n\
    \    \n            What if the strings had a combination of both, like\n    \n\
    \            \"Bob said, goodbye!\" \n    \n            What if the strings had\
    \ contractions like:\n    \n            \"can't\"\n    \n    Constraints:\n  \
    \          1 <= s.length <= 105\n            s contains only lowercase English\
    \ letters and space\n            s contains no numbers or special characters\n\
    \            \n    Your code will have to handle these edge cases.\n    \n   \
    \ If you use a library, please round your answer to the nearest integer.\n   \
    \ \"\"\"\n    # implement this function\n    \n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpp9q0fhs1.py\", line 10\n    Input: \"apple, banana, orange,\
    \ grapes\"\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    >>> words_string(\"\
    dog cat fish elephant\")\n            ['dog', 'cat', 'fish', 'elephant']\n\n \
    \   Please use only standard library methods (no loops) and the built-in\n   \
    \ functions map, filter, sorted, set, sum and len.\n\n    Don't remove spaces,\
    \ punctuation, and case from the input string.  Return the result.\n    \"\"\"\
    \n    \n    # YOUR CODE HERE\n    # HINT: Use split to split the string into words\n\
    \    # HINT: Use list comprehension and filter to remove empty words\n    \n \
    \   return [] # Replace this line with your code\n\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpwlj882b1.py\", line 16\n    Don't remove spaces, punctuation,\
    \ and case from the input string.  Return the result.\n       ^\nSyntaxError:\
    \ unterminated string literal (detected at line 16)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input:\n   \
    \         s = \"Hello World\"\n            Output:\n            \n           \
    \ Hello\n            World\n            \n            \n            Input:\n \
    \           s = \"Hello World,My Name is Ashwin\"\n            Output:\n     \
    \       \n            Hello\n            World\n            ,\n            My\n\
    \            Name\n            is\n            Ashwin\n            \n    \"\"\"\
    \n    \n    words = s.split(' ')\n    return words\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpe8hjvpqz.py\", line 10\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"dog cat banana\"\
    \n    Output: [\"dog\", \"cat\", \"banana\"]\n    \n    Words are separated by\
    \ a space\n            \"\"\"\n    \n    \n    \"\"\"\n    TODO: Implement the\
    \ function here\n    \"\"\"\n    return s.split(' ')\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjmwz8dmi.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 32)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Hello, World!\n\
    \            \n            becomes\n            ['Hello', 'World']\n         \
    \   \"\"\"\n    \n    Args:\n        s: a string consisting of a comma separated\
    \ list of words \n            separated only by spaces.\n    \n    Returns:\n\
    \        a list of strings split only by spaces.\n    \"\"\"\n    \n    # your\
    \ code here\n    return s.split()\n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5zbq_df7.py\", line 10\n    Hello, World!\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input:\n   \
    \                 s = \"Hello, my name is Sam\"\n            Output:\n       \
    \             words = [\"Hello\",\"my\",\"name\",\"is\",\"Sam\"]\n           \
    \         \n    Constraints:\n            1 <= s.length <= 105\n            s\
    \ contains only lowercase English letters.\n            No leading or trailing\
    \ spaces are allowed.\n            \n            It is guaranteed that the string\
    \ contain at least one word,\n            which does not contain any space character.\n\
    \    \"\"\"\n    return s.replace(',', ' ').split()\n</cell>\n<cell>\ntest_words\
    \ = 'Hello, my name is Sam'\ntest_words = test_words.replace(',', ' ')\nprint(test_words)\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate('Hi, my name is John')\
    \ == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One, two, three,\
    \ four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert\
    \ candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0f5n_vfx.py\", line 10\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   We are the souls of men\n            \"\"\"\n    \n    should return ['We',\
    \ 'are', 'the', 'souls', 'of', 'men']\n    \"\"\"\n    \n    s = s.replace(\"\
    ,\", \" \")\n    words = s.split()\n    return words\n\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvkl5fjs0.py\", line 11\n    We are the souls of men\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"I, love, cats\"\
    \n    Output: [\"I\",\"love\",\"cats\"]\n    \n    When dealing with strings we\
    \ often use the split method which can break up text \n    into substrings based\
    \ on whatever separators. In our case we can use the space\n    character.\n \
    \           \"\"\"\n    Input : \"I love cats\"\n    Output : ['I','love','cats']\n\
    \    \n    Also note that the string you are dealing with will typically have\
    \ the characters '_' and '.' \n    in it, but your code will have to account for\
    \ these in some manner. Make sure you account \n    for these in any way that\
    \ can be done while splitting words.\n    \n    Args:\n        s: A string of\
    \ words separated by spaces or commas.\n    Returns:\n        List[str]: A list\
    \ of strings of words from s.\n    \"\"\"\n    return s.split(' ')\n\ndef check(candidate):\n\
    \    assert candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n\
    \    assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpw6bmz9i_.py\", line 13\n    When dealing with strings\
    \ we often use the split method which can break up text \n         ^^^^^^^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            Input: 'How\
    \ much wood would a woodchuck chuck if a wood chuck could chuck wood'\n      \
    \      Output: ['How', 'much', 'would', 'a', 'woodchuck', 'chuck',\n         \
    \   'if', 'a', 'woodchuck', 'could', 'chuck', 'wood']\n            \n        \
    \    \"\"\"\n    Args:\n        s (str): the input string that you need to parse\n\
    \    Returns:\n        List[str]: the words in input string\n    \"\"\"\n    return\
    \ s.replace(',', ' ').split()\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzy8trv8q.py\", line 10\n    Input: 'How much wood would\
    \ a woodchuck chuck if a wood chuck could chuck wood'\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: 1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n    Input: \"apple, banana,\
    \ cherry\"\n    Output: [\"apple\", \"banana\", \"cherry\"]\n    Explanation:\
    \ Input string \"apple, banana, cherry\" contains 3 words; \n    therefore your\
    \ program should return a list of 3 words as an answer.\n    \"\"\"\n    words\
    \ = s.split(\",\")\n    return words\n    \ndef check(candidate):\n    assert\
    \ candidate('Hi, my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n   \
    \ assert candidate('One, two, three, four, five, six') == ['One', 'two', 'three',\
    \ 'four', 'five', 'six']\n    assert candidate('Hi, my name') == ['Hi', 'my',\
    \ 'name']\n    assert candidate('One,, two, three, four, five, six,') == ['One',\
    \ 'two', 'three', 'four', 'five', 'six']\n    assert candidate('') == []\n   \
    \ assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef test_check():\n\
    \    check(words_string)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdlzgekd5.py\", line 14\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 29)\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n        Input:\n       \
    \         s = \"cat,dog,run\"\n        Output:\n                [\"cat\", \"dog\"\
    , \"run\"]\n            \n            Input:\n                s = \"\"\n     \
    \   Output:\n                []\n    \"\"\"\n    return s.split(\",\")\n\ndef\
    \ check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpo15zcbm3.py\", line 10\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            \n         \
    \   Python 3 has a lot of different string functions\n            https://docs.python.org/3/library/stdtypes.html?highlight=string%20functions#string-methods\n\
    \            \n            Exercise:\n            \n            Write a function\
    \ that takes a string as input and returns a string with all the words in the\
    \ string separated by spaces.\n            \n            The string does not contain\
    \ any spaces. You can use the split() method of the string class for this.\n \
    \           \n            Example:\n            \n            ```python\n    \
    \        \n            string = \"Hello World\"\n            \n            >>\
    \ \"Hello World\"\n            ```\n            \"\"\"\n    \n    The string does\
    \ not contain any spaces. You can use the split() method of the string class for\
    \ this.\n    \n    Args:\n        s(str): string\n    \n    Returns:\n       \
    \ List[str]: a string with all the words in the string separated by spaces\n \
    \   \"\"\"\n    return s.split(',')\n    \ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpu5q25b_b.py\", line 11\n    Python 3 has a lot of different\
    \ string functions\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            I love cruel\
    \ castle,\n            and I love apples eat\n            I love oolls and rain,\n\
    \            and I love sugar\n            \"\"\"\n    should return\n       \
    \     ['I', 'love', 'cruel', 'castle', ',', 'and', 'I', 'love', 'apples', 'eat',\
    \ ',', 'I', 'love', 'oolls', 'and', 'rain', ',', 'and', 'I', 'love', 'sugar']\n\
    \    \"\"\"\n    \n    words = s.split(\" \")\n    \n    # your code here\n  \
    \  \n    return words\n    \n</cell>\n<cell>\nprint(words_string('I love cruel\
    \ castle, and I love apples eat'))\n</cell>\n<text>\nExercise 3\nThe function\
    \ you are asked to write should take in a list as an input and return a tuple\
    \ where the first element is the max element in the list and the second element\
    \ is the index of the max element in the list. For example:\n    \n    >>> max('I\
    \ love cruel castle, and I love apples eat')\n    (('I', 2), ('love', 2), ('cruel',\
    \ 2), ('and', 2), ('I', 2), ('love', 2), ('apples', 2), ('eat', 2))\n\n    \"\"\
    \"\n    \n    # your code here\n    \n    return tuple(sorted(max))\n    \n</cell>\n\
    <cell>\nprint(max('I love cruel castle, and I love apples eat'))\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns True if the string passed in contains\
    \ all letters in the string passed in as a parameter, otherwise return False.\
    \ Do not use any additional data structures to solve this problem. For example:\n\
    \n    >>> is_anagram('anagram', 'nagaram')\n    True\n\n    >>> is_anagram('anagram',\
    \ 'nagaram')\n    False\n\n    >>> is_anagram('ant', 'nan')\n    False\n\n   \
    \ >>> is_anagram('ant', 'nan')\n    False\n\n    >>> is_anagram('ant', 'nat')\n\
    \    False\n\n    >>> is_anagram('ant', 'ta')\n    True\n\n    >>> is_anagram('ant',\
    \ 'aa')\n    True\n\n    >>> is_anagram('ant', 'nana')\n    False\n\n    >>> is_anagram('ant',\
    \ 'nana')\n    False\n\n    >>> is_anagram('ant', 'nanat')\n    True\n\n    >>>\
    \ is_anagram('ant', 'nant')\n    True\n\n    >>> is_anagram('ant', 'tnan')\n \
    \   True\n\n    >>> is_anagram('ant', 'nant')\n    False\n\n    >>> is_anagram('\n\
    def check(candidate):\n    assert candidate('Hi, my name is John') == ['Hi', 'my',\
    \ 'name', 'is', 'John']\n    assert candidate('One, two, three, four, five, six')\
    \ == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('Hi,\
    \ my name') == ['Hi', 'my', 'name']\n    assert candidate('One,, two, three, four,\
    \ five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n    assert candidate('')\
    \ == []\n    assert candidate('ahmed     , gamal') == ['ahmed', 'gamal']\n\ndef\
    \ test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwkol41va.py\", line 10\n    I love cruel castle,\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
- exit_code: -1
  program: "from typing import List\n\ndef words_string(s: str) -> List[str]:\n  \
    \  \"\"\"\n    You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    to split the string into words and return an array of the\
    \ words.\n    \n    For example:\n            \"\"\"\n            He was a man\n\
    \            He is smart\n            He loves gardening\n            He is very\
    \ helpful\n            \"\"\"\n            returns: ['He','was','a','man','He','is','smart','He','loves','gardening','He','is','very','helpful']\n\
    \    \n    Only use split() or splitlines() (not include the commented-out portion)\
    \ in your code.\n    Try to solve the problem using loops (while, for, if).\n\
    \    \n    You can either use a for loop with a range() to iterate through each\
    \ word in the string:\n        \n            for i in range(len(str)):\n     \
    \           print(str[i])\n        \n    or you can use a while loop and keep\
    \ track of the last character in str, and a boolean variable which keeps track\
    \ of if the word is empty:\n        \n            empty = True\n            while\
    \ empty == True:\n                if str[-1] != ' ':\n                    empty\
    \ = False\n                else:\n                    empty = True\n         \
    \           print(str.pop())\n        \n    If you are not sure how to solve the\
    \ problem, try writing some test cases to see what happens.\n    \n    When you\
    \ are finished solving this problem, please submit your completed function to\
    \ the submit function\n    below. Once that is finished running, your output will\
    \ be saved in the output variable, so don't forget\n    to delete your previously\
    \ returned output or else it will cause an error.\n    \"\"\"\n    \n    words\
    \ = s.split()\n    return words\n\ndef check(candidate):\n    assert candidate('Hi,\
    \ my name is John') == ['Hi', 'my', 'name', 'is', 'John']\n    assert candidate('One,\
    \ two, three, four, five, six') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('Hi, my name') == ['Hi', 'my', 'name']\n    assert candidate('One,,\
    \ two, three, four, five, six,') == ['One', 'two', 'three', 'four', 'five', 'six']\n\
    \    assert candidate('') == []\n    assert candidate('ahmed     , gamal') ==\
    \ ['ahmed', 'gamal']\n\ndef test_check():\n    check(words_string)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcglrahak.py\", line 10\n    He was a man\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659823126
