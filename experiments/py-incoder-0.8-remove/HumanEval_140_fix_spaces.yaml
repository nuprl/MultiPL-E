name: HumanEval_140_fix_spaces
language: py
prompt: "def fix_spaces(text: str) -> str:\n    \"\"\"\n    Given a string text, replace\
  \ all spaces in it with underscores, \n    and if a string has more than 2 consecutive\
  \ spaces, \n    then replace all consecutive spaces with - \n    \n            \
  \        \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('Example') == 'Example'\n    assert\
  \ candidate('Mudasir Hanif ') == 'Mudasir_Hanif_'\n    assert candidate('Yellow\
  \ Yellow  Dirty  Fellow') == 'Yellow_Yellow__Dirty__Fellow'\n    assert candidate('Exa\
  \   mple') == 'Exa-mple'\n    assert candidate('   Exa 1 2 2 mple') == '-Exa_1_2_2_mple'\n\
  \ndef test_check():\n    check(fix_spaces)\n\ntest_check()\n"
completions: ["    \n    return re.sub(r\"\\s+\", \"-\", text).strip(\"-\").strip(\"\
    -\")\n\n", "    \n    return ' '.join(text.replace(\" \", \"_\").replace(\"  \"\
    , \"_\").replace('  ', ' -').split())\n", "    \n    def replace_spaces(text:\
    \ str) -> str:\n        \"\"\"\n        Given a string text, \n        replace\
    \ all spaces in it with underscores, \n        and if a string has more than 2\
    \ consecutive spaces, \n        then replace all consecutive spaces with -\n \
    \       \n        :param text: The text to check for spaces and replace\n    \
    \    :type text: str\n        :returns: str\n        \"\"\"\n        \n      \
    \  return re.sub(r'[ ]{2,}', \" \", text)\n        \n    return replace_spaces(text)\n\
    </cell>\n<text>\nLet's test our function by applying it to the test case for string\
    \ A. Note that the first test case is correct - there are no consecutive spaces.\
    \ This is because this string does not have any leading or trailing spaces.\n\n\
    \n</text>\n<cell>\ntext = 'A string'\nfix_spaces(text)\n</cell>\n<text>\nNext,\
    \ we'll test our function by applying it to the test case for string B. This is\
    \ slightly more complicated because there are 2 spaces between the words \"string\"\
    \ and \"A\".\n\n\n</text>\n<cell>\ntext = 'A  string'\nfix_spaces(text)\n</cell>\n\
    <text>\nFinally, we'll test our function by applying it to the test case for string\
    \ C. Here there are 3 consecutive spaces between the words \"string\" and \"A\"\
    .\n\n\n</text>\n<cell>\ntext = 'A  string    '\nfix_spaces(text)\n</cell>\n<text>\n\
    Now, let's define a function that takes a string as input and returns the input\
    \ string with the spaces corrected. Let's test our function by applying it to\
    \ the test case for string A.\n\n\n</text>\n<cell>\ntext = 'A string'\nfix_spaces(text)\n\
    </cell>\n<text>\nGreat! The function fix_spaces correctly replaces spaces with\
    \ underscores when there are no spaces in the input.\n\nNow let's define a function\
    \ that takes an input string and returns a fixed version of the input string with\
    \ spaces removed, while still allowing words that are longer than two spaces.\n\
    \nFor example, fix_long_spaces(text) should work for these three examples.\n\n\
    </text>\n<cell>\nfix_long_spaces('Hello  world!  ')\n</cell>\n<cell>\nfix_long_spaces('Hello\
    \  world! ')\n</cell>\n<cell>\nfix_long_spaces('This is a very long sentence!')\n\
    </cell>\n<text>\nThis may seem like a lot, but we have already seen how we can\
    \ use re.sub to fix strings. Now we're going to learn how to use Python to solve\
    \ a problem of creating a new string.\n\nThe function fix_long_spaces should do\
    \ the following:\n\nRemove all spaces from the input string.\nIf there are more\
    \ than two consecutive spaces in the input string, \nthen replace all consecutive\
    \ space", "    \n    space_pos = text.find(' ')\n    space_len = len(text) - space_pos\
    \ - 1\n    \n    while space_pos > 0 and space_len >= 2:\n        text = text.replace(text[space_pos:space_pos\
    \ + 1], \"_\")\n        space_pos = text.find(' ', space_pos + 1)\n        space_len\
    \ = len(text) - space_pos - 1\n\n    return text\n\n", "    \n    words = text.split(\"\
    \ \")\n    repl = [w for w in words if w != \"*\"]\n    \n    if len(repl) > 1:\n\
    \        for w in repl:\n            w = w.replace(\" \", \"-\")\n           \
    \ repl = [w for w in repl if w != \"*\"]\n        \n    text = \" \".join(repl)\n\
    \    \n    return text\n", "    \n    return re.sub(r'\\s+', r'_', text).replace('\
    \  ', ' ')\n\n", "    text = re.sub('\\s+', '_', text)\n    return text\n", " \
    \   \n    text = re.sub(' +', ' ', text).strip()\n    \n    return re.sub(' +',\
    \ '-', text)\n</cell>\n<cell>", "    \n    # replace spaces with underscores\n\
    \    underscores = re.sub(' +', '_', text)\n    # replace consecutive spaces with\
    \ -\n    multiple = re.sub('( {2,})', '-', underscores)\n    return multiple\n\
    </cell>\n<cell>", "    space_count = len(text.split(' '))\n    if space_count\
    \ > 2:\n        text = text.replace(' ', '_')\n    else:\n        text = text.replace('\
    \ ', '-')\n\n    return text\n\n", "    tokens = text.split()\n    replace_spaces\
    \ = lambda x: re.sub('\\s{2,}', '_', x)\n    replace_dash = lambda x: re.sub('\\\
    s\\s+', '-', x)\n    return ' '.join(map(replace_spaces, tokens))\n", "    \n\
    \    tokens = text.split() # ['This', 'is', 'some', 'sentence']\n    \n    for\
    \ token in tokens:\n        if \" \" in token:\n            token = token.replace(\"\
    \ \", \"_\")\n            if len(token.split(\" \"))>2:\n                tokens\
    \ = token.split(\"_\")\n            else:\n                tokens = \"-\".join(token.split(\"\
    _\"))\n    \n    return tokens\n\n</cell>\n<cell>\ntokens = \"This is a sentence\"\
    .split()\n</cell>\n<cell>\ntokens\n</cell>\n<cell>\nfix_spaces(tokens)\n</cell>\n\
    <cell>\n\" \".join(fix_spaces(tokens))\n</cell>\n<cell>", "    \n    space_idx\
    \ = text.find(\" \")\n    \n    if space_idx == -1:\n        return text\n   \
    \ \n    else:\n        \n        while space_idx > -1:\n            \n       \
    \     if text[space_idx - 1] == \" \":\n                \n                text\
    \ = text.replace(text[space_idx - 1], \"_\", 1) \n                \n         \
    \   else:\n                \n                text = text.replace(text[space_idx\
    \ - 1], \" \")\n                \n            space_idx = text.find(\" \")\n \
    \           \n        \n        return text\n    \n    ", "    return re.sub(r\"\
    \\s+\", \"_\", text).strip()\n\n", "    \n    return re.sub(r\"\\s+\", \"_\",\
    \ text)\n\n", "    \n    tokens = text.split()\n    \n    fixed_text = ' '.join(tokens)\n\
    \    \n    # remove double spaces\n    while '  ' in fixed_text:\n        fixed_text\
    \ = fixed_text.replace('  ', ' ')\n    \n    # remove multiple spaces\n    while\
    \ '  ' in fixed_text:\n        fixed_text = fixed_text.replace('  ', ' ')\n  \
    \  \n    # replace spaces with -\n    fixed_text = fixed_text.replace(' ', '-')\n\
    \    \n    return fixed_text\n</cell>\n<cell>", "    spaces = re.sub('\\s{2,}',\
    \ '-', text).strip('-')\n    if len(spaces) > 1:\n        spaces = re.sub('\\\
    s+', '-', spaces).strip('-')\n    return spaces\n", "    \n    text = text.replace('\
    \ ', '_')\n    \n    if len(text) > 1:\n        text = re.sub(r'\\s+', '-', text)\n\
    \    return text\n\n", "    if text is None:\n        return None\n    # text\
    \ = text.replace(' ', '\\u00A0')\n    text = text.replace(' ', '\\u2190')\n  \
    \  # text = text.replace(' ', '\\u2190')\n    # text = text.replace(' ', '\\u2190')\n\
    \    text = text.replace(' ', '\\u2191')\n    # text = text.replace(' ', '\\u2191')\n\
    \    text = text.replace(' ', '\\u2192')\n    # text = text.replace(' ', '\\u2192')\n\
    \    text = text.replace(' ', '\\u2193')\n    # text = text.replace(' ', '\\u2193')\n\
    \    text = text.replace(' ', '\\u2194')\n    # text = text.replace(' ', '\\u2194')\n\
    \    text = text.replace(' ', '\\u2195')\n    # text = text.replace(' ', '\\u2195')\n\
    \    text = text.replace(' ', '\\u2196')\n    # text = text.replace(' ', '\\u2196')\n\
    \    text = text.replace(' ', '\\u2197')\n    # text = text.replace(' ', '\\u2197')\n\
    \    text = text.replace(' ', '\\u2198')\n    # text = text.replace(' ', '\\u2198')\n\
    \    text = text.replace(' ', '\\u2198')\n    text = text.replace(' ', '\\u2199')\n\
    \    # text = text.replace(' ', '\\u2199')\n    text = text.replace(' ', '\\u2199')\n\
    \    text = text.replace(' ', '\\u21A9')\n    # text = text.replace(' ', '\\u21A9')\n\
    \    text = text.replace(' ', '\\u21AA')\n    # text = text.replace(' ', '\\u21AA')\n\
    \    text = text.replace(' ', '\\u21AB')\n    # text = text.replace(' ', '\\u21AB')\n\
    \    text = text.replace(' ', '\\u21AB')\n    text = text.replace(' ', '\\u21AC')\n\
    \    # text = text.replace(' ', '\\u21AC')\n    text = text.replace(' ', '\\u21AC')\n\
    \    text = text.replace(' ', '\\u21AD')\n    # text = text.replace(' ', '\\u21AD')\n\
    \    text = text.replace(' ', '\\u21AE')\n    # text = text.replace(' ', '\\u21AE')\n\
    \    text = text.replace(' ', '\\u21AE')\n    text = text.replace(' ', '\\u21AF')\n\
    \    # text = text.replace(' ', '\\u21AF')\n    text = text.replace(' ', '\\u21AF')\n\
    \    text = text.replace(' ', '\\u21AF')\n    text = text.replace(' ', '\\u21B0')\n\
    \    # text = text.replace(' ', '\\u21B0')\n    text = text.replace(' ', '\\u21B0')\n\
    \    text = text.replace(' ', '\\u21B0')\n    text = text.replace(' ', '\\u21B1')\n\
    \    # text = text.replace(' ', '\\u21B1')\n    text = text.replace(' ', '\\u",
  "    text = re.sub('[ ]{2,}', '_', text)\n    text = re.sub('\\s{2,}', '-', text)\n\
    \    return text\n\n", "    \n    return ' '.join(text.strip().split())\n\n",
  "    return ' '.join(text.split())\n", "    \n    return re.sub(r'\\s+','_',re.sub(r'\\\
    s{2,}','-',text))\n", "    \n    \n    \n    # replace all spaces with underscores\n\
    \    text = text.replace(' ', '_')\n    \n    # if the string has more than one\
    \ consecutive spaces, \n    # then replace it with -\n    text = text.replace('\
    \  ', '-')\n    \n    return text\n</cell>\n<cell>\ntest_str = fix_spaces(test_str)\n\
    </cell>\n<text>\nStep 6: Tokenization\n\n</text>\n<cell>\nfrom keras.preprocessing.text\
    \ import Tokenizer\n</cell>\n<cell>", "    if len(text) >= 2:\n        for letter\
    \ in text.replace(\" \", \"_\"):\n            if letter == \" \":\n          \
    \      letter = \"-\"\n    return text\n</cell>\n<text>\nNow let's apply the function\
    \ fix_spaces to the list of titles and apply it to the entire list of titles.\n\
    \n\n</text>\n<cell>", "    return re.sub('\\s\\s+', '-', text).strip()\n\n", " \
    \   return re.sub(r\"\\s+\",\"_\",text).replace(\"--\",\"-\")\n", "    \n    #\
    \ Check if there are more than 2 consecutive spaces\n    \n    words = text.split()\n\
    \    \n    for idx, word in enumerate(words):\n        \n        if idx > 0 and\
    \ words[idx-1] != ' ' and words[idx+1] != ' ':\n            \n            words[idx]\
    \ = word.replace(' ', '_')\n            \n    return ' '.join(words)\n\n", " \
    \   \n    words = []\n    for word in text.split():\n        word = word.strip()\n\
    \        \n        # Replace multiple spaces with one space\n        word = word.replace('\
    \  ', ' ')\n        \n        # Remove extra space at the beginning\n        if\
    \ word.startswith(' '):\n            word = word[1:]\n        \n        # Remove\
    \ extra space at the end\n        if word.endswith(' '):\n            word = word[:-1]\n\
    \        \n        words.append(word)\n    \n    # Replace multiple spaces with\
    \ one space\n    text = '\\n'.join(words)\n    \n    # Fix spaces\n    text =\
    \ text.replace('  ', '-')\n    \n    # Remove extra space at the beginning\n \
    \   if text.startswith(' '):\n        text = text[1:]\n    \n    # Remove extra\
    \ space at the end\n    if text.endswith(' '):\n        text = text[:-1]\n   \
    \ \n    return text\n\n", "    \n    pattern = r'  +'\n    text = re.sub(pattern,\
    \ '_', text)\n    text = re.sub(pattern, '-', text)\n    \n    return text\n\n",
  "    return text.replace(' ', '_')\n</cell>\n<cell>", "    \n    return text.replace('\
    \ ', '_')\\\n               .replace('  ', '-')\\\n               .replace(' \
    \ ', '-')\\\n               .replace('  ', '-')\n\n    ", "    if ' ' in text:\n\
    \        split_text = text.split()\n        split_text = [i.lstrip() for i in\
    \ split_text]\n        split_text = [i.replace('  ', '-') for i in split_text]\n\
    \        split_text = ' '.join(split_text)\n    else:\n        split_text = text.lstrip().replace('\
    \  ', '-')\n    return split_text\n\n", "    \n    text = text.replace('  ', '\
    \ ')\n    if text.count(' ') > 2:\n        text = re.sub('  +', '-', text)\n \
    \   \n    return text\n\n", "    \n    # Replace multiple spaces with a single\
    \ space\n    text = re.sub(r'\\s+', ' ', text)\n    \n    # Replace multiple spaces\
    \ with a single space \n    while '  ' in text:\n        text = text.replace('\
    \  ', ' ')\n    \n    return text\n</cell>\n<cell>", "    replacements = {\n \
    \       ' ': '_',\n        ' -': '-'\n    }\n    \n    for k,v in replacements.items():\n\
    \        text = text.replace(k, v)\n    return text\n", "    return re.sub(r\"\
    \\s+\", \"_\", text)\n", "    spaces = re.sub(\"\\s+\", \"_\", text)\n    return\
    \ re.sub(\"_{2,}\", \"-\", spaces)\n", "    \n    new_text = ''\n    \n    for\
    \ char in text:\n        if char == ' ':\n            new_text += '_'\n      \
    \  elif new_text == '':\n            new_text += '_'\n        elif char == '_':\n\
    \            new_text += ' '\n        elif char == '-':\n            new_text\
    \ += ' '\n        else:\n            new_text += char\n    \n    return new_text\n\
    \n", "    space_pattern = re.compile(r'\\s+')\n    return space_pattern.sub('_',\
    \ text)\n</cell>\n<cell>", "    return re.sub(r\"\\s+\", \" \", text)\n", "  \
    \  \n    return re.sub(\" +\", \"_\", text)\n    ", "    no_spaces = re.sub(\"\
    \\s+\", \"-\", text.lower())\n    if len(no_spaces) < len(text):\n        return\
    \ no_spaces\n    else:\n        return text\n", "    \n    fixed_text = text.replace(\"\
    \ \", \"_\")\n    if len(fixed_text) > 2:\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\")\n    return fixed_text\n\n", "    \n    space_n_dash = re.compile('(\\\
    s+)')\n    space_n_dash_2 = re.compile('( +)')\n    \n    return space_n_dash.sub('-',\
    \ space_n_dash_2.sub(' ', text))\n</cell>\n<cell>", "    \n    # Replace all spaces\
    \ with underscores\n    fixed = re.sub(r'\\s+', '_', text)\n    \n    # Replace\
    \ all consecutive spaces with -\n    fixed = re.sub(r'\\s+', '-', fixed)\n   \
    \ \n    # Remove all underscores \n    fixed = fixed.replace('_', '')\n    \n\
    \    return fixed\n\n", "    \n    #TODO: Make this code faster\n    return re.sub('\\\
    s+', '_', text)\n\n\n</cell>\n<cell>", "    \n    text = re.sub(\"[\\t]\", \"\
    _\", text)\n    text = re.sub(\"  +\", \"_\", text)\n    return text\n\n", " \
    \   space_pattern = r\"\\s+\"\n    text = re.sub(space_pattern, \"_\", text)\n\
    \    spaces = re.findall(\"\\s\", text)\n    if len(spaces) > 2:\n        text\
    \ = re.sub(\"[ ]{2,}\", \"-\", text)\n    return text\n", "    \n    \n    #\n\
    \    # Remove double spaces\n    #\n    text = re.sub('  +',' ', text)\n    \n\
    \    #\n    # Replace multiple spaces with single ones\n    #\n    text = re.sub('\
    \  +', ' ', text)\n    \n    return text\n</cell>\n<cell>", "    # add '-' to\
    \ text if there are consecutive spaces\n    # and replace spaces with '_'\n  \
    \  \n    return text.replace(' ', '-') if ' ' in text else text\n</cell>\n<cell>",
  "    return text.replace(\" \", \"_\").replace(\" -\", \"-\").replace(\"_ -\", \"\
    -\")\n\n", "    spaces = re.sub('\\s+', '-', text).split('-')\n    \n    if len(spaces)\
    \ > 1:\n        spaces = ''.join(spaces)\n        \n    return spaces\n\n", " \
    \   \n    def replace_spaces(text: str) -> str:\n        replaced_text = ''\n\
    \        \n        number_of_spaces = 0\n        space_count = 0\n        \n \
    \       for index, char in enumerate(text):\n            if char == ' ':\n   \
    \             if space_count > 2:\n                    replaced_text += '_'\n\
    \                    space_count = 0\n                space_count += 1\n     \
    \       else:\n                replaced_text += char\n                \n     \
    \       if space_count == 2:\n                replaced_text += '-'\n         \
    \       space_count = 0\n                \n        return replaced_text\n    \n\
    \    replaced_text = replace_spaces(text)\n    \n    return replaced_text\n\n",
  "    no_spaces = re.sub('\\s', \"\", text)\n    no_spaces = re.sub('\\s', '_', no_spaces)\n\
    \    return no_spaces\n\n", "    text = text.replace(' ', '_')\n    \n    lines\
    \ = text.splitlines()\n    \n    if any(len(line.split(' ')) > 1 for line in lines):\n\
    \        lines = [line.replace('  ', '-') for line in lines]\n    else:\n    \
    \    pass\n        \n    return '\\n'.join(lines)\n\n", "    \n    # Replace any\
    \ number of consecutive spaces with a single dash\n    nospaces = text.replace('\
    \  ', '-')\n    \n    # Replace multiple spaces with a single dash\n    consecutive\
    \ = nospaces.replace('  ', '- ')\n    \n    # Replace a single space with a single\
    \ dash\n    single = consecutive.replace(' ', '-')\n    \n    # Remove the final\
    \ dash\n    nospaces = nospaces.replace('- ', '')\n    \n    return single\n",
  "    return re.sub(r\"\\s+\", \"-\", text).strip(\"-\")\n\n", "    \n    if text\
    \ is None:\n        return None\n    \n    text = re.sub(' +', '_', text)\n  \
    \  \n    # Find consecutive spaces \n    spaces_count = 0\n    \n    for idx,\
    \ char in enumerate(text):\n        if char == ' ':\n            spaces_count\
    \ += 1\n            \n        else:\n            break\n    \n    if spaces_count\
    \ > 2:\n        text = re.sub(' +', ' -', text)\n    \n    return text\n    ",
  "    return re.sub(' +', ' ', text).strip()\n\n", "    return \" \".join(text.strip().split())\n\
    </cell>\n<cell>\nfix_spaces(\"  hello world! \")\n</cell>\n<cell>\nfix_spaces(\"\
    \  hello world !\")\n</cell>\n<cell>\nfix_spaces(\"hello   world!\")\n</cell>\n\
    <cell>", "    \n    new_text = \"\"\n    \n    for c in text:\n        if c ==\
    \ \" \":\n            new_text += \"_\"\n        elif c == \" \":\n          \
    \  new_text += \"-\"\n        else:\n            new_text += c\n        \n   \
    \ return new_text\n</cell>\n<cell>", "    \n    text = text.replace('  ', ' ')\n\
    \    text = text.replace(' ', '_')\n    if len(text.split()) > 1:\n        text\
    \ = text.replace('_', '-')\n        \n    return text\n\n", "    replacements\
    \ = {\n        \" \": \"_\",\n        \"  \": \" \"\n    }\n    for old, new in\
    \ replacements.items():\n        text = text.replace(old, new)\n    return text\n\
    \n", "    return re.sub(\"\\s\\s+\", \"_\", text)\n", "    \n    \n    words =\
    \ text.split() # split text into words\n    fixed_words = []\n    \n    for i\
    \ in range(len(words)): # for each word\n        # fix spaces before and after\
    \ word\n        if words[i] == ' ':\n            fixed_words.append('_')\n   \
    \     elif words[i].rfind(' ') != -1:\n            fixed_words.append(words[i].replace('\
    \ ', '_'))\n        elif words[i] == '-':\n            fixed_words.append(words[i].replace('-',\
    \ '_'))\n        else:\n            fixed_words.append(words[i])\n           \
    \ \n    text = ' '.join(fixed_words)\n    \n    return text\n    \n", "    \n\
    \    return re.sub('[ ]{2,}', '-', text)\n\n", "    return re.sub(r'\\s+', '_',\
    \ text)\n\n", "    \n    text = re.sub(r\"\\s+\", \"-\", text)\n    text = re.sub(r\"\
    (?<=\\s)\\s+(?=\\s)\", \"-\", text)\n    \n    return text\n\n", "    \n    #\
    \ Replace all spaces with underscores\n    text = re.sub(r\"\\s+\", \"_\", text)\n\
    \    \n    # If the string has more than 2 consecutive spaces, \n    # then replace\
    \ all consecutive spaces with -\n    if \" \" in text and text.count(\" \") >\
    \ 2:\n        text = re.sub(\" +\", \" - \", text)\n    \n    return text\n</cell>\n\
    <cell>\nfix_spaces(\"This is  a test text\")\n</cell>\n<text>\nTokenization\n\n\
    </text>\n<text>\nTokenization refers to splitting strings into smaller \"tokens\"\
    \ so that a Machine Learning model can better understand each word. \nTokenization\
    \ is done by splitting the string into a list of words using Python's split()\
    \ function. \nHowever, since this particular text is small, there is no need to\
    \ do any tokenization because the words are already split into a list of unique\
    \ words.\n\n\n</text>\n<cell>", "    return text.replace(' ','_').replace(\" \
    \ \",'-')\n\n", "    # remove spaces from beginning and end of text\n    without_spaces\
    \ = re.sub('^\\s', '', text)\n    without_spaces = re.sub('$\\s', '', without_spaces)\n\
    \n    # replace consecutive spaces with dashes\n    without_spaces = re.sub('\\\
    s', '-', without_spaces)\n\n    # reattach the beginning and end of the text\n\
    \    return ' ' + without_spaces + ' '\n\n", "    \n    words = text.split(' ')\n\
    \    \n    for idx, word in enumerate(words):\n        words[idx] = word.replace('\
    \ ', '_')\n        \n        if idx == len(words) - 1:\n            words[idx]\
    \ = words[idx].replace(' ', '_')\n        \n        if idx == len(words) - 2:\n\
    \            words[idx] = words[idx].replace(' ', '_')\n            \n    return\
    \ ' '.join(words)\n</cell>\n<cell>", "    \n    words = text.split(\" \")\n  \
    \  fixed_text = \"\"\n    for word in words:\n        fixed_text += \" \" + word.replace(\"\
    \ \", \"_\") + \" \" \n    \n    fixed_text = fixed_text[:-1]\n    \n    return\
    \ fixed_text\n\n</cell>\n<cell>\nfix_spaces(text3)\n</cell>\n<text>\nSplit text\
    \ by sentences \nSplit text into sentences, where a sentence is defined as anything\
    \ that ends with the period.\n\n</text>\n<cell>", "    if text is None:\n    \
    \    return ''\n    words = text.split(' ')\n    for i, word in enumerate(words):\n\
    \        words[i] = word.replace(\" \", \"_\")\n    \n    filtered_words = []\n\
    \    for word in words:\n        if len(word) >= 2:\n            if word[0] ==\
    \ ' ':\n                filtered_words.append('')\n            else:\n       \
    \         filtered_words.append(word)\n        else:\n            filtered_words.append(word)\n\
    \    \n    spaces_string = ''.join(filtered_words)\n    spaces_string = spaces_string.replace('-',\
    \ '')\n    return spaces_string\n", "    words = text.split(' ')\n    for word\
    \ in words:\n        word = word.strip()\n        word = re.sub(r\"\\s+\", '_',\
    \ word)\n        if word != '':\n            words.append(word)\n    return '\
    \ '.join(words)\n\n", "    \n    fixed_text = text.replace(\" \", \"_\")\n   \
    \ fixed_text = fixed_text.replace(\" \", \"_\").replace(\" \", \"-\")\n    fixed_text\
    \ = fixed_text.replace(\" \", \"_\")\n    fixed_text = fixed_text.replace(\" \"\
    , \"_\")\n    \n    return fixed_text\n</cell>\n<cell>", "    # text = text.replace('\
    \ ', '_')\n    # text = text.replace(' ', '-')\n    # text = text.replace('  ',\
    \ '-')\n    # text = text.replace('  ', ' ')\n    # text = re.sub(r'\\s{2,}',\
    \ '-', text)\n    return text\n\n", "    \n    fix_str = text.strip().replace('\
    \ ', '_')\n    fix_str = re.sub(r'(\\s\\s+)', r' - ', fix_str)\n    \n    return\
    \ fix_str\n</cell>\n<cell>\nfix_spaces('a b c   d e')\n</cell>\n<cell>\nfix_spaces('a\
    \ b c   d e')\n</cell>\n<text>\nExercise 8\n\n</text>\n<cell>", "    \n    no_spaces\
    \ = text.replace(\" \", \"_\")\n    \n    spaces_count = no_spaces.count(\"_\"\
    )\n    if spaces_count > 2:\n        no_spaces = no_spaces.replace(\"_\", \"-\"\
    )\n    \n    return no_spaces\n", "    \n    spaces = \" \"\n    \n    fixed_text\
    \ = text.replace(spaces, '-')\n    \n    while fixed_text.count(spaces) > 2:\n\
    \        fixed_text = fixed_text.replace(spaces, '-')\n        \n    return fixed_text\n\
    </cell>\n<cell>\nprint(fix_spaces('    Hello World    '))\n</cell>\n<cell>", " \
    \   # Replace all the spaces in the string with underscores\n    text = re.sub('\
    \ +', '_', text)\n    \n    # Make sure there are no consecutive underscores\n\
    \    # and that there aren't more than 2 consecutive underscores\n    cleaned\
    \ = re.sub('_+_+', '_', text)\n    \n    # Make sure there are no consecutive\
    \ dashes\n    # and that there aren't more than 2 consecutive dashes\n    cleaned\
    \ = re.sub('-+', '-', cleaned)\n    \n    return cleaned\n</cell>\n<cell>", " \
    \   \n    # Replace multiple spaces with a single dash\n    text = re.sub(\" \
    \ +\", \"- \", text)\n    \n    # Replace multiple dash with a single dash\n \
    \   text = re.sub(\"- +\", \"- \", text)\n    \n    # Replace multiple dashes\
    \ with a single dash\n    text = re.sub(\"--+\", \"-- \", text)\n    \n    # Replace\
    \ multiple spaces with a single dash\n    text = re.sub(\" +\", \" \", text)\n\
    \    \n    # Remove trailing space\n    text = text.rstrip()\n    \n    return\
    \ text\n\n", "    \n    fixed_text = text.replace(' ', '_')\n    fixed_text =\
    \ fixed_text.replace('  ', '-')\n    \n    return fixed_text\n</cell>\n<cell>",
  "    return re.sub(\" +\", \"-\", text).strip()\n</cell>\n<cell>", "    return re.sub(r'\\\
    s+', \" \", text).strip()\n", "    return ' '.join(text.split()).replace(\" \"\
    , \"_\").replace(\"  \", \"_\")\n\n", "    \n    tokens = text.split()\n    \n\
    \    for i, token in enumerate(tokens):\n        if (token == \" \"):\n      \
    \      tokens[i] = \"_\"\n    \n    string = \" \".join(tokens)\n    \n    return\
    \ string\n    \n    ", "    pattern = re.compile(\"( ){2,}\")\n    return pattern.sub(\"\
    \ -\", text)\n\n", "    \n    return text.replace(\" \", \"_\").replace(\"  \"\
    , \"-\")\n\n", "    \n    \n    no_spaces = text.replace(\" \",\"_\")\n    \n\
    \    two_spaces = re.sub(\"  \",\"-\",no_spaces)\n    \n    return two_spaces\n",
  "    \n    # Replace all spaces with underscores\n    text = text.replace(' ', '_')\n\
    \    \n    # Replace consecutive spaces with -\n    text = re.sub(r'( +)', '-\
    \ ', text)\n    \n    return text\n</cell>\n<text>\nLet's check out some samples\
    \ of our data using our fix_spaces function\n\n\n</text>\n<cell>", "    tokens\
    \ = text.split()\n    fixed_tokens = []\n    for token in tokens:\n        if\
    \ ' ' in token:\n            fixed_tokens.append(token.replace(' ', '_'))\n  \
    \      else:\n            fixed_tokens.append(token)\n    return ' '.join(fixed_tokens)\n\
    \n", "    return ' '.join(text.replace(\" \", \"_\").split())\n\n", "    return\
    \ re.sub(r\"\\s+\", \"_\", text)\n", "    words = text.split()\n    result = \"\
    \"\n    for word in words:\n        if len(word) > 2 and len(word) != 1:\n   \
    \         result += \"-\"\n        result += word\n        result += \"_\"\n \
    \   result = result[:-1]\n    return result\n</cell>\n<cell>\nprint(fix_spaces(\"\
    \ \"))\n</cell>\n<cell>\nprint(fix_spaces(\" 1\"))\n</cell>\n<cell>\nprint(fix_spaces(\"\
    1 \"))\n</cell>\n<cell>", "    \n    return re.sub(r'\\s+', '-', text)\n\n", " \
    \   return ' '.join(text.split()).replace(' ', '_')\n\n", "    \n    return text.replace('\
    \ ', '_').replace('  ', '-')\n</cell>\n<cell>", "    return re.sub(' +', '_',\
    \ text)\n\n", "    return re.sub('\\s{2,}', '-', text)\n</cell>\n<cell>\nfix_spaces('\
    \  This     is a text  ')\n</cell>\n<cell>\nfix_spaces('This    is  a  text')\n\
    </cell>\n<cell>", "    import string\n    no_spaces = text.replace(' ','_')\n\
    \    no_spaces = no_spaces.replace('\\t','_')\n    no_spaces = no_spaces.replace('\\\
    n','_')\n    no_spaces = no_spaces.replace('\\r','_')\n    no_spaces = no_spaces.replace('\\\
    v','_')\n    no_spaces = no_spaces.replace('\\f','_')\n    no_spaces = no_spaces.replace('\\\
    a','_')\n    no_spaces = no_spaces.replace('\\b','_')\n    no_spaces = no_spaces.replace('\\\
    !','_')\n    no_spaces = no_spaces.replace('\\)','_')\n    no_spaces = no_spaces.replace('\\\
    (','_')\n    no_spaces = no_spaces.replace('\\?','_')\n    no_spaces = no_spaces.replace('\\\
    `','_')\n    no_spaces = no_spaces.replace('\\%','_')\n    no_spaces = no_spaces.replace('\\\
    *','_')\n    no_spaces = no_spaces.replace('\\+','_')\n    no_spaces = no_spaces.replace('\\\
    ,','_')\n    no_spaces = no_spaces.replace('\\-','_')\n    no_spaces = no_spaces.replace('\\\
    :','_')\n    no_spaces = no_spaces.replace('\\;','_')\n    no_spaces = no_spaces.replace('\\\
    <','_')\n    no_spaces = no_spaces.replace('\\>','_')\n    no_spaces = no_spaces.replace('\\\
    &','_')\n    no_spaces = no_spaces.replace('\\|','_')\n    no_spaces = no_spaces.replace('\\\
    \\','_')\n    no_spaces = no_spaces.replace('\\}','_')\n    no_spaces = no_spaces.replace('\\\
    ]','_')\n    no_spaces = no_spaces.replace('\\[','_')\n    no_spaces = no_spaces.replace('\\\
    {','_')\n    no_spaces = no_spaces.replace('\\^','_')\n    no_spaces = no_spaces.replace('\\\
    $','_')\n    no_spaces = no_spaces.replace('\\\\','_')\n    no_spaces = no_spaces.replace('\\\
    ;','_')\n    no_spaces = no_spaces.replace('\\.','_')\n    no_spaces = no_spaces.replace('\\\
    ','_')\n    no_spaces = no_spaces.replace('\\~','_')\n    no_spaces = no_spaces.replace('\\\
    ?','_')\n    no_spaces = no_spaces.replace('", "    \n    return re.sub(' +',\
    \ ' ', text).strip().replace(\" \", \"-\")\n", "    return re.sub(' +', ' ', text).strip().replace(\"\
    \ \", \"-\")\n\n", "    return re.sub(' +', ' ', text).strip().replace(' -', '\
    \ -')\n</cell>\n<text>\nThe function fix_spaces does the following:\n\nGiven a\
    \ string text, it first replaces all spaces in it with underscores, and", "  \
    \  fixed_text = text.replace(' ', '_')\n    \n    if fixed_text.count(' ') > 2:\n\
    \        fixed_text = (fixed_text.replace('  ', '- '))\n    return fixed_text\n",
  "    \n    return text.replace(\" \", \"_\") if text != \"\" else \"\"\n    ", " \
    \   if text == '': return ''\n    text = text.replace('  ', ' ').replace(' ',\
    \ '_')\n    if len(text) > 2:\n        text = text.replace('  ', ' - ')\n    return\
    \ text\n", "    return re.sub('\\s+', '-', text)\n", "    \n    # Replace spaces\n\
    \    text = re.sub(' +', '_', text)\n    \n    # Consecutive spaces\n    text\
    \ = re.sub(' +', ' ', text)\n    \n    # Replace multiple spaces with single space\n\
    \    text = re.sub(' +', ' ', text)\n    \n    return text\n</cell>\n<cell>",
  "    for char in text:\n        if char == \" \":\n            text = text.replace(\"\
    \ \", \"_\")\n        elif (char != \" \" and text[(text.index(char) - 1):text.index(char)]\
    \ != \" \"):\n            text = text.replace(\" \", \"-\")\n    return text\n\
    \n", "    \n    text=text.replace(\" \", \"_\")\n    if text.count(\"  \") > 1:\n\
    \        text= \" \".join(text.split(\"  \"))\n    text=text.replace(\" \", \"\
    -\")\n    return text\n</cell>\n<cell>", "    \n    # Remove spaces from beginning\
    \ and end\n    text = text.replace(\" \", \"\")\n    \n    # Replace multiple\
    \ spaces with one space\n    text = text.replace(\"  \", \" \")\n    \n    # Replace\
    \ multiple consecutive spaces with -\n    text = text.replace(\" -\", \"- \")\n\
    \    \n    return text\n</cell>\n<text>\nLet's test it on a few examples:\n\n\n\
    </text>\n<cell>\nfix_spaces(\"Happy Birthday\")\n</cell>\n<cell>\nfix_spaces(\"\
    Happy Birthday Happy Birthday Happy-Birthday\")\n</cell>\n<cell>\nfix_spaces(\"\
    Happy Birthday Happy Birthday Happy Birthday Happy Birthday Happy-Birthday\")\n\
    </cell>\n<text>\nNow, let's apply the function above on all the sentences in the\
    \ corpus:\n\n\n</text>\n<cell>\nfor sentence in corpus_clean:\n    corpus_clean[sentence]\
    \ = fix_spaces(sentence)\n</cell>\n<text>\nNow, let's see a few examples:\n\n\n\
    </text>\n<cell>\nprint(corpus_clean[2])\n</cell>\n<text>\nTo see the words in\
    \ the original text, let's create a list that contains all the words in the corpus:\n\
    \n\n</text>\n<cell>\nall_words = []\nfor sentence in corpus_clean:\n    for word\
    \ in sentence:\n        all_words.append(word)\n</cell>\n<text>\nNow let's see\
    \ how many different words we have:\n\n\n</text>\n<cell>\nlen(all_words)\n</cell>\n\
    <text>\nLet's sort the words by their frequencies:\n\n\n</text>\n<cell>\nall_words.sort(key=word_frequencies)\n\
    </cell>\n<text>\nAnd finally print the first 20 sorted words of our corpus:\n\n\
    \n</text>\n<cell>\nall_words[:20]\n</cell>\n<text>\nAs we can see, there are some\
    \ common words that appear very often in the corpus, like \"the\", \"and\", \"\
    is\", and \"are\". Now, let's add all the words appearing more than 20 times:\n\
    \n\n</text>\n<cell>\nfrequencies = {}\nfor sentence in corpus_clean:\n    for\
    \ word in sentence:\n        if word in frequencies:\n            frequencies[word]\
    \ += 1\n        else:\n            frequencies[word] = 1\n                \nfrequencies[\"\
    the\"] = 2\nfrequencies[\"is\"] = 1\nfrequencies[\"and\"] = 1\nfrequencies[\"\
    are\"] = 2\n\nall_words.sort(key=word_frequencies, reverse=True)\n</cell>\n<text>\n\
    Now, let's see how many words we have after the removal of \"the\" and \"is\"\
    :\n\n\n</text>\n<cell", "    \n    text = text.replace(' ', '_')\n    if len(text)\
    \ > 2:\n        text = re.sub(r'\\s+', r'-', text)\n    \n    return text\n\n",
  "    \n    text = text.strip()\n    \n    # handle when there are no spaces in the\
    \ text\n    if not text:\n        return ''\n    \n    # handle when there are\
    \ multiple spaces\n    multiple_spaces = text.count(' ') != 1\n    \n    # handle\
    \ when there are less than 2 spaces\n    if not multiple_spaces:\n        return\
    \ text\n    \n    # handle when there are more than 2 consecutive spaces\n   \
    \ if text.count(' ') > 1:\n        text = text.replace(' ', '-')\n    \n    return\
    \ text\n\n", "    for space in ' \\n':\n        text = text.replace(space,'_')\n\
    \    \n    to_remove = ['_',' ']\n    for i in to_remove:\n        text = text.replace(i,'-')\n\
    \        \n    return text\n\n", "    text = re.sub(' +', '_', text)\n    text\
    \ = re.sub('  +', '-', text)\n    return text\n</cell>\n<cell>\ntext = 'This is\
    \ an example text. With many spaces'\ntext = fix_spaces(text)\ntext\n</cell>\n\
    <cell>\ntext = ' This is an example text. With many spaces.'\ntext = fix_spaces(text)\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.     With many spaces'\n\
    text = fix_spaces(text)\ntext\n</cell>\n<cell>\ntext = 'This is an example text.\
    \     With many spaces.'\ntext = fix_spaces(text)\ntext\n</cell>\n<text>\nConverting\
    \ text to lower case\n\n</text>\n<cell>\ntext = 'This is an example text.'\ntext\
    \ = text.lower()\ntext\n</cell>\n<text>\nConverting text to upper case\n\n</text>\n\
    <cell>\ntext = 'This is an example text.'\ntext = text.upper()\ntext\n</cell>\n\
    <text>\nConverting text to title case\n\n</text>\n<cell>\ntext = 'This is an example\
    \ text.'\ntext = text.title()\ntext\n</cell>\n<text>\nConverting text to sentence\
    \ case\n\n</text>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<cell>\ntext = 'This is an example text.'\ntext = text.split('.')\n\
    text\n</cell>\n<text>\nConverting text to pascal case\n\n</text>\n<cell>\ntext\
    \ = 'This is an example text.'\ntext = text.split('_')\ntext\n</cell>\n<cell>\n\
    text = 'This is an example text.'\ntext = text.split('_')\ntext\n</cell>\n<cell>\n\
    text = 'This is ", "    \n    text_list = text.split(' ')\n    \n    for i in\
    \ range(len(text_list)):\n        if text_list[i].strip() == '':\n           \
    \ text_list[i] = '_'\n        else:\n            if '-' in text_list[i]:\n   \
    \             text_list[i] = text_list[i].replace('-', ' ')\n            elif\
    \ ' ' in text_list[i]:\n                text_list[i] = text_list[i].replace('\
    \ ', '_')\n                \n    return ' '.join(text_list)\n", "    \n    text\
    \ = text.replace(\" \",\"_\")\n    text = text.replace(\"  \",\"-\")\n    \n \
    \   return text\n</cell>\n<cell>", "    \n    original_string = text\n    \n \
    \   while \"  \" in text:\n        text = text.replace(\"  \", \"_\")\n      \
    \  \n    while \"  \" in text:\n        text = text.replace(\" \", \"-\")\n  \
    \      \n    while \"  \" in text:\n        text = text.replace(\"  \", \"_\"\
    )\n        \n    while \"  \" in text:\n        text = text.replace(\"  \", \"\
    _\")\n        \n    while \"  \" in text:\n        text = text.replace(\"  \"\
    , \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        \n    while \"  \" in text:\n        text = text.replace(\"\
    \  \", \"_\")\n        ", "    \n    return re.sub(\"\\\\s+\", \"_\", text).strip(\"\
    -\")\n", "    \n    fixed_text = text\n    \n    fixed_text = fixed_text.replace(\"\
    \ \", \"_\")\n    \n    if len(fixed_text) <= 2:\n        \n        return fixed_text\n\
    \    \n    fixed_text = fixed_text.replace(\" \", \"-\")\n    \n    return fixed_text\n\
    </cell>\n<cell>\nprint(fix_spaces(text = \"i love you so much\"))\n</cell>\n<text>\n\
    Task 4\nWrite a function called fix_punct which takes a string text and returns\
    \ a string with all punctuation removed.\n\nPunctuation are the characters which\
    \ have a specific meaning in a text (e.g., '.', ',', '!', '?', etc.)\n\n\n</text>\n\
    <cell>", "    \n    cleaned_text = text.replace(' ', '_')\n    cleaned_text =\
    \ cleaned_text.strip()\n    cleaned_text = cleaned_text.lower()\n    return cleaned_text\n",
  "    return re.sub(\" +\", \" \", text).replace(\"-\", \" \")\n\n", "    return\
    \ re.sub(r\"\\s(?=\\s)\", \" \", text).replace(\" \", \"-\")\n\n", "    \n   \
    \ # remove all spaces and make everything lower case\n    text = text.replace('\
    \ ', '_').lower()\n    \n    # remove consecutive spaces\n    while '  ' in text:\n\
    \        text = text.replace('  ', '-')\n        \n    return text\n</cell>\n\
    <cell>", "    return re.sub('\\s+', '_', text).replace(' -', '_')\n\n", "    return\
    \ re.sub(' +', '_', text)\n", "    \n    space_regex = re.compile('\\\\s+')\n\
    \    \n    return space_regex.sub('-', text)\n", "    \n    new_text = ''\n  \
    \  text = text.replace(' ', '_')\n    \n    for character in text:\n        if\
    \ character == ' ':\n            new_text += '_'\n        else:\n            new_text\
    \ += character\n    return new_text\n</cell>\n<cell>", "    import re\n    from\
    \ functools import reduce\n\n    spaces_re = re.compile(r'\\s+')\n    return spaces_re.sub('-',\
    \ text)\n\n", "    \n    text = text.replace(\" \", \"_\")\n    text = re.sub(r\"\
    [ ]{2,}\", \"-\", text)\n    return text\n", "    text = text.replace(\"\\n\"\
    , \"\")\n    text = text.replace(\" \", \"-\")\n    while \"  \" in text:\n  \
    \      text = text.replace(\"  \", \"_\")\n    return text\n\n", "    \n    tokens\
    \ = text.split(' ')\n    if len(tokens) > 1:\n        new_tokens = ' '.join(tokens).split('\
    \ ')\n        new_tokens = [\n            token for token in new_tokens\n    \
    \        if token not in (\n                'a',\n                'an',\n    \
    \            'the',\n                'of',\n                'and',\n         \
    \       'to',\n                'in',\n                'is',\n                'it',\n\
    \                'have',\n                'he',\n                'she',\n    \
    \            'we',\n                'you',\n                'his',\n         \
    \       'her',\n                'that',\n                'these',\n          \
    \      'those',\n                'what',\n                'which',\n         \
    \       'who',\n                'whom',\n                'where',\n          \
    \      'why',\n                'how',\n                'this',\n             \
    \   'that',\n                'those',\n                'am',\n               \
    \ 'are',\n                'is',\n                'was',\n                'were',\n\
    \                'be',\n                'being',\n                'have',\n  \
    \              'have',\n                'do',\n                'did',\n      \
    \          'do',\n                'a',\n                'an',\n              \
    \  'the',\n                'and',\n                'to',\n                'in',\n\
    \                'with',\n                'on',\n                'at',\n     \
    \           'for',\n                'with',\n                'of',\n         \
    \       'in',\n                'about',\n                'against',\n        \
    \        'between',\n                'into',\n                'through',\n   \
    \             'during',\n                'after',\n                'before',\n\
    \                'above',\n                'below',\n                'to',\n \
    \               'from',\n                'up',\n                'down',\n    \
    \            'in',\n                'out',\n                'on',\n          \
    \      'off',\n                'over',\n                'under',\n           \
    \     'again',\n                'further',\n                'then',\n        \
    \        'once',\n                'here',\n                'there',\n        \
    \        'when',\n                'where',\n                'why',\n         \
    \       'how',\n                'all',\n                'any',\n             \
    \   'both',\n                'each',\n                'few',\n               \
    \ 'more',\n                'most',\n                'other',\n               \
    \ 'some',\n                'such',\n                'no',\n                'nor',\n\
    \                'not',\n                'only',\n                'own',\n   \
    \             'same',\n                'so',\n                'than',\n      \
    \          'too',\n                'very',\n                's',\n           \
    \     't',\n                'can',\n                'will',\n                'just',\n\
    \                'don',\n                'should',\n                'now',\n \
    \               'd',\n                'll',\n                'm',\n          \
    \      'o',\n                're',\n                've',\n                'y',\n\
    \                'ain',\n                'aren',\n                'co", "    \n\
    \    tokens = text.split()\n    \n    # Check for consecutive spaces\n    if len(tokens)\
    \ > 1:\n        for i in range(len(tokens)):\n            if tokens[i] != \" \"\
    :\n                # If not a space, continue checking\n                continue\n\
    \            \n            # Check for other consecutive spaces\n            for\
    \ j in range(i+1, len(tokens)):\n                if tokens[j] == \" \":\n    \
    \                # If space, then replace with dash\n                    tokens[j]\
    \ = \"-\"\n                    break\n                \n    return \" \".join(tokens)\n\
    \n", "    \n    return text.replace(' ','_').replace(\" -\", \"_\")\n</cell>\n\
    <cell>\nprint(fix_spaces(\"hi there sir\"))\n</cell>\n<text>\n5.4.2 Write a function\
    \ named make_list that takes a string text and splits it into a list of words\
    \ (where each word is a lowercase string). Make sure that the function returns\
    \ the list of words in lower case.\n\n\n</text>\n<cell>", "    \n    words = [word\
    \ for word in text.split(\" \") if word]\n    if len(words) > 1:\n        text\
    \ = \" \".join(words)\n        text = text.replace(\" \", \"-\")\n        text\
    \ = text.replace(\" \", \"-\")\n    return text\n\n", "    space_counts = Counter(text.split())\n\
    \    return re.sub(r'\\s+', '_', text).strip() if space_counts else text\n\n",
  "    return \" \".join(text.split())\n</cell>\n<cell>", "    \n    processed_text\
    \ = text.replace(\" \", \"_\")\n    \n    if processed_text.count(' ') > 2:\n\
    \        processed_text = processed_text.replace('  ', '- ')\n    \n    return\
    \ processed_text\n    ", "    \n    \n    \"\"\"\n    # replace consecutive spaces\
    \ with dash - \n    \n    if len(text) > 2:\n        text = re.sub(' +', '-',\
    \ text)\n    else:\n        \n        text = re.sub(' +', '', text)\n    return\
    \ text\n    \n</cell>\n<cell>\nfix_spaces(\"  a b c   d\")\n</cell>\n<cell>\n\
    fix_spaces(\"abc 123\")\n</cell>\n<cell>", "    \n    string = re.sub(' +', '_',\
    \ text).strip()\n    \n    \n    # Check if text has more than 2 consecutive spaces\n\
    \    \n    if re.search('\\s{2,}', string): \n        \n        string = re.sub('\\\
    s{2,}', '-', string).strip()\n        \n    return string\n", "    \n    text\
    \ = text.split(\" \")\n    text = [\n        s.replace(' ', '-') for s in text\n\
    \        if len(s.replace(' ', '')) > 2\n    ]\n    return \" \".join(text).replace('\
    \ ', '-')\n\n", "    return ' '.join(text.split())\n", "    \n    spaces = ' '\n\
    \    underscores = '_'\n    \n    if len(text) <= 2:\n        return text\n  \
    \  elif text[0] == spaces and text[1] == spaces:\n        return underscores +\
    \ text[2:]\n    elif text[0] == spaces and text[2] == spaces:\n        return\
    \ underscores + text[1:-2] + underscores\n    else:\n        return underscores\
    \ + text[1:-1] + underscores\n", "    \n    # Convert text to lowercase\n    text\
    \ = text.lower()\n\n    # Replace spaces with an underscore\n    text = re.sub(r'\\\
    s+', '-', text)\n\n    # If the string has more than two consecutive spaces,\n\
    \    # then replace all consecutive spaces with a single hyphen\n    text = re.sub(r'\\\
    s+', '-', text)\n\n    return text\n\n", "    \n    return re.sub(' +', '\\n',\
    \ text)\n    \n    ", "    return ' '.join(text.strip().split())\n", "    if len(text)\
    \ == 0: return text\n    \n    text = re.sub(r'\\s+', '-', text)\n    text = re.sub(r'\
    \  +', '-', text)\n    return text\n\n", "    return re.sub(' +', ' ', text).strip()\n",
  "    return re.sub(' +', '-', text).strip('-')\n</cell>\n<text>\nSome example usage\n\
    \n</text>\n<cell>", "    text = text.strip()\n    if text.isspace():\n       \
    \ return text\n    elif not text:\n        return text\n    \n    split_text =\
    \ text.split()\n    if split_text:\n        \n        while len(split_text) >=\
    \ 2:\n            split_text.pop(0)\n        \n        split_text = ['-' if x==''\
    \ else  x for x in split_text]\n        split_text = ' '.join(split_text)\n  \
    \      \n        return split_text\n    else:\n        return text\n</cell>\n\
    <cell>", "    \n    # Split the string into words\n    words = [w for w in text.split()\
    \ if len(w)]\n    \n    # Replace all spaces with _\n    words = [w.replace('\
    \ ', '_') for w in words]\n    \n    # Replace consecutive spaces with _\n   \
    \ consecutive = [w1 for w1, w2 in zip(words, words[1:]) \n                   if\
    \ len(w1) == 2 and len(w2) == 2]\n    \n    words = [w1 + '_' if w1 != w2 else\
    \ w1 for w1 in words]\n    \n    if len(consecutive) > 0:\n        words = [w1\
    \ + '_' if w1 != w2 else w1 for w1 in words]\n        \n    return ' '.join(words)\n\
    </cell>\n<cell>\nfix_spaces(\"Hi there.\")\n</cell>\n<text>\nAnd now for the word\
    \ counting function:\n\n\n</text>\n<cell>", "    \n    # Replace spaces with underscores\n\
    \    text = text.replace(\" \", \"_\")\n    \n    # Replace consecutive spaces\
    \ with '-'\n    text = re.sub(' +', ' ', text)\n    \n    return text\n</cell>\n\
    <cell>", "    \n    # First remove leading and trailing spaces\n    text = text.strip()\n\
    \    \n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n\
    \    \n    # Check to see if there are consecutive spaces\n    \n    # If not,\
    \ just return the string with no changes\n    if len(text) == len(text.replace('_',\
    \ ' ')):\n        return text\n    \n    # Otherwise, \n    \n    # Find consecutive\
    \ spaces\n    \n    space_count = 0\n    new_text = ''\n    for char in text:\n\
    \        if char == ' ':\n            space_count += 1\n        else:\n      \
    \      space_count = 0\n        if space_count > 1:\n            new_text += '-'\n\
    \        new_text += char\n    \n    return new_text\n    ", "    # https://stackoverflow.com/questions/1979294/python-replace-consecutive-white-spaces-with-a-single-space\n\
    \    return re.sub(' +', ' ', text).strip().replace(' ', '-')\n\n", "    \n  \
    \  return ' '.join(text.split())\n", "    \n    \n    return re.sub('\\s+', '-',\
    \ text)\n</cell>\n<cell>\nprint(fix_spaces('   hello world   '))\n</cell>\n<cell>",
  "    \n    replacement = \" \"\n    \n    def replace_spaces(matchobj):\n      \
    \  if matchobj.group(0) == \" \":\n            return replacement\n        else:\n\
    \            return matchobj.group(0)\n    \n    return re.sub('[ ]{2,}', replace_spaces,\
    \ text)\n</cell>\n<cell>", "    return text.replace(\" \",\"_\").replace(\" \"\
    ,\" -\")\n</cell>\n<cell>", "    space_regex = r\"\\s+\"\n    cleaned_text = re.sub(space_regex,\
    \ \"_\", text)\n    return cleaned_text\n\n", "    \n    # Step 0: Replace all\
    \ spaces with underscores\n    text = text.replace(' ', '_')\n    \n    # Step\
    \ 1: Check if there is a pair of consecutive spaces in text\n    # this means\
    \ that the two spaces belong to a word \n    if len(re.findall(r'[ ]{2,}', text))\
    \ == 1: \n        text = re.sub(r'[ ]{2,}', ' - ', text)\n    \n    # Step 2:\
    \ If there is a word with more than 2 consecutive spaces\n    # Then replace all\
    \ consecutive spaces with -\n    # Example: text = 'This is a test' - \n    #\
    \                 text = 'This is a test   ' - \n    if len(re.findall(r'[ ]{2,}',\
    \ text)) > 1:\n        text = re.sub(r'[ ]{2,}', ' - ', text)\n    \n    # Step\
    \ 3: Remove underscores\n    text = text.replace('_', ' ')\n    \n    # Step 4:\
    \ Convert multiple - to single - \n    text = text.replace('-', ' - ')\n    \n\
    \    return text\n\n", "    \n    text = re.sub(\"\\s+\", \"_\", text)\n    \n\
    \    return text\n    ", "    return text.replace(' ', '_').replace('  ', '-')\n\
    </cell>\n<text>\nQuestion 4.2 - Get rid of punctuation\nConvert the punctuations\
    \ to normal ones in the text\n\n\n</text>\n<cell>", "    \n    return text.replace(\"\
    \ \",\"_\").replace(\" \",\"_\").strip(\"-\")\n</cell>\n<cell>", "    \n    #\
    \ Replace consecutive spaces with dash\n    \n    count = 0\n    \n    while count\
    \ < len(text) and text[count] == \" \":\n        count += 1\n        \n    if\
    \ count > 0:\n        \n        while(count < len(text) and text[count] == \"\
    \ \"):\n            count += 1\n        \n        text = text[0:count-1] + \"\
    -\" + text[count+1:]\n        \n    return text\n\n", "    return re.sub(r\"\\\
    s+\", \" \", text)\n    ", "    return \" \".join(text.replace(\" \", \"_\").split())\n",
  "    text_without_spaces = text.replace(\" \",\"_\")\n    if len(text) - len(text_without_spaces)\
    \ <= 2:\n        text_with_dashes = text_without_spaces\n    else:\n        text_with_dashes\
    \ = text_without_spaces.replace(\" \",\"-\")\n    return text_with_dashes\n",
  "    \n    text = re.sub(' +', ' - ', text)\n    return text\n", "    \n    return\
    \ re.sub(\"\\s{2,}\", \"_\", text)\n</cell>\n<cell>\nfix_spaces(\"  I love you\
    \ and your dog\")\n</cell>\n<cell>\nfix_spaces(\"  I love you and your dog   \"\
    )\n</cell>\n<cell>\nfix_spaces(\"  I love you and your dog      \")\n</cell>\n\
    <cell>\nfix_spaces(\"  I love you and your dog \")\n</cell>\n<cell>\nfix_spaces(\"\
    \  I love you and your dog \")\n</cell>\n<cell>\nfix_spaces(\"  I love you and\
    \ your dog\")\n</cell>\n<cell>", "    return ' '.join(text.replace(\" \", \"_\"\
    ).replace('  ', '-').split())\n    ", "    import re\n    return re.sub(' +',\
    \ '_', text)\n", "    return re.sub(r'\\s+', ' ', text).strip()\n", "    return\
    \ ' '.join(text.split())\n\n", "    words = text.split()\n    words_without_spaces\
    \ = []\n    for word in words:\n        if \" \" not in word and len(word) > 0:\n\
    \            words_without_spaces.append(word)\n    text = \" \".join(words_without_spaces)\n\
    \    return re.sub(r'\\s+', \"_\", text)\n", "    spaced_text = text.replace(\"\
    \ \", \"_\")\n    \n    # if the text doesn't have spaces anymore then just return\
    \ text as it is\n    if spaced_text == text:\n        return text\n    \n    #\
    \ if a text has consecutive spaces, replace it with dash\n    if (spaced_text.count(\"\
    \  \") > 2):\n        spaced_text = re.sub(\"  *\", \"-\", spaced_text)\n    \n\
    \    return spaced_text\n", "    \n    # Store the text in a list \n    split_text\
    \ = text.split()\n    \n    # Iterate over all the words in the list\n    for\
    \ word in split_text:\n        if word == \"\":\n            continue\n      \
    \  else:\n            # Replace all the spaces with an underscore\n          \
    \  split_text.remove(word)\n            split_text.remove(word)\n            split_text.remove(word)\n\
    \    \n    # Join the list with a space \n    fixed_text = \" \".join(split_text)\n\
    \    \n    # If the length of the string is not greater \n    # than 2, then replace\
    \ consecutive spaces with a dash \n    if len(fixed_text) > 2:\n        fixed_text\
    \ = fixed_text.replace(\" \", \"-\")\n    \n    return fixed_text\n\n\n@jit",
  "    \n    # replace all spaces with underscores\n    text = text.replace(' ', '_')\n\
    \    \n    # replace multiple spaces with single dash\n    text = re.sub(' +',\
    \ '-', text)\n    \n    # remove leading and trailing dash\n    return text.strip('-')\n\
    \n", "    fixed_text = text.replace(\" \", \"_\")\n    if len(fixed_text.split(\"\
    _\"))==2 and fixed_text.count(\"_\")==2:\n        fixed_text = fixed_text.replace(\"\
    _\", \"-\")\n    return fixed_text\n", "    \n    cleaned_text = ' '.join(text.split())\n\
    \    \n    cleaned_text = cleaned_text.title()\n    \n    cleaned_text = re.sub('\
    \ +',' ',cleaned_text)\n    \n    return cleaned_text\n\n", "    return re.sub(r'\\\
    s+', '_', text).strip('-')\n\n", "    words = text.split(' ')\n    words_clean\
    \ = [word.strip().lower() for word in words]\n    words_clean = [word.replace('\
    \ ', '-') for word in words_clean]\n    return ' '.join(words_clean)\n\n", " \
    \   return re.sub(' +', ' -', text)\n", "    \n    # replace spaces\n    text\
    \ = text.replace(' ', '_')\n    \n    # replace consecutive spaces with -\n  \
    \  # this helps remove multiple spaces when there are some at the end of the sentence\n\
    \    text = re.sub(r'\\s{2,}', '-', text)\n    \n    return text\n</cell>\n<text>\n\
    We now create a function to clean and preprocess our data, which includes both\
    \ tokenization and sentence processing.\n\n\n</text>\n<cell>", "    return re.sub(\"\
    ( )+\", \"_\", text).strip()\n</cell>\n<cell>", "    fixed_text = []\n    \n \
    \   for char in text:\n        if char == \" \":\n            fixed_text.append(char.lstrip(\"\
    \ \"))\n        else:\n            fixed_text.append(char.lstrip(\" \"))\n   \
    \         \n    fixed_text = \"\".join(fixed_text)\n    \n    while \"  \" in\
    \ fixed_text:\n        fixed_text = fixed_text.replace(\"  \", \"- \")\n    \n\
    \    return fixed_text\n\n", "    text = text.replace(' ', '_')\n    spaces =\
    \ [text.count(c) for c in '!@#$%^&*()_+']\n    if len(spaces) == 1 and spaces[0]\
    \ == 4:\n        return text\n    elif len(spaces) == 2 and spaces[0] == spaces[1]:\n\
    \        return text.replace(\" \", \"-\")\n    else:\n        return text\n",
  "    \n    # Create a regex for matching spaces.\n    space_regex = re.compile('\\\
    s{1,}')\n    \n    # Iterate over all spaces and replace with underscore.\n  \
    \  text = re.sub(space_regex, \"_\", text)\n    \n    # Replace consecutive spaces\
    \ with dash.\n    space_regex = re.compile('\\s{2,}')\n    text = re.sub(space_regex,\
    \ \"-\", text)\n    \n    return text\n", "    \n    text = re.sub(' +', ' ',\
    \ text).strip()\n    \n    if len(text) > 2:\n        text = re.sub('  +', '-',\
    \ text)\n    return text\n\n", "    \n    fixed_text = text.replace(' ', '_')\n\
    \    \n    \n    while(len(fixed_text.split('-')) > 1):\n        fixed_text =\
    \ fixed_text.replace('-', '_')\n        \n    return fixed_text\n</cell>\n<cell>\n\
    fix_spaces('     the quick brown fox      ')\n</cell>\n<cell>", "    text = text.replace('\
    \ ', '_')\n    text = re.sub(r'\\s{2,}', '-', text)\n    return text\n\n", " \
    \   \n    fixed_text = text.replace(' ', '_')\n    \n    return fixed_text\n",
  "    \n    return \" \".join(text.split())\n", "    \n    return re.sub(' +','_',\
    \ text).replace('  ', '-')\n", "    \n    # Replace all spaces with a single _\n\
    \    text = re.sub(' +', '_', text)\n    \n    # Replace consecutive spaces with\
    \ a single -\n    spaces = text.count(' ')\n    if spaces > 2:\n        \n   \
    \     splits = text.split(' ')\n        \n        for i, word in enumerate(splits):\n\
    \            \n            if i == 0:\n                splits[i] = word + '-'\n\
    \                \n            if i == len(splits) - 2:\n                splits[i]\
    \ = word + '-'\n                \n        \n        \n        text = ''.join(splits)\n\
    \    \n    return text\n</cell>\n<cell>", "    \n    fixed_text = text.replace('\
    \ ', '-')\n    fixed_text = fixed_text.replace('-\\n\\n', ' - \\n')\n    fixed_text\
    \ = fixed_text.replace('\\n\\n', '\\n')\n    \n    return fixed_text\n\n", " \
    \   # this does not handle unicode, although it wouldnt need to\n    return \"\
    \ \".join(text.split())\n    ", "    \n    text_ = text.replace(\"  \", \"_\"\
    )\n    if len(text_.split()) > 2:\n        text_ = \" \".join(text_.split())\n\
    \    text_ = text_.replace(\" \", \"-\")\n    \n    return text_\n", "    \n \
    \   return re.sub('\\s', '_', text).replace('-', ' ')\n\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
