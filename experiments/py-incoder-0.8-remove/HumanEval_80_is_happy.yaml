name: HumanEval_80_is_happy
language: py
prompt: "def is_happy(s: str) -> bool:\n    \"\"\"You are given a string s.\n    Your\
  \ task is to check if the string is happy or not.\n    A string is happy if its\
  \ length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n\
  \                            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('a') == False\n    assert candidate('aa')\
  \ == False\n    assert candidate('abcd') == True\n    assert candidate('aabb') ==\
  \ False\n    assert candidate('adb') == True\n    assert candidate('xyy') == False\n\
  \    assert candidate('iopaxpoi') == True\n    assert candidate('iopaxioi') == False\n\
  \ndef test_check():\n    check(is_happy)\n\ntest_check()\n"
completions: ["    s = \"dsrgb\"\n    # s is happy\n    s = \"aba\"\n    # s is not\
    \ happy\n    s = \"abe\"\n    # s is happy\n    \"\"\"\n    return len(s) >= 3\
    \ and all(a!=b for a,b in zip(s[:3], s[3:6]))\n</cell>\n<cell>", "    The string\
    \ is happy\n    The string is also Happy\n    The string is Happy\n    Its a Happy\n\
    \    The string is Happy :)\n    Its a Happy :)\n    \"\"\"\n    \n    # Write\
    \ your code here\n    \n    if len(s) < 3:\n        return False\n    \n    \n\
    \    \n    \n    \n\n</cell>\n<text>\nExercise 3\nGiven a list of numbers nums,\
    \ check if its elements are all unique and in ascending order.\n\n\n</text>\n\
    <cell>\nnum = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6, 6]\n</cell>\n<cell>", "   \
    \ s = \"abcabc\"\n    is_happy(s)\n    True\n    \"\"\"\n    if len(s) < 3:\n\
    \        return False\n    if sorted(s[:-2]) == sorted(s[-2:]):\n        return\
    \ True\n    return False\n\n", "    Example 1:\n    Input: \"abc\"\n    Output:\
    \ True\n\n    Example 2:\n    Input: \"abca\"\n    Output: False\n    \"\"\"\n\
    \    # write your code here\n    if len(s) < 3:\n        return False\n    prev\
    \ = ''\n    for i in range(1, len(s)):\n        if prev != s[i]:\n           \
    \ return False\n        prev = s[i]\n    return True\n", "    s = \"Able\"\n \
    \   s is \"Able\" -> True\n    \"Happy\" is not happy -> False\n    \"happy\"\
    \ is not happy -> False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\
    \    for i in range(0, len(s) - 2):\n        if s[i] != s[i+1]:\n            return\
    \ False\n    return True\n", "                            \n                 \
    \       True\n                        \"\"\"\"\n                            \n\
    \        False\n    \"\"\"\n    return len(s) >= 3 and all(c not in s for c in\
    \ s[3:])\n\n", "                            isHappy('happy') => True\n       \
    \                     isHappy('peace') => True\n                            isHappy('pinky')\
    \ => False\n                            isHappy('z') => False\n              \
    \              isHappy('abba') => True\n    \"\"\"\n    if len(s) <= 3:\n    \
    \    return False\n    count = 3\n    for i in range(0, len(s)-3):\n        if\
    \ s[i] != s[i+1] == s[i+2]:\n            count += 1\n    return count == 3\n\n",
  "    s = \"Madam\"\n    s = True\n    s = {1,2,3}\n    s = {1,2,3}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n    s = {1,2,3,4,5}\n\
    \    s = {1,2,3,4,5}\n    s = {1,2,", "    s = 'ab'\n    is True\n    s = 'aab'\n\
    \    is True\n    s = 'aba'\n    is True\n    s = 'aaaa'\n    is True\n    s =\
    \ 'aaaaa'\n    is True\n    s = 'aaaaaa'\n    is True\n    s = 'aaaaaac'\n   \
    \ is True\n    s = 'aaaaaaaa'\n    is True\n    s = 'aaaaaabc'\n    is True\n\
    \    s = 'aba'\n    is True\n    s = 'abba'\n    is True\n    \"\"\"\n    if len(s)\
    \ >= 3 and len(set(s[2:4])) == len(set(s[2:])):\n        return True\n    return\
    \ False\n</cell>\n<cell>\nis_happy('ab')\n</cell>\n<cell>\nis_happy('aab')\n</cell>\n\
    <cell>\nis_happy('aba')\n</cell>\n<cell>\nis_happy('aaaa')\n</cell>\n<cell>\n\
    is_happy('aaaaa')\n</cell>\n<cell>\nis_happy('aaaaaa')\n</cell>\n<cell>\nis_happy('aaaaaac')\n\
    </cell>\n<cell>\nis_happy('aaaaaaaa')\n</cell>\n<cell>\nis_happy('aaaaaabc')\n\
    </cell>\n<cell>\nis_happy('aba')\n</cell>\n<cell>\nis_happy('abba')\n</cell>\n\
    <text>\nTask 3\nWrite a Python program to convert a given string into all possible\
    \ combinations of size k where each character is distinct. For example,\n<code>\n\
    Input:  s = 'a', k = 3\nOutput: [['a'],['aa'],['aaa']]\n</code>\n\n</text>\n<cell>",
  "    happy('a')\n    happy('abc')\n    happy('abcde')\n    happy('abcde')\n    happy('abcb')\n\
    \    happy('abbb')\n    happy('aaaaaa')\n    happy('abcdefgh')\n    happy('abbcc')\n\
    \    happy('abbbb')\n    happy('abbbbab')\n    happy('abbbbac')\n    ```\n   \
    \ \"\"\"\n    if len(s) < 3:\n        return False\n    prev_char = ''\n    for\
    \ idx, char in enumerate(s):\n        if char != prev_char:\n            if idx\
    \ > 0 and s[idx-1] == char:\n                return False\n            elif idx\
    \ > 1 and s[idx-2] == char:\n                return False\n            prev_char\
    \ = char\n        else:\n            return False\n    return True\n\n", "   \
    \ # Output: True\n    # Input: \"aa\"\n    # Output: True\n    # Input: \"aaa\"\
    \n    # Output: False\n    # Input: \"ab\"\n    # Output: False\n    # Input:\
    \ \"aba\"\n    # Output: True\n    # Input: \"aaaa\"\n    # Output: True\n   \
    \ # Input: \"aas\"\n    # Output: False\n    # Input: \"aaaaaa\"\n    # Output:\
    \ True\n    \"\"\"\n    # write your code here\n    if len(s) < 3:\n        return\
    \ False\n    return True\n</cell>\n<text>\nTest your code\n\n</text>\n<cell>",
  "    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happys\"\
    ) == False, \"not happy\"\n    assert is_happy(\"happyme\") == True, \"happyme\"\
    \n    assert is_happy(\"happymes\") == False, \"not happy\"\n    assert is_happy(\"\
    happymes\") == True, \"happymes\"\n    assert is_happy(\"happy\") == True, \"\
    happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"\
    happy\") == True, \"happy\"\n    assert is_happy(\"happys\") == False, \"not happy\"\
    \n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happys\"\
    ) == True, \"happys\"\n    assert is_happy(\"happys\") == True, \"happys\"\n \
    \   assert is_happy(\"happys\") == True, \"happys\"\n    assert is_happy(\"happy\"\
    ) == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert\
    \ is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True,\
    \ \"happy\"\n    assert is_happy(\"happys\") == False, \"not happy\"\n    assert\
    \ is_happy(\"happys\") == True, \"happys\"\n    assert is_happy(\"happys\") ==\
    \ True, \"happys\"\n    assert is_happy(\"happys\") == True, \"happys\"\n    assert\
    \ is_happy(\"happys\") == True, \"happys\"\n    assert is_happy(\"happy\") ==\
    \ True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert\
    \ is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True,\
    \ \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"\
    happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\
    \n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\"\
    ) == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert\
    \ is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True,\
    \ \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"\
    happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\
    \n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\"\
    ) == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert\
    \ is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True,\
    \ \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"\
    happy\") == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\
    \n    assert is_happy(\"happy\") == True, \"happy\"\n    assert is_happy(\"happy\"\
    ) == True, \"happy\"\n    assert is_happy(\"happy\") == True, \"happy\"\n    assert\
    \ is_happy(\"happy\") == True, \"happy\"\n    assert ", "    s = \"sad\"\n   \
    \ is_happy(s) = True\n    s = \"ads\"\n    is_happy(s) = False\n    \"\"\"\n\n\
    \    n = len(s)\n    if n < 3:\n        return True\n\n    for i in range(3, n):\n\
    \        if s[i] == s[i-1] and s[i-1] == s[i-2]:\n            return True\n  \
    \  return False\n\n", "    The string  is happy\n    The string  is not\n    The\
    \ string  is happy but\n    The string  is not\n    The string  is happy but\n\
    \    The string  is happy and\n    The string  is happy\n    \"\"\"\n    if len(s)\
    \ < 3:\n        return False\n    count = 0\n    letter = s[count]\n    while\
    \ count < len(s):\n        if letter == s[count + 1]:\n            count += 1\n\
    \        else:\n            return False\n        if count > 3:\n            return\
    \ False\n        if letter == s[count + 2]:\n            count += 1\n        else:\n\
    \            return False\n        if count > 3:\n            return False\n \
    \   return True\n\n", "    s = 'aabb'\n    # Return True\n    \"\"\"\n    if len(s)\
    \ < 3:\n        return False\n    i = 0\n    j = 1\n    while(i < len(s) and j\
    \ < len(s)):\n        if s[i] == s[j]:\n            i += 1\n            j += 1\n\
    \        elif s[i] == s[j - 1]:\n            i += 1\n            j += 1\n    \
    \    elif s[j] == s[j - 1]:\n            i += 1\n        else:\n            return\
    \ False\n    return True\n</cell>\n<cell>", "    is_happy(\"abcee\") == True\n\
    \    is_happy(\"abca\") == True\n    is_happy(\"abcde\") == True\n    is_happy(\"\
    ab\") == True\n    is_happy(\"abc\") == False\n    \"\"\"\n    # your code here\n\
    \    if len(s) <= 3:\n        return True\n    chars = set()\n    for letter in\
    \ s:\n        if letter not in chars:\n            chars.add(letter)\n       \
    \ else:\n            return False\n    return True\n", "    is_happy(\"abccbb\"\
    )\n    True\n    is_happy(\"abcc\")\n    True\n    is_happy(\"abcb\")\n    False\n\
    \    is_happy(\"aaaa\")\n    True\n    \"\"\"\n    if len(s) < 3:\n        return\
    \ False\n    letters = set(s)\n    return len(s) >= 3 and len(letters) == 3 and\
    \ all(a1 not in letters for a1 in letters)\n\n", "    Happy? \"hello\"\n    Not\
    \ Happy? \"haha\"\n    Happy? \"abacaba\"\n    Not Happy? \"abba\"\n    Happy?\
    \ \"abba\"\n    Not Happy? \"aaaa\"\n    Happy? \"bbbccc\"\n    Not Happy? \"\
    aba\"\n    \"\"\"\n    if len(s) <= 3:\n        return True\n\n    # check every\
    \ 3 letters are distinct\n    for i in range(3, len(s), 3):\n        if s[i] !=\
    \ s[i-1] and s[i] != s[i-2]:\n            return False\n\n    return True\n\n",
  "    \"\"\"\n    is_happy(\"abb\") => True\n    is_happy(\"aab\") => False\n   \
    \ is_happy(\"aaaa\") => False\n    is_happy(\"aaaaa\") => True\n    \"\"\"\n \
    \   \n    \n    if len(s) <=3:\n        return False\n    else:\n        \n  \
    \      for i in s:\n            if i not in s:\n                return False\n\
    \        \n        \n        return True\n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        ", "    s -> True\n    abc -> True\n  \
    \  abb -> False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    letters\
    \ = {}\n    for i in range(len(s) - 1):\n        if s[i] != s[i + 1]:\n      \
    \      letters[s[i]] = s[i]\n    for letter in letters.values():\n        if len(set(letter))\
    \ != len(letter):\n            return False\n    return True\n\n", "    s=\"happy\"\
    \n    is_happy(s)\n    True\n    is_happy(\"happy\")\n    False\n    \"\"\"\n\
    \    if len(s)<3 or any(s[:i] in s[i:i+3] for i in range(len(s)-1)):\n       \
    \ return False\n    else:\n        return True\n    ", "    Your function should\
    \ return True\n                          \"\"\"\n    pass\n</cell>\n<cell>", " \
    \   s: str = \"ABABCBCBACB\"\n    Output: True\n    \"\"\"\n\n    # Your code\
    \ here\n    if len(s) < 3:\n        return False\n    if s[-3:] == s[-2:]+s[:3]\
    \ and s[-3] != s[-3] or s[-2]!=s[-2]:\n        return False\n    s = set()\n \
    \   flag = False\n    for x in s:\n        if x not in s:\n            s.add(x)\n\
    \        elif x not in s:\n            flag = True\n    return flag and len(s)\
    \ == 3\n\n", "    # Input: \"Hello\"\n    # Output: True\n    # Explanation: We\
    \ have a string of length 3 whose characters are \"Hello\".\n    #           \
    \   The string \"Hell\" has length 3 as well, so the string is happy.\n    # Input:\
    \ \"Hell\"\n    # Output: True\n    # Explanation: The string \"Hel\" has length\
    \ 3. The characters \"He\" and \"ll\" are distinct.\n    # Input: \"Hello\"\n\
    \    # Output: False\n    # Explanation: There is no character in \"Hello\" that\
    \ is distinct.\n    # Input: \"Hi\"\n    # Output: True\n    # Explanation: The\
    \ string \"Hi\" is happy.\n    # Input: \"abracadabra\"\n    # Output: True\n\
    \    # Explanation: The string \"abracadabra\" has length 9 and its characters\
    \ are distinct.\n    # Input: \"abracadabra\"\n    # Output: True\n    # Explanation:\
    \ The string \"abracadabra\" has length 9 and its characters are distinct.\n \
    \   # Input: \"abracadabra\"\n    # Output: False\n    # Explanation: The string\
    \ \"abracadabra\" has length 9 and its characters are distinct.\n    # Input:\
    \ \"abracadabra\"\n    # Output: True\n    # Explanation: The string \"abracadabra\"\
    \ has length 9 and its characters are distinct.\n    # Input: \"abracadabra\"\n\
    \    # Output: True\n    # Explanation: The string \"abracadabra\" has length\
    \ 9 and its characters are distinct.\n    # Input: \"abracadabra\"\n    # Output:\
    \ True\n    # Explanation: The string \"abracadabra\" has length 9 and its characters\
    \ are distinct.\n    # Input: \"abracadabra\"\n    # Output: True\n    # Explanation:\
    \ The string \"abracadabra\" has length 9 and its characters are distinct.\n \
    \   # Input: \"abracadabra\"\n    # Output: True\n    # Explanation: The string\
    \ \"abracadabra\" has length 9 and its characters are distinct.\n    # Input:\
    \ \"abracadabra\"\n    # Output: True\n    # Explanation: The string \"abracadabra\"\
    \ has length 9 and its characters are distinct.\n    # Input: \"abracadabra\"\n\
    \    # Output: True\n    # Explanation: The string \"abracadabra\" has length\
    \ 9 and its characters are distinct.\n    # Input: \"abracadabra\"\n    # Output:\
    \ True\n    # Ex", "    s = \"A\"\n    returns True\n    s = \"aa\"\n    returns\
    \ False\n    \"\"\"\n    if len(s) <=3:\n        return True\n    for char in\
    \ s:\n        if s.count(char) == 3 and s.count(char-1)!=s.count(char+1):\n  \
    \          return False\n    return True\n", "    >>> is_happy('aaa')\n    True\n\
    \    >>> is_happy('aba')\n    True\n    >>> is_happy('aac')\n    True\n    >>>\
    \ is_happy('abb')\n    True\n    >>> is_happy('abc')\n    True\n    >>> is_happy('abac')\n\
    \    True\n    >>> is_happy('abbb')\n    True\n    >>> is_happy('abbba')\n   \
    \ True\n    >>> is_happy('abbbbb')\n    True\n    >>> is_happy('abbbac')\n   \
    \ True\n    >>> is_happy('abbbbc')\n    True\n    >>> is_happy('abbbbca')\n  \
    \  True\n    >>> is_happy('abbbbcab')\n    True\n    >>> is_happy('abbbbcabcdef')\n\
    \    True\n    >>> is_happy('abbbbcabcdefg')\n    True\n    >>> is_happy('abbbbcabcdefgh')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghi')\n    True\n    >>> is_happy('abbbbcabcdefghij')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijk')\n    True\n    >>> is_happy('abbbbcabcdefghijkl')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijklm')\n    True\n    >>> is_happy('abbbbcabcdefghijkll')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijkllm')\n    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n\
    \    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n    True\n    >>> is_happy('abbbbcabcdefghijkllmn')\n\
    \    True\n    >>> is_happy('abbb", "                            a\n         \
    \                   ab\n                            abcd\n                   \
    \         \"\"\"\n                            is happy because its length is 3\
    \ and\n                            all 3 letter pairs are distinct.\n        \
    \                    \"\"\"\n                            ab\n                \
    \            ab\n                            a\n                            \"\
    \"\"\n                            is not happy because\n                     \
    \       the letters b and c are repeated.\n    Args:\n        s (string): string\
    \ that we have to check for happy.\n    Returns:\n        bool: is string s is\
    \ happy or not.\n    \"\"\"\n    if len(s) <= 3:\n        return True\n    return\
    \ all(letter in s[i - 3:i + 3] for i, letter in enumerate(s))\n\n", "        \
    \                    hello\n                            hsapy\n              \
    \              sahpp\n                            yhelo\n                    \
    \        \"\"\"\n                            is happy\n                      \
    \      \"\"\"\n                            hi\n                            hel\n\
    \                            i\n                            \"\"\"\n         \
    \                   is not happy\n    \"\"\"\n    if len(s) <= 3:\n        return\
    \ True\n\n    happy = True\n    for idx, char in enumerate(s):\n        if char\
    \ != s[idx-1] and char != s[idx+1]:\n            happy = False\n            break\n\
    \    return happy\n", "                            HAPPY\n                   \
    \         \"\"\"\n                            is happy but HAPPY\n           \
    \                 is not.\n                            \"\"\"\n              \
    \              HAP\n                            \"\"\"\n                     \
    \       is not happy.\n                            \"\"\"\n                  \
    \          HAPPY\n                            \"\"\"\n                       \
    \     is happy.\n                            \"\"\"\n\n    \"\"\"\n    string_length\
    \ = len(s)\n    if string_length < 3:\n        return False\n    counter = 0\n\
    \    for letter in s:\n        if letter != s[counter]:\n            return False\n\
    \        else:\n            counter += 1\n    return True\n\n\n@test", "    Happy\
    \ string: hello\n    Not happy string: hell\n    You will have to return True\
    \ or False.\n    \"\"\"\n    if len(s) <= 3:\n        return True\n    for i in\
    \ range(2, len(s) - 1):\n        if s[i] != s[i - 1]:\n            return False\n\
    \    return True\n\n", "                            is happy\n               \
    \             \"\"\"\n                            is happy\n                 \
    \           \"\"\"\n                            is not happy\n               \
    \             \"\"\"\n                            is not happy\n             \
    \               \"\"\"\n\n    Complexity:\n        - Time: O(n)\n        - Space:\
    \ O(1)\n\n    Inspired by code by Karl Morgenstern\n    https://codeblog.jonskeet.uk/2014/06/18/python-contest-karl-morgenstern-tasks/\n\
    \n    param s: string to check\n    \"\"\"\n    # Your code here\n    if len(s)\
    \ < 3 or not set(s[:3]) == set(s[3:6]):\n        return False\n    return True\n\
    \n", "                            s = \"Hacker\"\n                           \
    \ True\n                            \"\"\"\n                            s = \"\
    Hack\"\n                            False\n                            \"\"\"\n\
    \                            s = \"Hackeee\"\n                            True\n\
    \                            \"\"\"\n                            s = \"Hackee\"\
    \n                            False\n    \"\"\"\n    if len(s) < 3:\n        return\
    \ True\n    count = 1\n    for i in range(3, len(s), 3):\n        if s[i - 1:i\
    \ + 1] != s[i-1:i+1]:\n            return False\n        count += 1\n    return\
    \ count == len(s)\n\n", "    True\n    False\n    False\n    False\n    False\n\
    \    \"\"\"\n    if len(s) >= 3:\n        # 3 distinct consecutive letters \n\
    \        for k in range(3, len(s)):\n            if s[k - 1] == s[k + 1] == s[k\
    \ + 2]:\n                return False\n        return True\n    return False\n\
    \n", "    # Happy Strings Examples\n    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\"\
    ]\n    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\"]\n\
    \    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\"\
    ]\n    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"\
    helo\",\"hell\"]\n    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\"\
    ,\"hallo\",\"helo\",\"hell\",\"hello\"]\n    # [\"h\",\"he\",\"hel\",\"hell\"\
    ,\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\"]\n    #\
    \ [\"h\",\"he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"\
    hell\",\"hello\",\"hi\",\"hai\"]\n    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\"\
    ,\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\"\
    ]\n    # [\"h\",\"he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"\
    helo\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\"]\n    # [\"h\",\"\
    he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"\
    hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\"]\n    # [\"h\",\"he\",\"hel\"\
    ,\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\"\
    ,\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\"]\n    # [\"h\",\"he\",\"hel\",\"\
    hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\",\"\
    hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\"]\n    # [\"h\",\"he\",\"hel\"\
    ,\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\"\
    ,\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\",\"hai\"]\n    # [\"h\",\"\
    he\",\"hel\",\"hell\",\"hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"\
    hello\",\"hi\",\"hai\",\"hallo\",\"helo\",\"hell\",\"hello\",\"hi\",\"hai\",\"",
  "    s = \"apple\"\n    is_happy(s)\n    True\n    \"\"\"\n    return len(s) >=\
    \ 3 and all(letters not in s for letters in s[-3::3])\n\n", "    Happy string\
    \ = True\n    Happy string2 = False\n    Oxymoronic string = False\n    String4\
    \ is happy = True\n    \"\"\"\n    if len(s) <= 3:\n        return True\n    if\
    \ 3 in {s[i:i + 3] for i in range(len(s) - 3)}:\n        return True\n    return\
    \ False\n</cell>\n<text>\nProblem 4:\nWrite a program that takes a string, reverse\
    \ the string, then check if it is happy or not.\nIt should print the original\
    \ string only if the reverse is happy string.\nFor example:\n\nInput string: Hello,\
    \ World\nOutput string: !dlrow olleH\nOutput string: False\nInput string: Oxymoronic\n\
    Output string: moronicO\nOutput string: False\nInput string: Happy String\nOutput\
    \ string: Happy String\n\n</text>\n<cell>", "    is_happy(\"hello\")\n    is_happy(\"\
    happy\")\n    is_happy(\"leetcode\")\n    is_happy(\"leet\")\n    is_happy(\"\
    loveleetcode\")\n    is_happy(\"loveleet\")\n    is_happy(\"hellothere\")\n  \
    \  will print True\n    but is_happy(\"happyleetcode\") will print False\n   \
    \ Also note that abcde, acebd and cbde are also happy strings.\"\"\"\n    if len(s)\
    \ >= 3 and all(len(set(c)) == 3 for c in zip(*[list(s[i:i + 3]) for i in range(len(s)\
    \ - 1)])):\n        return True\n    else:\n        return False\n\n", "    s\
    \ = \"baaacaan\"\n    is_happy_2(s)\n    print(is_happy(\"baaacaan\"))\n    print(is_happy(\"\
    aa\"))\n    print(is_happy(\"ab\"))\n    print(is_happy(\"abcd\"))\n    print(is_happy(\"\
    aaa\"))\n    print(is_happy(\"abbb\"))\n    print(is_happy(\"aba\"))\n    print(is_happy(\"\
    abacab\"))\n    print(is_happy(\"abaca\"))\n    print(is_happy(\"abacabacab\"\
    ))\n    \"\"\"\n    count = 0\n    last = 0\n    for ch in s:\n        if ch ==\
    \ s[last]:\n            count += 1\n        else:\n            count = 0\n   \
    \     last = last + 1\n        if count >= 3:\n            return True\n    return\
    \ False\n\n", "    >>> is_happy('happy')\n    True\n    >>> is_happy('happypenis')\n\
    \    False\n    >>> is_happy('hello')\n    False\n    >>> is_happy('helllo')\n\
    \    True\n    \"\"\"\n    if len(s) < 3:\n        return False\n    str_len =\
    \ len(s)\n    # Step 1: Loop over each element in the string and check if its\
    \ length is not less than 3.\n    # Step 2: Loop over each element in the string\
    \ and check whether every 3 letters are different.\n    # Step 3: Return the boolean\
    \ value\n    str_len_2 = str_len // 2\n    for i in range(str_len_2):\n      \
    \  if s.count(i) != str_len - i:\n            return False\n    return True\n\n",
  "    is_happy(\"hello\")\n    True\n    is_happy(\"helllo\")\n    True\n    is_happy(\"\
    lehelllo\")\n    True\n    is_happy(\"lelelelo\")\n    False\n    is_happy(\"\
    lelehell\")\n    False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\
    \    if not set(s).issubset(set(\"aeiou\")):\n        return False\n    for index\
    \ in range(1, len(s) - 2):\n        if not s[index: index + 3] == s[index - 3:\
    \ index + 3]:\n            return False\n    return True\n\n<|/ file dstars=1\
    \ ext=.py source=github filename=p8_2.py |><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|><|endofmask|>\n\
    <|endofmask|>\n                    </p>\n                    </p>\n          \
    \          </p>\n                    </p>\n                    </p>\n        \
    \            </p>\n                    </p>\n                    </p>\n      \
    \              </p>\n                    </p>\n                    </p>\n    \
    \                </p>\n                    </p>\n                    </p>\n  \
    \                  </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n                    </p>\n\
    \                    </p>\n                    </p>\n", "    s = \"abcde\"\n \
    \   \"\"\"\n    Your function should return true since s has length at least 3\
    \ and every 3 consecutive letters are distinct\n    \"\"\"\n    if len(s) < 3:\n\
    \        return False\n    letters = [char for char in s]\n    for i in range((len(s)\
    \ - 3)) :\n        if i == 0 or i == 1 or i == 2:\n            letters[i] == \
    \ letters[i - 1] or letters[i - 2] or letters[i + 1] or letters[i + 2]\n     \
    \       continue\n        else:\n            letters[i] ==  letters[i - 1] or\
    \ letters[i - 2] or letters[i + 1] or letters[i + 2]\n\n    return True\n\"\"\"",
  "                            *\n                            *\n                \
    \            *\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              \"\"\"\n                            *\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        *\n                            \"\"\"\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            *\n                            *\n\
    \                            *\n                            \"\"\"\n         \
    \                   *\n                            *\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        \"\"\"\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            *\n                            *\n\
    \                            \"\"\"\n                            *\n         \
    \                   *\n                            *\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        \"\"\"\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            *\n                            *\n\
    \                            *\n                            \"\"\"\n         \
    \                   *\n                            *\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        *\n                            \"\"\"\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              \"\"\"\n                            *\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        *\n                            *\n                            *\n   \
    \                         \"\"\"\n                            *\n            \
    \                *\n                            *\n                          \
    \  *\n                            *\n                            *\n         \
    \                   *\n                            *\n                       \
    \     *\n                            \"\"\"\n                            *\n \
    \                           *\n                            *\n               \
    \             *\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            \"\"\"\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        *\n                            *\n                            *\n   \
    \                         *\n                            \"\"\"\n            \
    \                *\n                            *\n                          \
    \  *\n                            *\n                            *\n         \
    \                   *\n                            *\n                       \
    \     *\n                            *\n                            \"\"\"\n \
    \                           *\n                            *\n               \
    \             *\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            *\n                            \"\
    \"\"\n                            *\n                            *\n         \
    \                   *\n                            *\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        \"\"\"\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            *\n                            *\n\
    \                            *\n                            *\n              \
    \              *\n                            \"\"\"\n                       \
    \     *\n                            *\n                            *\n      \
    \                      *\n                            *\n                    \
    \        *\n                            *\n                            *\n   \
    \                         *\n                            *\n                 \
    \           \"\"\"\n                            *\n                          \
    \  *\n                            *", "    assert is_happy(\"Happy\")\n    assert\
    \ is_happy(\"Three letter string is a happy string\")\n    assert is_happy(\"\
    Two word strings are happy strings\")\n    assert is_happy(\"No empty strings\
    \ are happy strings\")\n    assert not is_happy(\"Three letter string is not happy\"\
    )\n    assert not is_happy(\"Two word strings are two word strings\")\n    assert\
    \ not is_happy(\"Two word and one letter string\")\n    assert not is_happy(\"\
    Two word and two letter string\")\n    assert not is_happy(\"Two word strings\
    \ are three letter string\")\n    assert not is_happy(\"Three letter string is\
    \ not three letter string\")\n    assert not is_happy(\"No empty strings are not\
    \ three letter string\")\n    assert not is_happy(\"One character string\")\n\
    \    assert not is_happy(\"Two character string\")\n    assert not is_happy(\"\
    Two character strings\")\n    assert not is_happy(\"Two character strings and\
    \ one space\")\n    assert not is_happy(\"No empty strings\")\n    assert not\
    \ is_happy(\"\")\n    assert not is_happy(\"Three character strings\")\n    assert\
    \ not is_happy(\"Three character string and one space\")\n    assert not is_happy(\"\
    Three character string and no space\")\n    assert not is_happy(\"Three character\
    \ string and three space\")\n    assert not is_happy(\"Three character string\
    \ and three spaces and one space\")\n    assert not is_happy(\"Three character\
    \ string and three spaces and one space and no space\")\n    assert not is_happy(\"\
    Three character string and three spaces and one space and three space\")\n   \
    \ assert not is_happy(\"Three character string and three spaces and one space\
    \ and three spaces and no space\")\n    assert not is_happy(\"Three character\
    \ string and three spaces and one space and three spaces and three space\")\n\
    \    assert not is_happy(\"Three character string and three spaces and one space\
    \ and three spaces and three spaces and one space\")\n    assert not is_happy(\"\
    Three character string and three spaces and one space and three spaces and three\
    \ spaces and no space\")\n    assert not is_happy(\"Three character string and\
    \ three spaces and one space and three spaces and three spaces and three space\"\
    )\n    assert not is_happy(\"Three character string and three spaces and one space\
    \ and three spaces and three spaces and three spaces and no space\")\n    assert\
    \ not is_happy(\"Three character string and three spaces and one space and three\
    \ spaces and three spaces and three spaces and three space\")\n    assert not\
    \ is_happy(\"Three character string and three spaces and one space and three spaces\
    \ and three spaces and three spaces and three spaces and no space\")\n    assert\
    \ not is_happy(\"Three character string and three space", "    >>> is_happy('HAPPY')\n\
    \    True\n    >>> is_happy('happy')\n    True\n    >>> is_happy('HAPPYHAPPY')\n\
    \    True\n    >>> is_happy('HAPPYHAPPYS')\n    False\n    >>> is_happy('asdf')\n\
    \    False\n    >>> is_happy('HAPPYASDF')\n    False\n    >>> is_happy('')\n \
    \   False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    prev =\
    \ ''\n    for c in s:\n        if c != prev:\n            return False\n     \
    \   prev = c\n\n    return True\n\n", "    s = \"abab\"\n    is_happy(s) = True\n\
    \    s = \"abba\"\n    is_happy(s) = False\n    s = \"abcd\"\n    is_happy(s)\
    \ = True\n    s = \"c\"\n    is_happy(s) = False\n    s = \"d\"\n    is_happy(s)\
    \ = False\n    \"\"\"\n    length = len(s)\n    if length < 3:\n        return\
    \ False\n    else:\n        for i in range(0, length - 2):\n            if s[i]\
    \ != s[i + 1] or s[i + 1] != s[i + 2]:\n                return False\n    return\
    \ True\n\n", "                            >>> is_happy('Hello')\n            \
    \                True\n                            >>> is_happy('Helloo')\n  \
    \                          False\n                            \"\"\"\n    \n \
    \   s = s.replace('\\n', '')\n    s = s.replace(' ', '')\n    if len(s) < 3 or\
    \ s.isspace():\n        return False\n    for i in range(3, len(s)):\n       \
    \ if s[i-1] != s[i-2]:\n            return False\n    return True\n\n", "    s1\
    \ = \"happy\"\n    s1 = \"hAPpy\"\n    s1 = \"happy\"\n    s1 = \"happy\"\n  \
    \  s1 = \"hAPPY\"\n    print(is_happy(s1))\n    print(is_happy(\"happy\"))\n \
    \   print(is_happy(\"hAPpy\"))\n    print(is_happy(\"happy\"))\n    print(is_happy(\"\
    happy\"))\n    print(is_happy(\"hAPPY\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"happy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"happy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"happy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    happy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"happy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"happy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n  \
    \  print(is_happy(\"hAPpy\"))\n    print(is_happy(\"hAPpy\"))\n    print(is_happy(\"\
    hAPpy\"))\n    print(", "    s = \"HAPPY\"\n    ans = is_happy(s)\n    print(ans)\n\
    \    assert(ans)\n\n\"\"\"\nNotes:\nThe string s consists of lowercase English\
    \ letters only.\n\"\"\"\n\n", "    s = \"cbacbd\"\n    We see s is happy because\
    \ s is of length 3 and each three consecutive letters are distinct\n    >>> is_happy(s)\n\
    \    True\n    \n    s = \"cbbd\"\n    We see s is happy because s is of length\
    \ 3 and each three consecutive letters are distinct\n    >>> is_happy(s)\n   \
    \ False\n    \n    s = \"cbbcbbd\"\n    We see s is happy because s is of length\
    \ 3 and each three consecutive letters are distinct\n    >>> is_happy(s)\n   \
    \ True\n    \"\"\"\n    if len(s) < 3:\n        return True\n    distinct_chars\
    \ = set()\n    for i in range(3):\n        distinct_chars = distinct_chars.union(set(s[i:\
    \ i + 3]))\n    return len(distinct_chars) >= len(s)\n\n", "    is_happy('aaabccdd')\
    \     # False\n    is_happy('aaaaaaa')      # True\n    is_happy('abracadabra')\
    \   # True\n    is_happy('abracadaba')    # False\n    \"\"\"\n    if len(s) <=\
    \ 3:\n        return True\n\n    for i in list(s[:3]):\n        if s.count(i)\
    \ > 1:\n            return False\n\n    return True\n", "    s = \"happy\"\n \
    \   print(is_happy(s))\n    s = \"sad\"\n    print(is_happy(s))\n    s = \"happys\"\
    \n    print(is_happy(s))\n    s = \"happyeeee\"\n    print(is_happy(s))\n    s\
    \ = \"aaaa\"\n    print(is_happy(s))\n    \"\"\"\n    return len(s) >= 3 and _all_distinct_letters(s)\n\
    \n", "    s = \"abcccbb\"\n    \"\"\"\n    \"\"\"\n    s = \"abbbab\"\n    \"\"\
    \"\n    count = 0\n    for letter in s:\n        count += 1\n        if len(s)\
    \ >= 3 and letter != s[count - 1] and letter != s[count + 1] and letter != s[count\
    \ + 2]:\n            return False\n    return True\n\n", "    s = \"abababc\"\n\
    \    happy(s) == True\n    happy(s) == False\n    s = \"aba\"\n    happy(s) ==\
    \ True\n    s = \"aab\"\n    happy(s) == True\n    \"\"\"\n    n = len(s)\n  \
    \  if n <= 3:\n        return True\n    if n%3:\n        return False\n    for\
    \ i in range(n//3 - 1, -1, -1):\n        if s[:i+3] == s[i+3:]: return True\n\
    \    return False\n\n", "    is_happy(\"happy\") = True\n    is_happy(\"happyple\"\
    ) = True\n    is_happy(\"pale\") = True\n    is_happy(\"pale\") = False\n    is_happy(\"\
    palete\") = True\n    is_happy(\"palethe\") = True\n    \"\"\"\n    if len(s)\
    \ < 3:\n        return False\n    \n    chars = \"\".join(set(s))\n    \n    if\
    \ len(set(chars)) == len(chars) and len(chars) >= 3:\n        return chars ==\
    \ chars[-3:]\n    \n    return False\n\n", "    s = \"Abbc\"\n    Output: True\n\
    \    Explanation: Your input string is considered happy since there are 3\n  \
    \                characters and they are distinct.\n\n    Note:\n      You may\
    \ assume that the string is non-empty.\n      All letters consist of lowercase\
    \ English letters.\n\n    Follow up:\n      If you can pre-process the string\
    \ to do some pre-processing tasks, do it\n      first. Do not do the post-processing\
    \ in is_happy function.\n    \"\"\"\n    if len(s) <= 3:\n        return True\n\
    \    else:\n        unique_letters = set(s)\n        return len(unique_letters)\
    \ == 3 and len(set(s)) == len(s)\n\n", "    # s = \"Hello\"\n    # s = \"\"\n\
    \    # s = \"acb\"\n    # s = \"aab\"\n    # s = \"aba\"\n    # s = \"abca\"\n\
    \    # s = \"abdab\"\n    # s = \"abdbca\"\n    # s = \"abcde\"\n    # s = \"\
    aabbabacab\"\n    # s = \"ababab\"\n    # s = \"aba\"\n    # s = \"aaab\"\n  \
    \  # s = \"a\"\n    # s = \"aa\"\n    # s = \"\"\n    # s = \"abaacaadaba\"\n\
    \    # s = \"abba\"\n    # s = \"abbaabbaba\"\n    # s = \"abbba\"\n    # s =\
    \ \"abbbaabbba\"\n    # s = \"abbbababbb\"\n    # s = \"abbbaaabaabab\"\n    #\
    \ s = \"abbbbababa\"\n    # s = \"abbbabaababa\"\n    # s = \"abbbbababaa\"\n\
    \    # s = \"abbbaaabaababaa\"\n    # s = \"ababab\"\n    # s = \"\"\n    # s\
    \ = \"abacaba\"\n    # s = \"aabb\"\n    # s = \"abba\"\n    # s = \"aabaabbabaaaabbab\"\
    \n    # s = \"aaaabbabaaaabbab\"\n    # s = \"aabbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"aabaabbabaaaabbab\"\n    # s = \"aabbabaaaabbab\"\n    # s = \"\
    abbabaaaabbab\"\n    # s = \"aabbabaaaabbab\"\n    # s = \"aabbabaaaabbab\"\n\
    \    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\n    # s = \"abbabaaaabbab\"\
    \n", "    s = \"aaaaaa\"\n    is_happy(s)    # True\n\n    s = \"aba\"\n    is_happy(s)\
    \    # False\n\n    s = \"aaaa\"\n    is_happy(s)    # False\n\n    s = \"aaaaaaaa\"\
    \n    is_happy(s)    # True\n\n    s = \"abcabc\"\n    is_happy(s)    # False\n\
    \n    s = \"doomsday\"\n    is_happy(s)    # True\n    \"\"\"\n\n    if len(s)\
    \ <= 3:\n        return True\n\n    visited = [False for _ in range(len(s))]\n\
    \    count = 0\n\n    for i in range(len(s) - 1):\n        visited[i] = True\n\
    \        visited[i + count] = True\n        count += 1\n\n    return all([visited[i]\
    \ for i in range(len(s) - 3) if i != 0])\n\n", "                            Happy\n\
    \                            \"\"\"\n                            is Happy\n  \
    \                          \"\"\"\n                            is NotHappy\n \
    \                           \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHappy\n\
    \                            \"\"\"\n                            is NotHap", " \
    \   s = \"happy\"\n    is_happy(s) == True\n    s = \"happyple\"\n    is_happy(s)\
    \ == False\n    s = \"happyples\"\n    is_happy(s) == False\n    \"\"\"\n    if\
    \ not s:\n        return True\n    elif len(s) < 3:\n        return True\n   \
    \ elif s[0] == s[-1] == s[-2]:\n        return is_happy(s[1:-1])\n    return False\n\
    </cell>\n<text>\nSolution\nYou can solve it using two simple methods:\n\nWe can\
    \ use recursion to solve this problem. Just a little bit of thinking can solve\
    \ this problem.\nWe can use string slicing to solve this problem. There are three\
    \ parts:\n\nFind the first and last character\nCheck to see if they are equal\n\
    Check to see if there are three consecutive characters\n\n\n</text>\n<cell>",
  "    s = \"happy\"\n    print(is_happy(s))\n", "    >>> is_happy(\"Hello\")\n  \
    \  True\n    >>> is_happy(\"Hi\")\n    False\n    >>> is_happy(\"Hi there\")\n\
    \    True\n    >>> is_happy(\"Hi Hi\")\n    False\n    >>> is_happy(\"Goodbye\"\
    )\n    True\n    >>> is_happy(\"Hi my name is Sam\")\n    True\n    >>> is_happy(\"\
    my name is Sam\")\n    False\n    \"\"\"\n    if len(s) >= 3:\n        count =\
    \ 0\n        has_distinct = False\n        for i in s:\n            if i == s[i]:\n\
    \                count += 1\n            else:\n                count = 0\n  \
    \          if count == 3:\n                has_distinct = True\n        return\
    \ not has_distinct\n", "    Happy:\n    abc\n    abbc\n    abbbc\n    abbbbbc\n\
    \    abbbbbc\n    abbbbabbbc\n    abbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n    abbbbbabbbc\n\
    \    ab", "    s = \"AABBCC\"\n    is_happy(s) == True\n    \"\"\"\n    if len(s)\
    \ < 3 or len(s) > 9:\n        return False\n    for i in range(3, len(s)):\n \
    \       if s[i] != s[i - 3] or s[i - 1] != s[i - 2]:\n            return False\n\
    \    return True\n\n", "    s = \"Sssssssssssss\"\n    output : True\n    \"\"\
    \"\n\n    def is_happy(s: str) -> bool:\n        if len(s) >= 3:\n           \
    \ counter = 0\n            flag = True\n            for i in range(3, len(s)):\n\
    \                counter += 1\n                if s[i] == s[i - counter]:\n  \
    \                  return False\n                else:\n                    flag\
    \ = False\n                    break\n            return flag\n        else:\n\
    \            return True\n\n    return is_happy(s)\n\n", "    s = \"hello\"\n\
    \    is_happy_1(s)\n    print(is_happy_1(s), \"\\n\")\n    s = \"helllo\"\n  \
    \  print(is_happy_1(s), \"\\n\")\n    s = \"hellohelllo\"\n    print(is_happy_1(s),\
    \ \"\\n\")\n    s = \"hellohelllohellohelllo\"\n    print(is_happy_1(s), \"\\\
    n\")\n    s = \"helllohelllohellohello\"\n    print(is_happy_1(s), \"\\n\")\n\
    \    \"\"\"\n    if len(s) <= 3:\n        return True\n    if not len(set(s))\
    \ == 3:\n        return False\n    visited = [False] * len(s)\n    visited[0]\
    \ = True\n    visited[1] = True\n    visited[2] = True\n    i = 2\n    while i\
    \ + 3 < len(s):\n        if visited[i]:\n            visited[i + 2] = True\n \
    \           visited[i + 3] = True\n        i += 1\n    return all(visited[:i +\
    \ 2])\n\n", "    happy(\"abccc\") # True\n    happy(\"abcdd\") # False\n    happy(\"\
    abccc\") # True\n    happy(\"bbbbb\") # False\n    happy(\"bbbbbb\") # False\n\
    \    \"\"\"\n    return len(s) >= 3 and all(x == y for x, y in zip(s, s[1:]))\n\
    \n", "    assert is_happy(\"happy\") is True\n    assert is_happy(\"non\") is\
    \ False\n    assert is_happy(\"heeal\") is True\n    assert is_happy(\"hell\"\
    ) is False\n    assert is_happy(\"helicopter\") is False\n\n    # More examples:\n\
    \    assert is_happy(\"hello\") is True\n    assert is_happy(\"helllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllllll",
  "    is_happy('yessir')\n    is True\n    is_happy('yessss')\n    is True\n    is_happy('no')\n\
    \    is True\n    is_happy('n')\n    is False\n    Time complexity is O(n)\n \
    \   \"\"\"\n    if len(s) < 3:\n        return False\n    seen = set() # set of\
    \ letters already seen so far of the same length\n    for ch in s: # iterate through\
    \ the string and count all letter occurences\n        if ch in seen: # letters\
    \ already seen are different\n            return False\n        seen.add(ch) #\
    \ add the new letter to the seen set\n    return True\n\n", "    is_happy(\"abca\"\
    ) # True\n    is_happy(\"abcdef\") # True\n    is_happy(\"abcadef\") # False\n\
    \    is_happy(\"aaaa\") # False\n    \"\"\"\n    # Your code here\n    if len(s)\
    \ <= 3:\n        return True\n    else:\n        distinct_letters = set(list(s))\n\
    \        return len(distinct_letters) == 3 and len(set(s) - distinct_letters)\
    \ == 3\n\n\"\"\"\nProblem 8: is_palindrome\n\nA palindrome is a word, phrase,\
    \ or sequence that reads the same backward as forward.\nFor example \u201Cradar\u201D\
    \ and \u201Cnoon\u201D are palindromes.\nFor a string that contains only lowercase\
    \ letters, \u201Cmadam\u201D and \u201Cnoon\u201D are not palindromes.\n\"\"\"\
    \n", "    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\")\n  \
    \  True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyyyyyyy!!!!\"\
    )\n    False\n    >>> is_happy(\"happy\")\n    True\n    >>> is_happy(\"happyp\"\
    )\n    True\n    >>> is_happy(\"happypy\")\n    False\n    >>> is_happy(\"happy!\"\
    )\n    False\n    >>> is_happy(\"happy!!\")\n    False\n    >>> is_happy(\"happyyyyy",
  "                            Happy\n                            HaPpy\n        \
    \                    HAPpy\n                            HAPy\n               \
    \             HaPy\n                            HasPy\n                      \
    \      HaSPy\n                            HasSPy\n                           \
    \ HasPy\n                            HASPy\n                            HaSPy\n\
    \                            HasSPy\n                            \"\"\"\n    Write\
    \ a function that takes in a string and checks if it is happy.\n    It is okay\
    \ if the string is empty or contains only spaces.\n    \"\"\"\n\n    # Write your\
    \ code here\n    if len(s) == 0:\n        return True\n    if len(s) == 1 or len(s)\
    \ == 1:\n        return True\n\n    for i in range(0, len(s) - 2):\n        if\
    \ s[i] == s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n\
    \n", "    s = \"Ciao\"\n    Output:\n    False\n\n    Input:\n    s = \"abciaobboy\"\
    \n    Output:\n    True\n\n    Input:\n    s = \"Sausage Egg Cheeseburger\"\n\
    \    Output:\n    True\n    \"\"\"\n    return len(s) >= 3 and all(len(s) == 3\
    \ or s[i-1] != s[i+1] or s[i] != s[i-1]\n                            for i in\
    \ range(len(s)-2)\n                            if i != 0 and i != len(s)-2 and\
    \ s[i-1] == s[i+1] == s[i])\n\n", "                            a\n           \
    \                 \"\"\"\n                            is happy since aa is not\
    \ distinct\n\n                            b\n                            \"\"\"\
    \n                            is not happy since ab is distinct\n            \
    \                \"\"\"\n                            c\n                     \
    \       \"\"\"\n                            is happy since ab is distinct\n  \
    \                          \"\"\"\n                            a\n           \
    \                 \"\"\"\n                            is happy since ab is distinct\n\
    \                            \"\"\"\n\n                            a\n       \
    \                     \"\"\"\n                            is not happy since aa\
    \ is distinct\n                            \"\"\"\n                          \
    \  b\n                            \"\"\"\n                            is not happy\
    \ since ab is not distinct\n                            \"\"\"\n\n           \
    \                 a\n                            \"\"\"\n                    \
    \        is not happy since aa is distinct\n                            \"\"\"\
    \n                            b\n                            \"\"\"\n        \
    \                    is happy since ab is not distinct\n                     \
    \       \"\"\"\n\n                            a\n                            \"\
    \"\"\n                            is happy since aa is distinct\n            \
    \                \"\"\"\n                            b\n                     \
    \       \"\"\"\n                            is not happy since ab is distinct\n\
    \                            \"\"\"\n\n                            a\n       \
    \                     \"\"\"\n                            is happy since aa is\
    \ distinct\n                            \"\"\"\n                            b\n\
    \                            \"\"\"\n                            is happy since\
    \ ab is distinct\n                            \"\"\"\n\n                     \
    \       a\n                            \"\"\"\n                            is\
    \ not happy since aa is distinct\n                            \"\"\"\n       \
    \                     b\n                            \"\"\"\n                \
    \            is not happy since ab is distinct\n                            \"\
    \"\"\n                            c\n                            \"\"\"\n    \
    \                        is happy since ab is distinct\n                     \
    \       \"\"\"\n                            c\n                            \"\"\
    \"\n                            is happy since ab is distinct\n              \
    \              \"\"\"\n                            c\n                       \
    \     \"\"\"\n                            is happy since ab is distinct\n    \
    \                        \"\"\"\n                            c\n             \
    \               \"\"\"\n                            is happy since ab is distinct\n\
    \                            \"\"\"\n                            c\n         \
    \                   \"\"\"\n                            is happy since ab is distinct\n\
    \                            \"\"\"\n\n                            a\n       \
    \                     \"\"\"\n                            is not happy since aa\
    \ is distinct\n                            \"\"\"\n                          \
    \  b\n                            \"\"\"\n                            is happy\
    \ since ab is distinct\n                            \"\"\"\n                 \
    \           c\n                            \"\"\"\n                          \
    \  is not happy since ab is distinct\n                            \"\"\"\n   \
    \                         c\n                            \"\"\"\n            \
    \                is happy since ab is distinct\n                            \"\
    \"\"\n                            c\n                            \"\"\"\n    \
    \                        is happy since ab is distinct\n                     \
    \       \"\"\"\n                            c\n                            \"\"\
    \"\n                            is not happy since ab is distinct\n          \
    \                  \"\"\"\n                            c\n                   \
    \         \"\"\"\n                            is happy since ab is distinct\n\
    \                            \"\"\"\n                            c\n         \
    \                   \"\"\"\n                            is not happy since ab\
    \ is distinct\n                            \"\"\"\n                          \
    \  c\n                            \"\"\"\n                            is happy\
    \ since ab is distinct\n                            \"\"\"\n                 \
    \           c\n                            ", "    Happy('Hello')\n    True\n\
    \    Happy('abracadaba')\n    True\n    Happy('abracadabra')\n    True\n    Happy('abracadabras')\n\
    \    False\n    Happy('abracadabrax')\n    False\n    Happy('Happy Birthday to\
    \ you!')\n    True\n    Happy('Happy Birthday!')\n    True\n    Happy('Happy Birthday\
    \ to you too!')\n    False\n    Happy('Happy Birthday!!')\n    False\n    Happy('')\n\
    \    False\n    \"\"\"\n    if len(s) <= 3:\n        return True\n    return all(char\
    \ == s[i] for i, char in enumerate(s[:3]))\n\n", "    is_happy(\"happy\")\n  \
    \  True\n    is_happy(\"poop\")\n    False\n    is_happy(\"Happy\")\n    True\n\
    \    is_happy(\"HaPoP\")\n    True\n    is_happy(\"HApP\")\n    False\n    \"\"\
    \"\n    # Check if s is a string\n    if not isinstance(s, str):\n        raise\
    \ TypeError(\"s must be a string\")\n\n    # Get the length of s\n    len_s =\
    \ len(s)\n\n    # Check that s has a length >= 3\n    if len_s < 3:\n        return\
    \ False\n\n    # Check if every 3 consecutive letters are distinct\n    count\
    \ = 0\n    for letter in s:\n        if letter in s:\n            count += 1\n\
    \        else:\n            return False\n        if count == 3:\n           \
    \ return True\n    return False\n\n", "    s = \"aassddddaaa\"\n    s = \"aassddddaaaa\"\
    \n    s = \"aassddddaaaaa\"\n    \"\"\"\n    return len(s) >= 3 and is_happy_helper(s)\n\
    \n", "    s = \"loveleetcode\"\n    happy(s) == True\n    \"\"\"\n    s = s.lower()\n\
    \    i = 0\n    while i < len(s) and i < len(s)-2 and s[i] != s[i+1]:\n      \
    \  i += 1\n    if len(s) >= 3 and len(set(s[i : i+3])) == 3:\n        return True\n\
    \    return False\n\n", "    happy('hha')\n    True\n    happy('hey')\n    True\n\
    \    happy('hello')\n    True\n    happy('helllloooo')\n    True\n    happy('helo')\n\
    \    True\n    happy('h')\n    True\n    happy('')\n    False\n    \n    \"\"\"\
    \n    if len(s) < 3:\n        return False\n    \n    for i in range(3, len(s)):\n\
    \        if s[i] != s[i - 3] and s[i] != s[i - 2]:\n            return False\n\
    \    return True\n</cell>\n<cell>\n\"\"\"\nSolution 2\n\"\"\"\n", "    Happy('abracadabra')\n\
    \    True\n\n    Happy('pwwkew') False\n    \"\"\"\n    return len(s) >= 3 and\
    \ all((i == j for i, j in zip(s, s[1:])) and len(set(s)) == 3)\n\n", "    is_happy(\"\
    happy\") = True\n    is_happy(\"pera\") = False\n    is_happy(\"abracadabra\"\
    ) = True\n    is_happy(\"abracadabraccabra\") = False\n    \"\"\"\n    if len(s)\
    \ <= 3:\n        return True\n    distinct_letters = {}\n    for i in range(len(s)\
    \ - 1):\n        if s[i] == s[i + 1]:\n            distinct_letters[s[i]] = True\n\
    \        else:\n            distinct_letters[s[i]] = False\n    len_letters =\
    \ len(distinct_letters)\n    if len_letters >= 3:\n        is_happy = True\n \
    \   else:\n        is_happy = False\n    return is_happy\n\n", "             \
    \               s =\"AABA\"\n    s is happy\n                            \"\"\"\
    \n                            s =\"ABCD\"\n                            s =\"AABAA\"\
    \n                            \"\"\"\n                            s =\"ABCBA\"\
    \n                            s =\"BACDA\"\n                            \"\"\"\
    \n                            s =\"AABAB\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAAAA\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABB\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAABBB\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAABBC\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAABBD\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAABCA\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAABCB\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAABCC\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAABCD\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABA\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABB\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABC\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABD\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABC\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABD\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABE\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABF\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABG\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABH\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABI\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABJ\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABK\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABL\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABM\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABN\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABO\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABP\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABR\"\n                            s is happy\n\
    \                            \"\"\"\n                            s =\"AAAABS\"\
    \n                            s is happy\n                            \"\"\"\n\
    \                            s =\"AAAABT\"\n                            s is happy\n\
    \                            ", "    # Output: True\n    # Input: \"happy\"\n\
    \    # Output: True\n    # Input: \"silly\"\n    # Output: False\n    # Input:\
    \ \"helooo\"\n    # Output: False\n    # Input: \"aaaaa\"\n    # Output: True\n\
    \    # Input: \"aaab\"\n    # Output: True\n    # Input: \"eight\"\n    # Output:\
    \ False\n    # Input: \"five\"\n    # Output: True\n    # Input: \"three\"\n \
    \   # Output: True\n    # Input: \"two\"\n    # Output: True\n    # Input: \"\
    one\"\n    # Output: True\n    # Input: \"\"\n    # Output: False\n    # Input:\
    \ \"a\"\n    # Output: True\n    # Input: \"b\"\n    # Output: True\n    # Input:\
    \ \"c\"\n    # Output: True\n    # Input: \"d\"\n    # Output: True\n    # Input:\
    \ \"e\"\n    # Output: True\n    # Input: \"f\"\n    # Output: True\n    # Input:\
    \ \"g\"\n    # Output: True\n    # Input: \"h\"\n    # Output: True\n    # Input:\
    \ \"i\"\n    # Output: True\n    # Input: \"j\"\n    # Output: True\n    # Input:\
    \ \"k\"\n    # Output: True\n    # Input: \"l\"\n    # Output: True\n    # Input:\
    \ \"m\"\n    # Output: True\n    # Input: \"n\"\n    # Output: True\n    # Input:\
    \ \"o\"\n    # Output: True\n    # Input: \"p\"\n    # Output: True\n    # Input:\
    \ \"q\"\n    # Output: True\n    # Input: \"r\"\n    # Output: True\n    # Input:\
    \ \"s\"\n    # Output: True\n    # Input: \"t\"\n    # Output: True\n    # Input:\
    \ \"u\"\n    # Output: True\n    # Input: \"v\"\n    # Output: True\n    # Input:\
    \ \"w\"\n    # Output: True\n    # Input: \"x\"\n    # Output: True\n    # Input:\
    \ \"y\"\n    # Output: True\n    # Input: \"z\"\n    # Output: True\n    # Input:\
    \ \"aa\"\n    # Output: True\n    # Input: \"ab\"\n    # Output: True\n    # Input:\
    \ \"ac\"\n    # Output: True\n    # Input: \"ad\"\n    # Output: True\n    # Input:\
    \ \"ae\"\n    # Output: True\n    # Input: \"af\"\n    # Output: True\n    # Input:\
    \ \"ag\"\n    # Output: True\n    # Input: \"ah\"\n    # Output: True\n    # Input:\
    \ \"ai\"\n    # Output: True\n    # Input: \"aj\"\n    # Output: True\n    # Input:\
    \ \"ak\"\n    # Output: True\n    # Input: \"al\"\n    # Output: True\n    # Input:\
    \ \"am\"\n    # Output: True\n    # Input: \"an\"\n    # Output: True\n    # Input:\
    \ \"ao", "    Example 1:\n    Input:\n    s = \"apple\"\n    Output: false\n \
    \   Explanation: \"plp\" is not happy, because it has non-distinct letters \"\
    le\".\n\n    Example 2:\n    Input:\n    s = \"leetcode\"\n    Output: true\n\
    \    Explanation: \"leetcode\" length is 3, and all letters are distinct.\n  \
    \  \"\"\"\n    word = ''\n    for ch in s:\n        if ch not in word:\n     \
    \       word += ch\n        else:\n            return False\n    return len(word)\
    \ >= 3 and len(set(word) - set(s)) == len(set(s))\n\n", "    Returns True because\
    \ \"abcabc\" has length of at least 3 and every 3 consecutive letters\n    are\
    \ distinct\n                            \"\"\"\n    length = len(s)\n    if length\
    \ < 3: return False\n    \n    cnt1 = 0\n    cnt2 = 0\n    \n    for i in range(length):\n\
    \        if s[i] == s[i+1] and s[i+1] == s[i+2]:\n            cnt1 += 1\n    \
    \    elif s[i] == s[i-1] and s[i-1] == s[i-2]:\n            cnt2 += 1\n      \
    \  \n        if cnt1 != 3 or cnt2 != 3:\n            return False\n        \n\
    \    return True\n    ", "    s = \"azcbobobegghakl\"\n    is_happy(s) = True\n\
    \    \"\"\"\n    # Your code here\n    if len(s) < 3:\n        return False\n\
    \    visited = [False for i in range(0, 26)]\n    visited[ord(s) - ord('a')] =\
    \ True\n    for c in range(0, len(s) - 1):\n        if visited[ord(s[c]) - ord('a')]:\n\
    \            visited[ord(s[c+1]) - ord('a')] = True\n        else:\n         \
    \   return False\n    return True\n\n</cell>\n<text>\nQ5. Find all words in a\
    \ given text with length at least 3 and containing at least two vowels. \nThe\
    \ list of words is returned as a list of lines (strings).\n\n\n</text>\n<cell>",
  "    >>> is_happy(\"a\")\n    True\n    >>> is_happy(\"b\")\n    True\n    >>> is_happy(\"\
    ab\")\n    True\n    >>> is_happy(\"ba\")\n    True\n    >>> is_happy(\"aba\"\
    )\n    False\n    >>> is_happy(\"abca\")\n    True\n    >>> is_happy(\"abcb\"\
    )\n    False\n    >>> is_happy(\"abcba\")\n    False\n    >>> is_happy(\"abcbca\"\
    )\n    True\n    >>> is_happy(\"abcab\")\n    True\n    >>> is_happy(\"abcabc\"\
    )\n    False\n    >>> is_happy(\"abcabcab\")\n    True\n    >>> is_happy(\"abcabcdef\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghij\")\n    True\n    >>> is_happy(\"\
    abcabcdefghijk\")\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyz\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabc\")\n    True\n\
    \    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdef\")\n    True\n    >>>\
    \ is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijk\")\n    True\n    >>>\
    \ is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmn\")\n    True\n   \
    \ >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmnopqrstuvwxyz\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmnopqrstuvwxy\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmnopqrstuvwx\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmnopqrstuvw\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmnopqrstuv\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklmnopqrstuvwxyzabcabcdefghijklmnopqrs\"\
    )\n    True\n    >>> is_happy(\"abcabcdefghijklm", "                         \
    \   Happy\n                            \"\"\"\n                            is\
    \ Happy.\n                            \"\"\"\n                            Hello\n\
    \                            \"\"\"\n                            is Not Happy.\n\
    \                            \"\"\"\n                            Hell\n      \
    \                      \"\"\"\n                            is Happy.\n       \
    \                     \"\"\"\n                            Hell\n             \
    \               \"\"\"\n                            is Not Happy.\n          \
    \                  \"\"\"\n                            Hello\n               \
    \             \"\"\"\n                            is Not Happy.\n            \
    \                \"\"\"\n                            Happy\n                 \
    \           \"\"\"\n                            is Happy.\n                  \
    \          \"\"\"\n                            Hell\n                        \
    \    \"\"\"\n                            is Happy.\n                         \
    \   \"\"\"\n                            Hell\n                            \"\"\
    \"\n                            is Happy.\n                            \"\"\"\n\
    \                            Hello\n                            \"\"\"\n     \
    \                       is Not Happy.\n                            \"\"\"\n  \
    \                          Happy\n                            \"\"\"\n       \
    \                     is Happy.\n                            \"\"\"\n        \
    \                    Hell\n                            \"\"\"\n              \
    \              is Happy.\n                            \"\"\"\n               \
    \             Hell\n                            \"\"\"\n                     \
    \       is Happy.\n                            \"\"\"\n                      \
    \      Hello\n                            \"\"\"\n                           \
    \ is Not Happy.\n                            \"\"\"\n                        \
    \    Happy\n                            \"\"\"\n                            is\
    \ Happy.\n                            \"\"\"\n                            Hell\n\
    \                            \"\"\"\n                            is Happy.\n \
    \                           \"\"\"\n                            Hell\n       \
    \                     \"\"\"\n                            is Happy.\n        \
    \                    \"\"\"\n                            Hello\n             \
    \               \"\"\"\n                            is Not Happy.\n          \
    \                  \"\"\"\n                            Happy\n               \
    \             \"\"\"\n                            is Happy.\n                \
    \            \"\"\"\n                            Hell\n                      \
    \      \"\"\"\n                            is Happy.\n                       \
    \     \"\"\"\n                            Hell\n                            \"\
    \"\"\n                            is Happy.\n                            \"\"\"\
    \n                            Hello\n                            \"\"\"\n    \
    \                        is Not Happy.\n                            \"\"\"\n \
    \                           Happy\n                            \"\"\"\n      \
    \                      is Happy.\n                            \"\"\"\n       \
    \                     Hell\n                            \"\"\"\n             \
    \               is Happy.\n                            \"\"\"\n              \
    \              Hell\n                            \"\"\"\n                    \
    \        is Happy.\n                            \"\"\"\n                     \
    \       Hello\n                            \"\"\"\n                          \
    \  is Not Happy.\n                            \"\"\"\n                       \
    \     Happy\n                            \"\"\"\n                            is\
    \ Happy.\n                            \"\"\"\n                            Hell\n\
    \                            \"\"\"\n                            is Happy.\n \
    \                           \"\"\"\n                            Hell\n       \
    \                     \"\"\"\n                            is Happy.\n        \
    \                    \"\"\"\n                            Hello\n             \
    \               \"\"\"\n                            is Not Happy.\n          \
    \                  \"\"\"\n                            Happy\n               \
    \             \"\"\"\n                            is Happy.\n                \
    \            \"\"\"\n                            Hell\n                      \
    \      \"\"\"\n                            is Happy.\n                       \
    \     \"\"\"\n                            Hell\n                            \"\
    \"\"\n", "    s = \"a\"\n    # False\n    # s = \"aa\"\n    # True\n    # s =\
    \ \"aaa\"\n    # True\n    # s = \"aaaaa\"\n    # True\n    # s = \"aaaab\"\n\
    \    # True\n    # s = \"aaaaab\"\n    # True\n    # s = \"aaaaaa\"\n    # True\n\
    \    # s = \"aaaaaba\"\n    # True\n    # s = \"aaaaaaaaa\"\n    # True\n    #\
    \ s = \"aaaaaaaaaa\"\n    # True\n\n    s = set(s)\n    return len(s) >= 3 and\
    \ len(s.intersection(set(s[3:]))) == 3\n\n\nassert is_happy('abc')\nassert not\
    \ is_happy('aa')\nassert is_happy('abbb')\nassert not is_happy('a')\nassert not\
    \ is_happy('abb')\n\n", "    >>> is_happy(\"HAPPY\")\n    True\n    >>> is_happy(\"\
    happy\")\n    True\n    >>> is_happy(\"happypenguin\")\n    False\n    >>> is_happy(\"\
    HAPPY FRIENDS!\")\n    True\n    >>> is_happy(\"HAPPY FRIENDS!!\")\n    False\n\
    \    >>> is_happy(\"HAPPY FRIENDS!!!\")\n    False\n    >>> is_happy(\"HAPPY FRIENDS!!!!!!\"\
    )\n    False\n    >>> is_happy(\"HAPPY FRIENDS!!!!!!!\")\n    True\n    >>> is_happy(\"\
    HAPPY FRIENDS!!!!!!!\")\n    False\n    \"\"\"\n    if len(s) < 3:\n        return\
    \ False\n    for i in range(len(s) - 3):\n        if s[i] not in s[i : i + 3]:\n\
    \            return False\n    return True\n\n", "    >>> is_happy(\"happy\")\n\
    \    True\n    >>> is_happy(\"happyp\")\n    True\n    >>> is_happy(\"happypp\"\
    )\n    True\n    >>> is_happy(\"happyppy\")\n    True\n    >>> is_happy(\"happyppyo\"\
    )\n    True\n    >>> is_happy(\"happyppyoo\")\n    True\n    >>> is_happy(\"happyppyooo\"\
    )\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"\
    happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>>\
    \ is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n   \
    \ True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\"\
    )\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"\
    happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>>\
    \ is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n   \
    \ True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\"\
    )\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"\
    happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>>\
    \ is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n   \
    \ True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\"\
    )\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"\
    happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>>\
    \ is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n   \
    \ True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\"\
    )\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"\
    happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n    True\n    >>>\
    \ is_happy(\"happyppyooo\")\n    True\n    >>> is_happy(\"happyppyooo\")\n   \
    \ True\n    >>> is_happy(\"happyp", "    is_happy(\"abracadabra\") # True\n  \
    \  is_happy(\"aba\") # False\n    \"\"\"\n    # Your code here\n    if len(s)\
    \ < 3:\n        return False\n    for i in range(0, len(s)):\n        if s[i]\
    \ != s[i+1] or s[i] != s[i+2]:\n            return False\n    return True\n\n",
  "    # s       : the string\n    # returns  : True\n    # Example 1:\n    #    \
    \           : a\n    # Input : aaa\n    # Output: True\n    # Example 2:\n   \
    \ #               : aax\n    # Input: aaax\n    # Output: False\n    # Follow\
    \ up:\n    # How about when the string is empty? Does your solution take that\
    \ into account?\n    # How about the case when the string length is 1?\n    #\
    \ What about other lengths?\n    \"\"\"\n    if len(s) == 0 or len(s) == 1:\n\
    \        return True\n    hash_map = []\n    for i in range(1, len(s) + 1):\n\
    \        for j in range(1, len(s) + 1):\n            if s[i] != s[j]:\n      \
    \          hash_map.append(s[i])\n    if len(hash_map) < 3:\n        return False\n\
    \    return True\n\n", "    >>> is_happy('hello')\n    True\n    >>> is_happy('aaa')\n\
    \    True\n    >>> is_happy('abb')\n    True\n    >>> is_happy('aaab')\n    True\n\
    \    >>> is_happy('abbb')\n    False\n    >>> is_happy('')\n    False\n    >>>\
    \ is_happy('   ')\n    False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\
    \n    seen = set()\n    for c in s:\n        if c not in seen:\n            seen.add(c)\n\
    \        else:\n            return False\n\n    return True\n\n", "    print(is_happy(\"\
    happy\"))\n    print(is_happy(\"happylol\"))\n    print(is_happy(\"happyh\"))\n\
    \    print(is_happy(\"hello\"))\n    print(is_happy(\"hel\"))\n    print(is_happy(\"\
    hell\"))\n    print(is_happy(\"hellohello\"))\n    print(is_happy(\"helllo\"))\n\
    \    print(is_happy(\"hellloh\"))\n    print(is_happy(\"helllohe\"))\n    print(is_happy(\"\
    hellohelllo\"))\n    print(is_happy(\"hellohellohello\"))\n    print(is_happy(\"\
    hellohellohelllo\"))\n    print(is_happy(\"hellohelllohe\"))\n    print(is_happy(\"\
    hellohelllohelllo\"))\n    print(is_happy(\"hellohelllohellloh\"))\n    print(is_happy(\"\
    hellohellohelllohellloh\"))\n    print(is_happy(\"hellohelllohelllohellloh\"))\n\
    \    print(is_happy(\"hellohelllohelllohelllohellloh\"))\n    print(is_happy(\"\
    hellohelllohelllohelllohelllohellloh\"))\n    print(is_happy(\"hellohelllohelllohelllohelllohelllohellloh\"\
    ))\n    print(is_happy(\"hellohelllohelllohelllohelllohelllohelllohelllohellloh\"\
    ))\n    print(is_happy(\"hellohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohellloh\"\
    ))\n    print(is_happy(\"hellohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohellloh\"\
    ))\n    print(is_happy(\"hellohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllohelllo",
  "    s = \"AABA\"\n    print(is_happy(s))\n    s = \"AAAAA\"\n    print(is_happy(s))\n\
    \    s = \"AABBB\"\n    print(is_happy(s))\n    s = \"AAB\"\n    print(is_happy(s))\n\
    \    \"\"\"\n    if len(s) < 3:\n        return False\n\n    count = 0\n    for\
    \ i in range(1, len(s)):\n        if s[i] != s[i - 1]:\n            count += 1\n\
    \n    if count == len(s) - 2:\n        return True\n    return False\n\n", " \
    \   s == \"Happy\"\n    s == \"Happyway\"\n    s == \"HappyOway\"\n    s == \"\
    NotHappy\"\n    s == \"Happy day\"\n    s == \"Happyyday\"\n    s == \"Not hap\"\
    \n    s == \"Hapy\"\n    s == \"Happy Happy Happy\"\n    s == \"Happy Happy Happyyday\"\
    \n    s == \"HappyydayHappy\"\n    \"\"\"\n    if len(s) >= 3:\n        for i\
    \ in [i - 1 for i in list(range(3))]:\n            if s.count(s[i]) == 3:\n  \
    \              flag = True\n                break\n    else:\n        return True\n\
    \n    return flag\n\n", "                            Happy String\n          \
    \                  \"\"\"\"\"\"\"\"\"\"\"\n                            Happy String\n\
    \                            \"\"\"\"\"\"\"\"\"\"\"\n                        \
    \    Happy String\n                            \"\"\"\"\"\"\"\"\"\"\"\n      \
    \                      Happy String\n                            \"\"\"\n    \
    \                        Happy String\n                            \"\"\"\n  \
    \                          Not Happy String\n                            \"\"\"\
    \n    Write a function to check it.\"\"\"\n    # Write your code here\n    return\
    \ len(s) >= 3 and all(i!=j for i, j in zip(s[::3], s[1::3]))\n\n\"\"\"\nSample\
    \ test cases:\n\nassert is_happy(\"Happy String\") == True\nassert is_happy(\"\
    Happy String\") == True\nassert is_happy(\"Happy String\") == True\nassert is_happy(\"\
    Happy String\") == True\nassert is_happy(\"Not Happy String\") == False\nassert\
    \ is_happy(\" \") == False\n\"\"\"\n\n</cell>\n<cell>\n\"\"\"\nWrite a Python\
    \ program to check the string whether it is a valid email.\n- Write a Python program\
    \ to check the string whether it is a valid email.\n- Email address\n    - Valid\
    \ email address\n        - All the characters in the name should be letters or\
    \ numbers, and the first name should be minimum of one character and maximum of\
    \ 50 characters.\n- Email address\n    - The domain name should be minimum of\
    \ one character and maximum of 100 characters.\n- Email address\n    - The user\
    \ name should be minimum of one character and maximum of 50 characters.\n\"\"\"",
  "    s = \"happy\"\n    is_happy(s)\n    True\n\n                            \"\"\
    \"\n    s = \"SJ\"\n    is_happy(s)\n    False\n\n                           \
    \ \"\"\"\n    s = \"Sj\"\n    is_happy(s)\n    False\n\n                     \
    \       \"\"\"\n    s = \"Sjap\"\n    is_happy(s)\n    True\n\n              \
    \              \"\"\"\n    s = \"Sjaphe\"\n    is_happy(s)\n    True\n\n     \
    \                       \"\"\"\n    s = \"Sjaphee\"\n    is_happy(s)\n    False\n\
    \n                            \"\"\"\n    s = \"Sjapheec\"\n    is_happy(s)\n\
    \    False\n\n                            \"\"\"\n    s = \"Sjapheecd\"\n    is_happy(s)\n\
    \    False\n\n                            \"\"\"\n    s = \"Sjapheece\"\n    is_happy(s)\n\
    \    True\n    \n    \"\"\"\n    return s.__len__() >= 3 and len(set(s[:3])) ==\
    \ 3\n\n", "    True\n    False\n    \"\"\"\n    n = len(s)\n    return n > 3 and\
    \ all([s[i - 3] != s[i] for i in range(1, n - 4)])\n\n", "    >>> is_happy(\"\
    happy\")\n    True\n    >>> is_happy(\"happypleap\")\n    False\n    >>> is_happy(\"\
    HAPPY\")\n    True\n    >>> is_happy(\"HAPPYeee\")\n    False\n    >>> is_happy(\"\
    HAPPYhhhh\")\n    False\n    >>> is_happy(\"HAPPYyyyy\")\n    False\n    >>> is_happy(\"\
    HAPPYyyyyy\")\n    False\n    >>> is_happy(\"HAPPYyyyyyy\")\n    False\n    >>>\
    \ is_happy(\"HAPPYyyyyy\")\n    True\n    \"\"\"\n    if len(s) >= 3 and all(c\
    \ in s for c in string.ascii_letters) and all(c in s for c in string.ascii_letters[1:3]):\n\
    \        return True\n    return False\n\n", "    s = \"Happy\"\n    is_happy(s)\
    \ = True\n    is_happy(\"Happy\") = True\n    is_happy(\"Happy\") = True\n   \
    \ is_happy(\"HappyHappy\") = True\n    is_happy(\"HappyHappy\") = False\n    is_happy(\"\
    HappyHappyHappy\") = False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\
    \    visited = set()\n    for i in range(3):\n        visited.add(s[i])\n    for\
    \ i in range(3, len(s)):\n        if s[i] not in visited:\n            return\
    \ False\n    return True\n\n", "                            happy\n          \
    \                  \"\"\"\n                            is happy\n            \
    \                \"\"\"\n                            is happy\n              \
    \              \"\"\"\n                            is happy\n                \
    \            \"\"\"\n                            is happy\n                  \
    \          \"\"\"\n                            is happy\n                    \
    \        \"\"\"\n                            is happy\n                      \
    \      \"\"\"\n                            is happy\n                        \
    \    \"\"\"\n                            is happy\n                          \
    \  \"\"\"\n                            is happy\n                            \"\
    \"\"\n                            is happy\n                            \"\"\"\
    \n                            is happy\n                            \"\"\"\n \
    \                           is happy\n                            \"\"\"\n   \
    \                         is happy\n                            \"\"\"\n     \
    \                       is happy\n                            \"\"\"\n       \
    \                     is happy\n                            \"\"\"\n         \
    \                   is happy\n                            \"\"\"\n           \
    \                 is happy\n                            \"\"\"\n             \
    \               is happy\n                            \"\"\"\n               \
    \             is happy\n                            \"\"\"\n                 \
    \           is happy\n                            \"\"\"\n                   \
    \         is happy\n                            \"\"\"\n                     \
    \       is happy\n                            \"\"\"\n                       \
    \     is happy\n                            \"\"\"\n                         \
    \   is happy\n                            \"\"\"\n                           \
    \ is happy\n                            \"\"\"\n                            is\
    \ happy\n                            \"\"\"\n                            is happy\n\
    \                            \"\"\"\n                            is happy\n  \
    \                          \"\"\"\n                            is happy\n    \
    \                        \"\"\"\n                            is happy\n      \
    \                      \"\"\"\n                            is happy\n        \
    \                    \"\"\"\n                            is happy\n          \
    \                  \"\"\"\n                            is happy\n            \
    \                \"\"\"\n                            is happy\n              \
    \              \"\"\"\n                            is happy\n                \
    \            \"\"\"\n                            is happy\n                  \
    \          \"\"\"\n                            is happy\n                    \
    \        \"\"\"\n                            is happy\n                      \
    \      \"\"\"\n                            is happy\n                        \
    \    \"\"\"\n                            is happy\n                          \
    \  \"\"\"\n                            is happy\n                            \"\
    \"\"\n                            is happy\n                            \"\"\"\
    \n                            is happy\n                            \"\"\"\n \
    \                           is happy\n                            \"\"\"\n   \
    \                         is happy\n                            \"\"\"\n     \
    \                       is happy\n                            \"\"\"\n       \
    \                     is happy\n                            \"\"\"\n         \
    \                   is happy\n                            \"\"\"\n           \
    \                 is happy\n                            \"\"\"\n             \
    \               is happy\n                            \"\"\"\n               \
    \             is happy\n                            \"\"\"\n                 \
    \           is happy\n                            \"\"\"\n                   \
    \         is happy\n                            \"\"\"\n                     \
    \       is happy\n                            \"\"\"\n                       \
    \     is happy\n                            \"\"\"\n                         \
    \   is happy\n                            \"\"\"\n                           \
    \ is happy\n                            \"\"\"\n                            is\
    \ happy\n                            \"\"\"\n                            is happy\n\
    \                            \"\"\"\n                            is happy\n  \
    \                          \"\"\"\n                            is happy\n    \
    \                        \"\"\"\n                            is happy\n      \
    \                      \"\"\"\n                            is happy\n        \
    \                    \"\"\"\n                            is happy\n          \
    \                  \"\"\"\n                            is happy\n            \
    \                \"\"\"\n                            is happy\n              \
    \              \"\"\"\n                            is happy\n                \
    \            \"\"\"\n                            is happy\n                  \
    \          \"\"\"\n                            is happy\n                    \
    \        \"\"\"\n                            is happy\n                      \
    \      \"\"\"\n                            is happy\n                        \
    \    \"\"\"\n                            is happy\n                          \
    \  \"\"\"\n                            is ", "    happy(\"cat\")\n    happy(\"\
    abracadabra\")\n    happy(\"abacaba\") # <-- notice the missing 'r'\n    happy(\"\
    aba\") # <-- notice the missing 'c'\n    happy(\"aaaaaa\")\n    happy(\"aaaaab\"\
    )\n    happy(\"abacab\")\n    happy(\"bbbbbb\")\n    happy(\"abacaba\")\n    happy(\"\
    abacabca\")\n    \"\"\"\n    length = len(s)\n    return length > 0 and length\
    \ >= 3 and all(\n        s[i : i + 3] == s[i + 2 : i + 4]\n        for i in range(length\
    \ - 2)\n    )\n\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is really helpful,\
    \ thank you!\n<|/ c |>\n<| c |>\nNo problem. Glad to help!\n<|/ c |>\n<| a dscore=1\
    \ |>\nUsing itertools.groupby and itertools.combinations:\n<code>\nfrom itertools\
    \ import combinations, groupby\n\ns = 'abcd'\n", "                           \
    \ \"\"\n                            \"Hacker\" -> True\n                     \
    \       \"hack\" -> False\n                            \"\"\"\n\n    Constraints:\n\
    \        s is a string of lowercase English letters, digits, and special characters,\
    \ except the newline character \\n.\n    \"\"\"\n    return len(s) >= 3 and all(i\
    \ in s for i in s[-3:]) and is_unique(\"\".join(s))\n\n", "    s = \"cat\"\n \
    \   returns: True\n    s = \"cat\"\n    returns: False\n    s = \"cab\"\n    returns:\
    \ False\n    s = \"cat\"\n    returns: False\n    \"\"\"\n    return len(s) >=\
    \ 3 and all((i == j or s[i] == s[j])\n                                  for i,\
    \ j in zip(s[0: -1], s[1:]))\n\n", "    Output:\n                True\n    Happy\
    \ strings are those that have length at least 3 and not only distinct letters\n\
    \    Explanation:\n                \n    String: abbccc\n    Length: 3\n    Distinct\
    \ letters: a, b, c\n    \n    String: bbbbba\n    Length: 3\n    Distinct letters:\
    \ b, a, a\n    \n    String: abracadabra\n    Length: 4\n    Distinct letters:\
    \ a, r, c, a, d, b, a, r\n    \n    String: abbcccddddd\n    Length: 5\n    Distinct\
    \ letters: a, b, c, d, d, d\n    \n    String: abbbcccddddd\n    Length: 6\n \
    \   Distinct letters: a, b, c, d, d, d\n    \n    String: abbbcddd\n    Length:\
    \ 7\n    Distinct letters: a, b, c, d, d\n    \n    String: abbbbccc\n    Length:\
    \ 8\n    Distinct letters: a, b, c, b\n    \n    String: abbbbcccde\n    Length:\
    \ 9\n    Distinct letters: a, b, c, b, d, e, e\n    \n    String: abbbbcccdeff\n\
    \    Length: 10\n    Distinct letters: a, b, c, b, d, e, f, f\n    \n    String:\
    \ abbbbcccdefff\n    Length: 11\n    Distinct letters: a, b, c, b, d, e, f, f,\
    \ f\n    \n    String: abbbbcccdefffgij\n    Length: 12\n    Distinct letters:\
    \ a, b, c, b, d, e, f, f, g, i, j\n    \n    String: qjh\n    Length: 3\n    Distinct\
    \ letters: q, j, h\n    \n    String: qjh\n    Length: 4\n    Distinct letters:\
    \ q, j, h\n    \n    String: qjh\n    Length: 5\n    Distinct letters: q, j, h\n\
    \    \n    String: qjh\n    Length: 6\n    Distinct letters: q, j, h\n    \n \
    \   String: qjh\n    Length: 7\n    Distinct letters: q, j, h\n    \n    String:\
    \ qjh\n    Length: 8\n    Distinct letters: q, j, h\n    \n    String: qjh\n \
    \   Length: 9\n    Distinct letters: q, j, ", "    s = \"A\"\n    s = \"AA\"\n\
    \    s = \"AB\"\n    s = \"ABBA\"\n    s = \"AAB\"\n    s = \"AAAA\"\n    s =\
    \ \"AAAAA\"\n    s = \"ABBBB\"\n    s = \"ABAB\"\n    s = \"ABBB\"\n    s = \"\
    ABABB\"\n    s = \"ABBBBB\"\n    s = \"AAAAAAA\"\n    s = \"AAAAAAAAB\"\n    s\
    \ = \"AAAAAAAABB\"\n    s = \"AAAAAAAABBB\"\n    s = \"AAAAAAAABBBB\"\n    s =\
    \ \"AAAAAAAABBBBAAA\"\n    s = \"AAAAAAAABBBBAAAA\"\n    s = \"AAAAAAAABBBBAAAAA\"\
    \n    s = \"AAAAAAAABBBBAAAAAA\"\n    s = \"AAAAAAAABBBBAAAAAAAB\"\n    s = \"\
    AAAAAAAABBBBAAAAAAABB\"\n    s = \"AAAAAAAABBBBAAAAAAABBB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBB\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBA\"\n\
    \    s = \"AAAAAAAABBBBAAAAAAABBBBBAA\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAAB\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBB\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBB\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBA\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAA\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAAAB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAAABB\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAAABBB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAAABBBB\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAAABBBBB\"\n    s = \"AAAAAAAABBBBAAAAAAABBBBBAAABBBBBAAABBBBBA\"\
    \n    s = \"AAAAAAAABBBBAAAAAAABBBBB", "    s = \"leetcode\"\n    Output: True\n\
    \                            \"\"\"\n    s = \"abracadabra\"\n    Output: True\n\
    \    \"\"\"\n    if len(s) < 3:\n        return False\n    hash_table = {}\n \
    \   for letter in s:\n        if letter in hash_table:\n            hash_table[letter]\
    \ += 1\n        else:\n            hash_table[letter] = 1\n    return len(hash_table)\
    \ >= 3\n\n", "    assert is_happy('happy') == 'happy'\n    assert is_happy('happy')\
    \ == 'happy'\n    assert is_happy('happy') == 'happy'\n    assert is_happy('not\
    \ happy') == False\n    assert is_happy('nope') == False\n    assert is_happy('')\
    \ == False\n    assert is_happy('adsfasdfasdfasdfasdf') == False\n    \"\"\"\n\
    \    if len(s) < 3:\n        return False\n    for i in range(3, len(s)):\n  \
    \      if s[i] == s[i-1]:\n            continue\n        else:\n            return\
    \ False\n    return True\n\n", "    print(is_happy(\"hello\"))  # Output: True\n\
    \    print(is_happy(\"world\"))  # Output: False\n    print(is_happy(\"hell\"\
    ))  # Output: False\n    print(is_happy(\"hellllllooooww\"))  # Output: True\n\
    \    print(is_happy(\"helllo\"))  # Output: False\n    \"\"\"\n\n    return len(s)\
    \ >= 3 and all(x in set(s[i: i + 3]) for i in range(len(s) - 2))\n\n", "    return\
    \ len(s) >= 3 and all(k == s.count(k) for k in range(3))\n\n", "    >>> is_happy('Happy\
    \ Birthday')\n    True\n    >>> is_happy('Happy Night Birthday')\n    True\n \
    \   >>> is_happy('Happy Night Day')\n    False\n    >>> is_happy('Happy Birthday\
    \ Happy Night')\n    False\n    >>> is_happy('Happy')\n    False\n    >>> is_happy('Happy\
    \ Sunday')\n    False\n    >>> is_happy('')\n    True\n    \"\"\"\n    if len(s)\
    \ < 3:\n        return True\n    else:\n        is_happy_set = set()\n       \
    \ for i in range(1, len(s)):\n            if s[i - 1] == s[i]:\n             \
    \   continue\n            else:\n                is_happy_set.add(s[i - 1])\n\
    \                if len(is_happy_set) == 3:\n                    if is_happy_set\
    \ in is_happy_set:\n                        return True\n                else:\n\
    \                    return False\n    return False\n\n", "    is_happy(\"Hi!\"\
    ) = True\n    is_happy(\"I\") = False\n    is_happy(\"Hello\") = True\n    is_happy(\"\
    H\") = True\n    is_happy(\"HaHa\") = True\n    is_happy(\"HaH\") = False\n  \
    \  is_happy(\"HaHa\") = True\n    \n    \n    \n    \n    \"\"\"\n    if not s:\n\
    \        return False\n    elif len(s) <= 3:\n        return True\n    else:\n\
    \        list_a = list(s)\n        list_b = list(s)\n        list_a.sort()\n \
    \       list_b.sort()\n        return list_a == list_b\n</cell>\n<cell>\nassert\
    \ is_happy(\"Hi!\")\nassert not is_happy(\"H\")\nassert is_happy(\"HaHa\")\nassert\
    \ is_happy(\"HaH\")\nassert not is_happy(\"HaHa\")\nassert not is_happy(\"HaH\"\
    )\n</cell>\n<text>\nExercises:\n\n</text>\n<text>\n1.\nWrite a function that returns\
    \ True if the given DNA is valid, False otherwise.\n\nValid DNA contains only\
    \ A, C, G and T characters and its length equals to 36.\n\nFor DNA with length\
    \ less than 36, the output should return True.\n\nFor DNA with length greater\
    \ than 36, the output should return False.\n\nExample 1:\n\nDNA = \"AGCTT\"\n\n\
    Output: True\n\nExample 2:\n\nDNA = \"AGCTTC\"\n\nOutput: False\n\n</text>\n<cell>",
  "                           s =  \"\"\"\n                          Happy\n     \
    \                      Happy\n                           Happy\n             \
    \              Happy\n                           \"\"\"\n                    \
    \       is Happy .\n                           \"\"\"\n                      \
    \     s =  \"\"\"\n                           Happy\n                        \
    \   Happy\n                           Happy\n                           Happy\n\
    \                           \"\"\"\n                           is Happy .\n  \
    \                         \"\"\"\n                           s =  \"\"\"\n   \
    \                        Happy\n                           Happy\n           \
    \                Happy\n                           Happy\n                   \
    \        \"\"\"\n                           is Happy .\n                     \
    \      \"\"\"\n                           s =  \"\"\"\n                      \
    \     Happy\n                           Happy\n                           Happy\n\
    \                           Happy\n                           \"\"\"\n       \
    \                    is Happy .\n                           \"\"\"\n         \
    \                  s =  \"\"\"\n                           Happy\n           \
    \                Happy\n                           Happy\n                   \
    \        Happy\n                           \"\"\"\n                          \
    \ is Happy .\n                           \"\"\"\n                           s\
    \ =  \"\"\"\n                           Happy\n                           Happy\n\
    \                           Happy\n                           Happy\n        \
    \                   \"\"\"\n                           is Happy .\n          \
    \                 \"\"\"\n                           s =  \"\"\"\n           \
    \                Happy\n                           Happy\n                   \
    \        Happy\n                           Happy\n                           \"\
    \"\"\n                           is Happy .\n                           \"\"\"\
    \n                           s =  \"\"\"\n                           Happy\n \
    \                          Happy\n                           Happy\n         \
    \                  Happy\n                           \"\"\"\n                \
    \           is Happy .\n                           \"\"\"\n                  \
    \         s =  \"\"\"\n                           Happy\n                    \
    \       Happy\n                           Happy\n                           Happy\n\
    \                           \"\"\"\n                           is Happy .\n  \
    \                         \"\"\"\n                           s =  \"\"\"\n   \
    \                        Happy\n                           Happy\n           \
    \                Happy\n                           Happy\n                   \
    \        \"\"\"\n                           is Happy .\n                     \
    \      \"\"\"\n                           s =  \"\"\"\n                      \
    \     Happy\n                           Happy\n                           Happy\n\
    \                           Happy\n                           \"\"\"\n       \
    \                    is Happy .\n                           \"\"\"\n         \
    \                  s =  \"\"\"\n                           Happy\n           \
    \                Happy\n                           Happy\n                   \
    \        Happy\n                           \"\"\"\n                          \
    \ is Happy .\n                           \"\"\"\n                           s\
    \ =  \"\"\"\n                           Happy\n                           Happy\n\
    \                           Happy\n                           Happy\n        \
    \                   \"\"\"\n                           is Happy .\n          \
    \                 \"\"\"\n                           s =  \"\"\"\n           \
    \                Happy\n                           Happy\n                   \
    \        Hap", "    # s=\"aaabb\"\n    # s=\"abba\"\n    # s=\"aabb\"\n    # s=\"\
    aaaa\"\n    # s=\"abacab\"\n    # s=\"abbabab\"\n    # s=\"abbabab\"\n    # s=\"\
    aabbccc\"\n    # s=\"abbbccc\"\n    answer=False\n    i=3\n    while i<len(s)\
    \ and answer==False:\n        answer=True\n        for k in range(i,len(s)-i):\n\
    \            if s[i]==s[k]:\n                answer=False\n                break\n\
    \        i+=1\n    return answer\n\n    \n", "    s = \"abba\"\n    s is happy\
    \ # -> True\n\n    s = \"abaa\"\n    s is happy # -> False\n\n    s = \"aaaa\"\
    \n    s is happy # -> False\n    \"\"\"\n\n    if len(s) >= 3:\n        for i\
    \ in range(0, len(s) - 1):\n            if s[i] == s[i + 1]:\n               \
    \ if s[i] != s[i + 2]:\n                    return False\n        return True\n\
    \n    return False\n\n", "    s = \"aaabbc\"\n    print(is_happy(s))\n    # True\n\
    \    s = \"abcabc\"\n    print(is_happy(s))\n    # True\n    s = \"abcabca\"\n\
    \    print(is_happy(s))\n    # False\n    \"\"\"\n    if len(s) < 3:\n       \
    \ return False\n    letters = set()\n    for i in s:\n        if i not in letters:\n\
    \            letters.add(i)\n        else:\n            return False\n    return\
    \ True\n\n", "    >>> is_happy('h2')\n    True\n    >>> is_happy('hh')\n    True\n\
    \    >>> is_happy('ee')\n    False\n    >>> is_happy('hhh')\n    False\n    >>>\
    \ is_happy('aaa')\n    False\n    \"\"\"\n    return len(s) >= 3 and all(x ==\
    \ y for x, y in zip(s, s[1:] + s[:1]))\n\n", "    Input:\n    Output: True\n \
    \   Hint:\n    Check your function with assert\n    \"\"\"\n    if len(s) < 3:\n\
    \        return False\n    for i in range(3):\n        if s[i] == s[i + 1] and\
    \ s[i + 1] == s[i + 2]:\n            continue\n        else:\n            return\
    \ False\n    return True\n\n", "    s = \"ahhhhaaaah\"\n    is_happy(s) = True\n\
    \n    s = \"aaa\"\n    is_happy(s) = False\n\n    s = \"abba\"\n    is_happy(s)\
    \ = True\n    \"\"\"\n    # return len(s) > 2 and all(n == s[:i+1] for i in range(len(s)\
    \ - 1))\n    return len(s) >= 3 and all(s[0] != s[i + 1] for i in range(len(s)\
    \ - 2))\n\n\n@lru_cache(maxsize=None)", "    s = \"happy\"\n    is_happy(s)\n\
    \    ==> True\n    s = \"happyp\"\n    is_happy(s)\n    ==> False\n    s = \"\
    happypp\"\n    is_happy(s)\n    ==> True\n    \"\"\"\n    return len(s) >= 3 and\
    \ len(set(s)) == len(s)\n\n", "                            H     A     P     Y\n\
    \                            H     A     P     Y     E     S\n               \
    \             H     A     P     Y     E     S     A     D\n                  \
    \          H     A     P     Y     E     S     A     D     E\n               \
    \             H     A     P     Y     E     S     A     D     E     H\n      \
    \                      H     A     P     Y     E     S     A     D     E     H\
    \     A\n                            H     A     P     Y     E     S     A   \
    \  D     E     H     A     P\n                            H     A     P     Y\
    \     E     S     A     D     E     H     A     P     Y\n                    \
    \        H     A     P     Y     E     S     A     D     E     H     A     P \
    \    Y     E\n                            H     A     P     Y     E     S    \
    \ A     D     E     H     A     P     Y     E     S\n                        \
    \    H     A     P     Y     E     S     A     D     E     H     A     P     Y\
    \     E     S     A\n                            H     A     P     Y     E   \
    \  S     A     D     E     H     A     P     Y     E     S     A     D\n     \
    \                       H     A     P     Y     E     S     A     D     E    \
    \ H     A     P     Y     E     S     A     D     E\n                        \
    \    H     A     P     Y     E     S     A     D     E     H     A     P     Y\
    \     E     S     A     D     E     H\n                            H     A   \
    \  P     Y     E     S     A     D     E     H     A     P     Y     E     S \
    \    A     D     E     H     A\n                            H     A     P    \
    \ Y     E     S     A     D     E     H     A     P     Y     E     S     A  \
    \   D     E     H     A     P\n                            H     A     P     Y\
    \     E     S     A     D     E     H     A     P     Y     E     S     A    \
    \ D     E     H     A     P     Y\n                            H     A     P \
    \    Y     E     S     A     D     E     H     A     P     ", "    is_happy(\"\
    HAPPY\")  # True\n    is_happy(\"HAPPY!!!\")  # True\n    is_happy(\"HAPPY!!!\"\
    )  # False\n    \"\"\"\n    return len(s) >= 3 and len(set(s[3:6]))\n", "    >>>\
    \ is_happy(\"a\")\n    True\n    >>> is_happy(\"ab\")\n    True\n    >>> is_happy(\"\
    abd\")\n    True\n    >>> is_happy(\"abc\")\n    True\n    >>> is_happy(\"aa\"\
    )\n    True\n    >>> is_happy(\"aad\")\n    False\n    >>> is_happy(\"abba\")\n\
    \    False\n    >>> is_happy(\"abad\")\n    False\n    >>> is_happy(\"abca\")\n\
    \    False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    letter_counts\
    \ = {}\n    for i in s:\n        if i in letter_counts:\n            letter_counts[i]\
    \ += 1\n        else:\n            letter_counts[i] = 1\n    threes = [i for i\
    \ in range(3, len(s)) if i not in letter_counts]\n    return len(threes) == len(set(threes))\
    \ and len(threes) % 3 == 0\n\n", "    is_happy(\"hello\")\n    True\n    is_happy(\"\
    yes\")\n    False\n    is_happy(\"apple\")\n    True\n    is_happy(\"pineapple\"\
    )\n    False\n    is_happy(\"heyhey\")\n    True\n    is_happy(\"hohoho\")\n \
    \   True\n    is_happy(\"hohohohoho\")\n    False\n    \"\"\"\n    return len(s)\
    \ >= 3 and all(c in set(s[:3]) for c in s)\n", "    s = \"aAbBbCc\"\n    print(is_happy(s))\
    \  # True\n    s = \"aaa\"\n    print(is_happy(s))  # True\n    s = \"aA\"\n \
    \   print(is_happy(s))  # True\n    s = \"aa\"\n    print(is_happy(s))  # False\n\
    \    s = \"aaa\"\n    print(is_happy(s))  # False\n    s = \"aaA\"\n    print(is_happy(s))\
    \  # False\n    s = \"aaa\"\n    print(is_happy(s))  # False\n    s = \"aaA\"\n\
    \    print(is_happy(s))  # False\n    \"\"\"\n    return len(s) >= 3 and all((not\
    \ s.count(x), len(set(s)) >= 3)) and all([not s.count(x) for x in set(s)])\n\n\
    \n@njit", "    s = \"A\"\n    Output: True\n    s = \"AB\"\n    Output: True\n\
    \    s = \"ABA\"\n    Output: True\n    s = \"ACDA\"\n    Output: True\n    s\
    \ = \"A\"\n    Output: False\n    s = \"ab\"\n    Output: True\n    s = \"abba\"\
    \n    Output: True\n    s = \"ad\"\n    Output: False\n    s = \"abad\"\n    Output:\
    \ False\n    s = \"abdA\"\n    Output: False\n    s = \"acdA\"\n    Output: True\n\
    \    \"\"\"\n    return len(s) >= 3 and all(len(set(s)) == 3 for i in range(0,\
    \ 3))\n\n", "    s = \"leetcode\"\n    is_happy(s) returns True\n            \
    \                \"\"\"\n    s = \"leet\"\n    is_happy(s) returns False\n   \
    \ \n    \n    s = \"loveleetcode\"\n    is_happy(s) returns False\n    \n    s\
    \ = \"leetcode\"\n    is_happy(s) returns False\n    \n    s = \"cat\"\n    is_happy(s)\
    \ returns False\n    \n    s = \"dog\"\n    is_happy(s) returns True\n    \"\"\
    \"\n    if len(s)<3:\n        return False\n    \n    \n    flag = True\n    \n\
    \    \n    \n    for i in range(len(s)-2): #O(n)\n        if s[i]==s[i+1]==s[i+2]:\
    \ \n            \n            flag = False\n            break\n            \n\
    \    if flag:\n        return True\n    \n    \n    \n    ", "    s=\"abcccc\"\
    \n    print(is_happy(s))\n    s = \"abbccc\"\n    print(is_happy(s))\n    s =\
    \ \"abbcccde\"\n    print(is_happy(s))\n    s = \"bbbbb\"\n    print(is_happy(s))\n\
    \    \"\"\"\n    \n    len_string = len(s)\n    if len_string < 3:\n        return\
    \ False\n    for i in range(len_string-3):\n        if s[i:i+3] == s[i:i+3]:\n\
    \            return False\n    return True\n</cell>\n<cell>", "              \
    \              s   \n                            Happy \n                    \
    \        \"\"\"\n                            s   \n                          \
    \  Happy\n                            \"\"\"\n                            s  \
    \     \n                            Happy \n                            \"\"\"\
    \n                            s       \n                            Happy\n  \
    \                          \"\"\"\n                            s       \n    \
    \                        Happy\n                            \"\"\"\n\n    Complexity:\n\
    \        Time complexity : O(n)\n        Space complexity : O(n)\n    \"\"\"\n\
    \n    return len(s) >= 3 and all((letter for letter in s if letter not in s))\n\
    \n", "    >>> is_happy(\"baaac\")\n    True\n    >>> is_happy(\"aaa\")\n    False\n\
    \    >>> is_happy(\"ab\")\n    True\n    >>> is_happy(\"a\")\n    False\n    >>>\
    \ is_happy(\"\")\n    False\n    >>> is_happy(\"x\")\n    False\n    \"\"\"\n\
    \    return len(s) >= 3 and all(is_distinct(s[i : i + 3]) for i in range(len(s)\
    \ - 2))\n\n", "    Happy String     True \n    Happy string     False \n    Strange\
    \ String   False \n    Strange String   True \n    Strange string    False \n\
    \    Strange string    False \n    Short String       False\n    Short string\
    \       True\n    \"\"\"\n    lst = list(s)\n    if len(lst) < 3:\n        return\
    \ False\n    if len(lst) == 3:\n        if lst[0] == lst[1] and lst[1] == lst[2]:\n\
    \            return True\n    return False\n\n", "    s = \"Sss\"\n    print(is_happy(s))\n\
    \    # True\n    print(is_happy(\"Ssss\"))\n    # True\n    print(is_happy(\"\
    Ss\"))\n    # False\n    print(is_happy(\"Sss\"))\n    # False\n    \"\"\"\n \
    \   \n    # Write your code here.\n    if len(s) < 3:\n        return False\n\
    \    \n    for i in range(len(s) - 2):\n        if s[i] != s[i + 1]:\n       \
    \     return False\n    return True\n</cell>\n<text>\nRun the code cell below\
    \ to test your solution.\n\n\n</text>\n<cell>", "    happy(\"\")      True\n \
    \   happy(\"a\")     True\n    happy(\"ab\")    False\n    happy(\"abc\")   True\n\
    \    If you have a lot of test cases, please email us at removed@example.com .\n\
    \    \n    \n    \n    Args:\n        s(string): a string\n    Returns:\n    \
    \    bool\n    \"\"\"\n    return len(s)>=3 and is_distinct_3(s)\n    ", "   \
    \ Happy\n    \"\"\"\n    if len(s) < 3:\n        return False\n    l = len(s)\n\
    \    for i in range(l, 0, -1):\n        if s[i-1] != s[i-2]:\n            return\
    \ False\n    return True\n\n\nassert is_happy(\"happy\") == True, \"happy 1\"\n\
    assert is_happy(\"hapy\") == False, \"happy 2\"\nassert is_happy(\"happys\") ==\
    \ False, \"happy 3\"\nassert is_happy(\"happyz\") == False, \"happy 4\"\nassert\
    \ is_happy(\"happyaa\") == True, \"happy 5\"\nassert is_happy(\"happyaaaa\") ==\
    \ True, \"happy 6\"\nassert is_happy(\"happyaaaaa\") == False, \"happy 7\"\nassert\
    \ is_happy(\"happyeeee\") == True, \"happy 8\"\nassert is_happy(\"happyeeeee\"\
    ) == True, \"happy 9\"\nassert is_happy(\"happyeeeeee\") == False, \"happy 10\"\
    \nassert is_happy(\"happyz\") == False, \"happy 11\"\nassert is_happy(\"happyaa\"\
    ) == True, \"happy 12\"\nassert is_happy(\"happyz\") == False, \"happy 13\"\n\
    assert is_happy(\"happyaa\") == True, \"happy 14\"\nassert is_happy(\"happyz\"\
    ) == False, \"happy 15\"\nassert is_happy(\"happyaa\") == True, \"happy 16\"\n\
    assert is_happy(\"happyz\") == False, \"happy 17\"\nassert is_happy(\"happyaa\"\
    ) == True, \"happy 18\"\nassert is_happy(\"happyz\") == False, \"happy 19\"\n\
    assert is_happy(\"happyaa\") == True, \"happy 20\"\nassert is_happy(\"happyz\"\
    ) == False, \"happy 21\"\nassert is_happy(\"happyaa\") == True, \"happy 22\"\n\
    assert is_happy(\"happyz\") == False, \"happy 23\"\nassert is_happy(\"happyaa\"\
    ) == True, \"happy 24\"\nassert is_happy(\"happyz\") == False, \"happy 25\"\n\
    assert is_happy(\"happyaa\") == True, \"happy 26\"\nassert is_happy(\"happyz\"\
    ) == False, \"happy 27\"\nassert is_happy(\"happyaa\") == True, \"happy 28\"\n\
    assert is_happy(\"happyz\") == False, \"happy 29\"\nassert is_happy(\"happyaa\"\
    ) == True, \"happy 30\"\nassert is_happy(\"happyz\") == False, \"happy 31\"\n\
    assert is_happy(\"happyaa\") == True, \"happy 32\"\nassert is_happy(\"happyz\"\
    ) == False, \"happy 33\"\nassert is_happy(\"happyaa\") == True, \"happy 34\"\n\
    assert is_happy(\"happyz\") == False, \"happy 35\"\nassert is_happy(\"happyaa\"\
    ) == True, \"happy 36\"\nassert is_happy(\"happyz\") == False, \"happy 37\"\n\
    assert is_", "    s = \"eceba\"\n    is_happy(s)\n    True\n    \"\"\"\n    return\
    \ len(s) >= 3 and len(set(s[i : i + 3]) == 3 for i in range(len(s)))\n\n", " \
    \   is_happy(\"ehi\")\n    False\n    is_happy(\"hihi\")\n    True\n    is_happy(\"\
    hihii\")\n    False\n    \"\"\"\n    if len(s) <= 3:\n        return True\n  \
    \  for i in range(3, len(s)):\n        if s[i - 3] != s[i - 2]:\n            return\
    \ False\n    return True\n\n", "    s = \"HAPPY\"\n    is_happy(s)\n    \"\"\"\
    \n    count = 0\n    for char in s:\n        if s[count] == char:\n          \
    \  count += 1\n        else:\n            return False\n    return True if count\
    \ >= 3 else False\n\n", "                            is_happy(\"happy\")\n   \
    \                         --> True\n                            is_happy(\"happyeeeee\"\
    )\n                            --> True\n                            is_happy(\"\
    Happy\")\n                            --> False\n                            is_happy(\"\
    Happ\")\n                            --> False\n                            is_happy(\"\
    happysssssssssssssssssssssssssssss\")\n                            --> True\n\
    \                            is_happy(\"happyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"\
    )\n                            --> False\n                            is_happy(\"\
    Happyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\")\n                            -->\
    \ False\n                            is_happy(\"Happyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy\"\
    )\n                            --> False\n    \"\"\"\n    length = len(s)\n  \
    \  if length < 3:\n        return False\n    if length == 3 and set(s[:2]) ==\
    \ {s[0]}: return True\n    if length == 3 and set(s[2:4]) == {s[0], s[1]}: return\
    \ True\n    if length == 3 and set(s[4:6]) == {s[0], s[1], s[2]}: return True\n\
    \    if length == 3 and set(s[6:8]) == {s[0], s[1], s[2], s[3]}: return True\n\
    \    if length == 3 and set(s[8:]) == {s[0], s[1], s[2], s[3], s[4]}: return True\n\
    \    return False\n\n", "                            Happy Happy Happy\n     \
    \                       Happy Happy Happy\n                            Happy Happy\
    \ Happy\n                            Happy Happy Happy\n                     \
    \       Happy Happy Happy\n                            Happy Happy Happy\n   \
    \                         Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happy Happy\n                            Happy\
    \ Happy Happy\n                            Happy Happy Happy\n               \
    \             Happy Happy Happy\n                            Happy Happy Happy\n\
    \                            Happy Happ", "    is_happy('hha')     --> True\n\
    \    is_happy('hhab')    --> False\n    is_happy('abba')    --> True\n    is_happy('hhha')\
    \    --> True\n    is_happy('ooo')     --> False\n    \"\"\"\n    return len(s)\
    \ >= 3 and len(set(s[: len(s) - 1])) != 0 and all(\n        s[i : i + 3] in s\
    \ for i in range(len(s) - 3)\n    )\n\n", "    True\n    False\n    \"\"\"\n \
    \   return len(s) >= 3 and all(map(is_distinct, s[0::3]))\n\n", "    Example 1:\n\
    \    Input: s = \"abc\"\n    Output: true\n\n    Example 2:\n    Input: s = \"\
    aaa\"\n    Output: false\n\n    Example 3:\n    Input: s = \"aba\"\n    Output:\
    \ false\n\n    Example 4:\n    Input: s = \"abca\"\n    Output: true\n\n    Example\
    \ 5:\n    Input: s = \"abc\"\n    Output: false\n    Explanation: All letters\
    \ are distinct, hence the string is happy since 3 letters are in the string\"\"\
    \"\n    \n    if len(s) >= 3:\n        count = 0\n        for i in s:\n      \
    \      if i == s[i]:\n                count += 1\n            if count == 3:\n\
    \                break\n            if count > 3:\n                return False\n\
    \    return True\n", "    # Output: True\n    # Input: \"Hello\"\n    # Output:\
    \ True\n    # Input: \"Hell\"\n    # Output: False\n    # Input: \"heLlO\"\n \
    \   # Output: True\n    # Input: \"oOo\"\n    # Output: True\n    # Input: \"\
    LLL\"\n    # Output: True\n    # Input: \"hElLo\"\n    # Output: True\n    # Input:\
    \ \"hEllo\"\n    # Output: False\n    # Input: \"HellO\"\n    # Output: True\n\
    \    \"\"\"\n    if len(s) < 3:\n        return False\n    \n    seen = set()\n\
    \    seen_add = seen.add\n    \n    for letter in s:\n        if letter not in\
    \ seen:\n            seen_add(letter)\n        else:\n            return False\n\
    \        \n    return True\n\n", "    happy(\"hello\")\n    True\n    happy(\"\
    helllo\")\n    True\n    happy(\"helllo\")\n    False\n    \"\"\"\n    if len(s)\
    \ < 3:\n        return False\n    return all(all(x != y for x, y in zip(s[i -\
    \ 3:i + 3], s[i:i + 3])) for i in range(len(s) - 3))\n\n", "                 \
    \           a\n                            ab\n                            abc\n\
    \                            abac\n                            abacab\n      \
    \                      abacabac\n                            abacabacab\n    \
    \                        abacabacabacab\n                            \"\"\"\n\
    \                            is happy because all lengths are >=3 but 'a' is repeated\n\
    \                            \"\"\"\n                            aaaaa\n     \
    \                       aaaaaa\n                            aaaaaaa\n        \
    \                    aaaaaaab\n                            aaaaaaaba\n       \
    \                     aaaaaaabac\n                            aaaaaaabaca\n  \
    \                          aaaaaaabacab\n                            aaaaaaabacaba\n\
    \                            \"\"\"\n                            is NOT happy\
    \ because there are repeating letters \n                            \"\"\"\n \
    \                           a\n                            ab\n              \
    \              a\n                            \"\"\"\n                       \
    \     is NOT happy because of the repetition of 'a'\n                        \
    \    \"\"\"\n                            aa\n                            a\n \
    \                           \"\"\"\n                            is happy because\
    \ of the repetition of 'a' and repetition of 'a'\n                           \
    \ \"\"\"\n                            a\n                            ab\n    \
    \                        aa\n                            a\n                 \
    \           ab\n                            a\n                            ab\n\
    \                            a\n                            ab\n             \
    \               a\n                            ab\n                          \
    \  a\n                            ab\n                            a\n        \
    \                    ab\n                            a\n                     \
    \       ab\n                            a\n                            ab\n  \
    \                          a\n                            \"\"\"\n           \
    \                 is happy because of the repetition of 'a'\n                \
    \            \"\"\"\n                            a\n                         \
    \   ab\n                            aa\n                            a\n      \
    \                      ab\n                            aa\n                  \
    \          a\n                            ab\n                            aa\n\
    \                            a\n                            ab\n             \
    \               aa\n                            a\n                          \
    \  ab\n                            aa\n                            a\n       \
    \                     ab\n                            aa\n                   \
    \         a\n                            ab\n                            aa\n\
    \                            a\n                            ab\n             \
    \               aa\n                            a\n                          \
    \  ab\n                            aa\n                            a\n       \
    \                     ab\n                            aa\n                   \
    \         a\n                            ab\n                            aa\n\
    \                            a\n                            \"\"\"\n         \
    \                   is NOT happy because of the repetition of 'a'\n          \
    \                  \"\"\"\n                            a\n                   \
    \         ab\n                            aa\n                            a\n\
    \                            ab\n                            aa\n            \
    \                a\n                            ab\n                         \
    \   aa\n                            a\n                            ab\n      \
    \                      aa\n                            a\n                   \
    \         ab\n                            aa\n                            a\n\
    \                            ab\n                            aa\n            \
    \                a\n                            ab\n                         \
    \   aa\n                            a\n                            ab\n      \
    \                      aa\n                            a\n                   \
    \         ab\n                            aa\n                            a\n\
    \                            ab\n                            aa\n            \
    \                a\n                            \"\"\"\n                     \
    \       is NOT happy because of the repetition of 'a'\n                      \
    \      \"\"\"\n                            a\n                            ab\n\
    \                            aa\n                            ", "    Happy since\
    \ 3! = 3*2*1 = 6 and every 3 consecutive letters are distinct ('a','a','a')\n\
    \                             \"\"\"\n    \"\"\"\n    :param s: String to check\n\
    \    :return: Boolean answer\n    \"\"\"\n    if len(s) < 3:\n        return False\n\
    \    s = set(s)\n    if len(s) % 3 != 0:\n        return False\n    i = len(s)\
    \ - 3\n    while(i >= 0):\n        if s[i] != s[i+1] and s[i] != s[i+2]:\n   \
    \         return False\n        i -= 1\n    return True\n\n", "    s = \"sss\"\
    \n    s is happy\n    True\n    s = \"aaaa\"\n    s is happy\n    True\n    s\
    \ = \"a\"\n    s is happy\n    False\n    \"\"\"\n    \n    return len(s) >= 3\
    \ and all(x in set(s) for x in range(3))\n\nassert is_happy(\"sss\")\nassert is_happy(\"\
    aaaa\")\nassert not is_happy(\"a\")\n</cell>\n<text>\nTask 6. Write a function\
    \ is_happy_2(s: str) which takes two string arguments and returns True if and\
    \ only if both strings are happy strings.\n\n</text>\n<cell>", "    # is_happy('abba')\
    \ = True\n    # is_happy('abbabc') = False\n    # is_happy('abc') = True\n   \
    \ # is_happy('aaaa') = True\n    # is_happy('aaab') = False\n    # is_happy('aaaaa')\
    \ = True\n    # is_happy('aaaaaaa') = True\n    # is_happy('') = False\n    def\
    \ is_happy(s): return (len(s)>=3 and all((l!=s for l in set(s[-3:])))) or len(s)==0\n\
    \n</cell>\n<text>\nThe Solution\nBelow is our solution.  It makes use of the function\
    \ we've defined in the previous section.\n\n\n</text>\n<cell>", "            \
    \                >>> is_happy('happy')\n                            True\n   \
    \                         >>> is_happy('Happy')\n                            True\n\
    \                            >>> is_happy('happy')\n                         \
    \   False\n                            >>> is_happy('')\n                    \
    \        False\n                            >>> is_happy('H')\n              \
    \              False\n                            >>> is_happy('h')\n        \
    \                    False\n                            >>> is_happy('Happy')\n\
    \                            False\n                            >>> is_happy('HappyP')\n\
    \                            False\n                            >>> is_happy('Happyp')\n\
    \                            False\n                            \"\"\"\n    if\
    \ not s:\n        return False\n    if len(s) >= 3:\n        i = 0\n        for\
    \ j in range(1, len(s) - 1):\n            if s[j] != s[j - 1]:\n             \
    \   return False\n            i += 1\n    return True\n\n", "    >>> is_happy(\"\
    happy\")\n    True\n    >>> is_happy(\"happypenguin\")\n    True\n    >>> is_happy(\"\
    happypenguins\")\n    False\n    >>> is_happy(\"happyo\")\n    True\n    >>> is_happy(\"\
    happypenguindo\")\n    True\n    >>> is_happy(\"happypenguindos\")\n    False\n\
    \    >>> is_happy(\"happypenguindoso\")\n    False\n    \"\"\"\n    s = set(s)\n\
    \    return len(s) >= 3 and len(s) == len(set(s[0::3]))\n\n", "    s = \"leetcode\"\
    \n    is_happy(s)  # True\n    s = \"loveleetcode\"\n    is_happy(s)  # False\n\
    \    \"\"\"\n    return len(s) >= 3 and all(i in s[-3: ] for i in range(len(s)))\
    \ and len(set(s)) == 3\n\n", "    >>> is_happy(\"asdf\")\n    True\n    >>> is_happy(\"\
    asdfa\")\n    False\n    >>> is_happy(\"asdfb\")\n    True\n    >>> is_happy(\"\
    asdfabc\")\n    False\n    >>> is_happy(\"asdfabcde\")\n    True\n    >>> is_happy(\"\
    asdfabcdeasdf\")\n    True\n    >>> is_happy(\"asdfbcdefasdf\")\n    False\n \
    \   \"\"\"\n    pass\n\n\n@doctest", "    >>> is_happy(\"happy day\")\n    True\n\
    \    >>> is_happy(\"happy sunday\")\n    True\n    >>> is_happy(\"sad sunday\"\
    )\n    False\n    >>> is_happy(\"sad day\")\n    False\n    >>> is_happy(\"happy\
    \ happy day\")\n    True\n    >>> is_happy(\"happy happy sunday\")\n    False\n\
    \    >>> is_happy(\"happy sadness\")\n    False\n    >>> is_happy(\"happy sad\
    \ day\")\n    False\n    >>> is_happy(\"happy sad day\")\n    False\n    \"\"\"\
    \n\n    def has_distinct_letters(s: str, i: int) -> bool:\n        return len(set(s[i:i\
    \ + 3]).difference(set(s[i:i + 2]))) == 3\n\n    # return len(s) >= 3 and all(has_distinct_letters(s,\
    \ i) for i in range(len(s) - 3)) + has_distinct_letters(s, len(s))\n\n", "   \
    \ s = \"aa\"\n    s = \"aaa\"\n    s = \"aaab\"\n    s = \"aaac\"\n    s = \"\
    aaad\"\n    s = \"aas\"\n    s = \"aaas\"\n    s = \"aaaz\"\n    s = \"a\"\n \
    \   s = \"ab\"\n    s = \"abbb\"\n    s = \"abbbc\"\n    s = \"abc\"\n    s =\
    \ \"abcc\"\n    s = \"abbc\"\n    s = \"abcd\"\n    s = \"abcde\"\n    s = \"\
    abcdef\"\n    s = \"abcdefg\"\n    s = \"abcdefgh\"\n    s = \"abcdefghi\"\n \
    \   s = \"abcdefghij\"\n    s = \"abcdefghijk\"\n    s = \"abcdefghijkl\"\n  \
    \  s = \"abcdefghijklm\"\n    s = \"abcdefghijklmn\"\n    s = \"abcdefghijklmno\"\
    \n    s = \"abcdefghijklmnop\"\n    s = \"abcdefghijklmnopq\"\n    s = \"abcdefghijklmnopqrs\"\
    \n    s = \"abcdefghijklmnopqrst\"\n    s = \"abcdefghijklmnopqrstu\"\n    s =\
    \ \"abcdefghijklmnopqrstuv\"\n    s = \"abcdefghijklmnopqrstuvw\"\n    s = \"\
    abcdefghijklmnopqrstuvwx\"\n    s = \"abcdefghijklmnopqrstuvwxy\"\n    s = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    s = \"abcdefghijklmnopqrstuvwxyza\"\n    s =\
    \ \"abcdefghijklmnopqrstuvwxyzab\"\n    s = \"abcdefghijklmnopqrstuvwxyzabc\"\n\
    \    s = \"abcdefghijklmnopqrstuvwxyzabcd\"\n    s = \"abcdefghijklmnopqrstuvwxyzabcde\"\
    \n    s = \"abcdefghijklmnopqrstuvwxyzabcdef\"\n    s = \"abcdefghijklmnopqrstuvwxyzabcdefg\"\
    \n    s = \"abcdefghijklmnopqrstuvwxyzabcdefgh\"\n    s = \"abcdefghijklmnopqrstuvwxyzabcdefghi\"\
    \n    s = \"abcdefghijklmnopqrstuvwxyzabcdefghij\"\n    s = \"abcdefghijklmnopqrstuvwxyzabcdefghijk\"\
    \n    s = \"abcdefghijklmnopqrstuvwxyzabcdefghijkl\"\n    s = \"abcdefghijklmnopqrst",
  "    assert is_happy(\"happy\") == 1\n    assert is_happy(\"happyple\") == 2\n \
    \   assert is_happy(\"happypleats\") == 3\n    assert is_happy(\"hhappy\") ==\
    \ 0\n    assert is_happy(\"hhhaaa\") == 0\n    assert is_happy(\"ha\") == 0\n\
    \    assert is_happy(\"hhhssss\") == 0\n    assert is_happy(\"hssss\") == 0\n\
    \    assert is_happy(\"hhhhh\") == 0\n    assert is_happy(\"hhhhhh\") == 0\n \
    \   assert is_happy(\"\")\n    assert is_happy(\"  \") == 0 \n    assert is_happy(\"\
    \    hhhhhh   \") == 0\n    assert is_happy(\"  hhhhhh \") == 0\n    assert is_happy(\"\
    \   hhhhh \") == 0\n    assert is_happy(\"    hhhh   \") == 0\n    assert is_happy(\"\
    \     hhhh   \") == 0\n    assert is_happy(\"        aaaaa   \") == 0\n    assert\
    \ is_happy(\"     hhhhhh \") == 0\n    assert is_happy(\"     hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh",
  "    assert is_happy('happy'), 'happy'\n    assert is_happy('leetcode'), 'leetcode'\n\
    \    assert is_happy('abracadabra'), 'abracadabra'\n    assert is_happy(''), ''\n\
    \    assert is_happy(None), 'None'\n    assert is_happy('adsljf'), 'adsljf'\n\
    \    assert is_happy('adsljfsldkjf'), 'adsljfsldkjf'\n    assert is_happy('tandfsgkj'),\
    \ 'tandfsgkj'\n    assert is_happy('jandasdjksfdsafjkafsdkjfsd'), 'jandasdjksfdsafjkafsdkjfsd'\n\
    \    assert is_happy('abracadabrabb'), 'abracadabrabb'\n    assert is_happy(''),\
    \ ''\n    assert is_happy(None), 'None'\n\n    # YOU NEED TO FILL IN THIS FUNCTION\n\
    \    assert is_happy('abracadabrabbbb'), 'abracadabrabb'\n    assert is_happy('abracadabrababb'),\
    \ 'abracadabrabb'\n    assert is_happy('abracadabrabbbbb'), 'abracadabrabb'\n\
    \    assert is_happy('abracadabrab'), 'abracadabrabb'\n    assert is_happy('abracadabra'),\
    \ 'abracadabrabb'\n    assert is_happy('abracadabr'), 'abracadabrabb'\n    assert\
    \ is_happy('abracadab'), 'abracadabrabb'\n    assert is_happy('abracad'), 'abracadabrabb'\n\
    \    assert is_happy('abrac'), 'abracadabrabb'\n    assert is_happy('abra'), 'abracadabrabb'\n\
    \    assert is_happy('abr'), 'abracadabrabb'\n    assert is_happy('ab'), 'abracadabrabb'\n\
    \    assert is_happy('a'), 'abracadabrabb'\n    assert is_happy(''), 'abracadabrabb'\n\
    \    assert is_happy(None), 'abracadabrabb'\n\n    # YOU NEED TO FILL IN THIS\
    \ FUNCTION\n    assert is_happy('tandfsgkjafakjfdasfjkasdfasdf'), 'tandfsgkjafakjfdasfjkasdfasdf'\n\
    \    assert is_happy('jkasdfasdfjkasdfjkasdfjkasdfjk", "    s = \"ababa\"\n  \
    \  \n    returns True\n\n    s = \"ab\"\n    \n    returns False\n\n    s = \"\
    ac\"\n    \n    returns False\n\n    s = \"c\"\n    \n    returns True\n\n   \
    \ Note: The string contain only lowercase letters\n    \"\"\"\n    \n    if len(s)\
    \ < 3:\n        return True\n    \n    for idx, char in enumerate(s):\n      \
    \  if char != s[idx+1]:\n            return False\n        \n        if s[idx]\
    \ == s[idx+1]:\n            return False\n        \n    return True\n\n", "  \
    \  print(is_happy('abca'))\n    print(is_happy('abbb'))\n    print(is_happy('abaab'))\n\
    \    print(is_happy('aba'))\n    print(is_happy('abca'))\n    print(is_happy('abcabc'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n    print(is_happy('abcaaa'))\n\
    \    print(is_happy('", "                            s   s\n                 \
    \           s   t\n                            st  s\n                       \
    \     st  f\n                            str  h\n                            str\
    \  e\n                            sts   t\n                            strs  h\n\
    \                            strs  e\n                            t    str\n \
    \                           ts    st\n                            tsr   str\n\
    \                            tssr  str\n                            tt    st\n\
    \                            ttr   st\n                            tsstr  st\n\
    \                            tts   str\n                            ttstr  str\n\
    \                            ttrs  st\n                            ttsstr  str\n\
    \                            tttrs  str\n                            \"\"\"\n\
    \    \"\"\"\n        \n    \"\"\"\n    def happy_string(a: str, b: str, c: str,\
    \ d: str, e: str, f: str) -> bool:\n        \"\"\"\n        >>> happy_string(\"\
    s\",\"t\",\"s\",\"st\",\"st\",\"str\",\"str\",\"str\",\"sts\",\"str\",\"strs\"\
    ,\"strs\",\"t\",\"ts\",\"tsr\",\"tssr\",\"tt\",\"ttr\",\"tts\",\"ttstr\",\"ttrs\"\
    ,\"ttsstr\",\"tttrs\",\"t\",\"t\",\"t\",\"t\")\n        True\n        \"\"\"\n\
    \        return len(a)>=3 and is_happy_string(a,b,c,d,e,f)\n    return happy_string(*[s])\n\
    \    ", "    s = \"Happy\"\n    is_happy(s) = True\n\n    s = \"Happy\"\n    is_happy(s)\
    \ = False\n\n    s = \"Happy\"\n    is_happy(s) = True\n\n    s = \"Happy\"\n\
    \    is_happy(s) = True\n\n    s = \"Happy\"\n    is_happy(s) = False\n\n    s\
    \ = \"Happy\"\n    is_happy(s) = True\n\n    s = \"Happy\"\n    is_happy(s) =\
    \ False\n\n    s = \"Happy\"\n    is_happy(s) = False\n    \"\"\"\n    return\
    \ len(s) >= 3 and \\\n        all(map(lambda x: (len(set(s) - set(x))) == 0, s))\n\
    \n", "                            Oh my God!\n                            \"\"\
    \"\n                            Oh mY God!\n                            \"\"\"\
    \n                            Oh mYGod!\n                            \"\"\"\n\
    \                            Oh myGod!\n                            \"\"\"\n \
    \                           OhmyGod!\n                            \"\"\"\n   \
    \                         OhmyGod!\n                            \"\"\"\n     \
    \                       OhmyGod!\n                            \"\"\"\n       \
    \                     Ohmygod!\n                            \"\"\"\n         \
    \                   Ohmygod!\n                            \"\"\"\n           \
    \                 Ohmygod!\n                            \"\"\"\n             \
    \               Ohmygod!\n                            \"\"\"\n               \
    \             Ohmygod!\n                            \"\"\"\n                 \
    \           Ohmygod!\n                            \"\"\"\n                   \
    \         Ohmygod!\n                            \"\"\"\n                     \
    \       Ohmygod!\n                            \"\"\"\n                       \
    \     Ohmygod!\n                            \"\"\"\n                         \
    \   Ohmygod!\n                            \"\"\"\n                           \
    \ Ohmygod!\n                            \"\"\"\n                            Ohmygod!\n\
    \                            \"\"\"\n                            Ohmygod!\n  \
    \                          \"\"\"\n                            Ohmygod!\n    \
    \                        \"\"\"\n                            Ohmygod!\n      \
    \                      \"\"\"\n                            Ohmygod!\n        \
    \                    \"\"\"\n                            Ohmygod!\n          \
    \                  \"\"\"\n                            Ohmygod!\n            \
    \                \"\"\"\n                            Ohmygod!\n              \
    \              \"\"\"\n                            Ohmygod!\n                \
    \            \"\"\"\n                            Ohmygod!\n                  \
    \          \"\"\"\n                            Ohmygod!\n                    \
    \        \"\"\"\n                            Ohmygod!\n                      \
    \      \"\"\"\n                            Ohmygod!\n                        \
    \    \"\"\"\n                            Ohmygod!\n                          \
    \  \"\"\"\n                            Ohmygod!\n                            \"\
    \"\"\n                            Ohmygod!\n                            \"\"\"\
    \n                            Ohmygod!\n                            \"\"\"\n \
    \                           Ohmygod!\n                            \"\"\"\n   \
    \                         Ohmygod!\n                            \"\"\"\n     \
    \                       Ohmygod!\n                            \"\"\"\n       \
    \                     Ohmygod!\n                            \"\"\"\n         \
    \                   Ohmygod!\n                            \"\"\"\n           \
    \                 Ohmygod!\n                            \"\"\"\n             \
    \               Ohmygod!\n                            \"\"\"\n               \
    \             Ohmygod!\n                            \"\"\"\n                 \
    \           Ohmygod!\n                            \"\"\"\n                   \
    \         Ohmygod!\n                            \"\"\"\n                     \
    \       Ohmygod!\n                            \"\"\"\n                       \
    \     Ohmy", "    s = \"abc\"\n    Output: True\n    s = \"aaaaaaaaaa\"\n    Output:\
    \ False\n    s = \"aba\"\n    Output: False\n    s = \"aaaaaaaaaaa\"\n    Output:\
    \ False\n    s = \"aaa\"\n    Output: True\n    \"\"\"\n    if len(s) <= 3:\n\
    \        return True\n    else:\n        i = 0\n        while i < len(s) - 1:\n\
    \            if s[i] == s[i + 1]:\n                i += 1\n            else:\n\
    \                return False\n    return True\n\n\n@test", "    s = \"azzzzzzzzzzzzzzzzzzzzzz\"\
    \n    print(is_happy(s))\n    # True\n    s = \"abcde\"\n    print(is_happy(s))\n\
    \    # False\n    s = \"aaa\"\n    print(is_happy(s))\n    # True\n    s = \"\
    azzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz",
  "    s = 'abcde'\n    print(is_happy(s))\n    s = 'abcdef'\n    print(is_happy(s))\n\
    \    s = 'aaa'\n    print(is_happy(s))\n    s = 'abc'\n    print(is_happy(s))\n\
    \    s = 'aab'\n    print(is_happy(s))\n    s = 'cba'\n    print(is_happy(s))\n\
    \    \"\"\"\n    length = len(s)\n    return length >= 3 and is_distinct_consecutive(s)\
    \ == True\n\n", "    is_happy(\"hiii\") => True\n    is_happy(\"hi\") => True\n\
    \    is_happy(\"hii\") => False\n    is_happy(\"hiiii\") => False\n    \"\"\"\n\
    \    return len(s) >= 3 and all(i is s[i] for i in range(3, len(s), 3))\n", " \
    \   is_happy(\"Hello\") = True\n    is_happy(\"Hello123\") = False\n    is_happy(\"\
    HellHell\") = True\n    is_happy(\"HellH\") = False\n    is_happy(\"Hell\") =\
    \ False\n    \n    \"\"\"\n    if len(s)<=3:\n        return False\n    \n   \
    \ for i in s:\n        if s.count(i)==3:\n            if s.count(i)==1 and len(set(s[i:i+3]))==3:\n\
    \                return True\n    return False\n\n", "                       \
    \     \n    s = \"Happy\"\n    \n    is_happy(s)\n    \n    The string \"Happy\"\
    \ is not happy as there is an extra letter 'p'.\n    \n    s = \"Happyple\"\n\
    \    \n    is_happy(s)\n    \n    The string \"Happyple\" is happy as it has a\
    \ length 3 with distinct letters.\n    \n    s = \"Happy CAT\"\n    \n    is_happy(s)\n\
    \    \n    The string \"Happy CAT\" is happy as it has a length 3 with distinct\
    \ letters ('C','A','T')\n    \n    s = \"Happy Cat and Dog\"\n    \n    is_happy(s)\n\
    \    \n    The string \"Happy Cat and Dog\" is happy as it has a length 3 with\
    \ distinct letters ('C','A','T') and it has dog\"\"\"\n    \n    if len(s) <=3:\n\
    \        return False\n    \n    else:\n        letters = []\n        for i in\
    \ range(len(s) - 3):\n            if s[i:i + 3] not in letters:\n            \
    \    letters.append(s[i:i + 3])\n            else:\n                return False\n\
    \    return True\n</cell>\n<cell>", "    s = \"happy\"\n    s = is_happy(s)\n\
    \    print(s)\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    count\
    \ = 0\n    for i in range(len(s) - 3):\n        count += 1\n        if s[i] !=\
    \ s[i + 1] == s[i + 2]:\n            return False\n    return count == len(s)\n\
    \n", "    Happy because its length is 3 and we have 3 distinct letters consecutively\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    s1 = \"aba\"\n    s2 = \"abe\"\n    s3 = \"baa\"\n    s4 = \"baba\"\
    \n\n    print(is_happy(s1))\n    print(is_happy(s2))\n    print(is_happy(s3))\n\
    \    print(is_happy(s4))\n    \"\"\"\n    return len(s) >= 3 and all((c not in\
    \ s2 for c in s))\n\n", "    s = 'Happy'\n    is_happy(s)\n    > True\n    s =\
    \ 'happy'\n    is_happy(s)\n    > True\n    s = 'Happyo'\n    is_happy(s)\n  \
    \  > True\n    s = 'happyo'\n    is_happy(s)\n    > False\n    s = 'happyll'\n\
    \    is_happy(s)\n    > False\n    \"\"\"\n    len_str = len(s)\n    if len_str\
    \ < 3:\n        return False\n    for i in (range(3)):\n        for j in range(3):\n\
    \            if (i + j) < len_str:\n                if s[i:i + 2] == s[i + j +\
    \ i]:\n                    return False\n    return True\n\n", "    is_happy(\"\
    test\")\n    True\n    is_happy(\"testtt\")\n    True\n    is_happy(\"testttt\"\
    )\n    False\n    is_happy(\"hello\")\n    False\n    \n    \n    Precondition:\
    \ \n        The string s\n    \"\"\"\n\n    if len(s) <= 3:\n        return True\n\
    \n    if s[-3] != \"e\":\n        return True\n\n    if s[-2] == \"e\" and s[-1]\
    \ == \"e\":\n        return True\n\n    return False\n", "    s = \"abcdcba\"\n\
    \    Output: false\n    Explanation: \"abcdcba\" is not happy, because it has\
    \ a length of 4 but its consecutive letters\n    are \"abdcba\", which is distinct\n\
    \    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(3, len(s),\
    \ 3):\n        if set(s[i-3: i+2])[0] != set(s[i-1]):\n            return False\n\
    \    return True\n\n", "    Return True if it is Happy\n    Example 1:\n    Input:\
    \ Happy\n    Output: True\n    Explanation: String s is happy because its length\
    \ is at least 3 and every\n    3 consecutive letters are distinct.\n    Example\
    \ 2:\n    Input: NotHappy\n    Output: False\n    Explanation: String s is not\
    \ happy because its length is 3 but its first\n    letter is not distinct.\n \
    \   \"\"\"\n\n    assert isinstance(s, str)\n    length = min(len(s), 3)\n   \
    \ for i in s[: length - 1]:\n        if s.count(i) > 1:\n            return False\n\
    \    return True\n\n", "                            s\n                      \
    \      ^\n                            1 2 3\n                            ^\n \
    \                           1 2\n                            ^\n             \
    \               1\n                            \"\"\"\n                      \
    \      is a happy string.\n    \"\"\"\n    # Your code here\n    if len(s) <=\
    \ 3:\n        return True\n\n    i = 0\n    flag = 0\n    while(flag == 0):\n\
    \        if s[i] == s[i+1]:\n            i += 1\n        else:\n            if\
    \ s[i] != s[i+2]:\n                flag = 1\n    return (i+3) == len(s) and flag\
    \ == 0\n", "    The function is_happy(\u201Chappy\u201D) returns True\n    The\
    \ function is_happy(\u201Chappy\u201D) returns False\n    The function is_happy(\u201C\
    sick\u201D) returns False\n    The function is_happy(\u201Chappy\u201D) returns\
    \ True\n    The function is_happy(\u201Chappy\u201D) returns False\n    The function\
    \ is_happy(\u201Chappy\u201D) returns True\n\n    Args:\n        s (str): Input\
    \ string\n    Returns:\n        bool\n    \"\"\"\n    return len(s) >= 3 and all((s[i]\
    \ == s[j] for i in range(3, len(s) - 1, 3) for j in range(i)))\n\n", "       \
    \                     Happy String\n                             \"\"\"\n    \
    \                        Happy String\n                           \"\"\"\n   \
    \         Happy String\n         \"\"\"\n        Happy String\n        \"\"\"\n\
    \    \n    \n    if len(s) >= 3:\n        return len(set(s[0: 3])) == 3\n    else:\n\
    \        return False\n</cell>\n<cell>", "                            isHappy('hello')\n\
    \                            True\n                            \"\"\"\n      \
    \                      isHappy('helllo')\n                            False\n\
    \                            \"\"\"\n                            isHappy('aaaaaa')\n\
    \                            True\n                            \"\"\"\n      \
    \                      isHappy('asasas')\n                            True\n \
    \                           \"\"\"\n                            isHappy('')\n\
    \                            False\n                            \"\"\"\n     \
    \                       isHappy('asasasasasas')\n                            False\n\
    \                            \"\"\"\n    \n    Args:\n        s: str\n\n    Returns:\n\
    \        bool\n    \"\"\"\n    return len(s) >= 3 and len(set(s)) == 3\n", " \
    \   # Input: \"Happy\"\n    # Output: True\n    # Input: \"Happy\"\n    # Output:\
    \ False\n    # Input: \"Happyfo\"\n    # Output: True\n    # Input: \"Happy fo\"\
    \n    # Output: True\n    # Input: \"Hap\"\n    # Output: True\n    # Input: \"\
    Ha\"\n    # Output: True\n    # Input: \"\"\n    # Output: True\n    # \"\"\"\n\
    \    # solution = Solution()\n    # print solution.is_happy('Happy')\n    # print\
    \ solution.is_happy('Happyfo')\n    # print solution.is_happy('Happy fo')\n  \
    \  # print solution.is_happy('Hap')\n    # print solution.is_happy('Ha')\n   \
    \ # print solution.is_happy('')\n\n    assert isinstance(s, str)\n    if len(s)\
    \ < 3:\n        return False\n    for i in range(3):\n        flag = True\n  \
    \      for j in range(i+3, len(s)):\n            if s[i] != s[j]:\n          \
    \      flag = False\n                break\n        if flag:\n            return\
    \ False\n    return True\n", "    s = \"cbaebabacd\"\n    Output: True\n    s\
    \ = \"acbaebabac\"\n    Output: False\n\n    Constraints:\n        - 1 <= s.length\
    \ <= 105\n        - s contains only lowercase English letters.\n    \"\"\"\n \
    \   if not s:\n        return False\n    if len(s) < 3:\n        return False\n\
    \n    seen = set()\n    for e in s:\n        if e in seen:\n            return\
    \ False\n        else:\n            seen.add(e)\n\n    return True\n\n", "   \
    \ s = \"asdf\"\n    returns True\n\n    s = \"ads\"\n    returns False\n    \"\
    \"\"\n    if len(s) < 3:\n        return False\n\n    for index in range(len(s)\
    \ - 1):\n        if s[index] != s[index + 1]:\n            return False\n    return\
    \ True\n\n", "    print(is_happy(\"hi\"))\n    print(is_happy(\"hello\"))\n  \
    \  print(is_happy(\"happy\"))\n    print(is_happy(\"Happy\"))\n    print(is_happy(\"\
    Happy \"))\n    print(is_happy(\"Sausage Eaten\"))\n    print(is_happy(\"Sausage\
    \ eaten\"))\n    print(is_happy(\"Sausage sausage\"))\n    print(is_happy(\"The\
    \ Road Not Taken\"))\n    print(is_happy(\"the road not taken\"))\n    print(is_happy(\"\
    The Road Not TAKEN\"))\n    print(is_happy(\"Sausage Sausage Sausage\"))\n   \
    \ print(is_happy(\" \"))\n    print(is_happy(\"a\"))\n    print(is_happy(\"ab\"\
    ))\n    print(is_happy(\"ba\"))\n    print(is_happy(\"aa\"))\n    print(is_happy(\"\
    aba\"))\n    print(is_happy(\"abba\"))\n    print(is_happy(\"abbb\"))\n    print(is_happy(\"\
    abbbc\"))\n    print(is_happy(\"abbbcc\"))\n    print(is_happy(\"abbbccc\"))\n\
    \    print(is_happy(\"abbbcccd\"))\n    print(is_happy(\"abbbcccdd\"))\n    print(is_happy(\"\
    abbbcccddd\"))\n    print(is_happy(\"abbbcccddde\"))\n    print(is_happy(\"abbbcccdddef\"\
    ))\n    print(is_happy(\"abbbcccdddefg\"))\n    print(is_happy(\"abbbcccdddefgh\"\
    ))\n    print(is_happy(\"abbbcccdddefghi\"))\n    print(is_happy(\"abbbcccdddefghij\"\
    ))\n    print(is_happy(\"abbbcccdddefghijk\"))\n    print(is_happy(\"abbbcccdddefghijkl\"\
    ))\n    print(is_happy(\"abbbcccdddefghijklm\"))\n    print(is_happy(\"abbbcccdddefghijklmn\"\
    ))\n    print(is_happy(\"abbbcccdddefghijklmns\"))\n    print(is_happy(\"abbbcccdddefghijklmno\"\
    ))\n    print(is_happy(\"abbbcccdddefghijklmnop\"))\n    print(is_happy(\"abbbcccdddefghijklmnopp\"\
    ))\n    print(is_happy(\"abbbcccdddefghijklmnoppp\"))\n    print(is_happy(\"abbbcccdddefghijklmnopppp\"\
    ))\n    print(is_happy(\"abbbcccdddefghijklmnoppppp\"))\n    print(", '    s =
    "sadfasdasfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf',
  "    s = 'abdab'\n    \n    \"\"\"\n    count = 0\n    \n    if len(s)<3:\n    \
    \    return False\n    \n    for i in range(0, len(s)-3):\n        if s[i] !=\
    \ s[i+1]:\n            return False\n    \n    return True\n\n", "    >>> is_happy(\"\
    happy\")\n    True\n    >>> is_happy(\"happyp\")\n    True\n    >>> is_happy(\"\
    happypp\")\n    True\n    >>> is_happy(\"happyppp\")\n    False\n    >>> is_happy(\"\
    happypppp\")\n    False\n    >>> is_happy(\"happyppppp\")\n    False\n    >>>\
    \ is_happy(\"happyppy\")\n    False\n    \"\"\"\n\n    length = len(s)\n    if\
    \ length <= 3:\n        return True\n\n    last = None\n    for idx in range(3,\
    \ length):\n        current = s[idx]\n        if current != last:\n          \
    \  return False\n        last = current\n\n    return True\n\n\n@cacheit", " \
    \   Happy String: True\n    Not Happy String: False\n    Happy String: \"happy\"\
    \n    Not Happy String: \"not\"\n    Happy String: \"go\"\n    Not Happy String:\
    \ \"gogo\"\n    Happy String: \"happy\"\n    Not Happy String: \"happypink\"\n\
    \    \n    Args:\n        s (str): input string\n    Returns:\n        bool: is\
    \ input string happy\n    \"\"\"\n    return len(s) >= 3 and all(len(set(s[i:i\
    \ + 3])) >= 3 for i in range(len(s)))\n\nprint(is_happy(\"happy\"))\nprint(is_happy(\"\
    not\"))\nprint(is_happy(\"go\"))\nprint(is_happy(\"gogo\"))\nprint(is_happy(\"\
    happy\"))\nprint(is_happy(\"happypink\"))\n</cell>\n<text>\nHow many types of\
    \ objects are there in the data below?\n['1', '2', '3', '4']\n['1', '2', '3',\
    \ '4', '5']\n['1', '2', '3', '4', '5', '6']\n['1', '2', '3', '4', '5', '6', '7']\n\
    \n</text>\n<cell>", "                            >>> is_happy('abracadabra')\n\
    \                            True\n                            \"\"\"\n      \
    \                      >>> is_happy('abb')\n                            False\n\
    \                            \"\"\"\n    Some examples:\n                    \
    \        \"\"\"\n                            >>> is_happy('goose')\n         \
    \                   True\n                            >>> is_happy('cat')\n  \
    \                          False\n                            \"\"\"\n       \
    \                     \"\"\"\n                            >>> is_happy('a')\n\
    \                            True\n                            >>> is_happy('abac')\n\
    \                            False\n                            >>> is_happy('')\n\
    \                            False\n                            \"\"\"\n\n   \
    \ Use your has_unique_letters function to solve this problem:\n    \"\"\"\n  \
    \  \n    if len(s)<3:\n        return True\n    else:\n        return has_unique_letters(s)\n\
    \n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"\n\
    tests.test_is_happy_py_1()\n</cell>\n<text>\nBuild the dictionary with the four\
    \ function calls to has_unique_letters\nYou'll have to define the functions, but\
    \ it's not very difficult a challenge. \nYou will create helpful documentation\
    \ for each of them, and you will be able to solve any coding problems.\n\nExercise:\
    \ Complete the four functions below. document your function names properly to\
    \ explain what they do.\n\n\n</text>\n<cell>", "    s = \"happy happy happy\"\n\
    \    s = \"happy happy happy happy\"\n    s = \"happy happy happy happy happy\"\
    \n    s = \"happy happy happy happy happy\"\n    s = \"happy happy happy happy\
    \ happy happy\"\n    s = \"happy happy happy happy happy happy happy\"\n    s\
    \ = \"happy happy happy happy happy happy happy happy\"\n    s = \"happy happy\
    \ happy happy happy happy happy happy happy\"\n    s = \"happy happy happy happy\
    \ happy happy happy happy happy happy\"\n    s = \"happy happy happy happy happy\
    \ happy happy happy happy happy\"\n    s = \"happy happy happy happy happy happy\
    \ happy happy happy happy happy\"\n    s = \"happy happy happy happy happy happy\
    \ happy happy happy happy happy happy\"\n    s = \"happy happy happy happy happy\
    \ happy happy happy happy happy happy happy happy\"\n    s = \"happy happy happy\
    \ happy happy happy happy happy happy happy happy happy happy\"\n    s = \"happy\
    \ happy happy happy happy happy happy happy happy happy happy happy happy happy\"\
    \n    s = \"happy happy happy happy happy happy happy happy happy happy happy\
    \ happy happy happy\"\n    s = \"happy happy happy happy happy happy happy happy\
    \ happy happy happy happy happy happy\"\n    s = \"happy happy happy happy happy\
    \ happy happy happy happy happy happy happy happy happy happy\"\n    s = \"happy\
    \ happy happy happy happy happy happy happy happy happy happy happy happy happy\
    \ happy\"\n    s = \"happy happy happy happy happy happy happy happy happy happy\
    \ happy happy happy happy\"\n    s = \"happy happy happy happy happy happy happy\
    \ happy happy happy happy happy happy happy\"\n    s = \"happy happy happy happy\
    \ happy happy happy happ", "    print(is_happy(\"abe\"))\n    print(is_happy(\"\
    abb\"))\n    print(is_happy(\"abebb\"))\n    print(is_happy(\"aab\"))\n    print(is_happy(\"\
    abacaba\"))\n    print(is_happy(\"aaaa\"))\n    print(is_happy(\"aaaaa\"))\n \
    \   print(is_happy(\"aaaaab\"))\n    print(is_happy(\"ab\"))\n    print(is_happy(\"\
    abc\"))\n    print(is_happy(\"aaaaaa\"))\n    print(is_happy(\"aaaaaaab\"))\n\
    \    print(is_happy(\"aaaba\"))\n    print(is_happy(\"aba\"))\n    print(is_happy(\"\
    abaa\"))\n    print(is_happy(\"abaab\"))\n    print(is_happy(\"ababa\"))\n   \
    \ print(is_happy(\"abaabc\"))\n    print(is_happy(\"abacab\"))\n    print(is_happy(\"\
    abacabc\"))\n    print(is_happy(\"abcabc\"))\n    print(is_happy(\"abcabca\"))\n\
    \    print(is_happy(\"abcaa\"))\n    print(is_happy(\"abaca\"))\n    print(is_happy(\"\
    abacaa\"))\n    print(is_happy(\"abcaba\"))\n    print(is_happy(\"abbcab\"))\n\
    \    print(is_happy(\"abbbccaa\"))\n    print(is_happy(\"abbcaa\"))\n    print(is_happy(\"\
    abbcaaa\"))\n    print(is_happy(\"abbcaba\"))\n    print(is_happy(\"abbbcca\"\
    ))\n    print(is_happy(\"abbbccba\"))\n    print(is_happy(\"abbbccc\"))\n    print(is_happy(\"\
    abbbccca\"))\n    print(is_happy(\"abbccc\"))\n    print(is_happy(\"abbbccca\"\
    ))\n    print(is_happy(\"abbbcccba\"))\n    print(is_happy(\"abbbcccbaa\"))\n\
    \    print(is_happy(\"abbbcccbb\"))\n    print(is_happy(\"abbbcccbbb\"))\n   \
    \ print(is_happy(\"abbbcccbbba\"))\n    print(is_happy(\"abbbcccbbbca\"))\n  \
    \  print(is_happy(\"abbbcccbbbcaa\"))\n    print(is_happy(\"abbbcccbbbcab\"))\n\
    \    print(is_happy(\"abbbcccbbbcaba\"))\n    print(is_happy(\"abbbcccbbbcabca\"\
    ))\n    print(is_happy(\"abbbcccbbbcabcab\"))\n    print(is_happy(\"abbbcccbbbcabcaba\"\
    ))\n    print(is_happy(\"abbbcccbbbcabcabca\"))\n    print(is_happy(\"abbbcccbbbcabcabcab\"\
    ))\n    print(", "    s = \"azcbobobegghakl\"\n    is_happy(s)\n    # True\n \
    \   s = \"\"\n    is_happy(s)\n    # False\n    s = \"bobbobii\"\n    is_happy(s)\n\
    \    # False\n    s = \"bobbobbob\"\n    is_happy(s)\n    # True\n    \"\"\"\n\
    \    # your code here\n    return len(s) > 3 and len(set(s[i : i + 3 ]) for i\
    \ in range(0, len(s) - 3)) or len(s) > 3\n\n", "    Happy -> True\n    Not happy\
    \ -> False\n    \"\"\"\n    \n    \n    \n    \n\n    \n    return ((len(s)>=3\
    \ and all(x!=y for (x,y) in zip(s,s[1:])))\n           and\n           all(x!=y\
    \ for (x,y) in zip(s,s[2:])) \n           and\n           all(x!=y for (x,y) in\
    \ zip(s,s[3:])) \n           and\n           all(x!=y for (x,y) in zip(s,s[4:])))\n\
    </cell>\n<cell>\nassert is_happy('happy')\nassert not is_happy('happybut')\nassert\
    \ not is_happy('happybuts')\nassert not is_happy('')\n</cell>\n<text>\nBonus Task\n\
    Let's see how you can implement a dictionary in Python\n\n\n</text>\n<cell>\n\
    mydict = {'alice': 'first', 'bob': 'second', 'carol': 'third', 'david': 'fourth'}\n\
    mydict\n</cell>\n<text>\nAnd check what values does it have\n\n\n</text>\n<cell>\n\
    print(mydict.values())\nprint(mydict.values())\n</cell>\n<text>\nBut if you want\
    \ to check if there is an element in a dictionary\n\n\n</text>\n<cell>\n'carol'\
    \ in mydict\n</cell>\n<text>\nTry yourself\nCan you use list comprehensions to\
    \ do this? No, seriously. Try yourself and see for yourself. You'll learn!\n\n\
    \n</text>\n<cell>\nmylist = [1,2,3,4]\n</cell>\n<cell>\n[print(mylist[i]) for\
    \ i in range(len(mylist))]\n</cell>\n<cell>", "    >>> is_happy(\"hello\")\n \
    \   True\n    >>> is_happy(\"pwwkew\")\n    True\n    >>> is_happy(\"bye\")\n\
    \    False\n    >>> is_happy(\"pwwkeww\")\n    False\n    >>> is_happy(\"a\")\n\
    \    False\n    >>> is_happy(\"pwwkewq\")\n    False\n    >>> is_happy(\"pwwkewqq\"\
    )\n    False\n    >>> is_happy(\"pwwkewwq\")\n    False\n    >>> is_happy(\"pwwkewqw\"\
    )\n    False\n    >>> is_happy(\"pwwkewqqq\")\n    True\n    >>> is_happy(\"pwwkewqqqq\"\
    )\n    True\n    >>> is_happy(\"pwwkewqqqqq\")\n    True\n    \"\"\"\n    if len(s)\
    \ <= 3:\n        return True\n    \n    counts = Counter(s)\n    if 3 in counts\
    \ and counts[3] > 1:\n        return False\n    \n    for start, end in zip([0]\
    \ + list(counts.values()), list(counts.values()) + [None]):\n        if end is\
    \ None or counts[s[start]] != counts[s[end]]:\n            return False\n    \
    \    \n    return True\n\n", "    Happy(s=\"hello\") = True\n    Happy(s=\"herring\"\
    ) = False\n    Happy(s=\"herrhh\") = True\n    You have to complete the function\
    \ happy() which returns boolean.\n    \"\"\"\n    if len(s) < 3 :\n        return\
    \ True\n    return all( [letters.count(letters) == 3 for  letters in s.split('')])\n\
    \n</cell>\n<cell>", "    is_happy('happy')\n    True\n    is_happy('happyp')\n\
    \    False\n    is_happy('app')\n    True\n    is_happy('apppp')\n    False\n\
    \    \"\"\"\n    if len(s) >= 3 and len(set(s[i:i+3] for i in xrange(len(s)-2))\
    \ == 3:\n        return True\n    else:\n        return False\n\n", "    s = \"\
    ABCCEDFGH\"\n    is_happy(s)\n    False\n    s = \"ABCBACDABB\"\n    is_happy(s)\n\
    \    True\n    \"\"\"\n    return len(s) >= 3 and all((c == next(iter(s))) for\
    \ c in s)\n\n", "                            s\n                            s\n\
    \                            s\n                            s\n              \
    \              s\n                            \"\"\"\n                       \
    \     is happy because s is happy and has 3 distinct letters\n               \
    \             \"\"\"\n                            s\n                        \
    \    s\n                            s\n                            s\n       \
    \                     \"\"\"\n                            is not happy because\
    \ the string is unhappy and it has 4 distinct letters\n                      \
    \      \"\"\"\n                            s\n                            s\n\
    \                            s\n                            \"\"\"\n         \
    \                   is not happy because the string is unhappy and has 2 distinct\
    \ letters\n                            \"\"\"\n                            s\n\
    \                            s\n                            \"\"\"\n         \
    \                   is not happy because the string is unhappy and has 3 distinct\
    \ letters\n                            \"\"\"\n                            s\n\
    \                            \"\"\"\n                            is not happy\
    \ because the string is unhappy and has 2 distinct letters\n                 \
    \           \"\"\"\n                            \"\"\"\n                     \
    \       s\n                            \"\"\"\n                            is\
    \ not happy because the string is unhappy and has 3 distinct letters\n       \
    \                     \"\"\"\n                            \"\"\"\n           \
    \                 \"\"\"\n                            is not happy because the\
    \ string is unhappy and has 2 distinct letters\n                            \"\
    \"\"\n                            \"\"\"\n                            \"\"\"\n\
    \                            is not happy because the string is unhappy and has\
    \ 3 distinct letters\n                            \"\"\"\n    \"\"\"\n    solution\
    \ = all(len(set(s)) >= 3 for s in itertools.permutations(s))\n    return solution\n\
    \n", "    return len(s) < 3 and all((c1 != c2 for c1, c2 in zip(s, s[1:])))\n\n",
  "    s = \"happy days\"\n    is_happy(s)\n    > False\n    s = \"sad\"\n    is_happy(s)\n\
    \    > True\n    s = \"happy\"\n    is_happy(s)\n    > True\n    s = \"happydays\"\
    \n    is_happy(s)\n    > True\n    s = \"happydays\"\n    is_happy(s)\n    > False\n\
    \    \"\"\"\n    return len(s) >= 3 and all(c in set(s[i : i + 3]) for i in range(len(s)\
    \ - 2))\n\n", "    print(is_happy(\"abba\"))\n    print(is_happy(\"abbab\"))\n\
    \    print(is_happy(\"baab\"))\n    print(is_happy(\"abbaba\"))\n    print(is_happy(\"\
    bababa\"))\n    print(is_happy(\"baaba\"))\n    print(is_happy(\"abbabbab\"))\n\
    \    print(is_happy(\"a\"))\n    print(is_happy(\"aaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaa\"))\n\
    \    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaa\"\
    ))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ))\n    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n\
    \    print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n   \
    \ print(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n    print(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"))\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
