name: HumanEval_18_how_many_times
language: py
prompt: "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find\
  \ how many times a given substring can be found in the original string. Count overlaping\
  \ cases.\n                \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('', 'x') == 0\n    assert candidate('xyxyxyx',\
  \ 'x') == 4\n    assert candidate('cacacacac', 'cac') == 4\n    assert candidate('john\
  \ doe', 'john') == 1\n\ndef test_check():\n    check(how_many_times)\n\ntest_check()\n"
completions: ["    return sum(1 if substring in string else 0 for character in string)\n\
    \n", "    total = 0\n    if substring in string:\n        total = 1\n    if substring\
    \ not in string and substring in string.lower():\n        total += 1\n    if substring\
    \ not in string and substring in string.upper():\n        total += 1\n    return\
    \ total\n\n", "    count = 0\n    i = 0\n    while i < len(string) and string[i]\
    \ == substring[0]:\n        if string[i:i + len(substring)] == substring:\n  \
    \          count += 1\n            i += len(substring) - 1\n        else:\n  \
    \          i += 1\n    return count\n\n", "    count = len(string) - len(substring)\n\
    \    return count\n\n", "    string = string.lower()\n    substring = substring.lower()\n\
    \    count = 0\n    for letter in string:\n        if letter in substring:\n \
    \           count += 1\n    return count\n\n", "    start = string.find(substring)\n\
    \    if start == -1:\n        return 0\n    else:\n        return start + 1\n\n",
  "    count = 0\n    substring = substring.lower()\n    string = string.lower()\n\
    \    for c in string:\n        if substring in c:\n            count += 1\n  \
    \  return count\n\n", "    string_split = string.split(substring)\n    return\
    \ sum([1 if substring in string_split[i] else 0 for i in range(0, len(string_split))])\n\
    \n", "    count = 0\n    string_length = len(string)\n    substring_index = 0\n\
    \    while substring_index < len(substring):\n        position = string.find(substring,\
    \ substring_index)\n        if position != -1:\n            substring_index =\
    \ position + 1\n            count += 1\n        substring_index += 1\n    return\
    \ count\n\n", "    count = 0\n    start = 0\n    end = len(string)\n    while\
    \ start <= end:\n        mid = (start + end) // 2\n        if string[mid] == substring[0]:\n\
    \            count += 1\n            if substring[1:] == string[mid+1:]:\n   \
    \             count += 1\n            start = mid + 1\n        else:\n       \
    \     start = mid + 1\n    return count\n\n", "    return sum([1 for _string in\
    \ list(string) if _string == substring])\n\n", "    return sum(1 for a, b in zip(string,\
    \ substring) if a == b)\n\n", "    count = 0\n    position = 0\n    while position\
    \ < len(string):\n        position = string.find(substring, position)\n      \
    \  if position == -1:\n            break\n        count += 1\n        position\
    \ = position + len(substring)\n    return count\n\n", "    len_s = len(string)\n\
    \    len_p = len(substring)\n    count = 0\n    for i in range(len_s):\n     \
    \   for j in range(len_p):\n            if string[i:i+len(substring)] == substring[j:j+len(substring)]:\n\
    \                count += 1\n    return count\n\n", "    count = 0\n    for i\
    \ in range(len(string)):\n        if string[i - 1] == substring[0]:\n        \
    \    for j in range(i + 1, len(string)):\n                if string[j] == substring[1]:\n\
    \                    count += 1\n    return count\n", "    count = 0\n    for\
    \ character in string:\n        if substring in character:\n            count\
    \ += 1\n    return count\n", "    count = 0\n    found_count = 0\n    i = -1\n\
    \    len_string = len(string)\n    len_substring = len(substring)\n    while i\
    \ < len_string and found_count != 1:\n        i += 1\n        if string[i] ==\
    \ substring[0]:\n            found_count += 1\n            while i + 1 < len_string\
    \ and string[i] == substring[1]:\n                i += 1\n                found_count\
    \ += 1\n            count += 1\n    return count\n\n", "    count = 0\n    for\
    \ s in string:\n        if s == substring:\n            count += 1\n        else:\n\
    \            count += count_overlap_cases(string, substring, s)\n    return count\n\
    \n", "    count = defaultdict(int)\n    substring = substring.lower()\n    string\
    \ = string.lower()\n    for character in string:\n        if character not in\
    \ substring:\n            continue\n        substring = substring.replace(character,\
    \ \"\")\n        count = defaultdict(int)\n        count = 0\n        for sub\
    \ in substring:\n            if sub in string:\n                count += 1\n \
    \               count[sub] += 1\n        count = dict(sorted(count.items(), key=lambda\
    \ kv: kv[1]))\n        count = sorted(count.items(), key=lambda kv: kv[1])\n \
    \   return count[0][0]\n\n", "    count = 0\n    length = len(substring)\n   \
    \ start = -1\n    for i in range(length):\n        start = string.find(substring,\
    \ start + 1)\n        if start > -1:\n            count += 1\n    return count\n\
    \n", "    count = 0\n    string_list = string.split()\n    for s in string_list:\n\
    \        if substring in s:\n            count += 1\n    return count\n\n", " \
    \   count = 0\n    substring = substring.lower()\n    for char in string:\n  \
    \      if char == substring[0]:\n            if substring[1:] in string:\n   \
    \             count += 1\n            else:\n                return count\n  \
    \      elif substring[1:] in string:\n            count += 1\n    return count\n\
    \n", "    count = 0\n    start = string.find(substring)\n    while start >= 0:\n\
    \        count += 1\n        start += len(substring)\n        start = string.find(substring,\
    \ start)\n    return count\n\n", "    count = 0\n    for i in string:\n      \
    \  if substring in string:\n            count += 1\n    return count\n", "   \
    \ count = 0\n    str_length = len(string)\n    substring_index = 0\n    while\
    \ substring_index < str_length:\n        if substring_index in string and substring_index\
    \ + len(substring) in string:\n            substring_index += len(substring)\n\
    \            count += 1\n        elif substring_index in string:\n           \
    \ substring_index += len(substring)\n        else:\n            substring_index\
    \ += 1\n    return count\n\n", "    count = 0\n    len_s = len(string)\n    len_p\
    \ = len(substring)\n    for i in range(len_s):\n        start = i\n        end\
    \ = i + 1\n        while end < len_p:\n            if string[start:end] == substring:\n\
    \                count += 1\n            end += 1\n        i += 1\n    return\
    \ count\n\n", "    \n    how_many = 0\n\n    substring = string.lower()\n    \n\
    \    \n    if substring in string:\n        how_many += 1\n        \n    \n  \
    \  return how_many\n\n", "    substring_index = 0\n    count = 0\n    for index,\
    \ char in enumerate(string):\n        if char == substring[substring_index]:\n\
    \            substring_index += 1\n            if substring_index == len(substring):\n\
    \                count += 1\n            substring_index = 0\n    return count\n\
    \n", "    index_list = string.lower().count(substring)\n    return index_list\
    \ if index_list > 0 else len(substring)\n\n", "    \n    i = 0\n    length = len(string)\n\
    \    \n    while i < length:\n        \n        found_index = string.find(substring,\
    \ i)\n        \n        if found_index != -1:\n            \n            i +=\
    \ found_index\n            \n        else:\n            \n            return i\n\
    \    \n    return i\n    \n    ", "    count = 0\n    if substring in string:\n\
    \        count = 0\n    count = 0\n    i = 0\n    while i < len(string) and count\
    \ == 0:\n        if string[i] == substring[0]:\n            count += 1\n     \
    \       i += len(substring)\n        elif string[i] == substring[1]:\n       \
    \     count += 2\n            i += len(substring)\n        else:\n           \
    \ i += 1\n    return count\n\n", "    how_many_times = 0\n    if len(string) <\
    \ len(substring):\n        return 0\n    for i in range(len(string)):\n      \
    \  if string[i] == substring[0]:\n            how_many_times = how_many_times\
    \ + 1\n        else:\n            break\n    for i in range(1, len(substring)):\n\
    \        if string[i - 1] == substring[i - 1]:\n            how_many_times = how_many_times\
    \ + 1\n        else:\n            break\n    for i in range(len(substring)):\n\
    \        if string[i + len(substring)] == substring[i]:\n            how_many_times\
    \ = how_many_times + 1\n        else:\n            break\n    return how_many_times\n\
    \n", "    index_of_first_occurrence = string.find(substring)\n    index_of_last_occurrence\
    \ = string.rfind(substring)\n\n    if index_of_first_occurrence == -1 or index_of_last_occurrence\
    \ == -1:\n        return 0\n\n    number_of_times = 0\n\n    # Count the number\
    \ of times the substring appears first\n    while index_of_first_occurrence !=\
    \ -1 and index_of_last_occurrence != -1:\n        if string[index_of_last_occurrence]\
    \ == string[index_of_first_occurrence]:\n            index_of_first_occurrence\
    \ += 1 # Move index_of_first_occurrence forward one step\n            number_of_times\
    \ += 1 \n            index_of_first_occurrence += 1 # Move index_of_first_occurrence\
    \ forward one step\n        else:\n            # Substring doesn't overlap\n \
    \           index_of_first_occurrence += 1 # Move index_of_first_occurrence forward\
    \ one step\n            index_of_last_occurrence += 1 # Move index_of_last_occurrence\
    \ forward one step\n\n    return number_of_times\n</cell>\n<text>\nLet's now see\
    \ how we can use these to solve the original question:\n\n\n</text>\n<cell>\n\
    how_many_times(\"The quick brown fox jumped over the lazy dog.\", \"jumped\")\n\
    </cell>\n<cell>\nhow_many_times(\"The quick brown fox jumped over the lazy dog.\"\
    , \"the\")\n</cell>\n<cell>\nhow_many_times(\"The quick brown fox jumped over\
    \ the lazy dog.\", \"The\")\n</cell>\n<cell>\nhow_many_times(\"The quick brown\
    \ fox jumped over the lazy dog.\", \"over\")\n</cell>\n<cell>\nhow_many_times(\"\
    The quick brown fox jumped over the lazy dog.\", \"quick\")\n</cell>\n<cell>\n\
    how_many_times(\"The quick brown fox jumped over the lazy dog.\", \"brown\")\n\
    </cell>\n<cell>\nhow_many_times(\"The quick brown fox jumped over the lazy dog.\"\
    , \"fox\")\n</cell>\n<cell>\nhow_many_times(\"The quick brown fox jumped over\
    \ the lazy dog.\", \"jumped\")\n</cell>\n<cell>\nhow_many_times(\"The quick brown\
    \ fox jumped over the lazy dog.\", \"dog.\")\n</cell>\n<cell>\nhow_many_times(\"\
    The quick brown fox jumped over the lazy dog.\", \"dog.\")\n</cell>\n<cell>\n\
    how_many_times(\"The quick brown fox ", "    count = 0\n    for ch in string:\n\
    \        if ch == substring[0]:\n            count += 1\n        elif ch == substring[1]:\n\
    \            count -= 1\n        else:\n            count = 0\n            break\n\
    \    return count\n\n", "    count = 0\n    i = 0\n    for index, char in enumerate(string):\n\
    \        if char == substring[i]:\n            count += 1\n        i += 1\n  \
    \  return count\n\n", "    count = 0\n    for i in range(1, len(string)):\n  \
    \      if string[i:len(substring)] == substring:\n            count += 1\n   \
    \ return count\n\n", "    count = 0\n    s = string\n    sub = substring\n   \
    \ string_length = len(string)\n    substring_index = 0\n    while substring_index\
    \ < string_length:\n        index = s.index(sub, substring_index)\n        if\
    \ index >= 0:\n            substring_index = index + 1\n        else:\n      \
    \      substring_index = 0\n            count += 1\n    return count\n</cell>\n\
    <text>\nTest\n\n</text>\n<cell>", "    string_length = len(string)\n    substring_length\
    \ = len(substring)\n    count = 0\n    for i in range(string_length - substring_length\
    \ + 1):\n        if string.startswith(substring, i):\n            count += 1\n\
    \    return count\n", "    count = 0\n    for i in range(len(string) - len(substring)\
    \ + 1):\n        if string[i:i + len(substring)] == substring:\n            count\
    \ += 1\n    return count\n", "    count = 0\n\n    # Start from the very last\
    \ character\n    i = len(string)-1\n\n    substring_index = string.find(substring)\n\
    \    while i >= 0:\n\n        # Check if this character is part of our substring\n\
    \        j = string[i:].find(substring)\n\n        # If not part of substring,\
    \ increment our counter\n        if j >= 0:\n            count += 1\n\n      \
    \  # If it's overlapped with last character\n        # Increase counter and decrease\
    \ i\n        else:\n            count += i\n            i -= 1\n\n        # Increment\
    \ by 1\n        i += 1\n\n    return count\n\n", "    len_str = len(string)\n\
    \    len_set = len(substring)\n    count_times = 0\n    \n    if len_str < 1 or\
    \ len_set < 1:\n        return 0\n    \n    for letter in string:\n        if\
    \ letter in substring:\n            count_times += 1\n            \n    return\
    \ count_times\n\nhow_many_times('banana', 'na')\n</cell>\n<text>\nProblem 10\n\
    Write a function that returns a list consisting of the digits of a given number\
    \ in the order they appear. Do not convert the number to a string. Use a while\
    \ loop because this will be very inefficient for very large numbers.\n\nFor instance:\n\
    \ndigits(1230) --> ['1', '2', '3', '0']\ndigits(12301) --> ['1', '2', '3', '0',\
    \ '1']\ndigits(123456789) --> ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n\
    digits(9876543210) --> ['9', '8', '7', '6', '5', '4', '3', '2', '1']\n\n</text>\n\
    <cell>", "    count = 0\n    start = -1\n    end = -1\n    found = False\n   \
    \ length = len(string)\n    substring_index = string.index(substring)\n    start\
    \ = substring_index\n    end = start + len(substring) - 1\n    while end <= length:\n\
    \        if found:\n            break\n        found = string.find(substring,\
    \ start, end)\n        if found != -1:\n            count += 1\n            start\
    \ = found + len(substring)\n        if end == length:\n            break\n   \
    \     end += 1\n    return count\n\n", "    count = 0\n    for index, char in\
    \ enumerate(string):\n        if substring in char:\n            count += 1\n\
    \    return count\n\n", "    # TODO check whether this is a good way of doing\
    \ it\n    cnt = 0\n    for index, char in enumerate(string):\n        if char\
    \ == substring[0] and char != string[index-1]:\n            cnt += 1\n       \
    \ if char == substring[-1] and char != string[index+1]:\n            cnt += 1\n\
    \    return cnt\n\n", "    if substring not in string:\n        return 0\n   \
    \ count = len(re.findall(substring, string))\n    return count\n\n", "    i =\
    \ 0\n    while i < len(string):\n        j = string.find(substring, i)\n     \
    \   if j == -1:\n            break\n        i = j + 1\n    return i\n\n", "  \
    \  count = 0\n    l = len(substring)\n    i = 0\n    while i < len(string):\n\
    \        j = string.find(substring, i + 1)\n        if j == -1:\n            break\n\
    \        if j - i > 0:\n            count += 1\n        i += l\n\n    return count\n",
  "    how_many_times = 0\n    pos_begin = 0\n    pos_end = 0\n    while pos_begin\
    \ < len(string) and pos_end < len(string) and string[pos_begin] == substring[pos_begin]:\n\
    \        if pos_begin == pos_end:\n            how_many_times += 1\n         \
    \   pos_end += 1\n        elif pos_begin + 1 == pos_end:\n            pos_end\
    \ += 1\n            pos_begin += 1\n        elif pos_begin + 2 == pos_end:\n \
    \           pos_end += 1\n            pos_begin += 2\n        elif pos_begin +\
    \ 3 == pos_end:\n            pos_end += 1\n            pos_begin += 3\n      \
    \  elif pos_begin + 4 == pos_end:\n            pos_end += 1\n            pos_begin\
    \ += 4\n        elif pos_begin + 5 == pos_end:\n            pos_end += 1\n   \
    \         pos_begin += 5\n        elif pos_begin + 6 == pos_end:\n           \
    \ pos_end += 1\n            pos_begin += 6\n        elif pos_begin + 7 == pos_end:\n\
    \            pos_end += 1\n            pos_begin += 7\n        elif pos_begin\
    \ + 8 == pos_end:\n            pos_end += 1\n            pos_begin += 8\n    \
    \    elif pos_begin + 9 == pos_end:\n            pos_end += 1\n            pos_begin\
    \ += 9\n        elif pos_begin + 10 == pos_end:\n            pos_end += 1\n  \
    \          pos_begin += 10\n        else:\n            pos_end += 1\n        \
    \    how_many_times += 1\n    return how_many_times\n\n", "    \n    count = 0\n\
    \    index = string.find(substring)\n    while index != -1:\n        count +=\
    \ 1\n        index = string.find(substring, index + len(substring))\n\n    return\
    \ count\n\n", "    return len([s for s in string.split(substring) if s in string])\n\
    \n", "    if substring in string:\n        return string.count(substring)\n  \
    \  elif len(substring) == 1:\n        return string.count(substring)\n    return\
    \ 0\n</cell>\n<cell>\nhow_many_times(\"hello\", \"hell\")\n</cell>\n<cell>\nhow_many_times(\"\
    hello\", \"elo\")\n</cell>\n<cell>", "    string_list = list(string.lower())\n\
    \    substring_list = list(substring.lower())\n\n    count = 0\n    for s in string_list:\n\
    \        for sub in substring_list:\n            if s == sub:\n              \
    \  count += 1\n            elif s in sub:\n                count += 2\n      \
    \      elif sub in s:\n                count += 3\n\n    return count\n\n", " \
    \   count = 0\n    start = -1\n    end = len(string)\n    index = string.find(substring)\n\
    \    while index != -1:\n        if start == -1:\n            start = index\n\
    \        end = index\n        index = string.find(substring, end + 1)\n      \
    \  count += 1\n    return count\n\n", "    occurrences = 0\n    # iterate over\
    \ the original string\n    for index in range(len(string)):\n        # if the\
    \ substring is not found at the current index\n        if substring not in string[index:]:\n\
    \            # skip to the next index\n            continue\n        else:\n \
    \           # keep incrementing the counter\n            occurrences += 1\n  \
    \  return occurrences\n\n", "    substring = substring.lower()\n    string = string.lower()\n\
    \    cnt = 0\n    for i in range(len(string)):\n        if string[i:i+len(substring)]\
    \ == substring:\n            cnt += 1\n    return cnt\n\n\n@njit(fastmath=True)",
  "    count = 0\n    start, end = 0, 0\n    while start < len(string):\n        end\
    \ = string.find(substring, start)\n        if end == -1:\n            end = len(string)\n\
    \        count += 1\n        start = end + 1\n    return count\n\n", "    return\
    \ len(re.findall(f'{substring}', string))\n\n", "    return len(string.count(substring))\n\
    \n", "    return sum(1 for c in string if substring in c)\n", "    if len(substring)\
    \ == 0:\n        return 0\n    i = 0\n    str_len = len(string)\n    while i <\
    \ str_len:\n        if string.find(substring, i) == i:\n            i += 1\n \
    \           count += 1\n        else:\n            i = 0\n    return count\n\n",
  "    return len([x for x in string if substring in x])\n\n", "    string_length\
    \ = len(string)\n    substring_index = _find(string, substring)\n    count = 0\n\
    \    for i in range(string_length + substring_index - 1):\n        if string[i:i+substring_index]\
    \ == substring:\n            count += 1\n    return count\n\n", "    matches =\
    \ 0\n    match_start_index = 0\n    while match_start_index < len(string):\n \
    \       match_end_index = find_index_in_string(string, substring, match_start_index)\n\
    \        if match_end_index == -1:\n            match_end_index = len(string)\n\
    \        matches += 1\n        match_start_index = match_end_index + 1\n\n   \
    \ return matches\n\n", "    return len([c for c in string if substring in c])\n",
  "    if substring not in string:\n        return 0\n    count = 0\n    for index,\
    \ char in enumerate(string):\n        if char == substring[0]:\n            count\
    \ += how_many_times(string[index + 1:], substring[1:])\n    return count\n\n",
  "    counter = 0\n    i = 0\n    while i < len(string):\n        if string[i] ==\
    \ substring[0]:\n            counter += 1\n            if i == len(string) - 1:\n\
    \                return counter\n            if string[i+1] == substring[0]:\n\
    \                counter += 1\n            i += 1\n        i += 1\n    return\
    \ 0\n\n", "    count = 0\n    for index, char in enumerate(string):\n        if\
    \ char == substring:\n            count += 1\n            if index == 0:\n   \
    \             count -= 1\n    return count\n\n", "    counter = 0\n    for i in\
    \ range(len(string)):\n        if substring in string[i:i+len(substring)]:\n \
    \           counter += 1\n    return counter\n\n", "    number_of_times = 0\n\
    \    for char in string:\n        if char in substring:\n            number_of_times\
    \ = number_of_times + 1\n    return number_of_times\n\n", "    counter = 0\n \
    \   counting = False\n    i = j = 0\n    length = len(substring)\n    \n    while\
    \ i < len(string) - length:\n        if string[i:i+length] == substring:\n   \
    \         counter += 1\n        else:\n            if not counting:\n        \
    \        counting = True\n                j = i + length\n            else:\n\
    \                counting = False\n        \n        i += 1\n    \n    return\
    \ counter\n", "    count = 0\n    count = 0\n    for i, j in zip(string, substring):\n\
    \        if i == j:\n            count += 1\n    return count\n", "    \n    count\
    \ = 0\n    \n    for i in range(len(string)):\n        if string[i] == substring[0]:\n\
    \            count += 1\n            \n            \n    if count > 0:\n     \
    \   count = count + 1\n            \n            \n    return count\n", "    count\
    \ = 0\n    for i in range(len(string)):\n        if string[i] == substring[0]:\n\
    \            for j in range(1, len(substring)):\n                if string[i +\
    \ j] != substring[j]:\n                    break\n                count += 1\n\
    \    return count\n\n", "    string_list = list(string)\n    substring_list =\
    \ list(substring)\n    \n    str_len = len(string_list)\n    sub_len = len(substring_list)\n\
    \    \n    \n    found = 0\n    \n    \n    while found < str_len:\n        \n\
    \        start = string_list[found]\n        \n        \n        \n        if\
    \ start == substring_list[0]:\n            \n            start += substring_list[0]\n\
    \            \n            found += 1\n            \n        \n        elif start\
    \ == substring_list[-1]:\n            \n            found += 1\n            \n\
    \            end = string_list[found + sub_len - 1]\n            \n          \
    \  \n            if end == substring_list[0]:\n                \n            \
    \    end += substring_list[0]\n                \n                found += 1\n\
    \            \n            else:\n                \n                found = found\
    \ + sub_len\n            \n            \n        else:\n            \n       \
    \     found += 1\n        \n    return found\n\n", "    substring = substring.lower()\n\
    \    string = string.lower()\n    # Case 1: Nothing found\n    if len(substring)\
    \ == 0:\n        return 0\n    # Case 2: 1 found and it is equal\n    if substring\
    \ == string:\n        return 1\n    # Case 3: Nothing found and it is different\n\
    \    if len(substring) != len(string):\n        return 0\n    # Case 4: 2 found\n\
    \    i = 0\n    found_count = 0\n    while i + len(substring) <= len(string):\n\
    \        if string[i:i + len(substring)] == substring:\n            found_count\
    \ += 1\n        i += len(substring) + 1\n    return found_count\n\n", "    count\
    \ = 0\n    string_length = len(string)\n    substring_length = len(substring)\n\
    \    for index in range(0, string_length):\n        if string[index:index + substring_length]\
    \ == substring:\n            count = count + 1\n    return count\n\n", "    result\
    \ = 0\n    for i in range(len(string)):\n        if string.startswith(substring,\
    \ i):\n            result += 1 \n    return result\n\n</cell>\n<cell>", "    substring\
    \ = substring.lower()\n    string = string.lower()\n    count=0\n    for c in\
    \ string:\n        if c in substring:\n            count +=1\n    return count\n\
    \n", "    counter = 0\n    i = 0\n    j = -1\n    while True:\n        if i ==\
    \ len(string):\n            counter += 1\n            break\n        j = i\n \
    \       i += 1\n        while j >= 0:\n            if string[j] == substring[i]:\n\
    \                counter += 1\n                j -= 1\n            j += 1\n  \
    \  return counter\n\n", "    result = 0\n    substring = string[:len(substring)+1]\n\
    \n    for i in range(len(string)-len(substring)+1):\n        if string[i:i+len(substring)]\
    \ == substring:\n            result += 1\n    return result\n\n", "    number_of_matches\
    \ = 0\n    string_length = len(string)\n    substring_length = len(substring)\n\
    \n    if substring_length > string_length:\n        return -1\n\n    i = 0\n \
    \   while i < string_length:\n        if string[i:i + substring_length] == substring:\n\
    \            number_of_matches += 1\n            i += substring_length\n     \
    \   else:\n            i += 1\n\n    return number_of_matches\n\n", "    return\
    \ len(re.findall(substring, string, re.IGNORECASE))\n\n", "    count = 0\n   \
    \ last = 0\n    for i in range(len(string) - len(substring)):\n        if string[i:i\
    \ + len(substring)] == substring:\n            count += 1\n            if last\
    \ < i:\n                last = i + 1\n    return count\n\n", "    return Counter(string).get(substring)\n\
    \n", "    substring = string.replace(substring, '')\n    i = 0\n    count = 0\n\
    \    while i < len(string):\n        if string[i:i + len(substring)] == substring:\n\
    \            count += 1\n        i += len(substring) + 1\n    return count\n",
  "    count = 0\n    found = False\n    start = 0\n    stop = 0\n    for index, char\
    \ in enumerate(string):\n        if char == substring[0]:\n            if found:\n\
    \                stop += (index - start)\n            start = index\n        \
    \    found = True\n        if found and char == substring[-1]:\n            if\
    \ found:\n                stop += (index - start)\n            found = False\n\
    \            count = stop - start\n    if found:\n        stop += (index - start)\n\
    \    count += stop - start\n    return count\n\n", "    \n    count = 0\n    \n\
    \    if substring in string:\n        count += 1\n        \n        for pos in\
    \ range(len(string) - len(substring) + 1):\n            if string[pos:pos+len(substring)]\
    \ == substring:\n                count += 1\n    \n    return count\n\n", "  \
    \  count = 0\n    for i in range(len(string)):\n        count += 1 if string[i:i\
    \ + len(substring)] == substring else 0\n    return count\n\n", "    count = 0\n\
    \    start_idx = 0\n    substring_idx = 0\n    while start_idx < len(string):\n\
    \        substring = string[start_idx:substring_idx]\n        if substring ==\
    \ substring:\n            count += 1\n            substring_idx += 1\n       \
    \ else:\n            if substring != substring[::-1]:\n                substring_idx\
    \ += 1\n            else:\n                substring_idx += 1\n              \
    \  substring_idx += 1\n                substring_idx += 1\n                substring_idx\
    \ += 1\n                count += 1\n                start_idx = substring_idx\n\
    \    return count\n\n", "    return sum(len([x for x in string.split(substring)\
    \ if substring in x]) for x in string.split())\n\n", "    count = 0\n    start_index\
    \ = 0\n    end_index = len(string)\n    while start_index < end_index:\n     \
    \   index_of_sub_string = string.find(substring, start_index)\n        if index_of_sub_string\
    \ == -1:\n            return count\n        start_index = index_of_sub_string\
    \ + 1\n        end_index = start_index + len(substring)\n        count += 1\n\
    \    return count\n\n", "    count = 0\n    # find first occurrence\n    idx =\
    \ string.find(substring)\n    if idx != -1:\n        count += 1\n\n    start =\
    \ idx\n    while True:\n        idx = string.find(substring, idx + 1)\n      \
    \  \n        # check if we have found the end of our string\n        if idx ==\
    \ -1:\n            break\n\n        # check if we have found our substring with\
    \ some overlaping cases\n        if idx == idx+len(substring):\n            count\
    \ += 1\n\n        start = idx + 1\n\n    return count\n</cell>\n<cell>", "   \
    \ return sum(1 for _ in re.finditer(f'({substring})', string, overlapped=True))\n\
    \n", "    \n    count = 0\n    \n    for char in string:\n        if char in substring:\n\
    \            count +=1\n        \n    return count\n</cell>\n<text>\nLet's test\
    \ the function before we go further:\n\n\n</text>\n<cell>\nhow_many_times('Hello',\
    \ 'Hello')\n</cell>\n<cell>\nhow_many_times('Hello', 'Hello ')\n</cell>\n<text>\n\
    Great!\n\nLet's now use all these functions to help us count how many times the\
    \ word \"hello\" occurs in a string with the word \"world\" in it.\n\nRemember\
    \ that Python strings are immutable so it's good practice to use the split function\
    \ to make a new string from your original string\n\n\n</text>\n<cell>", "    if\
    \ substring in string:\n        return 1\n    else:\n        count = 0\n     \
    \   for i in range(0, len(string) - len(substring) + 1):\n            if string.startswith(substring,\
    \ i):\n                count += 1\n        return count\n\n", "    count = 0\n\
    \    start_idx = 0\n    end_idx = 0\n    length = len(string)\n    while start_idx\
    \ < length:\n        end_idx = start_idx + len(substring)\n        if string[start_idx:end_idx].lower()\
    \ == substring.lower():\n            count += 1\n        start_idx = end_idx\n\
    \    return count\n\n", "    string_length = len(string)\n    substring_length\
    \ = len(substring)\n    count = 0\n    position = 0\n    while position < string_length:\n\
    \        position = string.find(substring, position)\n        if position == -1:\n\
    \            break\n        count += 1\n        position = string.find(substring,\
    \ position + substring_length)\n    return count\n\n", "    count = 0\n    index\
    \ = string.find(substring)\n    while index != -1:\n        count += 1\n     \
    \   index = string.find(substring, index + 1)\n\n    return count\n\n", "    count\
    \ = 0\n    start = -1\n    end = -1\n    len_string = len(string)\n    len_substring\
    \ = len(substring)\n\n    while end < len_string and start < len_substring:\n\
    \        if string[start] == substring[end]:\n            count += 1\n       \
    \     end += 1\n        start += 1\n        end += 1\n\n    return count\n\n",
  "    count = 0\n    start_ix = string.find(substring)\n    while start_ix != -1:\n\
    \        count += 1\n        start_ix = string.find(substring, start_ix + 1)\n\
    \    return count\n\n", "    how_many_times = 0\n    string_list = string.split()\n\
    \    sub_string_list = substring.split()\n\n    for each_string in string_list:\n\
    \        for each_substring in sub_string_list:\n            if each_string ==\
    \ each_substring:\n                how_many_times += 1\n    return how_many_times\n\
    \n", "    count = 0\n    for letter in string:\n        if letter in substring:\n\
    \            count += 1\n    return count\n\n", "    count = 0\n\n    for i in\
    \ range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)]\
    \ == substring:\n            count += 1\n    return count\n\n", "    return sum(1\
    \ for _ in re.finditer(substring, string))\n\n\"\"\"\nTESTS\n\"\"\"\n\n", "  \
    \  \n    str_len = len(string)\n    str_sub = len(substring)\n    \n    if str_sub\
    \ > str_len:\n        return 0\n    \n    count = 0\n    \n    for i in range(str_len):\n\
    \        if string[i] == substring[0]:\n            count += 1 \n            for\
    \ j in range(1, str_sub):\n                if string[i + j] != substring[j]:\n\
    \                    break\n            \n            count += j\n           \
    \ i = i + j + 1\n        else:\n            count += 1 \n            i = i + 1\n\
    \    \n    return count\n", "    count = 0\n    # Create a list with the list\
    \ of substrings from string\n    substrings_list = string.split(substring)\n \
    \   # Remove repeated substrings\n    substrings_list = set(substrings_list)\n\
    \    # Loop through original string looking for substrings\n    for s in string:\n\
    \        if s in substrings_list:\n            count += 1\n    return count\n\n",
  "    return len(re.findall(substring, string))\n</cell>\n<cell>\nhow_many_times('hello\
    \ how are you how are you you', 'you')\n</cell>\n<text>\nExploring text data with\
    \ pandas\nPandas is an open-source Python library for data analysis and processing.\
    \ In this section, we will use Pandas to explore the world of text data.\n\npandas\
    \ is a Python package providing fast, flexible, and expressive data structures\
    \ designed to make working with \u201Crelational\u201D or \u201Clabeled\u201D\
    \ data both easy and intuitive. It aims to be the fundamental high-level building\
    \ block for doing practical, real world data analysis in Python.\n\n\n</text>\n\
    <cell>\nimport pandas as pd\nfrom nltk.corpus import stopwords\nfrom nltk.tokenize\
    \ import word_tokenize\n</cell>\n<cell>\ndf = pd.read_csv(\"https://raw.githubusercontent.com/georgetown-analytics/datasets-for-good-security/master/data/offense-tweets.csv\"\
    )\n</cell>\n<cell>\ndf.head()\n</cell>\n<cell>\ndf.shape\n</cell>\n<cell>\ndf.info()\n\
    </cell>\n<text>\nAs you can see above, we have 893 tweets. Each of them has a\
    \ text column. Let's start exploring the contents of the text column.\n\n\n</text>\n\
    <cell>", "    return sum(substring in string for substring in substrings)\n\n",
  "    \n    count = 0\n    \n    for x in range(len(string)):\n        \n       \
    \ if string[x:x+len(substring)] == substring:\n            count += 1\n      \
    \      \n    return count\n</cell>\n<text>\nPart 4: Implement the solution\nNow,\
    \ implement the solution to the problem above.  It should be a function that takes\
    \ as arguments a string and the substring you wish to find, and it should return\
    \ a string of the original string with all instances of substring removed.  You\
    \ may not modify the string passed into the function.\n\nTo test your function,\
    \ run the cell below.  If the tests pass, then it should print the original input\
    \ string and your custom output string.\n\n\n</text>\n<cell>", "    count = 0\n\
    \    sub_len = len(substring)\n    for i in range(len(string)):\n        if string[i:i\
    \ + sub_len] == substring:\n            count += 1\n    return count\n\n", " \
    \   count = 0\n    i = 0\n    while i < len(string):\n        if string.find(substring,\
    \ i) == i:\n            count += 1\n        i = string.find(substring, i) + 1\n\
    \    return count\n\n", "    count = 0\n\n    for i in range(len(string)):\n \
    \       if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \n    return count\n\n", "    string_list = string.split()\n    substring_list\
    \ = substring.split()\n    i = 0\n    while i < len(string_list):\n        if\
    \ string_list[i] in substring_list:\n            return i + 1\n        else:\n\
    \            i += 1\n    return 0\n\n", "    count = 0\n    pos = 0\n    found\
    \ = False\n    length = 0\n    index_of = 0\n\n    while length != len(string)\
    \ or pos != len(substring):\n        if found:\n            if string[pos] ==\
    \ substring[index_of]:\n                count += 1\n            else:\n      \
    \          count = 0\n        length = len(string)\n        found = False\n  \
    \      pos = 0\n        index_of = 0\n        while length != len(string) or pos\
    \ != len(substring):\n            if found:\n                if string[pos] ==\
    \ substring[index_of]:\n                    count += 1\n                else:\n\
    \                    count = 0\n            pos += 1\n            index_of +=\
    \ 1\n\n            found = False\n            if pos == len(substring):\n    \
    \            found = True\n                length -= 1\n    return count\n\n",
  "    if len(substring) == 0:\n        return 0\n    if string == substring:\n  \
    \      return 1\n    if substring in string:\n        return 1 + how_many_times(string.replace(substring,\"\
    \"),substring)\n    return 0\n", "    substring = substring.lower()\n    string\
    \ = string.lower()\n    if substring in string:\n        if substring == \"o\"\
    :\n            return 1\n        count = 0\n        for i in range(len(string)\
    \ - len(substring) + 1):\n            substring = substring[:-1]\n           \
    \ if substring[-len(substring)-1:-len(substring)] != string[i: i + len(substring)]:\n\
    \                break\n            count = count + 1\n        else:\n       \
    \     return count\n    return 0\n\n", "    count = 0\n    for i in range(0, len(string)):\n\
    \        if string.find(substring, i + 1) > -1:\n            count += 1\n    return\
    \ count\n\n", "    count = 0\n    index_start = -1\n    index_end = -1\n    \n\
    \    if substring not in string:\n        count += 1\n        return count\n \
    \   \n    index_start = string.find(substring)\n    index_end = index_start\n\
    \    \n    while (index_start >= 0):\n        index_end = string.find(substring,\
    \ index_start + 1)\n        count += 1\n        if index_end >= 0:\n         \
    \   index_start = index_end\n        else:\n            break\n    return count\n\
    \n", "    count = 0\n    start = 0\n    end = len(string)\n    while start < end:\n\
    \        start = string.find(substring, start)\n        if start != -1 and start\
    \ + len(substring) <= end:\n            count += end - start + 1\n        start\
    \ = start + 1\n    return count\n\n", "    return len([substring for substring\
    \ in string.split() if substring.startswith(substring)])\n\n", "    count = 0\n\
    \    if substring[0] in string:\n        count += string.count(substring[0])\n\
    \        count = count + string.count(substring[1:])\n    return count\n\n", " \
    \   count = 0\n    for i in range(len(string) - len(substring) + 1):\n       \
    \ if string.startswith(substring, i) and string.endswith(substring, i + len(substring)):\n\
    \            count += 1\n    return count\n\n", "    index = string.lower().find(substring.lower())\n\
    \    if index == -1:\n        return 0\n    count = 1\n    next_index = index\n\
    \    while next_index < (len(string) - len(substring) + 1):\n        if string[next_index\
    \ : next_index + len(substring)] == substring:\n            count += 1\n     \
    \   index += len(substring)\n        next_index = index\n    return count\n\n",
  "    count = 0\n\n    for i in range(len(string) - len(substring)):\n        if\
    \ string.startswith(substring):\n            count += 1\n        if string.endswith(substring):\n\
    \            count += 1\n        if string.startswith(substring):\n          \
    \  count += 1\n        if string.endswith(substring):\n            count += 1\n\
    \        if string.startswith(substring):\n            count += 1\n        if\
    \ string.endswith(substring):\n            count += 1\n    return count\n\n",
  "    try:\n        count = string.count(substring)\n    except AttributeError:\n\
    \        # in python 2 there is no count method, try using count\n        count\
    \ = string.lower().count(substring.lower())\n    return count\n\n", "    count\
    \ = 0\n    for letter in string:\n        if letter == substring[0]:\n       \
    \     count += 1\n        else:\n            count = 0\n        if letter == substring[len(substring)\
    \ - 1]:\n            count += 1\n        else:\n            count = 0\n      \
    \  if count == len(substring):\n            break\n    return count\n\n", "  \
    \  count = 0\n    for index, char in enumerate(string):\n        if char == substring[0]:\n\
    \            count += 1\n            if index != 0:\n                if string[index\
    \ - 1] == substring[-1]:\n                    count += 1\n            if index\
    \ != len(string) - 1:\n                if string[index + 1] == substring[-1]:\n\
    \                    count += 1\n    return count\n", "    if not string or not\
    \ substring:\n        return 0\n    else:\n        return count(string, substring)\n\
    \n", "    count = 0\n    for i in range(len(string)):\n        if string[i] ==\
    \ substring[0]:\n            count += 1\n            if string[i + 1:] == substring[1:]:\n\
    \                count -= 1\n                i += 1\n    return count\n\n", " \
    \   return string.lower().count(substring.lower())\n\n", "    length = len(string)\n\
    \    substring_indexes = [index for index, val in enumerate(string) if val ==\
    \ substring]\n    count = 0\n    for i in range(len(substring_indexes)-1):\n \
    \       if substring_indexes[i+1] <= substring_indexes[i]:\n            count\
    \ += 1\n    return count\n\n", "    length: int = len(string)\n    overlaps: int\
    \ = 0\n    string_start: int = string.find(substring)\n    str_end = string_start\
    \ + len(substring)\n    for i in range(length):\n        overlaps += str_end -\
    \ i\n        if string_start <= i <= str_end:\n            overlaps += string_start\
    \ - i\n    return overlaps\n\n", "    count = 1\n    substring = substring.lower()\n\
    \    string = str(string.lower())\n    for c in string:\n        if substring\
    \ in c:\n            count = count + 1\n    return count\n\n", "    length = len(string)\n\
    \    count = 0\n    start = -1\n    for i in range(length):\n        if string[i]\
    \ == substring[0]:\n            if start == -1 or (i - start) >= len(substring):\n\
    \                start = i\n            count += 1\n            if count == substring.__len__():\n\
    \                return i - start\n        else:\n            if start != -1:\n\
    \                count = substring.__len__()\n                start = -1\n\n \
    \   return count\n\n", "    count = len(string.split(substring))\n\n    str_array\
    \ = string.split(' ')\n    str_array.remove(substring)\n    str_array.sort()\n\
    \n    count = 0\n    for i in range(1, len(str_array)):\n        if str_array[i]\
    \ == str_array[i-1]:\n            count += 1\n    return count\n", "    count\
    \ = 0\n    for i in range(len(string) - len(substring) + 1):\n        if substring\
    \ in string[i:i + len(substring)]:\n            count += 1\n    return count\n\
    \n", "    \n    return len([char for char in string if char == substring])\n\n",
  "    count = 0\n    index_start = 0\n    index_end = len(string) - 1\n    while\
    \ index_start < index_end:\n        if string[index_start] == substring[0] and\
    \ string[index_end] == substring[-1]:\n            count += 1\n            index_start\
    \ += 1\n            index_end -= 1\n            continue\n        index_start\
    \ += 1\n        if string[index_start] == substring[0]:\n            index_start\
    \ += 1\n            continue\n        index_end -= 1\n        if string[index_end]\
    \ == substring[-1]:\n            index_end -= 1\n            continue\n    return\
    \ count\n\n", "    return len(re.findall(f'{substring}+', string))\n</cell>\n\
    <cell>\nhow_many_times(\"i love u for u\", substring=\"u\")\n</cell>\n<cell>\n\
    how_many_times(\"i love u for u\", substring=\"u\")\n</cell>\n<cell>\nhow_many_times(\"\
    i love u for u\", substring=\"i\")\n</cell>\n<cell>\nhow_many_times(\"i love u\
    \ for u\", substring=\"e\")\n</cell>\n<cell>\nhow_many_times(\"i love u for u\"\
    , substring=\"o\")\n</cell>\n<text>\nWrite a function that returns a list of integers\
    \ representing the number of times that each unique character appears in the input\
    \ string.\n\n\n</text>\n<cell>", "    \n    string_list = list(string)\n    substring_list\
    \ = list(substring)\n    count = 0\n\n    for i in range(len(substring_list)):\n\
    \        if string_list[i:i+len(substring_list)] == substring_list:\n        \
    \    count += 1\n\n    return count\n\n", "    count = 0\n    start = -1\n   \
    \ end = -1\n    while start < len(string):\n        start = string.find(substring,\
    \ start) + 1\n        end = string.find(substring, start)\n        if end == -1:\n\
    \            count += 1\n        else:\n            count += 1\n    return count\n\
    \n", "    substring = substring.lower()\n    original_string = string.lower()\n\
    \    count = 0\n    \n    for i in range(len(original_string)):\n        if substring\
    \ in original_string[i:i+len(substring)]:\n            count = count + 1\n   \
    \ \n    return count\n", "    count = 0\n    str_len = len(string)\n    substr_len\
    \ = len(substring)\n    \n    for i in range(str_len):\n        if string[i:i\
    \ + substr_len] == substring:\n            count += 1\n    return count\n\n",
  "    total = 0\n    count_start = 0\n    count_end = 0\n    length = len(string)\n\
    \    while count_start < length:\n        count_end = count_start + len(substring)\n\
    \        total += count_end - count_start - 1\n        count_start = count_end\
    \ + 1\n    return total\n\n", "    count = 0\n    for i, c in enumerate(string):\n\
    \        if c == substring:\n            count += 1\n            continue\n  \
    \      if i >= len(string) - len(substring):\n            break\n        if string[i\
    \ + len(substring)] == substring:\n            count += 1\n            continue\n\
    \        if string[i:i + len(substring)] == substring:\n            count += 1\n\
    \    return count\n\n", "    occurrences = 0\n    for i in range(len(string)):\n\
    \        if string[i:i+len(substring)] == substring:\n            occurrences\
    \ += 1\n    return occurrences\n\n", "    count=0\n    \n    for i in range(0,\
    \ len(string)):\n        if substring == string[i:i+len(substring)]:\n       \
    \     count += 1\n    \n    return count\n\n", "    how_many_times_count = 0\n\
    \    for c in string:\n        if c in substring:\n            how_many_times_count\
    \ += 1\n    return how_many_times_count\n\n", "    string = str(string)\n    substring\
    \ = str(substring)\n    count = 0\n    for char in string:\n        if char in\
    \ substring:\n            count += 1\n    return count\n\n", "    count = 0\n\
    \    len_str = len(string)\n    for i in range(len_str):\n        if string[i:i\
    \ + len(substring)] == substring:\n            count += 1\n    return count\n\n",
  "    return len(set(string) & set(substring))\n\n", "    count = 0\n    i = 0\n\
    \    substringlen = len(substring)\n    while i < len(string):\n        if string[i:i\
    \ + substringlen] == substring:\n            count += 1\n        i += substringlen\n\
    \    return count\n\n", "    length = len(string)\n    count = 0\n    pos = 0\n\
    \    while pos < length:\n        pos = string.find(substring, pos)\n        if\
    \ pos == -1:\n            break\n        count += 1\n        pos = pos + 1\n \
    \   return count\n\n", "    # Initialization\n    count = 0\n\n    # Count how\
    \ many times the substring occurs in the string\n    for x in range(len(string)\
    \ - len(substring) + 1):\n        if string[x : x + len(substring)] == substring:\n\
    \            count += 1\n\n    return count\n", "    count = 0\n    i = 0\n  \
    \  while i < len(string):\n        if string[i:i + len(substring)] == substring:\n\
    \            count += 1\n        i += 1\n\n    return count\n\n", "    count =\
    \ 0\n    for c in string:\n        if substring in c:\n            count += 1\n\
    \    return count\n\n", "    if substring in string:\n        return 1 + how_many_times(string,\
    \ substring[1:])\n    return 0\n\n", "    count = 0\n    i = 0\n    length = len(string)\n\
    \    while i < length:\n        j = string.find(substring, i)\n        if j !=\
    \ -1:\n            count += 1\n            i = j + 1\n        else:\n        \
    \    i += 1\n    return count\n\n", "    count = 0\n    string_len = len(string)\n\
    \    substring_len = len(substring)\n    for i in range(string_len):\n       \
    \ if string[i:i + substring_len] == substring:\n            count += 1\n    return\
    \ count\n\n", "    counts: dict = {}\n    original_string = string\n    substring\
    \ = substring\n\n    if substring not in counts:\n        counts[substring] =\
    \ 1\n    else:\n        counts[substring] += 1\n\n    split_original_string =\
    \ original_string.split(substring)\n\n    for i in range(len(split_original_string)):\n\
    \        split_original_string[i] = original_string.replace(split_original_string[i],\
    \ substring, 1)\n\n    split_original_string = split_original_string.count(substring)\n\
    \n    return split_original_string\n\n", "    # Initialise counter\n    counter\
    \ = 0\n\n    # Iterate through each character in string\n    for char in string:\n\
    \        # Search each character in substring\n        if char in substring:\n\
    \            # Increment counter by one\n            counter += 1\n\n    # Return\
    \ result\n    return counter\n\n", "    count = 0\n    for char in string:\n \
    \       if char == substring[0]:\n            count += string.count(substring)\n\
    \            string = string.replace(substring, '')\n        else:\n         \
    \   count += 1\n\n    return count\n\n", "    # return len([m for m in re.finditer(substring,\
    \ string)])\n    count = 0\n    for m in re.finditer(substring, string):\n   \
    \     count += 1\n    return count\n\n", "    count = 1\n    start = string.find(substring)\n\
    \    while start != -1:\n        start += len(substring)\n        end = string.find(substring,\
    \ start)\n        if end == -1:\n            end += len(substring)\n        count\
    \ += 1\n        start = string.find(substring, end)\n    return count\n\n", " \
    \   string = re.sub('[^a-zA-Z ]', '', string)\n    substring = re.sub('[^a-zA-Z\
    \ ]', '', substring)\n    return len([s for s in string if substring in s])\n\n",
  "    count = 0\n    string_length = len(string)\n    sub_length = len(substring)\n\
    \    for i in range(string_length):\n        if string[i: i + sub_length] == substring:\n\
    \            count += 1\n    return count\n\n", "    return string.count(substring)\n",
  "    count=0\n    start = -1\n    end = -1\n\n    len_sub = substring.__len__()\n\
    \    len_str = len(string)\n\n    for i in range(len_str):\n        start = i\
    \ - len_sub\n        end = i + len_sub\n\n        if start < 0:\n            count+=1\n\
    \        elif start >= 0 and end < len_str:\n            count+=1\n        elif\
    \ start >= 0 and end >= len_str and substring[start:end]==string[i:i+len_sub]:\n\
    \            count+=1\n\n    return count\n", "    length = len(string)\n    count=0\n\
    \    for i in range(length):\n        if string.find(substring,i) != -1:\n   \
    \         count += 1\n    return count\n\n", "    length = 0\n    for i, c in\
    \ enumerate(string):\n        if c == substring[0]:\n            length = length\
    \ + 1\n            j = i\n            while string[j] == substring[j] and j <\
    \ len(string) - 1:\n                length += 1\n                j += 1\n    \
    \    else:\n            break\n    return length\n\n", "    return sum([1 for\
    \ c, r in enumerate(string) if substring[:len(r)] == r])\n\n", "    return sum(\n\
    \        1 for each in substring\n        if each in string\n        and string.find(each,\
    \ string.find(substring)) == string.find(substring)\n    )\n\n", "    \n    count\
    \ = 0\n    \n    string = string.lower()\n    substring = substring.lower()\n\
    \    \n    for i in range(len(string)):\n        if string[i] == substring[0]:\n\
    \            count += 1\n            \n            if i < len(substring) - 1:\n\
    \                if string[i+1] == substring[1]:\n                    count +=\
    \ 1\n                    \n                    if i < len(substring) - 2:\n  \
    \                      if string[i+2] == substring[2]:\n                     \
    \       count += 1\n                            \n                           \
    \ if i < len(substring) - 3:\n                                if string[i+3] ==\
    \ substring[3]:\n                                    count += 1\n            \
    \                        \n                                    if i < len(substring)\
    \ - 4:\n                                        if string[i+4] == substring[4]:\n\
    \                                            count += 1\n    \n    return count\n\
    \n", "    count = 0\n    for character in string:\n        if character == substring[0]:\n\
    \            count += 1\n            if substring[1:] == character:\n        \
    \        count += 1\n    return count\n\n", "    count = 0\n    for i in range(len(string)):\n\
    \        if string.find(substring, i) != -1:\n            count += 1\n    return\
    \ count\n", "    matches = 0\n    l = len(string)\n    while l > 0:\n        pos\
    \ = string.find(substring, l)\n        if pos < 0:\n            matches += 1\n\
    \            break\n        else:\n            l = pos\n            matches +=\
    \ 1\n    return matches\n\n", "    count = 0\n    length = len(string)\n    length\
    \ -= len(substring)\n    i = 0\n    while i < length and string[i] == substring[0]:\n\
    \        i += 1\n    while i < length:\n        while i + len(substring) < length\
    \ and string[i + len(substring)] == substring[0]:\n            i += len(substring)\n\
    \        count += 1\n        i += 1\n    return count\n\n", "    count = 0\n \
    \   pos = 0\n    while pos < len(string):\n        if string[pos:].startswith(substring):\n\
    \            count += 1\n        pos += 1\n    return count\n\n", "    count =\
    \ 0\n    pos = string.find(substring)\n    while pos != -1:\n        count +=\
    \ 1\n        pos = string.find(substring, pos + 1)\n    return count\n\n\n@timeit('total_time')",
  "    count = 0\n    for i in range(len(string)):\n        if string[i:].startswith(substring):\n\
    \            count += 1\n    return count\n\n", "    count = 0\n    for i in range(0,\
    \ len(string)):\n        if substring == string[i:i + len(substring)]:  # find\
    \ substring in string\n            count += 1\n    return count\n\n", "    count\
    \ = 0\n    sub_len = len(substring)\n\n    for index, char in enumerate(string):\n\
    \        if index == sub_len:\n            return count\n        if char == substring[index]:\n\
    \            count += 1\n    return count\n\n", "    # Initialize counters\n \
    \   count = 1\n    start = -1\n    end = -1\n    last = -1\n\n    # Iterate over\
    \ string and find substring\n    for i, c in enumerate(string):\n        if substring\
    \ == c:\n            count += 1\n\n        # Find beginning and end index\n  \
    \      if start == -1:\n            if string.find(substring, i) > 0:\n      \
    \          start = i\n            last = i\n        else:\n            if string.find(substring,\
    \ i) > 0:\n                end = i\n                last = (end + len(substring))\n\
    \n    # Return count\n    return count\n\n", "    count = 0\n    string_list =\
    \ list(string)\n    substring_list = list(substring)\n    pointer_start_index\
    \ = 0\n    pointer_end_index = 0\n    substring_index = 0\n    while pointer_start_index\
    \ < len(string):\n        if string[pointer_start_index:pointer_end_index] ==\
    \ substring_list[substring_index]:\n            substring_index += 1\n       \
    \     if substring_index == len(substring_list):\n                count += 1\n\
    \                break\n            else:\n                pointer_end_index =\
    \ pointer_start_index + 1\n                substring_index = 0\n        else:\n\
    \            substring_index = 0\n            pointer_end_index = pointer_start_index\
    \ + 1\n    return count\n\n", "    string_lower = string.lower()\n    substring_lower\
    \ = substring.lower()\n    string_length = len(string_lower)\n    substring_length\
    \ = len(substring_lower)\n\n    # Handle the trivial case\n    if string_length\
    \ == 0 or substring_length == 0:\n        return 0\n\n    if string_lower[-1]\
    \ == substring_lower[0]:\n        return string_length\n    if substring_lower[-1]\
    \ == string_lower[0]:\n        return substring_length\n\n    # Handle the common\
    \ case\n    if substring_length >= string_length:\n        substring = substring[0:string_length]\n\
    \    if string_length >= substring_length:\n        string = string[0:substring_length]\n\
    \n    if substring not in string:\n        return -1\n\n    sub_length = len(substring)\n\
    \n    count = 0\n    for i in range(0, string_length + 1 - sub_length):\n    \
    \    if substring[i:i + sub_length] == string_lower:\n            count += 1\n\
    \    return count\n\n", "    counter = 0\n    str_len = len(string)\n    if substring\
    \ not in string:\n        return 0\n    while counter < str_len:\n        if string.find(substring,\
    \ counter) != -1:\n            return counter\n        counter += 1\n    return\
    \ 0\n\n", "    substring_indexes = list(substring)\n    return len([i for i, item\
    \ in enumerate(string) if item in substring_indexes and substring_indexes.count(item)\
    \ == 1])\n", "    counter = 0\n    # Iterate over the string\n    for i, c in\
    \ enumerate(string):\n        if substring in c:\n            counter += 1\n \
    \       else:\n            # If substring is not in current string and there is\
    \ a next one, then increase counter\n            if i < len(string) - 1:\n   \
    \             counter += 1\n    return counter\n", "    return Counter(string.lower().count(substring.lower()))\n\
    \n", "    count = 0\n    # Find how many times substring occurs in string\n  \
    \  for i in range(len(string) - len(substring) + 1):\n        if string[i:i +\
    \ len(substring)] == substring:\n            count += 1\n    return count\n\n",
  "    str_length = len(string)\n    substr_length = len(substring)\n    return str_length\
    \ if str_length == substr_length else str_length - substr_length\n    ", "   \
    \ count=0\n    i=0\n    length = len(substring)\n    while i < len(string):\n\
    \        found = False\n        for j in range(len(substring)):\n            if\
    \ string[i:i+len(substring)] == substring[j]:\n                found = True\n\
    \                count +=1\n                break\n        if found:\n       \
    \     break\n        i += 1\n    return count\n", "    count = 0\n\n    for i\
    \ in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)]\
    \ == substring:\n            count += 1\n\n    return count\n\n", "    count =\
    \ 0\n    index = string.find(substring)\n    while index != -1:\n        index\
    \ = string.find(substring, index + 1)\n        count += 1\n    return count\n\n",
  "    count = 0\n    idx1 = string.find(substring)\n    idx2 = string.rfind(substring)\n\
    \    \n    while idx1 != -1 or idx2 != -1:\n        if (idx1 != -1) and (idx2\
    \ != -1) and (idx1 < idx2):\n            count += 1\n            idx1 = string.find(substring,\
    \ idx1 + 1)\n            idx2 = string.find(substring, idx2 + 1)\n        elif\
    \ (idx1 != -1) and (idx2 != -1) and (idx1 > idx2):\n            count += 1\n \
    \           idx1 = string.rfind(substring, 0, idx1)\n            idx2 = string.find(substring,\
    \ idx1 + 1)\n        elif (idx1 != -1) and (idx2 != -1) and (idx1 < idx2):\n \
    \           count += 1\n            idx1 = string.rfind(substring, 0, idx1)\n\
    \            idx2 = string.find(substring, idx2 + 1)\n        else:\n        \
    \    count += 1\n            idx1 = string.rfind(substring, 0, idx1)\n       \
    \     idx2 = string.rfind(substring, 0, idx2)\n\n    return count\n", "    return\
    \ string.count(substring)\n\nassert how_many_times(\"Hello\", \"o\") == 2\nassert\
    \ how_many_times(\"Hello\", \"l\") == 2\nassert how_many_times(\"Hello\", \"H\"\
    ) == 2\nassert how_many_times(\"Hello\", \"H\") == 0\nassert how_many_times(\"\
    Hello\", \"E\") == 2\nassert how_many_times(\"Hello\", \"el\") == 2\nassert how_many_times(\"\
    Hello\", \"lo\") == 2\nassert how_many_times(\"Hello\", \"ll\") == 2\nassert how_many_times(\"\
    Hello\", \"h\") == 2\nassert how_many_times(\"Hello\", \"h\") == 0\nassert how_many_times(\"\
    Hello\", \"e\") == 2\nassert how_many_times(\"Hello\", \"e\") == 0\nassert how_many_times(\"\
    Hello\", \"he\") == 2\nassert how_many_times(\"Hello\", \"eh\") == 2\nassert how_many_times(\"\
    Hello\", \"ehe\") == 2\nassert how_many_times(\"Hello\", \"ehel\") == 2\nassert\
    \ how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\",\
    \ \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"\
    Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert\
    \ how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\",\
    \ \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"\
    Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert\
    \ how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\",\
    \ \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"\
    Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert\
    \ how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\",\
    \ \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\") == 2\nassert how_many_times(\"\
    Hello\", \"ehell\") == 2\nassert how_many_times(\"Hello\", \"ehell\"", "    count\
    \ = 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i\
    \ + len(substring)] == substring:\n            count += 1\n    return count\n\n",
  "    count = 0\n    for letter in string:\n        if letter in substring:\n   \
    \         count += 1\n    return count\n\n", "    # Find index to start\n    index_to_start\
    \ = string.find(substring)\n\n    # Find index to end\n    index_to_end = string[::-1].find(substring[::-1])\n\
    \n    # Check if substring is in the string\n    if index_to_start == -1 or index_to_end\
    \ == -1:\n        return 0\n\n    # Find difference between index and start\n\
    \    difference = index_to_start - index_to_end\n\n    # Find length of substring\n\
    \    length = 0\n    while difference > 0:\n        length += difference\n   \
    \     difference -= 1\n\n    return length\n\n", "    return count_substrings(string,\
    \ substring)\n\n\n@timed"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
