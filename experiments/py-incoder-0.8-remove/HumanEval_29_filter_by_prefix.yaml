name: HumanEval_29_filter_by_prefix
language: py
prompt: "from typing import List\n\ndef filter_by_prefix(strings: List[str], prefix:\
  \ str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that\
  \ start with a given prefix.\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([], 'john') == []\n    assert\
  \ candidate(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx') == ['xxx',\
  \ 'xxxAAA', 'xxx']\n\ndef test_check():\n    check(filter_by_prefix)\n\ntest_check()\n"
completions: ["    return [string for string in strings if string.startswith(prefix)]\n\
    \n</cell>\n<cell>", "    return [x for x in strings if x.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n\n", " \
    \   return [x for x in strings if x.startswith(prefix)]\n</cell>\n<cell>\nfilter_by_prefix(names,\
    \ prefix=\"A\")\n</cell>\n<cell>\nfilter_by_prefix(names, prefix=\"B\")\n</cell>\n\
    <cell>\nfilter_by_prefix(names, prefix=\"C\")\n</cell>\n<cell>\nfilter_by_prefix(names,\
    \ prefix=\"D\")\n</cell>\n<text>\nWhat happens if we try and filter a list for\
    \ multiple prefixes?\n\n\n</text>\n<cell>\nfilter_by_prefix(names, prefix=\"A\"\
    , prefix=\"B\")\n</cell>\n<text>\nNothing happens. So it's basically a list comprehension\
    \ without an if statement.\n\nWhat if I want to preserve the order of the elements\
    \ in the list?\n\n\n</text>\n<cell>\nfilter_by_prefix(names, prefix=\"A\", prefix=\"\
    B\", prefix=\"C\")\n</cell>\n<text>\nNo problem! The order of the elements matches\
    \ that of the if statement above.\n\nThis might not be ideal and we can get around\
    \ it with something called a list comprehension.\n\nA list comprehension is a\
    \ lot like a generator function. The following code will generate a list of squared\
    \ numbers from 1 to 100:\n\n\n</text>\n<cell>\nsquares = [x ** 2 for x in range((101))]\n\
    squares\n</cell>\n<text>\nThis code is equivalent to the following:\n\n\n</text>\n\
    <cell>\nsquares = []\nfor x in range(101):\n    squares.append(x ** 2)\n</cell>\n\
    <text>\nThe only difference is that a generator function will never store the\
    \ entire list in memory. Generators are very useful as they allow us to iterate\
    \ over lists as we go along and also are a lot like list comprehensions except\
    \ they don't have an if statement that filters the list. The following code will\
    \ generate a list of squared numbers from 1 to 100:\n\n\n</text>\n<cell>\nsquares\
    \ = (x ** 2 for x in range((101)))\nsquares\n</cell>\n<text>\nThis code is equivalent\
    \ to the following:\n\n\n</text>\n<cell>\nsquares = []\nfor x in range((101)):\n\
    \    squares.append(x ** 2)\n</cell>\n<text>\nWe can use this generator function\
    \ with other functions as well, such as sum():\n\n\n</text>\n<cell>\nsum(squares)\n\
    </cell>\n<text>\nIn this example, we are using the list comprehension version\
    \ of the sum function. Let's have a look at a list comprehension that will multiply\
    \ all numbers in a list:\n\n\n</text>\n<cell>\nnumbers = [1, 2, 3, 4, 5]\n[x *\
    \ 2 for x in numbers]\n</cell>\n<text>\nRemember that the ", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n</cell>\n<cell>\nstrings\
    \ = [ 'Bruce Wayne', 'Miss Scarlett', 'Kanye West', 'Harrison Ford' ]\nprefix\
    \ = 'Miss'\n</cell>\n<cell>\nfilter_by_prefix(strings, prefix)\n</cell>\n<cell>",
  "    return [string for string in strings if string.startswith(prefix)]\n</cell>\n\
    <cell>\nfilter_by_prefix([\"Chair\", \"Computer\", \"Mouse\"], prefix=\"C\")\n\
    </cell>\n<cell>\nfilter_by_prefix([\"Chair\", \"Computer\", \"Mouse\"], prefix=\"\
    C\")\n</cell>\n<cell>\nfilter_by_prefix([\"Chair\", \"Computer\", \"Mouse\"],\
    \ prefix=\"C\")\n</cell>\n<cell>\nfilter_by_prefix([\"Chair\", \"Computer\", \"\
    Mouse\"], prefix=\"C\")\n</cell>\n<cell>\nfilter_by_prefix([\"Chair\", \"Computer\"\
    , \"Mouse\"], prefix=\"C\")\n</cell>\n<cell>\nfilter_by_prefix([\"Chair\", \"\
    Computer\", \"Mouse\"], prefix=\"C\")\n</cell>\n<text>\nFiltering with a Conditional\
    \ Statement\n\n</text>\n<cell>", "    return [s for s in strings if s.lower().startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n\n</cell>\n<text>\nRun\
    \ the following cell to test filter_by_prefix():\n\n\n</text>\n<cell>", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n</cell>\n<text>\nLet's keep our\
    \ sanity checks coming!\n\n\n</text>\n<cell>", "    return [s for s in strings\
    \ if s.lower().startswith(prefix.lower())]\n\n", "    return [x for x in strings\
    \ if x.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [x for x in strings if x.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.lower().startswith(prefix)]\n", "    return [x for x in strings\
    \ if x.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return list(filter(lambda string:\
    \ string.startswith(prefix), strings))\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n\n", "    return [s for s in strings if s.lower().startswith(prefix.lower())]\n",
  "    filtered = []\n    for s in strings:\n        if s.lower().startswith(prefix.lower()):\n\
    \            filtered.append(s)\n    return filtered\n", "    return [s for s\
    \ in strings if s.startswith(prefix)]\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n\n</code>\n<|/ q tags=python,pandas |>\n<| c\
    \ |>\nThis would be easier to debug if you provide a [mcve]. You could also provide\
    \ a sample data set, a sample input with expected output, and a sample output\
    \ for that input.\n<|/ c |>\n<| c |>\nI've added some sample data for you guys\
    \ to get an idea\n<|/ c |>\n<| c |>\nSorry, I thought I added enough samples for\
    \ you!\n<|/ c |>\n<| a dscore=1 |>\nLet's try:\n<code>\ns = df.apply(lambda x:\
    \ x.str.extract('(?P<val>.+?)(?=\\D)', expand=False).eq('val')).any(1)\ndf[s]\n\
    </code>\nOutput:\n<code>\n    Name    Address    Phone\n0    John    John St \
    \   555-555-5555\n2    Jane    Jane St    333-333-3333\n</code>\n<|/ a tags=python,pandas\
    \ |>\n<| c |>\nHey Rob, thanks for taking the time! It seems I forgot to specify\
    \ that my data has multiple characters that need to be matched with each other\
    \ but your code helped me figure that out. I edited my post with the solution.\
    \ Thanks again!\n<|/ c |>\n<| c |>\nThat's great to hear and glad I could help!\n\
    <|/ c |>\n<| a |>\nSo I got my solution after Rob's help!\nI added an extra condition\
    \ in my function for the case where there is a list of strings and a string.\n\
    <code>", "    return [string for string in strings if string.startswith(prefix)]\n\
    </cell>\n<cell>", "    return [s for s in strings if s.startswith(prefix)]\n\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [s for s in strings if s.lower().startswith(prefix.lower())]\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n", " \
    \   return [x for x in strings if x.lower().startswith(prefix.lower())]\n</cell>\n\
    <cell>\nprint(filter_by_prefix(sentences, \"what\"))\n</cell>\n<cell>", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", "    return [s for s in strings\
    \ if s.lower().startswith(prefix)]\n</cell>\n<cell>", "    return [string for\
    \ string in strings if string.startswith(prefix)]\n", "    return [string for\
    \ string in strings if string.startswith(prefix)]\n", "    return [x for x in\
    \ strings if x.startswith(prefix)]\n</cell>\n<text>\nFor convenience we define\
    \ a utility function that displays all of the above functions in one cell:\n\n\
    \n</text>\n<cell>", "    return [x for x in strings if x.startswith(prefix)]\n\
    </cell>\n<cell>", "    return [s for s in strings if s.lower().startswith(prefix)]\n",
  "    return [i for i in strings if i.startswith(prefix)]\n", "    return [x for\
    \ x in strings if x.startswith(prefix)]\n", "    return [i for i in strings if\
    \ i.startswith(prefix)]\n\n</cell>\n<text>\nRun the following cells to test your\
    \ filter_prefix function.\n\n\n</text>\n<cell>", "    return [s for s in strings\
    \ if s.startswith(prefix)]\n", "    return [i for i in strings if i.startswith(prefix)]\n",
  "    return list(filter(lambda string: string.startswith(prefix), strings))\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [x for x\
    \ in strings if x.startswith(prefix)]\n</cell>\n<text>\nExample\nLet's see how\
    \ we can filter our lists based on a prefix.\n\n\n</text>\n<cell>\nprint(filter_by_prefix([\"\
    hello\", \"world\", \"helloworld\"], \"hello\"))\n</cell>\n<text>\nChallenge 4\n\
    Write a function that takes a list of strings and a prefix. The function should\
    \ return a list of strings filtered for only those that start with the prefix.\n\
    \n\n</text>\n<cell>", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return list(filter(lambda string: string.startswith(prefix), strings))\n\n",
  "    return [string for string in strings if string.startswith(prefix)]\n\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n", " \
    \   return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.lower().startswith(prefix.lower())]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [i for i in strings if i.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.lower().startswith(prefix.lower())]\n", "  \
    \  return [string for string in strings if string.startswith(prefix)]\n\n", " \
    \   return [s for s in strings if s.startswith(prefix)]\n", "    return [i for\
    \ i in strings if i.startswith(prefix)]\n\n", "    filtered = []\n    for s in\
    \ strings:\n        if s.startswith(prefix):\n            filtered.append(s)\n\
    \    return filtered\n\n</code>\n<|/ a dscore=3 |>\n<| c |>\n`return s.startswith(prefix)`\
    \ returns `False` if a substring of `s` is longer than `prefix`.\n<|/ c |>\n<|\
    \ a tags=python,string,python-3.x,list,filter |>\nYou can use a list comprehension\
    \ with str.startswith.\n<code>\nl = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']\nprefix = ['def']\n\nresult = [s for s in l if s.startswith(prefix)]\n\
    print(result)\n</code>\nOutput:\n<code>\n['def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']\n\
    </code>\n<|/ a dscore=3 |>\n<| c |>\n`if s.startswith(prefix): print(s)` would\
    \ be more readable\n<|/ c |>\n<| a tags=python,string,python-3.x,list,filter dscore=1\
    \ |>\nYou can use regular expression to match the prefix using filter. For example:\n\
    <code>\nimport re\nl = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu']\nprefixes\
    \ = ['def']\n\nrex = re.compile('^{}$'.format('|'.join(prefixes)))\nnew_list =\
    \ list(filter(rex.match, l))\n</code>\n<|/ a |>\n<| c |>\nThis solution assumes\
    \ there are no duplicates in `prefixes`. Also, it is not compatible with Python\
    \ 3.\n<|/ c |>\n<| a dscore=0 tags=python,string,python-3.x,list,filter |>\nThe\
    \ same can be done using list comprehension with str.startswith() but this will\
    \ be more elegant as below:\n<code>\nl = ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr',\
    \ 'stu']\nprefix = ['def']\nresult = [x for x in l if x.startswith(prefix)]\n\
    </code>\n<|/ a |>\n<| c |>\nThis assumes there are no duplicates in `prefix`.\
    \ If there are duplicates, `result` will be `[]` instead of `['def']`.\n<|/ c\
    \ |>\n<| c |>\nI see, I have changed my answer accordingly. Thank you!\n<|/ c\
    \ |>\n<| a |>\nYou can use the filter function from itertools, for example:\n\
    <code>\nlist(filter(lambda x: len(x)>0,[i for i in list if len(i[0])>0]))\n</code>\n\
    <|/ a tags=python,string,python-3.x,list,filter dscore=0 |>\n<| a |>\nIf you want\
    \ to keep duplicates try this:\n<code>\nl = ", "    return [s for s in strings\
    \ if s.startswith(prefix)]\n\n", "    return [\n        s for s in strings if\
    \ s.startswith(prefix)\n    ]\n</cell>\n<cell>", "    return [x for x in strings\
    \ if x.startswith(prefix)]\n", "    prefixes = filter(lambda x: x.startswith(prefix),\
    \ strings)\n    return list(prefixes)\n\n", "    result = []\n    for s in strings:\n\
    \        if s.startswith(prefix):\n            result.append(s)\n    return result\n",
  "    return [string for string in strings if string.startswith(prefix)]\n</code>\n\
    Then, we can use these functions in the main file:\n<code>", "    return [x for\
    \ x in strings if x.startswith(prefix)]\n", "    return [s for s in strings if\
    \ s.startswith(prefix)]\n\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.startswith(prefix)]\n\n</cell>\n<cell>", " \
    \   return [i for i in strings if i.startswith(prefix)]\n", "    return [i for\
    \ i in strings if i.startswith(prefix)]\n\n", "    return [s for s in strings\
    \ if s.lower().startswith(prefix)]\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n", "    result = []\n    for string in strings:\n\
    \        if string.startswith(prefix):\n            result.append(string)\n  \
    \  return result\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n</cell>\n\
    <cell>\nprint([filter_by_prefix(myList, prefix) for prefix in [\"a\", \"b\", \"\
    c\", \"d\"]])\n</cell>\n<text>\nNote that filter_by_prefix is called on each string\
    \ in myList in one expression, not on each string in myList as we did before.\
    \ \nThis is actually a more \"pythonic\" way of writing this, as each string in\
    \ myList is passed into the function as an argument, rather than each string in\
    \ myList becoming an argument to filter_by_prefix. \nThe \"pythonic\" way of writing\
    \ this would be to use a list comprehension instead.\n\nIn fact, the filter_by_prefix\
    \ function above is the same as this list comprehension:\n\n\n</text>\n<cell>\n\
    filter_by_prefix([ \"apple\", \"banana\", \"cherry\" ], \"a\")\n</cell>\n<text>\n\
    The filter_by_prefix function above is a more generic version of the list comprehension\
    \ below:\n\n\n</text>\n<cell>\n[string for string in myList if string.startswith(prefix)]\n\
    </cell>\n<text>\nAnd we can do even better than this filter_by_prefix function\
    \ above by passing in a list of prefixes. For example, if we wanted to filter\
    \ out every string that starts with an \"a\" character:\n\n\n</text>\n<cell>\n\
    print([string for string in myList if not string.startswith(\"a\")])\n</cell>\n\
    <text>\nAnother handy function we have not discussed yet is zip.\nIt takes several\
    \ iterables, and combines them into tuples of the corresponding items. That is,\
    \ if we have three lists:\n\nmyList1 = [\"apple\", \"banana\", \"cherry\"]\nmyList2\
    \ = [\"dog\", \"cat\", \"fish\"]\nmyList3 = [\"horse\", \"kangaroo\"]\nand we\
    \ combine them into tuples like this:\n\nmyTuple = zip(myList1, myList2, myList3)\n\
    Then the value of myTuple will be something like this:\n\n(\"apple\", \"dog\"\
    , \"horse\")\n(\"banana\", \"cat\", \"kangaroo\")\n(\"cherry\", \"fish\",)\nIn\
    \ our example, this means that the first item in myTuple is a string from myList1,\
    \ the second item in myTuple is a string from myList2, etc.\n\nIn order to combine\
    \ the contents of several lists into tuples, we can use the zip function.\n\n\n\
    </text>\n<cell>\nzipped_list = zip(myList1, myList2, myList3)\n</cell>\n<text>\n\
    We can then print out the first item in this zipped_list, which is:\n\n\n</text>\n\
    <cell>\nprint(next(zipped_list))\n</cell>\n<text>\nWe can print out the ", " \
    \   return [s for s in strings if s.lower().startswith(prefix)]\n\n", "    return\
    \ [string for string in strings if string.startswith(prefix)]\n\n", "    return\
    \ [string for string in strings if string.startswith(prefix)]\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n", "    return [s for s in strings\
    \ if s.lower().startswith(prefix.lower())]\n\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n\n</cell>\n<cell>", "    return [s\
    \ for s in strings if s.lower().startswith(prefix.lower())]\n", "    return [s\
    \ for s in strings if s.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [i for i in strings\
    \ if i.startswith(prefix)]\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n\n", " \
    \   return [string for string in strings if string.startswith(prefix)]\n", " \
    \   return list(filter(lambda string: string.startswith(prefix), strings))\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  result = []\n    for string in strings:\n        if string.startswith(prefix):\n\
    \            result.append(string)\n    return result\n", "    return [i for i\
    \ in strings if i.lower().startswith(prefix.lower())]\n", "    return list(filter(lambda\
    \ string: string.startswith(prefix), strings))\n", "    return [x for x in strings\
    \ if x.startswith(prefix)]\n\n", "    return [s for s in strings if s.startswith(prefix)]\n\
    </code>\nThen you can filter_by_prefix(mylist, 'Ford')\nOr just use list comprehension:\n\
    <code>\n[s for s in mylist if s.startswith('Ford')]\n</code>\n<|/ a dscore=0 tags=list,python\
    \ |>\n<| a tags=list,python |>\n<code>\nl=list(filter(lambda x:x.startswith('Ford'),mylist))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 tags=list,python |>\nTry this :\n<code>",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=list,python dscore=0 |>\nOne way to do this would be to just filter\
    \ the list with an if statement:\n<code>", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n", "    return filter(lambda s: s.startswith(prefix),\
    \ strings)\n", "    prefixes = set([prefix.lower()])\n    filtered = []\n    for\
    \ s in strings:\n        if s.lower().startswith(prefix) and s not in prefixes:\n\
    \            filtered.append(s)\n    return filtered\n\n", "    return filter(lambda\
    \ s: s.startswith(prefix), strings)\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [s for s in strings if s.lower().startswith(prefix.lower())]\n", " \
    \   return [i for i in strings if i.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n\n</cell>\n<cell>\nfrom ipywidgets import\
    \ widgets\nwidgets.interact(filter_by_prefix, prefix=['', 'Hey', 'hello', 'HeyHey',\
    \ 'HeyHeyHey'], strings=listofstrings);\n</cell>\n<cell>", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [s for s\
    \ in strings if s.startswith(prefix)]\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n", "    return [string for string in strings\
    \ if string.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [i for i in strings if i.startswith(prefix)]\n\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [s for s\
    \ in strings if s.lower().startswith(prefix.lower())]\n\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    matches = []\n\
    \    for string in strings:\n        if string.startswith(prefix):\n         \
    \   matches.append(string)\n    return matches\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [s for s in strings\
    \ if s.lower().startswith(prefix)]\n", "    return list(filter(lambda string:\
    \ string.startswith(prefix), strings))\n\nprint(filter_by_prefix([\"Chad\", \"\
    Catherine\", \"Anne\", \"Jeremy\", \"Chip\", \"Daniel\", \"Robert\", \"Edward\"\
    , \"Sam\", \"Jack\"], \"Chad\"))\nprint(filter_by_prefix([\"Chad\", \"Catherine\"\
    , \"Anne\", \"Jeremy\", \"Chip\", \"Daniel\", \"Robert\", \"Edward\", \"Sam\"\
    , \"Jack\"], \"e\"))\n</cell>\n<text>\nAnd we can combine the two by joining the\
    \ filters by and operator, e.g.\n\n\n</text>\n<cell>", "    return [s for s in\
    \ strings if s.startswith(prefix)]\n", "    return filter(lambda s: s.startswith(prefix),\
    \ strings)\n\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n</cell>\n\
    <cell>\nfrom ipywidgets import interact\nfrom ipywidgets import interactive\n",
  "    return filter(lambda string: string.startswith(prefix), strings)\n\n", "  \
    \  return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [s for s in strings if s.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n\n", "    return [i for\
    \ i in strings if i.startswith(prefix)]\n\n\n</cell>\n<text>\nTests\nRun the cell\
    \ below to test your implementation. Do the test cells if you are not getting\
    \ the correct result.\n\n\n</text>\n<cell>", "    return [x for x in strings if\
    \ x.startswith(prefix)]\n\n", "    return [string for string in strings if string.startswith(prefix)]\n\
    </code>\n<|/ a dscore=1 |>\n<| c |>\nThank you for your answer! I forgot to mention\
    \ that my list is very large, so using list comprehension would make the program\
    \ quite slow.\n<|/ c |>\n<| a dscore=1 |>\nIf your lists are very large then I\
    \ suggest you go with a more efficient method. Just to point out, the list comprehension\
    \ you are using is creating a copy of the list every time you run it. It is very\
    \ very inefficient.\nIf you have a very large list then you should use generators.\
    \ I won't explain the difference between generators and lists here but you can\
    \ read this answer to get a better understanding of what I am talking about: https://stackoverflow.com/a/231767/1575352\n\
    <|/ a tags=python,algorithm,string |>\n<| c |>\nThe OP said the list was very\
    \ large, however the comment he put on another answer says it was a list with\
    \ 1,000,000 strings. I believe my answer is still valid for that case\n<|/ c |>\n\
    <| c |>\nI agree. Using a generator will be a more efficient method. My answer\
    \ was aimed at making his list comprehension run efficiently by making it a generator.\
    \ Not really a big deal but his list comprehension makes it very very inefficient\
    \ (making a copy)\n<|/ c |>\n<| a tags=python,algorithm,string |>\nIf the list\
    \ are very large you can filter them using a generator\n<code>", "    \n    return\
    \ [str for str in strings if str.startswith(prefix)]\n</cell>\n<cell>", "    return\
    \ [s for s in strings if s.lower().startswith(prefix.lower())]\n", "    return\
    \ [s for s in strings if s.lower().startswith(prefix.lower())]\n\n", "    return\
    \ [string for string in strings if string.startswith(prefix)]\n\n</cell>\n<text>\n\
    Implement a filter function to filter the words that are anagrams of words starting\
    \ with \"a\". Note that all inputs will be in lowercase.\n\n\n</text>\n<cell>",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return\
    \ [s for s in strings if s.lower().startswith(prefix.lower())]\n", "    return\
    \ [s for s in strings if s.startswith(prefix)]\n\n\n\"\"\"\n    # Implement the\
    \ solution\n    strings = [\"hello\", \"world\", \"foo\", \"bar\"]\n    prefix\
    \ = \"h\"\n    filtered_strings = filter_by_prefix(strings, prefix)\n    print(filtered_strings)\n\
    \"\"\"\n\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return [s for s in strings if s.lower().startswith(prefix.lower())]\n", " \
    \   return [x for x in strings if x.startswith(prefix)]\n</cell>\n<text>\nNow\
    \ let's try it:\n\n\n</text>\n<cell>\nl = [\"hello\", \"what\"]\nfilter_by_prefix(l,\
    \ \"h\")\n</cell>\n<text>\nRemember that this way of using filters is \"lazy\"\
    : it will only apply the filter operation to the elements that will be needed.\
    \ In the example, only elements that start with the letter \"h\" will be passed\
    \ through.\n\n\n</text>\n<cell>\nl = [\"hello\", \"what\"]\nfilter_by_prefix(l,\
    \ \"h\")\nprint(l)\n</cell>\n<text>\nWe can actually improve our filtering function\
    \ by making it more generic:\n\n\n</text>\n<cell>", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n</cell>\n<cell>", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n</cell>\n<cell>", "   \
    \ result = [s for s in strings if s.startswith(prefix)]\n    return result\n",
  "    return [s for s in strings if s.startswith(prefix)]\n", "    return [s for\
    \ s in strings if s.startswith(prefix)]\n</cell>\n<text>\nNow let's apply this\
    \ filter function to all words in our 'words' list:\n\n\n</text>\n<cell>\nwords_filtered\
    \ = filter_by_prefix(words, 'th')\n</cell>\n<cell>\nwords_filtered\n</cell>\n\
    <text>\nAs you can see, only words that start with 'th' are kept in the words\
    \ list, so not all words were filtered out.\n\n\n</text>\n<text>\nExercise 3\n\
    Now let's see a slightly different way of writing our code by implementing a helper\
    \ function filter_by_prefix.  Use this function to filter out words that don't\
    \ start with the letter 't'.\n\n\n</text>\n<cell>", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n    ", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n\nprint(filter_by_prefix([\"Abc\"\
    , \"deF\", \"Ghi\"], \"ab\"))\nprint(filter_by_prefix([\"Abc\", \"deF\", \"Ghi\"\
    ], \"Abc\"))\nprint(filter_by_prefix([\"Abc\", \"deF\", \"Ghi\"], \"de\"))\nprint(filter_by_prefix([\"\
    Abc\", \"deF\", \"Ghi\"], \"Ghi\"))\n</cell>\n<text>\nFiltering Function\n\n</text>\n\
    <cell>", "    return list(filter(lambda s: s.startswith(prefix), strings))\n",
  "    return [string for string in strings if string.startswith(prefix)]\n", "  \
    \  return list(filter(lambda s: s.startswith(prefix), strings))\n", "    return\
    \ [i for i in strings if i.startswith(prefix)]\n    ", "    return [s for s in\
    \ strings if s.startswith(prefix)]\n", "    strings = [s for s in strings if s.lower().startswith(prefix.lower())]\n\
    \    return strings\n", "    return [s for s in strings if s.lower().startswith(prefix.lower())]\n\
    </code>\n<|/ a tags=list,function,python |>\n<| a dscore=1 |>\n<code>\na=[1,2,3,4,5]\n\
    \nb=[\"x\",\"y\"]\n\nc=list(filter(lambda x:\"x\" in str(x).lower(),a))\n\nd=list(filter(lambda\
    \ x:\"y\" in str(x).lower(),a))\n\nprint(list(c))\n\nprint(list(d))\n</code>\n\
    <|/ a tags=list,function,python |>\n<| c |>\nHow does this work? Please add some\
    \ explanation to the code or remove it.\n<|/ c |>\n<| a tags=list,function,python\
    \ |>\n<code>", "    return [i for i in strings if i.startswith(prefix)]\n\n</code>\n\
    The test\n<code>\nimport unittest\n\nfrom filter_by import filter_by\nfrom test_data\
    \ import test_data\n", "    return [string for string in strings if string.startswith(prefix)]\n",
  "    return [i for i in strings if i.startswith(prefix)]\n\n</cell>\n<cell>", " \
    \   return [s for s in strings if s.lower().startswith(prefix.lower())]\n", " \
    \   return [s for s in strings if s.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n\n</cell>\n<cell>", " \
    \   return [s for s in strings if s.lower().startswith(prefix.lower())]\n", " \
    \   return [str for str in strings if str.startswith(prefix)]\n", "    result\
    \ = []\n    for item in strings:\n        if item.startswith(prefix):\n      \
    \      result.append(item)\n    return result\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n", "    return [string for string\
    \ in strings if string.startswith(prefix)]\n\n", "    return [i for i in strings\
    \ if i.startswith(prefix)]\n", "    return [s for s in strings if s.startswith(prefix)]\n",
  "    return [i for i in strings if i.startswith(prefix)]\n\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n", "    return [string\
    \ for string in strings if string.startswith(prefix)]\n\n</cell>\n<text>\nNow\
    \ let's go over what these functions do:\n\n\n</text>\n<cell>", "    filtered_strings\
    \ = [string for string in strings if string.startswith(prefix)]\n    return filtered_strings\n\
    \nfiltered_strings = filter_by_prefix(examples, \"ab\")\nprint(filtered_strings)\n\
    \n</cell>\n<text>\nList Comprehensions\nList comprehensions provide a concise\
    \ way to create lists. When you are iterating through a large list you often don't\
    \ need to allocate memory to store all the data in memory. List comprehensions\
    \ allow you to construct a new list from a for loop.\n\n\n</text>\n<cell>", " \
    \   return [s for s in strings if s.startswith(prefix)]\n", "    return [x for\
    \ x in strings if x.startswith(prefix)]\n</cell>\n<cell>", "    filtered_strings\
    \ = []\n    for string in strings:\n        if string.startswith(prefix):\n  \
    \          filtered_strings.append(string)\n    return filtered_strings\n</cell>\n\
    <text>\nLet's test it on our example:\n\n\n</text>\n<cell>\nprefix = 'Prefix '\n\
    prefixed_input_strings = [prefix + s for s in input_strings]\nfiltered_strings\
    \ = filter_by_prefix(prefixed_input_strings, prefix)\n</cell>\n<text>\nAnd let's\
    \ print our results again:\n\n\n</text>\n<cell>\nfor s in filtered_strings:\n\
    \    print(s)\n</cell>\n<text>\nIn our case, we only had to filter the strings\
    \ that start with Prefix !\n\n\n</text>\n<text>\nWe can also use filter() instead\
    \ of the list comprehension:\n\n\n</text>\n<cell>\nprint(list(filter(lambda x:\
    \ not x.startswith(prefix), input_strings)))\n</cell>\n<text>\nWe just see that\
    \ the list comprehension works fine too.\n\n\n</text>\n<text>\nLet's do the same\
    \ but with filter():\n\n\n</text>\n<cell>\nprint(list(filter(lambda s: s.startswith(prefix),\
    \ input_strings)))\n</cell>\n<text>\nWe have already seen that the filter function\
    \ has another syntax which makes it even more concise:\n\n\n</text>\n<cell>\n\
    print(list(filter(lambda s: s.startswith(prefix), prefixed_input_strings)))\n\
    </cell>\n<text>\nLet's see how filter() works with multiple filters using the\
    \ filter() syntax:\n\n\n</text>\n<cell>\nprint(list(filter(lambda s: s.startswith('Prefix')\
    \ and len(s) > 5, input_strings)))\n</cell>\n<text>\nWe can even filter out empty\
    \ strings:\n\n\n</text>\n<cell>\nprint(list(filter(lambda s: s.startswith('Prefix')\
    \ and len(s) > 5, input_strings)))\n</cell>\n<text>\nIt works just like filter(),\
    \ but it also accepts and returns functions. Let's use a function that returns\
    \ a boolean value:\n\n\n</text>\n<cell>"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
