name: HumanEval_93_encode
language: py
prompt: "def encode(message: str) -> str:\n    \"\"\"\n    Write a function that takes\
  \ a message, and encodes in such a \n    way that it swaps case of all letters,\
  \ replaces all vowels in \n    the message with the letter that appears 2 places\
  \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
  \ \n    \n    Examples:\n            \"\"\"\n"
tests: "def check(candidate):\n    assert candidate('TEST') == 'tgst'\n    assert\
  \ candidate('Mudasir') == 'mWDCSKR'\n    assert candidate('YES') == 'ygs'\n    assert\
  \ candidate('This is a message') == 'tHKS KS C MGSSCGG'\n    assert candidate('I\
  \ DoNt KnOw WhAt tO WrItE') == 'k dQnT kNqW wHcT Tq wRkTg'\n\ndef test_check():\n\
  \    check(encode)\n\ntest_check()\n"
completions: ["            \n            >>> encode(\"I am so happy\")\n         \
    \   'zxc'\n            \n            Input: I am so happy\n            Output:\
    \ zxc\n            \n            Input: Hi there\n            Output: hxc\n  \
    \          \n            Input: I am so happy \n            Output: gkj\n    \
    \        \n            Input: I am so happy \n            Output: gkj\n      \
    \      \n            Input: I am so happy \n            Output: gkj\n        \
    \    \n            Input: I am so happy \n            Output: gkj\n          \
    \  \n            Input: I am so happy \n            Output: gkj\n            \n\
    \            Input: I am so happy \n            Output: gkj\n            \n  \
    \          Input: I am so happy \n            Output: gkj\n            \n    \
    \        Input: I am so happy \n            Output: gkj\n            \n      \
    \      Input: I am so happy \n            Output: gkj\n            \n        \
    \    Input: I am so happy \n            Output: gkj\n            \n          \
    \  Input: I am so happy \n            Output: gkj\n            \n            Input:\
    \ I am so happy \n            Output: gkj\n            \n            Input: I\
    \ am so happy \n            Output: gkj\n            \n            Input: I am\
    \ so happy \n            Output: gkj\n            \n            Input: I am so\
    \ happy \n            Output: gkj\n            \n            Input: I am so happy\
    \ \n            Output: gkj\n            \n            Input: I am so happy \n\
    \            Output: gkj\n            \n            Input: I am so happy \n  \
    \          Output: gkj\n            \n            Input: I am so happy \n    \
    \        Output: gkj\n            \n            Input: I am so happy \n      \
    \      Output: gkj\n            \n            Input: I am so happy \n        \
    \    Output: gkj\n            \n            Input: I am so happy \n          \
    \  Output: gkj\n            \n            Input: I am so happy \n            Output:\
    \ gkj\n            \n            Input: I am so happy \n            Output: gkj\n\
    \            \n            Input: I am so happy \n            Output: gkj\n  \
    \          \n            Input: I am so happy \n            Output: gkj\n    \
    \        \n            Input: I am so happy \n            Output: gkj\n      \
    \      \n            Input: I am so happ", "            Input: \"apple\"\n   \
    \         Output: \"eerrr\"\n\n            Input: \"aeroplane\"\n            Output:\
    \ \"eerrrrr\"\n\n            Input: \"rabbit\"\n            Output: \"rrbrb\"\n\
    \n            Input: \"chicken\"\n            Output: \"cicken\"\n\n         \
    \   Input: \"rabbit cat\"\n            Output: \"rrbrbt ct\"\n            \"\"\
    \"\n            \n    \n    encode_dict = {'a': '1', 'e': '2', 'i': '3', 'o':\
    \ '4', 'u': '5'}\n    message = message.replace(\" \", \"\") # to remove white\
    \ spaces\n    message = message.lower() # to remove capital letters\n    message\
    \ = message.upper() # to remove small letters\n    for letter in message:\n  \
    \      for k,v in encode_dict.items():\n            if letter == k:\n        \
    \        message = message.replace(letter, v)\n        message = message.replace(\"\
    \ \", \"\")\n        \n    return message\n</cell>\n<cell>\nencode(message)\n\
    </cell>\n<text>\n2.5 Completing the Problem Set\nThe last problem set was completed\
    \ before we began testing our code. \nWe are going to be using a slightly different\
    \ approach to solving this problem. \nWe are going to use a recursive function.\
    \ This technique is sometimes referred to as iterative deepening.\n\n2.5.1 Problem\
    \ 1\nWrite a recursive function called rev_encode which takes a message and an\
    \ integer k. \nIt should encode the message according to the following rules:\
    \ \nIf the length of the message is less than k, it returns that message. \nIf\
    \ k is 0, it returns that message. \nIf the length of the message is greater than\
    \ k, it returns rev_encode(message , k-1) + encode(message[k:]) \n\nThis function\
    \ should test your function:\n\n\n</text>\n<cell>", "            \n    encode(\"\
    \"\"\n    My name is Kris\n    \"\"\")\n    \n\n    \n    \"\"\"\n    \n\n</cell>\n\
    <cell>", "            message = input ('Enter message: ')\n            message\
    \ = decode(message)\n            print(message)\n            \"\"\"\n        \
    \    Enter message: HeLLo\n            Hello \n    \"\"\"\n    \n    # initialize\
    \ an empty string\n    encoded_message = ''\n    \n    # for each character in\
    \ the message\n    for char in message:\n        \n        # ignore spaces\n \
    \       if char == ' ':\n            continue\n            \n        # convert\
    \ all uppercase letters to lowercase\n        lowercase_char = ''.join([\n   \
    \         char if char.isupper() else char.lower()\n            for char in char\n\
    \        ])\n            \n        # find vowel\n        vowels = ['a','e','i','o','u']\n\
    \        for vowel in vowels:\n            if lowercase_char.find(vowel) != -1:\n\
    \                \n                # find vowel 2 places ahead of vowel\n    \
    \            vowel_2_places_ahead = lowercase_char.find(vowel) + 2\n         \
    \       \n                # swap vowel for vowel 2 places ahead\n            \
    \    encoded_message = encoded_message + \\\n                    lowercase_char[vowel_2_places_ahead]\n\
    \                \n                # remove vowel\n                lowercase_char\
    \ = lowercase_char.replace(vowel,\"\")\n                \n        # swap remaining\
    \ lowercase letters\n        encoded_message = encoded_message + lowercase_char\n\
    \            \n    # return encoded message\n    return encoded_message\n", " \
    \           encode(\"Hello World\")\n            \"hELLO worLd\"\n           \
    \ \"\"\"\n    \"\"\"\n    message = message.casefold()\n    message = message.replace('a',\
    \ 'A')\n    message = message.replace('e', 'A')\n    message = message.replace('i',\
    \ 'A')\n    message = message.replace('o', 'A')\n    message = message.replace('u',\
    \ 'A')\n    message = message.replace('A', 'a')\n    message = message.replace('E',\
    \ 'e')\n    message = message.replace('I', 'i')\n    message = message.replace('O',\
    \ 'o')\n    message = message.replace('U', 'u')\n    return message\n</cell>\n\
    <cell>", "    encode = encode(message)\n    print(encode(\"\"\"\n    Hello\n \
    \   Iam\n    Jane\n    Bye\n    \"\"\"))\n    \n    >> hEllo\n    >> iam\n   \
    \ >> jANe\n    >> bye\n    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u', 'y'}\n\
    \    message = message.lower()\n    letters = list(message)\n    letters = [letter.replace(letter,\
    \ letter[::-1]).upper() for letter in letters]\n    \n    counts = Counter(letters)\n\
    \    new_message = ''\n    for letter in letters:\n        if letter in vowels:\n\
    \            letter = letter[:2].upper() + letter[2:]\n        new_message +=\
    \ letter\n    \n    counts = Counter(new_message)\n    for letter, count in counts.items():\n\
    \        if count > 1:\n            new_message = new_message.replace(letter,\
    \ letter + str(count))\n    return new_message\n</cell>\n<cell>\nencode(\"\"\"\
    \n    Hello\n    Iam\n    Jane\n    Bye\n    \"\"\")\n</cell>\n<cell>\nencode(\"\
    \"\"\n    Hello\n    Iam\n    Jane\n    Bye\n    \"\"\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function encode that converts every other letter into \na capital\
    \ letter. Assume only letters. \nFor example, encode(\"Hello\") returns \"Hllo\"\
    . \nHint: you can use the string.replace() function to do this!\n\n\n</text>\n\
    <cell>", "    >>> encode(u'Hello World')\n    b'eHllo Wrldd'\n    >>> encode(u'Aardvark')\n\
    \    b'aAldrvr'\n    \"\"\"\n    message = message.upper()\n    return ''.join([c\
    \ if c.isalpha() else c.lower() for c in message]).encode('ascii')\n", "    >>>\
    \ encode('hello world')\n    'HlloWrd'\n            \"\"\"\n    \n    Args:\n\
    \            message: \n            \n    Returns:\n            A string\n   \
    \ \"\"\"\n    \n    # your code goes here\n    message = message.lower()\n   \
    \ message = message.replace(\"o\", \"0\")\n    message = message.replace(\"a\"\
    , \"1\")\n    message = message.replace(\"e\", \"2\")\n    message = message.replace(\"\
    i\", \"3\")\n    message = message.replace(\"u\", \"4\")\n    message = message.replace(\"\
    r\", \"5\")\n    message = message.replace(\"s\", \"6\")\n    message = message.replace(\"\
    t\", \"7\")\n    message = message.replace(\"n\", \"8\")\n    message = message.replace(\"\
    m\", \"9\")\n    message = message.replace(\"l\", \"10\")\n    message = message.replace(\"\
    d\", \"11\")\n    message = message.replace(\"h\", \"12\")\n    message = message.replace(\"\
    w\", \"13\")\n    message = message.replace(\"g\", \"14\")\n    message = message.replace(\"\
    f\", \"15\")\n    message = message.replace(\"v\", \"16\")\n    message = message.replace(\"\
    b\", \"17\")\n    message = message.replace(\"j\", \"18\")\n    message = message.replace(\"\
    y\", \"19\")\n    message = message.replace(\"j\", \"20\")\n    message = message.replace(\"\
    j\", \"21\")\n    message = message.replace(\"k\", \"22\")\n    message = message.replace(\"\
    q\", \"23\")\n    message = message.replace(\"y\", \"24\")\n    message = message.replace(\"\
    h\", \"25\")\n    message = message.replace(\"y\", \"26\")\n    message = message.replace(\"\
    y\", \"27\")\n    message = message.replace(\"u\", \"28\")\n    message = message.replace(\"\
    r\", \"29\")\n    message = message.replace(\"c\", \"30\")\n    message = message.replace(\"\
    u\", \"31\")\n    message = message.replace(\"a\", \"32\")\n    message = message.replace(\"\
    o\", \"33\")\n    message = message.replace(\"b\", \"34\")\n    message = message.replace(\"\
    d\", \"35\")\n    message = message.replace(\"p\", \"36\")\n    message = message.replace(\"\
    t\", \"37\")\n    message = message.replace(\"m\", \"38\")\n    message = message.replace(\"\
    l\", \"39\")\n    message = message.replace(\"k\", \"40\")\n    message = message.replace(\"\
    s\", \"41\")\n    message = message.replace(\"h\", \"42\")\n    message = message.replace(\"\
    b\", \"43\")\n    message = message.replace(\"m\", \"44\")\n    message = message.replace(\"\
    l\", \"45\")\n    message = message.replace(\"d\", \"46\")\n    message = message.replace(\"\
    f\", \"47\")\n    message = message.replace(\"q\", \"48\")\n    message = message.replace(\"\
    r\", \"49\")\n    message = message.replace(\"v\", \"50\")\n    message = message.replace(\"\
    m\", \"51\")\n    message = message.replace(\"n\", \"52\")\n    message = message.replace(\"\
    h\", \"53\")\n    message = message.replace(\"w\", \"54", "            Houdini:\
    \ I love you!\n            \n            Houdini: I hOE  you!\n            \n\
    \            Houdini: I hE  O  u  r  l  d  i  e  !\n            \"\"\"\n    \"\
    \"\"\n    def encode(message: str) -> str:\n    \"\"\"\n    Write a function that\
    \ takes a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n            Houdini: I love you!\n\
    \            \n            Houdini: I hOE  you!\n            \n            Houdini:\
    \ I hE  O  u  r  l  d  i  e  !\n            \"\"\"\n    \"\"\"\n    message =\
    \ message.replace('i','hOE')\n    message = message.replace('e','hE')\n    message\
    \ = message.replace('o','u')\n    message = message.replace('u','r')\n    message\
    \ = message.replace('l','d')\n    message = message.replace('d','i')\n    message\
    \ = message.replace('!','!')\n    return message\n</cell>\n<cell>\nprint(encode('Houdini:\
    \ I love you!'))\n</cell>\n<cell>", "    message = encode(\"I am a string!\")\n\
    \    print(message) \"\"\"\n\n    message = encode(message)\n    \n    vowels\
    \ = list(\"aeiou\")\n    \n    translated = \"\"\n    \n    \n    for char in\
    \ message:\n        \n        if char in vowels:\n            \n            translated\
    \ += chr(ord(char) + 2)\n            \n        else:\n            \n         \
    \   translated += char\n        \n    return translated\n\n", "            message\
    \ = (\"HELLO WORLD. How ARE you?\")\n            encoded_message = encode(\"HELLO\
    \ WORLD. How ARE you?\")\n            decoded_message = decode(encoded_message)\n\
    \            print(message)\n            print(encoded_message)\n            print(decoded_message)\n\
    \            \n            # should print:\n            #       HELLO WORLD. How\
    \ ARE you?\n            #       HELLO WORLD. How ARE you?\n            #     \
    \  HELLO WORLD. How ARE you?\n            \n            \n    \"\"\"\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    def encode(message: str) -> str:\n\
    \        \"\"\"\n        Write a function that takes a message, and encodes in\
    \ such a \n        way that it swaps case of all letters, replaces all vowels\
    \ in \n        the message with the letter that appears 2 places ahead of that\
    \ \n        vowel in the english alphabet.\n        \n        Arguments:\n   \
    \         message -- (str) message to encode\n        \n        Returns:\n   \
    \         encoded message -- (str) encoded message\n        \"\"\"\n        #\
    \ TODO\n        encoded = \"\"\n        return encoded\n    \n    def decode(message:\
    \ str) -> str:\n        \"\"\"\n        Write a function that takes a message,\
    \ and decodes in such a \n        way that it replaces all vowels in the message\
    \ with the letter \n        that appears 2 places ahead of that vowel in the english\
    \ alphabet.\n        \n        Arguments:\n            message -- (str) message\
    \ to decode\n        \n        Returns:\n            decoded message -- (str)\
    \ decoded message\n        \"\"\"\n        # TODO\n        decoded = \"\"\n  \
    \      return decoded\n    \n    return encode(message)\n</cell>\n<cell>", " \
    \           \n            encode(\"hello\") \n            # returns \"ihvl\" \n\
    \            encode(\"hello world\") \n            # returns \"ihvl wrdl\" \n\
    \            encode(\"hello world of course\") \n            # returns \"ihvl\
    \ wrdl of cse\" \n            \n            \n            \n            ```\n\
    \    \"\"\"\n    \n    # Store the english alphabet as a dictionary key\n    alphabet\
    \ = { \n        \n        # Capital letters are all upper case\n        \"A\"\
    : \"A\", \n        \"B\": \"B\", \n        \"C\": \"C\", \n        \"D\": \"D\"\
    , \n        \"E\": \"E\", \n        \"F\": \"F\", \n        \"G\": \"G\", \n \
    \       \"H\": \"H\", \n        \"I\": \"I\", \n        \"J\": \"J\", \n     \
    \   \"K\": \"K\", \n        \"L\": \"L\", \n        \"M\": \"M\", \n        \"\
    N\": \"N\", \n        \"O\": \"O\", \n        \"P\": \"P\", \n        \"Q\": \"\
    Q\", \n        \"R\": \"R\", \n        \"S\": \"S\", \n        \"T\": \"T\", \n\
    \        \"U\": \"U\", \n        \"V\": \"V\", \n        \"W\": \"W\", \n    \
    \    \"X\": \"X\", \n        \"Y\": \"Y\", \n        \"Z\": \"Z\", \n        \n\
    \        # Small letters are all lower case\n        \"a\": \"a\", \n        \"\
    b\": \"b\", \n        \"c\": \"c\", \n        \"d\": \"d\", \n        \"e\": \"\
    e\", \n        \"f\": \"f\", \n        \"g\": \"g\", \n        \"h\": \"h\", \n\
    \        \"i\": \"i\", \n        \"j\": \"j\", \n        \"k\": \"k\", \n    \
    \    \"l\": \"l\", \n        \"m\": \"m\", \n        \"n\": \"n\", \n        \"\
    o\": \"o\", \n        \"p\": \"p\", \n        \"q\": \"q\", \n        \"r\": \"\
    r\", \n        \"s\": \"s\", \n        \"t\": \"t\", \n        \"u\": \"u\", \n\
    \        \"v\": \"v\", \n        \"w\": \"w\", \n        \"x\": \"x\", \n    \
    \    \"y\": \"y\", \n        \"z\": \"z\"\n    }\n    \n    # Define the rules\
    \ for transforming all letters\n    def rule(letter: str) -> str:\n        \n\
    \        # If the letter is in the english alphabet, return its value \n     \
    \   if letter in alphabet:\n            return alphabet[letter]\n        \n  \
    \      # If the letter is in lower case and \n        if letter.islower():\n \
    \           # return capital letter that appears 2 places ahead\n            return\
    \ alphabet[letter.lower()][2:]\n        \n        # If the letter is in upper\
    \ case\n        if letter.isupper():\n            # return small letter ", " \
    \           Encode('The quick brown fox jumps over the lazy dog')\n          \
    \  'Mzdz lkjf qlvf qdbnj vbmp xofv zmpq vrxj'\n            \"\"\"\n    \"\"\"\n\
    \    return ''.join([\n        char if char.isupper() else \n        chr(ord('A')\
    \ + alpha.index(char.lower()) - alpha.index(char.upper()) - 2)\n        for char\
    \ in message\n    ])\n</cell>\n<cell>", "        encode(\"Hello\")\n         \
    \   \"!hEllo\"\n            \"\"\"\n            \n    Args:\n        message (str):\
    \ a message to be encoded\n    Returns:\n        The message after being encoded.\
    \ \n    \"\"\"\n    \n    message = message.lower()\n    \n    message = message.replace(\"\
    \ \", \"_\")\n    \n    vowels = \"aAeEiIoOuU\"\n    \n    vowel_positions = []\n\
    \    \n    for vowel in vowels:\n        \n        if vowel in message:\n    \
    \        \n            pos = message.find(vowel)\n            \n            vowel_positions.append((pos,\
    \ vowel))\n            \n    vowel_positions.sort()\n    \n    encoded_message\
    \ = \"\"\n    \n    while vowel_positions:\n        \n        position, letter\
    \ = vowel_positions.pop()\n        \n        if position + 1 == len(message):\n\
    \            \n            encoded_message += letter\n            \n        else:\n\
    \            \n            encoded_message += letter.replace(position + 1, position\
    \ + 2)\n            \n    return encoded_message\n\nencoded_message = encode(message)\n\
    print(encoded_message)\n</cell>\n<text>\nProblem 3: Reverse a Message\nFor extra\
    \ credit, try to reverse engineer the encode function by \nensuring that the decode\
    \ function works properly. The reverse of \nthe message is supposed to be \"Hello\"\
    \ not \"!hEllo\".\n\nFor example, if your message was encoded as \"!hEllo\", your\
    \ reverse \nmessage should be \"Hello\".\n\n\n</text>\n<cell>", "    >>> encode(\"\
    I love you\")\n    \"NI LOVE YOOU\"\n    \n    >>> encode(\"I love you too\")\n\
    \    \"I LOVE YOU TOO\"\n    \n    >>> encode(\"I LOVE YOU\")\n    \"NI LOVE YOOU\"\
    \n    \n    >>> encode(\"I LOVE YOU MUCH\")\n    \"NI LOVE YOOU MUCH\"\n    \"\
    \"\"\n    encoded = \"\"\n    \n    for letter in message:\n        \n       \
    \ if letter.islower():\n            encoded += letter\n        \n        elif\
    \ letter.isupper():\n            encoded += letter.upper()\n        \n       \
    \ else:\n            \n            letter_upper = letter.upper()\n           \
    \ letter_vowel_index = letter_upper.find(\"A\") + 2\n            letter_vowel\
    \ = letter_upper[letter_vowel_index]\n            \n            letter_lower_vowel\
    \ = letter_upper[letter_vowel_index - 1]\n            \n            if letter_lower_vowel.islower()\
    \ or letter_lower_vowel.isupper():\n                \n                encoded\
    \ += letter_lower_vowel\n                \n            else:\n               \
    \ \n                encoded += letter_vowel\n                \n              \
    \  letter_letter_letter_letter_vowel = letter_upper[letter_vowel_index + 2:]\n\
    \                \n                if len(letter_letter_letter_letter_vowel) >=\
    \ 2:\n                    \n                    letter_letter_letter_letter_vowel_2\
    \ = letter_letter_letter_letter_vowel[:1]\n                    \n            \
    \        if letter_letter_letter_letter_letter_vowel_2.islower() or letter_letter_letter_letter_letter_vowel_2.isupper():\n\
    \                        \n                        encoded += letter_letter_letter_letter_vowel_2\n\
    \                        \n                    else:\n                       \
    \ \n                        encoded += letter_letter_letter_letter_vowel_2.upper()\n\
    \            \n    return encoded\n", "                >>> encode('apple')\n \
    \               'eellp'\n            \n            \"\"\"\n    \"\"\"\n    vowels\
    \ = \"aeiouAEIOU\"\n    vowel_index = [\"a\",\"e\",\"i\",\"o\",\"u\",\"A\",\"\
    E\",\"I\",\"O\",\"U\"]\n    \n    message = message.lower()\n    message = message.replace(\"\
    e\",\"E\").replace(\"i\",\"I\").replace(\"o\",\"O\").replace(\"u\",\"U\")\n  \
    \  \n    for i in vowels:\n        new_string = message.replace(i,vowel_index.index(i))\n\
    \    return new_string\n        \n</cell>\n<cell>\nencode(encode(\"apple\"))\n\
    </cell>\n<cell>", "    >>> encode(\"Hello\")\n    'Nytbiv'\n    \"\"\"\n    #\
    \ YOUR CODE HERE\n    return \"\"\n    ", "        exampleMessage = encode(\n\
    \        message=\"\"\"\n        My name is Joe. \n        I love to write computer\
    \ code.\n        I don't want to be named Joe.\n        \"\"\"\n    )\n    \"\"\
    \"\n    \n    \"\"\"\n    \n\n    \"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n\
    \    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n\
    \    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \n    \n    \n\
    \    \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n    \n    \n    \n    \n    \n    \"\"\"\n    # Your code here\n    \n\
    \    \n    \n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \n\
    \    \"\"\"\n    # Your code here\n    \n    \n    \n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n    \n  \
    \  \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n    \n  \
    \  \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n    \n  \
    \  \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n    \n  \
    \  \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n    \n  \
    \  \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n    \n    \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n    \n    \"\"\"\n    # Your code here\n    \n  \
    \  \n    \"\"\"\n    # Your code here\n    \n    \n    \"\"\"\n    # Your code\
    \ here\n", "    print(encode('How are you?'))\n    \n    Encodes to:\n       \
    \     Hay ay uu?\n            \n            Note: This only prints out the encoded\
    \ message and returns \n            None so it must be assigned to a variable.\n\
    \    \"\"\"\n    #your code here\n    vowels = ['a','e','i','o','u']\n    alphabet\
    \ = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z']\n\
    \    \n    encoded_message = \"\"\n    for i,char in enumerate(message):\n   \
    \     if char in alphabet:\n            encoded_message += char\n        elif\
    \ char in vowels:\n            encoded_message += alphabet[alphabet.index(char)+1]\n\
    \        else:\n            encoded_message += char\n\n    return encoded_message\n\
    print(encode('How are you?'))\n</cell>\n<text>\nProblem 4\nWrite a Python function\
    \ that takes in two lists, and then generates a list consisting of all possible\
    \ pairs \nof elements from the two lists. The function should return a list of\
    \ tuples. \nFor example, given the following lists: \n[1,2,3] and [3,4,5], your\
    \ function should return a list of tuples like so: \n[(1, 3), (2, 4), (3, 5)].\n\
    \n\n</text>\n<cell>", "            # encodes a message 'hello' into\n        \
    \    # 'h4l1o3' \n            >>> encode('hello')\n            'h4l1o3'\n    \
    \        \"\"\"\n            \n    Args:\n        message(str): the message to\
    \ be encoded\n\n    Returns:\n        encoded message\n    \"\"\"\n    \n    #\
    \ initialize an empty list to hold the resulting message\n    encoded_message\
    \ = []\n\n    # for each character in message\n    for character in message:\n\
    \n        # if the character is in the english alphabet\n        # then append\
    \ the character to the list\n        if character in alphabet:\n\n           \
    \ # append the character that comes 2 places\n            # ahead of that character\
    \ to the list\n            encoded_message.append(alphabet[alphabet.index(character)\
    \ + 2])\n            \n            # append the character that comes 1 place ahead\
    \ of \n            # the character to the list\n            encoded_message.append(alphabet[alphabet.index(character)])\n\
    \n        # if the character is NOT in the english alphabet\n        # then append\
    \ the character to the list\n        else:\n            encoded_message.append(character)\n\
    \n    # join all the encoded characters into a single string\n    encoded_message\
    \ = ''.join(encoded_message)\n\n    return encoded_message\n\n\n\"\"\"\nDON'T\
    \ MODIFY ANYTHING ABOVE HERE!\n\"\"\"\n", "            >>> encode('abaca')\n \
    \           'AbC'\n            >>> encode('abba')\n            'aba'\n       \
    \     >>> encode('aaa')\n            'aaa'\n    \"\"\"\n    \n    vowels = \"\
    aeiouAEIOU\"\n    encoded_message = \"\"\n    \n    # encode each letter in the\
    \ message\n    for letter in message:\n        # get the index of the letter in\
    \ the vowels\n        idx = vowels.index(letter)\n        \n        # get the\
    \ index of the letter that appears 2 places ahead of this one\n        # subtract\
    \ one so that we don't count the first letter\n        idx_2 = idx + 1\n     \
    \   \n        # if the letter is a vowel, encode it\n        if letter in vowels:\n\
    \            encoded_message += letter\n        # if the letter is NOT a vowel,\
    \ check if it is equal to the letter that\n        # appears 2 places ahead of\
    \ this one\n        elif letter != vowels[idx_2] and letter != vowels[idx]:\n\
    \            encoded_message += vowels[idx_2]\n        \n    return encoded_message\n\
    \n", "            message = \"The quick brown fox\"\n            encoded = encode(message)\n\
    \            print(encoded)\n            \"\"\"\n            \"T3h qU3w br4n fox4\"\
    \n    \"\"\"\n    return message.replace(\" \", \"\")\n\n", "            encode(\"\
    Hello World\")\n            >>>\"Khoor\"\n            \n            \n       \
    \     \"\"\"\n            encode(\"HELLO WORLD\")\n            >>>\"Khoorl\"\n\
    \    \n    \"\"\"\n    encoded_message = message\n    \n    for letter in message:\n\
    \        \n        if letter in 'aeiou':\n            encoded_message = encoded_message.replace(letter,\
    \ \n                                                       letters[letters.index(letter)//2])\
    \ \n    \n    return encoded_message\n</cell>\n<cell>", "            >>> encode(input(\"\
    Enter a message: \"))\n            Hello world\n            >>> encode(\"hello\
    \ world\")\n            Hlel orld\n            >>> encode(\"hello world!\")\n\
    \            Hlel orld!\n            >>> encode(\"Hello World\")\n           \
    \ Hlel orld\n            >>> encode(\"HELLO WORLD\")\n            Hlel orld\n\
    \            \"\"\"\n            \n    Args:\n        message: a string containing\
    \ letters, numbers, and punctuation\n    \n    Returns:\n        A string that\
    \ has been encoded using substitution cipher \n        rules\n    \n    Raises:\n\
    \        None\n    \n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "            assert encode(message)\
    \ == expected\n        \"\"\"\n    pass\n", "    >>> encode(\"\"\"My name is Tiger\"\
    \"\")\n    'Zmw is Tiger'\n    \n    >>> encode(\"\"\"My name is Melba\"\"\")\n\
    \    'Gbq is Melba'\n    \n    >>> encode(\"\"\"My name is Ziba\"\"\")\n    'Zmw\
    \ is Ziba'\n    \n    >>> encode(\"\"\"My name is Zaba\"\"\")\n    'Zmw is Ziba'\n\
    \    \n    >>> encode(\"\"\"My name is Xaba\"\"\")\n    'Gbq is Xaba'\n    \n\
    \    >>> encode(\"\"\"My name is Yaba\"\"\")\n    'Gbq is Yaba'\n    \n    >>>\
    \ encode(\"\"\"My name is Baza\"\"\")\n    'Gbq is Baza'\n    \n    >>> encode(\"\
    \"\"My name is Yaza\"\"\")\n    'Gbq is Yaza'\n    \n    >>> encode(\"\"\"My name\
    \ is Baza\"\"\")\n    'Gbq is Baza'\n    \n    >>> encode(\"\"\"My name is Zaza\"\
    \"\")\n    'Zmw is Zaza'\n    \n    >>> encode(\"\"\"My name is Zaza\"\"\")\n\
    \    'Zmw is Zaza'\n    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw\
    \ is Aaza'\n    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n\
    \    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n\
    \    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n    >>>\
    \ encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n    >>> encode(\"\
    \"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n    >>> encode(\"\"\"My name\
    \ is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n    >>> encode(\"\"\"My name is Aaza\"\
    \"\")\n    'Zmw is Aaza'\n    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n\
    \    'Zmw is Aaza'\n    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw\
    \ is Aaza'\n    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n\
    \    \n    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n\
    \    >>> encode(\"\"\"My name is Aaza\"\"\")\n    'Zmw is Aaza'\n    \n    >>>\
    \ encode(\"\"\"My ", "            print(encode('I love turtles'))\n          \
    \  print(encode('hi there'))\n            print(encode('I saw a turtle'))\n  \
    \          print(encode('turtles are my favorite animal'))\n            \"\"\"\
    \n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    letters =\
    \ [i for i in message]\n    \n    i = 0\n    \n    while i < len(message):\n \
    \       \n        if message[i] == message[i].upper():\n            letters[i]\
    \ = message[i].upper()\n        \n        elif message[i] in vowels:\n       \
    \     if message[i] == message[i-1]:\n                letters[i] = message[i+1]\n\
    \            else:\n                letters[i] = message[i]\n        \n      \
    \  i += 1\n        \n    return \"\".join(letters)\n</cell>\n<text>\nQ: Write\
    \ a function that takes a message, and encodes in such a way that it swaps case\
    \ of all letters, replaces all vowels in the message with the letter that appears\
    \ 2 places ahead of that vowel in the english alphabet. Assuming only letters.\n\
    \nExamples:\n\n</text>\n<cell>", "            >>> encode('aBcDeE')\n         \
    \   'aBcDeE'\n            >>> encode('abCDE')\n            'ABcDeE'\n        \
    \    >>> encode('aBcDE')\n            'AbCDE'\n            >>> encode('ABCDE')\n\
    \            'ABcDeE'\n            >>> encode('aBcDeE')\n            'aBcDeE'\n\
    \            >>> encode('abcde')\n            'abcde'\n            >>> encode('aBcDeE')\n\
    \            'aBcDeE'\n            >>> encode('abCDeE')\n            'abCDeE'\n\
    \            >>> encode('abCDeE')\n            'ABcDeE'\n            >>> encode('abcDeE')\n\
    \            'abcDeE'\n            >>> encode('ABcDeE')\n            'ABcDeE'\n\
    \            >>> encode('aBcDe')\n            'aBcDe'\n            >>> encode('aBcde')\n\
    \            'aBcde'\n            >>> encode('aBcde')\n            'aBcde'\n \
    \           >>> encode('aBcDe')\n            'aBcDe'\n            >>> encode('aBcDe')\n\
    \            'aBcDe'\n            >>> encode('abCDe')\n            'ABcDe'\n \
    \           >>> encode('abCde')\n            'ABcde'\n            >>> encode('abCde')\n\
    \            'ABcde'\n            >>> encode('ABCde')\n            'ABcde'\n \
    \           >>> encode('ABcde')\n            'ABcde'\n            >>> encode('abCDe')\n\
    \            'ABcDe'\n            >>> encode('abCde')\n            'ABcde'\n \
    \           >>> encode('abCde')\n            'ABcde'\n            >>> encode('abCDe')\n\
    \            'ABcDe'\n            >>> encode('aBCDe')\n            'aBCDe'\n \
    \           >>> encode('aBCde')\n            'aBCde'\n            >>> encode('aBCde')\n\
    \            'aBCde'\n            >>> encode('aBCDe')\n            'aBCDe'\n \
    \           >>> encode('aBCDe')\n            'aBCDe'\n            >>> encode('abCDe')\n\
    \            'ABcDe'\n            >>> encode('abCde')\n            'ABcde'\n \
    \           >>> encode('abCde')\n            'ABcde'\n            >>> encode('ABcde')\n\
    \            'ABcde'\n            >>> encode('aBCDe')\n            'aBCDe'\n \
    \           >>> encode('aBCde')\n            'aBCde'\n            >>> encode('aBCde')\n\
    \            'aBCde'\n            >>> encode('aBC", "            \n          \
    \  encode = lambda message : ''.join([ \n                                message[i]\
    \ if message[i].isupper() else \n                                message[i+1]\
    \ if message[i+1].isupper() else \n                                message[i+2]\
    \ if message[i+2].isupper() else \n                                message[i]\
    \ for i in [i for i in range(len(message)) \n                                \
    \                    if message[i].isalpha() ]])\n            \"\"\"\n    \"\"\
    \"\n    \n    return \"\".join([ \n                    message[i] if message[i].isupper()\
    \ else \n                    message[i+1] if message[i+1].isupper() else \n  \
    \                  message[i+2] if message[i+2].isupper() else \n            \
    \        message[i] for i in [i for i in range(len(message)) \n              \
    \                      if message[i].isalpha() ]])\n\n\"\"\"\n    ", "       \
    \     encode(encode(\"abc def\"))\n            Output: bcd\"\n    \"\"\"\n\n \
    \   letters = list(message)\n    \n    for i in range(len(letters)):\n       \
    \ letters[i] = letters[i].lower()\n\n    letter_counts = dict()\n\n    for i in\
    \ letters:\n        if i not in letter_counts.keys():\n            letter_counts[i]\
    \ = 1\n        else:\n            letter_counts[i] += 1\n\n    sorted_letter_counts\
    \ = sorted(letter_counts, key=letter_counts.get)\n    vowels = \"aeiouy\"\n\n\
    \    for i in sorted_letter_counts:\n        if letter_counts[vowels.index(i)]\
    \ > 2:\n            letters[vowels.index(i)] = letters[vowels.index(i)][1:] +\
    \ i[0]\n\n    return \"\".join(letters)\n</cell>\n<cell>\nassert encode(encode(\"\
    abc def\")) == \"bcd\"\nassert encode(encode(\"abcd efgh\")) == \"bcde\"\nassert\
    \ encode(encode(\"aaaaa bbbbb ccccc ddddd eeeee\")) == \"aadcbcdddeee\"\n</cell>\n\
    <cell>", "    >>> encode('hello')\n    'Hlllo'\n    \n    >>> encode('hillo')\n\
    \    'Hillo'\n    \n    >>> encode('hi')\n    'Hii'\n    \n    >>> encode('Hi')\n\
    \    'Hii'\n    \n    \"\"\"\n    \n    message_list = list(message)\n    for\
    \ index,letter in enumerate(message_list):\n        if letter.lower() in alphabet:\n\
    \            index_position = alphabet.index(letter.lower())\n            message_list[index]\
    \ = alphabet[(index_position+1)%26]\n    \n    return ''.join(message_list)\n\
    </cell>\n<cell>\nassert encode(\"hello\") == 'Hlllo'\nassert encode(\"hillo\"\
    ) == 'Hillo'\nassert encode(\"hi\") == 'Hii'\nassert encode(\"Hi\") == 'Hii'\n\
    </cell>\n<cell>", "        >>> encode('hello')\n        'HEllO'\n        >>> encode('hello\
    \ world')\n        'HllO wrld'\n        >>> encode('hello  world')\n        'HllO\
    \ wrld'\n        >>> encode('hello world  ')\n        'HllO wrld  '\n        >>>\
    \ encode('  ')\n        '  '\n    \"\"\"\n    vowels = 'aeiouy'\n    replacement\
    \ = 'AEIOUY'\n    new_message = ''\n    \n    for c in message:\n        if c\
    \ in vowels:\n            new_message += replacement[vowels.index(c)]\n      \
    \  else:\n            new_message += c\n    \n    return new_message\n", "   \
    \ message = \"\"\"\n    Write a function that takes a message, and encodes in\
    \ such a \n    way that it swaps case of all letters, replaces all vowels in \n\
    \    the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \            \"\"\"\n    solution = solve(message)\n    test = {\"message\": message,\
    \ \"solution\": solution}\n    test = pd.DataFrame(test)\n    test = test.set_index('message')\n\
    \    test = test.reset_index()\n    test = test.rename(columns={\"index\": \"\
    test\"})\n    test = test.set_index('test', drop=True)\n    print(test)\n    \n\
    \    return test\n\nencoded_message = encode(message)\nencoded_message\n</cell>\n\
    <cell>", "            He is my dog\n            \n            He IS MY DOG\n \
    \           \n            He is My dog\n            \n            He is my dog\n\
    \            \n            He is my Dog\n            \n            He is my dog\n\
    \            \n            He is my DOG\n            \n            He is My dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is MY Dog\n            \n            He is MY DOG\n\
    \            \n            He is MY DOG\n            \n            He is MY DOG\n\
    \            \n            He is MY DOG\n            \n            He is MY DOG\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n            He is My Dog\n\
    \            \n            He is My Dog\n            \n", "    encode(\"This is\
    \ a test message\")\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(encode(\"\
    test\")))\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(\"Test Message\"\
    ))\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(encode(\"test message\"\
    )))\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(encode(\"Test message\"\
    )))\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(\"Test message\"))\n \
    \   >> \"Ewg qhd kv erf\"\n    \n    encode(encode(\"Test message\"))\n    >>\
    \ \"Ewg qhd kv erf\"\n    \n    encode(encode(\"Test message\"))\n    >> \"Ewg\
    \ qhd kv erf\"\n    \n    encode(\"Test message\")\n    >> \"Ewg qhd kv erf\"\n\
    \    \n    encode(\"Test message\")\n    >> \"Ewg qhd kv erf\"\n    \n    encode(\"\
    Test message\")\n    >> \"Ewg qhd kv erf\"\n    \n    encode(\"Test message\"\
    )\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(\"Test message\"))\n   \
    \ >> \"Ewg qhd kv erf\"\n    \n    encode(\"Test message\")\n    >> \"Ewg qhd\
    \ kv erf\"\n    \n    encode(\"Test message\")\n    >> \"Ewg qhd kv erf\"\n  \
    \  \n    encode(encode(\"Test message\"))\n    >> \"Ewg qhd kv erf\"\n    \n \
    \   encode(encode(\"Test message\"))\n    >> \"Ewg qhd kv erf\"\n    \n    encode(\"\
    Test message\")\n    >> \"Ewg qhd kv erf\"\n    \n    encode(\"Test message\"\
    )\n    >> \"Ewg qhd kv erf\"\n    \n    encode(encode(\"Test message\"))\n   \
    \ >> \"Ewg qhd kv erf\"\n    \n    encode(\"Test message\")\n    >> \"Ewg qhd\
    \ kv erf\"\n    \n    encode(encode(\"Test message\"))\n    >> \"Ewg qhd kv erf\"\
    \n    \n    encode(encode(\"Test message\"))\n    >> \"Ewg ", "            encode(\
    \ 'hello world!' ) == 'Hlelo wrldo!'\n            encode( 'i like bananas!' )\
    \ == 'Ikle baana!' \n            encode( 'this is a cool problem!' ) == 'Thsi\
    \ si oek coolprb!' \n            \"\"\"\n    \"\"\"\n    alphabet = list('abcdefghijklmnopqrstuvwxyz')\n\
    \    message = ''.join(message.lower().split(' '))\n    encrypted_message = []\n\
    \    i = 0\n    \n    while i < len(message):\n        \n        \n        letter\
    \ = message[i]\n        \n        if letter in 'aeiou':\n            # swap the\
    \ letter\n            letter_i = alphabet.index(letter)\n            letter_j\
    \ = alphabet[letter_i+1]\n            \n            encrypted_message.append(alphabet[letter_j])\n\
    \            encrypted_message.append(letter)\n            encrypted_message.append(alphabet[letter_i])\n\
    \            \n        else:\n            encrypted_message.append(letter)\n \
    \       i += 1\n        \n    return ''.join(encrypted_message)\n</cell>\n<cell>",
  "            assert encode('hello') == 'hhbllrp'\n            assert encode('hello\
    \ world') == 'hwbllrp'\n            assert encode('the quick brown fox jumps over\
    \ the lazy dog') == 'twqbgxjrdtlrthpdyjhfdk'\n            \"\"\"\n    \"\"\"\n\
    \    vowel_dict = {'a':'', 'b':'', 'c':'', 'd':'', 'e':'', 'f':'', 'g':'', 'h':'',\
    \ 'i':'', 'j':'', 'k':'', 'l':'', 'm':'', 'n':'', 'o':'', 'p':'', 'q':'', 'r':'',\
    \ 's':'', 't':'', 'u':'', 'v':'', 'w':'', 'x':'', 'y':'', 'z':''}\n    vowel_pairs\
    \ = {'e':'j', 'a':'q'}\n    vowel_pairs.update(vowel_dict)\n    \n    letters\
    \ = []\n    for letter in message:\n        letters.append(vowel_pairs[letter])\n\
    \    \n    return ''.join(letters)\n", "            encode_function(message) =\
    \ zYzxBbv\n            \n            message = encode(\"zYzxBbv\")\n         \
    \   \n            assert message == \"zYzxBbv\"\n            \n            message\
    \ = encode(\"aABbvCd\")\n            \n            assert message == \"aAbbvCd\"\
    \n    \"\"\"\n    \n    message = str(message)\n    \n    letters = [letter for\
    \ letter in message]\n    \n    # sort letters by their ascii value\n    letters.sort(key\
    \ = lambda x: x.encode('ascii'))\n    \n    for i in range(len(letters)):\n  \
    \      if i == 2:\n            # if the current letter is at the 3rd position\n\
    \            # swap case with the next letter in the alphabet\n            letters[i]\
    \ = letters[i+1].upper()\n    \n    # replace vowels with letters 2 places ahead\n\
    \    letters = replace_vowels(letters)\n    \n    letters = \"\".join(letters)\n\
    \    \n    return letters\n</cell>\n<cell>", "            >>> encode('hello')\n\
    \            'hEllo'\n            \n            >>>encode('AaaBbBcC')\n      \
    \      'aAbBcC'\n            \n            >>>encode('AaaBbBcCdD')\n         \
    \   'aAbBcCdD'\n            \n            >>>encode('aAAb')\n            'aAAb'\n\
    \            \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n     \
    \       \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n          \
    \  \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n \
    \           >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n      \
    \      >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n           \
    \ >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n\
    \            'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n     \
    \       'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n          \
    \  'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n\
    \            \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n     \
    \       \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n          \
    \  \n            >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n \
    \           >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n      \
    \      >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n           \
    \ >>>encode('AaaBbBcC')\n            'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n\
    \            'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n     \
    \       'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n          \
    \  'aAbBcC'\n            \n            >>>encode('AaaBbBcC')\n            'aAbBc",
  "            Example: a = \"dog\", returns \"god\"\n            Example: b = \"\
    the\", returns \"egh\"\n            Example: c = \"a\", returns \"a\"\n      \
    \      Example: d = \"ab\", returns \"ab\"\n            Example: e = \"ba\", returns\
    \ \"ba\"\n            Example: f = \"ab\", returns \"ab\"\n            Example:\
    \ g = \"ab\", returns \"ab\"\n            Example: h = \"ac\", returns \"ac\"\n\
    \            Example: i = \"a\", returns \"a\"\n            Example: j = \"a\"\
    , returns \"a\"\n            Example: k = \"a\", returns \"a\"\n            Example:\
    \ l = \"ac\", returns \"ac\"\n            Example: m = \"a\", returns \"a\"\n\
    \            Example: n = \"a\", returns \"a\"\n            Example: o = \"b\"\
    , returns \"b\"\n            Example: p = \"a\", returns \"a\"\n            Example:\
    \ q = \"b\", returns \"b\"\n            Example: r = \"b\", returns \"b\"\n  \
    \          Example: s = \"b\", returns \"b\"\n            Example: t = \"b\",\
    \ returns \"b\"\n            Example: u = \"c\", returns \"c\"\n            Example:\
    \ v = \"c\", returns \"c\"\n            Example: w = \"c\", returns \"c\"\n  \
    \          Example: x = \"c\", returns \"c\"\n            Example: y = \"d\",\
    \ returns \"d\"\n            Example: z = \"d\", returns \"d\"\n            Example:\
    \ a = \"dog\", returns \"god\"\n            Example: b = \"the\", returns \"egh\"\
    \n            Example: c = \"a\", returns \"a\"\n            Example: d = \"ab\"\
    , returns \"ab\"\n            Example: e = \"ba\", returns \"ba\"\n          \
    \  Example: f = \"ab\", returns \"ab\"\n            Example: g = \"ab\", returns\
    \ \"ab\"\n            Example: h = \"ac\", returns \"ac\"\n            Example:\
    \ i = \"a\", returns \"a\"\n            Example: j = \"a\", returns \"a\"\n  \
    \          Example: k = \"a\", returns \"a\"\n            Example: l = \"ac\"\
    , returns \"ac\"\n            Example: m = \"a\", returns \"a\"\n            Example:\
    \ n = \"a\", returns \"a\"\n            Example: o = \"b\", returns \"b\"\n  \
    \          Example: p = \"a\", returns \"a\"\n            Example: q = \"b\",\
    \ returns \"b\"\n            Example: r = \"b\", returns \"b\"\n            Example:\
    \ s = \"b\", returns \"b\"\n            Example: t = \"b\", returns \"b\"\n  \
    \          Example: u = \"c\", returns \"c\"\n", "            Hello. How are you?\
    \ It's nice to meet you.\n            >>>encode('Hello. How are you? It\\'s nice\
    \ to meet you.')\n            Hello.HowAreYouIt'sNiceToMeetYou\n            \n\
    \    \"\"\"\n    return message.replace(\" \", \"\").lower()\n", "           \
    \ encode('the quick brown fox jumped over the lazy dog') \n            # should\
    \ return 'rthwkbrwn vfrzd thvdz trgh vfxdr'\n            \"\"\"\n    \n    Args:\n\
    \        message(str): a message to be encoded.\n\n    Returns:\n        str:\
    \ a message encoded using these rules.\n    \"\"\"\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    letters_2 = alphabet.upper()\n    vowels = \"aeiou\"\n    \n    \n    encoded\
    \ = \"\"\n    for letter in message:\n        if letter.isalpha():\n         \
    \   letter_2 = alphabet.find(letter.lower())\n            if letter_2 > letter:\n\
    \                letter_2 += 2\n            letters_2 = letters_2[letter_2:letter_2]\n\
    \            \n    vowel_indexes = [i for i,letter in enumerate(letters_2) if\
    \ letter in vowels]\n    \n    encoded = \"\".join([letters_2[i] for i in vowel_indexes])\n\
    \    \n    return encoded\n</cell>\n<cell>\nencode(\"\"\"\n    Hello World\n \
    \   \"\"\")\n</cell>\n<cell>", "            >>> message = \"hello\"\n        \
    \    >>> encode(message)\n            'yadyya'\n            \"\"\"\n    \"\"\"\
    \n    vowels_a = string.ascii_lowercase\n    vowels_b = string.ascii_uppercase\n\
    \    vowels = [c for c in vowels_a if c not in vowels_b]\n    message = message.replace(\"\
    a\", \"e\")\n    message = message.replace(\"e\", \"a\")\n    message = message.replace(\"\
    i\", \"o\")\n    message = message.replace(\"o\", \"i\")\n    message = message.replace(\"\
    u\", \"\")\n    message = message.replace(\"v\", \"\")\n    message = message.replace(\"\
    z\", \"\")\n    message = message.replace(\"x\", \"y\")\n    message = message.replace(\"\
    y\", \"x\")\n    message = message.replace(\"!\", \"1\")\n    message = message.replace(\"\
    @\", \"2\")\n    message = message.replace(\"$\", \"3\")\n    message = message.replace(\"\
    #\", \"4\")\n    message = message.replace(\"%\", \"5\")\n    message = message.replace(\"\
    ^\", \"6\")\n    message = message.replace(\"&\", \"7\")\n    message = message.replace(\"\
    *\", \"8\")\n    message = message.replace(\"(\", \"9\")\n    message = message.replace(\"\
    )\", \"0\")\n    message = message.replace(\"_\", \"1\")\n    message = message.replace(\"\
    -\", \"3\")\n    message = message.replace(\"+\", \"2\")\n    message = message.replace(\"\
    =\", \"4\")\n    message = message.replace(\"[\", \"5\")\n    message = message.replace(\"\
    ]\", \"6\")\n    message = message.replace(\"{\", \"7\")\n    message = message.replace(\"\
    }\", \"8\")\n    message = message.replace(\"|\", \"9\")\n    message = message.replace(\"\
    :\", \"0\")\n    message = message.replace(\" \", \"_\")\n    message = message.replace(\"\
    ,\", \"_\")\n    message = message.replace(\"?\", \"_\")\n    message = message.replace(\"\
    /\", \"_\")\n    message = message.replace(\"~\", \"_\")\n    message = message.replace(\"\
    \\\\\", \"_\")\n    message = message.replace(\"`\", \"_\")\n    message = message.replace(\"\
    's\", \"s\")\n    message = message.replace(\"`s\", \"s\")\n    message = message.replace(\"\
    'a\", \"a\")\n    message = message.replace(\"`a\", \"a\")\n    message = message.replace(\"\
    'n\", \"n\")\n    message = message.replace(\"`n\", \"n\")\n    message = message.replace(\"\
    'l\", \"l\")\n    message = message.replace(\"`l\", \"l\")\n    message = message.replace(\"\
    'o\", \"o\")\n    message = message.replace(\"`o\", \"o\")\n    message = message.replace(\"\
    'd\", \"d\")\n    message = message.replace(\"`d\", \"d\")\n    message = message.replace(\"\
    'g\", \"g\")\n    message = message.replace(\"`g\", \"g\")\n    message = message.replace(\"\
    'r\", \"r\")\n    message = message.replace(\"`r\", \"r\")\n    message = message.replace(\"\
    'h\", \"h\")\n    message = message.replace(\"`h\", \"h\")\n    ", "         \
    \   message = 'Hello world!'\n            assert encode(message) == 'Hloolwoorld!'\
    \ \n            \"\"\"\n    \n    Arguments:\n            message: The message\
    \ to encode\n    \"\"\"\n    encoded_message = ''\n    \n    for letter in message:\n\
    \        if letter.islower():\n            letter_pos = alphabet.index(letter)\
    \ + 1\n            encoded_message += alphabet[letter_pos]\n        else:\n  \
    \          encoded_message += letter\n    return encoded_message\n", "    >>>\
    \ encode('I like turtles')\n    'i7 li3 3turte6s'\n    >>> encode('I like turtles')\n\
    \    'i7 li3 3turte6s'\n    >>> encode('I am tired')\n    'am7 83re4d'\n    \"\
    \"\"\n    message = message.lower()\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    \n    # Make a new message that has vowels replaced by what comes next\n\
    \    new_message = ''\n    vowels = 'aeiou'\n    \n    # Iterate over every letter\
    \ in the message\n    for char in message:\n        \n        # If the character\
    \ is a vowel, add the letter that comes 2 \n        # places ahead of it\n   \
    \     if char in vowels:\n            new_message += alphabet[(alphabet.index(char)\
    \ + 2) % 26]\n            \n        # If the character is not a vowel, add it\
    \ normally\n        else:\n            new_message += char\n        \n    return\
    \ new_message\n", "            Input: hello\n            Output: hELLO\n     \
    \       Input: hello?\n            Output: hEllO?\n            Input: What is\
    \ your name?\n            Output: htwr IS yM uN?\n            Input: what a coincidence?\n\
    \            Output: what a cIncidence?\n            Input: abcdef\n         \
    \   Output: AbcdeF\n            Input: abcde\n            Output: Abcde\n    \
    \        Input: abcde\n            Output: Abcde\n            Input: aBcDe\n \
    \           Output: AbcdE\n            Input: aBCDe\n            Output: AbCdE\n\
    \            Input: abCdE\n            Output: AbCdE\n            Input: aBCDE\n\
    \            Output: AbCdE\n            Input: abCdE\n            Output: AbCdE\n\
    \            Input: aBcDe\n            Output: AbcdE\n            Input: aBCDe\n\
    \            Output: AbCdE\n            Input: aBcDe\n            Output: AbcdE\n\
    \            Input: aBCDE\n            Output: AbCdE\n            Input: aBCDE\n\
    \            Output: AbCdE\n            Input: aBcDe\n            Output: AbcdE\n\
    \            Input: aBCDE\n            Output: AbCdE\n            Input: aBCDE\n\
    \            Output: AbCdE\n            Input: aBcDe\n            Output: AbcdE\n\
    \            Input: aBCDE\n            Output: AbCdE\n            Input: aBcDe\n\
    \            Output: AbcdE\n            Input: aBCDE\n            Output: AbCdE\n\
    \            Input: aBcDe\n            Output: AbcdE\n            Input: aBCDE\n\
    \            Output: AbCdE\n            Input: aBcDe\n            Output: AbcdE\n\
    \            Input: aBCDE\n            Output: AbCdE\n            Input: aBcDe\n\
    \            Output: AbcdE\n            Input: aBCDE\n            Output: AbCdE\n\
    \            Input: aBcDe\n            Output: AbcdE\n            Input: aBCDE\n\
    \            Output: AbCdE\n            Input: aBcDe\n            Output: AbcdE\n\
    \            Input: aBCDE\n            Output: Ab", "            message = encode(\"\
    Hello\")\n            print(message)\n            Hello\n            \n      \
    \      message = encode(\"HELLO\")\n            print(message)\n            Haello\n\
    \            \n            message = encode(\"hEllo\")\n            print(message)\n\
    \            HelHel\n            \n            message = encode(\"hello\")\n \
    \           print(message)\n            hHeello\n            \n            message\
    \ = encode(\"HellO\")\n            print(message)\n            HelHelO\n     \
    \       \n            message = encode(\"heLlo\")\n            print(message)\n\
    \            Haello\n            \n            message = encode(\"hello\")\n \
    \           print(message)\n            hHeello\n            \"\"\"\n    \n  \
    \  # Write your code here\n    \n    return message\n</cell>\n<cell>", "     \
    \       message_1 = \"Hello\"\n            message_2 = \"ilovepython\"\n     \
    \       message_3 = \"Hello\"\n            assert encode(message_1) == message_2\n\
    \            assert encode(message_2) == message_3\n            \"\"\"\n     \
    \   \n    Args:\n        message (str): the message to be encoded \n\n    Returns:\n\
    \        (str): the encoded message \n    \"\"\"\n    \n    LETTERS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \ # Only letters \n    VOWELS = \"AEIOU\" # All vowels \n\n    encoded_message\
    \ = message # Default to empty string \n\n    for letter in message:\n       \
    \ encoded_message += letter\n        \n    for letter in message:\n        letter_pairs\
    \ = letter + letter\n        letter_pairs = letter_pairs.upper()\n        for\
    \ pair in letter_pairs:\n            if pair in LETTERS:\n                letter_pairs\
    \ = letter_pairs.replace(pair, LETTERS[LETTERS.index(pair)+1])\n        encoded_message\
    \ += letter_pairs \n        \n    for vowel in VOWELS:\n        vowel_pairs =\
    \ vowel + vowel\n        vowel_pairs = vowel_pairs.upper()\n        for pair in\
    \ vowel_pairs:\n            if pair in LETTERS:\n                vowel_pairs =\
    \ vowel_pairs.replace(pair, LETTERS[LETTERS.index(pair)+1])\n        encoded_message\
    \ += vowel_pairs\n    \n    return encoded_message\n    ", "    >>> encode(\"\
    i Love Python\") \n    'I Love Python' \n    \n    >>> encode(\"i like turtles\"\
    ) \n    'I like turtles' \n    \n    >>> encode(\"i like turtles\") \n    'I like\
    \ turtles' \n    \n    \"\"\"\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiou'\n    \n    # Loop over each char in message\n    # check\
    \ if it is a vowel, and if so, put it before that vowel in the alphabet\n    for\
    \ char in message:\n        if char in vowels:\n            replacement = alphabet[(alphabet.index(char)\
    \ + 2) % len(alphabet)]\n            message = message.replace(char, replacement)\n\
    \        \n    return message\n\n", "            def encode(message: str) -> str:\n\
    \                alphabet = string.ascii_lowercase\n                vowels = ['a',\
    \ 'e', 'i', 'o', 'u']\n                message = ''.join(letter for letter in\
    \ message.lower() if letter not in vowels)\n                for letter in alphabet:\n\
    \                    if letter in message:\n                        message =\
    \ message.replace(letter, alphabet[alphabet.index(letter) + 1])\n            \
    \    return message\n\n            print(encode('hello'))\n            # 'hllo'\
    \ \n            \"\"\"\n            \n    Args:\n        message (str): the message\
    \ to be encoded\n        \n    Returns:\n        str: the encoded message\n  \
    \  \"\"\"\n    alphabet = string.ascii_lowercase\n    vowels = ['a', 'e', 'i',\
    \ 'o', 'u']\n    message = ''.join(letter for letter in message.lower() if letter\
    \ not in vowels)\n    for letter in alphabet:\n        if letter in message:\n\
    \            message = message.replace(letter, alphabet[alphabet.index(letter)\
    \ + 1])\n    return message\n</cell>\n<text>\nProblem 7\nLet's see how encrypt\
    \ and decrypt are implemented.\n\n\n</text>\n<cell>", "    message = input(\"\
    Enter the message to be encoded \")\n    print(encode(message))\n    \"\"\"\n\
    \    letters = list(message)\n    letters.sort(key=lambda x: ord(x))\n    vowels\
    \ = \"aeiou\"\n    for i in range(len(letters)):\n        if letters[i] in vowels:\n\
    \            letters[i] = letters[i].upper()\n    \n    for i in range(len(letters)):\n\
    \        if letters[i] in vowels:\n            letters[i] = letters[i] - 1\n \
    \           letters[i] = letters[i] + letters[i+1].upper()\n    \n    for i in\
    \ range(len(letters)):\n        if letters[i] in vowels:\n            letters[i]\
    \ = letters[i] + letters[i+1].upper()\n    \n    message = \"\".join(letters)\n\
    \    return message\n\n", "            message = input('Please enter a message:\
    \ ')\n            encoded = encode(message)\n            print(encoded)\n    \
    \        \n            encoded2 = encode(encoded)\n            print(encoded2)\n\
    \            \"\"\"\n            \n    \n    \n    \"\"\"\n    for letter in message:\n\
    \        letter_code = ord(letter)\n        letter_code = letter_code - 96\n \
    \       letter_code = letter_code + 2\n        letter = chr(letter_code)\n   \
    \     message = message.replace(letter,\"\")\n    return message\n    \"\"\"\n\
    \n    ", "            encode(\"hello world\")\n            ->  \"He ll ow rld\
    \ !\"\n            \n            encode(\"hi my name is john\")\n            ->\
    \  \"H i m n a m y s j h\"\n            \n            encode(\"hi my name is john\"\
    )\n            ->  \"H i m n a m y s j h\"\n            \n            encode(\"\
    hi my name is john and my father was a doctor\")\n            ->  \"H i m n a\
    \ m y s j h ae aa d ot ae d o c\"\n            \n            encode(\"hi my name\
    \ is john and my father was a doctor and my father was a teacher\")\n        \
    \    ->  \"H i m n a m y s j h ae aa d ot ae d o c ae aa t h e\"\n           \
    \ \n            encode(\"hi my name is john and my father was a doctor and my\
    \ father was a teacher and my father was a student\")\n            ->  \"H i m\
    \ n a m y s j h ae aa d ot ae d o c ae aa t h e ae aa s t\"\n            \n  \
    \          encode(\"hi my name is john and my father was a doctor and my father\
    \ was a teacher and my father was a student and my father was a teacher\")\n \
    \           ->  \"H i m n a m y s j h ae aa d ot ae d o c ae aa t h e ae aa s\
    \ t ae aa t h e\"\n            \n            encode(\"hi my name is john and my\
    \ father was a doctor and my father was a teacher and my father was a student\
    \ and my father was a teacher and my father was a teacher\")\n            -> \
    \ \"H i m n a m y s j h ae aa d ot ae d o c ae aa t h e ae aa s t ae aa t h e\
    \ ae aa t h e\"\n            \n            encode(\"hi my name is john and my\
    \ father was a doctor and my father was a teacher and my father was a student\
    \ and my father was a teacher and my father was ", "            Encode Message:\n\
    \            \n            Message: Hello, World!\n            \n            Encoded\
    \ Message: Gjzvk!\n            \n            Encode Message:\n            \n \
    \           Message: Hello, World!\n            \n            Encoded Message:\
    \ Wjyv!\n            \n            Encode Message:\n            \n           \
    \ Message: Hello, World!\n            \n            Encoded Message: Vjyv!\n \
    \           \n            Encode Message:\n            \n            Message:\
    \ Hello, World!\n            \n            Encoded Message: Zjyv!\n          \
    \  \n            Encode Message:\n            \n            Message: Hello, World!\n\
    \            \n            Encoded Message: Yjyv!\n            \n            Encode\
    \ Message:\n            \n            Message: Hello, World!\n            \n \
    \           Encoded Message: Yjyv!\n            \n            Encode Message:\n\
    \            \n            Message: Hello, World!\n            \n            Encoded\
    \ Message: Xjyv!\n            \n            Encode Message:\n            \n  \
    \          Message: Hello, World!\n            \n            Encoded Message:\
    \ Jjyv!\n            \n            Encode Message:\n            \n           \
    \ Message: Hello, World!\n            \n            Encoded Message: Jjyv!\n \
    \           \n            Encode Message:\n            \n            Message:\
    \ Hello, World!\n            \n            Encoded Message: Jjyv!\n          \
    \  \n            Encode Message:\n            \n            Message: Hello, World!\n\
    \            \n            Encoded Message: Gjyv!\n            \n            Encode\
    \ Message:\n            \n            Message: Hello, World!\n            \n \
    \           Encoded Message: Gjyv!\n            \n            Encode Message:\n\
    \            \n            Message: Hello, World!\n            \n            Encoded\
    \ Message: Gjyv!\n            \n            Encode Message:\n            \n  \
    \          Message: Hello, World!\n            \n            Encoded Message:\
    \ Gjyv!\n            \n            Encode Message:\n            \n           \
    \ Message: Hello, World!\n            \n            Encoded Message: Gjyv!\n \
    \           \n            Encode Message:\n            \n            Message:\
    \ Hello, World!\n            \n            Encoded Message: Gjyv!\n          \
    \  \n            Encode Message:\n            \n            Message: Hello, World!\n\
    \            \n            Encoded Message: Gjyv!\n            \n            ",
  "            Given the following input:\n            \n            INPUT: message\
    \ = \"I AM NOT SURE!\"\n            \n            OUTPUT: \n            \n   \
    \         I Am nOt sUe !\n            \"\"\"\n    \"\"\"\n    \n    \n    \"\"\
    \"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ \n    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    def encode(message: str) ->\
    \ str:\n    \"\"\"\n    Write a function that takes a message, and encodes in\
    \ such a \n    way that it swaps case of all letters, replaces all vowels in \n\
    \    the message with the letter that appears 2 places ahead of that \n    vowel\
    \ in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \            \"\"\"\n            Given the following input:\n            \n  \
    \          INPUT: message = \"I AM NOT SURE!\"\n            \n            OUTPUT:\
    \ \n            \n            I Am nOt sUe !\n            \"\"\"\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', \n    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    def encode(message:\
    \ str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes\
    \ in such a \n    way that it swaps case of all letters, replaces all vowels in\
    \ \n    the message with the letter that appears 2 places ahead of that \n   \
    \ vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \            \"\"\"\n            Given the following input:\n            \n  \
    \          INPUT: message = \"I AM NOT SURE!\"\n            \n            OUTPUT:\
    \ \n            \n            I Am nOt sUe !\n            \"\"\"\n    \"\"\"\n\
    \    \n    \n    \"\"\"\n    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',\
    \ 'i', 'j', 'k', 'l', \n    'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',\
    \ 'w', 'x', 'y', 'z']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    def encode(message:\
    \ str) -> str:\n    \"\"\"\n    Write a function that takes a message, and encodes\
    \ in such a \n    way that it swaps case of all letters, replaces all vowels in\
    \ \n    the message with the letter that appears 2 places ahead of that \n   \
    \ vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n\
    \            \"\"\"\n            Given ", "    >>> encode(\"aBcD\") == \"adD\"\
    \n    True\n    >>> encode(\"adadadad\") == \"adadad\"\n    True\n    >>> encode(\"\
    adadadad\") == \"adadad\"\n    True\n    >>> encode(\"adadadad\") == \"adadad\"\
    \n    True\n    >>> encode(\"adadadad\") == \"adadad\"\n    True\n    >>> encode(\"\
    adadadad\") == \"adadad\"\n    True\n    >>> encode(\"adadadad\") == \"adadad\"\
    \n    True\n    >>> encode(\"adadadad\") == \"adadad\"\n    True\n    >>> encode(\"\
    adadadad\") == \"adadad\"\n    True\n    >>> encode(\"adadadad\") == \"adadad\"\
    \n    True\n    >>> encode(\"adadadad\") == \"adadad\"\n    True\n    \"\"\"\n\
    \n    vowels = \"aeiouAEIOU\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    \n    vowel_2_letter = {\n        \"a\": \"e\",\n        \"e\": \"i\",\n\
    \        \"i\": \"o\",\n        \"o\": \"u\",\n        \"u\": \"a\",\n       \
    \ \"A\": \"E\",\n        \"E\": \"I\",\n        \"I\": \"O\",\n        \"O\":\
    \ \"U\",\n        \"U\": \"A\",\n        \"a\": \"e\",\n        \"e\": \"i\",\n\
    \        \"i\": \"o\",\n        \"o\": \"u\",\n        \"u\": \"a\",\n    }\n\n\
    \    def swap(letter: str) -> str:\n        \"\"\"\n        Helper function for\
    \ encode. \n        \n        Swaps all cases of the letter in the message, returning\n\
    \        the resulting string.\n        \n        Examples:\n            >>> swap(\"\
    A\")\n            \"e\"\n            >>> swap(\"e\")\n            \"a\"\n    \
    \    \"\"\"\n        \n        if letter.isupper():\n            letter = letter.lower()\n\
    \        \n        return letters[letters.index(letter.upper()) - 1]\n\n    def\
    \ replace_vowels(message: str) -> str:\n        \"\"\"\n        Helper function\
    \ for encode. \n        \n        Replaces all vowels in a message with the letter\
    \ that \n        appears 2 places ahead of that vowel in the english alphabet.\n\
    \        \n        Examples:\n            >>> replace_vowels(\"adadadad\")\n \
    \           \"eadadad\"\n        \"\"\"\n        \n        message = message.lower()\n\
    \        \n        for letter in message:\n            if letter in vowels:\n\
    \                position = vowels.index(letter)\n                letter = vowel_2_letter[message[position]]\n\
    \                message = message.replace(letter, \"\")\n        \n        return\
    \ message\n\n    message = message.lower()\n    \n    if len(message) == 0:\n\
    \        return \"\"\n        \n    if message[0]", "    \n            vowels\
    \ = ['a','e','i','o','u']\n            encode = lambda message: \"\\n\".join([encode(letter)\
    \ for letter in message])\n    \n    \"\"\"\n    encoded = [char.lower() if char\
    \ not in vowels else vowel_letter_pair(char)\n               for char in message]\n\
    \    return \"\\n\".join(encoded)\n\n", "    >>> encode('Hello! My name is David')\n\
    \    'Kay Ome! Mnay Iya Nma Naid'\n    \n    \n    >>> encode('i have a cat')\n\
    \    'ay aa ayaa ayaaya'\n    \n    \n    >>> encode('You told me your name was\
    \ David')\n    'ay ay ayay ayay ay ay ay ayay'\n    \n    \n    >>> encode('my\
    \ name is David')\n    'ay ay ayay ayay ay ay ay ayay'\n    \"\"\"\n    \n   \
    \ table = str.maketrans(\n        {'a': ' ',\n         'e': '!',\n         'i':\
    \ '!',\n         'o': '!',\n         'u': '!',\n         'y': '!',\n         'A':\
    \ '!',\n         'E': '!',\n         'I': '!',\n         'O': '!',\n         'U':\
    \ '!',\n         'Y': '!',\n         'a': '!',\n         'e': '!',\n         'i':\
    \ '!',\n         'o': '!',\n         'u': '!',\n         'y': '!',\n         'A':\
    \ '!',\n         'E': '!',\n         'I': '!',\n         'O': '!',\n         'U':\
    \ '!',\n         'Y': '!',\n         '\\n': '',\n         '.': '.',\n        \
    \ '-': '-',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n    \
    \     '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_': '_',\n         '_': '_',\n         '_': '_',\n\
    \         '_': '_',\n         '_", "            Input: \n            message =\
    \ 'This is a message'\n            Output: \n            'TTHSISsssssssssssssstTsMSGS'\n\
    \            \"\"\"\n\n    Args:\n        message (str): string to encode in such\
    \ way\n\n    Returns:\n        encoded message (str) \n    \"\"\"\n    \n    vowels\
    \ = 'aeiouy'\n    \n    letters = {\n        \"a\": \"t\", \n        \"e\": \"\
    s\", \n        \"i\": \"s\", \n        \"o\": \"s\", \n        \"u\": \"s\"\n\
    \    }\n    \n    encoded = \"\"\n    \n    for char in message:\n        if char\
    \ in vowels:\n            encoded += letters[char]\n            \n        elif\
    \ char.isupper():\n            encoded += letters[char.upper()].upper()\n    \
    \        \n        elif char.islower():\n            encoded += letters[char.lower()].lower()\n\
    \        \n        else:\n            encoded += char\n    \n    return encoded\n\
    </cell>\n<cell>\nencode(\n    \"This is a message\"\n)\n</cell>\n<text>\nThe next\
    \ cell will test your encoding function.\n\n\n</text>\n<cell>\nassert encode(\n\
    \    \"This is a message\"\n) == \"tthsissssssssssssssttmssgs\"\n</cell>\n<text>\n\
    2.3 Decode a message\nNow that you've encoded a message, you can simply decode\
    \ it to get the original message back. \nYou should use your encode function to\
    \ encode a message. \nHowever, be careful about what you type. \nIf you use an\
    \ online judge or have multiple submissions going, make sure that you encode your\
    \ message correctly.\n\n\n</text>\n<cell>", "            >>> encode('hello world')\n\
    \            'h wa orl'\n            >>> encode('how are you')\n            'w\
    \ ua eru'\n            >>> encode('i like cats')\n            'i lu ket ca'\n\
    \            >>> encode('where is jamal?')\n            'w hi jam al'\n      \
    \      \"\"\"\n    \n    Args:\n        message (str): The message to be encoded.\n\
    \n    Returns:\n        str: The encoded message in it's original case. \n   \
    \ \"\"\"\n    \n    # Store the original case\n    original_case = message.lower()\n\
    \    \n    # Store the list of vowels\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    \n    # Store the new encoded case\n    encoded_case = ''\n    \n    # Iterate\
    \ through each letter in the message\n    for letter in original_case:\n     \
    \   \n        # Check if the letter is a vowel\n        if letter in vowels:\n\
    \            \n            # Iterate through each vowel\n            for vowel\
    \ in vowels:\n                \n                # Check if the letter is the vowel\
    \ before this vowel\n                if letter == vowel:\n                   \
    \ \n                    # Iterate through each vowel 2 places ahead.\n       \
    \             for vowel_2_ahead in vowels:\n                        \n       \
    \                 # Check if the letter is the vowel after this vowel\n      \
    \                  if letter == vowel_2_ahead:\n                            \n\
    \                            # Store the letter\n                            letter\
    \ = vowel_2_ahead\n                            \n                            #\
    \ Break the loop and continue to the next letter\n                           \
    \ break\n                    \n            # Append the letter onto the new encoded\
    \ case\n            encoded_case += letter\n            \n        # Append the\
    \ letter onto the new encoded case\n        encoded_case += letter\n        \n\
    \    return encoded_case\n</cell>\n<cell>", "            > encode('hello')\n \
    \           'elloh'\n            \n            > encode('hellooooooooooo')\n \
    \           'heloh'\n            \n            > encode('hello world')\n     \
    \       'ello wor'\n            \n            > encode('hello woeald world')\n\
    \            'ello wo eald wor'\n            \n            > encode('hello woeald\
    \ world')\n            'ello wo eald wor'\n            \"\"\"\n\n    My Code:\n\
    \    \"\"\"\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    for letter in message:\n\
    \        if letter in vowels:\n            position = vowels.index(letter)\n \
    \           \n            # Replace the vowel\n            new_letter = message[position]\n\
    \            message[position] = message[position - 1]\n            message[position\
    \ - 1] = new_letter\n            \n            # Replace the position\n      \
    \      new_position = position - 1\n            message[position - 1] = message[new_position]\n\
    \            message[new_position] = new_letter\n    \n    return message\n",
  "        Hello\n        Hi\n        Hey\n        HellO\n        Holla\n        Who\n\
    \        Hello \n        Hey\n        HellO\n        Holla\n        Who\n    \
    \    HellO\n        Holla\n        Who\n        HellO\n        Holla\n       \
    \ Who\n        HellO\n        Holla\n        Who\n        HellO\n        Holla\n\
    \        Who\n        HellO\n        Holla\n        Who\n        HellO\n     \
    \   Holla\n        Who\n        HellO\n        Holla\n        Who\n        HellO\n\
    \        Holla\n        Who\n        HellO\n        Holla\n        Who\n     \
    \   HellO\n        Holla\n        Who\n        HellO\n        Holla\n        Who\n\
    \        HellO\n        Holla\n        Who\n        HellO\n        Holla\n   \
    \     Who\n        HellO\n        Holla\n        Who\n        HellO\n        Holla\n\
    \        Who\n        HellO\n        Holla\n        Who\n        HellO\n     \
    \   Holla\n        Who\n        HellO\n        Holla\n        Who\n        HellO\n\
    \        Holla\n        Who\n        HellO\n        Holla\n        Who\n     \
    \   HellO\n        Holla\n        Who\n        HellO\n        Holla\n        Who\n\
    \        HellO\n        Holla\n        Who\n        HellO\n        Holla\n   \
    \     Who\n        HellO\n        Holla\n        Who\n        HellO\n        Holla\n\
    \        Who\n        HellO\n        Holla\n        Who\n        HellO\n     \
    \   Holla\n        Who\n        HellO\n        Holla\n        Who\n        HellO\n\
    \        Holla\n        Who\n        HellO\n        Holla\n        Who\n     \
    \   HellO\n        Holla\n        Who\n        HellO\n        Holla\n        Who\n\
    \        HellO\n        Holla\n        Who\n        HellO\n        Holla\n   \
    \     Who\n        HellO\n        Holla\n        Who\n        HellO\n        Holla\n\
    \        Who\n        HellO\n        Holla\n        Who\n        HellO\n     \
    \   Holla\n        Who\n        HellO", "        encode = encode(message)\n  \
    \      print(encode(message))\n        \"\"\"\n    \n    # your code here\n  \
    \  \n    letters = message.lower()\n    vowels = \"aeiou\"\n    \n    to_replace\
    \ = [\"\"]\n    \n    for i in vowels:\n        to_replace.append(letters.count(i))\n\
    \        \n    to_replace.reverse()\n    \n    \n    replaced_letters = []\n \
    \   for i in to_replace:\n        index = 0\n        while index < i:\n      \
    \      replaced_letters.append(letters[index])\n            index = index + 1\n\
    \    \n    replaced_letters = \"\".join(replaced_letters)\n    \n    return replaced_letters\n\
    </cell>\n<cell>\nencode(\"hello\")\n</cell>\n<cell>\nencode(\"hello\")\n</cell>\n\
    <cell>\nencode(\"iam not going to sleep\")\n</cell>\n<text>\nQ2 Write a function\
    \ that takes a message as input, and returns the message encoded in such a way\
    \ that it replaces all vowels in the message with their respective letter that\
    \ appears 2 places ahead of that vowel. \nAssume only letters.\n\n\n</text>\n\
    <cell>", "    >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n    'Banana'\n\
    \    >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n    'ApPL'\n   \
    \ >>> encode('banana')\n    'Banana'\n    >>> encode('mess')\n    'Mess'\n   \
    \ >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n    'Banana'\n  \
    \  >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n    'ApPL'\n    >>>\
    \ encode('banana')\n    'Banana'\n    >>> encode('mess')\n    'Mess'\n    >>>\
    \ encode('apple')\n    'ApPL'\n    >>> encode('banana')\n    'Banana'\n    >>>\
    \ encode('mess')\n    'Mess'\n    >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n\
    \    'Banana'\n    >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n \
    \   'ApPL'\n    >>> encode('banana')\n    'Banana'\n    >>> encode('mess')\n \
    \   'Mess'\n    >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n  \
    \  'Banana'\n    >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n   \
    \ 'ApPL'\n    >>> encode('banana')\n    'Banana'\n    >>> encode('mess')\n   \
    \ 'Mess'\n    >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n    'Banana'\n\
    \    >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n    'ApPL'\n   \
    \ >>> encode('banana')\n    'Banana'\n    >>> encode('mess')\n    'Mess'\n   \
    \ >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n    'Banana'\n  \
    \  >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n    'ApPL'\n    >>>\
    \ encode('banana')\n    'Banana'\n    >>> encode('mess')\n    'Mess'\n    >>>\
    \ encode('apple')\n    'ApPL'\n    >>> encode('banana')\n    'Banana'\n    >>>\
    \ encode('mess')\n    'Mess'\n    >>> encode('apple')\n    'ApPL'\n    >>> encode('banana')\n\
    \    'Banana'\n    >>> encode('mess')\n    'Mess'\n    >>> encode('apple')\n \
    \   'ApPL'\n    >>> encode('banana')\n    'Banana'\n    >>> encode('mess')\n \
    \   'Mess'\n", "            >>>encode(\"I love cake\")\n            \"I ll ove\
    \ cak\"\n            \"\"\"\n    \"\"\"\n\n    message = message.lower()\n   \
    \ vowels = \"aeiou\"\n\n    encoded = \"\"\n    for index, letter in enumerate(message):\n\
    \        if letter.lower() in vowels:\n            letter_index = vowels.index(letter.lower())\n\
    \            letter_index += 2\n            encoded += letter.lower() + message[letter_index]\n\
    \        else:\n            encoded += letter\n    return encoded\n\n", "    \
    \        >>>encode('apple') #returns 'pppppppppppppppppp'\n            >>>encode('Hello')\
    \ #returns 'HHHHHHHHHHHH'\n            >>>encode('Hi') #returns 'HHHH'\n     \
    \       >>>encode('Hi') #returns 'HH'\n            >>>encode('Hi') #returns 'H'\n\
    \            \"\"\"\n    \"\"\"\n    \n    vowels = 'AEIOU'\n    letters = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    \n    #iterate through the message and swap case\n    for letter in message:\n\
    \        letter_upper = letter.upper()\n        #if the letter is not a vowel\
    \ or a lowercase letter\n        if not letter.lower() in letters and not letter.upper()\
    \ in vowels:\n            #assign the letter that appears 2 places ahead\n   \
    \         #of the vowel into the new string with a 'p' added\n            new_letter\
    \ = letter_upper[vowels.index(letter.lower())+2]\n            #add the letter\
    \ to the new string\n            letters += new_letter\n    #return the new string\n\
    \    return letters\n        \n</cell>\n<cell>\nencode(message='apple')\n</cell>\n\
    <cell>\nencode(message='Hello')\n</cell>\n<cell>\nencode(message='Hi')\n</cell>\n\
    <cell>\nencode(message='Hi')\n</cell>\n<cell>\nencode(message='Hi')\n</cell>\n\
    <cell>\nencode(message='Hi')\n</cell>\n<cell>\nencode(message='Hi')\n</cell>\n\
    <cell>", "            encode(str(\"hello\"))\n            returns \"iwooa\"\n\
    \            \n            encode(str(\"howdy\"))\n            returns \"iaeou\"\
    \n            \n            encode(str(\"hallo\"))\n            returns \"iaeee\"\
    \n            \n            encode(str(\"goodbye\"))\n            returns \"iuoouaee\"\
    \n    \"\"\"\n    \n    \n    encoded = \"\"\n    \n    for i in range(len(message)-1):\n\
    \        if (message[i] != message[i+1]):\n            encoded += message[i]\n\
    \        else:\n            encoded += message[i+1]\n            \n    for i in\
    \ range(0, len(message)-2):\n        if ((message[i] in vowels) & (message[i+1]\
    \ in vowels)):\n            encoded += alphabet[((alphabet.index(message[i]) +\
    \ alphabet.index(message[i+1]))//2)%len(alphabet)]\n        else:\n          \
    \  encoded += message[i]\n    \n    if (message[-1] not in vowels):\n        encoded\
    \ += message[-1]\n        \n    return encoded\n</cell>\n<cell>", "          \
    \  message = encode(\"<message>\")\n            \n            print(message)\n\
    \            # >h4llo w rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >H4 llo W rld\n   \
    \         \n            message = encode(\"<message>\")\n            \n      \
    \      print(message)\n            # >h4llo w rld\n            \n            message\
    \ = encode(\"<message>\")\n            \n            print(message)\n        \
    \    # >H4 llo W rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >h4llo w rld\n    \
    \        \n            message = encode(\"<message>\")\n            \n       \
    \     print(message)\n            # >H4 llo W rld\n            \n            message\
    \ = encode(\"<message>\")\n            \n            print(message)\n        \
    \    # >h4llo w rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >H4 llo W rld\n   \
    \         \n            message = encode(\"<message>\")\n            \n      \
    \      print(message)\n            # >h4llo w rld\n            \n            message\
    \ = encode(\"<message>\")\n            \n            print(message)\n        \
    \    # >H4 llo W rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >h4llo w rld\n    \
    \        \n            message = encode(\"<message>\")\n            \n       \
    \     print(message)\n            # >H4 llo W rld\n            \n            message\
    \ = encode(\"<message>\")\n            \n            print(message)\n        \
    \    # >h4llo w rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >H4 llo W rld\n   \
    \         \n            message = encode(\"<message>\")\n            \n      \
    \      print(message)\n            # >h4llo w rld\n            \n            message\
    \ = encode(\"<message>\")\n            \n            print(message)\n        \
    \    # >H4 llo W rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >h4llo w rld\n    \
    \        \n            message = encode(\"<message>\")\n            \n       \
    \     print(message)\n            # >H4 llo W rld\n            \n            message\
    \ = encode(\"<message>\")\n            \n            print(message)\n        \
    \    # >h4llo w rld\n            \n            message = encode(\"<message>\"\
    )\n            \n            print(message)\n            # >H4 llo W rld\n   \
    \         \n            message = encode(\"<message>\")\n            \n      \
    \      print(message)\n            # >h4llo w rld\n            \n            message\
    \ = encode(\"<message>\")\n            ", "            encode(\"Hello! How are\
    \ you?\")\n            > \"HAOEY! HOWR AROY?\"\n    \n    \"\"\"\n    \n    \n\
    \    alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    vowels\
    \ = 'aeiouAEIOU'\n    \n    \n    return ''.join([alphabet[alphabet.index(a) +\
    \ alphabet.index(b)] for a, b in zip(message, vowels) if b not in vowels])\n\n\
    print(encode('Hello! How are you?'))\n</cell>\n<text>\nExercises\n\n</text>\n\
    <text>\nExercise 1\n\n</text>\n<text>\nWrite a function that takes a string and\
    \ splits it into chunks of size n. \nIt should return a list of substrings, each\
    \ of which is of length n.\nIt should raise an exception if it encounters a string\
    \ that is of length greater than\nor equal to n.\nIt should return the empty string\
    \ if the string passed in is of length 0.\nExamples:\n'Hello world' should return\
    \ ['Hell', 'o world', '']\n'Hello world' should raise an exception because its\
    \ length is greater than 2\n'Hello world' should return ['Hell', 'o world', '']\n\
    \n\n</text>\n<cell>", "            >>> encode(\"Hello World\")\n            'HLo\
    \ WoRlD'\n            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n  \
    \          >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>>\
    \ encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\"\
    )\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n         \
    \   'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n\
    \            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n           \
    \ >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"\
    HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\"\
    )\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n         \
    \   'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n\
    \            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n           \
    \ >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"\
    HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\"\
    )\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n         \
    \   'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n\
    \            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n           \
    \ >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"\
    HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\"\
    )\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n         \
    \   'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n\
    \            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n           \
    \ >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"\
    HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\"\
    )\n            'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n         \
    \   'HeLo WrLd'\n            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n\
    \            >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n           \
    \ >>> encode(\"HelloWorld\")\n            'HeLo WrLd'\n            >>> encode(\"\
    HelloWorld\")\n            'HeLo WrLd'\n", "            encode(\"HELLO\")\n  \
    \          'HLO' \n            encode(\"I LOVE YOU\")\n            'I KP YU U'\n\
    \            encode(\"I LOVE YOU TODAY\")\n            'I KP YU U TY DA'\n   \
    \         \"\"\"\n            \n\n    Parameters:\n            message (str):\
    \ The message to be encoded.\n    \n    Returns:\n            str: The encoded\
    \ message.\n    \"\"\"\n    \n    # Step 1: encode the message\n    encoded =\
    \ message.lower()\n    \n    # Step 2: Replace all vowels with the letter that\
    \ appears 2 places \n    # ahead of it in the english alphabet.\n    encoded_list\
    \ = list(encoded)\n    \n    for index, letter in enumerate(encoded_list):\n \
    \       if letter in vowels:\n            encoded_list[index] = letters[vowels.index(letter)][vowels.index(letter)+2]\n\
    \        \n    # Step 3: Join the list elements into one string\n    encoded =\
    \ \"\".join(encoded_list)\n    \n    return encoded\n</cell>\n<cell>\nencode(encode(\"\
    I LOVE YOU TODAY\"))\n</cell>\n<cell>\nencode(encode(\"I LOVE YOU\"))\n</cell>\n\
    <cell>\nencode(encode(\"I LOVE YOU TODAY\"))\n</cell>\n<text>\nThe Happy House\n\
    \n</text>\n<cell>\nhappy_list = ['apple','mango','orange','banana']\n\nhappy_dict\
    \ = {}\n\nfor fruit in happy_list:\n    happy_dict[fruit] = fruit.capitalize()\n\
    \    \nhappy_dict\n</cell>\n<cell>\nhappy_list\n</cell>\n<cell>\nfor key in happy_dict:\n\
    \    print(happy_dict[key])\n</cell>\n<cell>\nhappy_list\n</cell>\n<cell>\nhappy_dict\
    \ = {}\n\nfor fruit in happy_list:\n    happy_dict[fruit] = fruit.capitalize()\n\
    \    \nhappy_dict\n</cell>\n<cell>\nfor key in happy_dict:\n    print(happy_dict[key])\n\
    </cell>\n<text>\nQuestion 6: Write a function called decode() that takes a message\
    \ encoded in \n    such a way that it swaps case of all letters, replaces all\
    \ vowels in \n    the message with the letter that appears 2 places ahead of that\
    \ \n    vowel in the english alphabet. \n    Assume only letters. \n    \n   \
    \ Examples:\n            \"\"\"\n            decode(\"HLO\")\n            'HELLO'\
    \ \n            decode(\"I  KP  YU  U\")\n            'I LOVE YOU'\n         \
    \   decode(\"I  KP  YU  U  TY  DA", "            Given the input message, \"Hi\
    \ my name is\", the output should\n            be \"ih2 M3 N4\"\n            \"\
    \"\"\n            \n    Args:\n        message: Input message\n\n    Returns:\n\
    \        encoded message\n    \"\"\"\n    alphabet = string.ascii_lowercase\n\
    \    message = list(message.lower())\n    vowels = [i for i, a in enumerate(alphabet)\
    \ if a in \"aeiou\"]\n    for i, a in enumerate(vowels):\n        before = message[i-1]\n\
    \        after = message[i+2]\n        if before in alphabet:\n            message[i]\
    \ = alphabet[alphabet.index(before) + 2]\n        if after in alphabet:\n    \
    \        message[i] = alphabet[alphabet.index(after) - 1]\n    return \"\".join(message)\n\
    </cell>\n<cell>", "    >>> encode('i love you')\n    'I love you'\n    >>> encode('i\
    \ hate you')\n    'I hate you'\n    \"\"\"\n    return message\n</cell>\n<cell>\n\
    encode(message='i love you')\n</cell>\n<cell>\nencode(message='i hate you')\n\
    </cell>\n<text>\nCoding Exercise #3\nCreate a function that takes a message, and\
    \ returns a new message with all of the vowels replaced by \nthe letter that appears\
    \ 2 places ahead of the vowel in the alphabet. \nUse your encode function for\
    \ the rest of the code.\n\nExamples:\n    >>> encode('i love you')\n    'I love\
    \ you'\n    >>> encode('i hate you')\n    'I hate you'\n    >>> encode('i hate\
    \ you')\n    'I owe you'\n    \"\"\"\n    \n    return message\n</cell>\n<cell>\n\
    encode(message='i love you')\n</cell>\n<cell>\nencode(message='i hate you')\n\
    </cell>\n<cell>\nencode(message='i hate you')\n</cell>\n<cell>\nencode(message='i\
    \ hate you')\n</cell>\n<text>\nCoding Exercise #4\nCreate a function that takes\
    \ a message, and returns a new message with all of the vowels replaced by \nthe\
    \ letter that appears 2 places ahead of the vowel in the alphabet. \nUse your\
    \ encode function for the rest of the code.\n\nExamples:\n    >>> encode('i love\
    \ you')\n    'I love you'\n    >>> encode('i hate you')\n    'I hate you'\n  \
    \  >>> encode('i hate you')\n    'I hate you'\n    >>> encode('i hate you')\n\
    \    'I owe you'\n    \"\"\"\n    \n    return message\n</cell>\n<cell>\nencode(message='i\
    \ love you')\n</cell>\n<cell>\nencode(message='i hate you')\n</cell>\n<cell>\n\
    encode(message='i hate you')\n</cell>\n<cell>\nencode(message='i hate you')\n\
    </cell>\n<cell>\nencode(message='i hate you')\n</cell>\n<cell>", "    >>> encode('What\
    \ is your name?') \n    'GIBBERISHGIBBERISH'\n            \"\"\"\n    \"\"\"\n\
    \    pass\n\n", "            >>> encode('Hello world')\n            'HLOEY WORLD'\n\
    \            >>> encode('Hello world')\n            'HLOEY WORLD'\n          \
    \  \n            \n            \n            \"\"\"\n\n    \"\"\"\n    \n    \n\
    \    # Make a list of the message's letters \n    letters = list(message)\n  \
    \  \n    # Get the letter's index in the english alphabet \n    english_index\
    \ = 1\n    \n    # Get the letter that appears 2 places ahead of the vowel \n\
    \    vowel_index = 0\n    \n    # Get the letter's index in the english alphabet\
    \ \n    english_index = 1\n    \n    \n    # Iterate through all the letters in\
    \ the message \n    for letter in letters:\n        \n        # If letter is a\
    \ vowel \n        if letter in VOWELS:\n            # Get the english letter that\
    \ appears 2 places ahead of the vowel \n            english_letter = letter_code[letters[vowel_index]]\n\
    \            # Get the index of the english letter in the letters list \n    \
    \        english_index = letters.index(letters[english_index])\n            #\
    \ Replace the vowel in the message with the english letter that appears 2 places\
    \ ahead \n            # of the vowel \n            letters[vowel_index] = english_letter\n\
    \            # Change the vowel's index to the english letter that appears 2 places\
    \ ahead \n            vowel_index = english_index\n            \n        else:\n\
    \            # Get the index of the english letter in the letters list \n    \
    \        english_index = letters.index(letters[english_index])\n            #\
    \ Replace the letter in the message with the english letter that appears 2 places\
    \ ahead \n            # of the letter's index \n            letters[english_index]\
    \ = letters[english_index+1]\n            # Change the index to the english letter\
    \ that appears 2 places ahead \n            english_index += 1\n            \n\
    \    \n    # Return the message with all the letters replaced \n    return ''.join(letters)\n\
    \n", "    >>> encode(\n    'hello world'\n    )\n    'wllo wrld'\n    \"\"\"\n\
    \    \n    def encode(message: str) -> str:\n        \"\"\"\n        Write a function\
    \ that takes a message, and encodes in such a \n        way that it swaps case\
    \ of all letters, replaces all vowels in \n        the message with the letter\
    \ that appears 2 places ahead of that \n        vowel in the english alphabet.\
    \ \n        Assume only letters. \n        \n        Examples:\n        \"\"\"\
    \n        # Write code here\n        def vowels(message: str) -> str:\n      \
    \      \"\"\"\n            Write a function that takes a message, and replaces\
    \ all vowels in \n            the message with the letter that appears 2 places\
    \ ahead of that \n            vowel in the english alphabet. \n            Assume\
    \ only letters. \n            \n            Examples:\n            \"\"\"\n  \
    \          vowels = list('aeiouAEIOU')\n            \n            for char in\
    \ message:\n                if char in vowels:\n                    index = vowels.index(char)\n\
    \                    new_char = chr(ord(char) + index)\n                    return\
    \ new_char\n            return message\n\n        message1 = \"\"\n        for\
    \ char in message:\n            if char.islower():\n                message1 +=\
    \ char.lower()\n            else:\n                message1 += char\n        message2\
    \ = \"\"\n        for char in message1:\n            if char in 'aeiouAEIOU':\n\
    \                index = vowels.index(char)\n                new_char = chr(ord(char)\
    \ + index)\n                message2 += new_char\n            else:\n        \
    \        message2 += char\n        return message2\n    \n    return encode(message)\n\
    \n", "    >>> encode('I LOVE PYTHON')\n    'I 3ove 5pyt'\n            \"\"\"\n\
    \n    Args:\n        message (str): The message to encode\n\n    Returns:\n  \
    \      str: The encoded message\n    \"\"\"\n    \n    # Write your code here\n\
    \    \n    \n    return encoded_message\n</cell>\n<cell>", "            >>> encode('azertyuiopqrstuvwxyz')\n\
    \            'azertyuiopqrstuvwxyz'\n            >>> encode('azertyuiopqrstuvwxyz')\n\
    \            'yxwvuctgdbrsnbxz'\n            >>> encode('abC DE')\n          \
    \  'abC DE'\n            >>> encode('abC DE')\n            'abC DE'\n        \
    \    >>> encode('A B C')\n            'A B C'\n            >>> encode('A B C')\n\
    \            'A B C'\n            >>> encode('ABC def')\n            'ABC def'\n\
    \            >>> encode('A B C')\n            'A B C'\n            >>> encode('A\
    \ B C')\n            'A B C'\n            >>> encode('abcd')\n            'abcd'\n\
    \            >>> encode('A B C')\n            'A B C'\n            >>> encode('A\
    \ B C')\n            'A B C'\n            >>> encode('A B C')\n            'A\
    \ B C'\n            >>> encode('A B C')\n            'A B C'\n            >>>\
    \ encode('A B C')\n            'A B C'\n            >>> encode('A B C')\n    \
    \        'A B C'\n            >>> encode('A B C')\n            'A B C'\n     \
    \       >>> encode('A B C')\n            'A B C'\n            >>> encode('A B\
    \ C')\n            'A B C'\n            >>> encode('A B C')\n            'A B\
    \ C'\n            >>> encode('A B C')\n            'A B C'\n            >>> encode('A\
    \ B C')\n            'A B C'\n            >>> encode('A B C')\n            'A\
    \ B C'\n            >>> encode('A B C')\n            'A B C'\n            >>>\
    \ encode('A B C')\n            'A B C'\n            >>> encode('A B C')\n    \
    \        'A B C'\n            >>> encode('A B C')\n            'A B C'\n     \
    \       >>> encode('A B C')\n            'A B C'\n            >>> encode('A B\
    \ C')\n            'A B C'\n            >>> encode('A B C')\n            'A B\
    \ C'\n            >>> encode('A B C')\n            'A B C'\n            >>> encode('A\
    \ B C')\n            'A B C'\n            >>> encode('A B C')\n            'A\
    \ B C'\n            >>> encode('A B C')\n            'A B C'\n            >>>\
    \ encode('A B C')\n            'A B C'\n            >>> encode('A B C')\n    \
    \        'A B C'\n            >>> encode('A B C')\n            'A B C'\n     \
    \       >>> encode('A B C')", "            def encode(message: str) -> str:\n\
    \                message = \"Hello World\"\n                # message is now \"\
    HleelO Woorld\"\n                return message\n            \"\"\"\n        \n\
    \    \n    Args:\n        message: string to be encoded\n    Returns:\n      \
    \  string that has been encoded so that it swaps case\n        of all the letters,\
    \ replaces all vowels in the message with\n        the letter that appears 2 places\
    \ ahead of that vowel in\n        the english alphabet.\n    Examples:\n    \"\
    \"\"\n    return ''.join((c if c.isupper() else c.lower() if c.islower() else\
    \ \n                    '{}{}{}'.format(\n                        message.upper()\
    \ if c.isupper() else \n                        message.lower(),\n           \
    \             message[(message.index(c) + 1) %len(message)].upper() if c.isupper()\
    \ else\n                        message[(message.index(c) + 1) %len(message)].lower()\n\
    \                        ) for c in message))\n    \"\"\"\n    The code above\
    \ is the same as the below code except the 'encode' function\n    can take multiple\
    \ strings as inputs (so can return multiple strings)\n    but this function can\
    \ only take one string as input so it is more \n    efficient to just call the\
    \ 'encode' function once per string.\n    \n    \"\"\"\n</cell>\n<cell>", "  \
    \          >>> encode('hello world') == 'Hllo Wrd'\n            True\n       \
    \     >>> encode('hEllo wOrld') == 'Hllo Wrd'\n            True\n            >>>\
    \ encode('He would never forget') == 'He would never fOrget'\n            True\n\
    \            >>> encode('hello') == 'Hllo'\n            True\n            >>>\
    \ encode('hello') == 'Hllo'\n            True\n            >>> encode('He would\
    \ never forget') == 'He would never fOrget'\n            True\n            >>>\
    \ encode('Hello') == 'Hllo'\n            True\n            >>> encode('Hello')\
    \ == 'Hllo'\n            True\n            >>> encode('He would never forget')\
    \ == 'He would never fOrget'\n            True\n            >>> encode('hello')\
    \ == 'Hllo'\n            True\n            >>> encode('hello') == 'Hllo'\n   \
    \         True\n            >>> encode('He would never forget') == 'He would never\
    \ fOrget'\n            True\n            >>> encode('Hello') == 'Hllo'\n     \
    \       True\n            >>> encode('Hello') == 'Hllo'\n            True\n  \
    \          >>> encode('He would never forget') == 'He would never fOrget'\n  \
    \          True\n            >>> encode('Hello') == 'Hllo'\n            True\n\
    \            >>> encode('Hello') == 'Hllo'\n            True\n            >>>\
    \ encode('He would never forget') == 'He would never fOrget'\n            True\n\
    \            >>> encode('hello') == 'Hllo'\n            True\n            >>>\
    \ encode('hello') == 'Hllo'\n            True\n            >>> encode('He would\
    \ never forget') == 'He would never fOrget'\n            True\n            >>>\
    \ encode('hello') == 'Hllo'\n            True\n            >>> encode('hello')\
    \ == 'Hllo'\n            True\n            >>> encode('He would never forget')\
    \ == 'He would never fOrget'\n            True\n            >>> encode('hello')\
    \ == 'Hllo'\n            True\n            >>> encode('hello') == 'Hllo'\n   \
    \         True\n            >>> encode('He would never forget') == 'He would never\
    \ fOrget'\n            True\n            >>> encode('hello') == 'Hllo'\n     \
    \       True\n            >>> encode('hello') == 'Hllo'\n            True\n  \
    \          >>> encode('He would never forget') == 'He would never fOrget'\n  \
    \          True\n            >>> encode('hello') == 'Hllo'\n            True\n\
    \            >>> encode('hello') == 'Hllo'\n            True\n            >>>\
    \ encode('He would never forget') == 'He would never fOrget'\n            True\n\
    \            >>> encode('hello') == 'Hllo", "            encode('hello')\n   \
    \         'ehllo'\n            \n            encode('')\n            ''\n    \
    \        \n            encode('abracadabra')\n            'abracadabra'\n    \
    \        \n            encode('hello! How are you?')\n            'hxjg! wqer?\
    \ aer'\n            \"\"\"\n    \n    Args:\n        message: \n            String\
    \ to be encoded\n    Returns:\n        Encoded String\n    \"\"\"\n    \n    encoded\
    \ = message.title()\n    \n    for letter in encoded:\n        if letter in VOWELS:\n\
    \            vowel = VOWELS[letter]\n            encoded = encoded.replace(letter,\
    \ vowel + letter)\n    \n    return encoded\n\n", '            example: encode("hello")
    = oeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeoeo',
  "            >>> encode(\"hey\")\n            'ehey'\n            \"\"\"\n    \n\
    \    Args:\n        message (str): the message to be encoded\n\n    Returns:\n\
    \        encoded (str): the message in encoded form\n    \"\"\"\n    encoded =\
    \ message\n    \n    for letter in message:\n        if letter in ascii_lowercase:\n\
    \            encoded = encoded.replace(letter, letter.lower() + ascii_lowercase[ascii_lowercase.index(letter)+1])\
    \ \n    \n    for vowel in \"aeiou\":\n        encoded = encoded.replace(vowel,\
    \ letter.lower() + ascii_lowercase[ascii_lowercase.index(vowel)+1]) \n    \n \
    \   return encoded\n\n", "            Message: \"hello\"\n            Output:\
    \ \"hEllo\"\n            \"\"\"\n            \n            Message: \"hello, world!\"\
    \n            Output: \"heLlo, wORlD!\"\n    \"\"\"\n    \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    \n    vowels = \"aeiouy\"\n    \n    # Step 1: Iterate through the message\
    \ and make everything upper case \n    message_upper = message.upper()\n    \n\
    \    # Step 2: Iterate through each letter in the message, and swap case \n  \
    \  # of the letter\n    for i in range(len(message_upper)):\n        if message_upper[i]\
    \ == vowels[i]:\n            message_upper[i] = vowels[alphabet.index(message_upper[i])+1]\n\
    \    \n    # Step 3: Iterate through each letter in the message, and replace all\
    \ vowels \n    # with the letter that appears 2 places ahead of the vowel\n  \
    \  for i in range(len(message_upper)):\n        if message_upper[i] in vowels:\n\
    \            message_upper[i] = alphabet[alphabet.index(message_upper[i])+2]\n\
    \            \n    return message_upper\n</cell>\n<cell>\nmessage = encode(\"\
    hello\")\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"hello, world!\"\
    )\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"hello\")\nprint(message)\n\
    </cell>\n<cell>\nmessage = encode(\"hello, world!\")\nprint(message)\n</cell>\n\
    <cell>\nmessage = encode(\"hello, world!\")\nprint(message)\n</cell>\n<cell>\n\
    message = encode(\"Hello, World!\")\nprint(message)\n</cell>\n<cell>\nmessage\
    \ = encode(\"Hello, World!\")\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"\
    Hello, World!\")\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"Hello, World!\"\
    )\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"Hello, World!\")\nprint(message)\n\
    </cell>\n<cell>\nmessage = encode(\"Hello, World!\")\nprint(message)\n</cell>\n\
    <cell>\nmessage = encode(\"Hello, World!\")\nprint(message)\n</cell>\n<cell>\n\
    message = encode(\"Hello, World!\")\nprint(message)\n</cell>\n<cell>\nmessage\
    \ = encode(\"Hello, World!\")\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"\
    Hello, World!\")\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"Hello, World!\"\
    )\nprint(message)\n</cell>\n<cell>\nmessage = encode(\"Hello, World!\")\nprint(message)\n\
    </cell>\n<cell>\nmessage = encode(\"Hello, World!\")\nprint(message)\n</cell>\n",
  "            encoded_message = encode(\"I like cheese\")\n            encoded_message\
    \ == \"\"\"I LL CHEES\"\"\"\n\n    Args:\n        message (str): String to be\
    \ encoded\n        \n    Returns:\n        str: encoded string\n    \"\"\"\n \
    \   message = message.upper()\n    letters = \"AEIOUaeiou\"\n    \n    for i,\
    \ l in enumerate(message):\n        \n        for a in letters:\n            if\
    \ a == l:\n                letter_at_position = a\n                letter_index\
    \ = i\n                \n    letter_at_position = letter_at_position.upper()\n\
    \    \n    message = message.replace(letter_at_position, letters[letter_index+1])\n\
    \    \n    return message\n\n\ndecode(decode(encode('I like cheese')) == \"\"\"\
    I like cheese\"\"\"\n\n", "            message : b\n            returns : bb\n\
    \            \n            message : ab\n            returns : a_b\n         \
    \   \n            message : abc\n            returns : abc_\n            \n  \
    \          message : abba\n            returns : abba_\n            \n       \
    \     message : abbba\n            returns : abbba_\n            \n          \
    \  message : abbbba\n            returns : abbbba_\n            \n           \
    \ message : ababab\n            returns : ababab_\n            \"\"\"\n      \
    \      \n    \"\"\"\n\n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    letters\
    \ = []\n    \n    for letter in message:\n        if letter in vowels:\n     \
    \       letters.append(letter)\n            letter = letters.count(letter)\n \
    \           letters.append(letter)\n            letter = letters.count(letter)\n\
    \            letters.append(letter)\n            letter = letters.count(letter)\n\
    \            letters.append(letter)\n            letter = letters.count(letter)\n\
    \            letters.append(letter)\n        else:\n            for letter2 in\
    \ letters:\n                if letter2 == \"a\":\n                    if letter\
    \ == letters[letters.index(\"a\")-1]:\n                        letter = \"b\"\n\
    \                        letters.insert(letters.index(\"a\"), letter)\n      \
    \                  letter = letters.count(letter)\n                        letters.append(letter)\n\
    \                        letter = letters.count(letter)\n                    \
    \    letters.append(letter)\n                        letter = letters.count(letter)\n\
    \                        letters.append(letter)\n                        letter\
    \ = letters.count(letter)\n                        letters.append(letter)\n  \
    \                      letter = letters.count(letter)\n                      \
    \  letters.append(letter)\n                        break\n                elif\
    \ letter2 == \"e\":\n                    if letter == letters[letters.index(\"\
    e\")-1]:\n                        letter = \"f\"\n                        letters.insert(letters.index(\"\
    e\"), letter)\n                        letter = letters.count(letter)\n      \
    \                  letters.append(letter)\n                        letter = letters.count(letter)\n\
    \                        letters.append(letter)\n                        letter\
    \ = letters.count(letter)\n                        letters.append(letter)\n  \
    \                      letter = letters.count(letter)\n                      \
    \  letters.append(letter)\n                        break\n                elif\
    \ letter2 == \"i\":\n                    if letter == letters[letters.index(\"\
    i\")-1]:\n                        letter = \"g\"\n                        letters.insert(letters.index(\"\
    i\"), letter)\n                        letter = letters.count(letter)\n      \
    \                  letters.append(letter)\n                        letter = letters.count(letter)\n\
    \                        letters.append(letter)\n                        letter\
    \ = letters.count(letter)\n                        letters.append(letter)\n  \
    \                      letter", "            Hack Clubs\n            Hack Club\n\
    \            Hack Clubs\n            \n            Hack Club \n            Hack\
    \ Clubs\n            \n            Hack Club s\n            Hack Club \n     \
    \       Hack Club\n            \n            Hack Clubs\n            Hack Club\
    \ \n            Hack Club\n            \n            Hack Club s\n           \
    \ Hack Club\n            Hack Club\n            \n            Hack Club \n   \
    \         Hack Clubs\n            \n            Hack Club s\n            Hack\
    \ Club\n            Hack Club\n            \n            Hack Club \n        \
    \    Hack Club \n            Hack Club\n            Hack Club\n            \n\
    \            Hack Club s\n            Hack Club s\n            Hack Club \n  \
    \          Hack Club \n            Hack Club \n            Hack Club \n      \
    \      \n            Hack Club \n            Hack Club \n            Hack Club\
    \ \n            Hack Club \n            Hack Club \n            Hack Club \n \
    \           Hack Club\n            Hack Club\n            Hack Club\n        \
    \    Hack Club\n            Hack Club\n            Hack Club\n            Hack\
    \ Club\n            Hack Club\n            Hack Club\n            Hack Club\n\
    \            Hack Club\n            Hack Club\n            Hack Club\n       \
    \     Hack Club\n            Hack Club\n            Hack Club\n            Hack\
    \ Club\n            Hack Club\n            Hack Club\n            Hack Club\n\
    \            Hack Club\n            Hack Club\n            Hack Club\n       \
    \     Hack Club\n            Hack Club\n            Hack Club\n            Hack\
    \ Club\n            Hack Club\n            Hack Club\n            Hack Club\n\
    \            Hack Club\n            Hack Club\n            Hack Club\n       \
    \     Hack Club\n            Hack Club\n            Hack Club\n            Hack\
    \ Club\n            Hack Club\n            Hack Club\n            Hack Club\n\
    \            Hack Club\n            Hack Club\n            ", "            assert\
    \ encode('hello') == 'Jgnnt'\n            assert encode('banana') == 'Mzhgbna'\n\
    \    \"\"\"\n    return ''.join([\n        f'{v}{k}' if k.lower() == v else k.lower()\
    \ \n        for k, v in zip(\n            sorted(string.ascii_lowercase),\n  \
    \          string.ascii_lowercase[\n                list(\n                  \
    \  zip(\n                        range(len(string.ascii_lowercase)), \n      \
    \                  string.ascii_lowercase,\n                    )\n          \
    \      )[0][1]\n            ]\n        )\n    ])\n</cell>\n<cell>\nassert encode(input('Enter\
    \ a string: ')) == 'Kgtnq'\n</cell>\n<text>\nQuestion 5: Decode a message\nWrite\
    \ a function that decodes a message in such a way that it returns \nthe original\
    \ message. Assume that the message is in the english alphabet. \nAssume that only\
    \ letters and vowels are used. You can assume that the message\ncontains vowels\
    \ and letters. \nExamples:\n'Jgnnt'\n'Mzhgbna'\n'Mzhgbna' should return 'banana'\n\
    'Kgtnq' should return 'hello'\n'Rkgtnq' should return 'apple'\n'Qkgtnq' should\
    \ return 'ocean'\n'Kgtnq' should return 'hello'\n'Kgtnq' should return 'hello'\n\
    \n\n</text>\n<cell>", "            Message: \"Hello World\"\n            Output:\
    \ \"H E L L O\"\n            \n            Message: \"HelloWorld\"\n         \
    \   Output: \"H E L L O\"\n            \n            Message: \"hELLOWorld\"\n\
    \            Output: \"H E L L O\"\n            \"\"\"\n    Args:\n        message\
    \ (str): a message to be encoded\n    Returns:\n        str: a decoded version\
    \ of the message\n    \"\"\"\n    return ''.join([\n        chr(ord(ch) - 65 +\
    \ message.count(chr(ord(ch)-65))) if ch.islower() else ch\n        for ch in message\n\
    \    ])\n\n", "            encode(\"Hello World!\") = \"2o3l4o5l2o\"\n       \
    \     \"\"\"\n            \n    \n    Args:\n            message: String to be\
    \ encoded. \n        \n    Returns:\n            Encoded string. \n    \"\"\"\n\
    \    \n    pass\n\n", "            encode ('a man with a guitar') --> 'gutarnama\
    \ mihaaagitar'\n            encode ('a woman with a bass') --> 'basssama mihaaagitar'\n\
    \            encode ('a person with a dog') --> 'dogpama mihaaagitar'\n      \
    \      encode ('a man with an owl') --> 'owlnama mihaaagitar'\n            encode\
    \ ('a person with an owl') --> 'owlpama mihaaagitar'\n            encode ('a man\
    \ with 7 legs') --> '7legnama mihaaagitar'\n            encode ('a man with 2\
    \ legs') --> '2legnama mihaaagitar'\n            encode ('a woman with 6 legs')\
    \ --> '6legssama mihaaagitar'\n            encode ('a woman with 5 legs') -->\
    \ '5legssama mihaaagitar'\n            encode ('a woman with 4 legs') --> '4legssama\
    \ mihaaagitar'\n            encode ('a man with 1 leg') --> '1legnama mihaaagitar'\n\
    \            encode ('a man with 5 legs') --> '5legssama mihaaagitar'\n      \
    \      encode ('a man with 2 legs') --> '2legnama mihaaagitar'\n            encode\
    \ ('a woman with 3 legs') --> '3legssama mihaaagitar'\n            encode ('a\
    \ woman with 2 legs') --> '2legnama mihaaagitar'\n            encode ('a woman\
    \ with 6 legs') --> '6legssama mihaaagitar'\n            encode ('a woman with\
    \ 7 legs') --> '7legnama mihaaagitar'\n            encode ('a woman with 4 legs')\
    \ --> '4legssama mihaaagitar'\n            encode ('a man with 5 legs') --> '5legssama\
    \ mihaaagitar'\n            encode ('a man with 1 leg') --> '1legnama mihaaagitar'\n\
    \            encode ('a man with 3 legs') --> '3legssama mihaaagitar'\n      \
    \      encode ('a woman with ", "            encode(\"Hallo World\")\n       \
    \         => (\"kHoRcEd wORlD\")\n            \"\"\"\n    \"\"\"\n    return \"\
    \".join([\n            ''.join(\n                [\n                    c.upper()\
    \ if c.isupper() else c.lower() \n                    for c in message\n     \
    \           ]\n            )\n            for c in message\n    ])\n", "     \
    \       encode(\"The Quick Brown Fox Jumped over the Lazy Dog\")\n           \
    \ Returns: 'thEck quIK Brown foXx jUmped ovEr lAzy doG'\n            \n      \
    \      encode(\"The QUICK brown fox JUMPED over the lazy dog\")\n            Returns:\
    \ 'thEck quIK Brown foXx jUmped ovEr lAzy doG'\n            \"\"\"\n    \n   \
    \ \"\"\"\n\n    Args:\n        message(str): Message to encode\n        \n   \
    \ Returns:\n        str -- Encoded message\n    \"\"\"\n    \n    # encode all\
    \ lowercase letters\n    message = message.lower()\n    \n    # create a function\
    \ that takes a letter, and a place to look for the letter that is 2 places ahead\n\
    \    \n    # add in the logic for all vowels\n    # create a function that takes\
    \ two letters, returns the letter that appears 2 places ahead\n    # remember:\
    \ each vowel is two letters ahead of its consonant\n    \n    # add the logic\
    \ for spaces\n    # create a function that takes a letter, and a place to look\
    \ for the letter that is 3 places ahead\n    \n    \n    # return the message\n\
    \n    return message\n    ", "    encode \"Hello\"\n    returns \"ehlo\"\n   \
    \ \n    \"\"\"\n\n    return message\n</cell>\n<cell>\nencode?\n</cell>\n<cell>",
  "            encode(\"HELLO\")\n            => \"HHHHLLO\"\n            encode(\"\
    WELCOME\")\n            => \"WWWWLCOME\"\n            \"\"\"\n            \n \
    \   Args:\n        message: a string\n    \n    Returns: string\n    \"\"\"\n\
    \    result = \"\"\n    for letter in message:\n        if letter.lower() not\
    \ in \"abcdefghijklmnopqrstuvwxyz\":\n            result += letter\n        else:\n\
    \            result += letter.lower()\n    return result \n", "        encode('hi')\n\
    \        'Hx'\n        encode('where are you')\n        'wM'\n        encode('a')\n\
    \        'Ax'\n        encode('you say awesome')\n        'yM'\n        encode('what\
    \ are you up to')\n        'yxM'\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiouy'\n    message = message.upper()\n    message = message.split()\n\
    \    message = ' '.join([message[0],message[1]])\n    \n    encoded = ''\n   \
    \ for word in message:\n        rep = ''\n        for i,letter in enumerate(word):\n\
    \            positions = [j for j in range(len(word)) if word[j] == letter]\n\
    \            if len(positions) > 1:\n                rep+=alphabet[alphabet.index(vowels[positions[0]])+1]\n\
    \                rep+=alphabet[alphabet.index(vowels[positions[1]])+1]\n     \
    \           rep+=letter\n            elif len(positions) == 0:\n             \
    \   rep+=letter\n        encoded+=rep\n    encoded = encoded.replace(' ', '')\n\
    \    return encoded\n\n", "            message = encode(message)\n           \
    \ print(message)\n            # 'IHOPUX'\n            # \"\"\"\n    \"\"\"\n \
    \   message = message.upper()\n    message = message.replace(\"A\", \"1\")\n \
    \   message = message.replace(\"B\", \"2\")\n    message = message.replace(\"\
    C\", \"3\")\n    message = message.replace(\"D\", \"4\")\n    message = message.replace(\"\
    E\", \"5\")\n    message = message.replace(\"F\", \"6\")\n    message = message.replace(\"\
    G\", \"7\")\n    message = message.replace(\"H\", \"8\")\n    message = message.replace(\"\
    I\", \"9\")\n    message = message.replace(\"J\", \"10\")\n    message = message.replace(\"\
    K\", \"11\")\n    message = message.replace(\"L\", \"12\")\n    message = message.replace(\"\
    M\", \"13\")\n    message = message.replace(\"N\", \"14\")\n    message = message.replace(\"\
    O\", \"15\")\n    message = message.replace(\"P\", \"16\")\n    message = message.replace(\"\
    Q\", \"17\")\n    message = message.replace(\"R\", \"18\")\n    message = message.replace(\"\
    S\", \"19\")\n    message = message.replace(\"T\", \"20\")\n    message = message.replace(\"\
    U\", \"21\")\n    message = message.replace(\"V\", \"22\")\n    message = message.replace(\"\
    W\", \"23\")\n    message = message.replace(\"X\", \"24\")\n    message = message.replace(\"\
    Y\", \"25\")\n    message = message.replace(\"Z\", \"26\")\n\n    message = message.replace(\"\
    1\", \"A\")\n    message = message.replace(\"2\", \"B\")\n    message = message.replace(\"\
    3\", \"S\")\n    message = message.replace(\"4\", \"H\")\n    message = message.replace(\"\
    5\", \"I\")\n    message = message.replace(\"6\", \"K\")\n    message = message.replace(\"\
    7\", \"L\")\n    message = message.replace(\"8\", \"M\")\n    message = message.replace(\"\
    9\", \"N\")\n    message = message.replace(\"10\", \"O\")\n    message = message.replace(\"\
    11\", \"P\")\n    message = message.replace(\"12\", \"Q\")\n    message = message.replace(\"\
    13\", \"R\")\n    message = message.replace(\"14\", \"T\")\n    message = message.replace(\"\
    15\", \"U\")\n    message = message.replace(\"16\", \"V\")\n    message = message.replace(\"\
    17\", \"W\")\n    message = message.replace(\"18\", \"X\")\n    message = message.replace(\"\
    19\", \"Y\")\n    message = message.replace(\"20\", \"Z\")\n\n    message = message.replace(\"\
    1\", \"A\")\n    message = message.replace(\"2\", \"B\")\n    message = message.replace(\"\
    3\", \"S\")\n    message = message.replace(\"4\", \"H\")\n    message = message.replace(\"\
    5\", \"I\")\n    message = message.replace(\"6\", \"K\")\n    message = message.replace(\"\
    7\", \"L\")\n    message = message.replace(\"8\", \"M\")\n    message = message.replace(\"\
    9\", \"N\")\n    message = message.replace(\"", "            encode('hello')\n\
    \            # 'h2b3e4l5o'\n            \"\"\"\n    \"\"\"\n    \n    alphabet\
    \ = list(\"abcdefghijklmnopqrstuvwxyz\")\n    message = \"\".join(message).lower().replace(\"\
    i\", \"1\").replace(\"e\", \"2\").replace(\"o\", \"3\").replace(\"u\", \"4\")\n\
    \    \n    replaced = \"\"\n    idx = 0\n    for letter in message:\n        try:\n\
    \            letter_position = alphabet.index(letter)\n        except ValueError:\n\
    \            letter_position = -1\n        if letter_position > idx:\n       \
    \     replaced += alphabet[(idx + letter_position)]\n        idx += 1\n      \
    \  replaced += letter\n    return replaced\n", "            message : \"Hello\
    \ World\"\n            encoded message: \"LdlroW oeiF\"\n            \"\"\"\n\
    \            \n    Args:\n        message (str): the message\n    \n    Returns:\n\
    \        encoded message (str)\n    \"\"\"\n    \n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    vowels = 'aeiouy'\n    \n    def encode(message):\n        return message.replace('a',\
    \ '').replace('e', '').replace('i', 'o').replace('o', 'o').replace('u', '')\n\
    \    \n    return encode(message)\n</cell>\n<cell>\nencoded = encode(message)\n\
    </cell>\n<cell>\nencoded\n</cell>\n<text>\nThe encode function uses some python\
    \ string/list manipulation techniques we've been learning about, including:\n\n\
    The replace method - strings are immutable, so this replaces all the letters 'a'\
    \ with '', then replaces the 'e' in 'e' with '', and so on and so forth.\n\n\n\
    The split method - this splits a string into a list of strings in which each string\
    \ represents a letter.\n\n\nThe zip method - this creates pairs of strings from\
    \ two lists in which each list represents a letter. For example, the strings 'a'\
    \ and 'b' can be paired together in 'ab' using zip('a','b').\n\n\n\n\n</text>\n\
    <text>\nBonus Challenge - Try it Out\n\n</text>\n<cell>", "            encode(\"\
    hello\")\n            >>> \"heelllloo\"\n            \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    #create message string \n    msg_str = message\n    \n \
    \   \n    #make lower case \n    msg_str = msg_str.lower()\n    \n    \n    #replace\
    \ all vowels in string with their 2 letter equivalents \n    msg_str = msg_str.replace(\"\
    a\", \"1\")\n    msg_str = msg_str.replace(\"e\", \"2\")\n    msg_str = msg_str.replace(\"\
    i\", \"3\")\n    msg_str = msg_str.replace(\"o\", \"4\")\n    msg_str = msg_str.replace(\"\
    u\", \"5\")\n    msg_str = msg_str.replace(\"v\", \"6\")\n    msg_str = msg_str.replace(\"\
    y\", \"7\")\n    msg_str = msg_str.replace(\"!\", \"0\")\n    msg_str = msg_str.replace(\"\
    ?\", \"1\")\n    \n    \n    #replace the letter that appears 2 places ahead of\
    \ the vowel \n    #in the alphabet with the letter that appears 2 places ahead\
    \ \n    msg_str = msg_str.replace(\"#\", \"8\")\n    msg_str = msg_str.replace(\"\
    @\", \"9\")\n    msg_str = msg_str.replace(\"[\", \"2\")\n    msg_str = msg_str.replace(\"\
    ]\", \"3\")\n    msg_str = msg_str.replace(\"(\", \"4\")\n    msg_str = msg_str.replace(\"\
    )\", \"5\")\n    msg_str = msg_str.replace(\",\", \"6\")\n    msg_str = msg_str.replace(\"\
    %\", \"7\")\n    msg_str = msg_str.replace(\"$\", \"8\")\n    msg_str = msg_str.replace(\"\
    *\", \"9\")\n    msg_str = msg_str.replace(\":\", \"2\")\n    msg_str = msg_str.replace(\"\
    ;\", \"3\")\n    msg_str = msg_str.replace(\"'\", \"4\")\n    msg_str = msg_str.replace(\"\
    +\", \"5\")\n    msg_str = msg_str.replace(\"/\", \"6\")\n    msg_str = msg_str.replace(\"\
    \\\\\", \"7\")\n    msg_str = msg_str.replace(\"(\", \"8\")\n    msg_str = msg_str.replace(\"\
    )\", \"9\")\n    msg_str = msg_str.replace(\"-\", \"0\")\n    msg_str = msg_str.replace(\"\
    <\", \"1\")\n    msg_str = msg_str.replace(\">\", \"2\")\n    msg_str = msg_str.replace(\"\
    ?\", \"3\")\n    msg_str = msg_str.replace(\"@\", \"4\")\n    msg_str = msg_str.replace(\"\
    #\", \"5\")\n    msg_str = msg_str.replace(\"$\", \"6\")\n    msg_str = msg_str.replace(\"\
    *\", \"7\")\n    msg_str = msg_str.replace(\"-\", \"0\")\n    msg_str = msg_str.replace(\"\
    =\", \"1\")\n    msg_str = msg_str.replace(\"+\", \"2\")\n    msg_str = msg_str.replace(\"\
    -\", \"0\")\n    msg_str = msg_str.replace(\":\", \"1\")\n", "            >>>\
    \ encode(\n                message = \n                    \"\"\"\n          \
    \                  Hello, my name is Shivam!\n                            I am\
    \ a student of computer science!\n                            What do you think?\n\
    \                            \n                            \"\"\"\n          \
    \                  )\n                            \n                         \
    \   \"\"\"\n                            'kqwvfrmhtpzab'\n                    \
    \        \"\"\"\n    \n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    letters = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', \n\
    \                'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']\n    \n    encoded_message\
    \ = ''\n    \n    for letter in message:\n        if letter in vowels:\n     \
    \       encoded_message += letters[vowels.index(letter)]\n        elif letter\
    \ in letters:\n            encoded_message += letters[letters.index(letter) +\
    \ 1]\n        elif letter in 'qwertyuiopasdfghjklzxcvbnm':\n            encoded_message\
    \ += letter\n        else:\n            encoded_message += letter\n        \n\
    \    return encoded_message\n", "            >>> print(encode)\n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> \n            >>> \n            >>>\
    \ \n            >>> \n            >>> \n            >>> \n            >>> \n \
    \           >>> \n            >>> \n            >>> \n            >>> \n     \
    \       >>> \n            >>> \n            >>> \n            >>> \n         \
    \   >>> \n            >>> \n            >>> ", "            # this example will\
    \ encode \"Hello\"\n            # into \"Heloeellllooo\" \n\n            message\
    \ = \"Hello\"\n            def encode(message: str) -> str:\n                return\
    \ message\n\n            # this function can be run by itself\n            print(encode(message))\n\
    \            # prints \"Heloeellllooo\"\n\n    \"\"\"\n\n    #initialize a variable\
    \ to store our encoded message\n    encoded_message = \"\"\n\n    #create a list\
    \ of all english letters\n    english_alphabet = string.ascii_lowercase\n    \n\
    \    #create a list containing all possible encoded letters\n    possible_letters\
    \ = []\n\n    #loop through the list containing all possible letters \n    #and\
    \ check if each letter is in the message\n    for letter in english_alphabet:\n\
    \        if letter in message:\n            possible_letters.append(letter)\n\n\
    \    #loop through the message\n    for letter in message:\n        \n       \
    \ #keep track of where we find the letters\n        letter_position = 0\n    \
    \    \n        #loop through each possible letter in the message\n        for\
    \ possible_letter in possible_letters:\n            \n            #check if the\
    \ current letter is the same as the possible\n            #letter and that position\
    \ matches the letter position\n            #of the current letter\n          \
    \  if letter == possible_letter and letter_position == letter_position + 1:\n\
    \                \n                #get the next letter and add it to the message\n\
    \                encoded_message += possible_letter\n                \n      \
    \          #increment the letter position\n                letter_position +=\
    \ 1\n                \n                #break the loop to save time\n        \
    \        break\n                \n            #otherwise, increase the letter\
    \ position by one\n            letter_position += 1\n    \n    #return the encoded\
    \ message\n    return encoded_message\n", "            encode(\"Hello World\"\
    )\n            # \"wXoR RdYlD lOoW\"\n            \"\"\"\n    \"\"\"\n    return\
    \ message.lower()\\\n           .translate({ord(ch): ord(ch) + 2 for ch in 'aeiou'})\\\
    \n           .translate({ord(ch): ord('a') if ord(ch) + 2 > ord('z') else ord(ch)\
    \ + 1 for ch in 'aeiou'})\n", "    encode(\"Hello\")\n    > 'Jgngd'\n    encode(\"\
    hEllo\")\n    > 'hjngd'\n    encode(\"hEllo World\")\n    > 'hjngd wodr'\n   \
    \ encode(\"\")\n    > ''\n    \n    \n    Args:\n        message (str): the message\n\
    \n    Returns:\n        (str): the encoded message\n    \"\"\"\n    \n    # Create\
    \ a function that will encode the message \n    def encode(message: str) -> str:\n\
    \        message_encoded = \"\"\n        for letter in message:\n            if\
    \ letter in ascii_lowercase:\n                message_encoded += letter\n    \
    \        elif letter in vowels:\n                message_encoded += letter_dict[letter_count.index(letter)]\n\
    \            else:\n                message_encoded += letter_dict[letter_count.index(letter)\
    \ + 1]\n        return message_encoded\n\n    return encode(message)\n</cell>\n\
    <text>\nNow let's test our function!\n\n\n</text>\n<cell>\nprint(\"First test\
    \ case: Hello\")\nassert encode(message=\"Hello\") == encode(\"Jgngd\"), \"Wrong\
    \ solution for First test case\"\nprint(\"Second test case: hEllo\")\nassert encode(message=\"\
    hEllo\") == encode(\"hjngd\"), \"Wrong solution for Second test case\"\nprint(\"\
    Third test case: hEllo World\")\nassert encode(message=\"hEllo World\") == encode(\"\
    hjngd wodr\"), \"Wrong solution for Third test case\"\nprint(\"Fourth test case:\
    \ Empty string\")\nassert encode(message=\"\") == encode(\"\"), \"Wrong solution\
    \ for Fourth test case\"\nprint(\"Fifth test case: Void string\")\nassert encode(message=None)\
    \ == encode(\"\"), \"Wrong solution for Fifth test case\"\n</cell>\n<text>\nAnd\
    \ now let's write a function that takes a message, and encodes it so that it returns\
    \ a message of lowercase letters, but with all vowels replaced with the letter\
    \ that appears 2 places ahead of the vowel.\n\n\n</text>\n<cell>", "         \
    \   >>>encode(\"I'm a boy\")\n            \"~aXay\"\n            \"\"\"\n    \n\
    \    \"\"\"\n    \n    return ''.join((alphabet[message.lower().index(c)] if c\
    \ in alphabet else c) for c in message)\n</cell>\n<cell>\nencode(alphabet[0])\n\
    </cell>\n<cell>\nencode('abc abc abc')\n</cell>\n<text>\nExercise 8\nWrite a function\
    \ that takes a string, and returns a dictionary that maps each letter of the english\
    \ alphabet to the number of times it appears in the string.\n\n\n</text>\n<cell>",
  "            Input Message: \n            Hello. \n            \n            Output:\
    \ \n            Hll. \n            \n            Input Message: \n           \
    \ Hello, my name is Jack. \n            \n            Output: \n            Hlle,\
    \ my nmae is Jack. \n            \n            Input Message: \n            I,\
    \ love cheese, she likes eating cookies. \n            \n            Output: \n\
    \            Ilove cees, he lls eating cooeeese. \n            \n            Input\
    \ Message: \n            Hello, my name is Bob. \n            \n            Output:\
    \ \n            Hll, my nmae is Bb. \n            \n            Input Message:\
    \ \n            I love cheese, and I like cheese too.\n            \n        \
    \    Output: \n            Ilove cees, and I lls eating ceeese.\n            \n\
    \            Input Message: \n            I, love cheese, and I like cheese too.\n\
    \            \n            Output: \n            Ilove cees, and I lls eating\
    \ ceeese.\n            \n            Input Message: \n            I, love cheese,\
    \ and I like cheese too.\n            \n            Output: \n            Ilove\
    \ cees, and I lls eating ceeese.\n            \n            Input Message: \n\
    \            I love cheese, and I like cheese too.\n            \n           \
    \ Output: \n            Ilove cees, and I lls eating ceeese.\n            \n \
    \           Input Message: \n            I love cheese, and I like cheese too.\n\
    \            \n            Output: \n            Ilove cees, and I lls eating\
    \ ceeese.\n            \n            Input Message: \n            I love cheese,\
    \ and I like cheese too.\n            \n            Output: \n            Ilove\
    \ cees, and I lls eating ceeese.\n            \n            Input Message: \n\
    \            I love cheese, and I like cheese too.\n            \n           \
    \ Output: \n            Ilove cees, and I lls eating ceeese.\n            \n \
    \           Input Message: \n            I love cheese, and I like cheese too.\n\
    \            \n            Output: \n            Ilove cees, and I lls eating\
    \ ceeese.\n            \n            Input Message: \n            I love cheese,\
    \ and I like che", "            print(encode('Hello'))\n            \"\"\"\n \
    \   Output: \n    HoLLo\n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    \n    message = message.lower()\n    \n    message = message.replace('a',\
    \ 'A')\n    message = message.replace('e', 'E')\n    message = message.replace('i',\
    \ 'I')\n    message = message.replace('o', 'O')\n    message = message.replace('u',\
    \ 'U')\n    \n    for vowel in vowels:\n        message = message.replace(vowel,\
    \ vowel.upper())\n        \n    return message\n</cell>\n<cell>", "          \
    \  message: Hello World\n            HLEELLLO WOLRD\n            \n          \
    \  message: I like potatoes\n            IIIIII LIKE POTTATOES\n            \n\
    \            message: I like potatoes\n            IIIIII LIKE POTTATOES\n   \
    \         \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIIIII LIKE POTTATOES\n\
    \            \n            message: I like potatoes\n            IIII", "    \
    \        encode(\"hello\") = \"kjl\"\n            encode(\"world\") = \"bvr\"\n\
    \            encode(\"abc\") = \"bbc\"\n            \"\"\"\n            \n   \
    \ Args:\n        message: the string to be encoded\n\n    Returns:\n        a\
    \ function that takes a message and returns the encoded message.\n    \"\"\"\n\
    \    encoded = []\n    for i in range(len(message)):\n        letter_position\
    \ = alphabet.find(message[i])\n        if letter_position != -1 and i < len(message):\n\
    \            letter_position = letter_position - alphabet.find(message[i-1])\n\
    \            if letter_position == 2:\n                letter_position = alphabet.find(message[i+1])\n\
    \                if letter_position == -1:\n                    letter_position\
    \ = alphabet.find(message[i])\n        encoded.append(alphabet[letter_position])\n\
    \    return \"\".join(encoded)\n", "    encode(\"hello world\")\n    > \"hxll\
    \ wxxrd xxx\"\n    encode(\"hello\")\n    > \"hxll\"\n    encode(\"world\")\n\
    \    > \"wxxrd\"\n    encode(\"Hello World\")\n    > \"Hxll Wxrd\"\n    \"\"\"\
    \n    message = message.lower()\n    message = ''.join(message.split())\n    \n\
    \    vowels = ['a', 'e', 'i', 'o', 'u']\n    for vowel in vowels:\n        message\
    \ = message.replace(vowel, vowel.upper(), 1)\n\n    message = message.replace('A',\
    \ 'a')\n    message = message.replace('B', 'b')\n    message = message.replace('C',\
    \ 'c')\n    message = message.replace('D', 'd')\n    message = message.replace('E',\
    \ 'e')\n    message = message.replace('F', 'f')\n    message = message.replace('G',\
    \ 'g')\n    message = message.replace('H', 'h')\n    message = message.replace('I',\
    \ 'i')\n    message = message.replace('J', 'j')\n    message = message.replace('K',\
    \ 'k')\n    message = message.replace('L', 'l')\n    message = message.replace('M',\
    \ 'm')\n    message = message.replace('N', 'n')\n    message = message.replace('O',\
    \ 'o')\n    message = message.replace('P', 'p')\n    message = message.replace('Q',\
    \ 'q')\n    message = message.replace('R', 'r')\n    message = message.replace('S',\
    \ 's')\n    message = message.replace('T', 't')\n    message = message.replace('U',\
    \ 'u')\n    message = message.replace('V', 'v')\n    message = message.replace('W',\
    \ 'w')\n    message = message.replace('X', 'x')\n    message = message.replace('Y',\
    \ 'y')\n    message = message.replace('Z', 'z')\n\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    for letter in alphabet:\n        message = message.replace(letter, letter.upper(),\
    \ 1)\n\n    return message\n\n", "            encode(\"Hello! Hi! How's it going?\"\
    )\n            \"\"\"\n            \"Hllo Hows goi\"\n    \"\"\"\n    \n    letter_to_num_dict\
    \ = {\n        \"a\": 1, \"b\": 2, \"c\": 3, \"d\": 4, \"e\": 5, \"f\": 6, \"\
    g\": 7, \"h\": 8, \"i\": 9,\n        \"j\": 10, \"k\": 11, \"l\": 12, \"m\": 13,\
    \ \"n\": 14, \"o\": 15, \"p\": 16, \"q\": 17,\n        \"r\": 18, \"s\": 19, \"\
    t\": 20, \"u\": 21, \"v\": 22, \"w\": 23, \"x\": 24, \"y\": 25,\n        \"z\"\
    : 26\n        }\n    \n    # Convert message to lowercase\n    message = message.lower()\n\
    \    \n    # Make new message with only vowels\n    new_message = \"\"\n    for\
    \ letter in message:\n        if letter in \"aeiou\":\n            new_message\
    \ += letter\n            \n    return new_message\n</cell>\n<cell>\nencode(message\
    \ = \"Hello! Hi! How's it going?\")\n</cell>\n<text>\nWrite a function that takes\
    \ a message, and encodes in such a \nway that it swaps case of all letters, replaces\
    \ all vowels in \nthe message with the letter that appears 2 places ahead of that\
    \ \nvowel in the english alphabet. \nAssume only letters. \nAsk for an additional\
    \ feature that makes the code easier to read. \nFor example, capitalize the first\
    \ letter\nof every word.\n \n Examples:\n    \"\"\"\n    encode(\"Hello! Hi! How's\
    \ it going?\")\n    \"\"\"\n    \"Hllo Hows goi\"\n    \"\"\"\n    \"Hllo Hows\
    \ Gio\"\n    \"\"\"\n\n</text>\n<cell>", "            encode = encode(str.lower)\
    \ \n            encode('hello world')\n            > 'jhf zrlm'\n            encode('hello')\n\
    \            > 'hh'\n            encode('a')\n            > 'a'\n            encode('a')\n\
    \            > 'a'\n            \n    \"\"\"\n    \n    vowels = 'aeiouAEIOU'\n\
    \    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    \n    letters = {\n        vowels:''.join(['\
    \ ',alphabet[v],' ']),\n        alphabet[v+1:]+' ':alphabet[v]\n    } \n    \n\
    \    def encode(message: str) -> str:\n        for c in message:\n           \
    \ if c in letters:\n                message = message.replace(c,letters[c])\n\
    \            else:\n                pass\n        \n        return message\n\n\
    \    return encode(message)\n</cell>\n<cell>\nencode = encode(str.lower) \nencode('hello\
    \ world')\n</cell>\n<text>\nWrite a function that takes a message and returns\
    \ the message encoded in a way that all letters are lower case and all vowels\
    \ are upper case.\n\n\n</text>\n<cell>", "            Input: Hello\n         \
    \   Output: llehh\n            \n            Input: Hi\n            Output: hhei\n\
    \            \n            Input: Ho\n            Output: hho\n            \n\
    \            Input: He\n            Output: hhe\n            \"\"\"\n        \
    \    \n    Args:\n        message: string to encode\n    Returns: encoded string\n\
    \    \"\"\"\n    letters_dict = {\n        \"a\": \"1\",\n        \"b\": \"2\"\
    ,\n        \"c\": \"3\",\n        \"d\": \"4\",\n        \"e\": \"5\",\n     \
    \   \"f\": \"6\",\n        \"g\": \"7\",\n        \"h\": \"8\",\n        \"i\"\
    : \"9\",\n        \"j\": \"0\",\n        \"k\": \"k\",\n        \"l\": \"l\",\n\
    \        \"m\": \"m\",\n        \"n\": \"n\",\n        \"o\": \"o\",\n       \
    \ \"p\": \"p\",\n        \"q\": \"q\",\n        \"r\": \"r\",\n        \"s\":\
    \ \"s\",\n        \"t\": \"t\",\n        \"u\": \"u\",\n        \"v\": \"v\",\n\
    \        \"w\": \"w\",\n        \"x\": \"x\",\n        \"y\": \"y\",\n       \
    \ \"z\": \"z\"\n    }\n    \n    vowels_dict = {\n        \"a\": \"u\",\n    \
    \    \"e\": \"e\",\n        \"i\": \"i\",\n        \"o\": \"o\",\n        \"u\"\
    : \"u\"\n    }\n    \n    new_message = message.lower()\n    new_message_length\
    \ = len(new_message)\n    \n    encoded_message = []\n    \n    for index in range(new_message_length):\n\
    \        letter = new_message[index]\n        \n        if letter in letters_dict:\n\
    \            encoded_message.append(letters_dict[letter])\n            \n    \
    \    elif letter in vowels_dict:\n            encoded_message.append(vowels_dict[letter])\n\
    \        \n        else:\n            encoded_message.append(letter)\n       \
    \     \n    return \"\".join(encoded_message)\n</cell>\n<text>\nProblem 3\nThe\
    \ function should return True if the message is all lowercase letters and False\
    \ if the message contains lowercase letters or uppercase letters.\n\nExamples:\n\
    Input: Hello\nOutput: True\nInput: HELLO\nOutput: False\n\n</text>\n<cell>", " \
    \           message = encode(message = 'Hi my name is John')\n            print(message)\n\
    \            \"\"\"\n    Output:\n            \"\"\"\n            HHH MMm NNN\
    \ JJJ III BBB CCC WWW SSS RR TT FFF GGG JJJ\n            \"\"\"\n    \"\"\"\n\
    \    \n    message = message.replace(\" \",\"\")\n    message = message.replace(\"\
    '\",\"\")\n    message = message.replace(\"!\",\"\")\n    message = message.replace(\"\
    (\",\"\")\n    message = message.replace(\")\",\"\")\n    message = message.replace(\"\
    ,\",\"\")\n    message = message.replace(\"\\\"\",\"\")\n    message = message.replace(\"\
    .\",\"\")\n    message = message.replace(\",\",\"\")\n    message = message.replace(\"\
    ?\",\"\")\n    message = message.replace(\"!\",\"\")\n    message = message.replace(\"\
    :\",\"\")\n    message = message.replace(\";\",\"\")\n    message = message.replace(\"\
    :\",\"\")\n    message = message.replace(\"-\",\"\")\n    message = message.replace(\"\
    __\",\"\")\n    message = message.replace(\"'\",\"\")\n    message = message.replace(\"\
    \\\"\",\"\")\n    message = message.replace(\"/\",\"\")\n    message = message.replace(\"\
    [\",\"\")\n    message = message.replace(\"]\",\"\")\n    message = message.replace(\"\
    %\",\"\")\n    message = message.replace(\"(\",\"\")\n    message = message.replace(\"\
    )\",\"\")\n    message = message.replace(\"@\",\"\")\n    message = message.replace(\"\
    [\",\"\")\n    message = message.replace(\"]\",\"\")\n    message = message.replace(\"\
    {\",\"\")\n    message = message.replace(\"}\",\"\")\n    message = message.replace(\"\
    {\",\"\")\n    message = message.replace(\"}\",\"\")\n    message = message.replace(\"\
    :\",\"\")\n    message = message.replace(\"$\",\"\")\n    message = message.replace(\"\
    =\",\"\")\n    message = message.replace(\"<\",\"\")\n    message = message.replace(\"\
    >\",\"\")\n    message = message.replace(\"%\",\"\")\n    message = message.replace(\"\
    ~\",\"\")\n    message = message.replace(\"+\",\"\")\n    message = message.replace(\"\
    |\",\"\")\n    message = message.replace(\"^\",\"\")\n    message = message.replace(\"\
    %\",\"\")\n    message = message.replace(\"~\",\"\")\n    message = message.replace(\"\
    :\",\"\")\n    message = message.replace(\"|\",\"\")\n    message = message.replace(\"\
    /\",\"\")\n    message = message.replace(\"?\",\"\")\n    message = message.replace(\"\
    *\",\"\")\n    message = message.replace(\"&\",\"\")\n    message = message.replace(\"\
    !\",\"\")\n    message = message.replace(\"(\",\"\")\n    message = message.replace(\"\
    )\",\"\")\n    message = message.replace(\"!\",\"\")\n    message = message.replace(\"\
    ,\",\"\")\n    message = message.replace(\"\\\"\",\"\")\n    message = message.replace(\"\
    %\",\"\")\n    message = message.replace(\"[\",\"\")\n    message = message.replace(\"\
    ]\",\"\")\n    message = message.replace(\"{\",\"\")\n    message = message.replace(\"\
    }\",", "            encode(\"hello\") == \"hELLO\"\n            encode(\"eighteen\
    \ something\") == \"eighTEen SOMETHING\"\n            encode(\"someone's\") ==\
    \ \"someONE'S\"\n            encode(\"is\") == \"is\"\n            encode(\"yes\"\
    ) == \"YEss\"\n            encode(\"no\") == \"NO\"\n            encode(\"hi\"\
    ) == \"hHI\"\n            encode(\"hello\") == \"hELLO\"\n            encode(\"\
    hey\") == \"HEY\"\n            encode(\"yes\") == \"YEss\"\n            encode(\"\
    no\") == \"NO\"\n            encode(\"one\") == \"ONe\"\n            encode(\"\
    two\") == \"TWo\"\n            encode(\"three\") == \"THree\"\n            encode(\"\
    four\") == \"FOUR\"\n            encode(\"five\") == \"FIVE\"\n            encode(\"\
    six\") == \"SIX\"\n            encode(\"seven\") == \"SEVEN\"\n            encode(\"\
    eight\") == \"EIGHT\"\n            encode(\"nine\") == \"NINE\"\n            encode(\"\
    ten\") == \"TEN\"\n            encode(\"eleven\") == \"ELEVEN\"\n            encode(\"\
    twelve\") == \"Twelve\"\n            encode(\"thirteen\") == \"THIRTEEN\"\n  \
    \          encode(\"fourteen\") == \"FOURTEEN\"\n            encode(\"fifteen\"\
    ) == \"FIFTEEN\"\n            encode(\"sixteen\") == \"SIXTEEN\"\n           \
    \ encode(\"seventeen\") == \"SEVENTEEN\"\n            encode(\"eighteen\") ==\
    \ \"EIGHTEEN\"\n            encode(\"nineteen\") == \"NINETEEN\"\n           \
    \ encode(\"twenty\") == \"TWENTY\"\n            encode(\"thirty\") == \"THIRTY\"\
    \n            encode(\"forty\") == \"FORTY\"\n            encode(\"fourty\") ==\
    \ \"FOURTY\"\n            encode(\"fifty\") == \"FIFTY\"\n            encode(\"\
    sixty\") == \"SIXTY\"\n            encode(\"seventy\") == \"SEVENTY\"\n      \
    \      encode(\"eighty\") == \"EIGHTY\"\n            encode(\"ninety\") == \"\
    NINETY\"\n            encode(\"hundred\") == \"HUNDRED\"\n            encode(\"\
    thousand\") == \"THOUSAND\"\n            encode(\"million\") == \"MILLION\"\n\
    \            encode(\"billion\") == \"BILLION\"\n            encode(\"tri", " \
    \           message = \"\"\"Hello\n            I am Hacker\n            I am Hacker\n\
    \            \"\"\"\n            encode = encode(message)\n            print(encode(message))\n\
    \            #Output: khokhojh\n            \n    Parameters: \n            message:\
    \ input string\n    \"\"\"\n    def encode(string: str) -> str:\n        \"\"\"\
    \n        Encode takes a string and encodes in such a way that it swaps case of\
    \ all letters, replaces all vowels in \n        the message with the letter that\
    \ appears 2 places ahead of that \n        vowel in the english alphabet. \n \
    \       Assume only letters. \n        \n        Parameters:\n               \
    \ string: input string\n        \"\"\"\n        vowels = \"AEIOUaeiou\"\n    \
    \    \n        swapcase = string.swapcase()\n        \n        for index, letter\
    \ in enumerate(swapcase):\n            swapcase[index] = letter.lower()\n    \
    \    \n        for index, letter in enumerate(swapcase):\n            if letter\
    \ in vowels:\n                swapcase[index] = letter.upper()\n        \n   \
    \     letter_counter = 0\n        \n        for letter in swapcase:\n        \
    \    if letter_counter >= 2:\n                letter_counter = -1\n          \
    \      swapcase = swapcase.replace(letter, letter.upper())\n            else:\n\
    \                letter_counter += 1\n        \n        letter_counter = 0\n \
    \       \n        for letter in swapcase:\n            if letter_counter >= 2:\n\
    \                letter_counter = -1\n                swapcase = swapcase.replace(letter,\
    \ letter.lower())\n            else:\n                letter_counter += 1\n  \
    \              \n        return swapcase\n    \n    return encode(message)\n</cell>\n\
    <text>\nThe encode function should return a string that has been encoded using\
    \ a given alphabet of vowels. The alphabet is \"AEIOUaeiou\". It should assume\
    \ a maximum of two letters occurring consecutively with the same consonant, so\
    \ \"aa\" should remain \"aa\".\n\nRemember that strings are immutable in Python,\
    \ so you need to create new strings in order to perform string manipulation. The\
    \ str.swapcase() method returns a new string in which each character is converted\
    \ to lower case or upper case based on whether the case is at the beginning of\
    \ the string or a different one. \nRemember that vowels must be in the given alphabet,\
    \ and that not all letters of the alphabet may be used in the message. \nThe encode\
    \ function should return a string that has been encoded using a given alphabet\
    \ of vowels. The alphabet is \"AEIOUaeiou\". It should assume a maximum of two\
    \ letters occurring consecutively with the same consonant, so \"aa\" should remain\
    \ \"aa\".\n\nRemember that strings are immutable in Python, so you need to create\
    \ new strings in order to perform string manipulation. The str.swapcase() method\
    \ returns a new string in which each character is converted to lower case ", " \
    \           > encode(\"hello\")\n            'ehllo'\n            > encode(\"\
    Hello, how are you doing?\")\n            'eHllo, im doinG'\n            > encode(\"\
    How are you doing?\")\n            'iHllo, im doinG'\n            > encode(\"\
    He is fine. How are you?\")\n            'eHe is fine. iHllo, im doinG'\n    \
    \        >\n            \n    \"\"\"\n    \n    message = message.lower()\n  \
    \  \n    message = message.title()\n    \n    message = message.replace('a', 'e')\n\
    \    \n    message = message.replace('o', 'u')\n    \n    message = message.replace('i',\
    \ 'o')\n    \n    message = message.replace('o', 'u')\n    \n    message = message.replace('e',\
    \ 'i')\n    \n    message = message.replace('i', 'o')\n    \n    message = message.replace('l',\
    \ 't')\n    \n    message = message.replace('r', 'u')\n    \n    message = message.replace('l',\
    \ 't')\n    \n    message = message.replace('e', 'r')\n    \n    message = message.replace('o',\
    \ 'u')\n    \n    message = message.replace('u', 'i')\n    \n    message = message.replace('o',\
    \ 'i')\n    \n    message = message.replace('l', 'i')\n    \n    message = message.replace('r',\
    \ 'i')\n    \n    message = message.replace('l', 'e')\n    \n    message = message.replace('l',\
    \ 'o')\n    \n    message = message.replace('e', 'r')\n    \n    message = message.replace('t',\
    \ 'u')\n    \n    message = message.replace('u', 'r')\n    \n    message = message.replace('e',\
    \ 'r')\n    \n    message = message.replace('t', 'r')\n    \n    message = message.replace('u',\
    \ 'r')\n    \n    message = message.replace('e', 'r')\n    \n    message = message.replace('r',\
    \ 'o')\n    \n    message = message.replace('u', 'o')\n    \n    message = message.replace('r',\
    \ 'o')\n    \n    message = message.replace('i', 'o')\n    \n    message = message.replace('o',\
    \ 'i')\n    \n    message = message.replace('t', 'u')\n    \n    message = message.replace('e',\
    \ 't')\n    \n    message = message.replace('u', 't')\n    \n    message = message.replace('r',\
    \ 't')\n    \n    message = message.replace('e', 't')\n    \n    message = message.replace('r',\
    \ 'u')\n    \n    message = message.replace('r', 't')\n    \n    message = message.replace('r',\
    \ 'o')\n    \n    message = message.replace('r', 'u')\n    \n    message = message.replace('r',\
    \ 't", "            \"Hello World\".encode()\n            > 'h1 el2 o3 '\n   \
    \         \"\"\"\n    \"\"\"\n    return \"\".join([c if c.isalpha() else c.upper()\
    \ for c in message])\n\n", "            encode(\"hello world\")\n            \"\
    iayb woer\"\n            \"\"\"\n    \n    Args:\n        message: input string\
    \ \n    \n    Returns:\n        encoded string\n    \"\"\"\n    \n    vowels =\
    \ \"aeiou\"\n    \n    encoded = \"\"\n    for letter in message:\n        if\
    \ letter in vowels:\n            letter = letter.upper()\n            encoded\
    \ += letter\n            encoded = encoded[1:]\n    return encoded\n</cell>\n\
    <cell>\nencode(encode(encode(\"hello world\")))\n</cell>\n<cell>", "         \
    \   encode(\"Hello World!\") = \"lAqwEr dOpA\"\n            \"\"\"\n         \
    \   encode(\"Hi\") = \"Hq\"\n            \n    Parameters\n    ----------\n  \
    \  message: \n        The message to be encoded. \n\n    Returns\n    -------\n\
    \    str\n        A new message in which the vowels are replaced with the letters\
    \ \n        that appear in those positions 2 places ahead.\n    \"\"\"\n    message\
    \ = message.lower()\n    \n    message = list(message)\n    for i, letter in enumerate(message):\n\
    \        if letter in VOWELS:\n            letterIndex = VOWELS.index(letter)\n\
    \            newLetterIndex = letterIndex + 2\n            \n            newLetter\
    \ = LETTERS[newLetterIndex]\n            message[i] = newLetter\n            \n\
    \    return \"\".join(message)\n\n", "    >>> encode('I love you')\n         \
    \   'i v eo eh ua oo'\n    \"\"\"\n    message = message.lower()\n    vowels =\
    \ 'aeiouAEIOU'\n    mapping = {\n        vowels[i+1] : vowels[i] for i in vowels\n\
    \    }\n    return ''.join([mapping[x] if x in mapping else x for x in message])\n\
    encode.__doc__ = encode.__doc__.replace('\\n', ' ')\n", "            def encode(message:\
    \ str) -> str:\n                message =  message.lower()\n                message\
    \ = message.replace('a', 'b')\n                message = message.replace('o',\
    \ 'l')\n                message = message.replace('u', 'u')\n                return\
    \ message\n            \n            message = 'This message is in english!'\n\
    \            print(encode(message))\n            \n            message = 'My message\
    \ is this in spanish!'\n            print(encode(message))\n            \n   \
    \         message = 'The quick brown fox jumps over the lazy dog'\n          \
    \  print(encode(message))\n            \n            message = 'I like eating\
    \ cheeseburgers. I like cheeseburgers. I like cheeseburgers.'\n            print(encode(message))\n\
    \            \n            message = 'He was a little nervous yesterday and he\
    \ looked like a little nervous today.'\n            print(encode(message))\n \
    \           \n            message = \"I love 'cats' but don't like 'dogs'\"\n\
    \            print(encode(message))\n            \n            message = \"I like\
    \ 'dogs' but don't like 'cats'.\"\n            print(encode(message))\n      \
    \      \n            message = \"'Cats' but don't like 'dogs' and 'Dogs' don't\
    \ like 'cats'.\"\n            print(encode(message))\n            \n         \
    \   message = \"I like 'cats' but don't like 'dogs' and 'dogs' don't like 'cats'.\"\
    \n            print(encode(message))\n            \n            message = \"I\
    \ like 'cats' but don't like 'dogs' and 'dogs' don't like 'cats'.\"\n        \
    \    print(encode(message))\n            \n            message = \"'Cats' but\
    \ don't like 'dogs' and 'dogs' don't like 'cats'.\"\n            print(encode(message))\n\
    \            \n            message = \"I like 'Cats' but don't like 'dogs' and\
    \ 'dogs' don't like 'cats'.\"\n            print(encode(message))\n          \
    \  \n            message = \"I like 'Cats' but don't like 'dogs' and 'dogs' don't\
    \ like 'cats'.\"\n            print(encode(message))\n            \n         \
    \   message = \"I like 'Cats' but don't like 'dogs' and 'dogs' don't like 'cats'.\"\
    \n            print(encode(message))\n            \n            message = \"I\
    \ like 'Cats' but don't like 'dogs' and 'dogs' don't like 'cats'.\"\n        \
    \    print(encode(message))\n            \n            message = \"I like 'Cats'\
    \ but don't like 'dogs' and 'dogs' don't like 'cats'.\"\n            print(encode(message))\n\
    \            \n            message = \"I like 'Cats' but don't like 'dogs' and\
    \ 'dogs' don't like 'cats'.\"\n            print(encode(message))", "        \
    \    example: \n            ```\n            Message: Hello World\n          \
    \  Output:\n            HdlloO World\n            ```\n            \"\"\"\n  \
    \      \n            example: \n            ```\n            Message: How are\
    \ you doing today?\n            Output:\n            HowAo rdoW doAy\n       \
    \     ```\n        \n            example: \n            ```\n            Message:\
    \ Hi there, do you know my name?\n            Output:\n            Hi thEre do\
    \ you know my nAmE\n            ```\n            \n            example: \n   \
    \         ```\n            Message: Hi there, do you know my name.\n         \
    \   Output:\n            Hi thEre do you know my nAmE\n            ```\n     \
    \   \n            example: \n            ```\n            Message: Hi there, do\
    \ you know my name? \n            Output:\n            Hi thEre do you know my\
    \ nAmE\n            ```\n            \n            example: \n            ```\n\
    \            Message: Hi there, do you know my name?\n            Output:\n  \
    \          Hi thEre do you know my nAmE\n            ```\n            \n     \
    \       example: \n            ```\n            Message: Hi there, do you know\
    \ my name?\n            Output:\n            Hi thEre do you know my nAmE\n  \
    \          ```\n            \n            example: \n            ```\n       \
    \     Message: Hi there, do you know my name?\n            Output:\n         \
    \   Hi thEre do you know my nAmE\n            ```\n            \n            example:\
    \ \n            ```\n            Message: Hi there, do you know my name?\n   \
    \         Output:\n            Hi thEre do you know my nAmE\n            ```\n\
    \            \n            example: \n            ```\n            Message: Hi\
    \ there, do you know my name?\n            Output:\n            Hi thEre do you\
    \ know my nAmE\n            ```\n    \n            ```\n            Message: Hi\
    \ there, do you know my name?\n            Output:\n            Hi thEre do you\
    \ know my nAmE\n            ```\n        \n            ```\n            Message:\
    \ Hi there, do you know my name? \n            Output:\n            Hi thEre do\
    \ you know my nAmE\n            ```\n            \n            ```\n         \
    \   Message: Hi there, do you know my name?\n            Output:\n           \
    \ Hi thEre do you know my nAmE\n            ```\n            \n            ```\n\
    \            Message: Hi there, do you know my name?\n            Output:\n",
  "            message = input('What is your message: ')\n            message = \"\
    Hello World\"\n            encoded_message = encode(message)\n            encoded_message\
    \ should equal \"Jgf dq eYe\"\n            \"\"\"\n            \n    \"\"\"\n\
    \    \n    # Write your encode function here\n\n    return encoded_message\n</cell>\n\
    <cell>\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\
    \"\"\ntests.test_encoding(encode)\n</cell>\n<text>\nDecoding Functions\nImplement\
    \ two functions:\n\nOne that converts binary data into text (encodes a message)\n\
    One that converts text into a single number (decodes a message)\n\nThe encoding/decoding\
    \ functions are implemented in the strtok library.\nFor the single number decoding,\
    \ use a the ord() function.  You can read more about ord().\n\n\n</text>\n<cell>",
  "            Hello World -> HLEOWDDL\n            \"\"\"\n    \"\"\"\n    letters\
    \ = list(message)\n    new_letters = []\n    vowels = {\"a\", \"e\", \"i\", \"\
    o\", \"u\"}\n    \n    for letter in letters:\n        if letter not in vowels:\n\
    \            new_letters.append(letter)\n        elif letter in vowels:\n    \
    \        new_letters.append(letters[vowels.index(letter) + 1])\n    \n    return\
    \ \"\".join(new_letters)\n</cell>\n<cell>", "            message_a = encode(\"\
    hello\")\n            message_b = encode(\"Hello World\")\n            message_c\
    \ = encode(\"Hello WorD\")\n            message_d = encode(\"Hello WOrld\")\n\
    \            \n            assert message_a == \"Belllo WoRlD\"\n            assert\
    \ message_b == \"Belllo WoRlD\"\n            assert message_c == \"Belllo WOrld\"\
    \n            assert message_d == \"Belllo WOrld\"\n            \"\"\"\n     \
    \       \n    Inputs:\n    message: str \n    \n    Outputs:\n    encoded_message:\
    \ str\n    \"\"\"\n    \n    message = message.lower()\n    \n    encoded_message\
    \ = \"\"\n    \n    for i in range(len(message)):\n        letter = message[i]\n\
    \        \n        if letter in \"aeiou\":\n            encoded_letter =letter\n\
    \            \n        else:\n            encoded_letter = letter\n          \
    \  \n            encoded_letter += message[(i+1) + 1]\n            \n        \
    \    encoded_letter += message[(i+2) + 1]\n            \n            encoded_letter\
    \ += message[(i+3) + 1]\n            \n            encoded_letter += message[(i+4)\
    \ + 1]\n            \n            encoded_letter += message[(i+5) + 1]\n     \
    \       \n            encoded_letter += message[(i+6) + 1]\n            \n   \
    \         encoded_letter += message[(i+7) + 1]\n            \n            encoded_letter\
    \ += message[(i+8) + 1]\n            \n            encoded_letter += message[(i+9)\
    \ + 1]\n            \n            encoded_letter += message[(i+10) + 1]\n    \
    \        \n            encoded_letter += message[(i+11) + 1]\n            \n \
    \           encoded_letter += message[(i+12) + 1]\n            \n            encoded_letter\
    \ += message[(i+13) + 1]\n            \n            encoded_letter += message[(i+14)\
    \ + 1]\n            \n            encoded_letter += message[(i+15) + 1]\n    \
    \        \n            encoded_letter += message[(i+16) + 1]\n            \n \
    \           encoded_letter += message[(i+17) + 1]\n            \n            encoded_letter\
    \ += message[(i+18) + 1]\n            \n            encoded_letter += message[(i+19)\
    \ + 1]\n            \n            encoded_letter += message[(i+20) + 1]\n    \
    \        \n            encoded_letter += message[(i+21) + 1]\n            \n \
    \           encoded_letter += message[(i+22) + 1]\n            \n            encoded_letter\
    \ += message[(i+23) + 1]\n            \n            encoded_letter += message[(i+24)\
    \ + 1]\n            \n            encoded_letter += message[(i+25) + 1]\n    \
    \        \n", "    >>> encode(\"\"\"\n    ... Hello world how are you? i am. \n\
    \    ... I am fine, thank you thank you\"\"\")\n            'HLEE WORLD HOW ARR\
    \ YEAH? IAH. IAH FAM EKAR, YEK YEK'\n    \"\"\"\n    message = message.lower()\n\
    \    return message.translate({ord(a): b for a,b in zip(string.ascii_lowercase,\n\
    \    string.ascii_lowercase[string.ascii_lowercase.index('a')+2:])})\n", "   \
    \         Input : message = \"AaBbCc\"\n            Output: \"ABC\"\n        \
    \    Input: message = \"HelloWorld\"\n            Output: \"HellWrd\"\n      \
    \      \"\"\"\n    \n    The output will contain capital letters only.\n    \n\
    \    Args:\n        message: input string\n    \n    Returns:\n        encoded\
    \ string\n    \"\"\"\n    \n    vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    \n    message = message.lower()\n    \n    for c in message:\n        if\
    \ c in vowels:\n            replacement = (message[vowels.index(c) + 1]).upper()\n\
    \            message = message.replace(c, replacement)\n    \n    return message\n\
    \n", "            # 'Hello' -> '3llo'\n            # 'How' -> '3rl'\n        \
    \    # 'I' -> '3i'\n            # 'This' -> '3Thi4'\n            # 'is' -> '3is4'\n\
    \            # 'a' -> '3a'\n            # 'test' -> '3est4'\n            # 'by'\
    \ -> '3by4'\n            # 'dog' -> '3og4'\n            # 'the' -> '3th'\n   \
    \         # 'quick' -> '3qur4'\n            # 'brown' -> '3bro4'\n           \
    \ # 'fox' -> '3fox4'\n            # 'jumps' -> '3jumps4'\n            # 'over'\
    \ -> '3ovrl4'\n            # 'dogs' -> '3dogs4'\n            # 'in' -> '3in4'\n\
    \            # 'the' -> '3th'\n            # 'lazy' -> '3laz4'\n            #\
    \ 'dogs' -> '3dogs4'\n            # 'brown' -> '3bro4'\n            # 'jumps'\
    \ -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'the' -> '3th'\n\
    \            # 'quick' -> '3qur4'\n            # 'fox' -> '3fox4'\n          \
    \  # 'jumps' -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'jumps'\
    \ -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'the' -> '3th'\n\
    \            # 'quick' -> '3qur4'\n            # 'fox' -> '3fox4'\n          \
    \  # 'jumps' -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'jumps'\
    \ -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'the' -> '3th'\n\
    \            # 'quick' -> '3qur4'\n            # 'fox' -> '3fox4'\n          \
    \  # 'jumps' -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'jumps'\
    \ -> '3jumps4'\n            # 'over' -> '3ovrl4'\n            # 'the' -> '3th'\n",
  "            >> encode(\"hi there, how are you\")\n            \"ehi ereo ehow erya\
    \ uo?\"\n            \"\"\"\n        \n    \n    Arguments:\n            message\
    \ {str} -- message to be encoded\n    \n    Returns:\n            str -- encoded\
    \ message\n    \"\"\"\n    \n    # Write code here\n    \n    return message\n\
    \n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\"\"\n\
    tests.test_encode(encode)\n</cell>\n<text>\nDecode a message\nWrite a function\
    \ that takes a message and returns the decoded version of that message. \nThe\
    \ message can assume its encoded representation has only lowercase letters (a-z),\
    \ numbers (0-9), spaces (), and dashes (-). \nTo decode a message, first you must\
    \ convert the string into a list of characters:\nyou can use: list(message).\n\
    Then you can iterate through that list searching for the character in key value\
    \ pairs in the dict letter2num.\nIf it exists, replace it with the value mapped\
    \ to by the key (2nd part of the pair).\nIf not, return the original string\n\
    You can use these helper functions: make a lowercase string and count how many\
    \ times each letter is used, convert the list of characters to a number, and subtract\
    \ the result from the original message to create the key value pairs.\n\nIt's\
    \ also suggested that you use a dict to make the message and its key value pairs\
    \ easier to read.\n\n\n</text>\n<cell>", "        >>> encode(\"How are you today?\"\
    ) \n        'HOW AR WE TODAY?'\n        >>> encode(\"Hello\") \n        'HEELLO'\n\
    \        >>> encode(\"Hello world\") \n        'HELLO WORLD'\n        >>> encode(\"\
    The most beautiful days of the world\") \n        'THEMUM BEAUTIFUL DAYS WORLD'\n\
    \        >>> encode(\"The most beautiful days of the world, again\") \n      \
    \  'THEMUM BEAUTIFUL DAYS WORLD AGAIN'\n        >>> encode(\"A couple of things\"\
    ) \n        'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n\
    \        'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n \
    \       'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n  \
    \      'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n   \
    \     'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n    \
    \    'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n     \
    \   'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n      \
    \  'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n       \
    \ 'A KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n        'A\
    \ KAPPAELE SAATTAE'\n        >>> encode(\"A couple of things\") \n        'A KAPPAELE\
    \ SAATTAE'\n        >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n\
    \        >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n \
    \       >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n  \
    \      >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n   \
    \     >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n    \
    \    >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n     \
    \   >>> encode(\"A couple of things\") \n        'A KAPPAELE SAATTAE'\n      \
    \  >>> encode(\"A couple of things", "            \n            message = input()\n\
    \            code_message = encode(message)\n            print(code_message)\n\
    \            \n            \"\"\"\n    \n    Args:\n        message: The message\
    \ to encode\n        \n    Returns: The encoded message\n    \"\"\"\n    \n  \
    \  vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    \n    code_message\
    \ = ''\n    \n    for letter in message:\n    \n        if letter in vowels:\n\
    \        \n            code_message += letter + letter\n            \n       \
    \ else:\n        \n            code_message += letter[vowels.index(letter)+1]\n\
    \            \n    return code_message\n    \n    ", "        >>> print(encode(\"\
    apple\"))\n        a3\n        \"\"\"\n    \n    return ''.join([letter for letter\
    \ in message \n                    if letter not in VOWELS])\n\n", "    >>> encode(\"\
    hello world\")\n    \"Klko ihllo BaAr rldo\"\n    \n    >>> encode(\"hello\")\n\
    \    \"Klko ihllo BaAr rldo\"\n    \n    >>> encode(\"hallo world\")\n    \"Klko\
    \ ihllo BaAr rldo\"\n            \n    >>> encode(\"hallo\")\n    \"Klko ihllo\
    \ BaAr rldo\"\n    \n    >>> encode(\"ahoy matey!\")\n    \"Umlasoe ym BiaR Baaz\
    \ matey\"\n            \n    >>> encode(\"halo\")\n    \"Klko ihllo BaAr rldo\"\
    \n            \n    >>> encode(\"balloon\")\n    \"Qmlko uhllo nBaaz aR\"\n  \
    \  \n    >>> encode(\"balloons\")\n    \"Qmlko uhllo nBaaz aR\"\n    \n    >>>\
    \ encode(\"balloooon\")\n    \"Qmlko uhllo nBaaz aR\"\n    \n    >>> encode(\"\
    ballooooon\")\n    \"Qmlko uhllo nBaaz aR\"\n    \n    >>> encode(\"ballooooons\"\
    )\n    \"Qmlko uhllo nBaaz aR\"\n    \n    >>> encode(\"balloooooon\")\n    \"\
    Qmlko uhllo nBaaz aR\"\n    \n    >>> encode(\"ballooooooon\")\n    \"Qmlko uhllo\
    \ nBaaz aR\"\n    \n    >>> encode(\"ballooooooons\")\n    \"Qmlko uhllo nBaaz\
    \ aR\"\n    \n    >>> encode(\"balloooooooon\")\n    \"Qmlko uhllo nBaaz aR\"\n\
    \    \n    >>> encode(\"balloooooooooon\")\n    \"Qmlko uhllo nBaaz aR\"\n   \
    \ \n    >>> encode(\"ballooooooooooon\")\n    \"Qmlko uhllo nBaaz aR\"\n    \n\
    \    >>> encode(\"ballooooooooooons\")\n    \"Qmlko uhllo nBaaz aR\"\n    \n \
    \   >>> encode(\"balloooooooooooon\")\n    \"Qmlko uhllo nBaaz aR\"\n    \n  \
    \  >>> encode(\"balloooooooooooooon\")\n    \"Qml", "            >>> encode(\"\
    \")\n            'a'\n            >>> encode(\"azzzzzzzz\")\n            'aa'\n\
    \            >>> encode(\"abc\")\n            'bc'\n            >>> encode(\"\
    the quick brown fox jumps over the lazy dog\")\n            'tht eht qqu brwn\
    \ fx jmps ovr thl yzd og'\n            \"\"\"\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    vowels = list(\"aeiou\")\n    result = \"\"\n    for c in message:\n   \
    \     if c in vowels:\n            result += alphabet[alphabet.index(c) - 2]\n\
    \        else:\n            result += c\n    return result\n", "            encode(message)\
    \ -> \"nnamaa\"\n            \n    \"\"\"\n    return ''.join([x.upper() if ord(x)\
    \ == ord(\"a\") + 1 else x.lower() for x in message])\n\n", "            assert\
    \ encode(\"What is your name?\") == \"QBbN?\"\n            assert encode(\"How\
    \ many apples do you have?\") == \"QNba?\"\n            assert encode(\"The quick\
    \ brown fox jumps over the lazy dog\") == \"QFdx?\"\n            \"\"\"\n    \n\
    \    Args:\n            message (str)\n    Returns:\n            encoded message\
    \ \n    \"\"\"\n    \n    # Create a list to hold the letters of the english alphabet\n\
    \    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\
    \ 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    # Create\
    \ a list to hold the letters of the capitals alphabet\n    lettersCapitals = ['A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n    # Create a dictionary to hold\
    \ the mappings between the letters of the capitals alphabet and the \n    # letters\
    \ of the english alphabet\n    mappingCapitalToEnglish = {lettersCapitals[i]:\
    \ letters[i] for i in range(len(lettersCapitals))}\n    mappingEnglishToCapital\
    \ = {letters[i]: lettersCapitals[i] for i in range(len(letters))}\n    \n    encoded\
    \ = \"\"\n    \n    # Iterate over each letter in the message\n    for letter\
    \ in message:\n        # Check if the letter is in the capitals alphabet\n   \
    \     if letter in mappingCapitalToEnglish:\n            # Get the index of that\
    \ letter in the capitals alphabet\n            indexCapitalLetter = mappingCapitalToEnglish[letter]\n\
    \            # Get the index of that letter in the english alphabet\n        \
    \    indexEnglishLetter = letters.index(letter)\n            \n            # Swap\
    \ the case\n            encoded = encoded + (lettersCapitals[indexCapitalLetter]\
    \ + lettersCapitals[indexEnglishLetter])\n            \n            # Swap the\
    \ vowels\n            if letter not in mappingEnglishToCapital:\n            \
    \    encoded = encoded + (letters[indexCapitalLetter] + letters[indexCapitalLetter])\n\
    \            elif letter not in mappingCapitalToEnglish:\n                encoded\
    \ = encoded + (lettersCapitals[indexCapitalLetter] + lettersCapitals[indexCapitalLetter])\n\
    \        else:\n            encoded = encoded + letter\n            \n    return\
    \ encoded\n\n", "            >>> encode(\"Harry Potter\")\n            'HaPotter'\n\
    \            >>> encode(\"Give it to Mrs. Bean\")\n            'Give it to Mrs.\
    \ Bea'\n            >>> encode(\"Give it to Mrs. Beans\")\n            'Give it\
    \ to Mrs. Bea'\n            >>> encode(\"Give it to Mrs. Beans!\")\n         \
    \   'Give it to Mrs. Bae!'\n            >>> encode(\"Give it to Mr. Bean\")\n\
    \            'Give it to Mr. Bea'\n            >>> encode(\"Give it to Mr. Beans\"\
    )\n            'Give it to Mr. Bea'\n            >>> encode(\"Give it to Mr. Beans!\"\
    )\n            'Give it to Mr. Bea!'\n            >>> encode(\"Give it to Ms.\
    \ Bean\")\n            'Give it to Ms. Bea'\n            >>> encode(\"Give it\
    \ to Ms. Beans\")\n            'Give it to Ms. Bea'\n            >>> encode(\"\
    Give it to Ms. Beans!\")\n            'Give it to Ms. Bae!'\n            >>> encode(\"\
    Give it to Mr. Bean.\")\n            'Give it to Mr. Bea.'\n            >>> encode(\"\
    Give it to Mr. Beans.\")\n            'Give it to Mr. Bea.'\n            >>> encode(\"\
    Give it to Mr. Beans.!\")\n            'Give it to Mr. Bea!'\n            >>>\
    \ encode(\"Give it to Ms. Bean.\")\n            'Give it to Ms. Bea.'\n      \
    \      >>> encode(\"Give it to Ms. Beans.\")\n            'Give it to Ms. Bea.'\n\
    \            >>> encode(\"Give it to Ms. Beans.!\")\n            'Give it to Ms.\
    \ Bae!'\n            >>> encode(\"Give it to Mr. Bean\")\n            'Give it\
    \ to Mr. Bea'\n            >>> encode(\"Give it to Mr. Beans\")\n            'Give\
    \ it to Mr. Bea'\n            >>> encode(\"Give it to Mr. Beans!\")\n        \
    \    'Give it to Mr. Bea!'\n            >>> encode(\"Give it to Ms. Bean\")\n\
    \            'Give it to Ms. Bea'\n            >>> encode(\"Give it to Ms. Beans\"\
    )\n            'Give it to Ms. Bea'\n            >>> encode(\"Give it to Ms. Beans!\"\
    )\n            'Give it to Ms. Bae!'\n            >>> encode(\"Give it to Mr.\
    \ Bean.\")\n            'Give it to Mr. Bea.'\n            >>> encode(\"Give it\
    \ to Mr. Beans.\")\n            'Give it to Mr. Bea.'\n            >>> encode(\"\
    Give it to Mr. Beans.!\")\n            'Give it to Mr", "            print(encode('hello\
    \ world')) #returns 'HxloOxrlddW'\n            print(encode('hello world')) #returns\
    \ 'HxloOxrlddW'\n            print(encode('Hello World')) #returns 'HeXoOXrldd'\n\
    \            print(encode('hElloO WoRlDd')) #returns 'HxloOxrlddW'\n         \
    \   print(encode('Hi')) #returns 'Hi'\n            print(encode('Hello')) #returns\
    \ 'Hxlo'\n            print(encode('Helo')) #returns 'Helo'\n            print(encode('Hell'))\
    \ #returns 'Hxll'\n            print(encode('HellO')) #returns 'HxloO'\n     \
    \       \"\"\"\n    \"\"\"\n    \n    def encode(message: str) -> str:\n     \
    \   \"\"\"\n        Encode a message according to this logic. \n        \n   \
    \     Arguments:\n            message: This is the message to be encoded.\n  \
    \          \n        Returns:\n            A message with the vowels replaced\
    \ with their \n            English equivalents. \n        \"\"\"\n        vowels\
    \ = \"aeiouAEIOU\"\n        vowels_mapping = {\n            \"a\": \"A\",\n  \
    \          \"e\": \"E\",\n            \"i\": \"I\",\n            \"o\": \"O\"\
    ,\n            \"u\": \"U\",\n        }\n        \n        encoded = \"\"\n  \
    \      for vowel in vowels:\n            encoded = encoded + vowels_mapping[vowel]\n\
    \        \n        for index, letter in enumerate(message):\n            letter_split\
    \ = letter.split()\n            for letters in letter_split:\n               \
    \ for letter in letters:\n                    if letter in vowels:\n         \
    \               encoded += letters_mapping[letters[index+1]]\n               \
    \     else:\n                        encoded += letter\n            \n       \
    \ return encoded\n    \n    return encode(message)\n    \nprint(encode(\"hello\
    \ world\"))\nprint(encode(\"hello world\"))\nprint(encode(\"Hello World\"))\n\
    print(encode(\"hElloO WoRlDd\"))\nprint(encode(\"Hi\"))\nprint(encode(\"Hello\"\
    ))\nprint(encode(\"Helo\"))\nprint(encode(\"Hell\"))\nprint(encode(\"HellO\"))\n\
    </cell>\n<text>\nChallenge 8: Design an algorithm that encodes messages in such\
    \ \nway that if two letters are next to each other, then they are \nswapped, and\
    \ the number of letters swapped are 2 more than \nthe letters being swapped. \n\
    Assume only letters. \nAssume only English alphabet. \nAssume all inputs are valid.\
    \ \nIgnore special characters. \nAssume a message is a valid input for our function.\
    \ If input is \ninvalid, return None as output. \nIf a message is empty or consists\
    \ of only spaces, return an empty \nstring. \nIf a ", "            \n        \
    \    encode(\"hello\")\n            # hello\n            \n            encode(\"\
    hello2\")\n            # h2n1\n            \n            encode(\"hello3\")\n\
    \            # h3n1\n            \n            encode(\"hello4\")\n          \
    \  # h4n3\n            \n            encode(\"hello5\")\n            # h5n2\n\
    \            \n            encode(\"hello6\")\n            # h6n5\n          \
    \  \n            encode(\"hello7\")\n            # h7n4\n            \n      \
    \      encode(\"hello8\")\n            # h8n7\n            \n            encode(\"\
    hello9\")\n            # h9n8\n            \n            encode(\"hello10\")\n\
    \            # h10n9\n            \n            encode(\"hello11\")\n        \
    \    # h11n10\n            \n            encode(\"hello12\")\n            # h12n11\n\
    \            \n            encode(\"hello13\")\n            # h13n12\n       \
    \     \n            encode(\"hello14\")\n            # h14n13\n            \n\
    \            encode(\"hello15\")\n            # h15n14\n            \n       \
    \     encode(\"hello16\")\n            # h16n15\n            \n            encode(\"\
    hello17\")\n            # h17n16\n            \n            encode(\"hello18\"\
    )\n            # h18n17\n            \n            encode(\"hello19\")\n     \
    \       # h19n18\n            \n            encode(\"hello20\")\n            #\
    \ h20n19\n            \n            encode(\"hello21\")\n            # h21n20\n\
    \            \n            encode(\"hello22\")\n            # h22n21\n       \
    \     \n            encode(\"hello23\")\n            # h23n22\n            \n\
    \            encode(\"hello24\")\n            # h24n23\n            \n       \
    \     encode(\"hello25\")\n            # h25n24\n            \n            encode(\"\
    hello26\")\n            # h26n25\n            \n            encode(\"hello27\"\
    )\n            # h27n26\n            \n            encode(\"hello28\")\n     \
    \       # h28n27\n            \n            encode(\"hello29\")\n            #\
    \ h29n28\n            \n            encode(\"hello30\")\n            # h30n29\n\
    \            \n            encode(\"hello31\")\n            # h31n30\n       \
    \     \n            encode(\"hello32\")\n            # h32n31\n            \n\
    \            encode(\"hello33\")\n            # h33n32\n            \n       \
    \     encode(\"hello34\")\n            # h34n33\n            \n            encode(\"\
    hello35\")\n            # h35n34\n            \n            encode(\"hello36\"\
    )\n            # h36n35\n            \n            encode(\"hello37\")\n     \
    \       # h37n36\n            \n            encode(\"", "            message:\
    \ hello -> ello\n            message: hello hi -> ello ehi\n            message:\
    \ hi     -> hi\n            message: hi hi -> hi ehi\n            message: hi\
    \ hi -> hi ehi\n            \"\"\"\n    \n    The function must return the encoded\
    \ message.\n    \"\"\"\n\n    return message\n\n", "            >>>encode(\"message\"\
    )\n            'eHcme!' \n            >>> encode(\"message\")\n            'eHcme!'\
    \ \n            >>> encode(\"message\")\n            'eHcme!' \n            >>>\
    \ encode(\"message\")\n            'eHcme!' \n            >>> encode(\"message\"\
    )\n            'eHcme!' \n            \"\"\"\n            \n    \"\"\"\n    alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiou\"\n    \n    message_length\
    \ = len(message)\n    converted_message = ''\n    \n    for index, letter in enumerate(message):\n\
    \        if letter.upper() == letter:\n            converted_message += letter.upper()\n\
    \        else:\n            converted_message += letter\n            \n      \
    \  for letter_index in range(index + 1, index + message_length):\n           \
    \ if letter.upper() == alphabet[letter_index]:\n                converted_message\
    \ += alphabet[letter_index + 2]\n            else:\n                converted_message\
    \ += alphabet[letter_index]\n    \n    return converted_message\n</cell>\n<cell>",
  "            Input: message = \"I love python!\"\n            Output: \"Ii lve \
    \ opy\"\n            \n            Input: message = \"my name is john!\"\n   \
    \         Output: \"my naem  is john\"\n            \n            Input: message\
    \ = \"hey are you there?\"\n            Output: \"hey aare  you here\"\n     \
    \       \n            Input: message = \"hello world!\"\n            Output: \"\
    heo worldo!\"\n            \n            Input: message = \"hey what is up?\"\n\
    \            Output: \"hey wa wu oht\"\n            \n            Input: message\
    \ = \"hey what is up?\"\n            Output: \"hey wa wu oht\"\n            \n\
    \            Input: message = \"hey what is up?\"\n            Output: \"hey wa\
    \ wu oht\"\n            \n            Input: message = \"hey what is up?\"\n \
    \           Output: \"hey wa wu oht\"\n            \n            Input: message\
    \ = \"hey what is up?\"\n            Output: \"hey wa wu oht\"\n            \"\
    \"\"\n            \n    :param message: The string to encode\n    :return: The\
    \ encoded message\n    \"\"\"\n    \n    # define vowels: aeiouAEIOU\n    vowels\
    \ = \"aeiouAEIOU\"\n    \n    # create an empty list to store the decoded messages\n\
    \    encoded_messages = []\n    \n    # for each letter in the message, \n   \
    \ # replace it with its encoded value\n    for letter in message:\n        # check\
    \ if it is a vowel\n        if letter in vowels:\n            # replace the vowel\
    \ with its encoded value\n            encoded_messages.append(vowels.find(letter)+1)\n\
    \        \n        # otherwise just append the letter\n        else:\n       \
    \     encoded_messages.append(letter)\n    \n    return ''.join(encoded_messages)\n\
    \n", "        encode(\"HELLO WORLD\")\n        Out[1]: 'HE LL OLD'\n         \
    \   \"\"\"\n    \"\"\"\n    # Write your code here\n    return \"\"\n</cell>\n\
    <cell>", "    example1 = encode(\"hai\")\n    print(example1)\n    print(decode(example1))\n\
    \    \"\"\"\n    return \"\".join(map(lambda c: c.upper(), message)).replace(\n\
    \        \"\".join(map(lambda c: c.lower(), message)),\n        \"\".join(map(lambda\
    \ c: c.upper(), message)),\n    )\n\n", "            >>>encode(\"I love cats\"\
    )\n            'ZB ZQ ZL ZW'\n            \"\"\"\n    \n    Arguments:\n     \
    \   message: string to encode\n    Returns:\n        encoded string\n    \"\"\"\
    \n    vowels = set(\"aeiou\")\n    \n    \n    def func(message: str) -> str:\n\
    \        new_message = \"\"\n        \n        for letter in message:\n      \
    \      if letter.lower() in vowels:\n                letter_lower = letter.lower()\n\
    \                new_message += letter_lower[(letter_lower.find(letter.lower())+1)%len(letter_lower)]\n\
    \            else:\n                new_message += letter\n                \n\
    \        return new_message\n    \n    return func(message)\n</cell>\n<cell>\n\
    encoded = encode(message)\nassert message == encoded\n</cell>\n<cell>", "    \
    \        >>> encode(message)\n            'MPYL'\n            \n    \"\"\"\n \
    \   def encode(message: str) -> str:\n        encode_dict = {\n            'A':\
    \ 'B',\n            'B': 'C',\n            'C': 'D',\n            'D': 'E',\n\
    \            'E': 'F',\n            'F': 'G',\n            'G': 'H',\n       \
    \     'H': 'I',\n            'I': 'J',\n            'J': 'K',\n            'K':\
    \ 'L',\n            'L': 'M',\n            'M': 'N',\n            'N': 'O',\n\
    \            'O': 'P',\n            'P': 'Q',\n            'Q': 'R',\n       \
    \     'R': 'S',\n            'S': 'T',\n            'T': 'U',\n            'U':\
    \ 'V',\n            'V': 'W',\n            'W': 'X',\n            'X': 'Y',\n\
    \            'Y': 'Z',\n            'Z': 'Z',\n        }\n        alphabet = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']\n\
    \        message = message.upper()\n        new_message = ''\n        for letter\
    \ in message:\n            position = alphabet.index(letter.upper())\n       \
    \     other_position = alphabet.index(letter.upper(), position+1)\n          \
    \  new_message = new_message + encode_dict[alphabet[position]][alphabet[other_position]]\n\
    \        return new_message\n\n    return encode(message)\n\n", "            \n\
    \            encode(\"This is a test! Let's encode this message\") \n        \
    \    > \"Gsgs ywj shsu nqo! Leian qenc this msege\"\n            \n          \
    \  encode(\"This message is encoded to base64\") \n            > \"YQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base16\") \n  \
    \          > \"uYhBQYq\"\n            \n            encode(\"The message is encoded\
    \ to base32\") \n            > \"1HBmZ5o3n4n\"\n            \n            encode(\"\
    The message is encoded to base62\") \n            > \"1HBmZ5o3n4n\"\n        \
    \    \n            encode(\"The message is encoded to base32\") \n           \
    \ > \"YQAA2Z/oP6JrqeiDj+gE=\"\n            \n            encode(\"The message\
    \ is encoded to base32 with no vowels\") \n            > \"YQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base32 with no\
    \ vowels and \n            uppercase\") \n            > \"YQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base32 with no\
    \ vowels and \n            lowercase\") \n            > \"yQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base32 with no\
    \ vowels and \n            mixed case\") \n            > \"YQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base32 with no\
    \ vowels and \n            mixed case and uppercase\") \n            > \"yQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base32 with no\
    \ vowels and \n            mixed case and lowercase\") \n            > \"YQAA2Z/oP6JrqeiDj+gE=\"\
    \n            \n            encode(\"The message is encoded to base32 with no\
    \ vowels and \n            mixed case and mixed case\") \n            > \"YQAA2Z/oP6JrqeiDj+gE=\"\
    \n", "        \n        encode(['w', 'o', 'l', 'r']) should return 'wolr'\n  \
    \      \n        encode(['i', 'a', 'o', 'e']) should return 'iaeo'\n        \n\
    \        encode(['h', 'j', 'k', 'p', 'r', 'q', 't', 'n', 'h']) should return 'hjkprqhtnhb'\
    \ \n        \n        encode(['u', 'j', 'p', 'h', 'q', 'k', 'r', 't', 'l', 'o'])\
    \ should return 'ujphqkrtleo'\n        \n        encode(['b', 'd', 'e', 't', 'r',\
    \ 'j', 'y', 'z', 's', 'v']) should return 'bdetrjyzsv'\n        \n        encode(['t',\
    \ 'q', 'x', 'd', 'n', 'y', 'm', 'f', 'y', 't']) should return 'tqxdnymfyt'\n \
    \       \n        encode(['a', 'w', 'o', 'u', 't', 'e', 'm', 'o', 'd', 'h', 'q',\
    \ 'n', 'l', 'j']) should return 'autotdemhojqnlj'\n        \n        encode(['k',\
    \ 'a', 'r', 'e', 'm', 't', 'e', 'd', 'q', 'u', 'j', 'o', 'h', 's', 'v', 'b', 'd'])\
    \ should return 'karmededujohsbevbd' \n        \n        encode(['j', 'a', 'w',\
    \ 'o', 'u', 't', 'e', 'm', 'o', 'd', 'h', 'q', 'n', 'l', 'j']) should return 'jawautotdemhojqnlj'\n\
    \        \n        encode(['f', 'd', 'e', 't', 'r', 'j', 'y', 'z', 's', 'v'])\
    \ should return 'fdterjyzsv'\n        \n        encode(['e', 't', 's', 'r', 'j',\
    \ 'y', 'z', 's', 'v', 'b', 'd']) should return 'etsrjyzsvbd'\n        \n     \
    \   encode(['s', 'b', 'd', 'f', 't', 'r', 'j', 'y', 'z', 's', 'v']) should return\
    \ 'sdftterjyzsv'\n        \n        encode(['k', 'a', 'r', 'e', 'm', 't', 'e',\
    \ 'd', 'q', 'u', 'j', 'o', 'h', 's', 'v', 'b', 'd']) should return 'karmededujohsbevbd'\
    \ \n        \n        encode(['t', 'q', 'x', 'd', 'n', 'y', 'm', 'f', 'y', 't'])\
    \ should return 'tqxdnymfyt'\n        \n        encode(['u', 'j', 'p', 'h', 'q',\
    \ 'k', 'r', 't', 'l', 'o']) should return 'ujphqkrtleo'\n        \n        encode(['z',\
    \ 's', 'v', 'b', 'd', '", "            \n            ```python\n            >>>\
    \ encode('Who has won the first Nobel Prize for presidential election?')\n   \
    \         'iEcTvOiGfZrF'\n            ```\n            \"\"\"\n    \"\"\"\n  \
    \  \n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels = \"aeiouAEIOU\"\
    \n\n    translated = \"\"\n    for c in message:\n        if c.lower() in alphabet:\n\
    \            index = alphabet.find(c.lower())\n            next_index = alphabet.find(vowels[index],\
    \ index + 1)\n            translated += vowels[index + 1]\n        elif c.lower()\
    \ in vowels:\n            translated += c\n        else:\n            translated\
    \ += c.lower()\n\n    return translated\n\n", "    encode(message=\"hello\")\n\
    \            \"llloo\"\n    encode(message=\"h\")\n            \"hhh\"\n    encode(message=\"\
    i\")\n            \"ii\"\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n\
    \    \n    vowel_counter = 0\n    \n    encoded_message = message\n    \n    \n\
    \    for i in range(len(message)):\n        if message[i] in vowels:\n       \
    \     vowel_counter += 1\n            \n        if message[i] in vowels[vowel_counter:]:\n\
    \            encoded_message = encoded_message.replace(message[i], '', 1)\n  \
    \          vowel_counter = 0\n        \n    return encoded_message\n", "     \
    \       message = 'Hello World'\n            encode(message)\n            'H eHl\
    \ dEll'\n            \"\"\"\n    \n    Args:\n        message(str): \n    \n \
    \   Returns: \n        str: \n            a message in such a way that it swaps\
    \ case of all letters, \n            replaces all vowels in the message with the\
    \ letter that \n            appears 2 places ahead of that vowel in the english\
    \ alphabet.\n    \"\"\"\n    # TO DO: Replace this helper function with a solution\
    \ to the \n    #        question in the docstring.\n    return message\n</cell>\n\
    <cell>\n\"\"\"\nDON'T MODIFY ANYTHING IN THIS CELL THAT IS BELOW THIS LINE\n\"\
    \"\"\ntests.test_encode(encode)\n</cell>\n<text>\nDefining decoder\nThe next step\
    \ is to define the decoder portion of the seq2seq model. This will take in the\
    \ input sequence from the encoder, run it through a series of self attention layers\
    \ using a residual encoder, and finally output the context vector. The context\
    \ vector will then be passed through a dropout layer to determine what features\
    \ of the input sequence we should use as input to the decoder.\n\nThe seq2seq\
    \ decoder will be trained first on the training data and the validation data to\
    \ avoid overfitting the training data.\n\n\n</text>\n<text>\n\nImplement the decoder\
    \ function\nUsing this following helper function, seq2seq_decoder, you can define\
    \ the decoder that uses a passed in the sequence of hidden states as the initial\
    \ input and the first output as the initial output. The function returns the logits\
    \ and the complete hidden state, with the final output being the highest probability\
    \ and the initial output being the final hidden state.\n\n\n</text>\n<cell>",
  "        \n            >>>encode(\"hello\") => \"ehllo\"\n            >>>encode(\"\
    abracadabra\") => \"abrcaeaadara\"\n            >>>encode(\"banana\") => \"naran\"\
    \n            \n            \"\"\"\n            \n    :param message: The message\
    \ to be encoded.\n    :return: A encoded message.\n    \"\"\"\n    \n    return\
    \ \"\".join(\n        [char.lower() if char.isalpha() else char for char in message]\n\
    \    )\n\n", "            encode(message = 'The quick brown fox jumps over the\
    \ lazy dog') \n            '4o6 2q9 4u5 3y3 11o5 7w1 3o2 1xr'\n            \"\"\
    \"\n            encode(message = 'The quick brown fox jumps over the lazy dog')\
    \ \n            '4o6 2q9 4u5 3y3 11o5 7w1 3o2 1xr'\n            \"\"\"\n     \
    \       encode(message = 'The quick brown fox jumps over the lazy dog') \n   \
    \         '4o6 2q9 4u5 3y3 11o5 7w1 3o2 1xr'\n            \"\"\"\n           \
    \ encode(message = 'The quick brown fox jumps over the lazy dog') \n         \
    \   '4o6 2q9 4u5 3y3 11o5 7w1 3o2 1xr'\n            \"\"\"\n            encode(message\
    \ = 'The quick brown fox jumps over the lazy dog') \n            '4o6 2q9 4u5\
    \ 3y3 11o5 7w1 3o2 1xr'\n            \"\"\"\n            encode(message = 'The\
    \ quick brown fox jumps over the lazy dog') \n            '4o6 2q9 4u5 3y3 11o5\
    \ 7w1 3o2 1xr'\n            \n    \"\"\"\n    message = message.upper()\n    \n\
    \    alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    \n    message = message.replace('\
    \ ', '')\n    \n    swap_case = list(zip(alphabet, alphabet[1:]))\n    swap_case.append(('I',\
    \ 'I'))\n    swap_case.append(('O', 'O'))\n    swap_case.append(('U', 'U'))\n\
    \    swap_case.append(('Z', 'Z'))\n    swap_case.append(('E', 'E'))\n    swap_case.append(('H',\
    \ 'H'))\n    swap_case.append(('L', 'L'))\n    swap_case.append(('R', 'R'))\n\
    \    swap_case.append(('W', 'W'))\n    swap_case.append(('P', 'P'))\n    swap_case.append(('F',\
    \ 'F'))\n    swap_case.append(('S', 'S'))\n    swap_case.append(('T', 'T'))\n\
    \    swap_case.append(('G', 'G'))\n    swap_case.append(('C', 'C'))\n    swap_case.append(('D',\
    \ 'D'))\n    swap_case.append(('P', 'P'))\n    swap_case.append(('O', 'O'))\n\
    \    swap_case.append(('W', 'W'))\n    swap_case.append(('N', 'N'))\n    swap_case.append(('M',\
    \ 'M'))", "            Message: aBcDE\n            Output: abCDE\n           \
    \ \"\"\"\n    \"\"\"\n    \n    return \"\".join([x.lower() \n               \
    \     for x in message.replace('a', 'z')\n                        .replace('e',\
    \ 'z')\n                        .replace('i', 'z')\n                        .replace('o',\
    \ 'z')\n                        .replace('u', 'z')\n                        .replace('0',\
    \ 'z')\n                        .replace('1', 'z')\n                        .replace('2',\
    \ 'z')\n                        .replace('3', 'z')\n                        .replace('4',\
    \ 'z')\n                        .replace('5', 'z')\n                        .replace('6',\
    \ 'z')\n                        .replace('7', 'z')\n                        .replace('8',\
    \ 'z')\n                        .replace('9', 'z')\n                        .replace(',',\
    \ 'z')\n                        .replace(' ', 'z')\n                        .replace('.',\
    \ 'z')\n                        .replace('!', 'z')\n                        .replace('?',\
    \ 'z')\n                        .replace(':', 'z')\n                        .replace(';',\
    \ 'z')\n                        .replace(':', 'z')\n                        .replace('-',\
    \ 'z')\n                        .replace('>', 'z')\n                        .replace('(',\
    \ 'z')\n                        .replace(')', 'z')\n                        .replace('@',\
    \ 'z')\n                        .replace('#', 'z')\n                        .replace('$',\
    \ 'z')\n                        .replace('%', 'z')\n                        .replace('^',\
    \ 'z')\n                        .replace('&', 'z')\n                        .replace('*',\
    \ 'z')\n                        .replace('[', 'z')\n                        .replace(']',\
    \ 'z')\n                        .replace('{', 'z')\n                        .replace('}',\
    \ 'z')\n                        .replace('|', 'z')\n                        .replace('+',\
    \ 'z')\n                        .replace('=', 'z')\n                        .replace('<',\
    \ 'z')\n                        .replace('>', 'z')\n                        .replace('?',\
    \ 'z')\n                        .replace('.', 'z')\n                        .replace(',',\
    \ 'z')\n                        .replace(' ', 'z')\n                        .replace('!',\
    \ 'z')\n                        .replace('?', '')\n                        .replace(':',\
    \ 'z')\n                        .replace(';', 'z')\n                        .replace(':',\
    \ 'z')\n                        .replace('-', 'z')\n                        .replace('>',\
    \ 'z')\n                        .replace('(', 'z')\n                        .replace(')',\
    \ 'z')\n                        .replace('@', 'z')\n                        .replace('#',\
    \ 'z')\n                        .replace('$', 'z')\n                        .replace('%',\
    \ 'z')\n                        .replace('^', 'z')\n                        .replace('&',\
    \ 'z')\n                        .replace('*', 'z')\n                        .replace('[',\
    \ 'z')\n                        .replace(']', 'z')\n                        .replace('{',\
    \ 'z')\n                        .replace('}', 'z')\n                        .replace('|',\
    \ 'z')\n                        .replace('+', 'z')\n                        .replace('=',\
    \ 'z')\n                        .replace('<", "            message = input(\"\
    Please enter a message to encode:\")\n            message = encode(message)\n\
    \            print(message)\n            \"\"\"\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\
    \n    lowercase_alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    \n    message =\
    \ message\n    message = message.lower()\n    \n    split_message = message.split()\n\
    \    \n    encoded_message = \"\"\n    for word in split_message:\n        encoded_message\
    \ += word[0].upper() + word[1:]\n    \n    for letter in vowels:\n        letter_indexes\
    \ = [m.start() for m in re.finditer(letter, encoded_message)]\n        for index\
    \ in letter_indexes:\n            encoded_message = encoded_message[:index] +\
    \ lowercase_alphabet[index+2::].upper() + encoded_message[index+1:]\n    \n  \
    \  return encoded_message\n</cell>\n<text>\nExercise\nWrite a function to decode\
    \ your encoded message. The encoded message should be the same as the one you\
    \ created in step 3\n \n \n \n \n \n \n \n\n\n</text>\n<cell>", "    >>> encode(\"\
    Hello World\")\n    'EH LO ORL'\n            \n    >>> encode(\"HeLlo WoRlD\"\
    )\n    'EH LO ORL'\n            \n    >>> encode(\"Hello World\")\n    'EH LO\
    \ ORL'\n            \n    >>> encode(\"Hello  World\")\n    'EH LO ORL'\n    \
    \        \n    >>> encode(\"Hello   World\")\n    'EH LO ORL'\n            \n\
    \    >>> encode(\"HaLlO WoRlD\")\n    'EH LO ORL'\n            \n    >>> encode(\"\
    HaLlO WoRlD\")\n    'EH LO ORL'\n            \n    >>> encode(\"HeLlo WoRlD\"\
    )\n    'EH LO ORL'\n            \n    >>> encode(\"He Llo Wo RlD\")\n    'EH LO\
    \ ORL'\n            \n    >>> encode(\"HE LLO WO RLD\")\n    'EH LO ORL'\n   \
    \         \n    >>> encode(\"Hello World\")\n    'EH LO ORL'\n            \n \
    \   >>> encode(\"Hello World\")\n    'EH LO ORL'\n            \n    >>> encode(\"\
    Hello World\")\n    'EH LO ORL'\n            \n    >>> encode(\"HeLlo WoRlD\"\
    )\n    'EH LO ORL'\n            \n    >>> encode(\"He Llo Wo RlD\")\n    'EH LO\
    \ ORL'\n            \n    >>> encode(\"HE LLO WO RLD\")\n    'EH LO ORL'\n   \
    \         \n    >>> encode(\"Hello World\")\n    'EH LO ORL'\n            \n \
    \   >>> encode(\"He Llo Wo RlD\")\n    'EH LO ORL'\n            \n    >>> encode(\"\
    HE LLO WO RLD\")\n    'EH LO ORL'\n            \n    >>> encode(\"HE LLO WO RLD\"\
    )\n    'EH LO ORL'\n            \n    >>> encode(\"HE LLO WO RLD\")\n    'EH LO\
    \ ORL'\n            \n    >>> encode(\"He Llo Wo RlD\")\n    'EH LO ORL'\n   \
    \         \n    >>> encode(\"HE LLO WO RLD\")\n    'EH LO ORL'\n            \n\
    \    >>> encode(\"He Llo Wo RlD\")\n    'EH LO ORL", "            >>> encode(\"\
    Hello World\")\n            'hxllrd yz'\n            >>> encode(\"How are you?\"\
    )\n            'hxwer yxo'\n            >>> encode(\"How are you? I'm fine\")\n\
    \            'hxwer yxo yxo yz'\n            >>> encode(\"How are you? I'm fine.\
    \ I like you.\")\n            'hxwer yxo yxo yz'\n            >>> encode(\"How\
    \ are you? I'm fine. I like you!\" )\n            'hxwer yxo yxo yz'\n       \
    \     >>> encode(\"How are you? I'm fine. I like you! I love you\")\n        \
    \    'hxwer yxo yxo yz'\n            >>> encode(\"I am fine. I like you! I love\
    \ you\")\n            'hxw er yxo'\n            >>> encode(\"You are so nice\"\
    )\n            'hxu er yz'\n            >>> encode(\"You are so nice. Thanks for\
    \ asking\")\n            'hxu er yz'\n            >>> encode(\"You are so nice.\
    \ Thanks for asking again\")\n            'hxu er yz'\n            >>> encode(\"\
    You are so nice. Thanks for asking again and again\")\n            'hxu er yz'\n\
    \            \"\"\"\n            \n    \"\"\"\n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n", "    >>> encode(message = 'abracadabra')\n \
    \   >>> abracadba\n            \n    \"\"\"\n    message = message.lower()\n \
    \   \n    table = str.maketrans({\n        'a': 'z',\n        'e': 'e',\n    \
    \    'i': 'i',\n        'o': 'o',\n        'u': 'u',\n        'y': 'g'\n     \
    \   })\n    \n    return message.translate(table)\n\n", "            \n    \"\"\
    \"\n    \n    # Your code here\n    return ''\n", "            >> encode(\"Hello\
    \ World\") \n            >> \"lleH dlroW oorld\"\n            \"\"\"\n    Args:\n\
    \        message (str): string to be encoded\n    \n    Returns:\n        str:\
    \ encoded string\n    \"\"\"\n    alphabet = list(string.ascii_lowercase)\n  \
    \  vowel_mapping = {}\n    for letter in alphabet:\n        vowel_mapping[letter]\
    \ = []\n    for letter in alphabet:\n        if letter in vowel_mapping:\n   \
    \         vowel_mapping[letter].append(letter)\n    message = message.replace(\"\
    \ \", \"\")\n    encoded = \"\"\n    for letter in message:\n        letter_index\
    \ = alphabet.index(letter)\n        letter_position = letter_index + 1\n     \
    \   letter_2_index = letter_index + 2\n        if letter_index == 0:\n       \
    \     letter_position = alphabet[letter_2_index]\n            letter_2_index =\
    \ letter_2_index + 1\n        elif letter_index == len(alphabet) - 1:\n      \
    \      letter_position = alphabet[letter_2_index]\n            letter_2_index\
    \ = letter_2_index + 1\n        if letter_position in vowel_mapping:\n       \
    \     letter_position_index = alphabet.index(letter_position)\n            letter_position_position\
    \ = letter_index + vowel_mapping[letter_position_index][1]\n            letter_position_2_index\
    \ = letter_index + vowel_mapping[letter_position_index][2]\n            if letter_position_position\
    \ in vowel_mapping:\n                letter_position_position = alphabet[letter_position_position_index]\n\
    \            if letter_position_2_index in vowel_mapping:\n                letter_position_2_index\
    \ = alphabet[letter_position_2_index]\n            else:\n                letter_position_2_index\
    \ = alphabet[letter_position_position]\n            encoded += vowel_mapping[letter_position][letter_position_position]\
    \ + vowel_mapping[letter_position][letter_position_2_index] + letter\n       \
    \ else:\n            encoded += letter\n    return encoded\n", "    >>> encode('A')\n\
    \    'AE'\n    >>> encode('a') \n    'ea'\n    >>> encode('ab')\n    'eba'\n \
    \   >>> encode('eab')\n    'eab'\n    \"\"\"\n    return \"\".join([letter for\
    \ letter in message if letter in 'aeiou']) \n\n\"\"\"\nWrite a function that takes\
    \ a message, and encodes in such a \nway that it swaps case of all letters, replaces\
    \ all vowels in \nthe message with the letter that appears 2 places ahead of that\
    \ \nvowel in the english alphabet. \nAssume the message is all lowercase letters.\
    \ \nWrite your function so that it returns '<' and '>'\n\"\"\"", "           \
    \ Given the message \"abbCcc\" return \"Bcbcc\"\n            \"\"\"\n    \n  \
    \  Args:\n        message (str):\n        \n    Returns:\n        str: encoded\
    \ message\n    \"\"\"\n    return ''.join([message[i].upper() if message[i].upper()\
    \ in vowels else message[i] \n                    for i in range(0, len(message))])\n",
  "            message = input(\"Message: \")\n            print(encode(message))\n\
    \        \n            message = input(\"Message: \")\n            print(encode(message))\n\
    \        \n            message = input(\"Message: \")\n            print(encode(message))\n\
    \        \n            message = input(\"Message: \")\n            print(encode(message))\n\
    \        \n            message = input(\"Message: \")\n            print(encode(message))\n\
    \            \"\"\"\n        \n        \n        \"\"\"\n        Message: a\n\
    \        I\n        Message: e\n        I\n        Message: i\n        II\n  \
    \      Message: o\n        I\n        Message: u\n        I\n        Message:\
    \ u\n        I\n        Message: u\n        I\n        Message: o\n        I\n\
    \        Message: u\n        I\n        Message: a\n        I\n        Message:\
    \ e\n        I\n        Message: i\n        II\n        Message: o\n        I\n\
    \        Message: u\n        I\n        Message: u\n        I\n        Message:\
    \ u\n        I\n        Message: o\n        I\n        Message: u\n        I\n\
    \        Message: a\n        I\n        Message: e\n        I\n        Message:\
    \ i\n        II\n        Message: o\n        I\n        Message: u\n        I\n\
    \        Message: u\n        I\n        Message: u\n        I\n        Message:\
    \ o\n        I\n        Message: u\n        I\n        Message: a\n        I\n\
    \        Message: e\n        I\n        Message: i\n        II\n        Message:\
    \ o\n        I\n        Message: u\n        I\n        Message: u\n        I\n\
    \        Message: u\n        I\n        Message: o\n        I\n        Message:\
    \ u\n        I\n        Message: a\n        I\n        Message: e\n        I\n\
    \        Message: i\n        II\n        Message: o\n        I\n        Message:\
    \ u\n        I\n        Message: u\n        I\n        Message: u\n        I\n\
    \        Message: o\n        I\n        Message: u\n        I\n        Message:\
    \ a\n        I\n        Message: e\n        I\n        Message: i\n        II\n\
    \        Message: o\n        I\n        Message: u\n        I\n        Message:\
    \ u\n        I\n        Message: u\n        I\n        Message: o\n        I\n\
    \        Message: u\n        I\n        Message: a\n        I\n        ", "  \
    \          Input: \n            Message = \"Hello, World!\"\n            Output:\
    \ \"iHvOoRdLd!\"\n            \"\"\"\n            \n    \"\"\"\n    vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_map = dict(zip(vowels, ascii_lowercase))\n\
    \    message = message.lower()\n    \n    for i in range(len(message)):\n    \
    \    for j in range(i, len(message)):\n            letter = message[i]\n     \
    \       letter2 = message[j]\n            if letter in vowels:\n             \
    \   letter2 = vowel_map[letter2]\n                message[i] = letter2\n     \
    \           message[j] = letter\n                \n    return \"\".join(message)\n\
    \    ", "            assert encode(\" Hello World!\") == \"ahllo  wodor!\", \\\
    \n            \"Should have produced ahllo  wodor!\"\n            \"\"\"\n   \
    \ \n    Args:\n        message: the message to be encoded.\n    Returns:\n   \
    \     The encoded message.\n    \"\"\"\n    \n    message = message.lower() #\
    \ lowercase everything first\n\n    vowels = \"aeiouAEIOU\"\n\n    encoded = \"\
    \"\n\n    for letter in message:\n        if letter in vowels:\n            if\
    \ letter.islower():\n                # do nothing\n                \n        \
    \    else:\n                \n                # find the index 2 places ahead\
    \ of the vowel\n                # and replace it with the letter in the english\
    \ alphabet\n                letter_pos = alphabet.index(letter.upper())\n    \
    \            letter_to_be_swapped = alphabet[letter_pos + 2]\n               \
    \ encoded += letter_to_be_swapped\n        \n        else:\n            encoded\
    \ += letter\n\n    return encoded\n", "            Example: \n            message\
    \ = encode(\"Hello, My name is Ashley.\")\n            print(message) #Output:\
    \ Blade, James, John, Jake, Rachel\n            \n            Example: \n    \
    \        message = encode(\"Hello, My name is Ashley. My name is James.\")\n \
    \           print(message) #Output: Blade, James, John, Jake, Rachel\n       \
    \     \n            Example: \n            message = encode(\"Hello, My name is\
    \ James. My name is Ashley.\")\n            print(message) #Output: Blade, James,\
    \ John, Jake, Rachel\n            \n            Example: \n            message\
    \ = encode(\"Hello, My name is John John.\")\n            print(message) #Output:\
    \ Blade, James, John, Jake, Rachel\n            \n            Example: \n    \
    \        message = encode(\"Hello, My name is John Jake. My name is John Ashley.\"\
    )\n            print(message) #Output: Blade, James, John, Jake, Rachel\n    \
    \        \n            Example: \n            message = encode(\"Hello, My name\
    \ is John Rachel. My name is John Jake Ashley.\")\n            print(message)\
    \ #Output: Blade, James, John, Jake, Rachel\n            \n            Example:\
    \ \n            message = encode(\"Hello, My name is John Rachel. My name is John\
    \ Jake Ashley John John Jake Ashley.\")\n            print(message) #Output: Blade,\
    \ James, John, Jake, Rachel\n            \n            Example: \n           \
    \ message = encode(\"Hello, My name is John Ashley John Jake Rachel.\")\n    \
    \        print(message) #Output: Blade, James, John, Jake, Rachel\n          \
    \  \n            Example: \n            message = encode(\"Hello, My name is John\
    \ Ashley John Jake Rachel. My name is John Ashley John Jake Rachel.\")\n     \
    \       print(message) #Output: Blade, James, John, Jake, Rachel\n           \
    \ \n            Example: \n            message = encode(\"Hello, My name is John\
    \ Ashley John Jake Rachel. My name is John Ashley John Jake Rachel John Ashley\
    \ John Jake Rachel.\")\n            print(message) #Output: Blade, Jame", "  \
    \  Given the message \"hello\"\n    \n    Then the encode function should return\
    \ \"i3l4o\"\n    \"\"\"\n\n    return ''.join([_encode(letter) for letter in message])\n",
  "            Example of how it works:\n            \n            >>> encode(\"my\
    \ dog is called Bob\") \n            'LjZfHsJwJt'\n            \n            \"\
    \"\"\n    \n    \"\"\"\n    \n    message = message.lower()\n    vowels = ['a',\
    \ 'e', 'i', 'o', 'u', 'y']\n    encodedMessage = []\n    \n    for char in message:\n\
    \        \n        if char in vowels:\n            \n            encodedMessage.append(char.upper())\n\
    \            \n        else:\n            \n            encodedMessage.append(char.lower())\n\
    \            \n    return \"\".join(encodedMessage)\n    ", "    >>> encode(encode(\"\
    I like Python\"))\n    'I Za Python'\n    >>> encode(encode(\"I like Java\"))\n\
    \    'I Zb Java'\n    >>> encode(encode(\"I like JavaScript\"))\n    'I Zc JavaScript'\n\
    \    >>> encode(encode(\"I like Ruby\"))\n    'I Zd Ruby'\n    >>> encode(encode(\"\
    I like C\"))\n    'I Ze C'\n    >>> encode(encode(\"I like JavaScript\"))\n  \
    \  'I Ze JavaScript'\n    >>> encode(encode(\"I like Ruby\"))\n    'I Ze Ruby'\n\
    \    >>> encode(encode(\"I like Python\"))\n    'I Ze Python'\n    >>> encode(encode(\"\
    I like C\"))\n    'I Ze C'\n    >>> encode(encode(\"I like Java\"))\n    'I Ze\
    \ Java'\n    >>> encode(encode(\"I like C\"))\n    'I Ze C'\n    >>> encode(encode(\"\
    I like Java\"))\n    'I Ze Java'\n    >>> encode(encode(\"I like Python\"))\n\
    \    'I Ze Python'\n    >>> encode(encode(\"I like Ruby\"))\n    'I Ze Ruby'\n\
    \    >>> encode(encode(\"I like C\"))\n    'I Ze C'\n    >>> encode(encode(\"\
    I like Java\"))\n    'I Ze Java'\n    >>> encode(encode(\"I like C\"))\n    'I\
    \ Ze C'\n    >>> encode(encode(\"I like Java\"))\n    'I Ze Java'\n    \"\"\"\n\
    \    \n    return \"\".join(map(lambda x: (chr(ord(\"a\")-ord(x)) if x == \"a\"\
    \ else chr(ord(\"A\")-ord(x)) if x == \"A\" else x), message))\n</cell>\n<cell>",
  "            encode = lambda m: ''.join(\n                [\n                  \
    \  chr(ord(letter.upper()) + 1)\n                    for letter in m.lower()\n\
    \                ]\n            )\n            print(encode(\"caT\"))\n      \
    \      # returns \"aT\"\n            \"\"\"\n    \"\"\"\n    return message\n",
  "            Example of correct input/output: \n            encode( input ): 'wKk'\n\
    \            encode( input ): 'wQk'\n            encode( input ): 'wRk'\n    \
    \        encode( input ): 'wSk'\n            \n            Example of incorrect\
    \ input/output:\n            encode( input ): 'wJk'\n            encode( input\
    \ ): 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ): 'wRk'\n\
    \            \n            encode( input ): 'wJk'\n            encode( input ):\
    \ 'wQk'\n            encode( input ): 'wRk'\n            encode( input ", "  \
    \  >>> encode(\"I am a dog\")\n    'UAM XMN YFP XMN YFP XMN YFP XMN YFP'\n   \
    \ >>> encode(\"I am a cat\")\n    'UAM XMN YFP XMN YFP XMN YFP XMN YFP XMN YFP'\n\
    \    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    message_letters\
    \ = list(message)\n    message_letters = [letter for letter in message_letters\
    \ if len(letter) > 0]\n    message_letters_2places = [letter for letter in message_letters\
    \ if letter in alphabet]\n    message_letters_2places = [letter for letter in\
    \ message_letters_2places if letter in alphabet]\n    message_letters_3places\
    \ = [letter for letter in message_letters_2places if letter in alphabet]\n   \
    \ message_letters_3places = [letter for letter in message_letters_3places if letter\
    \ in alphabet]\n    message_letters_3places = [letter for letter in message_letters_3places\
    \ if letter not in alphabet]\n    message_letters_3places = [letter for letter\
    \ in message_letters_3places if letter not in alphabet]\n    message_letters_3places.reverse()\n\
    \    message_letters_3places = \"\".join(message_letters_3places)\n    message_letters_2places\
    \ = \"\".join(message_letters_2places)\n    message_letters_3places = \"\".join(message_letters_3places)\n\
    \    \n    return \"\".join(message_letters_2places) + message_letters_3places\n\
    \n", "            encode(message: str) -> str\n            \n            encode\
    \ the given message, and return \n            the encoded message\n          \
    \  \n            >>> encode(\"I like cheese\")\n            'Iuj sese'\n     \
    \       \n            >>> encode(\"Is that an aardvark\")\n            'Istt eesa\
    \ kaa'\n            \n            >>> encode(\"The quick brown fox jumps over\
    \ the lazy dog\")\n            'Thunq brunq fox jumpu ove the lasz dog'\n    \
    \        \"\"\"\n    \n    vowels = \"aeiouAEIOU\"\n    message = message.lower()\n\
    \    message = message.replace(\" \", \"\")\n    message = message.replace(\"\
    _\", \"\")\n    message = message.replace(\",\", \"\")\n    message = message.replace(\"\
    !\", \"\")\n    message = message.replace(\":\", \"\")\n    message = message.replace(\"\
    ;\", \"\")\n    message = message.replace(\"?\", \"\")\n    message = message.replace(\"\
    /\", \"\")\n    message = message.replace(\"(\", \"\")\n    message = message.replace(\"\
    )\", \"\")\n    message = message.replace(\"[\", \"\")\n    message = message.replace(\"\
    ]\", \"\")\n    message = message.replace(\"'\", \"\")\n    message = message.replace('\"\
    ', \"\")\n    message = message.replace(\"-\", \"\")\n    message = message.replace(\"\
    /\", \"\")\n    message = message.replace(\"%\", \"\")\n    message = message.replace(\"\
    @\", \"\")\n    message = message.replace(\"_\", \"\")\n    message = message.replace(\"\
    ^\", \"\")\n    message = message.replace(\"&\", \"\")\n    message = message.replace(\"\
    =\", \"\")\n    message = message.replace(\"[\", \"\")\n    message = message.replace(\"\
    ]\", \"\")\n    message = message.replace(\"{\", \"\")\n    message = message.replace(\"\
    }\", \"\")\n    message = message.replace(\"|\", \"\")\n    message = message.replace(\"\
    <\", \"\")\n    message = message.replace(\">\", \"\")\n    message = message.replace(\"\
    '\", \"\")\n    message = message.replace('\"', \"\")\n    message = message.replace(\"\
    +\", \"\")\n    message = message.replace(\"*\", \"\")\n    message = message.replace(\"\
    ?\", \"\")\n    message = message.replace(\"!\", \"\")\n    message = message.replace(\"\
    (\", \"\")\n    message = message.replace(\")\", \"\")\n    message = message.replace(\"\
    ,\", \"\")\n    message = message.replace(\":\", \"\") \n    message = message.replace(\"\
    <\", \"\")\n    message = message.replace(\">\", \"\")\n    message = message.replace(\"\
    ,\", \"\")\n    message = message.replace(\"+\", \"\")\n    message = message.replace(\"\
    ,\", \"\")\n    message = message.replace(\"_\", \"\")\n    message = message.replace(\"\
    ^\", \"\")\n    message = message.replace(\"%\", \"\")\n    message = message.replace(\"\
    *\", \"\")\n    message = message.replace(\"?\", \"\")\n    message = message.replace(\"\
    !\", \"\")\n    message = message.replace(\"(\", \"\")\n    message = message.replace(\"\
    )\", \"\")\n    message = message.replace(\";\", \"\")\n    message = message.replace(\"\
    <\", \"\")\n    message = message.replace(\">\", \"\")", "            encode =\
    \ encode([\"a\", \"b\", \"c\", \"d\", \"e\"])\n            print(encode(\"a\"\
    ))\n            >> a\n            print(encode(\"b\"))\n            >> b\n   \
    \         print(encode(\"c\"))\n            >> c\n            print(encode(\"\
    d\"))\n            >> d\n            print(encode(\"e\"))\n            >> e\n\
    \            \"\"\"\n    \n    \n    \n    # Write your solution here\n    \n\
    \    return message\n</cell>\n<cell>", "            message: abc -> abc\n    \
    \        message: abc -> eca\n            message: abc -> abca\n            \"\
    \"\"\n    \"\"\"\n    vowels = \"aeiouyAEIOUY\"\n    letter = message.lower()\n\
    \    vowel_pos = letter[0]\n    next_letter = letter[1:]\n    result = []\n  \
    \  for letter in letter:\n        if letter in vowels:\n            pos = vowels.index(letter)\n\
    \            result.append(vowels[(pos + 1) % len(vowels)])\n        else:\n \
    \           result.append(letter)\n    return ''.join(result) + next_letter\n\
    </cell>\n<text>\nNext, we write a function called decode, which does the opposite.\n\
    \n\n</text>\n<cell>", "                >>> encode(message)\n                >>>'HM8S'\n\
    \            \n    \"\"\"\n    \n    vowels = ['a', 'e', 'i', 'o', 'u']\n    letters\
    \ = [\n        \"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\",\
    \ \"p\", \"A\", \"E\", \"I\", \"O\", \n        \"U\", \"Y\", \"a\", \"e\", \"\
    i\", \"o\", \"u\", \"y\", \"y\", \"y\", \"a\", \"e\", \"i\", \"o\", \n       \
    \ \"u\", \"A\", \"E\", \"I\", \"O\", \"U\", \"y\", \"Y\", \"Y\", \"y\", \"a\"\
    , \"e\", \"i\", \"o\", \n        \"u\", \"Y\", \"Y\", \"Y\", \"y\", \"a\", \"\
    e\", \"i\", \"o\", \"u\", \"Y\", \"Y\", \"Y\", \"y\"\n    ]\n    letters_2 = list(letters)\n\
    \    letters_2.append(letters_2[-1])\n    letters_2.append(letters_2[0])\n   \
    \ letters_2.append(letters_2[1])\n    letters_2.append(letters_2[2])\n    letters_2.append(letters_2[3])\n\
    \    letters_2.append(letters_2[4])\n    letters_2.append(letters_2[5])\n    letters_2.append(letters_2[6])\n\
    \    letters_2.append(letters_2[7])\n    letters_2.append(letters_2[8])\n    letters_2.append(letters_2[9])\n\
    \    letters_2.append(letters_2[10])\n    letters_2.append(letters_2[11])\n  \
    \  letters_2.append(letters_2[12])\n    letters_2.append(letters_2[13])\n    letters_2.append(letters_2[14])\n\
    \    letters_2.append(letters_2[15])\n    letters_2.append(letters_2[16])\n  \
    \  letters_2.append(letters_2[17])\n    letters_2.append(letters_2[18])\n    letters_2.append(letters_2[19])\n\
    \    letters_2.append(letters_2[20])\n    letters_2.append(letters_2[21])\n  \
    \  letters_2.append(letters_2[22])\n    letters_2.append(letters_2[23])\n    letters_2.append(letters_2[24])\n\
    \    letters_2.append(letters_2[25])\n    letters_2.append(letters_2[26])\n  \
    \  letters_2.append(letters_2[27])\n    letters_2.append(letters_2[28])\n    letters_2.append(letters_2[29])\n\
    \    letters_2.append(letters_2[30])\n    letters_2.append(letters_2[31])\n  \
    \  letters_2.append(letters_2[32])\n    ", "            encode('hello')\n    \
    \        'ehllo'\n            encode('code')\n            'ect'\n            \n\
    \            \"\"\"\n    \"\"\"\n\n    # Your code here\n\n\n    vowels = \"aeiouAEIOU\"\
    \n    encoded_message = []\n    \n    message = message.lower()\n    \n    for\
    \ char in message:\n        if char in vowels:\n            encoded_message.append(vowels.index(char))\n\
    \        else:\n            encoded_message.append(vowels.find(char)+1)\n    \
    \        \n    encoded_message = \"\".join(map(str, encoded_message))\n    return\
    \ encoded_message\n\nencode.__doc__ = \"\"\"\n    Write a function that takes\
    \ a message, and encodes in such a \n    way that it swaps case of all letters,\
    \ replaces all vowels in \n    the message with the letter that appears 2 places\
    \ ahead of that \n    vowel in the english alphabet. \n    Assume only letters.\
    \ \n    \n    Examples:\n            \"\"\"\n            encode('hello')\n   \
    \         'ehllo'\n            encode('code')\n            'ect'\n           \
    \ \n            \"\"\"\n    \"\"\"\n</cell>\n<cell>", "            encode(\"Hello\
    \ World!\") == \"HellO WoRlD!\"\n            \n            encode(\"The sunset\
    \ sets at twelve o' clock.\") == \"ThE sunset sets at twelle o' clock.\"\n   \
    \ \"\"\"\n    return \"\".join([a if c == \"a\" else a[2:] + \n              \
    \     a.lower() if a.lower() \n                   in [c for c in \"aeiou\"] else\
    \ c \n                   for a,c in zip(message, message[1:]))\n", "         \
    \   message = \"Be afraid of hungry cats and dogs.\"\n            # should return\
    \ \"Be fRAID thnG dAts hNGRY cAts nDgOgS.\"\n            encode(message)\n   \
    \         \"\"\"\n    :param message: the string to encode\n    :return: the encoded\
    \ message\n    \"\"\"\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    vowels\
    \ = \"aeiouAEIOU\"\n    encoded = []\n    for letter in message:\n        if letter\
    \ in vowels:\n            vowel_position = letters.index(letter) + 2\n       \
    \     encoded.append(letters[vowel_position])\n        else:\n            encoded.append(letters[letters.index(letter)])\n\
    \    return ''.join(encoded)\n</cell>\n<cell>\nencode(message)\n</cell>\n<text>\n\
    Problem 7\n\n</text>\n<text>\nWrite a function called decode, which takes a message\
    \ encoded as \na string, decodes it, and returns the original message.\n\n\n</text>\n\
    <cell>", "            Example 1: \n            Input: message = \"My mom\"\n \
    \           Output: \"AwM YmZ\"\n            Example 2: \n            Input: message\
    \ = \"My ladder\"\n            Output: \"AwM LdR\"\n            Example 3: \n\
    \            Input: message = \"Hello world\"\n            Output: \"HellX wOrD\"\
    \n            Example 4: \n            Input: message = \"Hello\"\n          \
    \  Output: \"HellX\"\n            Example 5: \n            Input: message = \"\
    Hello\"\n            Output: \"HellX\"\n            Example 6: \n            Input:\
    \ message = \"Hello\"\n            Output: \"HellX\"\n            Example 7: \n\
    \            Input: message = \"Hello\"\n            Output: \"HellX\"\n     \
    \       \"\"\"\n    \n    message = message.upper()\n    \n    #Iterate through\
    \ each letter in the message\n    for letter in message:\n        \n        #If\
    \ letter is uppercase, replace vowel with letter in \n        #the next position\n\
    \        if letter.isupper():\n            message = message.replace(letter, letter.upper())\n\
    \            \n        #If letter is lowercase, replace vowel with letter in \n\
    \        #the next position\n        elif letter.islower():\n            message\
    \ = message.replace(letter, letter.lower())\n            \n    #Iterate through\
    \ each vowel in the message\n    for letter in message:\n        \n        #Check\
    \ if letter equals vowel, and is 2 places ahead of that vowel\n        if letter\
    \ in Vowels and letter.isupper() and letter in Vowels[letter]+2:\n           \
    \ message = message.replace(letter, Vowels[letter]+2)\n            \n        #Check\
    \ if letter equals vowel, and is 2 places ahead of that vowel\n        elif letter\
    \ in Vowels and letter.islower() and letter in Vowels[letter]+2:\n           \
    \ message = message.replace(letter, Vowels[letter]+2)\n            \n    #Iterate\
    \ through each letter in the message\n    for letter in message:\n        \n \
    \       #If letter is uppercase, replace vowel with letter in \n        #the next\
    \ position\n        if letter.isupper():\n            message = message.replace(letter,\
    \ letter.upper())\n            \n        #If letter is lowercase, replace vowel\
    \ with letter in \n        #the next position\n        elif letter.islower():\n\
    \            message = message.replace(letter, letter.lower())\n            \n\
    \    #Iterate through each vowel in the message\n    for letter in message:\n\
    \        \n        #Check if letter equals vowel, and is 2 places ahead of that\
    \ vowel\n        if letter in Vowels and letter.isupper() and letter in Vowels[letter]+2:\n\
    \            message = message.replace(letter, Vow", "            encode(\"WHO\
    \ ARE YOU?\") => \"KO IK WO IK YO?\"\n            \"\"\"\n    \n    \n    Args:\n\
    \        message (str): a message\n    \n    Returns:\n        str: a message\
    \ in encoded form\n    \"\"\"\n    \n    vowels = \"aeiou\"\n    \n    encoded_message\
    \ = \"\"\n    \n    for character in message:\n        if character.lower() in\
    \ vowels:\n            encoded_message += character.lower()\n        else:\n \
    \           encoded_message += vowels[vowels.index(character.lower()) + 2]\n \
    \           \n    return encoded_message\n</cell>\n<cell>\nencode(\"\"\"\nWHO\
    \ ARE YOU?\n\"\"\")\n</cell>\n<cell>", "    \n    Input: Hello, world\n    Output:\
    \ Hlleewrld, woLrld\n\n    \"\"\"\n    message = message.upper()\n    vowels =\
    \ \"AEIOUaeiou\"\n    \n    message = message.replace(vowels, lambda x : (x.lower()\
    \ + x.upper())[vowels.find(x) % len(vowels)])\n\n    for index, letter in enumerate(message):\n\
    \        message = message.replace(letter, \n                                \
    \    (letter if index > 2 else (letter if index == 2 else letter + vowels[index]))\n\
    \                                    )\n    return message\n    \n    ", "   \
    \ encode = lambda message: \"aAbBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz\"\
    \n    \n    \"\"\"\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z']\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    def translate(message:\
    \ str) -> str:\n        \"\"\"\n        Replace all letters in a message that\
    \ are vowels with a \n        letter that appears 2 places ahead of the vowel\
    \ \n        in the english alphabet\n        \n        Examples:\n           \
    \     encode (\"hello\") -> \"iioKkLl\"\n        \"\"\"\n        for index, letter\
    \ in enumerate(message):\n            if letter in vowels:\n                translated\
    \ = letters[index + 2]\n                message = message.replace(letter, translated)\n\
    \                \n        return message\n    \n    message = translate(message)\n\
    \    return message\n    \n", "            message = encode(\"What is your name?\"\
    )\n            print(message)\n            # > Wh2s 2mY 2nu 2nam 2me3\n      \
    \      \"\"\"\n    Args:\n        message: Your input string\n    \n    Returns:\n\
    \        The message encoded in the same way as the input message\n    \"\"\"\n\
    \    message = message.casefold()\n    vowels = \"AEIOUaeiou\"\n    encoded_message\
    \ = \"\"\n    for letter in message:\n        if letter in vowels:\n         \
    \   encoded_message += letter\n            encoded_message += letter\n       \
    \     encoded_message += letter\n        elif letter == \"W\":\n            encoded_message\
    \ += \"2\"\n        elif letter == \"H\":\n            encoded_message += \"3\"\
    \n        elif letter == \"R\":\n            encoded_message += \"4\"\n      \
    \  elif letter == \"N\":\n            encoded_message += \"5\"\n        elif letter\
    \ == \"F\":\n            encoded_message += \"6\"\n        elif letter == \"W\"\
    :\n            encoded_message += \"2\"\n        elif letter == \"L\":\n     \
    \       encoded_message += \"3\"\n        elif letter == \"B\":\n            encoded_message\
    \ += \"4\"\n        elif letter == \"C\":\n            encoded_message += \"5\"\
    \n        elif letter == \"D\":\n            encoded_message += \"6\"\n      \
    \  elif letter == \"M\":\n            encoded_message += \"7\"\n        elif letter\
    \ == \"O\":\n            encoded_message += \"8\"\n        elif letter == \"Y\"\
    :\n            encoded_message += \"9\"\n        elif letter == \"J\":\n     \
    \       encoded_message += \"0\"\n        elif letter == \"X\":\n            encoded_message\
    \ += \"5\"\n        elif letter == \"Z\":\n            encoded_message += \"9\"\
    \n        elif letter == \"S\":\n            encoded_message += \"0\"\n      \
    \  elif letter == \"P\":\n            encoded_message += \"0\"\n        elif letter\
    \ == \"O\":\n            encoded_message += \"0\"\n        elif letter == \"D\"\
    :\n            encoded_message += \"0\"\n        elif letter == \"G\":\n     \
    \       encoded_message += \"0\"\n        elif letter == \"F\":\n            encoded_message\
    \ += \"0\"\n        elif letter == \"H\":\n            encoded_message += \"0\"\
    \n        elif letter == \"A\":\n            encoded_message += \"0\"\n      \
    \  elif letter == \"B\":\n            encoded_message += \"0\"\n        elif letter\
    \ == \"C\":\n            encoded_message += \"0\"\n        elif letter == \"E\"\
    :\n            encoded_message += \"0\"\n        elif letter == \"I\":\n     \
    \       encoded_message += \"0\"\n        elif letter == \"L\":\n            encoded_message\
    \ += \"0\"\n        elif letter == \"K\":\n            encoded_message += \"0\"\
    \n        elif letter == \"M\":\n            encoded_message += \"0\"\n      \
    \  elif letter == \"F\":\n            encoded_message += \"0\"\n        elif letter\
    \ == \"P\":\n            encoded_message += \"0\"\n        elif letter", "   \
    \         >>> encode(\"\"\"\n            Hello, I'm a program\n            that's\
    \ easy to write and understand\"\"\")\n            uyfpyewfj\n            >>>\"\
    \"\"\n    \"\"\"\n    vowels = \"AEIOUaeiou\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    message = message.lower()\n    message = message.replace(\"'\", \"\")\n\
    \    message = message.replace('\"', \"\")\n    message = message.replace(\",\"\
    , \"\")\n    message = message.replace(\"!\", \"\")\n    message = message.replace(\"\
    ?\", \"\")\n    message = message.replace(\"\\n\", \"\")\n    message = message.lower()\n\
    \    \n    to_encode = \"\"\n    to_encode = to_encode.join(message.split(\" \"\
    ))\n    to_encode = to_encode.lower()\n    \n    to_encode = to_encode.replace(\"\
    \ \", \"\")\n    \n    for i in range(0, len(to_encode)):\n        if to_encode[i]\
    \ in vowels:\n            to_encode = to_encode.replace(to_encode[i], alphabet[int(to_encode[i])+1])\n\
    \            \n    return to_encode\n</cell>\n<cell>\nencode(\"\"\"\nHello, I'm\
    \ a program\nthat's easy to write and understand\"\"\")\n</cell>\n<text>\nExercise:\
    \ Write a program that takes a message and encodes it \nin such a way that it\
    \ swaps case of all letters, replaces all vowels in \nthe message with the letter\
    \ that appears 2 places ahead of that \nvowel in the english alphabet. \nAssume\
    \ only letters. \nFor example:\n\n</text>\n<cell>", "            encode = encode(message)\n\
    \            encode('hello')\n            >>> 'Hlllo'\n            encode('hello\
    \ world')\n            >>> 'Hlllo Wrdlrd'\n            \"\"\"\n    \"\"\"\n  \
    \  \n    encoded = \"\"\n    \n    letter_count = {}\n    letter_count = 0\n \
    \   for letter in message.lower():\n        if letter in letter_count:\n     \
    \       letter_count[letter] += 1\n        else:\n            letter_count[letter]\
    \ = 1\n    for letter in letter_count:\n        encoded = encoded + (letter +\
    \ str(letter_count[letter]))\n    \n    for letter in encoded:\n        if letter\
    \ in letter_count:\n            if letter_count[letter] == 2:\n              \
    \  encoded = encoded.replace(letter, LETTER_LIST[letter_count[letter] - 2])\n\
    \            else:\n                encoded = encoded.replace(letter, LETTER_LIST[letter_count[letter]])\n\
    \        else:\n            encoded = encoded.replace(letter, letter)\n      \
    \      \n    \n    return encoded\n</cell>\n<cell>\nencode(message)\n</cell>\n\
    <text>\n6.6 Practice\nHow many times does each letter show up in the message?\n\
    \n\n</text>\n<cell>\nletter_count = {}\nfor letter in message.lower():\n    if\
    \ letter in letter_count:\n        letter_count[letter] += 1\n    else:\n    \
    \    letter_count[letter] = 1\nfor letter in letter_count:\n    print(letter +\
    \ str(letter_count[letter]))\n</cell>\n<text>\n6.7 Practice\nThe encoded message\
    \ should have only letters a-z A-Z \n \n \n \n \n \n \n\n\n</text>\n<text>\n6.8\
    \ Practice\nWhat is the frequency of each letter in the encoded message? \n \n\
    \ \n \n \n \n \n \n\n\n</text>\n<text>\n6.9 Practice\nWrite a function that takes\
    \ a message, and encodes in such a way that it swaps case of all letters, replaces\
    \ all vowels in the message with the letter that appears 2 places ahead of that\
    \ vowel in the english alphabet. \nAssume only letters. \n \n \n \n \n \n \n\n\
    \n</text>\n<text>\n6.10 Practice\nThe encoded message should have only letters\
    \ a-z A-Z \n \n \n \n \n \n \n\n\n</text>\n<text>\n6.11 Practice\nWhat is the\
    \ frequency of each letter in the encoded message? \n \n \n \n \n \n \n \n\n\n\
    </text>\n<text>\n6.12 Practice\nWrite a function that takes a message, and encodes\
    \ in such a way that it swap", "            encode (\"The quick brown fox jumps\
    \ over the lazy dog\")\n            > \"xtay yfaoq rbwnj zaoqb xfaov\"\n     \
    \       \"\"\"\n            \n    Args:\n        message (str): The message to\
    \ encode\n        \n    Returns:\n        str: A function that takes a message\
    \ and encodes it\n    \"\"\"\n    return \"\".join([ \n        letters[letters.index(letter)\
    \ + 2] + letter\n        for letter in message.replace(\" \", \"\") \n       \
    \ if letter in letters\n    ])\n    \n", "            message = input(\"What is\
    \ the message: \")\n            print(encode(message))\n            \n       \
    \     >>> What is the message: hi there\n            >>> ejgja drgjeg\n      \
    \      >>> \n    \n    \"\"\"\n    encoded = \"\"\n    for letter in message:\n\
    \        if letter.isupper():\n            letter = letter.lower()\n        if\
    \ letter.lower() in VOWELS:\n            letter = LETTERS[VOWELS.index(letter.lower())]\n\
    \        encoded = encoded + letter\n    return encoded\n</cell>\n<cell>", " \
    \       \n    Input: \n            'Hello World'\n    Output:\n            'Hello\
    \ World'\n        \n            \n    Input: \n            'The quick BROWN FOX\
    \ jumped over the lazy'\n    Output:\n            'T he QUICK brown FOX jumped\
    \ over the lazy'\n        \n    \n    Input: \n            'The quick BROWN FOX\
    \ jumped over the lazy'\n    Output:\n            'T he QUICK brown FOX jumped\
    \ over tHE lazy'\n            \n    \n    \n    Input: \n            'The quick\
    \ BROWN FOX jumped over the lazy'\n    Output:\n            'T he QUICK brown\
    \ FOX jumped over tHe lazy'\n            \n    \n    \n    Input: \n         \
    \   'The quick BROWN FOX jumped over the lazy'\n    Output:\n            'T he\
    \ QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input: \n     \
    \       'The quick brown fox jumped over the lazy'\n    Output:\n            'T\
    \ he QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input: \n  \
    \          'The quick BROWN FOX jumped over the lazy'\n    Output:\n         \
    \   'T he QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input:\
    \ \n            'The quick BROWN FOX jumped over the lazy'\n    Output:\n    \
    \        'T he QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input:\
    \ \n            'The quick BROWN FOX jumped over the lazy'\n    Output:\n    \
    \        'T he QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input:\
    \ \n            'The quick BROWN FOX jumped over the lazy'\n    Output:\n    \
    \        'T he QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input:\
    \ \n            'The quick BROWN FOX jumped over the lazy'\n    Output:\n    \
    \        'T he QUICK brown FOX jumped over tHe lazy'\n    \n    \n    \n    Input:\
    \ \n            'The quick brown FOX jumped over the lazy'\n    Output:\n    \
    \        'T he QUICK brown FOX jumped over tHe ", "            message = encode(\"\
    I love you\")\n            print(message)\n            # I vl yo uo\n        \
    \    # \"\"\"\n    \n    \"\"\"\n    \n    # Initialize a dictionary to hold the\
    \ counts of each letter \n    letterCount = {}\n    \n    # Loop through each\
    \ character in the message and add it to the dictionary\n    for character in\
    \ message:\n        # Check if the character is in the dictionary already\n  \
    \      if character in letterCount:\n            # Increment the count of the\
    \ character in the dictionary by 1\n            letterCount[character] += 1\n\
    \        else:\n            # Add the character to the dictionary with the count\
    \ of 1\n            letterCount[character] = 1\n    \n    # Loop through each\
    \ character in the dictionary and find the letter that \n    # appears 2 places\
    \ ahead of it in the english alphabet. \n    for character in letterCount:\n \
    \       # Check if the letter's count is > 2, which means it appears 2 \n    \
    \    # places ahead of it in the alphabet\n        if letterCount[character] >\
    \ 2:\n            # Assign the letter that appears 2 places ahead of it in the\
    \ \n            # alphabet to the variable letter\n            letter = alphabet[alphabet.index(character)\
    \ + 2]\n    \n            # Replace the character in the message with the letter\
    \ from the \n            # alphabet\n            message = message.replace(character,\
    \ letter)\n    \n    return message\n\n", "        encode = lambda message: \"\
    -\".join(message)\n        encode(\"hello\")\n        >> 'w-e--o--'\n        encode(\"\
    Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"The quick brown fox jumps over\
    \ the lazy dog\")\n        >> '-c-q-b-y-f-x-s-g-z-z-o-o-o-'\n        encode(\"\
    The quick brown fox jumps over the lazy dog\")\n        >> '-c-q-b-y-f-x-s-g-z-z-o-o-o-'\n\
    \        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n\
    \        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n   \
    \     encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n  \
    \      >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n     \
    \   encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n    \
    \    >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n       \
    \ encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n      \
    \  >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"\
    Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n\
    \        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n\
    \        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n   \
    \     encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n  \
    \      >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n     \
    \   encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n    \
    \    >> 'a-h-o-y-'\n        encode(\"Ahoy!\")\n        >> 'a-h-o-y-'\n       \
    \ encode(\"Aho", "    >>> encode(\"hello\")\n    'hELLO'\n    \n    >>> encode(\"\
    helloWorld\")\n    'HellOWorld'\n    \n    >>> encode(\"helloWorld!\")\n    'hELLOW0rld!'\n\
    \    \"\"\"\n\n    # your code here\n    message = message.casefold()\n    message\
    \ = message.replace(\"a\", \"A\")\n    message = message.replace(\"e\", \"E\"\
    )\n    message = message.replace(\"i\", \"I\")\n    message = message.replace(\"\
    o\", \"O\")\n    message = message.replace(\"u\", \"U\")\n    message = message.replace(\"\
    y\", \"Y\")\n    message = message.replace(\"u\", \"U\")\n    message = message.replace(\"\
    A\", \"a\")\n    message = message.replace(\"E\", \"e\")\n    message = message.replace(\"\
    I\", \"i\")\n    message = message.replace(\"O\", \"o\")\n    message = message.replace(\"\
    U\", \"u\")\n    message = message.replace(\"Y\", \"y\")\n    message = message.replace(\"\
    U\", \"u\")\n    message = message.replace(\"w\", \"W\")\n    message = message.replace(\"\
    0\", \"0\")\n    message = message.replace(\"r\", \"R\")\n    message = message.replace(\"\
    l\", \"L\")\n    message = message.replace(\"d\", \"D\")\n    message = message.replace(\"\
    !\", \"!\")\n\n    return message\n\n", "            >>>encode(\"What is your\
    \ name?\")\n            \"What is ym yn?\"\n            \"\"\"\n    \"\"\"\n \
    \   \n    # Create a variable that stores all of the possible letters in the english\
    \ alphabet\n    letters = \"abcdefghijklmnopqrstuvwxyz\"\n    # Create a variable\
    \ that stores all of the possible vowels\n    vowels = \"aeiou\"\n    \n    #\
    \ Create a variable that stores the count of each vowel\n    counts = [0] * len(letters)\n\
    \    # Create a variable that stores the count of each letter\n    countLetter\
    \ = [0] * len(letters)\n    # Loop through the message and count each letter then\
    \ store it in the countLetter array\n    for i in range(len(message)):\n     \
    \   for letter in letters:\n            if message[i] == letter:\n           \
    \     countLetter[letter] += 1\n    \n    # Loop through the countLetter array\
    \ and if the countLetter[i] is greater than 2, \n    # then replace it with the\
    \ letter in letters[i-1].\n    for i in range(len(countLetter)):\n        if countLetter[i]\
    \ > 2:\n            countLetter[i] = countLetter[i-1]\n    \n    # Loop through\
    \ the countLetter array and if the countLetter[i] is equal to 1, \n    # then\
    \ replace it with the letter in letters[i-1].\n    for i in range(len(countLetter)):\n\
    \        if countLetter[i] == 1:\n            countLetter[i] = countLetter[i-1]\n\
    \    \n    # Loop through the countLetter array and if the countLetter[i] is 0,\
    \ \n    # then replace it with the letter in letters[i-1].\n    for i in range(len(countLetter)):\n\
    \        if countLetter[i] == 0:\n            countLetter[i] = countLetter[i-1]\n\
    \    \n    # Create a variable that stores the new message to be returned\n  \
    \  message = message\n    # Loop through the countLetter array and replace each\
    \ letter in the message with the \n    # letter in letters[i-1] if it is greater\
    \ than 1.\n    for i in range(len(countLetter)):\n        if countLetter[i] >\
    \ 1:\n            message = message.replace(str(countLetter[i-1]), letters[i-1])\n\
    \    \n    # Create a variable that stores the new message to be returned\n  \
    \  message = message\n    # Loop through the countLetter array and replace each\
    \ vowel in the message with the \n    # letter in letters[i-1] if it is greater\
    \ than 1.\n    for i in range(len(countLetter)):\n        if countLetter[i] >\
    \ 1:\n            message = message.replace(str(countLetter[i-1]), letters[i-1])\n\
    \    \n    # Create a variable that stores the new message to be returned\n  \
    \  message = message\n    # Loop through the countLetter array and replace each\
    \ letter in the message with the \n    # letter in letters[i-1] if it is equal\
    \ to 1.\n    for i in range(len(countLetter)):\n        if countLetter[i] == 1:\n\
    \            message = message.replace(str(countLetter[i-1]), letters[i-1])\n\
    \    \n    # Create a variable that stores the new message to be returned\n  \
    \  message = ", "    message = \"\"\"\n    Hello there, how are you today?\n \
    \   I'm fine thanks.\n    How about you a beer? \n    \"\"\"\n    \"\"\"\n   \
    \ \n    Your output should be \n    \n    HeLlo there, how are you today?\n  \
    \  I'm fine thanks.\n    HoW aRE youAE today?\n    I'm fine thanks.\n    \"\"\"\
    \n    \n\n    \"\"\"\n    \n    Your output should be \n    \n    HeLlo there,\
    \ how are you today?\n    I'm fine thanks.\n    HoWa areU youAE today?\n    I'm\
    \ fine thanks.\n    \"\"\"\n    \n    \"\"\"\n    \n    Your output should be\
    \ \n    \n    HeLlo there, how are you today?\n    I'm fine thanks.\n    HoWa\
    \ areU youAE today?\n    I'm fine thanks.\n    \"\"\"\n    \"\"\"\n    \n    Your\
    \ output should be \n    \n    HeLlo there, how are you today?\n    I'm fine thanks.\n\
    \    HoWa areU youAE today?\n    I'm fine thanks.\n    \"\"\"\n    \n    \"\"\"\
    \n    \n    Your output should be \n    \n    HeLlo there, how are you today?\n\
    \    I'm fine thanks.\n    HoWa areU youAE today?\n    I'm fine thanks.\n    \"\
    \"\"\n    \"\"\"\n    \n    Your output should be \n    \n    HeLlo there, how\
    \ are you today?\n    I'm fine thanks.\n    HoWa areU youAE today?\n    I'm fine\
    \ thanks.\n    \"\"\"\n    \n    \"\"\"\n    \n    Your output should be \n  \
    \  \n    HeLlo there, how are you today?\n    I'm fine thanks.\n    HoWa areU\
    \ youAE today?\n    I'm fine thanks.\n    \"\"\"\n    \"\"\"\n    \n    Your output\
    \ should be \n    \n    HeLlo there, how are you today?\n    I'm fine thanks.\n\
    \    HoWa areU youAE today?\n    I'm fine thanks.\n    \"\"\"\n    \"\"\"\n  \
    \  \n    Your output should be \n    \n    HeLlo there, how are you today?\n \
    \   I'm fine thanks.\n    HoWa areU youAE today?\n    I'm fine thanks.\n    \"\
    \"\"\n    \"\"\"\n    \n    Your output should be \n    \n    HeLlo there, how\
    \ are you today?\n    I'm fine thanks.\n    HoW", "    >>> encode(\"Hello World\"\
    )\n    'HLEE WORLD'\n            \"\"\"\n    \"\"\"\n    \n    import string\n\
    \    message = message.upper()\n    vowels = \"AEIOUaeiou\"\n    letters = string.ascii_letters\n\
    \    replacements = [vowels[ord(i)-ord('a')] + letters[ord(i)-ord('A')] \n   \
    \                  for i in range(len(message))\n                     if i in\
    \ vowels]\n    replacements.append(letters[ord('A')+1])\n    replacements.append(letters[ord('A')-1])\n\
    \    replacements.append(letters[ord('A')+2])\n    replacements.append(letters[ord('A')+3])\n\
    \    replacements.append(letters[ord('A')+4])\n    replacements.append(letters[ord('A')+5])\n\
    \    replacements.append(letters[ord('A')+6])\n    replacements.append(letters[ord('A')+7])\n\
    \    replacements.append(letters[ord('A')+8])\n    replacements.append(letters[ord('A')+9])\n\
    \    replacements.append(letters[ord('A')+10])\n    replacements.append(letters[ord('A')+11])\n\
    \    replacements.append(letters[ord('A')+12])\n    replacements.append(letters[ord('A')+13])\n\
    \    replacements.append(letters[ord('A')+14])\n    replacements.append(letters[ord('A')+15])\n\
    \    replacements.append(letters[ord('A')+16])\n    replacements.append(letters[ord('A')+17])\n\
    \    replacements.append(letters[ord('A')+18])\n    replacements.append(letters[ord('A')+19])\n\
    \    replacements.append(letters[ord('A')+20])\n    replacements.append(letters[ord('A')+21])\n\
    \    replacements.append(letters[ord('A')+22])\n    replacements.append(letters[ord('A')+23])\n\
    \    replacements.append(letters[ord('A')+24])\n    replacements.append(letters[ord('A')+25])\n\
    \    replacements.append(letters[ord('A')+26])\n    replacements.append(letters[ord('A')+27])\n\
    \    replacements.append(letters[ord('A')+28])\n    replacements.append(letters[ord('A')+29])\n\
    \    replacements.append(letters[ord('A')+30])\n    replacements.append(letters[ord('A')+31])\n\
    \    replacements.append(letters[ord('A')+32])\n    replacements.append(letters[ord('A')+33])\n\
    \    replacements.append(letters[ord('A')+34])\n    replacements.append(letters[ord('A')+35])\n\
    \    replacements.append(letters[ord('A')+36])\n    replacements.append(letters[ord('A')+37])\n\
    \    replacements.append(letters[ord('A')+38])\n    replacements.append(letters[ord('A')+39])\n\
    \    replacements.append(", "    message = encode(\"Hello, I am a student in CSCI\
    \ 161\")\n    \n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return message.upper()\\\
    \n                .replace(vowels, lambda match: \n                    match[0].lower()\
    \ + match[0].upper()) \\\n                .replace('AE', 'AEO')\\\n          \
    \      .replace('O', 'OE')\\\n                .replace('U', 'UE')\\\n        \
    \        .replace('I', 'IE')\\\n                .replace('T', 'ET')\\\n      \
    \          .replace('S', 'ES')\\\n                .replace('H', 'HE')\\\n    \
    \            .replace('R', 'ER')\\\n                .replace('D', 'DE')\\\n  \
    \              .replace('L', 'LE')\\\n                .replace('R', 'ER')\\\n\
    \                .replace('E', 'EE')\\\n                .replace('C', 'EC')\\\n\
    \                .replace('E', 'EE')\\\n                .replace('X', 'EX')\\\n\
    \                .replace('G', 'EG')\\\n                .replace('L', 'EL')\\\n\
    \                .replace('A', 'EA')\\\n                .replace('K', 'EK')\\\n\
    \                .replace('N', 'EN')\\\n                .replace('S', 'SE')\\\n\
    \                .replace('E', 'EE')\\\n                .replace('F', 'FU')\\\n\
    \                .replace('P', 'PU')\\\n                .replace('R', 'ER')\\\n\
    \                .replace('U', 'UO')\\\n                .replace('N', 'NE')\\\n\
    \                .replace('E', 'EE')\\\n                .replace('G', 'GK')\\\n\
    \                .replace('O', 'OE')\\\n                .replace('U', 'UE')\\\n\
    \                .replace('L', 'EL')\\\n                .replace('A', 'EA')\\\n\
    \                .replace('T', 'ET')\\\n                .replace('E', 'EE')\\\n\
    \                .replace('A', 'EA')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('R', 'ER')\\\n                .replace('O', 'OE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\\n\
    \                .replace('I', 'IE')\\\n                .replace('I', 'IE')\\",
  "            >>> encode('Hi!')\n            '!iH'\n            >>> encode('I love\
    \ you!')\n            'oEWYI'\n            \n    \n    Args:\n        message:\
    \ The message to encode.\n    \n    Returns:\n        The encoded message.\n \
    \   \"\"\"\n    \n    # Convert to lowercase and remove punctuation\n    message\
    \ = message.lower().translate(str.maketrans(\"\", \"\", string.punctuation))\n\
    \    \n    # Convert all vowels into the letter that appears 2 places ahead\n\
    \    # of the vowel in the english alphabet\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    message = message.translate(str.maketrans(\"\", \"\", alphabet))\n    \n\
    \    # Find the positions of the vowels\n    vowels = message.count(\"a\")\n \
    \   \n    \n    \n    # Loop through the message and swap the letter with \n \
    \   # the letter that appears 2 places ahead.\n    for i,letter in enumerate(message):\n\
    \        if letter in alphabet:\n            if i == vowels:\n               \
    \ message = message.replace(letter, alphabet[alphabet.index(letter) + 1])\n  \
    \          else:\n                message = message.replace(letter, alphabet[alphabet.index(letter)\
    \ + 2])\n    \n    return message\n\n</cell>\n<cell>", "            \n    \"\"\
    \"\n    # code here \n\n    return encoded\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
