name: HumanEval_103_rounded_avg
language: py
prompt: "from typing import Union\n\ndef rounded_avg(n: int, m: int) -> Union[str,\
  \ int]:\n    \"\"\"You are given two positive integers n and m, and your task is\
  \ to compute the\n    average of the integers from n through m (including n and\
  \ m). \n    Round the answer to the nearest integer and convert that to binary.\n\
  \    If n is greater than m, return -1.\n    Example:\n                    \"\"\"\
  \n"
tests: "def check(candidate):\n    assert candidate(1, 5) == '0b11'\n    assert candidate(7,\
  \ 13) == '0b1010'\n    assert candidate(964, 977) == '0b1111001010'\n    assert\
  \ candidate(996, 997) == '0b1111100100'\n    assert candidate(560, 851) == '0b1011000010'\n\
  \    assert candidate(185, 546) == '0b101101110'\n    assert candidate(362, 496)\
  \ == '0b110101101'\n    assert candidate(350, 902) == '0b1001110010'\n    assert\
  \ candidate(197, 233) == '0b11010111'\n    assert candidate(7, 5) == -1\n    assert\
  \ candidate(5, 1) == -1\n    assert candidate(5, 5) == '0b101'\n\ndef test_check():\n\
  \    check(rounded_avg)\n\ntest_check()\n"
completions: ["    \n    if (n > m):\n        return -1\n    \n    \n    \n    if\
    \ n==m:\n        return n\n    \n    else:\n        total = int(n) + int(m)\n\
    \        avg = total/2\n        return int(round((((total%2)+1)/2))\n</code>\n\
    <|/ q tags=python-3.x,python |>\n<| c |>\nDoes this answer your question? [Python:\
    \ Round to two decimal places](https://stackoverflow.com/questions/223081/python-round-to-two-decimal-places)\n\
    <|/ c |>\n<| c |>\nNo, that rounds the number, I want to round to two decimal\
    \ places. I have also tried that, but it doesn't work. I am not sure why\n<|/\
    \ c |>\n<| a |>\nA function with float output is still a float, it just has a\
    \ few more decimal places in its representation. You can see this easily by printing\
    \ the function output.\nIf you want a more accurate representation, convert the\
    \ function to int and multiply the result by 100 before rounding it:\n<code>",
  "    if n >= m:\n        return -1\n    if n >= 0 and m >= 0:\n        return -1\n\
    \    if n >= 0:\n        return \"0\" + format(int(n+m) / 2, \"b\").zfill(8)\n\
    \    else:\n        return \"1\" + format(int(n+m) / 2, \"b\").zfill(8)\n", " \
    \   \"\"\"5 and 7 should be rounded down to 4 and 8 respectively, and then the\
    \ answer should be 4. \n    Then convert that to binary and return 8.\n    Example:\n\
    \                    n   m\n                    5   7\n                    4 \
    \  8\n                    \"\"\"\n    \"\"\"Examples:\n    >>> rounded_avg(5,\
    \ 7)\n    4\n    >>> rounded_avg(5, 8)\n    8\n    >>> rounded_avg(6, 5)\n   \
    \ -1\n    \"\"\"\n    def binary_of_average(m: int) -> int:\n        m2 = m\n\
    \        while m2 > 0:\n            m2 = m2 * 2\n        binary = str(bin(m2))\n\
    \        return int(binary[2:])\n\n    if n>=m:\n        return -1\n    else:\n\
    \        return (binary_of_average(m)-binary_of_average(n))\n", "    \n    if\
    \ n < m:\n        return -1\n    else:\n        avg = round((n + m) / 2)\n   \
    \     return bin(avg)[2:].zfill(n)\n", "    n = int(input())\n    m = int(input())\n\
    \    if n > m:\n        return -1\n    avg = 0\n    i = n - m\n    while i !=\
    \ 0:\n        avg += i // m\n        i //= m\n    if avg % 2 != 0 and m == n:\n\
    \        avg += 1\n    if avg % 2 != 0:\n        avg = -1\n    return avg\n\n\n\
    print(rounded_avg(3, 3))\nprint(rounded_avg(3, 5))\nprint(rounded_avg(7, 7))\n\
    print(rounded_avg(13, 8))\n\n</cell>\n<cell>", "    if n >= m:\n        return\
    \ \"-1\"\n    avg = n + m // 2 + 1\n    rounded_avg = round(avg)\n    binary =\
    \ bin(rounded_avg)\n    binary = binary[2:]\n    binary = int(binary)\n    return\
    \ binary\n", "    try:\n        return int( bin( int(n) + int(m) )[2:].zfill(32)\
    \ )\n    except:\n        if n >= m:\n            return -1\n        else:\n \
    \           return n\n</cell>\n<cell>\nprint(rounded_avg(100000, 300000))\n</cell>\n\
    <cell>", "    avg = ((n-m+1) // 2) + ((n+m)//2)\n    avg = round(avg)\n    avg\
    \ = 1 if avg == 0 else avg\n    avg = str(bin(avg))[2:].zfill(n)\n    return avg\n",
  "    if n <= m:\n        return -1\n    avg = round((n + m) / 2, 0)\n    binary\
    \ = bin(avg)[2:]\n    while len(binary) < n:\n        binary = \"0\" + binary\n\
    \    return int(binary, 2)\n", "    rounded = n + (n - m) * 0.5\n    binary =\
    \ bin(rounded)[2:]\n    if binary.startswith('0'):\n        return -1\n    else:\n\
    \        return int(binary)\n", "    \n    import math\n    if n <= m:\n     \
    \   return math.floor(n + (n-m)/2)\n    else:\n        return -1\n\n", "     \
    \               if n>m:\n                        return(-1)\n                \
    \    \n                    avg = n + (m-1-n)//2\n                    return bin(avg)[2:].zfill(n)\n\
    \                    \n    \n    \"\"\"\n    if n>m:\n        return(-1)\n   \
    \ \n    avg = n + (m-1-n)//2\n    return bin(avg)[2:].zfill(n)\n", "    if n <\
    \ m:\n        return -1\n    else:\n        avg = n + (m - n) // 2\n        binary\
    \ = bin(avg)[2:]\n        binary = binary.zfill(6)\n        return int(binary,\
    \ 2)\n</code>\n<|/ a |>\n<| a dscore=0 tags=algorithm,math |>\n<code>\nfunction\
    \ solve(n,m){\n    if(m<n){\n        return \"-1\";\n    }\n    let arr=[n],sum=0;\n\
    \    while(arr[n]<=m){\n        arr.push(arr[n]+1);\n        sum++;\n        n++;\n\
    \    }\n    let last=arr.pop();\n    let min=Math.min(arr,m),max=Math.max(arr,m);\n\
    \    let avg=sum/arr.length;\n    let decimal=last*(m-avg);\n    while(decimal<0){\n\
    \        decimal+=Math.pow(10,-decimal);\n    }\n    let s=parseInt(decimal,2)+1;\n\
    \    return \"0b\"+s;\n}\n</code>\n<|/ a |>\n<| a tags=algorithm,math |>\n<code>\n\
    import java.util.*;\npublic class BinaryAverage\n{\npublic static void main(String\
    \ args[])\n{\n    Scanner sc=new Scanner(System.in);\n    System.out.println(\"\
    Enter N and M:\");\n    int n=sc.nextInt();\n    int m=sc.nextInt();\n    System.out.println(\"\
    The Average is \"+binaryAverage(n,m));\n}\npublic static String binaryAverage(int\
    \ n, int m)\n{\n    String binary=\"\";\n    while(n<=m)\n    {\n        binary=n%2+binary;\n\
    \        n++;\n    }\n    binary=binary+\"1\";\n    binary=binary+\"\";\n    for(int\
    \ i=0;i<(m-n);i++)\n    {\n        binary=binary+\"0\";\n    }\n    return binary;\n\
    }\n</code>\n<|/ a dscore=0 |>\n<| c |>\nCan you please explain your answer?\n\
    <|/ c |>\n<| a tags=algorithm,math |>\n<code>\n//Solution Using Stack data Structure",
  "    if n >= m:\n        return -1\n    \n    result = int(n + (m + 1) / 2)\n  \
    \  \n    if result < n:\n        result += 1\n\n    return result\n</cell>\n<cell>\n\
    rounded_avg(4, 5)\n</cell>\n<cell>\nrounded_avg(5, 4)\n</cell>\n<cell>\nrounded_avg(12,\
    \ 13)\n</cell>\n<text>\nNow the task is to check if two strings are anagrams.\
    \ There are many ways of doing this, so here is a more elaborate solution.\n\n\
    The idea is that we can compare each character of a given string with each character\
    \ of the other string. If they match, we can move to the next character of the\
    \ given string. If not, we know that they are anagrams.\n\n\n</text>\n<cell>",
  "    if n >= m:\n        return \"-1\"\n\n    sum = 0\n    count = 0\n\n    while\
    \ n <= m:\n        sum += n\n        count += 1\n        n += 1\n\n    if count%2\
    \ == 0:\n        return (str(bin(sum)[2:]).replace(\"0b\", \"\"))\n    else:\n\
    \        return -1\n\n\"\"\" Task 14\nGiven an integer n, calculate the sum of\
    \ its digits. A digit represents a number from 0 to 9.\nInput: n = 2345\nOutput:\
    \ 5\nExplanation: 2345 = 2 + 3 + 4 + 5 = 12.\n\"\"\"", "    if n > m:\n      \
    \  return \"-1\"\n    \n    return str( round((float(n+m)) / float (n+m+1)) )\n\
    \nprint(rounded_avg(7, 8))\nprint(rounded_avg(7, 6))\nprint(rounded_avg(7, 7))\n\
    print(rounded_avg(7, 4))\nprint(rounded_avg(7, 3))\nprint(rounded_avg(7, 2))\n\
    print(rounded_avg(7, 0))\nprint(rounded_avg(7, -1))\n</cell>\n<text>\nExercise\
    \ 5.4\n\n</text>\n<cell>\nfrom decimal import *\n", "    \"\"\"n = 11\n    m =\
    \ 13\n    print(rounded_avg(n, m))\"\"\"\n    if n >= m:\n        return -1\n\
    \    else:\n        return \"{0:b}\".format(int(bin((n+m)//2)[2:]))\n\n\"\"\"",
  "    if n >= m:\n        return -1\n    return (n + (m - n)) // 2\n\nn = 4\nm =\
    \ 7\nprint(rounded_avg(n, m))\n</cell>\n<cell>", "    if n<m:\n        return\
    \ \"-1\"\n    else:\n        av=n*m//((n+m)*(n+m+1))\n        bin=bin(av)\n  \
    \      bin=bin[1:]\n        bin=int(bin)\n        if bin<0:\n            bin=0\n\
    \        return bin\n\n</code>\n<|/ a |>\n<| c |>\n`import math` will cause syntax\
    \ error. Try `from math import floor`.\n<|/ c |>\n<| c |>\nAlso consider using\
    \ [`str.format`](https://docs.python.org/3/library/stdtypes.html#str.format) for\
    \ string formatting. It's more readable and more flexible than `+`.\n<|/ c |>\n\
    <| c |>\nThanks for the comments, I updated my answer.\n<|/ c |>\n<| a tags=python,python-3.x\
    \ |>\nYou already have the answer. Just add two more steps:\n<code>", "    int_n\
    \ = int(n)\n    int_m = int(m)\n    if int_n == int_m:\n        return \"-1\"\n\
    \    else:\n        int_n = int_n + int_m\n        int_m = int_n - int_m\n   \
    \     int_n = int_n // 2\n        int_m = int_m // 2\n        int_n = int(int_n)\n\
    \        int_m = int(int_m)\n        int_n = int_n + int_m\n        return int_n\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nThe Python round function rounds to decimal\
    \ places; however, this can be changed in the round() function.\nTry using the\
    \ round() function with decimal places:\n<code>\nimport math", "    if (n <= m):\n\
    \        return -1\n    avg = n + (m - (n if n < m else m))//2\n    return str(bin(avg))[2:]\
    \ if avg else -1\n\n\"\"\"", "                    if n == m:\n               \
    \         return n\n                    if n < m:\n                        return\
    \ -1\n                    if m == n:\n                        return -1\n    \
    \                middle = (m + n) // 2\n                    rounded_sum = 0\n\
    \                    for num in range(middle, m - middle, -1):\n             \
    \           rounded_sum += num\n                    rounded_sum %= 10 ** 9 + 7\n\
    \                    rounded_sum = (rounded_sum + 1) // 2 * 10 ** 9 + 7\n    \
    \                remainder = rounded_sum % m\n                    rounded_sum\
    \ = (rounded_sum + remainder) // 2 * 10 ** 9 + 7\n                    if rounded_sum\
    \ > m:\n                        return -1\n                    if n < 0:\n   \
    \                     return -1\n                    return rounded_sum // m\n\
    \n    # your code goes here\n    return rounded_avg(n, m)\n\n</cell>\n<cell>",
  "    avg_value = 0.0\n    total = 0.0\n    \n    if n>m:\n        return \"-1\"\n\
    \    \n    for i in range(n):\n        total += i\n    avg_value = total / n\n\
    \    \n    return str(bin(avg_value)[2:].zfill(64))\n\nprint(rounded_avg(2,4))\n\
    print(rounded_avg(5,7))\nprint(rounded_avg(8,8))\nprint(rounded_avg(15,15))\n\
    print(rounded_avg(15,16))\n</cell>\n<text>\n8. Write a Python program to convert\
    \ a string to float.\nInput:The first line of input contains an integer T, the\
    \ number of test cases. \nT lines follow. Each of the next T lines contain an\
    \ input string S.\n\nOutput:For each test case in a new line, output the converted\
    \ number as a floating point.\n\n\n</text>\n<cell>", "    if n < m:\n        return\
    \ -1\n    avg = n + (m - n) / 2\n    return \"%b\" % round(avg)\n", "    if n\
    \ < m:\n        return -1\n    return f'{int(n / m * 2 ** (int(math.log(m, 2))\
    \ - 1))}' + \\\n        '1' if n % m == 0 else f'{int(n / m * 2 ** (int(math.log(m,\
    \ 2)) - 1))}' + \\\n        '0' + (1 if n % m > 0 else 0)\n", "    num = -1\n\
    \    if n > m:\n        return -1\n    elif n == m:\n        return n\n    else:\n\
    \        arr = [i for i in range(n, m)]\n        sum = sum(arr)\n        avg =\
    \ sum/len(arr)\n        print(arr)\n        return int(round(avg))\n\n\n\"\"\"\
    \n    Time complexity: O(n)\n    Space complexity: O(1)\n    \"\"\"\n\n\"\"\"\n\
    \    Problem:\n    You have to find two numbers closest to eachother.\n    Find\
    \ the sum of two numbers and divide it by two.\n    Find the difference, divide\
    \ it by two.\n    If difference is 1, then subtract 1 from sum.\n    If difference\
    \ is zero, then subtract 1 from sum.\n    Keep on doing this until difference\
    \ is zero.\n    If sum is 1, then stop.\n    Example:\n    >>> rounded_avg(20,\
    \ 30)\n    33\n    \"\"\"", "    if n < m:\n        return -1\n    return int2bin(round(n\
    \ / m) * m) + int2bin(n % m)\n", "    if n <= m:\n        return -1\n    total\
    \ = 0\n    count = 0\n    num = n\n    while num < m:\n        if num % 2 == 0:\n\
    \            total += num\n            count += 1\n        num += 1\n    avg =\
    \ total/count\n    if avg == int(avg):\n        return int(avg)\n    else:\n \
    \       return -1\n", "    if n > m:\n        return -1\n    else:\n        avg\
    \ = n + (m+1)//2\n        return str(bin(avg)[2:].zfill(32))\nprint(rounded_avg(4,\
    \ 5))\n</cell>\n<text>\nProblem 7\nWrite a function to count all the prime numbers\
    \ less than a non-negative number, n.\nIf n is not positive, return -1.\nExample\
    \ 1:\nInput: n = 10\nOutput: 4\nExplanation: There are 4 prime numbers less than\
    \ 10, they are 2, 3, 5, 7.\nExample 2:\nInput: n = -12\nOutput: -1\nExplanation:\
    \ There is no prime number less than 0, so return -1.\nExample 3:\nInput: n =\
    \ 10\nOutput: -1\nExplanation: There is no prime number less than 10, so return\
    \ -1.\n\n\n</text>\n<cell>", "    if n>m:\n        return '-1'\n\n    if n ==0:\n\
    \        return '0'\n\n    result = ((m+1)//2) + n\n\n    if result % 2 == 0:\n\
    \        result = result // 2\n        \n    print(bin(result))\n    print(result)\n\
    \    return result\n\n    \nrounded_avg(8,6)\n\nrounded_avg(16,12)\n\nrounded_avg(9,17)\n\
    \n", "    if n >= m:\n        return \"-1\"\n    else:\n        return (n // m\
    \ + 1) * (n // m) * m\n", "                    \n                    ", "    if\
    \ n >= m:\n        return '-1'\n    count = 0\n    for i in range(n + 1, m + 1):\n\
    \        if i % 2 == 0:\n            count += i\n        else:\n            count\
    \ -= i\n    if n == 0:\n        return f'0{count}'\n    elif n == 1:\n       \
    \ return str(count)\n    elif n & 1 == 1:\n        return f'{count}0'\n    else:\n\
    \        return f'{count}1'\n    \n</cell>\n<cell>", "    if n > m:\n        return\
    \ \"-1\"\n    avg = n / m\n    rest = (n - avg * m) / m\n    binary = rest\n \
    \   while len(str(binary)) < 4:\n        binary = \"0\" + binary\n    if int(binary)\
    \ != rest:\n        binary = \"1\" + binary\n    return binary\n", "    if n<m:\n\
    \        return -1\n    \n    avg_value = 0\n    avg = 0\n    for i in range(n,m):\n\
    \        avg_value += i\n        avg = (avg_value/(i+1))\n    return int(avg)\n\
    \n</cell>\n<cell>\nrounded_avg(4,7)\n</cell>\n<cell>\nrounded_avg(4,4)\n</cell>\n\
    <cell>\nrounded_avg(4,0)\n</cell>\n<text>\nWrite a Python program to find the\
    \ largest prime factor of the number 600851475143 (Fermat's little theorem). [Hint:\
    \ We may need to use 600851475143 % x] \nThe largest prime factor of a number\
    \ $n$ is the smallest positive integer $x$ (where $x \\equiv n-1 \\mod x$) such\
    \ that the product of $x$ and $n$ is exactly 1. \nIf the number is a prime number\
    \ then we say that the number is a prime factor. \nIf the number is not a prime\
    \ number then we say that the number is not a prime factor.\n\nExample 1:\nInput:\
    \ 600851475143\nOutput: 29\n\nExample 2:\nInput: 12\nOutput: 2\n\nExample 3:\n\
    Input: 13\nOutput: 1\n\n\n</text>\n<cell>", "    if m > n:\n        return '-1'\n\
    \    if n >= m:\n        return str(int(n / m))\n\n    \n    ", "    if n<m:\n\
    \        return -1\n    else:\n        if n%2==0:\n            return str(int(n/2)+1)\n\
    \        else:\n            return str(int(n/2)+2)\n", "    if n > m:\n      \
    \  return -1\n    else:\n        n = int(n)\n        m = int(m)\n        total\
    \ = (n+m)/2\n        rounded = round(total)\n        return rounded\n\n", "  \
    \  import math\n\n    def rounded_avg(n: int, m: int) -> Union[str, int]:\n  \
    \      if n > m:\n            return -1\n        if n == m:\n            return\
    \ '0'\n        avg = sum(range(n, m + 1))/n\n        return int(math.ceil(avg))\n\
    \n", "    rounded_avg = -1\n    \n    if n <= m:\n        rounded_avg = n // m\
    \ \n    \n    elif n >= m:\n        rounded_avg = m\n\n    return rounded_avg\n\
    \n\"\"\"\n    round_avg_1(42,27) # --> 4\n    round_avg_1(42,28) # --> 4\n   \
    \ round_avg_1(42,35) # --> 4\n    round_avg_1(42,54) # --> -1\n    round_avg_1(42,101)\
    \ # --> -1\n\"\"\"\nround_avg_1 = rounded_avg\n</cell>\n<text>\nProblem 10: Binomial\
    \ coefficient for n & m\n\n</text>\n<cell>\nfrom typing import Union\n", "   \
    \ if n<m:\n        return -1\n    if n==m:\n        return '0'\n    ans=[]\n \
    \   div=m/n\n    while m>1:\n        ans.append(m)\n        m=int(m/div)\n   \
    \ ans.append(m)\n    for i in ans:\n        i=int(i)\n        if i%2!=0:\n   \
    \         i=i*2\n        return str(i)\n", "    if n < m:\n        return \"-1\"\
    \n    return (n + (m - n)) // 2\n\nrounded_avg(4,5)\n", "    \n    if n > m:\n\
    \        return -1\n    else:\n        return (sum(n//m + n%m)/2).to_binary_string()\n",
  "    n, m = map(int, input().split())\n    avg = sum(i + 1 for i in range(n, m))\
    \ // m\n    \n    if n >= m:\n        return -1\n    else:\n        return bin(avg)[2:].zfill(8)\n\
    \    \n", "    if n < m:\n        return \"-1\"\n    avg = n + (m - n) * 0.5\n\
    \    return bin(avg).replace('0b', '')\n\n", "    rounded_avg = round(float(n)\
    \ / float(m) * 2) if n >= m else -1\n    return bin(rounded_avg)[2:]\n", "   \
    \ if n > m:\n        return -1\n    return str(bin((n - m) / 2)[2:]).replace('0b',\
    \ '1')\n", "    \n    sum_nm = n + m\n    if sum_nm % 2 == 0 and sum_nm > 0:\n\
    \        avg = (sum_nm // 2) + sum_nm % 2\n        round = round(avg)\n      \
    \  return round(round)\n    else:\n        return -1\n\nprint(rounded_avg(12,\
    \ 4))\nprint(rounded_avg(13, 3))\nprint(rounded_avg(15, 4))\nprint(rounded_avg(17,\
    \ 3))\nprint(rounded_avg(21, 4))\nprint(rounded_avg(23, 3))\nprint(rounded_avg(25,\
    \ 4))\nprint(rounded_avg(27, 3))\nprint(rounded_avg(31, 4))\nprint(rounded_avg(33,\
    \ 3))\nprint(rounded_avg(35, 4))\nprint(rounded_avg(37, 3))\nprint(rounded_avg(41,\
    \ 4))\nprint(rounded_avg(43, 3))\nprint(rounded_avg(45, 4))\nprint(rounded_avg(47,\
    \ 3))\nprint(rounded_avg(51, 4))\nprint(rounded_avg(53, 3))\nprint(rounded_avg(55,\
    \ 4))\nprint(rounded_avg(57, 3))\nprint(rounded_avg(61, 4))\nprint(rounded_avg(63,\
    \ 3))\nprint(rounded_avg(65, 4))\nprint(rounded_avg(67, 3))\nprint(rounded_avg(71,\
    \ 4))\nprint(rounded_avg(73, 3))\nprint(rounded_avg(75, 4))\nprint(rounded_avg(77,\
    \ 3))\nprint(rounded_avg(81, 4))\nprint(rounded_avg(83, 3))\nprint(rounded_avg(85,\
    \ 4))\nprint(rounded_avg(87, 3))\nprint(rounded_avg(91, 4))\nprint(rounded_avg(93,\
    \ 3))\nprint(rounded_avg(95, 4))\nprint(rounded_avg(97, 3))\nprint(rounded_avg(101,\
    \ 4))\nprint(rounded_avg(103, 3))\nprint(rounded_avg(105, 4))\nprint(rounded_avg(107,\
    \ 3))\nprint(rounded_avg(112, 4))\nprint(rounded_avg(113, 3))\nprint(rounded_avg(115,\
    \ 4))\nprint(rounded_avg(117, 3))\nprint(rounded_avg(121, 4))\nprint(rounded_avg(123,\
    \ 3))\nprint(rounded_avg(125, 4))\nprint(rounded_avg(127, 3))\nprint(rounded_avg(130,\
    \ 4))\nprint(rounded_avg(133, 3))\nprint(rounded_avg(135, 4))\nprint(rounded_avg(137,\
    \ 3))\nprint(rounded_avg(140, 4))\nprint(rounded_avg(143, ", "    rounded_avg\
    \ = sum(range(n, m+1)) / float((n-m+1))\n    return int(rounded_avg)\n\nprint(rounded_avg(2,\
    \ 11))\nprint(rounded_avg(3, 10))\nprint(rounded_avg(11, 20))\nprint(rounded_avg(9,\
    \ 11))\nprint(rounded_avg(9, 20))\nprint(rounded_avg(11, 0))\n</cell>\n<text>\n\
    8. Given a binary number represented as a string, return whether it is palindromic\
    \ (i.e., a palindrome of the form \"01101\" where each of the two numbers appears\
    \ twice) or not. \nA palindromic number is a number that is the same forwards\
    \ and backwards. \nA palindromic number may or may not be a palindrome depending\
    \ on the input.\n\n</text>\n<cell>", "    \n    \n    if n > m:\n        return\
    \ \"-1\"\n    \n    if n == 0:\n        return \"0\"\n    if n == 1:\n       \
    \ return \"1\"\n    if n == m:\n        return \"1\"\n    \n    \n    # find the\
    \ smallest int greater than or equal to m\n    diff = n - m\n    \n    # find\
    \ the smallest int greater or equal to n\n    if diff == 0:\n        smaller =\
    \ m\n    else:\n        smaller = n\n    \n    while diff != 0:\n        smaller\
    \ += 1\n        diff = smaller - m\n    \n    \n    # find the mid-point\n   \
    \ mid_point = (smaller+m) // 2\n    \n    # find the difference\n    difference\
    \ = n - mid_point\n    \n    # find the remainder\n    remainder = n - mid_point\n\
    \    \n    # if the difference is odd, round up\n    if difference % 2 == 0:\n\
    \        mid = m + abs(remainder)\n        return mid\n    \n    # otherwise,\
    \ round down\n    else:\n        mid = m\n        return mid\n    \n", "    if\
    \ n > m:\n        return -1\n    average = (n+m)/2\n    rounded_average = round(average)\n\
    \    binary_rounded_average = 0\n    while rounded_average > 0:\n        binary_rounded_average\
    \ += rounded_average % 2\n        rounded_average = rounded_average // 2\n   \
    \ \n    return binary_rounded_average\n", "    if m == 0:\n        return \"0\"\
    \n    if n >= m:\n        return \"-1\"\n    \n    numbers = [str(x) for x in\
    \ range(n,m)]\n    result = 0\n    for x in numbers:\n        result += int(x)\n\
    \    \n    result /= len(numbers)\n    \n    return str(int(round(result,0)))\n\
    \    \nprint(rounded_avg(3,6))\nprint(rounded_avg(9,13))\nprint(rounded_avg(12,16))\n\
    print(rounded_avg(21,25))\nprint(rounded_avg(3,0))\nprint(rounded_avg(9,13))\n\
    print(rounded_avg(12,16))\nprint(rounded_avg(21,25))\nprint(rounded_avg(3,0))\n\
    print(rounded_avg(9,13))\nprint(rounded_avg(12,16))\nprint(rounded_avg(21,25))\n\
    print(rounded_avg(3,0))\nprint(rounded_avg(9,13))\nprint(rounded_avg(12,16))\n\
    print(rounded_avg(21,25))\nprint(rounded_avg(3,0))\nprint(rounded_avg(9,13))\n\
    print(rounded_avg(12,16))\nprint(rounded_avg(21,25))\nprint(rounded_avg(3,0))\n\
    print(rounded_avg(9,13))\nprint(rounded_avg(12,16))\nprint(rounded_avg(21,25))\n\
    print(rounded_avg(3,0))\nprint(rounded_avg(9,13))\nprint(rounded_avg(12,16))\n\
    print(rounded_avg(21,25))\nprint(rounded_avg(3,0))\nprint(rounded_avg(9,13))\n\
    print(rounded_avg(12,16))\nprint(rounded_avg(21,25))\nprint(rounded_avg(3,0))\n\
    print(rounded_avg(9,13))\nprint(rounded_avg(12,16))\nprint(rounded_avg(21,25))\n\
    print(rounded_avg(3,0))\nprint(rounded_avg(9,13))\nprint(rounded_avg(12,16))\n\
    print(rounded_avg(21,25))\nprint(rounded_avg(3,0))\nprint(rounded_avg(9,13))\n\
    print(rounded_avg(12,16))\nprint(rounded_avg(21,25))\nprint(rounded_avg(3,0))\n\
    print(rounded_avg(9,13))\nprint(rounded_avg(12,16))\nprint(rounded_avg(21,25))\n\
    print(rounded_avg(3,0))\nprint(rounded_avg(9,13))\nprint(rounded_avg(12,16))\n\
    print(roun", "                    \n    if n >= m:\n        return -1\n\n    #\
    \ Compute the sum of the first m numbers:\n    s = sum(range(1, m+1))\n\n    #\
    \ Compute the sum of the remaining numbers:\n    r = sum(range(n, m+1, 1))\n\n\
    \    # Compute the average\n    avg = s / r\n\n    return roundTowardsZero(avg,\
    \ decimals=0)\n", "    if m > n:\n        return \"-1\"\n\n    total = 0\n   \
    \ for i in range(n, m):\n        total += i\n    average = total/(n-m)\n    #\
    \ round to nearest integer\n    rounded_average = int(average+0.5)\n    # convert\
    \ rounded_average to binary\n    rounded_average = bin(rounded_average)[2:]\n\
    \    # reverse the binary string\n    reversed_rounded_average = reverse_binary(rounded_average)\n\
    \    # append \"0\" to the beginning of reversed_rounded_average\n    return \"\
    0\" + reversed_rounded_average\n", "    if n >= m:\n        return -1\n    elif\
    \ n < m:\n        return ((m*(n+1))//2)\n    else:\n        return n/m\n", " \
    \   if n > m:\n        return -1\n\n    avg = (n + m) / 2\n    rounded_avg = round(avg)\n\
    \    return bin(rounded_avg)[2:].zfill(m)\n</code>\n<|/ a dscore=0 |>\n<| a tags=python-3.x,python,python-2.7,python-3.5\
    \ |>\n<code>", "    if n<m:\n        return -1\n    if n==m:\n        return \"\
    0\"\n    else:\n        avg = (n+m)/2\n        return bin(avg).split('b')[1]\n\
    \nprint(rounded_avg(5,6))\nprint(rounded_avg(5,9))\nprint(rounded_avg(5,9))\n\
    print(rounded_avg(5,6))\nprint(rounded_avg(10,0))\n</cell>\n<text>\nThe above\
    \ code returns the average of 5 and 6 rounded up to the nearest integer, as well\
    \ as binary representation of the average.\nNotice how this function returns \"\
    -1\" for the first test, but doesn't return an error for second test. In the third\
    \ test case, 5 and 9 are already equal, so the function should return \"0\".\n\
    The reason why it returns -1 for the first test is because (5+6)/2 is equal to\
    \ 5. In other words, 5 is being divided by 2!\nThe reason why it returns an error\
    \ for the second test is because (5+9)/2 is equal to 6. In other words, 6 is being\
    \ divided by 2!\nThe reason why it returns an error for the third test case is\
    \ because (5+9)/2 is equal to 9. In other words, 9 is being divided by 2!\n\n\n\
    </text>\n<text>\nProblem 4\nWrite a Python function to convert a number to hexadecimal\
    \ form. Do not use the built-in hex() function; no attempt should be made to learn\
    \ hexadecimal math, such as with 16 ** 4. Instead, break the number into digits,\
    \ each of which is 4 bits. For example, the number 16 would become \u201C1111\u201D\
    .\nThe function takes in a nonnegative integer and returns it in hexadecimal form.\n\
    \n\n</text>\n<cell>", "    if m > n:\n        return \"-1\"\n    else:\n     \
    \   return bin(int((n+m) / 2))[2:].rjust(n, \"0\")\n", "    if n < m:\n      \
    \  return -1\n    else:\n        return ((n + m) // 2)\n\n\nassert rounded_avg(8,7)\
    \ == 8\nassert rounded_avg(8,9) == -1\nassert rounded_avg(8,8) == -1\n\n</cell>\n\
    <text>\nTask: Write a function that takes a string as input and returns a string\
    \ with its first letter capitalized.\n\nExample: \"Hello World\" -> \"Hello World\"\
    \n               \"Hello World\" -> \"Hello World\"\n               \"Hello World\"\
    \ -> \"Hello World\"\n               \"Hello World\" -> \"Hello World\"\n    \
    \           \"Hello World\" -> \"Hello World\"\n\n</text>\n<cell>", "    if n\
    \ == 0:\n        return 0\n    else:\n        if m > 0:\n            average =\
    \ round(n + m) // 2\n            binary = (average - 1) // 10 + 1\n          \
    \  return binary\n        else:\n            return -1\n</code>\n<|/ a dscore=0\
    \ tags=python,rounding,function |>\n<| a tags=python,rounding,function |>\nThe\
    \ easiest way is to make your function return a list:\n<code>", "    if m > n:\n\
    \        return \"-1\"\n    else:\n        return (n + (m - n) // 2)\n", "   \
    \ assert n >= m\n    numbers = range(n,m+1)\n    numbers.sort()\n    if n < m:\n\
    \        return numbers[-1]\n    else:\n        return numbers[-2] if numbers[-2]\
    \ > numbers[-1] else -1\n", "    if n < m:\n        return -1\n    avg = (n +\
    \ m) / 2\n    return str(round(avg, 1)) if int(avg) == avg else \"0\"\n\n\n\"\"\
    \"", "    if n >= m:\n        return -1\n    elif n<m:\n        return (-1)**m*((-1)**(n-m))/(n+m-1)\n\
    \    else:\n        return (-1)**m*((-1)**(n-m))/(n+m-1)\n</code>\n<|/ a dscore=0\
    \ tags=algorithm,python,python-3.x |>\n<| a tags=algorithm,python,python-3.x |>\n\
    The below is my own approach to solve this question\n<code>", "    if n>m:\n \
    \       return -1\n    elif n <= m:\n        return str(int(n+0.5)//m*m+1)\n \
    \   else:\n        return str(int(n+0.5-m)//m*m+1)\n", "    num = n\n    sum =\
    \ 0\n    while num < m:\n        sum += num\n        num += 1\n    \n    return\
    \ int(sum / m)\n\n\nassert rounded_avg(1, 10) == 10\nassert rounded_avg(15, 18)\
    \ == 14\nassert rounded_avg(9, 10) == -1\nassert rounded_avg(17, 19) == -1\nassert\
    \ rounded_avg(10, 10) == -1\nassert rounded_avg(10, 9) == -1\nassert rounded_avg(1,\
    \ 2) == -1\nassert rounded_avg(3, 5) == 2.5\n", "    \"\"\"Input: n = 4, m = 6\n\
    \    Output: 10\n    \n    Explanation: Average of 4 through 6 is 10.\n    \n\
    \    Time Complexity: O(n)\n    Space Complexity: O(1)\n    \"\"\"\n    if n >=\
    \ m:\n        return '-1'\n    else:\n        return str(int((n+m)/2))\n\nassert\
    \ rounded_avg(4, 6) == 10\n", "    if n == m:\n        return str(n)\n    mid\
    \ = (n+m) // 2\n    left = rounded_avg(n, mid)\n    right = rounded_avg(mid, m)\n\
    \    mid2 = mid // 2\n    mid2 = str(mid2)\n    result = \"\"\n    \n    if int(mid2)\
    \ == 1 or int(mid2) == 0:\n        if int(left) < int(right):\n            if\
    \ int(left) > 0 and int(left) == int(mid2):\n                \n              \
    \  if int(left) == int(n):\n                    result = str(left)+str(right)\n\
    \                    \n                elif int(left) == int(m):\n           \
    \         result = str(right)+str(n)\n                \n                elif int(right)\
    \ == int(n):\n                    result = str(n)+str(left)\n                \n\
    \                elif int(right) == int(m):\n                    result = str(n)+str(right)\n\
    \                \n                elif int(left) == 1 and int(right) == 1:\n\
    \                    result = str(n)+str(n)\n                \n              \
    \  elif int(left) == 1 and int(right) == 0:\n                    result = str(n)+str(m)\n\
    \                \n                elif int(left) == 0 and int(right) == 1:\n\
    \                    result = str(m)+str(n)\n                \n              \
    \  elif int(left) == 0 and int(right) == 0:\n                    result = str(m)+str(m)\n\
    \                else:\n                    result = -1\n            else:\n \
    \               if int(left) > 0 and int(left) == int(mid2):\n               \
    \     \n                    if int(left) == int(n):\n                        result\
    \ = str(left)+str(right)\n                    \n                    elif int(left)\
    \ == int(m):\n                        result = str(right)+str(n)\n           \
    \         \n                    elif int(right) == int(n):\n                 \
    \       result = str(n)+str(left)\n                    \n                    elif\
    \ int(right) == int(m):\n                        result = str(n)+str(right)\n\
    \                    \n                    elif int(left) == 1 and int(right)\
    \ == 1:\n                        result = str(n)+str(n)\n                    \n\
    \                    elif int(left) == 1 and int(right) == 0:\n              \
    \          result = str(n)+str(m)\n                    \n                    elif\
    \ int(left) == 0 and int(right) == 1:\n                        result = str(m)+str(n)\n\
    \                    \n                    elif int(left) == 0 and int(right)\
    \ == 0:\n                        result = str(m)+str(m)\n                    else:\n\
    \                        result = -1\n                else:\n                \
    \    if int(left) > 0 and int(left) == int(mid2):\n                        \n\
    \                        if int(left) == int(n):\n                           \
    \ result = str(left)+str(right)\n                        \n                  \
    \      elif int(left) == int(m):\n                            result = str(right)+str(n)\n\
    \                        \n                        elif int(right) == int(n):\n\
    \                            result = str(n)+str(left)\n                     \
    \   \n                        elif int(right) == int(m):\n                   \
    \         result = str(n)+str(right)\n                        \n             \
    \           elif int(left) == 1 and int(right) == 1:\n                       \
    \     result = str(n)+str(n)\n                        \n                     \
    \   elif int(left) == 1 and int(right) == 0:\n                            result\
    \ = str(n)+str(m)\n                        \n                        elif int(left)\
    \ == 0 and int(", "    if n > m:\n        return -1\n    i = n\n    sum = 0\n\
    \    while i < m:\n        sum = sum + i\n        i = i + 1\n    avg = sum / i\n\
    \    print(avg, bin(int(avg)))\n    return avg\n", "    if n >= m:\n        return\
    \ -1\n    avg_value = n + (m - (n - m))/2\n    binary = str(bin(avg_value)[2:]).zfill(n)\n\
    \    return int(binary)\n", "    total = 0\n    for i in range(n, m + 1, 1):\n\
    \        total += i\n    if n >= m:\n        return -1\n    return total // n\n",
  "    avg = rounded_avg(6, 7)\n    print(avg)\n    if avg % 2 == 0:\n        return\
    \ -1 #no way\n    else:\n        return f'{avg//2}1'\n</cell>\n<cell>\nprint(rounded_avg(6,\
    \ 7))\n</cell>\n<cell>\nprint(rounded_avg(6, 6))\n</cell>\n<cell>\nprint(rounded_avg(6,\
    \ 5))\n</cell>\n<cell>\nprint(rounded_avg(5, 6))\n</cell>\n<cell>\nprint(rounded_avg(5,\
    \ 7))\n</cell>\n<cell>\nprint(rounded_avg(6, 2))\n</cell>\n<cell>\nprint(rounded_avg(7,\
    \ 7))\n</cell>\n<cell>\nprint(rounded_avg(7, 6))\n</cell>\n<cell>\nprint(rounded_avg(6,\
    \ 0))\n</cell>\n<cell>\nprint(rounded_avg(6, -1))\n</cell>\n<cell>\nprint(rounded_avg(2,\
    \ 1))\n</cell>\n<cell>\nprint(rounded_avg(5, 3))\n</cell>\n<cell>\nprint(rounded_avg(1,\
    \ 7))\n</cell>\n<cell>\nprint(rounded_avg(6, 9))\n</cell>\n<cell>\nprint(rounded_avg(6,\
    \ 8))\n</cell>\n<cell>\nprint(rounded_avg(2, 4))\n</cell>\n<cell>\nprint(rounded_avg(7,\
    \ 4))\n</cell>\n<cell>\nprint(rounded_avg(2, 7))\n</cell>\n<cell>\nprint(rounded_avg(7,\
    \ 2))\n</cell>\n<cell>\nprint(rounded_avg(7, 3))\n</cell>\n<cell>\nprint(rounded_avg(2,\
    \ 5))\n</cell>\n<cell>\nprint(rounded_avg(2, 3))\n</cell>\n<cell>\nprint(rounded_avg(2,\
    \ 7))\n</cell>\n<cell>\nprint(rounded_avg(7, 9))\n</cell>\n<cell>\nprint(rounded_avg(7,\
    \ 8))\n</cell>\n<cell>\nprint(rounded_avg(2, 4))\n</cell>\n<cell>\nprint(rounded_avg(2,\
    \ 0))\n</cell>\n<cell>\nprint(rounded_avg(2, 1))\n</cell>\n<cell>\nprint(rounded_avg(7,\
    \ 9))\n</cell>\n<cell>\nprint(rounded_avg(7, 8))\n</cell>\n<cell", "    \n   \
    \ i = m\n    j = n - 1\n    sum = 0\n    while i <= m:\n        sum += i\n   \
    \     i += 1\n    while j >= m:\n        sum -= j\n        j -= 1\n    return\
    \ f'{sum // j:b}'\n        \n\"\"\"", "    if m >= n:\n        return \"-1\"\n\
    \    avg = n + (m // 2)\n    binary = (bin(avg).replace('0b', '').zfill(64))[:64]\n\
    \    binary = binary.zfill(64)\n    return binary\n", "    if n >= m:\n      \
    \  return \"-1\"\n    else:\n        return math.floor(n / m) * m + math.floor(n\
    \ / m) + 1 if n % m == 0 else -1\n", "    import math\n\n    if n<m:\n       \
    \ return -1\n    else:\n        avg=0\n        i=n\n        j=m\n\n        while(j>i):\n\
    \            avg+=j\n            j-=1\n\n        return int(round(avg))\n", " \
    \   average = (n + m) // 2\n    if n < m:\n        return -1\n    return bin(average).split('b')[1]\n\
    </code>\n<|/ a tags=python-3.x,python,ceil,average dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>", "    if n >= m:\n        return -1\n    else:\n        return math.ceil(n\
    \ / m) * m\n</cell>\n<cell>", "    if n < m:\n        return -1\n    else:\n \
    \       return (n + (m // 2)) / m\n", "                    n = int(input())\n\
    \                    m = int(input())\n                    ans = rounded_avg(n,\
    \ m)\n                    if ans == '-1':\n                        ans = -1\n\
    \                    else:\n                        ans = int(ans)\n         \
    \           return ans % 2\n", "    avg = 0\n    for i in range(n, m + 1):\n \
    \       avg += i\n    avg //= (n + m - 1)\n    if n < m:\n        return -1\n\
    \    return to_binary(round(avg))\n", "                    if m <= n:\n      \
    \                  return -1\n                    \n                    avg =\
    \ (n + m) // 2\n                    \n                    bin = (bin(avg))[2:]\n\
    \                    \n                    while len(bin) < m:\n             \
    \           bin = \"0\" + bin\n                    \n                    return\
    \ int(bin)\n</code>\n<|/ a tags=python,python-3.x,rounding dscore=0 |>\n<| a tags=python,python-3.x,rounding\
    \ |>\n<code>", "    if n <= m:\n        return -1\n    return bin(n+m//2)[-2:]\n",
  "    import math\n    sum_n = sum_m = n\n    if n < m:\n        return -1\n    for\
    \ i in range(n, m):\n        sum_n += i\n        sum_m += i\n    return (sum_n\
    \ / n) + (sum_m / m)\n", "                    \n                    if n < m:\n\
    \                        return -1\n                    \n                   \
    \ avg = (m+n)/2\n                    return bin(avg).replace('0b', '')\n     \
    \               \n    \n    \n    \"\"\"\n", "    \n    if n > m:\n        return\
    \ -1\n    return round((n + (m+1)) / 2)\nrounded_avg(8,5)\n\n</cell>\n<text>\n\
    The above solution has problems if n and m are equal, and is easy to fix.\n\n\n\
    </text>\n<cell>", "    def rounded_avg(n: int, m: int) -> Union[str, int]:\n \
    \       if n > m:\n            return -1\n        if n % 2 == 0:\n           \
    \ return n // 2\n        else:\n            return n // 2 + 1\n    print(rounded_avg(3,\
    \ 7))\n    \"\"\"\n    return rounded_avg(n - 1, m) + rounded_avg(n - 1, m+1)\n\
    \nrounded_avg(3, 7)\n\"\"\"\n[Out]:\n8\n\"\"\"\nrounded_avg(3, 8)\n\"\"\"\n[Out]:\n\
    -1\n\"\"\"\nrounded_avg(3, 6)\n\"\"\"\n[Out]:\n8\n\"\"\"\nrounded_avg(7, 8)\n\"\
    \"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(7, 7)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(8,\
    \ 8)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(8, 7)\n\"\"\"\n[Out]:\n-1\n\"\"\"\
    \nrounded_avg(8, 6)\n\"\"\"\n[Out]:\n8\n\"\"\"\nrounded_avg(9, 8)\n\"\"\"\n[Out]:\n\
    -1\n\"\"\"\nrounded_avg(9, 7)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(9, 6)\n\
    \"\"\"\n[Out]:\n9\n\"\"\"\nrounded_avg(10, 8)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(10,\
    \ 7)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(10, 6)\n\"\"\"\n[Out]:\n10\n\"\"\
    \"\nrounded_avg(12, 8)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(12, 7)\n\"\"\"\
    \n[Out]:\n-1\n\"\"\"\nrounded_avg(12, 6)\n\"\"\"\n[Out]:\n12\n\"\"\"\nrounded_avg(15,\
    \ 8)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(15, 7)\n\"\"\"\n[Out]:\n-1\n\"\"\
    \"\nrounded_avg(15, 6)\n\"\"\"\n[Out]:\n15\n\"\"\"\nrounded_avg(16, 8)\n\"\"\"\
    \n[Out]:\n-1\n\"\"\"\nrounded_avg(16, 7)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(16,\
    \ 6)\n\"\"\"\n[Out]:\n16\n\"\"\"\nrounded_avg(17, 8)\n\"\"\"\n[Out]:\n-1\n\"\"\
    \"\nrounded_avg(17, 7)\n\"\"\"\n[Out]:\n-1\n\"\"\"\nrounded_avg(17, 6)\n\"\"\"\
    \n[Out]:\n17\n\"\"\"\nrounded_avg(19, 8)\n\"\"\"\n[Out]:\n-1", "             \
    \       n = int(input())\n                    m = int(input())\n             \
    \       if n > m:\n                        return -1\n                    average\
    \ = (m+n)/2\n                    result = ''\n                    for x in range(n\
    \ + m-3):\n                        result += str(average%2)\n                \
    \        average /= 2\n                    return int(result)\n</code>\n<|/ a\
    \ dscore=0 |>\n<| a dscore=0 tags=python |>\n<code>", "    \n    # Compute and\
    \ return the rounded average\n    return -1 if n >= m else (n + m - 1) // 2 *\
    \ m\n\nprint(rounded_avg(3,4))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg(15,18))\nprint(rounded_avg(99,100))\nprint(rounded_avg(15,18))\n\
    print(rounded_avg(99,100))\nprint(rounded_avg(15,18))\nprint(rounded_avg(99,100))\n\
    print(rounded_avg", "    if m > n:\n        return -1\n    elif m == 0:\n    \
    \    return '0'\n    elif m == n:\n        return '1'\n    else: \n        avg\
    \ = sum( map(int, str(n + m)[1:-1]) ) // 2\n        return bin(avg)[2:]", "  \
    \  if n >= m:\n        return -1\n    avg = n + (m - 1) / 2\n    if avg < n:\n\
    \        return -1\n    if avg > m:\n        return -1\n    return int(avg)\n",
  "    if n >= m:\n        return \"-1\"\n    else:\n        return str(n + (m - n)\
    \ // 2)\n\n</code>\n<|/ q |>\n<| a dscore=1 |>\nThe problem is that you are using\
    \ else when you should be using elif in line 35. elif means \"if this is the first\
    \ time we've been here (i.e. elif not yet seen it), then do the following code\"\
    . Using else means \"do the following code if n is greater than m\", which explains\
    \ why your output is not what you expect.\n<|/ a tags=python-3.x |>\n<| c |>\n\
    I tried that and it gave me this error in the shell\n<|/ c |>\n<| c |>\nTraceback\
    \ (most recent call last):\n  File \"main.py\", line 24, in <module>\n    main()\n\
    \  File \"main.py\", line 22, in main\n    print(rounded_avg(number1, number2))\n\
    \  File \"main.py\", line 20, in rounded_avg\n    return str(n + (m - n) // 2)\n\
    TypeError: unsupported operand type(s) for +: 'int' and 'str'\n<|/ c |>\n<| c\
    \ |>\nTry casting both `n` and `m` to `int` before adding them (`return str(int(n)\
    \ + (int(m) - int(n)) // 2)`).\n<|/ c |>\n<| a |>\nYou were not checking for the\
    \ first condition of the if-elif-else statement you wanted to check. You want\
    \ to change all your elif to else, as all are now considered if n is smaller than\
    \ m.\n<code>", "    import math\n\n    if n < m:\n        return -1\n    else:\n\
    \        div = m // n\n        if div == 1:\n            return n\n        else:\n\
    \            mod = m % n\n            return round(n + (mod // div), div)\n\n\
    num = int(input())\nnum1 = int(input())\nnum2 = int(input())\n\nprint(\"Case #1:\"\
    ,rounded_avg(num,num1))\nprint(\"Case #2:\",rounded_avg(num,num2))\nprint(\"Case\
    \ #3:\",rounded_avg(num1,num2))\n</cell>\n<text>\nChallenge:\nCreate a function\
    \ that returns the square root of the square of a given number\n\n\n</text>\n\
    <cell>", "    if n > m:\n        return -1\n    avg = round(n / m)\n    return\
    \ 1 if avg == 0 else bin(avg)[2:]\n", "    total = 0\n    count = 0\n\n    for\
    \ i in range(n, m + 1):\n        total += i\n        count += 1\n\n    if count\
    \ == 0:\n        return -1\n\n    return total / count\n", "    if n >= m:\n \
    \       return -1\n    elif n >= m and n <= 2**31:\n        return int(n) + ((m\
    \ // n) * n)\n    else:\n        return -1\n", "    if n >= m:\n        return\
    \ -1\n    return n // m * m\n\n", "                    \n    assert type(m) ==\
    \ int and type(m) == int and n >= m, \"n and m should be integers and n should\
    \ be greater than m.\"\n    \n    if n == 0:\n        return \"0\"\n    \n   \
    \ if n == 1:\n        return \"1\"\n    \n    if n == 2:\n        return \"2\"\
    \n    \n    if n == 3:\n        return \"3\"\n    \n    if n == 4:\n        return\
    \ \"4\"\n    \n    if n == 5:\n        return \"5\"\n    \n    if n == 6:\n  \
    \      return \"6\"\n    \n    if n == 7:\n        return \"7\"\n    \n    if\
    \ n == 8:\n        return \"8\"\n    \n    if n == 9:\n        return \"9\"\n\
    \    \n    if n == 10:\n        return \"A\"\n    \n    if n == 11:\n        return\
    \ \"B\"\n    \n    if n == 12:\n        return \"C\"\n    \n    if n == 13:\n\
    \        return \"D\"\n    \n    if n == 14:\n        return \"E\"\n    \n   \
    \ if n == 15:\n        return \"F\"\n    \n    if n == 16:\n        return \"\
    G\"\n    \n    if n == 17:\n        return \"H\"\n    \n    if n == 18:\n    \
    \    return \"I\"\n    \n    if n == 19:\n        return \"J\"\n    \n    if n\
    \ == 20:\n        return \"K\"\n    \n    if n == 21:\n        return \"L\"\n\
    \    \n    if n == 22:\n        return \"M\"\n    \n    if n == 23:\n        return\
    \ \"N\"\n    \n    if n == 24:\n        return \"O\"\n    \n    if n == 25:\n\
    \        return \"P\"\n    \n    if n == 26:\n        return \"Q\"\n    \n   \
    \ if n == 27:\n        return \"R\"\n    \n    if n == 28:\n        return \"\
    S\"\n    \n    if n == 29:\n        return \"T\"\n    \n    if n == 0:\n     \
    \   return \"0\"\n    \n    \n    if n == 32:\n        return \"X\"\n    \n  \
    \  if n == 32:\n        return \"Y\"\n    \n    if n == 32:\n        return \"\
    Z\"\n    \n    \n    if n == 64:\n        return \"A\"\n    \n    if n == 64:\n\
    \        return \"B\"\n    \n    if n == 64:\n        return \"C\"\n    \n   \
    \ if n == 64:\n        return \"D\"\n    \n    if n == 64:\n        return \"\
    E\"\n    \n    if n == 64:\n        return \"F\"\n    \n    if n == 64:\n    \
    \    return \"G\"\n    \n    if n == 64:\n        return \"H\"\n    \n    if n\
    \ == 64:\n        return \"I\"\n    \n    if n == 64:\n        return \"J\"\n\
    \    \n    if n == 64:\n        return \"K\"\n    \n    if n == 64:\n        return\
    \ \"", "    try:\n        return str(int(round(n/m)*m))\n    except ZeroDivisionError:\n\
    \        return \"-1\"\n", "    def avg_round(n: int, m: int) -> Union[str, int]:\n\
    \        \"\"\"\n        >>> rounded_avg(1, 10)\n        '10'\n        >>> rounded_avg(10,\
    \ 1)\n        '-1'\n        \"\"\"\n        if n < m:\n            n = m\n   \
    \     return str(n//m) + str(n%m)\n    return avg_round(n, m)\n\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that converts a binary number to a decimal (base\
    \ 10) number.\n\n\n</text>\n<cell>\nfrom typing import Union\n", "    if n >=\
    \ m:\n        return -1\n    num = n + m\n    average = num//2\n    binary = '{0:08b}'.format(int(average,\
    \ 2))\n    return int(binary)\n\n\nassert rounded_avg(50, 45) == 20\nassert rounded_avg(50,\
    \ 51) == -1\nassert rounded_avg(7, 3) == -1\nassert rounded_avg(6, 8) == 4\nassert\
    \ rounded_avg(17, 12) == 12\nassert rounded_avg(31, 6) == -1\n\n</cell>\n<cell>",
  "    if n >= m:\n        return '-1'\n    else:\n        sum = 0\n        for i\
    \ in range(n, m+1):\n            sum += i\n        return '{0:b}'.format(sum//2)\n",
  "    if m > n:\n        return \"-1\"\n    avg = 0\n    i = 0\n    sum = 0\n   \
    \ while i < m:\n        sum += i\n        i += 1\n    avg = sum/m\n    avg = round(avg,\
    \ 2)\n    avg = bin(int(avg))[2:]\n    if len(avg) < n:\n        return -1\n \
    \   else:\n        return avg\n", "    if n < m:\n        return '-1'\n    else:\n\
    \        total = 0\n        middle = (m + n) // 2\n        for i in range(middle,\
    \ m + 1, 1):\n            total += i\n        return total / middle\n        ",
  "    i = n\n    total = 0\n    while i >= 0:\n        total += i\n        if total\
    \ > m:\n            return -1\n        i -= 1\n    return total // m\n", "   \
    \ if n >= m:\n        return -1\n    if n <= m:\n        return n\n    if n%2\
    \ == 0:\n        return rounded_avg(n//2, m)\n    else:\n        return rounded_avg(n//2\
    \ + 1, m) + 2*n - m\n\n    ", "    if n > m:\n        return -1\n    else:\n \
    \       return n + (m - n) // 2\nprint(rounded_avg(2, 4))\n", "    if n >= m:\n\
    \        return -1\n    else:\n        n = m\n        \n        \n    return n\n",
  "    \n    if m > n:\n        return -1\n    else:\n        return -1\n", "    \
    \                \n    if n > m:\n        return -1\n    else:\n        return\
    \ round(n/m)*m\n\n        ", "    \n    if n < m:\n        return -1\n    \n \
    \   elif m % 2 == 0:\n        return -1\n    \n    else:\n        return int(m//2\
    \ + n//2)\n    \n    \nprint(rounded_avg(11,12))\nprint(rounded_avg(15,14))\n\
    print(rounded_avg(13,12))\nprint(rounded_avg(18,16))\nprint(rounded_avg(11,15))\n\
    print(rounded_avg(16,18))\n</cell>\n<cell>", "    if m == 0: return -1\n    return\
    \ n//m + (n%m+2)//2*(n%m == 0)\n\nprint(rounded_avg(5,10))\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nWelcome to Stack Overflow! While this code may solve the question,\
    \ [including an explanation](//meta.stackexchange.com/q/114762) of how and why\
    \ this solves the problem would really help to improve the quality of your post,\
    \ and probably result in more up-votes. Remember that you are answering the question\
    \ for readers in the future, not just the person asking now. Please [edit] your\
    \ answer to add explanations and give an indication of what limitations and assumptions\
    \ apply.\n<|/ c |>\n<| a |>\n<code>", "                    avg = rounded_avg(10,18)\n\
    \                    print (avg)\n                    if avg == '110':\n     \
    \                   print (\"The average is {}\")\n                    else:\n\
    \                        print (\"The average is {}\".format(int(avg)))\n    \"\
    \"\"\n    avg = 0\n    for i in range(n, m+1):\n        avg += i\n    return avg\
    \ / 2\n</cell>\n<cell>\nrounded_avg(10,18)\n</cell>\n<text>\nProblem 15\nWrite\
    \ a Python program to compute and display the factorial of a given number. The\
    \ input will be an integer value. The output will be the factorial of that number.\
    \ \nA factorial of a number is a number that is the product of all the numbers\
    \ from 1 to that number.\n\n\n</text>\n<cell>", "    if n >= m:\n        return\
    \ -1\n    return n + (m - (n-m)) // 2\n", "    return sum(i**2 for i in range(m,\
    \ n + 1)) // n\n", "    if n > m:\n        return -1\n    \n    sum_ = 0\n   \
    \ while m > n:\n        sum_ += m\n        m -= 1\n    \n    return str(sum_ /\
    \ m).zfill(32)\n", "    if n == m:\n        return n\n    elif n >= m:\n     \
    \   return -1\n    else:\n        summ = 0\n        for i in range(n, m + 1):\n\
    \            summ = summ + i\n        avg = summ/(n-m)\n        return round(avg)\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=0 tags=python,math,python-3.x,binary,binary\
    \ |>\nThe reason is that the function round() round the number to its nearest\
    \ integer and round(n) only round the number to the nearest integer.\nTo get the\
    \ correct output just change round() to round(n,0)\nThe reason why it works without\
    \ that change is because round() rounds to the nearest even number unless you\
    \ specify the second argument, in this case 0, where it rounds to the nearest\
    \ integer\n<|/ a |>\n<| a dscore=0 |>\nround() rounds to the nearest integer\n\
    <code>", "    if n >= m:\n        return -1\n    else:\n        return (n // m\
    \ + n // m) % 2\n\nassert rounded_avg(17, 19) == 3\nassert rounded_avg(1, 5) ==\
    \ 1\nassert rounded_avg(4, 1) == 1\nassert rounded_avg(0, 0) == 0\nassert rounded_avg(2,\
    \ 5) == 2\nassert rounded_avg(7, 5) == 3\nassert rounded_avg(3, 0) == 0\nassert\
    \ rounded_avg(-1, 5) == 1\nassert rounded_avg(4, -1) == 1\nassert rounded_avg(5,\
    \ 5) == 2\nassert rounded_avg(1, 2) == 0\nassert rounded_avg(5, 1) == 1\nassert\
    \ rounded_avg(7, 7) == 0\nassert rounded_avg(2, 6) == 0\nassert rounded_avg(1,\
    \ 7) == 0\nassert rounded_avg(5, 4) == 2\nassert rounded_avg(6, 5) == 0\nassert\
    \ rounded_avg(2, 3) == 1\nassert rounded_avg(6, 2) == 1\nassert rounded_avg(5,\
    \ 0) == 2\nassert rounded_avg(6, 1) == 0\nassert rounded_avg(2, 0) == 1\nassert\
    \ rounded_avg(6, 0) == 2\nassert rounded_avg(0, 0) == 0\nassert rounded_avg(1,\
    \ 2) == 0\nassert rounded_avg(2, 1) == 1\nassert rounded_avg(3, 3) == 0\nassert\
    \ rounded_avg(6, 3) == 1\nassert rounded_avg(8, 6) == 1\nassert rounded_avg(3,\
    \ 2) == 1\nassert rounded_avg(7, 4) == 0\nassert rounded_avg(8, 2) == 1\nassert\
    \ rounded_avg(3, 0) == 1\nassert rounded_avg(6, 1) == 1\nassert rounded_avg(9,\
    \ 9) == 0\nassert rounded_avg(3, 8) == 0\nassert rounded_avg(4, 3) == 1\nassert\
    \ rounded_avg(5, 4) == 1\nassert rounded_avg(7, 5) == 1\nassert rounded_avg(9,\
    \ 6) == 1\nassert rounded_avg(6, 7) == 1\nassert rounded_avg(8, 7) == 1\nassert\
    \ rounded_avg(9, 8) == 1\nassert rounded_avg(7, 6) == 1\nassert rounded_avg(5,\
    \ 5) == 1\nassert rounded_avg(6, 6) == 1\nassert rounded_avg(5, 2) == 0\nassert\
    \ rounded_avg(6, 5) == 1\nassert rounded_avg(8, 6) == 1\nassert rounded_avg(3,\
    \ 3) == 0\nassert rounded_avg(9, 9) == 1\nassert rounded_avg(7, 4) == 1\nassert\
    \ rounded_avg(8, 7) == 1\nassert rounded_avg(6, 5) == 1\nassert rounded_avg(6,\
    \ 6) == 1\nassert rounded_avg(7, 2) == 0\nassert rounded_avg(6, 7) == 1\nassert\
    \ rounded_avg(5, ", "    avg = n + (n - m) / float(m)\n    print(bin(int(avg))[2:])\n\
    \    if int(avg) > m:\n        return -1\n    return bin(int(avg))[2:]\n", " \
    \   if n >= m:\n        return -1\n    mid = n + (m - n)//2\n    rounded_avg =\
    \ (mid - n) // m\n    rounded_avg = (rounded_avg + 1) // 2 * m\n    rounded_avg\
    \ += n // m\n    rounded_avg += m\n    rounded_avg = int(rounded_avg)\n    return\
    \ rounded_avg\n", "    \n    if n < m:\n        return -1\n    \n    avg = round(n\
    \ / (m-n+1)) \n    return bin(avg)[2:].zfill(n)\n    \n</code>\n<|/ a dscore=1\
    \ tags=python,string,binary |>\n<| c |>\nThis does not answer the question and\
    \ does not even attempt to answer the question itself. You might want to read\
    \ [answer] and [answer] to learn how to write a proper answer. Welcome to Stack\
    \ Overflow!\n<|/ c |>\n<| c |>\nthis answer is working great! but i have to add\
    \ some more validation to the code. if n is greater than m return -1.\n<|/ c |>\n\
    <| c |>\nI added some more code to make it a little more robust to negative n\
    \ and m\n<|/ c |>\n<| c |>\nI'm afraid you misunderstood the intended purpose\
    \ of the OP, namely to compute a binary representation of a given integer `n`\
    \ up to `m`. If `n > m` then `round(n)` will throw a `ZeroDivisionError`, which\
    \ cannot be caught by `except`. Instead, `m` should be used to determine how many\
    \ digits the result is going to have, e.g. `n = 9; m = 10; output = bin(n).zfill(m).lstrip(\"\
    0\")`.\n<|/ c |>\n<| a dscore=1 tags=python,string,binary |>\nYou could do like\
    \ this.\n<code>", "    if n <= m:\n        return -1\n    elif n >= m:\n     \
    \   return -1\n    else:\n        avg = ((n + m) / 2)\n        return bin(avg)[2:]\n\
    \    ", "    if n > m:\n        return -1\n    if n <= m:\n        return n if\
    \ n == m else rounded_avg(n + 2, m) + rounded_avg(n + 2, m + 2)\n    return -1\n",
  "    import math\n\n    if m < n:\n        return -1\n    sum = int(n) + int(m)\n\
    \    sum_2 = sum * 2\n    sum_3 = sum_2 * 3\n    sum_4 = sum_3 * 4\n    sum_5\
    \ = sum_4 * 5\n    sum_6 = sum_5 * 6\n    sum_7 = sum_6 * 7\n    sum_8 = sum_7\
    \ * 8\n    sum_9 = sum_8 * 9\n    sum_10 = sum_9 * 10\n    sum_11 = sum_10 * 11\n\
    \    sum_12 = sum_11 * 12\n    sum_13 = sum_12 * 13\n    sum_14 = sum_13 * 14\n\
    \    sum_15 = sum_14 * 15\n    sum_16 = sum_15 * 16\n    sum_17 = sum_16 * 17\n\
    \    sum_18 = sum_17 * 18\n    sum_19 = sum_18 * 19\n    sum_20 = sum_19 * 20\n\
    \    sum_21 = sum_20 * 21\n    sum_22 = sum_21 * 22\n    sum_23 = sum_22 * 23\n\
    \    sum_24 = sum_23 * 24\n    sum_25 = sum_24 * 25\n    sum_26 = sum_25 * 26\n\
    \    sum_27 = sum_26 * 27\n    sum_28 = sum_27 * 28\n    sum_29 = sum_28 * 29\n\
    \    sum_30 = sum_29 * 30\n    sum_31 = sum_30 * 31\n    sum_32 = sum_31 * 32\n\
    \    sum_33 = sum_32 * 33\n    sum_34 = sum_33 * 34\n    sum_35 = sum_34 * 35\n\
    \    sum_36 = sum_35 * 36\n    sum_37 = sum_36 * 37\n    sum_38 = sum_37 * 38\n\
    \    sum_39 = sum_38 * 39\n    sum_40 = sum_39 * 40\n    sum_41 = sum_40 * 41\n\
    \    sum_42 = sum_41 * 42\n    sum_43 = sum_42 * 43\n    sum_44 = sum_43 * 44\n\
    \    sum_45 = sum_44 * 45\n    sum_46 = sum_45 * 46\n    sum_47 = sum_46 * 47\n\
    \    sum_48 = sum_47 * 48\n    sum_49 = sum_48 * 49\n    sum_50 = sum_49 * 50\n\
    \    sum_51 = sum_50 * 51\n    sum_52 = sum_51 * 52\n    sum_53 = sum_52 * 53\n\
    \    sum_54 = sum_53 * 54\n    sum_55 = sum_54 * 55\n    sum_56 = sum_55 * 56\n\
    \    sum_57 = sum_56 * 57\n    sum_58 = sum_57 * 58", "    if n < m:\n       \
    \ return -1\n    else:\n        return int(round(n/m))\n\n\"\"\"\nTEST CASES:\n\
    Test.assert_equals(rounded_avg(2, 4), 2)\nTest.assert_equals(rounded_avg(5, 5),\
    \ 2)\nTest.assert_equals(rounded_avg(8, 4), -1)\nTest.assert_equals(rounded_avg(7,\
    \ 8), -1)\nTest.assert_equals(rounded_avg(7, 9), -1)\nTest.assert_equals(rounded_avg(7,\
    \ 10), -1)\nTest.assert_equals(rounded_avg(12, 1), -1)\nTest.assert_equals(rounded_avg(21,\
    \ 2), 2)\nTest.assert_equals(rounded_avg(21, 3), 3)\nTest.assert_equals(rounded_avg(22,\
    \ 3), 3)\nTest.assert_equals(rounded_avg(23, 4), 4)\nTest.assert_equals(rounded_avg(24,\
    \ 5), 5)\nTest.assert_equals(rounded_avg(24, 6), 6)\nTest.assert_equals(rounded_avg(25,\
    \ 6), 6)\nTest.assert_equals(rounded_avg(25, 7), 7)\nTest.assert_equals(rounded_avg(25,\
    \ 8), 8)\nTest.assert_equals(rounded_avg(25, 9), 9)\nTest.assert_equals(rounded_avg(25,\
    \ 10), 9)\nTest.assert_equals(rounded_avg(26, 10), 9)\nTest.assert_equals(rounded_avg(26,\
    \ 11), 10)\nTest.assert_equals(rounded_avg(27, 10), 10)\nTest.assert_equals(rounded_avg(27,\
    \ 11), 11)\nTest.assert_equals(rounded_avg(28, 12), 12)\nTest.assert_equals(rounded_avg(29,\
    \ 12), 12)\nTest.assert_equals(rounded_avg(30, 13), 13)\nTest.assert_equals(rounded_avg(31,\
    \ 13), 13)\nTest.assert_equals(rounded_avg(31, 14), 14)\nTest.assert_equals(rounded_avg(32,\
    \ 14), 14)\nTest.assert_equals(rounded_avg(32, 15), 15)\nTest.assert_equals(rounded_avg(33,\
    \ 15), 15)\nTest.assert_equals(rounded_avg(33, 16), 16)\nTest.assert_equals(rounded_avg(33,\
    \ 17), 17)\nTest.assert_equals(rounded_avg(33, 18), 18)\nTest.assert_equals(rounded_avg(33,\
    \ 19), 19)\nTest.assert_equals(rounded_avg(33, 20), 19)\nTest.assert_equals(rounded_avg(33,\
    \ 21), 20)\nTest.assert_equals(rounded_avg(33, 22), 20)\nTest.assert_equals(rounded_avg(33,\
    \ 23), 20)\nTest.assert_equals(rounded_avg(33, 24), 20)\nTest.assert_equals(rounded_avg(33,\
    \ 25), 20)\nTest.assert_equals(rounded_avg(33, 26), 20)\nTest.assert_equals(rounded_avg(33,\
    \ 27), 20)\nTest.assert_equals(", "    if n >= m:\n        return -1\n    average\
    \ = ((n - m) + 1) / 2\n    integer = int(average)\n    return f'{integer:b}'\n",
  "    \n    avg = (n + m) / 2\n    if n > m:\n        return -1\n    return str(bin(round(avg)))[2:]\n\
    \nprint(rounded_avg(6, 9))\n\n</cell>\n<cell>", "                    if n == m:\n\
    \                        return str(n)\n                    if n > m:\n      \
    \                  return -1\n                    avg = (n - m) / 2\n        \
    \            rounded_avg = int(avg + 1)\n                    binary_string = str(bin(rounded_avg)[2:])\n\
    \                    if binary_string[0] == '1':\n                        return\
    \ -1\n                    else:\n                        return binary_string",
  "    if n < m:\n        return -1\n    return str(bin(round(n/m + 0.5)))\nprint(rounded_avg(3,7))\n\
    </cell>\n<cell>", "    n = int(input())\n    m = int(input())\n    if n>m:\n \
    \       return \"-1\"\n    avg = round(n+m)/2\n    binary = (bin(avg)[2:]).zfill(5)\n\
    \    return int(binary)\nprint(rounded_avg(105, 200))\n</cell>\n<cell>", "   \
    \ if n <= m:\n        return \"-1\"\n    elif n == m:\n        return \"1\"\n\
    \    sum = 0\n    for i in range(n, m):\n        sum += i\n    avg = round(sum\
    \ / 2)\n    return f\"0b{bin(avg)}\"\n", "    if n <= m:\n        return -1\n\
    \    else:\n        return bin(sum((n - i) for i in range(m + 1)))[2:].zfill(n\
    \ + 1)\n\n", "                    n = 13\n                    m = 18\n       \
    \             avg = (13 + 18) / 2\n                    avg = rounded_avg(13, 18)\n\
    \                    avg = 7\n                    avg = b1100\n              \
    \      avg = -1\n                    \n    \"\"\"\n    \n    if n >= m:\n    \
    \    return -1\n    else:\n        return int( (int(n) + int(m)) / 2 )\n    \n\
    \"\"\" \n    Time complexity \n    \"\"\"", "    if n>m:\n        return -1\n\
    \    \n    sum = 0\n    for i in range(n,m+1):\n        sum += i\n    return sum/(n-m)\n",
  "    if n < m:\n        return -1\n    else:\n        avg = (n + (m - 1)) / 2\n\
    \        return f'{int(avg)}b'\n", "    if n > m:\n        return \"-1\"\n   \
    \ elif n == 0:\n        return \"0\"\n    else:\n        return str(int( (m+n)*(math.floor((m+n)/2)+1)\
    \ ))\n    ", "    lower = n\n    upper = m + n if n < m else m\n    return (lower\
    \ + upper) // 2\n", "    \n    ", "    if n > m:\n        return \"-1\"\n    else:\n\
    \        return int.to_binary_string(n // m) + str(n % m)\n", "    if n < m:\n\
    \        return -1\n\n    avg = n + (n - m) // 2\n    binary = str((avg + 1) //\
    \ 2)\n\n    if binary == '10':\n        return '-1'\n    elif binary == '0':\n\
    \        return '0'\n\n    return binary\n\nprint(rounded_avg(7, 3))\nprint(rounded_avg(7,\
    \ 6))\nprint(rounded_avg(8, 7))\nprint(rounded_avg(13, 12))\nprint(rounded_avg(15,\
    \ 12))\nprint(rounded_avg(20, 15))\nprint(rounded_avg(26, 15))\nprint(rounded_avg(34,\
    \ 31))\nprint(rounded_avg(38, 31))\nprint(rounded_avg(42, 31))\nprint(rounded_avg(49,\
    \ 42))\nprint(rounded_avg(51, 42))\nprint(rounded_avg(59, 42))\nprint(rounded_avg(64,\
    \ 49))\nprint(rounded_avg(66, 49))\nprint(rounded_avg(74, 52))\nprint(rounded_avg(78,\
    \ 52))\nprint(rounded_avg(84, 51))\nprint(rounded_avg(90, 51))\nprint(rounded_avg(105,\
    \ 59))\nprint(rounded_avg(111, 63))\nprint(rounded_avg(116, 67))\nprint(rounded_avg(122,\
    \ 72))\nprint(rounded_avg(127, 78))\nprint(rounded_avg(134, 81))\nprint(rounded_avg(140,\
    \ 86))\nprint(rounded_avg(147, 91))\nprint(rounded_avg(155, 97))\nprint(rounded_avg(161,\
    \ 102))\nprint(rounded_avg(168, 107))\nprint(rounded_avg(175, 112))\nprint(rounded_avg(183,\
    \ 118))\nprint(rounded_avg(190, 123))\nprint(rounded_avg(197, 129))\nprint(rounded_avg(204,\
    \ 134))\nprint(rounded_avg(211, 140))\nprint(rounded_avg(218, 147))\nprint(rounded_avg(225,\
    \ 154))\nprint(rounded_avg(230, 162))\nprint(rounded_avg(237, 169))\nprint(rounded_avg(244,\
    \ 175))\nprint(rounded_avg(250, 183))\nprint(rounded_avg(256, 190))\nprint(rounded_avg(263,\
    \ 197))\nprint(rounded_avg(269, 204))\nprint(rounded_avg(276, 211))\nprint(rounded_avg(283,\
    \ 218))\nprint(rounded_avg(289, 225))\nprint(rounded_avg(29", "    if n>=m:\n\
    \        return -1\n    sum = 0\n    count = 0\n    ans = -1\n    for i in range(n,m):\n\
    \        sum += i\n        count += 1\n        if count>1:\n            ans =\
    \ sum\n            sum = 0\n            count = 0\n    if ans==-1:\n        return\
    \ -1\n    return bin(ans)[2:]\n", "    int_binary = []\n    for _ in range(n+1):\n\
    \        int_binary.append(int(bin(int(input()))[2:]))\n    for i in range(n+1,\
    \ m+1):\n        int_binary.append(int(bin(int(input()))[2:]))\n    print(int_binary)\n\
    \    print(\"{}\".format(sum(int_binary[0:n]//m) / len(int_binary[0:n]//m)))\n\
    \    ", "    if n >= m:\n        return \"-1\"\n    sum = 0\n    for i in range(n,\
    \ m):\n        sum += i\n    avg = round(sum / 2)\n    binary = bin(avg)[2:]\n\
    \    binary = binary[::-1]\n    return int(binary)\n</code>\n<|/ a tags=python-3.x\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    # Convert m to binary\n    m_bin =\
    \ str(bin(m))\n    \n    # Remove leading '0b' from m_bin\n    m_bin = m_bin[2:]\n\
    \    \n    # Remove leading zeros\n    m_bin = m_bin.replace('0b', '')\n    \n\
    \    # Remove 'L' from m_bin\n    m_bin = m_bin.replace('L', '')\n    \n    #\
    \ Convert m_bin to integer\n    m = int(m_bin, 2)\n    \n    # Round n\n    n\
    \ = int(n)\n    \n    # Round m\n    m = int(m)\n    \n    # Find difference between\
    \ n and m\n    diff = (n - m)\n    \n    # If diff is negative, return -1\n  \
    \  if diff < 0:\n        return -1\n    \n    # If diff is positive, find two\
    \ integers between 0 and diff (inclusive) \n    # and divide n by that value.\n\
    \    elif diff > 0:\n        a = n\n        b = m + diff\n        return round(a/b)\n\
    \    \n    # If diff is 0, return n\n    else:\n        return n\n", "    rounded_avg\
    \ = round(m * n / 2 + n / 2)\n    return str(bin(rounded_avg))[2:]\n</cell>\n\
    <cell>\nrounded_avg(7, 10)\n</cell>\n<cell>\nrounded_avg(7, 8)\n</cell>\n<cell>\n\
    rounded_avg(7, 7)\n</cell>\n<text>\nExercise 3\n\n</text>\n<cell>\n\"\"\"\nYou\
    \ are given three integers a, b, and c, where a, b, and c are all nonnegative\
    \ integers.\nThe task is to determine whether or not three of them add up to a\
    \ multiple of 5.\nExample: \na = 3\nb = 5\nc = 2\nYour function should return\
    \ the string 'yes' or 'no'\n\"\"\"", "    return str(int(m+n//2))\n\n", "    if\
    \ n >= m:\n        return \"-1\"\n    else:\n        return (n + (m-1))/2\n\n\
    print(rounded_avg(4, 5))\n\n</cell>\n<text>\nThe average of numbers from 1 to\
    \ 10 is 5\n\n\n</text>\n<cell>", "    if n>m:\n        return -1\n    else:\n\
    \        sum = 0\n        for i in range(n+1,m):\n            sum = sum+i\n  \
    \      return int(sum//(2**(8*n-m))+1)\nprint(rounded_avg(6, 6))\n</cell>\n<text>\n\
    Problem 8\nA single integer is called an octal number if its decimal representation\
    \ has no leading zeros, \noctal 0 is denoted by \u201C0\u201D, octal 1 is denoted\
    \ by \u201C1\u201D, octal 2 is denoted by \u201C2\u201D, octal 3 is denoted by\
    \ \u201C3\u201D, and so on. For example, 010 is 10, 011 is 11 and 013 is 13.\n\
    \nThe sum of any two octal numbers is always 8. \nFor example, 022 is 8, 024 is\
    \ 9, and 026 is 10.\n\nFind the sum of all octal numbers between 1 and 30 (both\
    \ included) that do not exceed 1000.\n\nExpected result:\n\n</text>\n<cell>",
  "    if n >= m:\n        return -1\n    \n    avg = (n + m) // 2\n    rounded =\
    \ int(round(avg))\n    binary = bin(rounded)[2:]\n    \n    return int(binary)\n\
    </cell>\n<cell>", "    return -1\n\"\"\"\n\n", "    \n    if n > m:\n        return\
    \ \"-1\"\n    elif n==m or n==0 or m==0:\n        return \"0\"\n    else:\n  \
    \      avg = round((n-m)*(n+m)/2)+(n-m)/2\n        return str(bin(avg)[2:])\n\n\
    print(rounded_avg(125,100))\nprint(rounded_avg(100,100))\nprint(rounded_avg(50,100))\n\
    print(rounded_avg(25,100))\nprint(rounded_avg(0,100))\nprint(rounded_avg(5,100))\n\
    print(rounded_avg(100,100))\nprint(rounded_avg(100,5))\nprint(rounded_avg(5,100))\n\
    print(rounded_avg(100,100))\nprint(rounded_avg(100,0))\nprint(rounded_avg(100,100))\n\
    print(rounded_avg(100,-1))\nprint(rounded_avg(100,-3))\n", "    avg = 0.5\n  \
    \  n = int(input(\"Enter a number upto which you want your average: \"))\n   \
    \ m = int(input(\"Enter a number from which you want the average: \"))\n    \n\
    \    if m >= n:\n        return \"-1\"\n    \n    ans = round(avg, 3)\n    ans\
    \ = bin(ans)\n    ans = ans[2:]\n    return ans\n    \nrounded_avg(8, 4)\n\nrounded_avg(8,\
    \ 9)\n\nrounded_avg(17, 9)\n\nrounded_avg(17, 0)\n\nrounded_avg(17, 10)\n\nrounded_avg(17,\
    \ -10)\n\nrounded_avg(17, -4)\n\nrounded_avg(17, -3)\n\nrounded_avg(17, -2)\n\n\
    rounded_avg(17, -1)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17,\
    \ -1)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\n\
    rounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17,\
    \ -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -2)\n\n\
    rounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -1)\n\nrounded_avg(17,\
    \ -2)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\n\
    rounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17,\
    \ -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -2)\n\n\
    rounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -1)\n\nrounded_avg(17,\
    \ -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\n\
    rounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17,\
    \ -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\n\
    rounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17,\
    \ -1)\n\nrounded_avg(17, -2)\n\nrounded_avg(17, -1)\n\nrounded_avg(17, -2)\n\n",
  "    \n    if n < m:\n        return -1\n    \n    count = (m - n) + 1\n    \n \
    \   if count == 0:\n        return 1\n    else:\n        total = n // count\n\
    \        \n        return total + rounded_avg(total, count) # TODO fix this\n\
    \        \n    # TODO fix this\n    ", "    if n > m:\n        return -1\n\n \
    \   if n % 2 == 0:\n        return -1\n    else:\n        avg = n/2\n        avg\
    \ = bin(avg)[2:].zfill(n//2)\n        return int(avg)\n", "    if n < m:\n   \
    \     return -1\n\n    sum = 0\n    for i in range(n + 1):\n        if i < m:\n\
    \            sum += i\n\n    # round to nearest integer\n    avg = round(sum /\
    \ n) \n    \n    # convert back to binary\n    binary = bin(avg)\n    binary =\
    \ binary[2:]\n    \n    # convert to int\n    int_value = int(binary)\n    return\
    \ int_value\n\n", "    if m > n:\n        return -1\n    else:\n        integer\
    \ = n if n % 2 else (m+1)\n        binary = bin(integer)[2:]\n        return int(binary,\
    \ 2)", "    if n<m:\n        return \"-1\"\n    else:\n        return (str(int(n)/m)\
    \ + str(int(m)/m))\n\n", "    \n    if n < m:\n        return -1\n    \n    \n\
    \    if n == m:\n        return n\n    \n    \n    average = n + (m -n)//2\n \
    \   \n    return average\n", "    \"\"\"Input\n    3\n    7\n    9\n    15\n \
    \   \"\"\"\n    \"\"\"Output\n    1\n    -1\n    -1\n    1\n    \"\"\"\n    sum\
    \ = 0\n    for i in range(n, m + 1):\n        sum += i\n    return sum // 2 if\
    \ sum % 2 == 0 else -1\n", "    if n>m:\n        return -1\n    else:\n      \
    \  step = int(m/n)\n        mid = (step*n+m)/2\n        rounded_avg = round(n/mid)*mid\
    \ + mid\n        return bin(int(rounded_avg))[2:]\n    \nprint(rounded_avg(30,60))\n\
    print(rounded_avg(30,60))\nprint(rounded_avg(30,60))\nprint(rounded_avg(30,60))\n\
    print(rounded_avg(30,60))\nprint(rounded_avg(30,60))\nprint(rounded_avg(30,60))\n\
    print(rounded_avg(30,60))\n</cell>\n<text>\nTask 2\nWrite a recursive function,\
    \ is_palindrome() that determines if a number is a\npalindrome\nExamples:\nis_palindrome(101):\
    \ should return True\nis_palindrome(91): should return True\nis_palindrome(10):\
    \ should return False\nis_palindrome(9): should return False\nHint: You may need\
    \ to write a helper function to determine if the number is a palindrome. Hint:\
    \ You may need to write a helper function to determine if the number is a palindrome.\n\
    \n\n</text>\n<cell>", "    if n > m:\n        return -1\n    else: \n        return\
    \ (n // m) * m + (n % m)\n\n", "    import math\n\n    if n >= m:\n        return\
    \ \"-1\"\n    avg_ = n + (m - n) / 2\n    avg_ = int(round(avg_))\n    binary\
    \ = bin(avg_)[2:]\n    if binary[0] != \"0\":\n        binary = \"0\" + binary\n\
    \    if binary[-1] != \"1\":\n        binary = binary + \"1\"\n    if int(binary)\
    \ == avg_:\n        return binary\n    else:\n        return \"-1\"\n\n\n\"\"\"\
    # Round the number to the nearest multiple of 5\"\"\"\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return int(round((n + m) / 2.))\n", "   \
    \ if n < m:\n        return -1\n    \n    total = 0\n    \n    for i in range(n,\
    \ m + 1):\n        total += i\n    \n    avg = total / (n + m)\n    \n    return\
    \ int(avg)\n\n\n\"\"\"", "    if n >= m:\n        return \"-1\"\n    else:\n \
    \       avg = ((n + m) / 2) \n        return str(bin(int(avg)))[2:]\n\n", "  \
    \  rounding = m + 1\n    if n <= m:\n        return round(n)\n    average = ((n\
    \ - m) / rounding) * rounding\n    if round(average) == round(average):\n    \
    \    return round(average)\n    return round(average)\n", "    if n >= m:\n  \
    \      return -1\n    else:\n        return int(round(n/m)*2**(m - n)*0.5)\n",
  "    if n > m:\n        return \"-1\"\n    num = n\n    while num < m:\n       \
    \ num = num * 2 + 1\n    return num // 2\nprint(rounded_avg(32, 14))\n</cell>\n\
    <cell>\nassert type(rounded_avg(32, 14)) == int\nassert rounded_avg(32, 14) ==\
    \ 14\n</cell>\n<text>\nCoding Part 2\nNow lets look at another scenario where\
    \ we would like to get our average. Lets say we wanted to find the average of\
    \ the numbers up to 10 but excluding 5. How would we go about this? We have included\
    \ some code below. Your task is to use this code to round the average to the nearest\
    \ integer.\n\n\n</text>\n<cell>", "    if n == m:\n        return str(n)\n   \
    \ return str(m) + str(n) + '/' + str(m)\n</code>\n<code>", "                 \
    \   \n    binary = ''\n    count = 2\n    sum = 0\n    \n    \n    if n<m:\n \
    \       return -1\n    \n    while count<=n:\n        sum += count\n        \n\
    \        \n        binary+= str(sum%2)\n        sum=sum//2\n        count+=1\n\
    \    return binary\n", "    if n >= m:\n        return -1\n    else:\n       \
    \ avg_val = n + (m - n) / 2\n        avg = str(bin(avg_val)[2:])\n        return\
    \ avg\n", "    if n > m:\n        return -1\n    sum_ = 0\n    count_ = 1\n  \
    \  while count_ < n:\n        sum_ += count_\n        count_ += 1\n    sum_ -=\
    \ m\n    return bin(round(sum_ / n))[2:]\n", "    assert type(m) is int and n\
    \ > 0, \"m must be an integer greater than zero\"\n    assert type(m) is int and\
    \ m < n, \"m must be an integer less than or equal to n\"\n    if n>m:\n     \
    \   return -1\n    avg=0\n    for i in range(n,m+1):\n        avg=avg+i\n    avg=avg/(n-m)\n\
    \    return bin(avg)[2:]\n", "                    n = 9\n                    m\
    \ = 5\n                    print(rounded_avg(n,m))\n                    >>> 10\n\
    \            \"\"\"\n                n = 10\n                m = 8\n         \
    \       \n                \n                \n                \n             \
    \   \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n", "    # todo code\n    if n >\
    \ m:\n        return -1\n    elif n >= 0 and m < n:\n        return (n // m) *\
    \ m\n    else:\n        return -1\nprint(rounded_avg(1000000000, 10000000000))\n\
    print(rounded_avg(99999999, 10000000000))\n</cell>\n<text>\nProblem 2\n\n</text>\n\
    <cell>", "                    \n    i = 2\n    s = 0\n    while i <= m+1:\n  \
    \      s = s + i\n        i = i + 1\n    average = s/m\n    \n    if average ==\
    \ int(round(average)):\n        return int(average)\n    else:\n        return\
    \ \"-1\"\n    \n    \n", "    \n    if n < m:\n        return -1\n    else:\n\
    \        avg = n/m + m/n\n        return int(round(avg))\n\nprint(rounded_avg(12,\
    \ 3))\nprint(rounded_avg(12, 0))\nprint(rounded_avg(-10, 3))\nprint(rounded_avg(-10,\
    \ 0))\nprint(rounded_avg(6, 7))\n\n</cell>\n<text>\nExercise\nWrite a function\
    \ to calculate the sum of the digits in an integer.\nIf the number is negative,\
    \ return -1.\nIf the number is 0, return 0.\nIf the number is positive, return\
    \ 1 + the sum of the digits in it.\nExamples:\n11 = 7\n12 = 1\n-13 = -1 \n121\
    \ = 6\n-10 = -10\n\n\n</text>\n<cell>", "    i = n\n    s = 0\n    while (i <\
    \ m):\n        if (i % 2 == 0):\n            s += i\n        i += 1\n    avg =\
    \ (s / n) * 10\n    return round(avg, 2)\n\n", "    if n >= m:\n        return\
    \ -1\n    \n    total: float = 0\n    avg = total\n    count = 0\n    \n    for\
    \ i in range(n + 1):\n        total += i\n        if i < m:\n            count\
    \ += 1\n            avg += i \n    \n    return round(avg / (n + 1), int(\n  \
    \      math.log2(n + 1) / (math.log2(count) + 1)))\n    \nprint(rounded_avg(8,\
    \ 11))\nprint(rounded_avg(19, 20))\nprint(rounded_avg(100, 101))\nprint(rounded_avg(1000,\
    \ 1001))\nprint(rounded_avg(10000, 10001)) \nprint(rounded_avg(1000000, 1000001))\n\
    print(rounded_avg(100000000, 100000000))\nprint(rounded_avg(10000000000, 10000000000))\n\
    </cell>\n<cell>\nfrom typing import Union\n", "    if n > m:\n        return \"\
    -1\"\n    avg = int((n + m) / 2)\n    binary = f\"{avg:b}\"\n    binary = \"0\"\
    \ + binary.zfill(8)\n    return int(binary)\n", "    import math\n    if n ==\
    \ 0:\n        return '0'\n    elif n == 1:\n        return '1'\n    else:\n  \
    \      average = math.floor((n+m)/2)\n        binar = bin(average)\n        return\
    \ binar[2:]\n</code>\n<|/ a tags=python |>\n<| a dscore=0 |>\n<code>", "    try:\n\
    \        return int(str(sum((range(n,m+1)) * .5)//(n-m-1)) + 'b')\n    except:\n\
    \        if n == m:\n            return \"-1\"\n        else:\n            return\
    \ -1\n</cell>\n<text>\nExercise 2\nWrite a program to compute the following sum:\
    \ $$\\begin{cases} 5 + 4 + 3 + 2 + 1 & \\text{if $n = 3$} \\\n\\sqrt{n} + 4 &\
    \ \\text{if $n = 5$} \\\n2 & \\text{if $n = 1$} \\end{cases}$$ Use a while loop\
    \ to compute this sum.\n\n\n</text>\n<cell>", "    if m <= n:\n        return\
    \ -1\n    return int(n // m + (n % m))\n", "    if n >= m:\n        return -1\n\
    \    else:\n        n = bin(n)[2:]\n        m = bin(m)[2:]\n        return int(n\
    \ + m / 2)\n\n", "    n = int(n)\n    m = int(m)\n    avg = n + (m / 2)\n    if\
    \ m > n:\n        return -1\n    else:\n        return str(avg)\n", "        \
    \            if n <= m:\n                        avg = float(n)/float(m)\n   \
    \                     avg = round(avg)\n                        avg = bin(avg)[2:]\n\
    \                        avg = avg.lstrip('-0b')\n                        return\
    \ avg\n                    else:\n                        return -1\n", "    \
    \                \n    if n<m:\n        return -1\n    else:\n        return bin(int(round((n-m+1),0)))\n",
  "    if n > m:\n        return -1\n    sum = 0\n    i = n\n    while  i <= m:\n\
    \        sum += i\n        i += 1\n    return round(sum / i) / 2 + 1\n", "   \
    \ ans = 0 \n    for num in range(n,m):\n        ans += num\n    ans = ans/2\n\
    \    if ans > m:\n        return -1\n    return bin(ans)[2:].zfill(n)\n", "  \
    \  if (n > m):  # base case\n        return -1\n    else: # recursive case\n \
    \       quotient, remainder = divmod(n, m)  # get quotient and remainder\n   \
    \     if remainder == 0: # if remainder is 0, it means n divides m evenly\n  \
    \          return quotient\n        else: # if remainder is not 0, then divide\
    \ the quotient and remainder by the divisor\n            quotient = rounded_avg(quotient,\
    \ m)  # get quotient of the quotient and remainder\n            if quotient ==\
    \ -1: # if quotient is -1, that means n is greater than m\n                return\
    \ -1\n            else:\n                return quotient * 10 + remainder  # return\
    \ quotient * 10 + remainder\n\n</cell>\n<cell>", "    if n > m:\n        return\
    \ \"-1\"\n\n    a = n // m\n    b = n - m * a\n    c = (m ** 2 + n ** 2 - a *\
    \ b) // 2\n    if c < 0:\n        c = c + 1\n\n    binary_a = format(a, 'b').zfill(m)\n\
    \    binary_b = format(b, 'b').zfill(m)\n    binary_c = format(c, 'b').zfill(m)\n\
    \n    return \"0b\" + binary_a + binary_b + binary_c\n\n", "    if n > m:\n  \
    \      return -1\n\n    avg = (n - m + 1) // m \n    bin = (n - avg + 1) // m\
    \ \n    return f'{bin}'\n\nprint(rounded_avg(100,100))\nprint(rounded_avg(100,1000))\n\
    print(rounded_avg(100,999))\nprint(rounded_avg(100,1010))\nprint(rounded_avg(100,1000))\n\
    print(rounded_avg(100,999))\nprint(rounded_avg(100,1010))\n\n</cell>\n<cell>",
  "    if n > m:\n        return \"-1\"\n    if n == m:\n        return n\n    return\
    \ int(round((n+m) / 2))\n", "    if n >= m:\n        return -1\n    return (n\
    \ + (m - n) // 2) / m\n</cell>\n<cell>", "    \n    if n < m:\n        return\
    \ -1\n    if n % 2 != 0:\n        return (n - 1) / n * 2\n    else:\n        return\
    \ n / m\n", "    if n >= m:\n        return -1\n    \n    return int(n + (m -\
    \ n) // 2)\n", "    n = int(input().strip())\n    m = int(input().strip())\n \
    \   if n < m:\n        return -1\n    return sum(range(n, m+1))//2\n\n", "   \
    \ \n    def rounded_avg(n: int, m: int) -> Union[str, int]:\n        \"\"\"You\
    \ are given two positive integers n and m, and your task is to compute the\n \
    \       average of the integers from n through m (including n and m). \n     \
    \   Round the answer to the nearest integer and convert that to binary.\n    \
    \    If n is greater than m, return -1.\n        Example: \n        \"\"\"\n \
    \       if n == m:\n            return \"-1\"\n        if n >= m:\n          \
    \  return -1\n        else:\n            a = n \n            while a < m:\n  \
    \              a += n\n            return a\n    \n    print(rounded_avg(5,4))\n\
    \    print(rounded_avg(3,3))\n    print(rounded_avg(3,2))\n    print(rounded_avg(6,2))\n\
    \    print(rounded_avg(9,8))\n    print(rounded_avg(11,6))\n    print(rounded_avg(15,4))\n\
    \    print(rounded_avg(6,0))\n    print(rounded_avg(7,0))\n    print(rounded_avg(8,0))\n\
    \    print(rounded_avg(9,1))\n    print(rounded_avg(10,1))\n    print(rounded_avg(11,0))\n\
    \    print(rounded_avg(14,0))\n    print(rounded_avg(15,0))\n    print(rounded_avg(16,0))\n\
    \    print(rounded_avg(17,0))\n    print(rounded_avg(18,0))\n    print(rounded_avg(19,0))\n\
    \    print(rounded_avg(20,0))\n    print(rounded_avg(21,0))\n    print(rounded_avg(22,0))\n\
    \    print(rounded_avg(23,0))\n    print(rounded_avg(24,0))\n    print(rounded_avg(25,0))\n\
    \    print(rounded_avg(26,0))\n    print(rounded_avg(27,0))\n    print(rounded_avg(28,0))\n\
    \    print(rounded_avg(29,0))\n    print(rounded_avg(30,0))\n    print(rounded_avg(31,0))\n\
    \    print(rounded_avg(32,0))\n    print(rounded_avg(33,0))\n    print(rounded_avg(34,0))\n\
    \    print(rounded_avg(35,0))\n    print(rounded_avg(36,0))\n    print(rounded_avg(37,0))\n\
    \    print(rounded_avg(38,0))\n    print(rounded_avg(39,0))\n    print(rounded_avg(40,0))\n\
    \    print(rounded_avg(41,0))\n    print(rounded_avg(42,0))\n    print(rounded_avg(43,0))\n\
    \    print(rounded_avg(44,0))\n    print(rounded_avg(45,0))\n    print(rounded_avg(46,0))\n\
    \    print(rounded_avg(47,0))\n    print(rounded_avg(48,0))\n    print(rounded_avg(49,0))\n\
    \    print(roun", "    if n < m:\n        return -1\n    else:\n        return\
    \ int(str(round((m+(n-m)) / 2)) + str((m+(n-m)) % 2))\n</code>\nMy solution is\
    \ only slightly more efficient than yours and it would be easy to see how you\
    \ can modify it to behave the way you want:\n<code>", "    average = 0\n    for\
    \ i in range(n, m + 1, 1):\n        average = average + i\n    average = average/(n+1)\n\
    \    if average > m:\n        average = average\n    else:\n        average =\
    \ -1\n    return average\n"]
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
