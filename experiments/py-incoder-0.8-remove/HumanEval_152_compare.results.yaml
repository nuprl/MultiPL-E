language: py
name: HumanEval_152_compare
results:
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores: [1, 2, 4, 3], guesses: [5, 9, 11, 3]\n            returns [0, 0, 0,\
    \ 2]\n            \"\"\"\n\n    \n    Args:\n        game(List[int]): an array\
    \ of scores (from 0-10)\n        guess(List[int]): an array of guesses (from 0-10)\n\
    \n    Returns:\n        List[int]: an array of same length as guesses and denoting\
    \ how far off each guess was. If they guessed correctly, \n        the value is\
    \ 0, and if not, the value is the absolute difference between the guess and the\
    \ score.\n\n    Examples:\n    >>> compare([1,2,4,3], [5, 9, 11, 3])\n    [0,\
    \ 0, 0, 2]\n    >>> compare([2,2,3,2], [5, 9, 11, 3])\n    [0, 0, 2, 0]\n    >>>\
    \ compare([1,2,4,3], [5, 9, 11, 3])\n    [0, 0, 0, 2]\n    >>> compare([5,5,5,5],\
    \ [5,5,5,5])\n    [0, 0, 0, 0]\n    >>> compare([5,5,5,5], [2,5,5,5])\n    [0,\
    \ 0, 2, 0]\n    >>> compare([5,5,5,5], [2,5,5,5])\n    [0, 0, 2, 0]\n    \"\"\"\
    \n    \n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7n3gvhwf.py\", line 16\n    scores: [1, 2, 4, 3], guesses:\
    \ [5, 9, 11, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [0, 2, 4]\n            guesses = [0, 2]\n            result = [0, 2]\n\
    \            compare(scores, guesses)\n            >>>  [0, 2]\n            \n\
    \            scores = [0, 4, 2, 5, 1]\n            guesses = [0, 2, 2, 4]\n  \
    \          result = [2, -2, 4, -1, 0]\n            compare(scores, guesses)\n\
    \            >>>  [0, 4, 2, 5, 1]\n            \n            scores = [0, 4, 2,\
    \ 5, 1]\n            guesses = [2, 2, 4]\n            result = [2, 2, 4]\n   \
    \         compare(scores, guesses)\n            >>>  [0, 4, 2, 5, 1]\n       \
    \     \n            scores = [0, 4, 2, 5, 1]\n            guesses = [4, 2, 5]\n\
    \            result = [4, 2, 5]\n            compare(scores, guesses)\n      \
    \      >>>  [0, 4, 2, 5, 1]\n            \n            scores = [0, 4, 2, 5, 1]\n\
    \            guesses = [4]\n            result = [4, 2, 5]\n            compare(scores,\
    \ guesses)\n            >>>  [0, 4, 2, 5, 1]\n            \n            scores\
    \ = [0, 4, 2, 5, 1]\n            guesses = [5]\n            result = [4, 2, 5]\n\
    \            compare(scores, guesses)\n            >>>  [0, 4, 2, 5, 1]\n    \
    \        \n            scores = [0, 4, 2, 5, 1]\n            guesses = [1, 3]\n\
    \            result = [4, 2, 5]\n            compare(scores, guesses)\n      \
    \      >>>  [0, 4, 2, 5, 1]\n            \n            scores = [0, 4, 2, 5, 1]\n\
    \            guesses = [1, 5, 3]\n            result = [4, 2, 5]\n           \
    \ compare(scores, guesses)\n            >>>  [0, 4, 2, 5, 1]\n            \n \
    \           scores = [0, 4, 2, 5, 1]\n            guesses = [2, 4, 3]\n      \
    \      result = [4, 2, 5]\n            compare(scores, guesses)\n            >>>\
    \  [0, 4, 2, 5, 1]\n            \n            scores = [0, 4, 2, 5, 1]\n     \
    \       guesses = [1, 3, 2]\n            result = [4, 2, 5]\n            compare(scores,\
    \ guesses)\n            >>>  [0, 4, 2, 5, 1]\n            \n            scores\
    \ = [0, 4, 2, 5, 1]\n            guesses = [1, 2, 3, 5]\n            result =\
    \ [4, 2, 5]\n            compare(scores, guesses)\n            >>>  [0, 4, 2,\
    \ 5, 1]\n            \n            scores = [0, 4, 2, 5, 1]\n            guesses\
    \ = [1, 5, 2, 3]\n            result = [4, 2, 5]\n            compare(scores,\
    \ guesses)\n            >>>  [0, 4, 2, 5, 1]\n            \n            scores\
    \ = [0, 4, 2, 5, 1]\n            guesses = [1, 3, 5]\n            result = [4,\
    \ \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpt7smchgb.py\", line 16\n    scores = [0, 2, 4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ # game = [2,4,4,5,5,1,2]\n            # guess = [3,5,5,4,3,2,4]\n          \
    \  #\n            # > compare(game, guess)\n            # [0,1,1,1,0,-1,0]\n \
    \           #\n            # \"\"\"\n        \n    \n    \n    \n    \"\"\"\n\
    \    # write your code here\n    guess_count=0\n    game_total=sum(game)\n   \
    \ diff=[]\n    for i in range(len(game)):\n        if guess[i]==game[i]:\n   \
    \         guess_count+=1\n            diff.append(0)\n        else:\n        \
    \    diff.append(abs(game[i]-guess[i]))\n    diff.append(abs(game_total-guess_count))\n\
    \    return diff\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_acweta9.py\", line 27\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 51)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [\n                [0, 1, 2, 3, 4],\n                [1, 2, 3, 4],\n       \
    \         [2, 3, 4]\n            ]\n    \n            guesses\n            --------\n\
    \            \n            [\n                3, \n                2, \n     \
    \           2, \n                0\n            ]\n    \n            scores\n\
    \            ------\n            \n            [\n                3, \n      \
    \          2, \n                1, \n                3\n            ]\n    \n\
    \            returns:\n            \n            [\n                0, \n    \
    \            2, \n                1, \n                3\n            ]\n    \"\
    \"\"\n    \n    if len(game) != len(guess):\n        return \"ERROR\"\n      \
    \  \n    \n    difs = [0 for x in range(len(guess))]\n    \n    \n    for x in\
    \ range(len(game)):\n        difs[x] = abs(game[x] - guess[x])\n        \n   \
    \ \n    return difs\n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxhp18r0q.py\", line 16\n    [\nIndentationError: unexpected\
    \ indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n        \n \
    \       guess = [0, 7, 1, 8, 7, 0]\n        scores = [0, 5, 6, 2, 1, 1]\n    \
    \    compare(scores, guess)\n        [0, 0, 0, 1, 2, 2]\n            \n      \
    \      \"\"\"\n    \"\"\"\n    if len(scores != len(guess)) or len(scores) ==\
    \ 0:\n        return []\n    \n    \n    guessedCorrectly = 0\n    differences\
    \ = []\n    for i in range(len(scores)):\n        differences.append(abs(guess[i]\
    \ - scores[i]))\n        if guess[i] == scores[i]:\n            guessedCorrectly\
    \ += 1\n    \n    return differences\n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdbikxsiv.py\", line 17\n    guess = [0, 7, 1, 8, 7, 0]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [\n                [0, 6, 5, 2],\n                [2, 5, 2, 5],\n \
    \               [0, 3, 3, 4],\n            ]\n            guesses = [4, 0, 4]\n\
    \            \"\"\"\n\n    scores = [[0, 6, 5, 2],\n            [2, 5, 2, 5],\n\
    \            [0, 3, 3, 4],\n            ]\n    guesses = [4, 0, 4]\n\n    Your\
    \ code should return the list [6, -5, 2]\n\n    Args:\n        game: The scores\
    \ obtained after each guess\n        guess: The guesses obtained in a row\n  \
    \  Returns:\n        A list of the difference between the guess and the corresponding\
    \ score\n    Raises:\n        ValueError: If the length of either of the arrays\
    \ given are not equal.\n    \"\"\"\n    if len(game) != len(guess):\n        raise\
    \ ValueError('game and guess are of different lengths')\n    differences = []\n\
    \    for index, x in enumerate(guess):\n        differences.append(abs(x - game[index]))\n\
    \    return differences\n\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpimer_obm.py\", line 16\n    scores = [\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    >>>\
    \ compare(game=[7, 5, 4, 9, 4, 8, 6, 7, 4, 8, 7], guess=[4, 7, 4, 8, 4, 7, 7,\
    \ 4, 7, 4])\n    [-4, -1, -3, -2, -4, -4, -3, -2, -1, -2, -3]\n    \n    \"\"\"\
    \n    guesses_sum = 0\n    scores = []\n    for i in range(0, len(guess)):\n \
    \       guesses_sum += guess[i]\n        scores.append(game[i] - guesses_sum)\n\
    \    return scores\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp8q5ceu39.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 37)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10,10,9,7,7,8,8] \n            guesses = [1,2,3,4,5,6,7]\n       \
    \     result = compare(scores,guesses)\n            print(result)\n          \
    \  # prints [0, 1, 2, 3, 2, 3, 0]\n            \"\"\"\n    \"\"\"\n    results\
    \ = []\n    for i in range(len(scores)):\n        results.append(0 if abs(guess[i]\
    \ - scores[i]) > 0 else abs(guess[i] - scores[i]))\n    return results\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptj1_2s9k.py\", line 16\n    scores = [10,10,9,7,7,8,8]\
    \ \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [6, 10, 8, 5, 10, 10, 7, 7, 8, 9],\n            [7, 8, 7, 4, 8, 7, 9, 9, 7,\
    \ 9]\n            \n    The first array has 6 correct guesses at position 0, and\
    \ only 7 incorrectly guesses at position 1.\n    Therefore, the output should\
    \ be:\n            [0, 7, 3, 6, 2]\n\n    You do not need to consider what happened\
    \ on other positions.\n    It is OK to return a guess that is larger than the\
    \ actual score.\n    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7njyglz8.py\", line 16\n    [6, 10, 8, 5, 10, 10, 7, 7,\
    \ 8, 9],\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            game = [2, 4, 4, 2, 6, 8, 4, 4]\n            guess = [4, 4, 2,\
    \ 6, 8, 10, 10, 4]\n            \n            compare(game, guess) returns:\n\
    \            \n            [4, 4, 0, 1, 4, 3, 0, 0, 3]\n            \n       \
    \     \n    \"\"\"\n    game, guess = zip(*sorted(zip(game, guess)))\n    return\
    \ list(map((lambda x: abs(x - y)), game))\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprkv4p39t.py\", line 17\n    game = [2, 4, 4, 2, 6, 8,\
    \ 4, 4]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 4, 3, 2, 1, 2, 4, 3]\n            guess = [3, 2, 2, 4, 3, 5, 3, 2]\n\
    \            answer = [3, 2, 1, 0, 2, 1, 2, 1]\n            \"\"\"\n    \n   \
    \ \n    >>> game = [5, 4, 3, 2, 1, 2, 4, 3]\n    >>> guess = [3, 2, 2, 4, 3, 5,\
    \ 3, 2]\n    >>> answer = [3, 2, 1, 0, 2, 1, 2, 1]\n    >>> compare(game, guess)\n\
    \    [3, 2, 1, 0, 2, 1, 2, 1]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppkb5o9w0.py\", line 16\n    game = [5, 4, 3, 2, 1, 2,\
    \ 4, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3,0,2,1,5,1,4,0,3]\n            guess = [1,2,3,4,5]\n            print(compare(game,\
    \ guess))\n            # return [0, -1, -2, 0, 1, -2, 0, -1, 0]\n            \"\
    \"\"\n    \n    \n    \n    \n    \"\"\"\n    # your code here\n    match = [False]*len(guess)\n\
    \    for i,g in enumerate(guess):\n        match[i] = game[i] > g\n    return\
    \ match\n\n\ngame = [3,0,2,1,5,1,4,0,3]\nguess = [1,2,3,4,5]\nprint(compare(game,\
    \ guess))\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpfr3n_2kf.py\", line 16\n    game = [3,0,2,1,5,1,4,0,3]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [4,1,5,2,0,8]\n            guesses = [1,5,4,3,0,7]\n            compare(scores,\
    \ guesses) \u279E [1,-1,4,-1,-1,-1]\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          compare(scores, guesses)\n            compare(scores, guesses)\n  \
    \          \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpc1atahqc.py\", line 16\n    scores = [4,1,5,2,0,8]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> game\
    \ = [4, 4, 2, 2]\n    >>> guess = [4, 4, 3, 3]\n    >>> compare(game, guess)\n\
    \    [3, 3, 3, 0]\n    >>> game = [4, 4, 3, 2]\n    >>> guess = [4, 4, 2, 2]\n\
    \    >>> compare(game, guess)\n    [3, 3, 3, 1]\n    >>> game = [4, 4, 4, 2]\n\
    \    >>> guess = [4, 4, 3, 3]\n    >>> compare(game, guess)\n    [4, 4, 3, 3]\n\
    \    >>> game = [4, 2, 2, 4]\n    >>> guess = [4, 4, 4, 2]\n    >>> compare(game,\
    \ guess)\n    [3, 3, 3, 3]\n    >>> game = [4, 4, 4, 4]\n    >>> guess = [4, 4,\
    \ 4, 4]\n    >>> compare(game, guess)\n    [3, 3, 3, 3]\n    >>> game = [4, 2,\
    \ 2, 4]\n    >>> guess = [4, 4, 2, 4]\n    >>> compare(game, guess)\n    [3, 3,\
    \ 3, 2]\n    >>> game = [4, 4, 4, 2]\n    >>> guess = [4, 2, 2, 4]\n    >>> compare(game,\
    \ guess)\n    [3, 3, 3, 1]\n    >>> game = [4, 4, 4, 2]\n    >>> guess = [4, 4,\
    \ 4, 2]\n    >>> compare(game, guess)\n    [3, 3, 3, 0]\n    >>> game = [4, 4,\
    \ 2, 2]\n    >>> guess = [4, 4, 4, 4]\n    >>> compare(game, guess)\n    [3, 3,\
    \ 3, 3]\n    >>> game = [4, 4, 4, 2]\n    >>> guess = [4, 4, 4, 2]\n    >>> compare(game,\
    \ guess)\n    [3, 3, 3, 0]\n    >>> game = [4, 4, 2, 2]\n    >>> guess = [4, 4,\
    \ 4, 2]\n    >>> compare(game, guess)\n    [3, 3, 3, 0]\n    >>> game = [4, 4,\
    \ 4, 2]\n    >>> guess = [4, 2, 2, 4]\n    >>> compare(game, guess)\n    [3, 3,\
    \ 3, 0]\n    >>> game = [4, 4, 4, 2]\n    >>> guess = [4, 4, 2, 2]\n    >>> compare(game,\
    \ guess)\n    [3, 3, 3, 0]\n    >>> game = [4, 4, 4, 2]\n    >>> guess = [4, 4,\
    \ 2, 2]\n    >>> compare(game, guess)\n    [3, 3, 3, 0]\n    >>> game = [4, 2,\
    \ 2, 4]\n    >>> guess = [4, 4, 4, 2]\n    >>> compare(game, guess)\n    [3, 3,\
    \ 3, 0]\n    >>> game = [4, 4, 2, 2]\n    >>> guess = [4, 2, 2, 4]\n    >>> compare(game,\
    \ guess)\n    [3, 3, 3, 0]\n    \"\"\"\n    # I won't code this because its too\
    \ much for a one liner\n    # I hope this helps a bit\n    # I might not be able\
    \ to implement this in a one-liner because of recursion\n    # this can be done\
    \ by doing some list comprehensions and zips\n\n    # This is my solution\n  \
    \  # I think I have an idea of how to do it though\n    # I should make a function\
    \ that takes in a guess and returns true if it is correct\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr48vdnls.py\", line 80\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 98)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ match = [1,1,1,2,2,2]\n            guess = [1,0,0,1,1,1]\n            \n   \
    \         print(compare(match, guess))\n            \n            [0,0,3,3,3,3]\n\
    \            \"\"\"\n    \n    \n    \n    \"\"\"\n    your code here\n    \"\"\
    \"\n    \n    \n    if len(match) != len(guess):\n        print(\"Error: the number\
    \ of matches and guesses do not match\")\n        \n        return [0,0,0,0,0,0]\n\
    \        \n    \n    \n    \n    \n    if guess[0] == 0 and guess[1] == 0 and\
    \ guess[2] == 0 and guess[3] == 0 and guess[4] == 0 and guess[5] == 0:\n     \
    \   return [0,0,0,0,0,0]\n    \n    else:\n        if guess[0] == match[0] or\
    \ guess[1] == match[1] or guess[2] == match[2] or guess[3] == match[3] or guess[4]\
    \ == match[4] or guess[5] == match[5]:\n            return [0,0,0,0]\n       \
    \ else:\n            correct_answer = 0\n            for i in range(len(match)):\n\
    \                if guess[i] == match[i]:\n                    correct_answer\
    \ += 1\n            \n            differences = []\n            for i in range(len(match)):\n\
    \                differences.append(abs(match[i]-guess[i]))\n            \n  \
    \          return differences\n            \n            \n    \n    \n    \n\
    \            \n            \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6xl9iqtd.py\", line 16\n    match = [1,1,1,2,2,2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ score : [2,3,6,1,8,9,6,7,0,4,5,1,0,7]\n            guess : [8,2,6,4,7,9,1,3,5,6,7,0,4,5,1,0]\n\
    \            results : [2,2,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,1]\n          \
    \  \n            correct : [0,0,-1,0,-3,0,-3,0,-1,0,-3,0,-1,0,-3,0]\n        \
    \    \n            \"\"\"\n    \n    Args:\n        game: A list of ints describing\
    \ the scores of matches.\n        guess: A list of ints describing the guesses.\n\
    \    \n    Returns:\n        List[int]: The scores representing how far off the\
    \ guesses were from correctness.\n    \"\"\"\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzgxlyivr.py\", line 16\n    score : [2,3,6,1,8,9,6,7,0,4,5,1,0,7]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 1, 5]\n            guess = [1, 1, 4, 2, 3]\n            \n\
    \            answer = [-1, -1, -1, 0, 0]\n            \n            print(compare(game,\
    \ guess))\n            \n            guess = [1, 2, 3, 1, 4]\n            answer\
    \ = [0, 0, 0, -1, -1]\n            print(compare(game, guess))\n            \n\
    \            guess = [1, 4, 1, 1, 3]\n            answer = [0, 0, 0, 1, -1]\n\
    \            print(compare(game, guess))\n            \n            guess = [1,\
    \ 2, 3, 2, 1]\n            answer = [0, 0, 0, 0, 0]\n            print(compare(game,\
    \ guess))\n            \"\"\"\n    \n    \n    \"\"\"\n    \n    \n\n    \"\"\"\
    \n    \n    \n    \n    \n    \"\"\"\n        \n            \n    \n    \n   \
    \ \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \n    \"\"\
    \"\n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n \
    \   \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\
    \"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n\
    \    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnp_1v5ww.py\", line 16\n    game = [1, 2, 3, 1, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3, 2, 4, 6, 2, 1]\n            guess = [2, 4, 6, 6, 2, 1]\n        \
    \    compare(game, guess)\n            \n            \"\"\"\n            # should\
    \ return: [-1, 0, 1, 3, 1, 0, 0]\n    \"\"\"\n\n    \n    \n    \n    \n    \n\
    \n    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n\n\
    \    \n    \n    \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2vwgevsq.py\", line 16\n    game = [3, 2, 4, 6, 2, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [1, 2, 3, 4], [2, 3, 3, 1]\n            \n            should return:\n     \
    \       [1, 0, 1, 0]\n\n    I believe the returned array will be zero-indexed\
    \ in the beginning (but I'm not sure for sure).\n    The returned array will always\
    \ have one value less than the length of the input arrays.\n    \"\"\"\n    diff\
    \ = []\n    for index in range(len(guess)):\n        if guess[index] == game[index]:\n\
    \            diff.append(0)\n        else:\n            diff.append(abs(guess[index]\
    \ - game[index]))\n    return diff\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptvkkeoo0.py\", line 16\n    [1, 2, 3, 4], [2, 3, 3, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [3,5,8,4,7]\n    guesses = [1,3,5,2,8]\n    result = compare(scores, guesses)\n\
    \    print(result)\n    \n    \n    \n    scores = [7,8,5,2,4]\n    guesses =\
    \ [1,3,5,2,8]\n    result = compare(scores, guesses)\n    print(result)\n    \"\
    \"\"\n    \n    \n    \n    \n    \n    \n\n<|/ file filename=Day03.py source=github\
    \ |>\n<| c |>\nThanks for your contributions. I understand your answer - it really\
    \ helped me understand the problem a lot better.\n<|/ c |>\n<| a dscore=0 tags=python,list\
    \ |>\nI finally got it! The key was to break down the problem in smaller pieces.\n\
    I created a program that takes two lists, and returns whether they were equal:\n\
    <code>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpvie9_hc0.py\", line 27\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 52)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [1, 2, 3], [4, 5, 6] should return [-5, -3, -1]\n            \"\"\"\n      \
    \      \n    Args:\n        game: a list of ints that contains the scores given\
    \ in a certain game\n        guess: a list of the correct answer\n    \"\"\"\n\
    \    return list(map(lambda x:abs(x-guess[0]), game))\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxrtpl4s7.py\", line 16\n    [1, 2, 3], [4, 5, 6] should\
    \ return [-5, -3, -1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [13, 4, 10, 17, 19, 4, 9, 12, 16]\n    guesses = [5, 13, 5, 10, 12, 5, 17, 11,\
    \ 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n    \n\
    \    answer = [1, 1, 2, 2, 3, 3, 4, 4, 4]\n    guesses = [4, 9, 12, 16, 5, 13,\
    \ 10, 17, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [0, 0, 0, 0, 0, 0, 0, 0]\n    guesses = [4, 9, 12, 16, 5,\
    \ 13, 10, 17, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [0, 0, 0, 0, 0, 0, 0, 0]\n    guesses = [5, 13, 5, 10, 12,\
    \ 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [0, 0, 0, 0, 0, 0, 0, 0]\n    guesses = [5, 13, 5, 10, 12,\
    \ 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 2, 2, 3, 3, 4, 4, 4]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 2, 2, 3, 3, 4, 4, 4]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 2, 2, 3, 3, 4, 4, 4]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [0, 0, 0, 0, 0, 0, 0, 0]\n    guesses = [5, 13, 5, 10, 12,\
    \ 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 1, 1, 1, 1, 1, 2, 2]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 1, 1, 1, 1, 1, 2, 2]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 1, 1, 1, 1, 1, 2, 2]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\n    \n    answer = compare(scores, guesses)\n    print(answer)\n\
    \    \n    answer = [1, 1, 1, 1, 1, 1, 1, 2, 2]\n    guesses = [5, 13, 5, 10,\
    \ 12, 5, 17, 11, 19]\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp15pwll0v.py\", line\
    \ 99, in <module>\n    test_check()\n  File \"/tmp/tmp15pwll0v.py\", line 97,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmp15pwll0v.py\", line 91,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\n  File \"/tmp/tmp15pwll0v.py\", line 19, in compare\n    answer\
    \ = compare(scores, guesses)\n  File \"/tmp/tmp15pwll0v.py\", line 19, in compare\n\
    \    answer = compare(scores, guesses)\n  File \"/tmp/tmp15pwll0v.py\", line 19,\
    \ in compare\n    answer = compare(scores, guesses)\n  [Previous line repeated\
    \ 994 more times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ compare([2,1,0,1], [2,0,1])\n            ->\n            [2]\n            \n\
    \            compare([2,1,0,1], [2,2,0,1])\n            ->\n            [-2, -1,\
    \ 0]\n            \n            compare([2,1,0,1], [2,1,0,1])\n            ->\n\
    \            [0, 3, 0]\n            \n            \"\"\"\n            \n\n   \
    \ \"\"\"\n    \n    # your code here\n    \n    pass\n\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_661ld77.py\", line 16\n    compare([2,1,0,1], [2,0,1])\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([1,2,3,4,5],\
    \ [1,3,5,7,9])\n    [-1, -1, 0, 0, 1]\n    >>> compare([1,2,3,4,5], [1,3,5,6,9])\n\
    \    [1, 2, 1, 1, -1]\n    >>> compare([1,2,3,4,5], [1,3,5,9,9])\n    [0, 0, 1,\
    \ 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,9])\n    [1, 1, -1, 0, 0]\n   \
    \ >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [-1, -1, 1, -2, -1]\n    >>> compare([1,2,3,4,5],\
    \ [1,2,3,6,10])\n    [2, -1, 1, -1, -1]\n    >>> compare([1,2,3,4,5], [1,2,3,6,10])\n\
    \    [2, -1, 1, -1, -1]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1,\
    \ -1, 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1, -1, 0, 0]\n\
    \    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1, -1, 0, 0]\n    >>> compare([1,2,3,4,5],\
    \ [1,2,3,5,10])\n    [1, 1, -1, 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n\
    \    [1, 1, -1, 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1,\
    \ -1, 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1, -1, 0, 0]\n\
    \    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1, -1, 0, 0]\n    >>> compare([1,2,3,4,5],\
    \ [1,2,3,5,10])\n    [1, 1, -1, 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n\
    \    [1, 1, -1, 0, 0]\n    >>> compare([1,2,3,4,5], [1,2,3,5,10])\n    [1, 1,\
    \ -1, 0, 0]\n    \"\"\"\n\n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpiqossw78.py\", line 52\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 167)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1,2,1,5]\n            guess = [1,1,5,1]\n            compare(scores,\
    \ guess) \n            # should return [4,-2,0,0]\n            \"\"\"\n    \n\
    \    \n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n    \n    \n\
    \    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1vkcpox6.py\", line 16\n    scores = [1,2,1,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ score = array([0, 2, 3, 7, 4])\n            guess = array([2, 6, 8, 2, 7])\n\
    \            guesses(score, guess)\n            array([ 0,  0, 14, 14, 28])\n\
    \            \n    \n    \"\"\"\n    # Your code here\n    if len(guesses) !=\
    \ len(scores):\n        raise ValueError('guesses length and scores length not\
    \ equal')\n\n    diff = abs(guess - scores)\n    \n    correct_guesses = 0\n \
    \   correct_scores = 0\n    for i in range(0, len(guesses)):\n        if guesses[i]\
    \ == scores[i]:\n            correct_guesses += 1\n            correct_scores\
    \ += 1\n        else:\n            diff += guesses[i] - scores[i]\n    \n    return\
    \ [correct_guesses, correct_scores, diff]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwxdlgoim.py\", line 16\n    score = array([0, 2, 3, 7,\
    \ 4])\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores: [10,100,90,40,70]\n            guesses: [92,93,84,85,41]\n         \
    \   \n            Returns:\n            [0, 1, 0, 3, 0]\n            \"\"\"\n\
    \    \"\"\"\n    # Your solution here\n    \n    return guesses - scores\n\n</cell>\n\
    <text>\nTests\nLet's test our solution:\n\n\n</text>\n<cell>\ngame = [10, 100,\
    \ 90, 40, 70]\nguess = [92, 93, 84, 85, 41]\n\nsolution = compare(game, guess)\n\
    print(f\"The correct answer was {solution}\")\n</cell>\n<text>\nWhat happens if\
    \ we change the order of the lists?\n\n\n</text>\n<cell>\ngame = [10, 100, 90,\
    \ 40, 70]\nguess = [93, 92, 84, 85, 41]\n\nsolution = compare(game, guess)\nprint(f\"\
    The correct answer was {solution}\")\n</cell>\n<text>\nWhat happens when one of\
    \ the lists is empty?\n\n\n</text>\n<cell>\ngame = [10, 100, 90, 40, 70]\nguess\
    \ = []\n\nsolution = compare(game, guess)\nprint(f\"The correct answer was {solution}\"\
    )\n</cell>\n<text>\nWhat if we want to use the same function for multiple lists?\n\
    \n\n</text>\n<cell>\ngame = [10, 100, 90, 40, 70]\nguess = [92, 93, 84, 85, 41]\n\
    \nsolution = compare(game, guess)\nprint(f\"The correct answer was {solution}\"\
    )\n</cell>\n<cell>\ngame = [10, 100, 90, 40, 70]\nguess = [92, 93, 84, 85, 41]\n\
    \nsolution = compare(game, guess)\nprint(f\"The correct answer was {solution}\"\
    )\n</cell>\n<text>\nHow about a test case?\n\n\n</text>\n<cell>\ngame = [10, 100,\
    \ 90, 40, 70]\nguess = [93, 92, 84, 85, 41]\n\nsolution = compare(game, guess)\n\
    print(f\"The correct answer was {solution}\")\n</cell>\n<text>\nCan we make our\
    \ solution more elegant? We can use map to iterate through two lists.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcl_6l36q.py\", line 16\n    scores: [10,100,90,40,70]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    game\
    \ = [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6]\n    guess = [6, 6, 6, 6, 6, 6,\
    \ 6, 6, 6, 6, 6, 6, 6, 6]\n    compare(game, guess)\n    \n    \n    \"\"\"\n\
    \    \n    correct = 0\n    wrong = 0\n    \n    for i in range(len(game)):\n\
    \        if game[i] == guess[i]:\n            correct += 1\n        else:\n  \
    \          wrong += 1\n    \n    result = []\n    for i in range(len(guess)):\n\
    \        difference = abs(guess[i] - game[i])\n        if difference > 0:\n  \
    \          result.append(difference)\n        elif difference < 0:\n         \
    \   result.append(0 - difference)\n        else:\n            result.append(0)\n\
    \            \n    \n    return result \n    \n            \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmphxob5kgp.py\", line 22\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 58)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [10,20,30,40,50,60,70]\n    guesses = [70,60,50,40,30,20,10]\n    compare(scores,\
    \ guesses)\n    returns [0,10,20,20,20,20,20,20]\n    \n    \n    \n    You can\
    \ solve this problem in various ways:\n    \n    \n    \n    \n    \n    \n  \
    \  \"\"\"\n    correct = 0\n    for i in range(len(guesses)):\n        diff =\
    \  abs(guesses[i] - scores[i])\n        if diff == 0:\n            correct +=\
    \ 1\n        else:\n            correct += diff\n    return correct\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3ui_7sbh.py\", line 30\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 49)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 15, 3, 8, 11]\n            guesses = [10, 5, 8, 9, 4]\n      \
    \      compare(scores, guesses)\n            returns [2, 0, -1, -4, -3]\n    \
    \        \"\"\"\n            \n    \n    \"\"\"\n    scores = [10, 15, 3, 8, 11]\n\
    \    guesses = [10, 5, 8, 9, 4]\n    \n    \n    \"\"\"\n\n    \n    \n    return\
    \ scores\n    \n\"\"\"\nWhat happens when you run compare(scores, guesses) on\
    \ the above example input?\n\"\"\"\n</cell>\n<text>\nPart 4: The function itself\n\
    To finish this part you will have finished the function compare, which you had\
    \ already written for you. \nYour job is to fill in the body of the function.\n\
    The function should take two parameters called score and guess. \nThe function\
    \ should return the list of values returned from compare(score, guess) \nthat\
    \ compares both score and guess to determine the difference between them. \nThe\
    \ function should return an array of the same length as guess where each index\
    \ shows the difference between the guess and the corresponding score. \nThis difference\
    \ should be negative if the guessed value is less than the score value, and positive\
    \ otherwise.\nThe function should allow for an arbitrary number of guesses but\
    \ if there are more guesses, only as many differences as are needed to determine\
    \ which guesses were correct are returned.\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpshs6o7kl.py\", line 16\n    scores = [10, 15, 3, 8, 11]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ guess = [1, 2, 3, 4, 5]\n            score = [9, 8, 7, 6, 5]\n            result\
    \ = [0, 0, 0, 0, 0]\n            compare(guess, score)\n            result = [0,\
    \ 0, 0, 0, 0]\n            guess = [1, 1, 3, 4, 5]\n            score = [9, 9,\
    \ 9, 9, 9]\n            result = [1, 0, 1, 0, 0]\n            compare(guess, score)\n\
    \            result = [1, 0, 1, 0, 0]\n            guess = [1, 4, 4, 4, 5]\n \
    \           score = [9, 9, 9, 9, 9]\n            result = [2, 0, 1, 0, 0]\n  \
    \          compare(guess, score)\n            result = [2, 0, 1, 0, 0]\n     \
    \       guess = [9, 9, 9, 9, 9]\n            score = [9, 9, 9, 9, 9]\n       \
    \     result = [9, 0, 1, 0, 0]\n            compare(guess, score)\n          \
    \  result = [9, 0, 1, 0, 0]\n            guess = [9, 9, 9, 9, 9]\n           \
    \ score = [9, 9, 9, 9, 9]\n            result = [9, 8, 1, 1, 0]\n            compare(guess,\
    \ score)\n            result = [9, 8, 1, 1, 0]\n            guess = [9, 9, 9,\
    \ 9, 9]\n            score = [9, 8, 1, 9, 1]\n            result = [9, 8, 1, 0,\
    \ 0]\n            compare(guess, score)\n            result = [9, 8, 1, 0, 0]\n\
    \            guess = [9, 9, 9, 9, 9]\n            score = [9, 9, 9, 9, 9]\n  \
    \          result = [9, 8, 1, 9, 9]\n            compare(guess, score)\n     \
    \       result = [9, 8, 1, 9, 9]\n            guess = [9, 9, 9, 9, 9]\n      \
    \      score = [9, 8, 9, 9, 1]\n            result = [9, 8, 9, 0, 0]\n       \
    \     compare(guess, score)\n            result = [9, 8, 9, 0, 0]\n          \
    \  guess = [9, 9, 9, 9, 9]\n            score = [9, 8, 9, 9, 9]\n            result\
    \ = [9, 8, 9, 9, 1]\n            compare(guess, score)\n            result = [9,\
    \ 8, 9, 9, 1]\n            guess = [9, 8, 9, 9, 9]\n            score = [9, 8,\
    \ 9, 9, 9]\n            result = [9, 8, 9, 9, 9]\n            compare(guess, score)\n\
    \            result = [9, 8, 9, 9, 9]\n            guess = [9, 8, 9, 9, 9]\n \
    \           score = [9, 8, 9, 9, 9]\n            result = [9, 8, 9, 9, 9]\n  \
    \          compare(guess, score)\n            result = [9, 8, 9, 9, 9]\n     \
    \       guess = [9, 8, 9, 9, 9]\n            score = [9, 8, 9, 9, 9]\n       \
    \     result = [9, 8, 9, 9, 9]\n            compare(guess, score)\n          \
    \  result = [9, 8, 9, 9, 9]\n            guess = [9, 8, 9, 9, 9]\n           \
    \ score = [9, 8, 9, 9, 9]\n            result = [9, 8, 9, 9, 9]\n            compare(guess,\
    \ score)\n            result = [9, 8, 9, 9, 9]\n            guess = [9, 8, 9,\
    \ 9, 9]\n            score = [9, 8, 9, 9, 9]\n            result = [9, 8, 9, 9,\
    \ 9]\n            compare(guess, score)\n            result = [9, 8, 9, 9, 9]\n\
    \            gues\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpg_1zep5h.py\", line 16\n    guess = [1, 2, 3, 4, 5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60, 70, 80]\n            guess = [10, 20, 30, 40,\
    \ 50]\n            \"\"\"\n    \n    \"\"\"\n    game: List[int] = []\n    guess:\
    \ List[int] = []\n    score: List[int] = []\n    \n    \n    game.append(int(input()))\n\
    \    guess.append(int(input()))\n    score.append(int(input()))\n    \n    \n\
    \    score[game.index(min(game))] += abs(guess[game.index(min(game))] - min(game))\n\
    \    game.remove(min(game))\n    guess.remove(min(game))\n    \n    if guess[game.index(min(game))]\
    \ == min(game):\n        score[game.index(min(game))] += abs(guess[game.index(min(game))]\
    \ - min(game))\n        game.remove(min(game))\n        guess.remove(min(game))\n\
    \    \n    return score\n        \n    \n    \ngame: List[int] = []\nguess: List[int]\
    \ = []\nscore: List[int] = []\n    \ngame.append(int(input()))\nguess.append(int(input()))\n\
    score.append(int(input()))\n\nscore[game.index(min(game))] += abs(guess[game.index(min(game))]\
    \ - min(game))\ngame.remove(min(game))\nguess.remove(min(game))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7y5hnt6d.py\", line 16\n    game = [10, 20, 30, 40, 50,\
    \ 60, 70, 80]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    game\
    \ = [1,0,1,0]\n    guess = [0,1,0,0]\n    \"\"\"\n    answers = []\n    for i\
    \ in range(len(game)):\n        diff = abs(game[i] - guess[i])\n        if game[i]\
    \ == 0 and guess[i] == 0:\n            answers.append(diff)\n        elif game[i]\
    \ != 0 and guess[i] == 0:\n            answers.append(diff)\n        elif game[i]\
    \ == 0 and guess[i] != 0 :\n            answers.append(diff)\n    return answers\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyvt9pgk2.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 40)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [5,\
    \ 2, 3, 5, 1, 6, 3]\n    guess = [5, 2, 1, 1, 3, 6]\n    \n    The first index\
    \ shows that person got 5 correct and 3 incorrect\n    The second index shows\
    \ that person got 2 correct and 1 incorrect\n    The third index shows that person\
    \ got 1 correct and 3 incorrect\n    The fourth index shows that person got 2\
    \ correct and 1 incorrect\n    The fifth index shows that person got 3 correct\
    \ and 1 incorrect\n    The sixth index shows that person got 5 correct and 6 incorrect\n\
    \    The seventh index shows that person got 6 correct and 3 incorrect\n    The\
    \ eighth index shows that person got 3 correct and 6 incorrect\n    \n    guess\
    \ = [5, 1, 1, 3, 6, 3]\n    \n    The first index shows that person got 5 correct\
    \ and 1 incorrect\n    The second index shows that person got 1 correct and 1\
    \ incorrect\n    The third index shows that person got 3 correct and 1 incorrect\n\
    \    The fourth index shows that person got 1 correct and 1 incorrect\n    The\
    \ fifth index shows that person got 3 correct and 6 incorrect\n    The sixth index\
    \ shows that person got 6 correct and 3 incorrect\n    The seventh index shows\
    \ that person got 3 correct and 6 incorrect\n    The eighth index shows that person\
    \ got 6 correct and 3 incorrect\n    \"\"\"\n    \n    correct = 0\n    wrong\
    \ = 0\n    \n    for i in range(len(game)):\n        if game[i] == guess[i]:\n\
    \            correct += 1\n        else:\n            wrong += abs(game[i] - guess[i])\n\
    \            \n    diff = sorted([wrong,correct])\n    return diff\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpumkfy5_1.py\", line 38\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 61)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3, 2, 2, 1, 4]\n            guess = [1, 6, 2, 5, 3]\n            expected\
    \ = [0, 3, 9, 4, 0]\n            result = compare(game, guess)\n            print(result)\
    \  # Should print [0, 3, 9, 4, 0]\n            \"\"\"\n    \n    \"\"\"\n\n  \
    \  if guess == []:\n        return game\n\n    diff = []\n    for i in range(0,\
    \ len(guess)):\n        if guess[i] != game[i]:\n            diff.append(abs(guess[i]\
    \ - game[i]))\n    \n    if guess[-1] == game[-1]:\n        return diff + [0]\n\
    \    else:\n        return diff\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpduo6ace0.py\", line 16\n    game = [3, 2, 2, 1, 4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n     \
    \       game = [1, 2, 3, 5]\n            guess = [6, 4]\n    \n            Output:\n\
    \    \n            [-3, 0, 3]\n            \n            \"\"\"\n    \"\"\"\n\
    \    scores = []\n    \n    for game in game:\n        for guess in guess:\n \
    \           scores.append(abs(guess - game))\n\n    return scores\n    \"\"\"\n\
    \    \n    \n    pass\n\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpn0kmsoii.py\", line 17\n    game = [1, 2, 3, 5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1,5,3]\n            guesses = [2,3,6]\n            guesses\n     \
    \       scores\n            compare(scores, guesses)\n            guesses = [2,1,3]\n\
    \            guesses\n            compare(scores, guesses)\n            guesses\
    \ = [-1,4,-3]\n            guesses\n            compare(scores, guesses)\n   \
    \         guesses = [-4,-5,-1]\n            guesses\n            compare(scores,\
    \ guesses)\n            \"\"\"\n    \n    guesses = [-1,4,-3]\n    scores   =\
    \ [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\n    \n    guesses = [-4,-5,-1]\n\
    \    scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\n    \n    guesses\
    \ = [-1,4,-3]\n    scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\
    \n    \n    guesses = [-4,-5,-1]\n    scores   = [1,5,3]\n    compare(scores,\
    \ guesses)\n    \"\"\"\n    \n    guesses = [-1,4,-3]\n    scores   = [1,5,3]\n\
    \    compare(scores, guesses)\n    \"\"\"\n    \n    guesses = [-4,-5,-1]\n  \
    \  scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\n    \n    guesses\
    \ = [-1,4,-3]\n    scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\
    \n    \n    guesses = [-4,-5,-1]\n    scores   = [1,5,3]\n    compare(scores,\
    \ guesses)\n    \"\"\"\n    \n    guesses = [-1,4,-3]\n    scores   = [1,5,3]\n\
    \    compare(scores, guesses)\n    \"\"\"\n    \n    guesses = [-4,-5,-1]\n  \
    \  scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\n    \n    guesses\
    \ = [-1,4,-3]\n    scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\
    \n    \n    guesses = [-4,-5,-1]\n    scores   = [1,5,3]\n    compare(scores,\
    \ guesses)\n    \"\"\"\n    \n    guesses = [-1,4,-3]\n    scores   = [1,5,3]\n\
    \    compare(scores, guesses)\n    \"\"\"\n    \n    guesses = [-4,-5,-1]\n  \
    \  scores   = [1,5,3]\n    compare(scores, guesses)\n    \"\"\"\n    \n    gues\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1xtpg_zj.py\", line 16\n    scores = [1,5,3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 5, 4, 4, 0, 3, 1]\n            guesses = [1, 5, 3, 4, 0, 3, 2]\n\
    \            print(compare(scores, guesses))\n            >> [2, 3, 1, 1, -2,\
    \ -3]\n            \"\"\"\n    \n    \n    \"\"\"\n    # YOUR CODE HERE\n    \n\
    \    guesses_to_scores = zip(guesses, scores)\n    \n    correct_guesses = guesses_to_scores\
    \ #zip creates tuples instead of lists.\n    correct_guesses_indexes = [i for\
    \ i,j in enumerate(correct_guesses) if j==True]\n    \n    differences = [abs(guesses[i]\
    \ - scores[j]) for i in range(len(guesses)) for j in correct_guesses_indexes]\n\
    \    \n    return differences\n    \n    \"\"\"\n    \n    \n    \"\"\"\n    #\
    \ YOUR CODE HERE\n    \n    guesses_to_scores = zip(guesses, scores)\n    \n \
    \   correct_guesses = guesses_to_scores #zip creates tuples instead of lists.\n\
    \    \n    \n    \n    \n    differences = [abs(guesses[i] - scores[j]) for i\
    \ in range(len(guesses)) for j in correct_guesses]\n    \n    return differences\n\
    \    \n    \n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    #\
    \ YOUR CODE HERE\n    \n    guesses_to_scores = zip(guesses, scores)\n    \n \
    \   correct_guesses = guesses_to_scores #zip creates tuples instead of lists.\n\
    \    \n    \n    \n    differences = [abs(guesses[i] - scores[j]) for i in range(len(guesses))\
    \ for j in correct_guesses if guesses[i]==j]\n    \n    return differences\n \
    \   \n    \n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    #\
    \ YOUR CODE HERE\n    \n    guesses_to_scores = zip(guesses, scores)\n    \n \
    \   correct_guesses = guesses_to_scores #zip creates tuples instead of lists.\n\
    \    \n    \n    \n    differences = [abs(guesses[i] - scores[j]) for i in range(len(guesses))\
    \ for j in correct_guesses if guesses[i]!=j]\n    \n    return differences\n \
    \   \n    \n    \n    \n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    #\
    \ YOUR CODE HERE\n    \n    guesses_to_scores = zip(guesses, scores)\n    \n \
    \   correct_guesses = guesses_to_scores #zip creates tuples instead of lists.\n\
    \    \n    \n    \n    differences = [abs(guesses[i] - scores[j]\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpf5ztsppq.py\", line 16\n    scores = [1, 5, 4, 4, 0, 3,\
    \ 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [10, 20, 30, 40, 50, 60, 70]\n    guesses = [10, 20, 30, 40, 50]\n    compare(scores,\
    \ guesses) --> [1, 2, 3, 2, 3, 1, 3]\n\n    \"\"\"\n    if len(guesses) != len(scores):\n\
    \        raise Exception(\"Guess and Scores must be the same length\")\n    return\
    \ [i == j for i, j in zip(scores, guesses)]\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp0iwfvusl.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 34)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [-4,\
    \ 2, -2, 2, -1, 4, -1, -2, 2, 4, -4]\n    guess = [-1, -1, 1, 1, -1, 0, -2, 1,\
    \ -2, -1]\n    \n    compare(game, guess)\n    \"\"\"\n    \n    # return a list\
    \ of tuples (diff, score, guess)\n    scores = [(abs(a-b), a, b) for a,b in zip(game,\
    \ guess)]\n    \n    # sort by diff\n    scores.sort()\n    \n    # return a list\
    \ of tuples (guess, score)\n    guess_scores = [t[2] for t in scores]\n    \n\
    \    # return a list of tuples (diff, guess)\n    diffs = [t[0] for t in scores]\n\
    \    \n    diffs_guesses = []\n    \n    for d,s,g in zip(diffs, scores, guess_scores):\n\
    \        if s == g:\n            diffs_guesses.append((d, g))\n        else:\n\
    \            diffs_guesses.append((d, abs(s-g)))\n        \n    return diffs_guesses\n\
    \nprint(compare([-4, 2, -2, 2, -1, 4, -1, -2, 2, 4, -4], [-1, -1, 1, 1, -1, 0,\
    \ -2, 1, -2, -1]))\nprint(compare([-4, 2, -2, 2, -1, 4, -1, -2, 2, 4, -4], [-1,\
    \ -1, 1, 1, -1, 0, -2, 1, -2, -1]))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7i41joz3.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 57)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ >>> game = [2,3,4,5,6]\n            >>> guess = [2,6,3,5,3]\n            >>>\
    \ compare(game, guess)\n            [0,-2,-3,-4,0]\n            \n           \
    \ >>> game = [2,3,4,5,6]\n            >>> guess = [2,6,4,5,3]\n            >>>\
    \ compare(game, guess)\n            [0,-1,-4,-4,-1]\n            \n          \
    \  >>> game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,6]\n            >>>\
    \ compare(game, guess)\n            [0,0,3,-3,0]\n            \n            >>>\
    \ game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,5]\n            >>> compare(game,\
    \ guess)\n            [0,0,3,-3,0]\n            \n            >>> game = [2,3,4,5,6]\n\
    \            >>> guess = [2,3,5,4,6]\n            >>> compare(game, guess)\n \
    \           [0,0,0,3,0]\n            \n            >>> game = [2,3,4,5,6]\n  \
    \          >>> guess = [2,3,5,4,5]\n            >>> compare(game, guess)\n   \
    \         [0,0,0,3,0]\n            \n            >>> game = [2,3,4,5,6]\n    \
    \        >>> guess = [2,3,5,4,6]\n            >>> compare(game, guess)\n     \
    \       [0,0,0,0,3]\n            \n            >>> game = [2,3,4,5,6]\n      \
    \      >>> guess = [2,3,5,4,5]\n            >>> compare(game, guess)\n       \
    \     [0,0,0,0,3]\n            \n            >>> game = [2,3,4,5,6]\n        \
    \    >>> guess = [2,3,5,4,6]\n            >>> compare(game, guess)\n         \
    \   [0,0,0,0,0]\n            \n            >>> game = [2,3,4,5,6]\n          \
    \  >>> guess = [2,3,5,4,5]\n            >>> compare(game, guess)\n           \
    \ [0,0,0,0,3]\n            \n            >>> game = [2,3,4,5,6]\n            >>>\
    \ guess = [2,3,5,4,6]\n            >>> compare(game, guess)\n            [0,0,0,0,0]\n\
    \            \n            >>> game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,5]\n\
    \            >>> compare(game, guess)\n            [0,0,0,0,3]\n            \n\
    \            >>> game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,6]\n   \
    \         >>> compare(game, guess)\n            [0,0,0,0,0]\n            \n  \
    \          >>> game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,5]\n     \
    \       >>> compare(game, guess)\n            [0,0,0,0,3]\n            \n    \
    \        >>> game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,6]\n       \
    \     >>> compare(game, guess)\n            [0,0,0,0,0]\n            \n      \
    \      >>> game = [2,3,4,5,6]\n            >>> guess = [2,3,5,4,5]\n         \
    \   >>> compare(game, guess)\n            [0,0,0,0,3]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptvltmazt.py\", line 16\n    >>> game = [2,3,4,5,6]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            game = [3, 3, 4, 2, 2, 2]\n            guess = [3, 3, 1, 2, 3,\
    \ 3]\n            output = compare(game, guess)\n            print(output)  #\
    \ [0, 0, 0, 2, 5, 1]\n            \n            game = [3, 3, 4, 2, 2, 2]\n  \
    \          guess = [3, 3, 1, 3, 2, 2]\n            output = compare(game, guess)\n\
    \            print(output)  # [0, 0, 0, 2, 5, 1]\n            \n            \"\
    \"\"\n    \n    \n    \n    >>> compare([3, 3, 4, 2, 2, 2], [3, 3, 1, 2, 3, 3])\n\
    \    [0, 0, 0, 2, 5, 1]\n    >>> compare([3, 3, 4, 2, 2, 2], [3, 3, 1, 3, 2, 2])\n\
    \    [0, 0, 0, 2, 5, 1]\n    \"\"\"\n    \n    \n    # Your code here!\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnyi69lnw.py\", line 17\n    game = [3, 3, 4, 2, 2, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n            guess = [4,9,6,4,2,6,10,5,8,3,11,10,12,14,15]\n\
    \            result = compare(game, guess)\n            print(result)\n      \
    \      [0,1,1,1,0,1,0,1,1,1,0,1,1]\n    \n    \n    \n    \n    Do not take into\
    \ account the length of the arrays. Only their elements.\n    Use a nested for\
    \ loop\n    Do not sort the array\n    Use only the necessary number of comparisons\n\
    \    \"\"\"\n    result = []\n    for i in range(len(game)):\n        result.append(0)\n\
    \    for i in range(len(game) - len(guess)):\n        if game[i] == guess[i]:\n\
    \            result[i] = 0\n        else:\n            result[i] = abs(game[i]\
    \ - guess[i])\n    return result\n\"\"\"\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpyjqzd_yz.py\", line 16\n    game = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [6,1,4,5]\n            guess = [4,8,3]\n            Your function should\
    \ return:\n            [3,0,-1]\n            \"\"\"\n    \"\"\"\n    \n    # your\
    \ code here\n    scores = [game[0],game[1]]\n    guesses = [guess[0],guess[1]]\n\
    \    gameScore = abs(scores[0] - guesses[0])\n    guessScore = abs(scores[1] -\
    \ guesses[1])\n    if gameScore == guessScore:\n        return [guessScore]\n\
    \    else:\n        return [guessScore,gameScore]\n\ndef check(candidate):\n \
    \   assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmputxrxqqy.py\", line 16\n    game = [6,1,4,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ >>> game = [100,50,30,75,12]\n            >>> guess = [100,50,30,75,70]\n  \
    \          >>> print(compare(game,guess))\n            [0, 100, 0, 50, 75]\n \
    \           \"\"\"\n\n    Args:\n        game (list of int): list of scores that\
    \ a player has scored\n        guess (list of int): list of guesses made by the\
    \ player\n    \n    Returns:\n        List of int, representing the guesses made\
    \ by the player that are incorrect.\n    \"\"\"\n    pass\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwbyf22zc.py\", line 16\n    >>> game = [100,50,30,75,12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [7,\
    \ 4, 3, 1]\n    guess = [8, 4, 3, 1]\n    compare(game, guess)\n    returns:\n\
    \    [0, -1, 0, -1]\n    \"\"\"\n    \n    # Your solution here\n    guess.append(game[0])\n\
    \    diff = []\n    \n    \n    return diff\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1ok60js9.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 40)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [1,0,3,2,1,0,3]\n    guesses = [3,0,3,1,0,3,3]\n    result = compare(scores,\
    \ guesses)\n    print(result)\n    \"\"\"\n    if len(game) != len(guess):\n \
    \       raise Exception(\"Game and guesses do not have the same length\")\n\n\
    \    differences = []\n\n    for index, g in enumerate(guess):\n        if g ==\
    \ game[index]:\n            differences.append(0)\n        else:\n           \
    \ differences.append(abs(g - game[index]))\n    return differences\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3zkck8w1.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 42)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [100, 92, 83, 86, 71, 51, 49, 53, 48, 49, 50]\n            guess = [100,\
    \ 92, 83, 86, 71, 51, 49, 53, 48, 49, 50]\n            answer = [0, 0, 100, -100,\
    \ 100, 100, 0, 0, 0]\n            \n            \"\"\"\n            game = [1,\
    \ 5, 6, 8, 10]\n            guess = [1, 5, 6, 8, 10]\n            answer = [0,\
    \ 0, 0, 0, 0]\n    \"\"\"\n    return \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpyy3ic3m8.py\", line 16\n    game = [100, 92, 83, 86, 71,\
    \ 51, 49, 53, 48, 49, 50]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ score = \n            guess = [0, 3, 0, 4, 3]\n            # should return [0,\
    \ 3, 0, 0, 3]\n            # scores are [4, 1, 0, 3, 5]\n            # guesses\
    \ are [5, 2, 3, 1, 4]\n            \"\"\"\n    \n    score = [4, 1, 0, 3, 5]\n\
    \    guess = [5, 2, 3, 1, 4]\n    \n    \"\"\"\n    \n    def compare(game: List[int],\
    \ guess: List[int]) -> List[int]:\n        comp = []\n        comp = []\n    \
    \    comp = []\n        for i in range(len(game)):\n            if game[i] < guess[i]:\n\
    \                comp.append(0)\n            elif game[i] > guess[i]:\n      \
    \          comp.append(abs(game[i] - guess[i]))\n        return comp\n    \n \
    \   return compare\n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp82m7v_vy.py\", line 16\n    score = \nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    scores\
    \ = [1,2,3,4,5,6,7,8]\n    guesses = [2,4,6,8,10,12,14,16]\n    \n    answer =\
    \ compare(scores, guesses)\n    \n    print(answer)\n    \n    Expected Output:\n\
    \            [0, 0, 1, 0, 2, -1, 1, 0]\n    \"\"\"\n    \n    scores = [i for\
    \ sub in game[0] for i in sub]\n    \n    scores = np.array(scores).reshape(-1)\n\
    \    guesses = [i for sub in guess for i in sub]\n    \n    answer = np.array(guesses)\n\
    \    \n    answer[guess == answer] = 0\n    answer[answer > 0] = 0\n    answer[answer\
    \ < 0] = np.abs(answer[answer < 0])\n    \n    return answer.reshape(len(game))\n\
    \    \n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjiopjbe2.py\", line 26\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 51)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 5, 7, 9, 11]\n            guess = [5, 9, 11]\n            compare(game,\
    \ guess)\n            > [0, 1, -1, 0]\n    \n            game = [1, 6, 8, 10,\
    \ 12]\n            guess = [6, 10, 12]\n            compare(game, guess)\n   \
    \         > [1, 1, -1, 0]\n    \n            game = [1, 6, 8, 10, 12]\n      \
    \      guess = [6, 8, 12]\n            compare(game, guess)\n            > [1,\
    \ 1, -1, 0]\n    \n            game = [1, 5, 7, 9, 12]\n            guess = [5,\
    \ 7, 12]\n            compare(game, guess)\n            > [0, 1, -1, 0]\n    \n\
    \            game = [1, 5, 7, 9, 12]\n            guess = [6, 5, 12]\n       \
    \     compare(game, guess)\n            > [0, 1, -1, 0]\n    \n            game\
    \ = [1, 5, 7, 9, 12]\n            guess = [6, 9, 12]\n            compare(game,\
    \ guess)\n            > [0, 1, -1, 0]\n    \n            game = [1, 5, 7, 9, 12]\n\
    \            guess = [6, 9, 10]\n            compare(game, guess)\n          \
    \  > [0, 1, -1, 0]\n    \n            game = [1, 5, 7, 9, 12]\n            guess\
    \ = [6, 8, 10]\n            compare(game, guess)\n            > [0, 1, -1, 0]\n\
    \    \n            game = [1, 5, 7, 9, 12]\n            guess = [6, 8, 10]\n \
    \           compare(game, guess)\n            > [0, 1, -1, 0]\n    \n        \
    \    game = [1, 5, 7, 9, 12]\n            guess = [6, 8, 11]\n            compare(game,\
    \ guess)\n            > [0, 1, -1, 0]\n    \n            game = [1, 5, 7, 9, 12]\n\
    \            guess = [6, 8, 11]\n            compare(game, guess)\n          \
    \  > [0, 1, -1, 0]\n    \n            game = [1, 5, 7, 9, 12]\n            guess\
    \ = [6, 8, 10]\n            compare(game, guess)\n            > [0, 1, -1, 0]\n\
    \    \n            game = [1, 5, 7, 9, 12]\n            guess = [6, 8, 11]\n \
    \           compare(game, guess)\n            > [0, 1, -1, 0]\n    \n        \
    \    game = [1, 5, 7, 9, 12]\n            guess = [6, 8, 11]\n            compare(game,\
    \ guess)\n            > [0, 1, -1, 0]\n            \n    \"\"\"\n    \n    # your\
    \ solution here\n    \n    \n    \n    return ans\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpa7z68bbk.py\", line 16\n    game = [1, 5, 7, 9, 11]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [5,3,6,2,4]\n    guesses = [4,1,0,4,6]\n    answer = [0,0,0,0,0]\n    \"\"\"\
    \n    \n    \n    scores = [score for score in scores]\n    guesses = [guess for\
    \ guess in guesses]\n    \n    return [score-guess if guess in guesses else abs(score-guess)\
    \ for score,guess in zip(scores,guesses)]\n    \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgywl2sc8.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ example = [[1, 2], [1, 0]]\n            guess = [1, 0]\n            game = [1,\
    \ 3]\n            \"\"\"\n    \"\"\"\n    return game, guess\n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3dzq2qla.py\", line 16\n    example = [[1, 2], [1, 0]]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            guesses = [4,5,6,7,8,9]\n            scores = [12,9,4,2,1,0]\n\
    \            result = compare(scores, guesses)\n            \n            print(f'The\
    \ guesses were: {guesses}')\n            print(f'The correct guesses were: {result}')\n\
    \            \n            Expected output:\n            The guesses were: [4,\
    \ 5, 6, 7, 8, 9]\n            The correct guesses were: [0, 3, 0, 0, 2, 0]\n \
    \           \n            \n            guesses = [4,6,5,8,7,5]\n            scores\
    \ = [10,7,6,4,3,2]\n            result = compare(scores, guesses)\n          \
    \  \n            print(f'The guesses were: {guesses}')\n            print(f'The\
    \ correct guesses were: {result}')\n            \n            Expected output:\n\
    \            The guesses were: [4, 6, 5, 8, 7, 5]\n            The correct guesses\
    \ were: [0, 2, 0, 0, 3, 0]\n            \n            \"\"\"\n\n    \"\"\"\n \
    \   \n    assert len(game) == len(guess), \"The length of the game and guesses\
    \ don't match\"\n    \n    res = []\n    \n    for index,score in enumerate(game):\n\
    \        \n        diff = abs(guess - score)\n        \n        if diff != 0:\n\
    \            res.append(diff)\n            \n    return res\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpj50np3r7.py\", line 17\n    guesses = [4,5,6,7,8,9]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            scores = [1, 0, 0, 2, 3]\n            guesses = [2, 1, 0, 0]\n\
    \            \n            compare(scores, guesses)\n            \n          \
    \  # expected output: [0, 1, 1, -1, -1]\n            \"\"\"\n    \n    \n    \"\
    \"\"\n    \n    scores = [int(score) for score in game]\n    guesses = [int(guess)\
    \ for guess in guess]\n    \n    diffs = []\n    \n    # find the differences\
    \ and append them to the return array\n    for index,value in enumerate(scores):\n\
    \        if value == guesses[index]:\n            diffs.append(0)\n        else:\n\
    \            diffs.append(abs(guesses[index]-value))\n    \n    return diffs\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpigevl9r0.py\", line 17\n    scores = [1, 0, 0, 2, 3]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 7, 4]\n            guess = [4, 10, 9]\n            compare(game,\
    \ guess)\n            # [9, 3, -1]\n            \n            guess = [10, 7,\
    \ 4]\n            game = [10, 7, 4]\n            compare(game, guess)\n      \
    \      # [9, 3, -1]\n            \n            guess = [9, 4, 10]\n          \
    \  game = [10, 7, 4]\n            compare(game, guess)\n            # [9, 3, -1]\n\
    \            \n            guess = [10, 9, 4]\n            game = [10, 7, 4]\n\
    \            compare(game, guess)\n            # [9, 3, -1]\n            \n  \
    \          guess = [10, 7, 4]\n            game = [10, 7, 2]\n            compare(game,\
    \ guess)\n            # [-3, 9, -1]\n            \n            guess = [10, 7,\
    \ 3]\n            game = [10, 7, 4]\n            compare(game, guess)\n      \
    \      # [9, 3, -1]\n            \n            guess = [10, 7, 4]\n          \
    \  game = [10, 7, 4]\n            compare(game, guess)\n            # [0, 0, 0,\
    \ 0]\n            \n            guess = [10, 7, 4]\n            game = [10, 7,\
    \ 4]\n            compare(game, guess)\n            # [0, 0, 0, 0]\n         \
    \   \n            guess = [10, 7, 4]\n            game = [10, 7, 5]\n        \
    \    compare(game, guess)\n            # [3, 9, -1]\n            \n          \
    \  guess = [10, 7, 4]\n            game = [10, 7, 6]\n            compare(game,\
    \ guess)\n            # [3, 9, -1]\n            \n            guess = [10, 7,\
    \ 4]\n            game = [10, 7, 7]\n            compare(game, guess)\n      \
    \      # [3, 9, -1]\n            \n            guess = [10, 7, 4]\n          \
    \  game = [10, 7, 8]\n            compare(game, guess)\n            # [3, 9, -1]\n\
    \            \n            guess = [10, 7, 4]\n            game = [10, 7, 9]\n\
    \            compare(game, guess)\n            # [3, 9, -1]\n            \n  \
    \          guess = [10, 7, 4]\n            game = [10, 7, 10]\n            compare(game,\
    \ guess)\n            # [3, 9, -1]\n            \n            guess = [10, 7,\
    \ 4]\n            game = [10, 7, 11]\n            compare(game, guess)\n     \
    \       # [3, 9, -1]\n            \n            guess = [10, 7, 4]\n         \
    \   game = [10, 7, 12]\n            compare(game, guess)\n            # [3, 9,\
    \ -1]\n            \n            guess = [10, 7, 4]\n            game = [10, 7,\
    \ 13]\n            compare(game, guess)\n            # [3, 9, -1]\n          \
    \  \n            \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprk2yvc28.py\", line 16\n    game = [10, 7, 4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ Input:\n            scores = [100,95,90,75]\n            guesses = [90,90,90]\n\
    \            Output: [0, 0, -1]\n            Explanation:\n            Person\
    \ 1 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person 2 has scores [100,\
    \ 95, 90, 75] and guesses [90,90,90]. Person 3 has scores [100, 95, 90, 75] and\
    \ guesses [90,90,90]. Person 4 has scores [100, 95, 90, 75] and guesses [90,90,90].\
    \ \n            Person 1 has scores [100, 95, 90, 75] and guesses [90,90,90].\
    \ Person 2 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person 3 has scores\
    \ [100, 95, 90, 75] and guesses [90,90,90]. Person 4 has scores [100, 95, 90,\
    \ 75] and guesses [90,90,90]. Person 5 has scores [100, 95, 90, 75] and guesses\
    \ [90,90,90]. \n            Person 1 has scores [100, 95, 90, 75] and guesses\
    \ [90,90,90]. Person 2 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person\
    \ 3 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person 4 has scores [100,\
    \ 95, 90, 75] and guesses [90,90,90]. Person 5 has scores [100, 95, 90, 75] and\
    \ guesses [90,90,90]. Person 6 has scores [100, 95, 90, 75] and guesses [90,90,90].\
    \ Person 7 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person 8 has scores\
    \ [100, 95, 90, 75] and guesses [90,90,90]. Person 9 has scores [100, 95, 90,\
    \ 75] and guesses [90,90,90]. Person 10 has scores [100, 95, 90, 75] and guesses\
    \ [90,90,90]. Person 11 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person\
    \ 12 has scores [100, 95, 90, 75] and guesses [90,90,90]. Person 13 has scores\
    \ [100, 95, 90, 75] and guesses [90,90,90]. Person 14 has scores [100, 95, 90,\
    \ \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpc101jb85.py\", line 16\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [9, 7, 2, 5, 8, 3, 6, 1, 4, 0, 5]\n            guesses = [6, 5, 3,\
    \ 9, 8, 7, 2, 1, 0, 4]\n            answer = [2, 1, 0, 1, 0, 1, 2, 1, 2, 2]\n\n\
    \    Scores represents actual scores as well as guesses. \n    Scores can have\
    \ negative values, and the guesses can have both positive and negative values.\n\
    \    \n    >>> compare(scores, guesses)\n    [2, 1, 0, 1, 0, 1, 2, 1, 2, 2]\n\
    \    \n    \"\"\"\n    \n    return list(map(lambda x,y : abs(x-y), guess, scores))\n\
    </cell>\n<cell>\ncompare(scores, guesses)\n</cell>\n<text>\nRemember how we used\
    \ this function for other assignments and it worked well?\n\n\n</text>\n<text>\n\
    BONUS: Can you do better? Can you do any better?\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwf7b80lt.py\", line 16\n    scores = [9, 7, 2, 5, 8, 3,\
    \ 6, 1, 4, 0, 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,2,3,4,5]\n            guess = [1,2,4,5,6]\n            \n        \
    \    compare(game,guess) returns:\n            [0,0,3,0,0]\n            \"\"\"\
    \n            \n    \n    \n    \"\"\"\n    \n    import numpy as np\n    \n \
    \   assert len(game) == len(guess)\n    \n    differences = []\n    \n    for\
    \ i in range(len(game)):\n        differences.append(abs(guess[i]-game[i]))\n\
    \    \n    return differences\n    \"\"\"\n<|/ file source=github dstars=0 ext=.py\
    \ |>\n<| c |>\nWhat is the expected output for this example?\n<|/ c |>\n<| c |>\n\
    ```compare([1,2,3,4,5], [1,2,4,5,6])\nOut: [0, 0, 3, 0, 0]```\n<|/ c |>\n<| a\
    \ tags=python,compare,list,arrays,python-3.x |>\nYour code looks okay, and works\
    \ for the sample inputs you gave, however it looks like you have a logic error\
    \ in how you are getting the differences between the guess and game scores:\n\
    <code>\ndifferences = []\nfor i in range(len(game)):\n    differences.append(abs(guess[i]-game[i]))\n\
    return differences\n</code>\nWhen you compare the two lists you can end up with\
    \ some values that don't equal 0 (for example, when guessing [1, 0, 3, 6, 9] and\
    \ game [1, 5, 2, 8, 7] you'll end up with a difference of 1 instead of 0). The\
    \ fix is simple, just loop over the differences array once more to determine how\
    \ many differences there were:\n<code>\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbewcxx4h.py\", line 16\n    game = [1,2,3,4,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [0,\
    \ 0, 1, 2, 2, 3]\n    guess = [3, 1, 5, 3, 6, 7]\n    answer = [3, 3, 1, -1, 2,\
    \ -3]\n    \n    \"\"\"\n    \n    score = 0\n    for i in range(len(guess)):\n\
    \        score += abs(game[i] - guess[i])\n        \n    \n    return score\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2aege8ov.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 38)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ # score = [2,3,4,5,6,7,8,9]\n            # guess = [1,7,8,9,2,3,4,5]\n     \
    \       # expected return [2,4,6,8,0,8,4,2]\n            score = [2,3,4,5,6,7,8,9]\n\
    \            guess = [1,7,8,9,2,3,4,5]\n            \n            answer = compare(score,\
    \ guess)\n            print(answer)\n            # expected return [2,4,6,8,0,8,4,2]\n\
    \n    \"\"\"\n    \n    \n    # initialize answer\n    answer = []\n    \n   \
    \ # compare each guess.\n    for guess in guess:\n        guess = int(guess)\n\
    \        # compare each score\n        for score in game:\n            # return\
    \ 0 if both guesses are the same else return abs(difference)\n            difference\
    \ = abs(guess - score)\n            answer.append(difference)\n    return answer\n\
    \n            \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1epeg4hz.py\", line 19\n    score = [2,3,4,5,6,7,8,9]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [\n                [-2,-1,-3,0,3],\n                [-1,-5,-6,-1,3],\n\
    \                [-2,-5,-1,-3,-1],\n                [1,-4,-6,3,-1],\n        \
    \        [1,-3,-1,3,3],\n                [-1,-1,-5,1,3]\n                ]\n \
    \           guesses = [\n                [-4,-1,-1,-1,-1],\n                [-4,-1,-1,-1,-1],\n\
    \                [1,-4,-6,3,-1],\n                [-4,-1,-1,-1,-1],\n        \
    \        [1,-4,-6,3,-1]\n                ]\n            \n            \n     \
    \       answers = [\n                0,\n                0,\n                1,\n\
    \                0,\n                0\n                ]\n            \"\"\"\n\
    \            \n            \n    \n    >>> compare(scores, guesses) == answers\n\
    \    True\n    \"\"\"\n    \n    \n    if sum(guess) != sum(game):\n        return\
    \ abs(sum(guess)-sum(game))\n    else:\n        final = []\n        for i in range(len(guess)):\
    \ \n            diff = abs(game[i] - guess[i])\n            if diff == 0: \n \
    \               final.append('0')\n            else:\n                final.append('%g'%(diff))\n\
    \        return final\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2xh71ews.py\", line 16\n    scores = [\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            correct result = [1,1,1,2]\n            \n            score 1\
    \ = [3,3,1,1]\n            \n            score 2 = [2,2,1,1]\n            \n \
    \           guess = [3,3,2,2]\n            \n            game = [3,2,1,1]\n  \
    \          \n            return = [0,0,3,2]\n            \n            correctness\
    \ = compare(score, guess)\n            \n            for correct in correctness:\n\
    \                \n                print((correct, abs(correct-score[correct])))\n\
    \                \n            \"\"\"\n            \n    Time Complexity: O(n)\n\
    \    Space Complexity: O(n)\n    \"\"\"\n    \n    \n    correctness = []\n  \
    \  for guess, score in zip(guess, game):\n        if score == guess:\n       \
    \     correctness.append(0)\n        else:\n            correctness.append(abs(score-guess))\n\
    \    return correctness\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsi8fwgvy.py\", line 17\n    correct result = [1,1,1,2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ For a match of scores = [2,3,4] and guesses = [1,2],\n            your program\
    \ should return [4,2,2].\n            \"\"\"\n    \n    \n    \"\"\"\n\n    \n\
    \    \n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n\n    \n\n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0yw4qkjk.py\", line 16\n    For a match of scores = [2,3,4]\
    \ and guesses = [1,2],\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [10,11,12,13,14,15]\n    guesses = [11,14,15,16,17,18]\n    compare(scores,\
    \ guesses)\n    \"\"\"\n    correct_guess_count=0\n    for index,scores in enumerate(guesses):\n\
    \        if scores==guesses[index]:\n            correct_guess_count+=1\n    \n\
    \    if correct_guess_count==0:\n        return guesses\n    \n    difference_list=[]\n\
    \    for index,guess in enumerate(guesses):\n        if guesses==guesses[index]:\n\
    \            difference_list.append()\n        else:\n            difference_list.append(abs(scores\
    \ - guess))\n    return difference_list\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5fg48a40.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 46)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            game = [100, 75, 85, 65, 75, 100]\n            guess = [100, 100,\
    \ 85, 100, 75, 100]\n            # Output: [0, 0, 0, 1, 0, 3]\n            \"\"\
    \"\n    \n    \"\"\"\n        \n    game = [100, 75, 85, 65, 75, 100]\n    guess\
    \ = [100, 100, 85, 100, 75, 100]\n    comp = [0, 0, 0, 0, 0, 0]\n    for k in\
    \ range(len(guess)):\n        if guess[k] != game[k]:\n            comp[k] = abs(guess[k]\
    \ - game[k])\n    if guess[0] == game[0] and guess[1] == game[1]:\n        comp[0]\
    \ += 1\n    if guess[2] == game[2] and guess[3] == game[3]:\n        comp[1] +=\
    \ 1\n    if guess[4] == game[4] and guess[5] == game[5]:\n        comp[2] += 1\n\
    \    if guess[6] == game[6] and guess[7] == game[7]:\n        comp[3] += 1\n \
    \   return comp\n\nprint(compare(game, guess))\n</cell>\n<text>\nThe function\
    \ should return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\nthe value is 0, and if not, the value is the\
    \ absolute difference between the guess and the score.\n\n</text>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy30o6upi.py\", line 17\n    game = [100, 75, 85, 65, 75,\
    \ 100]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 9, 9, 9, 10, 9, 9, 9, 10, 9, 10, 9, 9, 10, 9, 10, 9, 10, 10]\n \
    \           guess = [10, 10, 10, 10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 10]\n            compare(game, guess)\n            # output: [5, 2, 1, 4, 3,\
    \ 1, 0, 5, 4, 3, 2, 0, 2, 5, 4, 3, 2, 1]\n            \n            game = [10,\
    \ 9, 8, 6, 8, 6, 6, 6, 6, 8, 6, 10, 9, 8, 6, 8, 6, 6, 8, 6, 10]\n            guess\
    \ = [10, 9, 8, 6, 8, 6, 6, 6, 6, 6, 8, 6, 10, 9, 8, 6, 8, 6, 6, 8, 6, 10]\n  \
    \          compare(game, guess)\n            # output: [0, 0, 0, 0, 2, 2, 2, 2,\
    \ 2, 2, 2, 5, 5, 5, 5, 5, 5]\n            \n            game = [10, 9, 8, 7, 8,\
    \ 6, 6, 6, 6, 6, 8, 6, 10, 9, 8, 7, 8, 6, 8, 6, 6, 8, 6, 10]\n            guess\
    \ = [10, 9, 8, 7, 8, 6, 6, 6, 6, 6, 8, 6, 10, 9, 8, 7, 8, 6, 8, 6, 6, 8, 6, 10]\n\
    \            compare(game, guess)\n            # output: [0, 0, 0, 0, 3, 3, 4,\
    \ 3, 4, 3, 4, 3, 3, 3, 3, 3, 3, 3, 3]\n            \n            game = [10, 9,\
    \ 8, 8, 6, 8, 6, 6, 6, 6, 8, 6, 10, 9, 8, 8, 6, 8, 6, 6, 8, 6, 10, 10]\n     \
    \       guess = [10, 9, 8, 8, 6, 8, 6, 6, 6, 6, 8, 6, 10, 9, 8, 8, 6, 8, 6, 6,\
    \ 8, 6, 10, 10]\n            compare(game, guess)\n            # output: [0, 0,\
    \ 0, 0, 4, 3, 4, 3, 4, 3, 4, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4]\n            \n\
    \            game = [10, 9, 8, 8, 6, 8, 6, 6, 6, 6, 8, 6, 10, 9, 8, 8, 6, 8, 6,\
    \ 6, 8, 6, 10, 10]\n            guess = [10, 9, 8, 8, 6, 8, 6, 6, 6, 6, 8, 6,\
    \ 10, 9, 8, 8, 6, 8, 6, 6, 8, 6, 10, 10]\n            compare(game, guess)\n \
    \           # output: [0, 0, 0, 0, 5, 3, 4, 3, 4, 3, 4, 3, 4, 4, 3, 3, 3, 3, 3,\
    \ 3, 3, 4, 3]\n            \n            game = [10, 9, 8, 7, 8, 6, 6, 6, 6, 6,\
    \ 8, 6, 10, 9, 8, 7, 8, 6, 8, 6, 6, 8, 6, 10, 10]\n            guess = [10, 9,\
    \ 8, 7, 8, 6, 6, 6, 6, 6, 8, 6, 10, 9, 8, 7, 8, 6, 8, 6, 6, 8, 6, 10, 10]\n  \
    \          compare(game, guess)\n            # output: [0, 0, 0, 0, 6, 3, 4, 3,\
    \ 4, 3, 4, 3, 4, 4, 3, 3, 3, 3, 3, 3, 3, 4, 3]\n            \n            game\
    \ = [10, 9, 8, 7, 8, 6, 6, 6, 6, 6, 8, 6, 10, 9, 8, 7, 8, 6, 8, 6, 6, 8, 6, 10,\
    \ 10]\n            guess = [10, 9, 8, 7, 8, 6, 6, 6, 6, 6, 8, 6, 10, 9, 8, 7,\
    \ 8, 6, 8, 6, 6, 8, 6, 10, 10]\n            compare(game, \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjlzx3s6i.py\", line 16\n    game = [10, 9, 9, 9, 10, 9,\
    \ 9, 9, 10, 9, 10, 9, 9, 10, 9, 10, 9, 10, 10]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [7,\
    \ 3, 1]\n    guess = [7, 3, 2]\n    \n    Output:\n    [ 0, 0, -1]\n    \"\"\"\
    \n    \n    # your solution goes here\n    differences = []\n    \n    for i in\
    \ range(len(game)):\n        if game[i] != guess[i]:\n            differences.append(abs(game[i]\
    \ - guess[i]))\n        else:\n            differences.append(0)\n    return differences\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp6qs09f6x.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 42)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [\n                [2, 2, 1, 1],\n                [3, 2, 2, 1],\n   \
    \             [1, 2, 2, 1],\n                [2, 2, 3, 1]\n            ]\n   \
    \         guess = [4, 4, 3]\n            result = compare(game, guess)\n     \
    \       print(result)\n            # Output: [1, 0, 3, 0]\n    \"\"\"\n    results\
    \ = []\n    for i in range(len(game)):\n        difference = abs(guess-game[i])\n\
    \        if difference < results[-1]:\n            results.append(difference)\n\
    \    return results\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpx33oqbn9.py\", line 16\n    game = [\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    game\
    \ = [3, 9, 8, 2, 3, 7, 5]\n    guess = [3, 8, 7, 5, 2, 3, 7]\n    compare(game,\
    \ guess)\n    >>> [2, 1, -1, 0, 0, 2, -1]\n    \n    guess = [3, 8, 7, 5, 2, 3,\
    \ 7]\n    compare(game, guess)\n    >>> [2, 1, -1, 0, 0, 2, -1]\n    \n    guess\
    \ = [3, 8, 7, 5, 2, 6, 7]\n    compare(game, guess)\n    >>> [2, 1, -1, 0, 1,\
    \ -1, -1]\n    \n    guess = [3, 8, 7, 5, 2, 3, 7]\n    compare(game, guess)\n\
    \    >>> [2, 1, -1, 0, 0, 2, -1]\n    \n    guess = [3, 9, 8, 2, 3, 7, 3]\n  \
    \  compare(game, guess)\n    >>> [2, 0, -1, 0, 0, 2, -1]\n    \n    guess = [3,\
    \ 9, 8, 2, 3, 7, 3]\n    compare(game, guess)\n    >>> [2, 0, -1, 0, 0, 2, -1]\n\
    \    \"\"\"\n    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_1y4bv1_.py\", line 41\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 53)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 3, 6]\n            guesses = [1, 5, 6, 9]\n            compare(scores,\
    \ guesses)\n            \"\"\"\n    return\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp4a537_qj.py\", line 16\n    scores = [1, 3, 6]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            scores = [1,5,8,3]\n            guesses = [4,5,7,6]\n        \
    \    \n            compare(scores, guesses)\n            # -> [1,1,-1,-1]\n  \
    \          \n            scores = [1,5,8]\n            guesses = [4,5,6]\n   \
    \         \n            compare(scores, guesses)\n            # -> [0,0,1]\n \
    \           \n            scores = [1,5]\n            guesses = [4,6]\n      \
    \      \n            compare(scores, guesses)\n            # -> [1,0,1]\n    \
    \        \n            scores = [1,5,8,3]\n            guesses = [3,5,7,6]\n \
    \           \n            compare(scores, guesses)\n            # -> [0,0,-1,-1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [3,5,7]\n \
    \           \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [3,5,7,6]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [3,5,7]\n \
    \           \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [3,5,7,6,9]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8,3]\n            guesses = [6,5,7,6]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,-1,-1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [6,5,7]\n \
    \           \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [6,5,7,6]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [6,5,7]\n \
    \           \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8]\n            guesses = [6,5,7,6,9]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,0,1]\n\
    \            \n            scores = [1,5,8,3,6]\n            guesses = [6,5,7,6]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,-1,-1]\n\
    \            \n            scores = [1,5,8,3]\n            guesses = [6,5,7,9]\n\
    \            \n            compare(scores, guesses)\n            # -> [0,0,\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphqamzxsg.py\", line 17\n    scores = [1,5,8,3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [2,\
    \ 1, 0]\n    guess = [1, 1, 1]\n    returns [0, 1, 1]\n    \n    \n    example:\n\
    \            \n            \"\"\"\n    game = [2, 1, 0]\n    guess = [2, 2, 1]\n\
    \    returns [1, 1, 0]\n    \n    \n    example:\n            \n            \"\
    \"\"\n    game = [2, 1, 0]\n    guess = [2, 1, 2]\n    returns [1, 1, 0]\n   \
    \ \"\"\"\n    \n    correct = 0\n    guesses = len(guess)\n    for i in range(len(game)):\n\
    \        if game[i] == guess[correct]:\n            correct += 1\n           \
    \ \n    if guess == game:\n        correct = 1\n        \n    differences = [abs(g\
    \ - s) for g, s in zip(guess, game) if g != s]\n    \n    return differences\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyeqh5yd7.py\", line 35\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 60)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3, 2]\n            guess = [5, 3]\n    \"\"\"\n\n    # write your code\
    \ here\n    \n    \n    return 0\n</cell>\n<cell>\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgoe0_5iv.py\", line 16\n    game = [3, 2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [1, 2, 3, 4]\n    guesses = [1, 5, 3, 2]\n    answer = compare(scores, guesses)\n\
    \    \n    >>answer\n    [0, -1, 3, 0]\n            \"\"\"\n\n    scores = [1,\
    \ 2, 3, 4]\n    guesses = [1, 5, 3, 2]\n    \n    results = []\n    for i in range(len(guesses)):\n\
    \        if guesses[i] == scores[i]:\n            results.append(0)\n        else:\n\
    \            results.append(abs(guesses[i] - scores[i]))\n    return results\n\
    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3,\
    \ 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3ylrq0c9.py\", line 22\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 45)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([1,0,1],\
    \ [1,0,0])\n    [1, 0, 0]\n    >>> compare([1,0,1], [1,0,1])\n    [0, 0, 0]\n\
    \    >>> compare([1,0,1], [1,0,2])\n    [0, 0, 0]\n    >>> compare([1,0,1], [1,0,0])\n\
    \    [0, 0, 0]\n    >>> compare([0,0,1], [1,0,0])\n    [0, 2, 0]\n    >>> compare([0,0,0],\
    \ [1,0,0])\n    [0, 1, 0]\n    >>> compare([0,0,0], [0,0,1])\n    [0, 0, 1]\n\
    \    >>> compare([0,1,0], [1,0,1])\n    [2, 0, 0]\n    >>> compare([0,0,0], [0,-1,0])\n\
    \    [2, 0, 0]\n    \"\"\"\n    \n    # Your code here\n\n    \n    \n    # return\
    \ [\n    #     abs(num - guess) for num, guess in enumerate(guess)\n    # ]\n\n\
    \    return abs(num - guess) for num, guess in enumerate(guess)\n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp1x3hbhak.py\", line 34\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 55)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [3, -2, -4, 1]\n            guesses = [3, -2, -4, 1]\n            compare(scores,\
    \ guesses)\n                \n        should return [1, 0, 0, 0]\n    \n    \"\
    \"\"\n    \n    if len(scores) != len(guesses):\n        return [0] * (len(guesses))\n\
    \    \n    for i, score in enumerate(scores):\n        if score != guesses[i]:\n\
    \            return [i * (guess - score) for i, guess in enumerate(guesses)]\n\
    \    \n    return [0] * (len(guesses))\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnnxpwf_p.py\", line 16\n    scores = [3, -2, -4, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> scores\
    \ = [4, 7, 5, 3]\n    >>> guesses = [3, 7, 4, 5]\n    >>> compare(scores, guesses)\n\
    \    [-1, 1, 1]\n\n    \"\"\"\n    diff = []\n    for index in range(len(guess)):\n\
    \        if game[index] == guess[index]:\n            diff.append(0)\n       \
    \ else:\n            diff.append(abs(game[index] - guess[index]))\n    return\
    \ diff\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpeeld8mzx.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 39)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ guess = [3, 1, 7, 5, 9, 10, 11]\n            score = [5, 3, 1, 7, 7, 9, 10,\
    \ 11]\n            # => [4, 1, 0, 0, 0, 3, 0, 0]\n    \n            \"\"\"\n \
    \   \"\"\"\n    \n    return score[guess[:]]\n</cell>\n<text>\nQuestion 7\nWrite\
    \ a function which calculates the sum of an array of integers. The sum is the\
    \ sum of all the integers in the array.\n    Use a for loop to calculate the sum\
    \ of the numbers 0 through n. Assume that the array is of length n.\n\n\n</text>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpufjc80g1.py\", line 16\n    guess = [3, 1, 7, 5, 9, 10,\
    \ 11]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,2,3,3,4,5]\n            guess = [5,3,5,1,3,1]\n            compare(game,guess)\n\
    \            #output: [1,2,-3,-3,-4,-5]\n            \n            \"\"\"\n  \
    \  \"\"\"\n    \n    #your code here\n    \n    diff = []\n    for i,val in enumerate(guess):\n\
    \        if guess[i]!=game[i]:\n            diff.append(abs(guess[i]-game[i]))\n\
    \        else:\n            diff.append(0)\n    return diff\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpj1swy83v.py\", line 16\n    game = [1,2,3,3,4,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [4, 2, 6]\n    guesses = [4, 2, 6]\n    compare(scores, guesses) \n    # returns\
    \ [0, 1, 1]\n    \n    scores = [100, 2, 6]\n    guesses = [100, 2, 6]\n    compare(scores,\
    \ guesses) \n    # returns [0, 0, 1]\n    \"\"\"\n    pass\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp4d4r67v7.py\", line 25\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 38)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [10, 20, 30, 40, 50]\n    guesses = [100, 200, 300, 400, 500]\n    \n    result\
    \ = compare(scores, guesses)\n    \n    print(result)\n    \n    \"\"\"\n    pass\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp2p4uczx_.py\", line 23\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [8, 7, 4, 2, 5, 9, 6, 3]\n            guess = [8, 9, 3, 5, 4, 3, 8, 4]\n\
    \            compare(game, guess)\n            [0, 0, -1, -1, -1, -1, -2, -1]\n\
    \            \"\"\"\n    \n    \n    \n    \n    \"\"\"\n    Your code here!\n\
    \    \"\"\"\n    \n    if len(game) != len(guess):\n        print(\"len(game)\
    \ != len(guess)\")\n        return -1\n    elif len(guess) == 0:\n        return\
    \ [0]\n    else:\n        diff_arr = []\n        for i in range(len(game)):\n\
    \            if game[i]==guess[i]:\n                diff_arr.append(0)\n     \
    \       else:\n                diff_arr.append(abs(game[i] - guess[i]))\n    \
    \    return diff_arr\n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpt2gu5smk.py\", line 16\n    game = [8, 7, 4, 2, 5, 9,\
    \ 6, 3]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ Input:\n            game = [10,20,30,40,50,60],\n            guess = [60,50,40,30,20,10],\n\
    \            Output: [-5,20,-10,50,-15,10],\n            Explanation: You guessed\
    \ the correct score at index 3 with a difference of -10.\n            \"\"\"\n\
    \    \"\"\"\n\n    # write your code here\n\n    diff = [abs(game[i] - guess[i])\
    \ for i in range(len(game))]\n    return diff\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1iaz2_xe.py\", line 16\n    Input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [2,4,5,3]\n            guesses = [2,6,7,8]\n            compare(scores,guesses)\n\
    \            \n            returns:\n            [0,0,3,2]\n            \n   \
    \         \"\"\"\n    \n    \"\"\"\n    I started writing the below code before\
    \ I realized that if I wanted to compare the two arrays,\n    I could just do\
    \ ```game-guesses```, but this doesn't work if one of the arrays is shorter than\
    \ the other.\n    So I went back and realized that it would be better if I compare\
    \ the lengths of both arrays first,\n    and if the lengths were equal, I could\
    \ then compare the scores inside the two arrays.\n    \"\"\"\n    diffs = abs(len(game)\
    \ - len(guess))\n    compared_game = []\n    compared_guess = []\n    \n    if\
    \ diffs == 0:\n        for i in range(len(game)):\n            if game[i] == guess[i]:\n\
    \                compared_game.append(game[i])\n                compared_guess.append(guess[i])\n\
    \                \n    elif diffs > 0:\n        for i in range(len(game)-diffs):\n\
    \            guess = guess[i:]\n            guess.append(guess[0])\n         \
    \   \n            for j in range(len(guess)):\n                compared_game.append(guess[j])\n\
    \                \n        compared_game.append(game[len(game)-diffs:])\n    \
    \    compared_guess.append(guess[len(guess)-diffs:])\n        \n        \n   \
    \     \n        \n    elif diffs < 0:\n        for i in range(len(game)+diffs):\n\
    \            game = game[i:]\n            game.append(game[0])\n        \n   \
    \         for j in range(len(game)):\n                compared_game.append(game[j])\n\
    \        \n        compared_game.append(game[:diffs])\n        compared_guess.append(guess[:diffs])\n\
    \        \n        \n    return compared_game, compared_guess\n    \n    \n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpuue_qj8_.py\", line 16\n    scores = [2,4,5,3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([2,0,1],\
    \ [2,1,2])\n    [1, 0, 1]\n    >>> compare([0,1,2,3], [0,1,2,4])\n    [2, 0, 2]\n\
    \    >>> compare([0,0,2], [0,0,2])\n    [0, 0, 2]\n    >>> compare([0,4], [0,3])\n\
    \    [0, 2, 0]\n    >>> compare([2,1,2], [2,1,3])\n    [2, 0, 2]\n    \"\"\"\n\
    \    pass\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzxbt1b5a.py\", line 26\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 38)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([3,\
    \ -2, 4, 5], [1, 1, 1])\n    [-2, 0, 4]\n    \"\"\"\n\n    \n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmplzohahzf.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 32)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,3,1,3,2,2,3,3]\n            guess = [1, 3, 3]\n            answers\
    \ = [2, -5, 1]\n            print(compare(game, guess)) # [2, 3, -5, 1]\n    \
    \        \"\"\"\n    \n    \"\"\"\n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpawhcw4gv.py\", line 16\n    game = [1,3,3,1,3,2,2,3,3]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [4,5,1,2]\n            guesses = [2,5,6,4]\n            output = [-1,2,-3,0]\n\
    \            \n    \"\"\"\n    \n    scores = np.array(scores)\n    guesses =\
    \ np.array(guesses)\n    diff = np.abs(scores - guesses)\n    \n    diff = [abs(i)\
    \ for i in diff]\n    \n    return diff\n\n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpq4s4epp7.py\", line 16\n    scores = [4,5,1,2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([3,\
    \ 8, 7], [8, 4, 6])\n    [1, -1, 2]\n\n    \"\"\"\n    # Your solution here\n\
    \    \n    score = list(game)\n    guess = list(guess)\n    for i in range(len(score)):\n\
    \        if guess[i] in score:\n            score.remove(guess[i])\n        else:\n\
    \            score.insert(i, abs(guess[i] - score[i]))\n    return score\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpjqdecpf7.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 40)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 30, 40]\n            guess = [15, 35]\n            \n          \
    \  return: [10, -5, 20]\n            \n    \"\"\"\n    \n    return[]\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmps8xjg3n5.py\", line 16\n    game = [10, 30, 40]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n        \n \
    \       matches = [2,1,0,0,2,1,0,0,2,1]\n        guesses = [0,2,0,2,0,1]\n   \
    \     \n        compare(matches, guesses) \n        [0, 0, 0, -1, 1, 2, 2, 0,\
    \ 1, 1]\n        \"\"\"\n    \n    score = 0\n    guess_correct = 0\n    \n  \
    \  for i in range(0,len(guesses)):\n        guess_correct = guesses[i]==game[i]\n\
    \        if guess_correct:\n            score = 0\n            break\n       \
    \ if score<abs(guesses[i]-game[i]):\n            score = abs(guesses[i]-game[i])\n\
    \        if guess_correct:\n            score = 0\n            break\n    \n \
    \   \n    if score==0: return [0 for _ in range(len(guesses))]\n    else: return\
    \ score\n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpsy_7q5dn.py\", line 17\n    matches = [2,1,0,0,2,1,0,0,2,1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    Input: game\
    \ = [8, 6, 2, 6], guess = [8, 8, 8, 0]\n    Output: [3, 3, 1, 1]\n    \n    Explanation:\
    \ We have 3 correct guesses with total differences 3, 3 and 1 incorrect.\n   \
    \ The first three guesses are 8, 8 and 8.\n    The last one is an incorrect guess,\
    \ because it has score of 0.\n    You will always have three guesses, and you\
    \ cannot lose a whole game.\n    \"\"\"\n\n    return [0]\n</cell>\n<cell>\ngame\
    \ = [8, 6, 2, 6]\nguess = [8, 8, 8, 0]\ncompare(game, guess)\n</cell>\n<text>\n\
    Task 2\nIn this task, you are given a list with scores and a list of guesses.\
    \ Your task is to return a list of differences between each guess and score.\n\
    \    \n    \n    example:\n\n                Input: scores = [3, 7, 2, 10], guess\
    \ = [10, 7, 5, 6]\n                Output: [-2, -4, -4, 1]\n                Explanation:\
    \ We have 2 correct guesses with total differences -2, -1 and 1 incorrect.\n \
    \               We have 1 correct guess, with the score of 10, and 1 incorrect\
    \ guess with score of 5.\n                You will always have 2 guesses, and\
    \ you cannot lose a whole game.\n    \"\"\"\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpp733ytkk.py\", line 16\n    Input: game = [8, 6, 2, 6],\
    \ guess = [8, 8, 8, 0]\n                                      ^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [-4, -1, 2, -3, 1]\n            guess = [-2, -1, 4, 3, 5]\n         \
    \   \n            compare(game, guess)\n            # [0, 3, 3, 2, 1]\n      \
    \      \n            \n            \"\"\"\n    \n    \n    \n    \n    >>> game\
    \ = [-4, -1, 2, -3, 1]\n    >>> guess = [-2, -1, 4, 3, 5]\n    \n    >>> compare(game,\
    \ guess)\n    [0, 3, 3, 2, 1]\n    \"\"\"\n    \n\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpy0y220km.py\", line 16\n    game = [-4, -1, 2, -3, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n    scores = [8, 3, 1, 0, 4, 5, 2]\n    guesses = [6, 2, 3, 1, 4, 7, 0]\n\
    \    compare(scores, guesses) == [4, -1, -4, -5, -5, -2, -1]\n    compare(scores,\
    \ guesses) == [8, 3, 1, 0, 4, 5, 2]\n    compare(scores, guesses) == [8, 3, 1,\
    \ 0, 4, 5, 2]\n    \"\"\"\n    return compare2(game, guess)\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp778u8t_t.py\", line 22\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 34)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n        game\
    \ = [50, 100, 75, 100]\n        guess = [60, 80, 65, 70]\n        >> [0, 0, 0,\
    \ 0]\n        >> [0, 0, 0, 0]\n        >> [0, 0, 0, 0, 0, -1]\n        >> [0,\
    \ 0, 0, 0, 0, 0]\n        >> [0, 0, 0, -1]\n        >> [0, 0, 0]\n        >> [0,\
    \ 0, -1]\n        >> [-1, 0, -1]\n        >> [0, 1, -1]\n        >> [1, 0, 0]\n\
    \        >> [1, -1]\n        >> [1, -1, 0]\n        >> [1, 0, -1]\n        >>\
    \ [1, -1, -1]\n        >> [1, 0, 0, -1]\n        >> [1, -1, 0, -1]\n        >>\
    \ [1, -1, -1, 0]\n        >> [0, -1, -1]\n        >> [0, -1, 0, -1]\n        >>\
    \ [0, -1, -1, 0]\n        >> [-1, 0, -1]\n        >> [-1, 0, -1, 0]\n        >>\
    \ [-1, -1, -1, -1, 0]\n        >> [-1, -1, -1, 0, 0]\n        >> [-1, -1, -1,\
    \ -1, -1]\n        >> [-1, -1, -1, -1, 0, 1]\n        >> [-1, -1, -1, -1, 0, -1,\
    \ 1]\n        >> [-1, -1, -1, -1, -1, -1, 0]\n        >> [-1, -1, -1, -1, -1,\
    \ -1, -1]\n        >> [-1, -1, -1, -1, -1, -1, 0, 1]\n        >> [-1, -1, -1,\
    \ -1, -1, -1, 0, -1, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, 0]\n    \
    \    >> [-1, -1, -1, -1, -1, -1, -1, -1, -1]\n        >> [-1, -1, -1, -1, -1,\
    \ -1, -1, -1, 0, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1]\n \
    \       >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0]\n        >> [-1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, 0, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 1]\n\
    \        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0]\n        >> [-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        >> [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, 0, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, 0, -1, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, 0]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, 0, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, 0, -1, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, 0]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, 0, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, 0, -1, 1]\n        >> [-1, -1, -1, -1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0]\n        >> [-1, -1, -1, -1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n        >> [-1,\
    \ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1]\n\
    \        >> [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,\
    \ -1, 0, -1, 1]\n        >> \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2q19ia1j.py\", line 16\n    game = [50, 100, 75, 100]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ For matches = [5,5,4,3,4,3], guesses = [1,1,2,1,1,1]\n            Return [0,2,3,3,0,1]\n\
    \            \"\"\"\n    \"\"\"\n    # Your code here!\n    return \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7dsw9ib7.py\", line 16\n    For matches = [5,5,4,3,4,3],\
    \ guesses = [1,1,2,1,1,1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    game\
    \ = [5, 9, 2, 5]\n    guess = [10, 5, 7, 5]\n    \n    compare(game, guess)\n\
    \    \n    returns [1, 1, 0, 1]\n    \n    You should be able to do this in less\
    \ than a second!\n\n    \"\"\"\n    # Your code here\n    pass\n\nprint(compare(game,\
    \ guess))\n</cell>\n<cell>\n\"\"\"\n    \n    You can use the compare function\
    \ in an if statement:\n    \n    \n    if compare(game, guess) == [1, 1, 0, 1]:\n\
    \        \n        \n        \n\"\"\"\n</cell>\n<cell>\n\"\"\"\n    \n    You\
    \ can use the compare function in an if statement:\n    \n    \n    if compare(game,\
    \ guess) == [1, 1, 0, 1]:\n        \n        \n        \n    \"\"\"\n</cell>\n\
    <cell>\n\"\"\"\n    \n    You can use the compare function in an if statement:\n\
    \    \n    \n    if compare(game, guess) == [1, 1, 0, 1]:\n        \n        \n\
    \        \n    \"\"\"\n</cell>\n<cell>\n\"\"\"\n    \n    You can use the compare\
    \ function in an if statement:\n    \n    \n    if compare(game, guess) == [1,\
    \ 1, 0, 1]:\n        \n        \n        \n    \"\"\"\n</cell>\n<cell>\n\"\"\"\
    \n    \n    You can use the compare function in an if statement:\n    \n    \n\
    \    if compare(game, guess) == [1, 1, 0, 1]:\n        \n        \n        \n\
    \    \"\"\"\n</cell>\n<cell>\n\"\"\"\n    \n    You can use the compare function\
    \ in an if statement:\n    \n    \n    if compare(game, guess) == [1, 1, 0, 1]:\n\
    \        \n        \n        \n    \"\"\"\n</cell>\n<cell>\n\"\"\"\n    \n   \
    \ You can use the compare function in an if statement:\n    \n    \n    if compare(game,\
    \ guess) == [1, 1, 0, 1]:\n        \n        \n        \n    \"\"\"\n</cell>\n\
    <cell>\n\"\"\"\n    \n    You can use the compare function in an if statement:\n\
    \    \n    \n    if compare(game, guess) == [1, 1, 0, 1]:\n        \n        \n\
    \        \n    \"\"\"\n</cell>\n<cell>\n\"\"\"\n    \n    You can use the compare\
    \ function in an if statement:\n    \n    \n    if compare(game, guess) == [1,\
    \ 1, 0, 1]:\n        \n        \n        \n    \"\"\"\n</cell>\n<cell>\n\"\"\"\
    \n    \n    You can use the compare function in an if statement:\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpnkudvi0b.py\", line 24\n    You should be able to do this\
    \ in less than a second!\n        ^^^^^^\nSyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            guess = [3, 2, 4, 3, 6, 5, 2, 3, 1]\n            score = [1, 5,\
    \ 6, 2, 3, 5, 6, 4, 3]\n            \n            game = compare(guess, score)\n\
    \            \n            print(game)\n            \n            Output: [0,\
    \ 0, 0, 0, 0, 0, 2, 0, 1, 2]\n            \n            \"\"\"\n    \n    # insert\
    \ code here\n    pass\n    \n</code>\n<|/ q |>\n<| c |>\nWhat exactly do you mean\
    \ by \"wrong answers\"? Do you mean that if the first guess is correct and the\
    \ second is wrong, then the first one will score a point and the second will score\
    \ a point?\n<|/ c |>\n<| c |>\nI mean that if the first guess is correct and the\
    \ second is wrong, then the first one will score a point and the second will score\
    \ a point.\n<|/ c |>\n<| c |>\nOk, that makes more sense. Do you know how you\
    \ could solve the problem using recursion?\n<|/ c |>\n<| c |>\nNo, I don't know\
    \ how to solve it using recursion\n<|/ c |>\n<| c |>\nWhat does it matter that\
    \ you're using recursion for this? You just need to figure out how to compare\
    \ each item in the guesses and scores lists recursively.\n<|/ c |>\n<| a |>\n\
    I do not think recursion is necessary here. What you need to do is loop through\
    \ the list of guesses and compare them one by one with the list of scores. If\
    \ the guess and the score match, add one to the counter. If the guess and the\
    \ score do not match, add one to the counter and subtract 1 from the score if\
    \ the difference is greater than or equal to zero.\nHere's how this can be done\
    \ with recursion:\n<code>\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp15141qo4.py\", line 17\n    guess = [3, 2, 4, 3, 6, 5,\
    \ 2, 3, 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [2,4,4,5,5]\n            guesses = [2,3,4,5,6]\n            compare(scores,\
    \ guesses) # returns [0, 1, 1, 2, 1]\n            compare(scores, guesses[::-1])\
    \ # returns [1, 0, 1, 0, 0]\n\n    \"\"\"\n    \n    scores = list(set(game) -\
    \ set(guess))\n    if scores:\n        return [abs(g - s) for g, s in zip(guess,\
    \ scores)]\n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5y8qrw6a.py\", line 16\n    scores = [2,4,4,5,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [10,\
    \ 15, 11, 11, 11]\n    guess = [10, 12, 10, 10, 12]\n    \n    correct_guesses\
    \ = [0, 0, 0, 1, 1]\n    wrong_guesses = [0, 0, 0, 0, 0]\n    \n    \n    correct_guesses\
    \ = compare(game, guess)\n    wrong_guesses = compare(game, guess)\n    \n   \
    \ print(correct_guesses)\n    print(wrong_guesses)\n    print(correct_guesses\
    \ == wrong_guesses)\n    \n    \n    \n    \"\"\"\n    \n    #TODO: implement\
    \ the algorithm here\n    \n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpk4vyz6yg.py\", line 32\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 47)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [1,2,3]\n            [0, 1, 2]\n            returns:\n            \n       \
    \     [2, 0, 0]\n            \"\"\"\n\n    score = game\n    guess = guess\n\n\
    \    diff = []\n    for idx, g in enumerate(guess):\n        if g == score[idx]:\n\
    \            diff.append(0)\n        else:\n            diff.append(abs(g-score[idx]))\n\
    \    \n    return diff\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmplpd8jxlr.py\", line 16\n    [1,2,3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [76, 100, 66, 91, 92, 95, 89]\n            guesses = [81, 88, 76, 92,\
    \ 99, 76, 93]\n            \n            return = [0, 1, 5, -6, -6, -6, -1]\n\
    \            \"\"\"\n    \n    \n    scores = list(set(game))\n    guesses = list(set(guess))\n\
    \    \n    res = []\n    for g in guesses:\n        res.append(abs(g - scores))\n\
    \    return res\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp89q3wj8l.py\", line 16\n    scores = [76, 100, 66, 91,\
    \ 92, 95, 89]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    score =\
    \ [9,5,7,9,2,3,5]\n    guess = [1,5,7]\n    solution = [3,0,3]\n\n    score =\
    \ [9,5,7,9,2,3,5]\n    guess = [7,5,1]\n    solution = [2,1,0]\n    \"\"\"\n \
    \   answer = []\n    for i in range (0,len(guess)):\n        answer.append(abs(score[i]\
    \ - guess[i]))\n    return answer\n\n\"\"\"\nThis code below is for testing your\
    \ function.\n\"\"\"\n\nprint(compare([6,8,4,3,7,1,9,2], [5,2,8,7,3,9,6,8]))\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsqnv5_n3.py\", line 31\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 44)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1,5,3,7,4,2,9,8,5,1,4,2,5]\n            guesses = [2,6,3,5,7,4,1,9,8,5,2,5,4,1]\n\
    \            \n            compare(scores, guesses) # result = [3,2,0,-1,-1]\n\
    \            \"\"\"\n\n    scores = list(zip(game,guesses)) # zip creates list\
    \ of tuples from lists \n    differences = []\n    \n    for idx,item in enumerate(scores):\n\
    \        if item[0] == item[1]:\n            differences.append(0)\n        else:\n\
    \            differences.append(abs(item[0]-item[1]))\n    return differences\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppozn_n_h.py\", line 16\n    scores = [1,5,3,7,4,2,9,8,5,1,4,2,5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ Example input:\n            scores = [1, 10, 100]\n            guesses = [3,\
    \ 50, 50]\n            \n            Output:\n            [0, 0, 0]\n        \
    \    \n            Explanation:\n            The first two scores are correct\
    \ but they differ by 5 in the third guess.\n            All scores are correct\
    \ for the first two guesses. \n            So the answer is [0,5,0].\n       \
    \     \"\"\"\n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\n    # todo add\
    \ code to find difference of scores and return array\n    # todo add code to find\
    \ difference of guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return array\n    # todo add code to find difference\
    \ of scores and guesses and return \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkngm8eou.py\", line 16\n    Example input:\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> game\
    \ = [100, 0, 100, 0, 100]\n    >>> guess = [100, 100, 100, 100, 100]\n    >>>\
    \ compare(game, guess)\n    [2, -6, 0, 2, -6]\n    \n    \"\"\"\n    count = 0\n\
    \    for i in range(len(guess)):\n        if game[i] == guess[i]:\n          \
    \  count = count + 1\n        else:\n            count += abs(game[i] - guess[i])\n\
    \    return count\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpyzj6qbpa.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 40)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n        game\
    \ = [100, 50, 50, 80, 90]\n        guess = [90, 50, 80, 50, 60]\n        return\
    \ = [0, -1, 0, 1, 1]\n        \n    \n    \n    NOTE: \n    \n    Your code should\
    \ work even if guesses and scores are not sorted in ascending order. \n    Your\
    \ code should also work for other kinds of inputs. You can test your function\
    \ with these parameters:\n    \n    game = [100, 50, 50, 80, 90]\n    guess =\
    \ [90, 50, 80, 50, 60]\n    \"\"\"\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmprace781t.py\", line 16\n    game = [100, 50, 50, 80, 90]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [1, 2, 3, 1]\n            [2, 3, 2, 1]\n            [1, 1, 3, 1]\n         \
    \   [1, 2, 1, 3]\n            [3, 1, 2, 1]\n            \n            guess =\
    \ [3, 1, 2, 1]\n            \n            results = [1, 1, 3, 0]\n           \
    \ \n            [1, 2, 3, 1]\n            [2, 3, 2, 1]\n            [1, 1, 3,\
    \ 1]\n            [1, 2, 1, 3]\n            [3, 1, 2, 1]\n            \n    \"\
    \"\"\n\n    game = list(game)\n    guess = list(guess)\n\n    differences = []\n\
    \n    for g in range(len(guess)):\n        differences.append(abs(guess[g]-game[g]))\n\
    \n    return differences\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdw1_nsoc.py\", line 16\n    [1, 2, 3, 1]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 1, 2, 2]\n            guess = [2, 2, 4, 2, 2, 3]\n        \
    \    compare(game, guess)\n            [1, -1, 0, 1, -1, 0]\n            \n  \
    \          \"\"\"\n            \n    Constraints:\n        1 <= len(game) <= 100\n\
    \        1 <= len(guess) <= 100\n        1 <= game[i] <= 100\n        1 <= guess[i]\
    \ <= 100\n        guess[i] != game[i]\n    \n    Example:\n        game = [1,\
    \ 2, 3, 1, 2, 3]\n        guess = [2, 3, 1, 2, 3, 4]\n        compare(game, guess)\
    \ == [1, -1, 0, 1, -1, 0]\n    \"\"\"\n    # Your code here\n    \n    game_copy\
    \ = []\n    guess_copy = []\n    for i in game:\n        game_copy.append(i)\n\
    \    for i in guess:\n        guess_copy.append(i)\n    diff = [abs(guess - game)\
    \ for guess in guess_copy]\n    diff = sum(diff)\n    diff = [diff - abs(game)\
    \ for game in game_copy]\n    diff = sum(diff)\n    return [diff - abs(guess)\
    \ for guess in guess_copy]\n    \n    \n    \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvfjyhp_2.py\", line 16\n    game = [1, 2, 3, 1, 2, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 22, 20, 12]\n            guess = [19, 21, 21, 22, 22]\n    \
    \        print(compare(game, guess))\n            \n            game = [10, 20,\
    \ 22, 20, 12]\n            guess = [19, 18, 19, 22, 22]\n            print(compare(game,\
    \ guess))\n            \n            game = [10, 20, 22, 20, 12]\n           \
    \ guess = [20, 21, 22, 22, 22]\n            print(compare(game, guess))\n    \
    \        \n            game = [10, 20, 22, 20, 12]\n            guess = [22, 22,\
    \ 22, 22, 22]\n            print(compare(game, guess))\n            \n       \
    \     game = [10, 20, 22, 20, 12]\n            guess = [18, 19, 20, 22, 22]\n\
    \            print(compare(game, guess))\n            \n            game = [10,\
    \ 20, 22, 20, 12]\n            guess = [18, 20, 22, 22, 22]\n            print(compare(game,\
    \ guess))\n            \n            game = [10, 20, 22, 20, 12]\n           \
    \ guess = [18, 19, 19, 22, 22]\n            print(compare(game, guess))\n    \
    \        \n            game = [10, 20, 22, 20, 12]\n            guess = [18, 19,\
    \ 20, 19, 22]\n            print(compare(game, guess))\n            \n       \
    \     game = [10, 20, 22, 20, 12]\n            guess = [18, 20, 19, 19, 22]\n\
    \            print(compare(game, guess))\n            \n            game = [10,\
    \ 20, 22, 20, 12]\n            guess = [18, 19, 20, 20, 22]\n            print(compare(game,\
    \ guess))\n            \n            game = [10, 20, 22, 20, 12]\n           \
    \ guess = [18, 20, 19, 20, 19]\n            print(compare(game, guess))\n    \
    \        \n            game = [10, 20, 22, 20, 12]\n            guess = [18, 20,\
    \ 19, 20, 20]\n            print(compare(game, guess))\n            \n       \
    \     game = [10, 20, 22, 20, 12]\n            guess = [18, 20, 19, 20, 21]\n\
    \            print(compare(game, guess))\n            \n            game = [10,\
    \ 20, 22, 20, 12]\n            guess = [18, 20, 19, 20, 22]\n            print(compare(game,\
    \ guess))\n            \n            game = [10, 20, 22, 20, 12]\n           \
    \ guess = [18, 20, 19, 20, 21]\n            print(compare(game, guess))\n    \
    \        \n            game = [10, 20, 22, 20, 12]\n            guess = [18, 20,\
    \ 19, 20, 22]\n            print(compare(game, guess))\n            \n       \
    \     game = [10, 20, 22, 20, 12]\n            guess = [18, 20, 19, 20, 21]\n\
    \            print(compare(game, guess))\n            \n            game\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnle469mz.py\", line 16\n    game = [10, 20, 22, 20, 12]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 2, 3, 2]\n            guess = [3, 2, 1]\n    \n            the returned\
    \ array should be [1, -1, -1, -1]\n            \"\"\"\n            game = [1,\
    \ 2, 3, 2]\n            guess = [3, 2, 1]\n            \n    \n    \n    \n  \
    \  \n    \n    \n    \"\"\"\n    # Write your code here\n    return [-abs(a-b)\
    \ for a, b in zip(game, guess)]\n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi7dinnzl.py\", line 16\n    game = [1, 2, 3, 2]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [2, 3, 4, 1]\n            guesses = [1, 3, 4, 5]\n            results\
    \ = compare(scores, guesses)\n            print(results)\n            \"\"\"\n\
    \    \"\"\"\n    if len(game) != len(guess):\n        return 0\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp05l2d_jd.py\", line 16\n    scores = [2, 3, 4, 1]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 15, 10, 15]\n            guess = [12, 15, 14, 11]\n            compare(game,\
    \ guess)\n            # returns [1, 1, 0, 2]\n            game = [10, 15, 10,\
    \ 15]\n            guess = [12, 13, 14, 11]\n            compare(game, guess)\n\
    \            # returns [0, 0, -1, 1]\n            game = [10, 15, 10, 15]\n  \
    \          guess = [12, 13, 14, 15]\n            compare(game, guess)\n      \
    \      # returns [0, 0, -1, 0]\n    \n    \n    \n    \n    \"\"\"\n    return\
    \ list(map(lambda x, y: abs(y - x) if x == y else x, guess, game))\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqelxxlj_.py\", line 16\n    game = [10, 15, 10, 15]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [-3, 4, 1, 2, -1]\n            guesses = [3, 2, 0, 2, 1]\n        \
    \    compare(scores, guesses)\n            > [1, 1, 0, -1, 0]\n            \"\"\
    \"\n    \"\"\"\n    scores = list(score)\n    guess = list(guess)\n    score =\
    \ list(map(abs, scores))\n    guess = list(map(abs, guess))\n    diff = list(map(lambda\
    \ x: x[0] - x[1], zip(guess, score)))\n    \n    for i in range(len(diff)):\n\
    \        if diff[i] == 0:\n            diff[i] = 1\n    return diff\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_xje1srb.py\", line 16\n    scores = [-3, 4, 1, 2, -1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ [1, 5, 8]\n            [8, 1, 6]\n            \n            guess = [1,2]\n\
    \            game = [8,1]\n            result = [3,3]\n            \n    \"\"\"\
    \n    diffs = []\n    guesses = guess\n    scores = game\n    length = len(guesses)\n\
    \    if length != len(scores):\n        return None\n    for i in range(length):\n\
    \        diff = guesses[i] - scores[i]\n        diffs.append(abs(diff))\n    return\
    \ diffs\n    \n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpti65338d.py\", line 16\n    [1, 5, 8]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ Input array = [1, 2, 2, 2, 3, 4, 4, 5, 4, 4, 4]\n            Guesses  = [3,\
    \ 3, 3, 4, 4, 4, 4, 4, 5, 5, 4]\n            Output = [0, 5, 7, 9, 11, 14, 15,\
    \ 15, 14, 11, 9, 5]\n            \"\"\"\n    \n    Time complexity: O(n^2) because\
    \ you need to compare each guess with the corresponding score.\n    Space complexity:\
    \ O(n) since you always need to remember the last guess and score\"\"\"\n    \n\
    \    guess_dict = {}\n    score_dict = {}\n    \n    # store the scores as keys\
    \ and guesses as values\n    for i in range(len(game)):\n        score_dict[game[i]]\
    \ = i\n        guess_dict[game[i]] = guess[i]\n    \n    # go through each guess\
    \ and compare it with the scores\n    # if the guess is correct, add 0 to the\
    \ result array\n    # if the guess is wrong, take the difference between guess\
    \ and score\n    for i in range(len(guess)):\n        if guess_dict[guess[i]]\
    \ == score_dict[game[i]]:\n            result_array[i] = 0\n        else:\n  \
    \          result_array[i] = abs(guess_dict[guess[i]] - score_dict[game[i]])\n\
    \            \n    return result_array\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpf1xe007c.py\", line 16\n    Input array = [1, 2, 2, 2,\
    \ 3, 4, 4, 5, 4, 4, 4]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,0,1,1,0]\n            guess = [1,0,1,1,1]\n            return = [3,2,1,0,0]\n\
    \            \"\"\"\n\n    \n    \n    \"\"\"\n    your code here\n    \"\"\"\n\
    \n    return correct_guesses\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpuo0w0hq0.py\", line 16\n    game = [1,0,1,1,0]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 10, 9, 8, 8, 8]\n            guess = [8, 10, 8, 8, 8, 8]\n     \
    \       \n            compare(game, guess)\n            >> [0, 0, 6, -6, 0, 2]\n\
    \    \n    \n    Constraints:\n        1 <= len(game) < len(guess) <= 100\n  \
    \      1 <= game[i] <= 100 \n        0 <= guess[i] <= 100\n    \n    \n    \n\
    \    \n    \n    Source: https://leetcode.com/problems/compare-match-results/\n\
    \    \"\"\"\n    \n    # Write your code here\n    # Your code here\n    match\
    \ = 0\n    \n    for i in range(len(game)):\n        if(game[i] == guess[i]):\n\
    \            match+=1\n    \n    if match == len(game):\n        return [0,0,0]\n\
    \    else:\n        return match,abs(match-len(game)),abs(match-len(game))\n \
    \   \n\"\"\"\nRuntime: 762 ms, faster than 97.72% of Python3 online submissions\
    \ for Compare Match Results.\nMemory Usage: 14.3 MB, less than 100.00% of Python3\
    \ online submissions for Compare Match Results.\n\"\"\"\n</cell>\n<cell>\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpi1n5xvr7.py\", line 16\n    game = [10, 10, 9, 8, 8, 8]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [97, 94, 88, 94, 97, 97, 91, 90]\n            guess = [97, 97, 97, 97,\
    \ 98, 98, 97, 97]\n            >>>\n            [[0, 0, 0, 0],\n             [3,\
    \ 3, 3, 3, 3],\n             [6, 6, 6, 6, 6],\n             [3, 3, 3, 3, 3],\n\
    \             [6, 6, 6, 6, 6],\n             [3, 3, 3, 3, 3],\n             [3,\
    \ 3, 3, 3, 3]]\n            >>>\n            [[0, 3, 3, 6, 6],\n             [3,\
    \ 3, 3, 6, 6],\n             [3, 3, 3, 6, 6],\n             [3, 3, 3, 6, 6],\n\
    \             [3, 3, 3, 6, 6],\n             [3, 3, 3, 6, 6]]\n            >>>\n\
    \    \"\"\"\n    # your solution here\n    guess_diff = []\n    for i in range(len(game)):\n\
    \        guess_diff.append(abs(game[i] - guess[i]))\n    return guess_diff\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmps80oz3fl.py\", line 16\n    game = [97, 94, 88, 94, 97,\
    \ 97, 91, 90]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [\n                [8, 2, 0],\n                [0, 7, 1],\n       \
    \         [0, 0, 8],\n            ]\n            guesses = [\n               \
    \ [1, 9, 2],\n                [1, 2, 9],\n                [1, 9, 7],\n       \
    \     ]\n            compare(scores, guesses)\n            \n            # returns:\n\
    \            [2, 0, 2]\n            \n            \n    \"\"\"\n    result = []\n\
    \    for i in range(len(guess)):\n        if guess[i] == game[i]:\n          \
    \  result.append(0)\n        else:\n            result.append(abs(guess[i] - game[i]))\n\
    \    return result\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpiax44jhc.py\", line 16\n    scores = [\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 2, 2, 4, 0]\n            guess = [1, 0, 0, 2, 2]\n\n         \
    \   returns: [0, 0, 0, 1, 0]\n            \"\"\"\n    \"\"\"\n    \n    \n   \
    \ \"\"\"\n    TODO: fill this in \n    \"\"\"\n    for i in range(len(game)):\n\
    \        \n        \n    \"\"\"\n    TODO: add comment\n    \"\"\"\n    return\
    \ []\n\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9wq2418p.py\", line 16\n    game = [1, 3, 2, 2, 4, 0]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3, 2, 3, 0, 1, 3, 2]\n            guess = [2, 2, 1, 3, 1, 2, 3]\n  \
    \          compare(game, guess)\n            # -> [2, -1, 1, 3, 1, 0, 1]\n   \
    \         \"\"\"\n    \"\"\"\n    \n    game_count = 0\n    guess_count = 0\n\
    \    game_count = 0\n    guess_count = 0\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp99ngrnxq.py\", line 16\n    game = [3, 2, 3, 0, 1, 3,\
    \ 2]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 5, 4, 3, 2]\n            guesses = [4, 1, 6, 1, 1]\n          \
    \  compare(scores, guesses)\n            [0, 0, 0, -1, 2]\n            \n    \
    \        scores = [9, 3, 5, 4, 2]\n            guesses = [4, 1, 5, 2, 1]\n   \
    \         compare(scores, guesses)\n            [-1, -1, -1, 0, 1]\n         \
    \   \"\"\"\n    \"\"\"\n    \n    # write your code here\n    scores = np.asarray(scores)\n\
    \    guesses = np.asarray(guesses)\n    diff = np.abs(scores - guesses)\n    indices\
    \ = np.where(diff == 0)\n    diff = diff[indices]\n    diff = np.insert(diff,\
    \ 0, 0)\n    diff = np.insert(diff, len(diff), -1)\n    return diff\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpux5r24ek.py\", line 16\n    scores = [1, 5, 4, 3, 2]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [1, 5, 7, 8, 9]\n    guesses = [1, 5, 7, 8]\n    compare(scores, guesses)\n\
    \    \"\"\"\n    correct = []\n    for i in range(len(guesses)):\n        if guesses[i]\
    \ == game[i]:\n            correct.append(0)\n        else:\n            correct.append(abs(guesses[i]\
    \ - game[i]))\n    return correct\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpc9pers81.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 37)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, -7, 2, 3, 1]\n            guesses = [1, 5, 2, 5, 8]\n        \
    \    \n            compare(scores, guesses) -> [3, 2, 3, 0, 0]\n            \n\
    \            \"\"\"\n            \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpwyt13nie.py\", line 16\n    scores = [10, -7, 2, 3, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [4, 3, 7, 2, 5, 4, 4, 3, 3, 8, 2, 5]\n            guess = [3, 5]\n  \
    \          compare(game, guess)\n            [4, 5, 4, 5, 5, 4, 3, 3, 3, 2, 2,\
    \ 1]\n            \"\"\"\n\n    scores = [7, 3, 6, 5, 1, 5, 4, 3, 8]\n    guesses\
    \ = [4, 2]\n    \"\"\"\n    guesses = [2, 4]\n    game = [8, 1, 4, 6, 5, 7, 3,\
    \ 5, 7]\n    compare(game, guesses)\n    \"\"\"\n    \n    diff = []\n\n    for\
    \ i in range(len(guesses)):\n        diff = diff + [int(abs(guesses[i] - game[i]))]\n\
    \n    return diff\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4,\
    \ 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpxvsqmz2v.py\", line 16\n    game = [4, 3, 7, 2, 5, 4,\
    \ 4, 3, 3, 8, 2, 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [5, 3, 9, 9, 5, 2]\n    guesses = [7, 3, 9, 9, 3, 0]\n    \n    compare(scores,\
    \ guesses) returns [2, -1, 1, -1, 1, -1]\n    \n    scores = [5, 3, 9, 9, 5, 2]\n\
    \    guesses = [7, 5, 9, 9, 3, 0]\n    \n    compare(scores, guesses) returns\
    \ [2, -1, 1, -1, 1, -1]\n    \"\"\"\n    game.reverse()\n    guesstalk = zip(guess,\
    \ game)\n    guesstalk = sorted(guesstalk, key=lambda x: (x[0], -x[1]))\n    \n\
    \    \n    return guesstalk\n        \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp04thlxob.py\", line 25\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 42)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [4, 8, 7, 9, 7, 4, 9, 0, 7, 5, 9, 7, 5, 9, 7]\n            guess = [8,\
    \ 5, 9, 7, 9, 7, 7, 9, 7, 7, 7, 9, 9, 0, 7]\n            \n            compare(game,\
    \ guess)\n            # returns [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n \
    \           \n    \n    Complexity:\n        Best case: O(1)\n        Avg case:\
    \ O(n)\n        Worst case: O(n)\n    \n    \n    \n    \n    \"\"\"\n    if game\
    \ == guess:\n        return [0 for i in range(len(game))]\n    \n    \n    \n\
    \    \n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbu02ui4w.py\", line 16\n    game = [4, 8, 7, 9, 7, 4,\
    \ 9, 0, 7, 5, 9, 7, 5, 9, 7]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [100, 80, 100, 90]\n    guesses = [50, 60, 60, 70]\n    result = compare(scores,\
    \ guesses)\n    print(result)  # output: [-1, 0, 2, 3]\n    \"\"\"\n    pass\n\
    </cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpgyky085g.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [4,3,2,4,5,2,4,5,3,5]\n            guess = [4,3,4,4,4,4,3,4,5,4,4]\n\
    \            \n            game = [1,2,2,3,4,5]\n            guess = [1,2,3,4,5,6]\n\
    \            \n            game = [2,4,6,8,1,8,5,3,6,9,5,4,8,1,3,9,8,7,3]\n  \
    \          guess = [6,8,2,3,9,3,7,8,4,1,2,4,8,5,6,3,9,7,9,1]\n            \n \
    \           game = [2,8,3,6,1,9,1,5,4,7,8,7,3,6,4,3,8,6,9]\n            guess\
    \ = [1,5,2,4,4,4,4,3,8,5,3,6,4,3,8,6,9,1,5]\n            \n            game =\
    \ [1,5,2,3,9,7,8,3,6,4,5,1,4,9,6,8,2,5,6,8]\n            guess = [9,6,5,4,5,6,5,6,8,1,7,3,6,8,5,1,4,8,7,6]\n\
    \            \n            game = [1,5,2,4,8,9,6,3,6,4,4,5,9,1,8,7,8,5,2,5,1,7]\n\
    \            guess = [9,8,7,6,5,6,8,4,1,7,6,8,5,2,4,3,5,1,7,9,3]\n           \
    \ \n            game = [5,4,9,1,7,3,6,5,2,8,9,3,8,7,4,5,8,1,3,6,7,8]\n       \
    \     guess = [8,9,5,4,2,6,5,4,2,7,1,6,8,6,5,7,4,8,1,3,9,6]\n            \n  \
    \          game = [8,6,9,4,1,3,9,5,7,2,6,5,5,2,3,7,6,4,8,3,7,9]\n            guess\
    \ = [6,8,5,4,2,7,1,4,5,8,6,3,6,5,2,3,7,6,4,8,3,7,9]\n            \n          \
    \  game = [1,4,7,8,3,9,4,6,5,2,5,1,4,6,7,8,5,3,6,4,8,9,3]\n            guess =\
    \ [7,8,4,9,4,5,3,8,1,4,6,5,2,3,7,6,4,8,9,3,1]\n            \n            game\
    \ = [1,5,2,8,6,3,7,9,7,8,3,5,6,9,6,7,4,5,8,6,1,3,6]\n            guess = [8,6,5,4,2,7,1,6,9,4,8,6,3,6,5,2,3,7,6,4,8,3,7,9]\n\
    \            \n            game = [1,5,6,3,8,7,2,6,9,4,8,6,3,6,5,2,3,7,6,4,8,3,7,9]\n\
    \            guess = [8,6,5,4,2,7,1,6,9,4,8,6,3,6,5,2,\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpnziezn6_.py\", line 16\n    game = [4,3,2,4,5,2,4,5,3,5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ guess = [1, 0, 0, 0]\n            scores = [2, 2, -1, 3]\n            return\
    \ = [0, 2, 2, 2]\n            \"\"\"\n    \"\"\"\n    \"\"\"\n    \n    Your task\
    \ is to determine if a person correctly guessed the results of a number of matches.\n\
    \    You are given two arrays of scores and guesses of equal length, where each\
    \ index shows a match. \n    Return an array of the same length denoting how far\
    \ off each guess was. If they have guessed correctly,\n    the value is 0, and\
    \ if not, the value is the absolute difference between the guess and the score.\n\
    \    \n    \n    example:\n\n            \"\"\"\n            guess = [1, 0, 0,\
    \ 0]\n            scores = [2, 2, -1, 3]\n            return = [0, 2, 2, 2]\n\
    \            \"\"\"\n    \"\"\"\n    \"\"\"\n    Your task is to determine if\
    \ a person correctly guessed the results of a number of matches.\n    You are\
    \ given two arrays of scores and guesses of equal length, where each index shows\
    \ a match. \n    Return an array of the same length denoting how far off each\
    \ guess was. If they have guessed correctly,\n    the value is 0, and if not,\
    \ the value is the absolute difference between the guess and the score.\n    \n\
    \    \n    example:\n\n            \"\"\"\n            guess = [1, 0, 0, 0]\n\
    \            scores = [2, 2, -1, 3]\n            return = [0, 2, 2, 2]\n     \
    \       \"\"\"\n    \"\"\"\n    \"\"\"\n    Your task is to determine if a person\
    \ correctly guessed the results of a number of matches.\n    You are given two\
    \ arrays of scores and guesses of equal length, where each index shows a match.\
    \ \n    Return an array of the same length denoting how far off each guess was.\
    \ If they have guessed correctly,\n    the value is 0, and if not, the value is\
    \ the absolute difference between the guess and the score.\n    \n    \n    example:\n\
    \n            \"\"\"\n            guess = [1, 0, 0, 0]\n            scores = [2,\
    \ 2, -1, 3]\n            return = [0, 2, 2, 2]\n            \"\"\"\n    \"\"\"\
    \n    \"\"\"\n    Your task is to determine if a person correctly guessed the\
    \ results of a number of matches.\n    You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n    Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n    the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n    \n    \n    example:\n\n            \"\
    \"\"\n            guess = [1, 0, 0, 0]\n            scores = [2, 2, -1, 3]\n \
    \           return = [0, 2, 2, 2]\n            \"\"\"\n    \"\"\"\n    \"\"\"\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp3davkr57.py\", line 16\n    guess = [1, 0, 0, 0]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ >>> game = [2,1,5,6,7,8,4,3]\n            >>> guess = [1,2,3,3,3,4,5]\n    \
    \        >>> compare(game, guess)\n            [0, -1, 0, -2, -2, -2, 0]\n   \
    \         \"\"\"\n            \n    \n    \n    >>> game = [2,1,5,6,7,8,4,3]\n\
    \    >>> guess = [3,3,3,4,5,4,5,4]\n    >>> compare(game, guess)\n    [-2, -2,\
    \ -2, -2, -2, 3, -2]\n    \n    \"\"\"\n    return [ abs(x - y) for x, y in zip(game,\
    \ guess) ]\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmphlxwvvoe.py\", line 16\n    >>> game = [2,1,5,6,7,8,4,3]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [2,1,0]\n            guess = [2,1,1]\n            # this example should\
    \ return [0,1,1]\n            \"\"\"\n    \n    \n    \"\"\"\n    length = len(guess)\n\
    \    correct = 0\n    diff = [None]*length\n    \n    for i in range(length):\n\
    \        guess[i] = abs(guess[i] - game[i])\n        \n        if guess[i] ==\
    \ game[i]:\n            correct += 1\n            \n        else:\n          \
    \  diff[i] = guess[i]\n    \n    return [correct, diff]\n\ngame = [2,1,0]\nguess\
    \ = [2,1,1]\nprint(compare(game, guess))\n</cell>\n<text>\nProblem 1\nWrite a\
    \ function that accepts a string and returns the count of how many times each\
    \ character appears in the string. \nThe order of the characters should be preserved.\
    \ The string will contain only characters from a-z and/or A-Z. \nFor instance,\
    \ \"The quick brown fox jumps over the lazy dog\" would return {\"t\": 4, \"h\"\
    : 2, \"e\": 3, \"q\": 1, \"r\": 1, ..., \"z\": 1}.\nYou may assume that the string\
    \ contains at least one character.\nNote that uppercase and lowercase counts should\
    \ be separated by exactly one character\n(e.g. \"A\" should count as two different\
    \ letters).\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpex7eg_vi.py\", line 16\n    game = [2,1,0]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [[100,100,80,80,70,100,100,80,80,70],\n            [100,100,80,80,70,100,100,80,80,70],\n\
    \            [100,100,80,80,70,100,100,80,80,70],\n            [100,100,80,80,70,100,100,80,80,70],\n\
    \            [100,100,80,80,70,100,100,80,80,70],\n            [100,100,80,80,70,100,100,80,80,70]]\n\
    \n            guess = [100,100,80,80,70,100,100,80,80,70]\n            >> [1,1,1,3,1,1,0,0,0]\n\
    \            \"\"\" \n            \n    \n    notes:\n    you do NOT need to try\
    \ all possible pairs, a person can have a better guess than a person that has\
    \ already tried\n    \n    you can ignore the possibility of being right on the\
    \ same number\n    \n    you can assume that scores are all valid\n    \n    \n\
    \    \"\"\"\n    return [0]*len(guess)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp72kzj7w4.py\", line 16\n    game = [[100,100,80,80,70,100,100,80,80,70],\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ print(compare([1,5,2,4], [3,4,1,2]))\n            print(compare([5,2,2,4], [3,4,1,2]))\n\
    \            print(compare([5,2,2,4], [3,5,1,2]))\n            print(compare([5,2,4,1],\
    \ [3,4,1,2]))\n            print(compare([5,2,4,1], [3,5,1,2]))\n            print(compare([5,2,4,1],\
    \ [3,5,1,2]))\n            print(compare([4,5,2,1], [3,5,1,2]))\n            \"\
    \"\"\n    \"\"\"\n    \n    if len(guess) != len(game):\n        raise ValueError(\"\
    guess and game are of different lengths\")\n    differences = []\n    for i in\
    \ range(len(guess)):\n        if guess[i] == game[i]:\n            differences.append(0)\n\
    \        else:\n            differences.append(abs(guess[i] - game[i]))\n    return\
    \ differences\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqlkqrf59.py\", line 16\n    print(compare([1,5,2,4], [3,4,1,2]))\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ >>> compare([0,1,2,2,0],[0,1,0])\n            [[2, 1], [0, 0], [0, 1], [0, 0]]\n\
    \            \"\"\"\n            \n    Args:\n        game: A list of integers\
    \ denoting your score.\n        guess: An array of integers denoting your guess.\n\
    \    Returns:\n        Array: A 2D array denoting how far off each guess was.\n\
    \    \"\"\"\n    \n    diff = []\n    \n    for i in range(len(game)):\n     \
    \   diff.append(guess[i] - game[i])\n    return diff\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpzd375i7p.py\", line 16\n    >>> compare([0,1,2,2,0],[0,1,0])\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [7, 1, 8, 3, 4, 5]\n            guess = [3, 4, 8, 5, 7, 1]\n        \
    \    print(compare(game, guess))\n            >>[2, -4, -5, 0, 0, 0]\n       \
    \     \n            \n            game = [0, 4, 0, 8, 0, 0]\n            guess\
    \ = [2, 4, 0, 8, 0, 0]\n            print(compare(game, guess))\n            >>[0,\
    \ -2, 0, -2, 0, -2]\n            \n            \n            game = [5, 0, 0,\
    \ 0, 0, 0]\n            guess = [8, 0, 0, 0, 5, 0]\n            print(compare(game,\
    \ guess))\n            >>[-2, 0, 0, -2, 0, 0]\n    \n    \n    \n    \n    Args:\n\
    \        game(List[int]) -- Array of scores representing a game\n        guess(List[int])\
    \ -- Array of guesses representing a guess\n    \n    Returns:\n        List[int]\
    \   -- Array of same length as games denoting how far off each guess was\n   \
    \ \"\"\"\n    return [i!=j for i, j in zip(game, guess)]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpw3f5ctkm.py\", line 16\n    game = [7, 1, 8, 3, 4, 5]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([2,1,5,4],\
    \ [2,1,5,5])\n    [0, 0, -1, 0]\n    \n    Time complexity: O(n)\n    Space complexity:\
    \ O(1)\n    \"\"\"\n    res = []\n    for i in range(len(game)):\n        diff\
    \ = abs(game[i] - guess[i])\n        if game[i] == guess[i]:\n            res.append(0)\n\
    \        else:\n            res.append(diff)\n    return res\n    \n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpo7k9zrjt.py\", line 21\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 41)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [9,9,5,0,5]\n            guesses = [9,10,5,5,5]\n            expected\
    \ results = [0,0,5,0,0]\n            \n            scores = [9,9,5,0,5]\n    \
    \        guesses = [9,10,0,5,5]\n            expected results = [0,0,5,0,0]\n\
    \            \"\"\"\n            \n    notes:\n\n    You will need to compare\
    \ all array entries and find the one with the least difference\n    before returning\
    \ the result.\n\n    Your code should also handle cases where the scores and guesses\
    \ lists aren't the same length.\n    \n    If none of the guesses match, the function\
    \ should return an array of length 0.\n    \n    If both guesses and scores are\
    \ the same length and they have exactly the same elements, return an array of\
    \ length 1.\n    \n    If there are differences between the guesses and scores,\
    \ return an array of length 2.\n    \n    If all guesses and scores are equal,\
    \ return an array of length 0.\n    \n    If there are multiple matches such that\
    \ none of the guesses are correct, return the minimum number of guesses required\
    \ to make all the scores correct (i.e. the one with the minimum difference between\
    \ the scores and the guesses).\n    \n    If there are multiple matches such that\
    \ at least one is incorrect, return the maximum number of guesses required to\
    \ make all the scores correct (i.e. the one with the maximum difference between\
    \ the scores and the guesses).\n    \n    If the guesses and scores are both empty,\
    \ return an empty array.\n    \n    This function should work with any number\
    \ of matches.\n    \n    \"\"\"\n    if not scores or not guesses:\n        return\
    \ []\n\n    if len(scores) != len(guesses):\n        return []\n\n    if len(scores)\
    \ == 0:\n        return []\n\n    if len(scores) == 1:\n        return [0]\n\n\
    \    if len(scores) == 2:\n        return [1]\n\n    min_diff = 10000000\n   \
    \ max_diff = 0\n    min_diff_index = 0\n    max_diff_index = 0\n\n    for index\
    \ in range(0, len(scores)):\n        diff = abs(guesses[index] - scores[index])\n\
    \n        if diff < min_diff:\n            min_diff = diff\n            min_diff_index\
    \ = index\n        \n        if diff > max_diff:\n            max_diff = diff\n\
    \            max_diff_index = index\n\n    return min_diff_index == max_diff_index\
    \ and min_diff < 0 or min_diff > max_diff and abs(min_diff) == abs(max_diff) and\
    \ min_diff > 0 and max_diff > 0 or min_diff == max_diff and abs(min_diff) == abs(max_diff)\
    \ and min_diff == 0 and max_diff == 0\n\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpt98edni0.py\", line 16\n    scores = [9,9,5,0,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ print(compare([5,2,4,9], [1,4,5]))\n            # returns [1,-1,0,1]\n     \
    \       \n    \n    \n    NOTE: Your solution will ONLY work if the number of\
    \ matches is even.\n    \"\"\"\n\n    if len(game)==0 or len(guess)==0:\n    \
    \    return []\n    \n    correct=True\n    for i in range(len(game)):\n     \
    \   if game[i]!=guess[i]:\n            correct=False\n            diff=abs(game[i]-guess[i])\n\
    \            \n    return [1 if correct==True else diff]\n        \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpcjk0w6sv.py\", line 16\n    print(compare([5,2,4,9], [1,4,5]))\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [-5, 2, 3, 7]\n            guess = [7, -5]\n            result = compare(game,\
    \ guess)\n            print(result)\n            >>[4, 5, 5]\n            \n \
    \           game = [4, 3, 7, 8]\n            guess = [-5, 3, 7]\n            result\
    \ = compare(game, guess)\n            print(result)\n            >>[2, 0, -1]\n\
    \            \"\"\"\n    \"\"\"\n    # todo write your code here\n    pass\n \
    \   return score\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkpfaspda.py\", line 16\n    game = [-5, 2, 3, 7]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [1, 3, 2, 4]\n            guesses = [3, 3, 5, 4]\n            answer\
    \ = [2, 3, 2, 0]\n            \n            scores = [1, 3, 2, 4]\n          \
    \  guesses = [3, 3, 3, 5]\n            answer = [0, 0, 2, 2]\n            \n \
    \           scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n      \
    \      answer = [3, 3, 2, 1]\n            \n            scores = [1, 3, 2, 4]\n\
    \            guesses = [3, 3, 3, 5]\n            answer = [3, 3, 3, 1]\n     \
    \       \n            scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n\
    \            answer = [3, 3, 3, 0]\n            \n            scores = [1, 3,\
    \ 2, 4]\n            guesses = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n\
    \            \n            scores = [1, 3, 2, 4]\n            guesses = [3, 3,\
    \ 3, 5]\n            answer = [3, 3, 3, 0]\n            \n            scores =\
    \ [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n            answer = [3, 3,\
    \ 3, 0]\n            \n            scores = [1, 3, 2, 4]\n            guesses\
    \ = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n            \n          \
    \  scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n            answer\
    \ = [3, 3, 3, 0]\n            \n            scores = [1, 3, 2, 4]\n          \
    \  guesses = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n            \n \
    \           scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n      \
    \      answer = [3, 3, 3, 0]\n            \n            scores = [1, 3, 2, 4]\n\
    \            guesses = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n     \
    \       \n            scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n\
    \            answer = [3, 3, 3, 0]\n            \n            scores = [1, 3,\
    \ 2, 4]\n            guesses = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n\
    \            \n            scores = [1, 3, 2, 4]\n            guesses = [3, 3,\
    \ 3, 5]\n            answer = [3, 3, 3, 0]\n            \n            scores =\
    \ [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n            answer = [3, 3,\
    \ 3, 0]\n            \n            scores = [1, 3, 2, 4]\n            guesses\
    \ = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n            \n          \
    \  scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n            answer\
    \ = [3, 3, 3, 0]\n            \n            scores = [1, 3, 2, 4]\n          \
    \  guesses = [3, 3, 3, 5]\n            answer = [3, 3, 3, 0]\n            \n \
    \           scores = [1, 3, 2, 4]\n            guesses = [3, 3, 3, 5]\n      \
    \      answer = [3, 3, 3, 0]\n            \n            scores = [1, 3, 2, 4]\n\
    \            \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmptkq7cczz.py\", line 16\n    scores = [1, 3, 2, 4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            game = [1,2,3,4,5,6,7]\n            guess = [1,5,4,3,4,5,1]\n\
    \            \n            compare(game,guess)\n            Out: [2, -3, 0, 1,\
    \ 3, -1, 0]\n            \n            \"\"\"\n            \n    >>> game = [1,2,3,4,5,6,7]\n\
    \    >>> guess = [1,5,4,3,4,5,1]\n    >>> compare(game,guess)\n    Out: [2, -3,\
    \ 0, 1, 3, -1, 0]\n\n    \n    \"\"\"\n\n    \n    \n    \n\n    \n    return\
    \ []\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp79zp7x6r.py\", line 17\n    game = [1,2,3,4,5,6,7]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [4,\
    \ 6, 1, 0]\n    guess = [7, 2, 8, 1]\n    compare(game, guess) #should return\
    \ [1, -1, 1, 0]\n    \n    You will have to implement the compare function and\
    \ compare all possible combinations.\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp7tgb9gel.py\", line 20\n    You will have to implement\
    \ the compare function and compare all possible combinations.\n        ^^^^\n\
    SyntaxError: invalid syntax\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [20, 21, 21, 20, 22, 21, 20, 20, 20, 21]\n            guess = [21, 23,\
    \ 25, 20, 21, 22, 24, 25, 20, 23, 25]\n            result = compare(game, guess)\n\
    \            print(result)\n            # should print [2, 3, 0, 0, -3, -3, -6,\
    \ -10, -6, -2]\n            \n    \"\"\"\n    \n    \n    \n    result = []\n\
    \    \n    for i in range(len(game)):\n        \n        if game[i] == guess[i]:\n\
    \            result.append(0)\n        else:\n            result.append(abs(guess[i]\
    \ - game[i]))\n        \n    return result\n</cell>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp7_xrxndx.py\", line 16\n    game = [20, 21, 21, 20, 22,\
    \ 21, 20, 20, 20, 21]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [1,1,2,2]\n\
    \    guess = [1,2,3,4]\n    expected output = [0,-1,0,1]\n    \n    \"\"\"\n \
    \   \n    diff = []\n    \n    for i in range(0, len(guess)):\n        diff.append(abs(guess[i]-game[i]))\n\
    \        \n    return diff\n\nprint(compare([1, 1, 2, 2], [1, 2, 3, 4]))\n</code>\n\
    Output: [-1, 0, 1]\n<|/ a |>\n<| c |>\nThis answer was very helpful.  I was able\
    \ to adapt it for my purposes and it worked perfectly.  Thanks!\n<|/ c |>\n<|\
    \ c |>\nI tried to make the code more efficient, by using a list comprehension.\
    \ Let me know if you'd like me to post it as an answer.\n<|/ c |>\n<| c |>\nI\
    \ really appreciate it!\n<|/ c |>\n<| a tags=arrays,python-3.x,python |>\n<code>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpo031zu4_.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 53)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n        score\
    \ = ([1,3,5,7,8], [1,3,5,7,9])\n        guess = (1,3,5,7)\n        \n        Your\
    \ function should return:\n            [-1,-5,7,3]\n            \n        as they\
    \ were off by 1 (the second guess) and off by 3 (the first guess) when compared\
    \ to \n        the score.\n        \n            \"\"\"\n    \n    score1, score2\
    \ = score\n    guess1, guess2 = guess\n    diff = []\n    \n    diff.append(abs(guess1\
    \ - score1))\n    diff.append(abs(guess2 - score2))\n\n    return diff\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp01bcg8nm.py\", line 16\n    score = ([1,3,5,7,8], [1,3,5,7,9])\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [10, 15, 12, 7]\n            guesses = [12, 7, 14, 1]\n           \
    \ \n            >> [5, 7, 7, 3]\n            \"\"\"\n    \n    Args:\n       \
    \ game: an array of scores to compare\n        guess: a guess that is also an\
    \ array\n    \n    Returns: an array of the same length as 'guess' denoting how\
    \ far off each guess was\n    \n    \"\"\"\n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbndvowrj.py\", line 16\n    scores = [10, 15, 12, 7]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    game\
    \ = [2,5,4,3,6,2,6,5,3,1]\n    guess = [2,3,4,5,6,7,8,9,1,2]\n    \n    compare(game,\
    \ guess)\n\n    \"\"\"\n    if len(game) != len(guess):\n        return -1\n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmps8y7cgho.py\", line 22\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 265)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10, 20, 30, 40, 50, 60]\n            guess = [5, 20, 30, 30, 40, 50]\n\
    \            print(compare(game, guess))\n            >>[0, 5, 10, 15, -10, 0]\n\
    \            \"\"\"\n\n    \n    \"\"\"\n    \n    \n    \n    \"\"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpjaroeeqr.py\", line 16\n    game = [10, 20, 30, 40, 50,\
    \ 60]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ compare([2, 3, 1], [4, 7, 3]) \n            # Result: [1, -4, 1]\n\n    \"\"\
    \"\n    # Your code here\n\n    if game[0]<guess[0] or game[0]>guess[1]:\n   \
    \     return [game[0]-guess[0],game[1]-guess[1]]\n\n    if game[1]<guess[1] or\
    \ game[1]>guess[0]:\n        return [game[0]-guess[1],game[1]-guess[0]]\n\n  \
    \  return [game[0]-guess[0],game[1]-guess[1]]\n\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp1t_agdoh.py\", line 16\n    compare([2, 3, 1], [4, 7,\
    \ 3]) \nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [-5, 3, -1, -1, 4]\n            guess = [2, -2, 1, 3, 2]\n\n        \
    \    results = compare(game, guess)\n            print(results)\n            \"\
    \"\"\n            \n    \n\n    \n    >>> compare([-5, 3, -1, -1, 4], [2, -2,\
    \ 1, 3, 2])\n    [0, 0, 0, 1, 1]\n    >>> compare([-2, -2, 2, 1, 1], [1, -1, 2,\
    \ -1, 1])\n    [0, 0, 0, -1, 1]\n    \"\"\"\n    results = []\n    game = game\
    \ + [0] * (len(guess) - len(game))\n    guess = guess + [0] * (len(game) - len(guess))\n\
    \n    for i, x in enumerate(game):\n        dif = guess[i] - x\n        if dif\
    \ > 0:\n            dif = dif\n        elif dif == 0:\n            dif = dif\n\
    \        else:\n            dif = abs(dif)\n        results.append(dif)\n    return\
    \ results\n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpphvuw74f.py\", line 16\n    game = [-5, 3, -1, -1, 4]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n     \
    \       scores = [7, 2, 9, 5, 1]\n            guesses = [4, 8, 6, 1]\n       \
    \     result = compare(scores, guesses) # [0, 1, 0, -1]\n    \n            scores\
    \ = [5, 7, 9, 1, 2]\n            guesses = [4, 8, 6, 1]\n            result =\
    \ compare(scores, guesses) # [0, 1, 0, -1]\n    \n            scores = [7, 2,\
    \ 9, 5, 1]\n            guesses = [8, 4, 6, 1]\n            result = compare(scores,\
    \ guesses) # [1, 0, 0, -1]\n    \n            scores = [7, 2, 9, 5, 1]\n     \
    \       guesses = [5, 1, 6, 1]\n            result = compare(scores, guesses)\
    \ # [1, 0, 0, -1]\n    \n    \n    \n    \n    \n    \n    \"\"\"\n    # write\
    \ your solution here\n    result = list(map(lambda guess: abs(guess - game), guess))\n\
    \    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpihubq7qp.py\", line 17\n    scores = [7, 2, 9, 5, 1]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [7,\
    \ 10, 8, 8, 11]\n    guess = [8, 8, 8, 8, 8]\n    \"\"\"\n    pass\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpxvmeeo0t.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 31)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [3, 8, 5, 7, 11]\n    guesses = [8, 5, 9, 2, 5]\n    \n    # should return [3,\
    \ 2, 2, 0, 0]\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(f\"\
    length of game = {len(game)}, length of guesses = {len(guess)}\")\n        \n\
    \    diff = [abs(guess-score) for score, guess in zip(game, guesses)]\n    \n\
    \    return diff\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5,\
    \ 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0,\
    \ 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpsrpuzz2r.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 37)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([91,\
    \ 50, 3, 93, 50, 60, 45, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53,\
    \ 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64,\
    \ 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63,\
    \ 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60,\
    \ 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89,\
    \ 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94,\
    \ 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73,\
    \ 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9,\
    \ 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89,\
    \ 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92,\
    \ 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64,\
    \ 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7,\
    \ 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66,\
    \ 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91,\
    \ 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43,\
    \ 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92, 76,\
    \ 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89\ndef check(candidate):\n  \
    \  assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr3n_wcry.py\", line 16\n    89, 64, 80, 94, 7, 53, 73,\
    \ 66, 64, 9, 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9,\
    \ 91, 63, 89, 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89,\
    \ 43, 60, 92, 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89, 43, 60, 92,\
    \ 76, 89, 64, 80, 94, 7, 53, 73, 66, 64, 9, 91, 63, 89\n        ^^\nSyntaxError:\
    \ invalid syntax\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [5,\
    \ 2, 5]\n    guess = [2, 1, 2]\n    \n    compare(game, guess)\n    >>> [2, 0]\n\
    \    \"\"\"\n    count = 0\n    for i in range(len(game)):\n        if game[i]\
    \ == guess[i]:\n            count += 1\n            game[i] = 0\n        else:\n\
    \            game[i] = abs(game[i] - guess[i])\n    \n    if count == len(game):\n\
    \        return 0\n    else:\n        return game\n\n\"\"\"\n    There are four\
    \ different methods to solve the kata: recursion, iteration, recursion and iteration.\
    \ \n    The first two is easy to understand, however it is often the case that\
    \ the recursive method \n    takes too long to solve or that an iterative approach\
    \ is superior. The last two can all be \n    solved by making use of loops. Though\
    \ one should think twice before using loops unless \n    iteration is absolutely\
    \ required in order to solve a problem!\n\n\"\"\"\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp5utiz1dx.py\", line 42\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 52)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,3,4]\n            guess = [3,5,6]\n            output = compare(game,\
    \ guess)\n            print(output)\n            \"\"\"\n            should return\n\
    \            [0,1,2]\n    \"\"\"\n    answer = []\n    for i in range(len(guess)):\n\
    \        if game[i] == guess[i]:\n            answer.append(0)\n        else:\n\
    \            answer.append(abs(guess[i] - game[i]))\n    return answer\n    \n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp6ofam8dt.py\", line 16\n    game = [1,3,4]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n        \n \
    \   guesses = [1, 1, 3, 1, 3, 3, 3, 5, 5, 5]\n    scores = [10, 8, 7, 5, 10, 15,\
    \ 8, 7, 5, 10]\n    \n    result = compare(scores, guesses)\n    print(result)\n\
    \n    [0, 0, 0, 0, 0, 1, 2, 3, 4, 5]\n\n    \"\"\"\n    \n    count = 0\n    \n\
    \    for i in range(len(game)):\n        if game[i] != guess[i]:\n           \
    \ count += 1\n            \n    \n    \n    return count\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpin5zy8ur.py\", line 25\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 46)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [4,3,2,1,0]\n            guesses = [0,3,2,1,4]\n\n            result\
    \ = compare(scores, guesses)\n            print(result) # [4, -1, 2, -1, 0]\n\
    \    \n    \"\"\"\n    result = [0]*len(guesses)\n    count = 0\n    for i in\
    \ guesses:\n        count += 1\n        if game[i] == count:\n            result[i]\
    \ = 0\n        else:\n            result[i] = abs(game[i] - count)\n    return\
    \ list(result)\n    \n    \n    \n    \n\"\"\"\nWrite a function that can check\
    \ if a number is a palindrome or not.\n\nA palindrome is a word or phrase that\
    \ is the same forwards as it backwards. \nA palindrome is a sequence of characters\
    \ that reads the same backward or forward. \nFor example, \u201Cradar\u201D is\
    \ a palindrome, since it is the same backwards and forwards as the original sequence.\n\
    Your function should take a string and return a Boolean value.\n\"\"\"\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpf20m2ss3.py\", line 16\n    scores = [4,3,2,1,0]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([10,\
    \ 5, 3, 9], [1, 2, 3, 4])\n    [0, 0, -1, -1]\n    >>> compare([10, 5, 3, 9],\
    \ [1, 2, 3, 3])\n    [0, 1, -1, -1]\n    >>> compare([10, 5, 3, 9], [1, 2, 3,\
    \ 4])\n    [0, 1, -1, -1]\n    >>> compare([10, 5, 3, 9], [1, 2, 3, 6])\n    [0,\
    \ 0, -1, -1]\n    \"\"\"\n\n    scores = []\n    diffs = []\n    for i in range(len(guess)\
    \ - 1):\n        if guess[i] == game[i]:\n            scores.append(game[i])\n\
    \        elif game[i] > guess[i]:\n            diffs.append(game[i] - guess[i])\n\
    \        else:\n            diffs.append(guess[i] - game[i])\n    return diffs\n\
    \nprint(compare([10, 5, 3, 9], [1, 2, 3, 4]))\nprint(compare([10, 5, 3, 9], [1,\
    \ 2, 3, 3]))\nprint(compare([10, 5, 3, 9], [1, 2, 3, 4]))\nprint(compare([10,\
    \ 5, 3, 9], [1, 2, 3, 6]))\n</cell>\n<text>\nWhat if we need to find max number\
    \ in list?\n\n\n</text>\n<cell>\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpdwobre08.py\", line 24\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 57)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10,20,30,40,50]\n            guess = [15,25,35,45,55]\n            \n\
    \            compare(game,guess)\n            \n            \"\"\"\n    \n\n \
    \   \n    \"\"\"\n    # Write your code here\n    #return []\n    \n    score_diff\
    \ = abs(guess[0]-game[0]) +abs(guess[1]-game[1]) +abs(guess[2]-game[2]) +abs(guess[3]-game[3])\
    \ +abs(guess[4]-game[4])\n    score_diff = abs(guess[0]-game[0]) +abs(guess[1]-game[1])\
    \ +abs(guess[2]-game[2]) +abs(guess[3]-game[3]) +abs(guess[4]-game[4])\n    score_diff\
    \ = abs(guess[0]-game[0]) +abs(guess[1]-game[1]) +abs(guess[2]-game[2]) +abs(guess[3]-game[3])\
    \ +abs(guess[4]-game[4])\n    score_diff = abs(guess[0]-game[0]) +abs(guess[1]-game[1])\
    \ +abs(guess[2]-game[2]) +abs(guess[3]-game[3]) +abs(guess[4]-game[4])\n    score_diff\
    \ = abs(guess[0]-game[0]) +abs(guess[1]-game[1]) +abs(guess[2]-game[2]) +abs(guess[3]-game[3])\
    \ +abs(guess[4]-game[4])\n    score_diff = abs(guess[0]-game[0]) +abs(guess[1]-game[1])\
    \ +abs(guess[2]-game[2]) +abs(guess[3]-game[3]) +abs(guess[4]-game[4])\n    score_diff\
    \ = abs(guess[0]-game[0]) +abs(guess[1]-game[1]) +abs(guess[2]-game[2]) +abs(guess[3]-game[3])\
    \ +abs(guess[4]-game[4])\n    score_diff = abs(guess[0]-game[0]) +abs(guess[1]-game[1])\
    \ +abs(guess[2]-game[2]) +abs(guess[3]-game[3]) +abs(guess[4]-game[4])\n    score_diff\
    \ = abs(guess[0]-game[0]) +abs(guess[1]-game[1]) +abs(guess[2]-game[2]) +abs(guess[3]-game[3])\
    \ +abs(guess[4]-game[4])\n    score_diff = abs(guess[0]-game[0]) +abs(guess[1]-game[1])\
    \ +abs(guess[2]-game[2]) +abs(guess[3]-game[3]) +abs(guess[4]-game[4])\n    score_diff\
    \ = abs(guess[0]-game[0]) +abs(guess[1]-game[1]) +abs(guess[2]-game[2]) +abs(guess[3]-game[3])\
    \ +abs(guess[4]-game[4])\n    score_diff = abs(guess[0]-game[0]) +abs(guess[1]-game[1])\
    \ +abs(guess[2]-game[2]) +abs(guess[3]-game[3]) +\ndef check(candidate):\n   \
    \ assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3,\
    \ 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0,\
    \ 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert\
    \ candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp2gliyq5l.py\", line 16\n    game = [10,20,30,40,50]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [1, -1, 2, -2, 2, 3]\n    guesses = [1, -1, 2, -2, -1, 2]\n    \n    >>> compare(scores,\
    \ guesses)\n    [0, 1, 1, 0, -1, -1]\n    \n    \"\"\"\n    if sum(guess) != sum(scores):\n\
    \        raise Exception(\"cannot compare with inconsistent number of scores\"\
    )\n    differences = []\n    for i in range(len(guess)):\n        differences.append(abs(guess[i]\
    \ - scores[i]))\n    return differences\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp88m1zibc.py\", line 22\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 39)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([50,\
    \ 100, 80], [80])\n    [0, 0, 0]\n\n    \"\"\"\n\n    return 0\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpot64_axg.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [4, 2, 3]\n    guesses = [2, 5, 0]\n    \n    \"\"\"\n    # Your code here\n\
    \    correct_answers = []\n    for i in range(len(score)):\n        if guess[i]\
    \ == scores[i]:\n            correct_answers.append(0)\n        else:\n      \
    \      correct_answers.append(abs(guess[i] - scores[i]))\n    return correct_answers\n\
    </cell>\n<text>\nTests\nBelow we test your code. Run each cell to receive credit.\
    \ Feel free to add more cells as you test out the solutions.\n\n\n</text>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpfrv1wej5.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 45)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10,8,6,7,5,5,5,4,3,3,4,3]\n            guess = [7,5,2,1,0,3,1,1,3,4,1,0]\n\
    \            \"\"\"\n            \n            \n            \n            \n\
    \    \"\"\"\n    \n\n    \n    scores = []\n    guesses = []\n    \n    \n   \
    \ for i in range(len(guess)):\n        scores.append(game[i])\n        guesses.append(guess[i])\n\
    \    \n    \n    correct = 0\n    for i in range(len(guesses)):\n        if guesses[i]\
    \ == scores[i]:\n            correct += 1\n    \n    \n    score = 0\n    for\
    \ i in range(len(scores)):\n        score += abs(guesses[i] - scores[i])\n   \
    \ \n    \n    \n    \n    \n    return []\n    \ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp8fj9t00p.py\", line 16\n    game = [10,8,6,7,5,5,5,4,3,3,4,3]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1, 3, 1, 0, 1]\n            guess = [1, 0, 1, 1, 0]\n            compare(game,\
    \ guess)\n            \n            returns:\n            [0, 0, 0, 5, 0]\n  \
    \          \"\"\"\n\n    \"\"\"\n    \n    \"\"\"\n    \n    game = [1, 3, 1,\
    \ 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game, guess)\n    \n    returns:\n\
    \    [0, 0, 0, 5, 0]\n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    game\
    \ = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game, guess)\n \
    \   \n    returns:\n    [0, 0, 0, 5, 0]\n    \n    \"\"\"\n\n    \n    \"\"\"\n\
    \    \n    \n    game = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game,\
    \ guess)\n    \n    returns:\n    [0, 0, 0, 5, 0]\n    \n    \"\"\"\n\n    \"\"\
    \"\n    \n    \n    game = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game,\
    \ guess)\n    \n    returns:\n    [0, 0, 0, 5, 0]\n    \n    \"\"\"\n\n    \"\"\
    \"\n    \n    \n    game = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game,\
    \ guess)\n    \n    returns:\n    [0, 0, 0, 5, 0]\n    \n    \"\"\"\n    \"\"\"\
    \n    \n    \n    game = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game,\
    \ guess)\n    \n    returns:\n    [0, 0, 0, 5, 0]\n    \n    \"\"\"\n    \n  \
    \  \"\"\"\n    \n    game = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n   \
    \ compare(game, guess)\n    \n    returns:\n    [0, 0, 0, 5, 0]\n    \n    \"\"\
    \"\n    \n    \"\"\"\n    \n    game = [1, 3, 1, 0, 1]\n    guess = [1, 0, 1,\
    \ 1, 0]\n    compare(game, guess)\n    \n    returns:\n    [0, 0, 0, 5, 0]\n \
    \   \n    \"\"\"\n    \n    \"\"\"\n    \n    game = [1, 3, 1, 0, 1]\n    guess\
    \ = [1, 0, 1, 1, 0]\n    compare(game, guess)\n    \n    returns:\n    [0, 0,\
    \ 0, 5, 0]\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    game = [1, 3, 1, 0,\
    \ 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game, guess)\n    \n    returns:\n\
    \    [0, 0, 0, 5, 0]\n    \n    \"\"\"\n    \"\"\"\n    \n    \n    game = [1,\
    \ 3, 1, 0, 1]\n    guess = [1, 0, 1, 1, 0]\n    compare(game, guess)\n    \n \
    \   returns:\n    [0, 0, 0, 5, 0]\n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp0mifm9ft.py\", line 16\n    game = [1, 3, 1, 0, 1]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([7,\
    \ 2, 3, 1, 6, 5], [2, 3, 1, 7, 5, 6])\n    [-2, 0, 3, 1, 2, 0]\n\n    >>> compare([3,\
    \ 1, 2, 3, 1], [3, 3, 3, 3])\n    [-2, 0, 2, 0, 2, 0]\n\n    >>> compare([8, 1,\
    \ 2, 3, 5, 6, 7], [1, 3, 2, 5, 6, 8, 7])\n    [-2, 0, 2, 5, 0, 2, -1]\n\n    >>>\
    \ compare([3, 4, 3, 9, 1], [4, 3, 9, 3, 1])\n    [-2, 1, 0, 1, 4, 3]\n\n    \"\
    \"\"\n    \n    # initialize score\n    score = 0\n    # initialize guesses\n\
    \    guesses = [None] * len(guess)\n    \n    # create two loops\n    for i in\
    \ range(len(guess)):\n        guesses[i] = guess[i]\n    \n    # initialize a\
    \ counter variable\n    count = 0\n    \n    \n    for i in range(len(game)):\n\
    \        # if the score is above 0, the guess is correct\n        if score > 0:\n\
    \            # increment the counter\n            count += 1\n        else:\n\
    \            # calculate the difference\n            diff =  abs(game[i] - guesses[count])\n\
    \            # increment the counter\n            count += 1\n            # if\
    \ the difference is larger than 0, there is a mismatch\n            if diff >\
    \ 0:\n                # the difference is zero, so add score\n               \
    \ score += diff\n                # subtract 1 from the guess\n               \
    \ guesses[count] -= 1\n            else:\n                # the difference is\
    \ 0, so set guess to score - diff\n                guesses[count] = score - diff\n\
    \                # the score is 0 so set it to zero\n                score = 0\n\
    \n    return guesses\n\ndef check(candidate):\n    assert candidate([1, 2, 3,\
    \ 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmprdi_okr0.py\", line 28\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 76)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [4, 5, 4, 3, 2, 2, 5]\n            guesses = [3, 3, 5, 2, 2, 4, 4]\n\
    \            compare(scores, guesses) == [0, 0, 2, 1, 2, 2, 0]\n            \n\
    \            \"\"\"\n    \"\"\"\n    if len(guess) != len(scores):\n        raise\
    \ ValueError(\"length of guess{} != length of scores{}\".format(len(guess), len(scores)))\n\
    \    result = []\n    for i in range(len(scores)):\n        correct_guess = guess[i]\n\
    \        score = scores[i]\n        result.append(abs(correct_guess - score))\n\
    \    return result\n</code>\n<|/ a dscore=0 tags=python |>\n<| c |>\nThanks for\
    \ your response, but can you please elaborate on the code? I am a beginner at\
    \ python so any help would be appreciated.\n<|/ c |>\n<| c |>\nsure, I've added\
    \ an example to the answer\n<|/ c |>\n<| a tags=python |>\nI would use numpy for\
    \ this:\n<code>\nimport numpy as np\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5j4nwyoo.py\", line 16\n    scores = [4, 5, 4, 3, 2, 2,\
    \ 5]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([100,101,102,103],\
    \ [101,103,104,105])\n    array([0, 2, 1, -1])\n    \n    \"\"\"\n    scores =\
    \ np.array(game)\n    guesses = np.array(guess)\n    \n    correct = 0\n    wrong\
    \ = 0\n    \n    for i in range(len(scores)):\n        diff = abs(scores[i] -\
    \ guesses[i])\n        if diff != 0:\n            wrong = wrong + diff\n     \
    \   else:\n            correct = correct + 1\n    \n    error = wrong - correct\n\
    \    \n    correctness = [0] * len(guesses)\n    for i in range(len(guesses)):\n\
    \        if guesses[i] == scores[i]:\n            correctness[i] = 0\n       \
    \ else:\n            correctness[i] = abs(guesses[i] - scores[i])\n\n    return\
    \ correctness\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp3nqayjil.py\", line 19\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 53)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ >>> game = [10, 2, 5, 3, 6, 7]\n            >>> guess = [10, 20, 40, 5, 30,\
    \ 40]\n            >>> compare(game, guess)\n            [0, -2, 0, -4, 0, 0]\n\
    \            \n    \"\"\"\n    \n    \n    \n    \n    return 0\n</cell>\n<cell>\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9wadvozf.py\", line 16\n    >>> game = [10, 2, 5, 3, 6,\
    \ 7]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [9, 1, 10, 12, 7]\n            guesses = [1, 9, 10, 12, 7]\n      \
    \      >>>[8, 0, 7, 0, 5]\n            \"\"\"\n            \n    \"\"\"\n    if\
    \ len(game) < len(guess):\n        game = game + [0] * (len(guess) - len(game))\n\
    \    elif len(game) > len(guess):\n        guess = guess + [0] * (len(game) -\
    \ len(guess))\n    return [ abs(a - b) for a, b in zip(game, guess) ]\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdrmayoe_.py\", line 16\n    scores = [9, 1, 10, 12, 7]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ print(compare([4, 3, 4, 3, 4, 6, 4, 7, 8, 3, 9], [4, 3, 4, 3, 4, 6, 4, 7, 8,\
    \ 3, 9]))\n            # [-1, -1, -1, -1, -1, 0, -1, -1, -1, -1]\n           \
    \ print(compare([-4, 3, 4, 3, 4, 6, 4, 7, 8, 3, 9], [4, 3, 4, 3, 4, 6, 4, 7, 8,\
    \ 3, 9]))\n            # [-1, -1, -1, -1, -1, 0, -1, -1, -1, -1]\n           \
    \ print(compare([-4, 3, 4, 3, 4, 6, 4, 7, 8, 3, 9], [-4, 3, 4, 3, 4, 6, 4, 7,\
    \ 8, 3, 9]))\n            # [-1, -1, -1, -1, -1, 0, -1, -1, -1, -1]\n        \
    \    print(compare([-4, 3, 4, 3, 4, 6, 4, 7, 8, 3, 9], [-4, 3, 4, 3, 4, 6, 4,\
    \ 7, 8, 3, 7]))\n            # [-1, -1, -1, -1, -1, 0, -1, -1, -1, -1]\n     \
    \       \"\"\"\n    \n    \n    \"\"\"\n    \n    \n    \"\"\"\n    \n    \"\"\
    \"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n \
    \   \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\
    \"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n\
    \    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    \n\
    \    \"\"\"\n    \n    \"\"\"\n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpdj0pc0ss.py\", line 16\n    print(compare([4, 3, 4, 3,\
    \ 4, 6, 4, 7, 8, 3, 9], [4, 3, 4, 3, 4, 6, 4, 7, 8, 3, 9]))\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3, 9, 2, 7, 8, 4, 3, 1]\n            guess = [2, 7, 6, 5, 3, 7, 4, 7]\n\
    \            \"\"\"\n            correct answer -> [0, 1, 1, -1, -1, -1, -1, -1]\n\
    \            incorrect -> [1, -1, -1, -1, -1, -1, 0, 1]\n    \n    Args:\n   \
    \     game: an array of length N, the first N elements are the scores (integers)\n\
    \        guess: an array of length N, the first N elements are the guesses (integers)\n\
    \    \n    Returns:\n        an array with the same length as guess, denoting\
    \ how far the guess was off the correct answer\n    \n    Examples:\n        compare([3,9,2,7,8,4,3,1],[2,7,6,5,3,7,4,7])\
    \ -> [0,1,1,-1,-1,-1,-1,-1]\n        compare([3,4,5,6,4,3,2,1],[4,3,2,1,4,3,4,3])\
    \ -> [-1,-1,-1,-1,1,-1,-1,1]\n        compare([3,9,2,7,8,4,3,1],[3,9,2,7,8,4,3,1])\
    \ -> [1,1,1,0,0,1,1,0]\n        compare([3,9,2,7,8,4,3,1],[2,7,6,5,3,7,4,7]) ->\
    \ [0,1,1,-1,-1,-1,-1,-1]\n        compare([3,4,5,6,4,3,2,1],[3,4,5,6,4,3,2,1])\
    \ -> [1,1,1,1,1,1,1,1]\n        compare([3, 9,2, 7, 8, 4, 3, 1], [2,7,6,5,3,7,4,7])\
    \ -> [0,1,1,-1,-1,-1,-1,-1]\n        compare([3,4,5,6,4,3,2,1],[3,4,5,6,4,3,2,1])\
    \ -> [1,1,1,1,1,1,1,1]\n    \"\"\"\n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp27_jsopf.py\", line 16\n    game = [3, 9, 2, 7, 8, 4,\
    \ 3, 1]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [10,20,30,40]\n    guesses = [10,20,30,40]\n    compare(scores, guesses) ==\
    \ [10,20,0,-40]\n    guesses = [20,40,50,60]\n    compare(scores, guesses) ==\
    \ [20,-10,0,40]\n    guesses = [10,20,30,40]\n    compare(scores, guesses) ==\
    \ [10,20,0,-40]\n    \n    scores = [20,40,50,60]\n    guesses = [10,20,30,40]\n\
    \    compare(scores, guesses) == [10,20,0,-40]\n    guesses = [50,60,70,80]\n\
    \    compare(scores, guesses) == [20,-10,0,40]\n    \n    scores = [20,40,50,60]\n\
    \    guesses = [50,60,70,80]\n    compare(scores, guesses) == [20,-10,0,40]\n\
    \    \n    scores = [50,60,70,80]\n    guesses = [10,20,30,40]\n    compare(scores,\
    \ guesses) == [10,20,0,-40]\n    \n    scores = [50,60,70,80]\n    guesses = [20,40,50,60]\n\
    \    compare(scores, guesses) == [20,-10,0,40]\n    \"\"\"\n    \n    # Your code\
    \ here\n    guesses = guesses[:]\n    scores = scores[:]\n    n = len(scores)\n\
    \    correct = 0\n    for i in range(n):\n        if(scores[i] == guesses[i]):\n\
    \            correct+=1\n        else:\n            guesses[i] -= abs(scores[i]\
    \ - guesses[i])\n            \n    return guesses\n\nprint(compare(game, guess))\n\
    </cell>\n<text>\n4.5 Reverse Polish Notation\nReverse polish notation is the string\
    \ conversion that popular math professors use to solve problems such as addition,\
    \ subtraction, multiplication, division, and modulo division. Reverse polish notation\
    \ is an extremely useful tool for calculating complex mathematics. It is especially\
    \ useful for solving problems such as factorials, exponents, and others. \nImplement\
    \ the reverse polish notation function below. \nThe function takes in a string\
    \ and returns a list where each item in the list is a character in the string.\
    \ \nIf the input string is empty, return an empty list.\nIf the input string has\
    \ an odd number of characters, raise an exception. \nIf the string has an even\
    \ number of characters, remove characters from the input string until you have\
    \ an empty string. \nReverse the characters in the string and append each reversed\
    \ character to a new list. \nAppend the new list to the empty list\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmp_7xa05oq.py\", line 41\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 77)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            # scores = [1, 5, 3, 10]\n            # guess = [2, 1, 3]\n  \
    \          # compare returns [3, -4, 6]\n            # \n            # Compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # compare\
    \ returns [3, -4, 6]\n            # \n            # compare returns [3, -4, 6]\n\
    \            # \n            # compare returns [3, -4, 6]\n            # \n  \
    \          # compare returns [3, -4, 6]\n            # \n            # \ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp5nouai59.py\", line\
    \ 119, in <module>\n    test_check()\n  File \"/tmp/tmp5nouai59.py\", line 117,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmp5nouai59.py\", line 111,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ Input: game = [3,5,8,1,7,2,4,6],\n                   guess = [5,3,8,1,8,4,6,7]\n\
    \            Output: [1,1,3,2,3,-1,-1,-1]\n            \n    \"\"\"\n    if len(guess)\
    \ != len(game):\n        raise ValueError(\"Length mismatch\")\n\n    # Initialize\
    \ output array\n    output = []\n    \n    # Calculate difference\n    for i in\
    \ range(len(guess)):\n        diff = abs(guess[i] - game[i])\n        output.append(diff)\n\
    \        \n    return output\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp_e2jtwvj.py\", line 16\n    Input: game = [3,5,8,1,7,2,4,6],\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [\n                [100, 100, 0, 0, 0],\n                [98, 100, 100,\
    \ 100, 100],\n                [100, 100, 100, 0, 100],\n                [100,\
    \ 100, 100, 100, 100],\n                [0, 0, 0, 100, 100]\n            ]\n \
    \           guess = [\n                [0, 99, 99, 99, 99],\n                [0,\
    \ 100, 100, 99, 0],\n                [100, 100, 100, 100, 100],\n            \
    \    [100, 100, 100, 100, 100],\n                [100, 100, 100, 100, 100]\n \
    \           ]\n            \n            scores = [\n                [100, 100,\
    \ 100, 100, 100],\n                [100, 100, 100, 100, 100],\n              \
    \  [100, 100, 100, 100, 100],\n                [0, 0, 0, 100, 100],\n        \
    \        [100, 100, 100, 100, 100]\n            ]\n\n            ans = compare(game,\
    \ guess)\n            print(ans)\n            print(game)\n            print(guess)\n\
    \    \"\"\"\n    \n    ans = []\n    for game in game:\n        difference = abs(game[0]\
    \ - guess[0])\n        for x in range(1, len(game)):\n            difference +=\
    \ abs(game[x] - guess[x])\n        ans.append(difference)\n    return ans\n\n\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpov5ka_ql.py\", line 16\n    game = [\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            [scores = [10, 20, 30, 40, 50], guesses = [30, 40, 50]]\n    \
    \        \n            Your function should return [10, -20, -30, -40, -50]\n\
    \            \n            \"\"\"\n    \"\"\"\n\n    \n    if len(scores) != len(guesses):\n\
    \        raise ValueError(\"scores and guesses must have the same length\")\n\
    \    \n    \n    scores = [int(c) for c in scores]\n    guesses = [int(g) for\
    \ g in guesses]\n    \n    \n\n    guesses.sort()\n    scores.sort()\n    \n \
    \   diff = [0]\n    \n    for i in range(len(scores)):\n        if guesses[i]\
    \ != scores[i]:\n            diff.append(abs(scores[i] - guesses[i]))\n      \
    \  else:\n            diff.append(0)\n\n    return diff\n    \n        \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmppf77_cev.py\", line 17\n    [scores = [10, 20, 30, 40,\
    \ 50], guesses = [30, 40, 50]]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ score = [6, 5, 7, 8, 9]\n            guess = [3, 4, 5]\n            result =\
    \ compare(score, guess)\n            print(result)\n            > [-2, -3, -4,\
    \ -5, 0]\n            \n            \"\"\"\n    \"\"\"\n    if len(guess)!=len(score):\n\
    \        raise ValueError(\"Size of guess does not match size of score\")\n  \
    \  correct = 0\n    for i in range(len(guess)):\n        if guess[i] == score[i]:\n\
    \            correct = correct+1\n        else:\n            correct = correct\n\
    \    return correct * -1\n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpkzgqm60k.py\", line 16\n    score = [6, 5, 7, 8, 9]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> game\
    \ = [5, 6, 4, 3, 2]\n    >>> guess = [2, 5, 3, 6, 4]\n    >>> compare(game, guess)\n\
    \    [0, 0, 2, 0, 0]\n    >>> game = [5, 6, 4, 3, 2]\n    >>> guess = [2, 5, 3,\
    \ 6, 4]\n    >>> guess = [2, 2, 2, 6, 4]\n    >>> compare(game, guess)\n    [0,\
    \ 1, 0, 1, 0]\n    >>> game = [5, 6, 4, 3, 2]\n    >>> guess = [2, 5, 3, 6, 4]\n\
    \    >>> guess = [2, 2, 2, 6, 4]\n    >>> guess = [1, 2, 2, 2, 4]\n    >>> compare(game,\
    \ guess)\n    [0, 1, 2, 0, 0]\n    >>> game = [5, 6, 4, 3, 2]\n    >>> guess =\
    \ [2, 5, 3, 6, 4]\n    >>> guess = [2, 2, 2, 6, 4]\n    >>> guess = [1, 2, 1,\
    \ 2, 4]\n    >>> compare(game, guess)\n    [0, 1, 1, 1, 1]\n    >>> game = [5,\
    \ 6, 4, 3, 2]\n    >>> guess = [2, 5, 3, 6, 4]\n    >>> guess = [2, 2, 2, 6, 4]\n\
    \    >>> guess = [1, 2, 1, 2, 4]\n    >>> guess = [1, 2, 2, 2, 4]\n    >>> compare(game,\
    \ guess)\n    [0, 1, 2, 0, 0]\n    >>> game = [5, 6, 4, 3, 2]\n    >>> guess =\
    \ [2, 5, 3, 6, 4]\n    >>> guess = [2, 2, 2, 6, 4]\n    >>> guess = [1, 2, 1,\
    \ 2, 4]\n    >>> guess = [1, 2, 2, 2, 4]\n    >>> guess = [1, 2, 2, 2, 4]\n  \
    \  >>> compare(game, guess)\n    [0, 0, 2, 0, 0]\n    \n    Time complexity: O(min(m1,\
    \ m2))\n    Space complexity: O(1)\n    \"\"\"\n    pass\n</cell>\n<cell>\n@cache\n\
    def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcby0k9lt.py\", line 55\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 69)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> compare([9,\
    \ 2, 7, 4, 8], [9, 4, 6, 3, 2])\n    [2, 2, 0, 1, 0]\n    \"\"\"\n    scores =\
    \ [0 for _ in guess]\n    for i in range(len(guess)):\n        scores += abs(guess[i]\
    \ - game[i])\n    return scores\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpcs1hglm9.py\", line 18\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 33)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ example1 = [10, 5, 7, 8, 2, 7]\n            example2 = [10, 5, 7, 8, 2, 5]\n\
    \            example3 = [10, 5, 7, 8, 8, 5]\n            \n            >>>compare(example1,\
    \ example2)\n            [0, 1, 3, 2, -1, -1]\n            >>>compare(example1,\
    \ example3)\n            [0, 0, 1, -1, -1, -1]\n            >>>compare(example2,\
    \ example3)\n            [0, 0, 0, 1, 1, 1]\n            \"\"\"\n\n    def score(i:\
    \ int) -> int:\n        if i == len(guess): return 0\n        return guess[i]\
    \ - game[i]\n\n    i = 0\n    while i < len(game):\n        if game[i] == guess[i]:\n\
    \            i += 1 # move to next index\n        else: # if game[i] != guess[i]\n\
    \            i += 1\n    return list(map(score, range(0, len(guess))))\n</cell>\n\
    <cell>\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0],\
    \ [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpbsuomypm.py\", line 16\n    example1 = [10, 5, 7, 8, 2,\
    \ 7]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [10,3,5,5]\n            guess = [15,6,2,3]\n            answer: [0, 4,\
    \ 3, 0]\n\n            \"\"\"\n    \n    \n    \"\"\"\n    \n    if len(game)\
    \ != len(guess):\n        return None\n    \n    answer = []\n    for i in range(len(guess)):\n\
    \        diff = np.abs(guess[i] - game[i])\n        answer.append(diff)\n    return\
    \ answer\n</cell>\n<cell>\ncompare(game=[10,3,5,5], guess=[15,6,2,3])\n</cell>\n\
    <text>\nTest your implementation - after you write it here:\n\n\n</text>\n<cell>\n\
    assert compare(game=[10,3,5,5], guess=[15,6,2,3]) == [0, 4, 3, 0]\n</cell>\n<text>\n\
    Implement your compare function:\n\n\n</text>\n<cell>\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpedp438b9.py\", line 16\n    game = [10,3,5,5]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    >>> guess\
    \ = [1, 3, 2]\n    >>> scores = [2, 1, 0]\n    >>> compare(guess, scores)\n  \
    \  [-1, 1, 0]\n    >>> guess = [2, 3]\n    >>> scores = [2, 1, 0]\n    >>> compare(guess,\
    \ scores)\n    [-1, 1, 0]\n    >>> guess = [1, 2, 2]\n    >>> scores = [2, 1,\
    \ 0]\n    >>> compare(guess, scores)\n    [1, 0, -1]\n    >>> guess = [2, 3, 1]\n\
    \    >>> scores = [2, 1, 0]\n    >>> compare(guess, scores)\n    [1, 0, -1]\n\
    \    >>> guess = [1, 3, 2]\n    >>> scores = [2, 1, 0]\n    >>> compare(guess,\
    \ scores)\n    [1, 0, -1]\n    >>> guess = [2, 2]\n    >>> scores = [2, 1, 0]\n\
    \    >>> compare(guess, scores)\n    [1, 0, -1]\n    >>> guess = [2, 3]\n    >>>\
    \ scores = [2, 1, 0]\n    >>> compare(guess, scores)\n    [1, 0, -1]\n    >>>\
    \ guess = [2, 3, 1, 1]\n    >>> scores = [2, 1, 0]\n    >>> compare(guess, scores)\n\
    \    [1, 0, -1]\n    \n    \"\"\"\n    return [ abs(score - guess) for score,\
    \ guess in zip(scores, guess) ]\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpzi6jvoco.py\", line 49\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 61)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [5, 11, 7, 7, 9, 13, 13]\n            guess = [5, 9, 10, 12, 12, 16,\
    \ 16]\n            \n            returns [0, 1, 2, 2, 2, 3, 3]\n            \"\
    \"\"\n    \n    \n    \"\"\"\n    # YOUR CODE HERE\n    pass\n    \"\"\"\n   \
    \ \n    return []\n    \n    \n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpl5ymlxbn.py\", line 16\n    game = [5, 11, 7, 7, 9, 13,\
    \ 13]\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ scores = [-100, -20, 40, 50]\n            guesses = [30, 20, 30, 20]\n     \
    \       \n            Output:\n            [-1, 0, 2, 2]\n\n            \"\"\"\
    \n\n    >>> scores = [-100, -20, 40, 50]\n    >>> guesses = [30, 20, 30, 20]\n\
    \    >>> compare(scores, guesses)\n    [-1, 0, 2, 2]\n\n    \"\"\"\n\n    # convert\
    \ guesses to an array\n    guesses = list(guess)\n\n    # convert scores to an\
    \ array\n    scores = list(game)\n\n    # determine the number of elements that\
    \ are different\n    diff = guesses.count((guesses[0]-scores[0]))\n    for guess\
    \ in guesses[1:]:\n        if diff != guesses.count((guess - scores[0])):\n  \
    \          diff += 1\n\n    # output the result as an array\n    return diff\n\
    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4,\
    \ 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0,\
    \ 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1,\
    \ -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) ==\
    \ [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp9eob57td.py\", line 16\n    scores = [-100, -20, 40, 50]\n\
    IndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [9,2,0,1,1,1]\n            guess = [8,3,1,1,3,3]\n\n            compare(game,guess)\
    \ # returns [7,-5,0,-2,1,-1]\n            \"\"\"\n    \n    \n    \n    \"\"\"\
    \n    \n\n    \n    \n    \"\"\"\n\n    \"\"\"\n    \n    \n    \n    \"\"\"\n\
    \    # Your code here\n    \n\n    \"\"\"\n    \n    \n    \"\"\"\n    \n    return\
    \ game, guess\n\ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0,\
    \ 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2,\
    \ 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3,\
    \ 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpgla8qq5u.py\", line 16\n    game = [9,2,0,1,1,1]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    \n    game\
    \ = [1,7,10,1]\n    guess = [9,1,4,0]\n    result = compare(game,guess)\n    print\
    \ (result)\n    \n    game = [1,7,10,1]\n    guess = [1,9,4,0]\n    result = compare(game,guess)\n\
    \    print (result)\n    \n    game = [1,7,10,1]\n    guess = [10,7,4,0]\n   \
    \ result = compare(game,guess)\n    print (result)\n    \n    game = [1,7,10,1]\n\
    \    guess = [1,10,4,0]\n    result = compare(game,guess)\n    print (result)\n\
    \    \n    game = [1,7,10,1]\n    guess = [1,10,4,1]\n    result = compare(game,guess)\n\
    \    print (result)\n    \n    game = [1,7,10,1]\n    guess = [1,10,4,9]\n   \
    \ result = compare(game,guess)\n    print (result)\n    \n    game = [1,7,10,1]\n\
    \    guess = [1,10,4,10]\n    result = compare(game,guess)\n    print (result)\n\
    \    \n    game = [1,7,10,1]\n    guess = [10,7,4,10]\n    result = compare(game,guess)\n\
    \    print (result)\n    \n    game = [1,7,10,1]\n    guess = [10,7,4,9]\n   \
    \ result = compare(game,guess)\n    print (result)\n    \n    game = [1,7,10,1]\n\
    \    guess = [10,7,4,1]\n    result = compare(game,guess)\n    print (result)\n\
    \    \n    game = [1,7,10,1]\n    guess = [10,7,4,10]\n    result = compare(game,guess)\n\
    \    print (result)\n    \n    game = [1,7,10,1]\n    guess = [10,7,4,5]\n   \
    \ result = compare(game,guess)\n    print (result)\n    \n    game = [1,7,10,1]\n\
    \    guess = [10,7,4,10]\n    result = compare(game,guess)\n    print (result)\n\
    \    \n    game = [1,7,10,1]\n    guess = [10,7,4,5]\n    result = compare(game,guess)\n\
    \    print (result)\n    \n    game = [1,7,10,1]\n    guess = [10,7,4,10]\n  \
    \  result = compare(game,guess)\n    print (result)\n    \n    game = [1,7,10,1]\n\
    \    guess = [10,7,4,5]\n    result = compare(game,guess)\n    print (result)\n\
    \    \n    game = [1,7,10,1]\n    guess = [10,7,4,10]\n    result = compare(game,guess)\n\
    \    print (result)\n    \n\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp2ep4hpm2.py\", line\
    \ 112, in <module>\n    test_check()\n  File \"/tmp/tmp2ep4hpm2.py\", line 110,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmp2ep4hpm2.py\", line 104,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\n  File \"/tmp/tmp2ep4hpm2.py\", line 19, in compare\n    result\
    \ = compare(game,guess)\n  File \"/tmp/tmp2ep4hpm2.py\", line 19, in compare\n\
    \    result = compare(game,guess)\n  File \"/tmp/tmp2ep4hpm2.py\", line 19, in\
    \ compare\n    result = compare(game,guess)\n  [Previous line repeated 994 more\
    \ times]\nRecursionError: maximum recursion depth exceeded\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    scores =\
    \ [9,1,2,2,3]\n    guesses = [8,5,3,9,1]\n    compare(scores, guesses) -> [2,-1,2,0,-1]\n\
    \    \n    scores = [9,1,2,2,3]\n    guesses = [8,5,3,9]\n    compare(scores,\
    \ guesses) -> [2,0,0,2,-1]\n    \n    scores = [9,1,2,2,3]\n    guesses = [8]\n\
    \    compare(scores, guesses) -> [0,0,0,0,0]\n    \n    scores = [9,1,2,2,3]\n\
    \    guesses = []\n    compare(scores, guesses) -> [0,0,0,0,0]\n    \n    scores\
    \ = [9,1,2,2,3]\n    guesses = [1]\n    compare(scores, guesses) -> [0,0,0,0,0]\n\
    \    \"\"\"\n    \n    count = 0\n    for i in range(len(guesses)):\n        if\
    \ guesses[i] == game[i]:\n            count += 1\n            if count >= 4:\n\
    \                return [count]\n        else:\n            count += 1\n     \
    \       if count >= 4:\n                return [abs(count - 4), count]\n    return\
    \ []\n    \ndef check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0,\
    \ 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3],\
    \ [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4])\
    \ == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmppq19ihdm.py\", line 35\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 58)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    score =\
    \ [4, 6, 8, 8]\n    guess = [8, 6, 4, 2]\n    result = [0, 0, -2, -2]\n\n    \"\
    \"\"\n    \n    answers = []\n    for i in range(len(guess)):\n        diff =\
    \ 0\n        for j in range(len(game)):\n            if guess[i] == game[j]:\n\
    \                diff = diff + 1\n            else:\n                diff = diff\
    \ + 1\n            \n        answers.append(diff)\n    return answers\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpr6t89l2g.py\", line 20\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 43)\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [1,1,2,3,5,7]\n            guess = [2,3,1,4,6,5]\n            compare(game,\
    \ guess)\n            [1, 1, 0, 0, 0, 0]\n            \"\"\"\n\n    NOTE: This\
    \ problem has only been tested on games with three or more matches.\n    \"\"\"\
    \n    \n    game = [game]\n    guess = [guess]\n    \n    # compare each element\
    \ of game with each element of guess\n    \n    # this list will store the error\
    \ for each guess index\n    errors = []\n\n    # compare each element of game\
    \ to each element of guess\n    for game in game:\n        for guess in guess:\n\
    \            diff = 0\n            # compare each element of game with each element\
    \ of guess\n            # if the difference between game and guess is 1, we have\
    \ a correct guess\n            if game-guess == 1:\n                # if they\
    \ match, add their errors\n                errors.append(0)\n            else:\n\
    \                # otherwise, add the difference\n                errors.append(abs(game-guess))\n\
    \n    # return the errors array\n    return errors\n</cell>\n<cell>\ncompare(game,\
    \ guess)\n</cell>\n<cell>\ndef check(candidate):\n    assert candidate([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpvi_c_mg7.py\", line 16\n    game = [1,1,2,3,5,7]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ # Input Data\n            # [100,99,99,100,99,99,99,99,100,100,99,100,99,99,100,100,100,99,100,100,99,100,99,100]\n\
    \            # [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100]\n\
    \            # Output\n            # [0,0,0,0,0,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10]\n\
    \            # Input Data\n            # [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100]\n\
    \            # [100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100]\n\
    \            # Output\n            # [0,0,0,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10,-10]\n\
    \            # \"\"\"\n    \n    \"\"\"\n    \n    \"\"\"\n    # Your Code Here\n\
    \    correct_guess = 0\n    for i in range(len(game)):\n        if game[i] ==\
    \ guess[i]:\n            correct_guess += 1\n    return correct_guess + abs(guess[i]\
    \ - game[i])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\ndef check(candidate):\n    assert\
    \ candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n \
    \   assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0,\
    \ 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1,\
    \ 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\
    \ntest_check()\n"
  status: Exception
  stderr: "Traceback (most recent call last):\n  File \"/tmp/tmp8jx8v64x.py\", line\
    \ 181, in <module>\n    test_check()\n  File \"/tmp/tmp8jx8v64x.py\", line 179,\
    \ in test_check\n    check(compare)\n  File \"/tmp/tmp8jx8v64x.py\", line 173,\
    \ in check\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0,\
    \ 0, 0, 0, 3, 3]\nAssertionError\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ \n            score = \n            guess = \n            game = \n        \
    \    \n            result = [1,1,1]\n            \n            guess = [-1,-1,-1]\n\
    \            \n            game = [1,1,1]\n            \n            result =\
    \ compare(game,guess)\n            \n            result = [0,-1,1]\n         \
    \   \n            score = [-3,-3,3]\n            \n            guess = [-1,-2,1]\n\
    \            \n            game = [1,0,1]\n            \n            result =\
    \ compare(game,guess)\n            \n            result = [0,0,-1]\n         \
    \   \n            \"\"\"\n    \n    \"\"\"\n        \n    \n    \n    \n    \n\
    \    \n    \"\"\"\n        \n    \n    \n    \"\"\"\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpox1cvbee.py\", line 17\n    score = \nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822787
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ print(compare([2, 5, 7, 9], [7, 3, 5, 1]))\n        \"\"\"\n    \n    \n   \
    \ \"\"\"\n    if len(game)!= len(guess):\n        raise ValueError(\"Lists must\
    \ have the same length!\")\n    \n    diff = [abs(g - s) for g, s in zip(guess,\
    \ game)]\n    return diff\n    \"\"\"\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpp0wquc1j.py\", line 16\n    print(compare([2, 5, 7, 9],\
    \ [7, 3, 5, 1]))\nIndentationError: unexpected indent\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: 1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n    game = [4,\
    \ 6, 3, 6, 9, 2, 5]\n    guess = [1, 9, 4, 0, 2, 6, 5]\n    \n    compare(game,\
    \ guess)\n    # [2, 6, 0, -6, 2, 1]\n    \n    \n    \n    \"\"\"\n    return\
    \ map(lambda x: abs(x - guess), game)\n\ndef check(candidate):\n    assert candidate([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1,\
    \ 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2,\
    \ 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: SyntaxError
  stderr: "  File \"/tmp/tmpytonuwbr.py\", line 24\n    \"\"\"\n    ^\nSyntaxError:\
    \ unterminated triple-quoted string literal (detected at line 36)\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [\n                [5, 3, 8, 7, 2],\n                [2, 7, 3, 5, 8],\n\
    \                [8, 5, 6, 3, 1],\n                [3, 5, 7, 4, 9],\n        \
    \        [9, 3, 6, 2, 1],\n            ]\n            guess = [9, 5, 8, 4, 2]\n\
    \            correct answer: [0, 0, 0, 0, 1]\n            \n            \n   \
    \         \n            \"\"\"\n\n            game = [\n                [5, 3,\
    \ 8, 7, 2],\n                [2, 7, 3, 5, 8],\n                [8, 5, 6, 3, 1],\n\
    \                [3, 5, 7, 4, 9],\n                [9, 3, 6, 2, 1],\n        \
    \    ]\n            guess = [9, 5, 8, 4, 2]\n            correct answer: [0, 0,\
    \ 0, 0, 1]\n    \"\"\"\n    \n    game = [list(row) for row in game]\n    guess\
    \ = [list(row) for row in guess]\n    \n    distances = []\n    for i in range(len(guess)):\n\
    \        distances.append(abs(guess[i] - game[i]))\n    return distances\n\ndef\
    \ check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0,\
    \ 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2,\
    \ -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2,\
    \ 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmp5q62ucs6.py\", line 16\n    game = [\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ guesses = [2,7,3,0,3]\n            scores = [2,5,3,5,5]\n            \"\"\"\n\
    \            scores = [2,5,3,5,5]\n            guesses = [2,7,3,0,3]\n       \
    \     compare(scores,guesses)\n            [0,1,0,-1,1]\n            \n    complexity:\
    \ O(len(scores))\n    \n    \"\"\"\n    score = 0\n    for i in range(len(scores)):\n\
    \        score += abs(scores[guesses[i] - game[i]])\n    return score\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpqm4fd_ew.py\", line 16\n    guesses = [2,7,3,0,3]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822788
- exit_code: -1
  program: "from typing import List\n\ndef compare(game: List[int], guess: List[int])\
    \ -> List[int]:\n    \"\"\"I think we all remember that feeling when the result\
    \ of some long-awaited\n    event is finally known. The feelings and thoughts\
    \ you have at that moment are\n    definitely worth noting down and comparing.\n\
    \    Your task is to determine if a person correctly guessed the results of a\
    \ number of matches.\n    You are given two arrays of scores and guesses of equal\
    \ length, where each index shows a match. \n    Return an array of the same length\
    \ denoting how far off each guess was. If they have guessed correctly,\n    the\
    \ value is 0, and if not, the value is the absolute difference between the guess\
    \ and the score.\n    \n    \n    example:\n\n            \"\"\"\n           \
    \ game = [3, 5, 4, 2, 0]\n            guess = [3, 1, 1, 2, 5]\n            result\
    \ = compare(game, guess)\n            print(result) \n            # [0, 1, 0,\
    \ 1, 1]\n            \n            \n            \"\"\"\n            \n    \"\"\
    \"\n    result = [0 for _ in guess]\n    guesses_total = len(guess)\n    games_total\
    \ = len(game)\n    if guesses_total != games_total:\n        raise ValueError(f\"\
    Input arrays must have the same length. {guesses_total} != {games_total}\")\n\
    \    \n    # Calculate the average score\n    average_score = (game[0] + game[1]\
    \ + game[2] + game[3] + game[4]) / float(games_total)\n\n    # Compare the scores\n\
    \    correct = True\n    for i, score in enumerate(game):\n        diff = abs(score\
    \ - guess[i])\n        if diff > average_score:\n            result[i] = diff\n\
    \            correct = False\n    if correct:\n        return [0]\n    else:\n\
    \        return [i + diff for i, diff in enumerate(result)]\n\n\ndef check(candidate):\n\
    \    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0,\
    \ 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0,\
    \ 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n  \
    \  assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n\
    \    check(compare)\n\ntest_check()\n"
  status: Exception
  stderr: "  File \"/tmp/tmpq4k8sl3v.py\", line 16\n    game = [3, 5, 4, 2, 0]\nIndentationError:\
    \ unexpected indent\n"
  stdout: ''
  timestamp: 1659822788
