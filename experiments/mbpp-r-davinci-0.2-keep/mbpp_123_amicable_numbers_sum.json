{
  "name": "mbpp_123_amicable_numbers_sum",
  "language": "r",
  "prompt": "# Write a function to sum all amicable numbers from 1 to a specified number.\namicable_numbers_sum <- function(limit) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_123_amicable_numbers_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- amicable_numbers_sum\n    if(!identical(candidate(999), 504)){quit('no', 1)}\n    if(!identical(candidate(9999), 31626)){quit('no', 1)}\n    if(!identical(candidate(99), 0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  sum(unique(unlist(lapply(1:limit, function(x) {\n    y <- sum_of_divisors(x)\n    if (x == sum_of_divisors(y) && x != y) {\n      c(x, y)\n    } else {\n      NULL\n    }\n  }))))\n}\n",
    "\n  sum(unique(unlist(lapply(1:limit, function(x) {\n    y <- sum_divisors(x)\n    if (x == sum_divisors(y) && x != y) {\n      return(c(x, y))\n    }\n  }))))\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (i %in% amicable_numbers) {\n      next\n    }\n    divisors_sum <- sum(divisors(i))\n    if (divisors_sum > i) {\n      divisors_sum_divisors_sum <- sum(divisors(divisors_sum))\n      if (divisors_sum_divisors_sum == i) {\n        amicable_numbers <- c(amicable_numbers, i, divisors_sum)\n      }\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  sum(amicable_numbers(limit))\n}\n",
    "\n  sum(sapply(1:limit, function(x) {\n    if (x == sum_divisors(sum_divisors(x)) && x != sum_divisors(x)) {\n      x\n    } else {\n      0\n    }\n  }))\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (i %in% amicable_numbers) {\n      next\n    }\n    j <- sum_proper_divisors(i)\n    if (i == sum_proper_divisors(j) && i != j) {\n      amicable_numbers <- c(amicable_numbers, i, j)\n    }\n  }\n  return(sum(amicable_numbers))\n}\n",
    "\n  sum(sapply(1:limit, function(x) {\n    if (x == sum_of_divisors(sum_of_divisors(x)) && x != sum_of_divisors(x)) {\n      x\n    } else {\n      0\n    }\n  }))\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  return(sum(amicable_numbers))\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  sum(unique(unlist(lapply(1:limit, function(x) {\n    y <- sum_divisors(x)\n    if (x == sum_divisors(y) & x != y) {\n      return(c(x, y))\n    }\n  }))))\n}\n",
    "\n  sum(unique(unlist(lapply(1:limit, amicable_numbers))))\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  sum(unique(unlist(lapply(1:limit, function(x) {\n    y <- sum_divisors(x)\n    if (sum_divisors(y) == x && x != y) {\n      c(x, y)\n    }\n  }))))\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  sum(amicable_numbers)\n}\n",
    "\n  amicable_numbers <- c()\n  for (i in 1:limit) {\n    if (is_amicable(i)) {\n      amicable_numbers <- c(amicable_numbers, i)\n    }\n  }\n  return(sum(amicable_numbers))\n}\n\namicable_numbers_sum(10000)\n",
    "\n  amicable_numbers <- vector()\n  for (i in 1:limit) {\n    if (i %in% amicable_numbers) {\n      next\n    }\n    j <- sum(divisors(i))\n    if (i == sum(divisors(j)) && i != j) {\n      amicable_numbers <- c(amicable_numbers, i, j)\n    }\n  }\n  sum(amicable_numbers)\n}\n\namicable_numbers_sum(10000)\n",
    "\n  amicable_numbers <- list()\n  for (i in 1:limit) {\n    if (i %in% amicable_numbers) {\n      next\n    }\n    divisors_sum <- sum(divisors(i))\n    if (divisors_sum != i && sum(divisors(divisors_sum)) == i) {\n      amicable_numbers <- c(amicable_numbers, i, divisors_sum)\n    }\n  }\n  sum(amicable_numbers)\n}\n\namicable_numbers_sum(10000)\n"
  ]
}