{
  "name": "mbpp_733_find_first_occurrence",
  "language": "r",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence <- function(A, x) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- find_first_occurrence\n    if(!identical(candidate(c(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5), 1)){quit('no', 1)}\n    if(!identical(candidate(c(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5), 2)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6), 4)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NULL)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NULL)\n}\n",
    "\n  low <- 1\n  high <- length(A)\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  if (length(A) == 0) {\n    return(0)\n  }\n  if (A[1] == x) {\n    return(1)\n  }\n  if (A[1] > x) {\n    return(0)\n  }\n  return(1 + find_first_occurrence(A[-1], x))\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid - 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  if (length(A) == 0) {\n    return(NULL)\n  }\n  mid <- floor(length(A) / 2)\n  if (A[mid] == x) {\n    if (mid == 1 || A[mid - 1] != x) {\n      return(mid)\n    } else {\n      return(find_first_occurrence(A[1:mid], x))\n    }\n  } else if (A[mid] > x) {\n    return(find_first_occurrence(A[1:mid], x))\n  } else {\n    return(find_first_occurrence(A[(mid + 1):length(A)], x))\n  }\n}\n\nA <- c(1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10)\nfind_first_occurrence(A, 3)\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      if (mid == 0 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  l <- 1\n  r <- n\n  while (l <= r) {\n    m <- floor((l + r) / 2)\n    if (A[m] == x) {\n      if (m == 1 || A[m - 1] != x) {\n        return (m)\n      } else {\n        r <- m - 1\n      }\n    } else if (A[m] > x) {\n      r <- m - 1\n    } else {\n      l <- m + 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  start <- 0\n  end <- n - 1\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO: Implement this function\n  n <- length(A)\n  l <- 1\n  r <- n\n  while(l <= r) {\n    m <- floor((l+r)/2)\n    if(A[m] == x) {\n      if(m == 1 || A[m-1] != x) {\n        return(m)\n      }\n      else {\n        r <- m - 1\n      }\n    }\n    else if(A[m] > x) {\n      r <- m - 1\n    }\n    else {\n      l <- m + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(NA)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nx <- 2\nfind_first_occurrence(A, x)\n",
    "\n  left <- 1\n  right <- length(A)\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      if (mid == 0 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end)/2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) return(NA)\n  if (A[1] == x) return(1)\n  if (A[n] == x) return(n)\n  if (A[1] > x || A[n] < x) return(NA)\n  i <- ceiling(n/2)\n  while (A[i] != x) {\n    if (A[i] > x) {\n      n <- i - 1\n    } else {\n      i <- i + 1\n    }\n    if (i == n) return(NA)\n    i <- ceiling((i + n)/2)\n  }\n  while (A[i - 1] == x) {\n    i <- i - 1\n  }\n  return(i)\n}\n",
    "\n  # A is a sorted array\n  # x is the number we are looking for\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x is in A, return the index of the first occurrence of x in A\n  # if x",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while(left <= right) {\n    mid <- floor((left + right) / 2)\n    if(A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if(A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      right <- mid - 1\n    } else if (x < A[mid]) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (0)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO: Write your code here\n  #return -1\n  low <- 1\n  high <- length(A)\n  while(low <= high) {\n    mid <- floor((low + high) / 2)\n    if(A[mid] == x) {\n      if(mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if(A[mid] < x) {\n      low <- mid + 1\n    } else {\n      high <- mid - 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x && (mid == 1 || A[mid - 1] != x)) {\n      return(mid)\n    } else if (A[mid] >= x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO: Write your code here\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while(start <= end) {\n    mid <- floor((start + end) / 2)\n    if(A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if(A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n    n <- length(A)\n    if (n == 0) {\n        return(0)\n    }\n    start <- 0\n    end <- n - 1\n    result <- -1\n    while (start <= end) {\n        mid <- floor((start + end) / 2)\n        if (A[mid] == x) {\n            result <- mid\n            end <- mid - 1\n        } else if (A[mid] < x) {\n            start <- mid + 1\n        } else {\n            end <- mid - 1\n        }\n    }\n    return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  low <- 1\n  high <- length(A)\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n    n <- length(A)\n    if (n == 0) {\n        return(NULL)\n    }\n    start <- 1\n    end <- n\n    while (start <= end) {\n        mid <- floor((start + end) / 2)\n        if (A[mid] == x) {\n            if (mid == 1 || A[mid - 1] != x) {\n                return(mid)\n            } else {\n                end <- mid - 1\n            }\n        } else if (A[mid] > x) {\n            end <- mid - 1\n        } else {\n            start <- mid + 1\n        }\n    }\n    return(NULL)\n}\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  if (n == 0) return(NULL)\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\n",
    "\n  low <- 1\n  high <- length(A)\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  left <- 1\n  right <- length(A)\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  # TODO: Implement me!\n  return(0)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end)/2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      right <- mid - 1\n    } else if (x < A[mid]) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end)/2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n    n <- length(A)\n    start <- 1\n    end <- n\n    while (start <= end) {\n        mid <- floor((start + end) / 2)\n        if (A[mid] == x) {\n            if (mid == 1 || A[mid - 1] != x) {\n                return(mid)\n            } else {\n                end <- mid - 1\n            }\n        } else if (A[mid] > x) {\n            end <- mid - 1\n        } else {\n            start <- mid + 1\n        }\n    }\n    return(-1)\n}\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  start <- 0\n  end <- n - 1\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(0)\n}\n\nA <- c(1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3",
    "\n  # TODO: Write your code here\n  return(0)\n}\n",
    "\n  # TODO\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  result <- -1\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      high <- mid - 1\n    } else if (x < A[mid]) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nfind_first_occurrence(A, x)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 7)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 9)\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(-1)\n  }\n  start <- 0\n  end <- n - 1\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n    n <- length(A)\n    start <- 1\n    end <- n\n    result <- -1\n    while (start <= end) {\n        mid <- floor((start + end) / 2)\n        if (A[mid] == x) {\n            result <- mid\n            end <- mid - 1\n        } else if (A[mid] < x) {\n            start <- mid + 1\n        } else {\n            end <- mid - 1\n        }\n    }\n    return(result)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (x == A[mid]) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (x < A[mid]) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return (left)\n  } else {\n    return (NA)\n  }\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high)/2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      low <- mid + 1\n    } else {\n      high <- mid - 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + (right - left) / 2\n    if (x == A[mid]) {\n      result <- mid\n      right <- mid - 1\n    } else if (x < A[mid]) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      low <- mid + 1\n    } else {\n      high <- mid - 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    }\n    else if (x < A[mid]) {\n      end <- mid - 1\n    }\n    else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  # Initialize the left and right pointers.\n  left <- 1\n  right <- length(A)\n  \n  # Initialize the result.\n  result <- -1\n  \n  # Iterate until the left pointer is less than the right pointer.\n  while (left <= right) {\n    # Compute the midpoint.\n    mid <- floor((left + right) / 2)\n    \n    # If the element at the midpoint is equal to the target,\n    # update the result and move the left pointer to the midpoint.\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    }\n    \n    # If the element at the midpoint is less than the target,\n    # move the left pointer to the midpoint + 1.\n    else if (A[mid] < x) {\n      left <- mid + 1\n    }\n    \n    # If the element at the midpoint is greater than the target,\n    # move the right pointer to the midpoint - 1.\n    else {\n      right <- mid - 1\n    }\n  }\n  \n  # Return the result.\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid - 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(0)\n  }\n  start <- 0\n  end <- n - 1\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n\nA <- c(1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  result <- -1\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      high <- mid - 1\n    } else if (x < A[mid]) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end)/2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x && (mid == 1 || A[mid - 1] != x)) {\n      return(mid)\n    } else if (A[mid] >= x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] < x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) return(NULL)\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      right <- mid - 1\n    } else if (x < A[mid]) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + (right - left) / 2\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(0)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      }\n      high <- mid - 1\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + floor((right - left) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  low <- 1\n  high <- length(A)\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high)/2)\n    if (x == A[mid]) {\n      if (mid == 1 || A[mid-1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (x < A[mid]) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n    # TODO: Write your code here\n    left <- 0\n    right <- length(A) - 1\n    result <- -1\n    while (left <= right) {\n        mid <- left + floor((right - left) / 2)\n        if (A[mid] == x) {\n            result <- mid\n            right <- mid - 1\n        } else if (A[mid] > x) {\n            right <- mid - 1\n        } else {\n            left <- mid + 1\n        }\n    }\n    return (result)\n}\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nx <- 2\nprint(find_first_occurrence(A, x))\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(-1)\n  }\n  l <- 0\n  r <- n - 1\n  while (l <= r) {\n    m <- floor((l + r) / 2)\n    if (A[m] == x) {\n      if (m == 0 || A[m - 1] != x) {\n        return(m)\n      } else {\n        r <- m - 1\n      }\n    } else if (A[m] > x) {\n      r <- m - 1\n    } else {\n      l <- m + 1\n    }\n  }\n  return(-1)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 4)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 10)\n",
    "\n    n <- length(A)\n    low <- 1\n    high <- n\n    while (low <= high) {\n        mid <- floor((low + high) / 2)\n        if (A[mid] == x) {\n            if (mid == 1 || A[mid - 1] != x) {\n                return (mid)\n            } else {\n                high <- mid - 1\n            }\n        } else if (A[mid] < x) {\n            low <- mid + 1\n        } else {\n            high <- mid - 1\n        }\n    }\n    return (NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x && (mid == 1 || A[mid - 1] != x)) {\n      return(mid)\n    } else if (A[mid] >= x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + floor((right - left) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO: Implement this function.\n  # Hint: You can use the binary search algorithm you implemented above.\n  # If x appears in A, return the index of the first occurrence of x in A.\n  # If x does not appear in A, return -1.\n  return(binary_search(A, x, 1, length(A)))\n}\n",
    "\n    n <- length(A)\n    start <- 1\n    end <- n\n    while (start <= end) {\n        mid <- floor((start + end) / 2)\n        if (A[mid] == x) {\n            if (mid == 1 || A[mid - 1] != x) {\n                return(mid)\n            } else {\n                end <- mid - 1\n            }\n        } else if (A[mid] > x) {\n            end <- mid - 1\n        } else {\n            start <- mid + 1\n        }\n    }\n    return(NA)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    }\n    else if (A[mid] > x) {\n      end <- mid - 1\n    }\n    else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  l <- 1\n  r <- n\n  while (l <= r) {\n    m <- floor((l + r) / 2)\n    if (A[m] == x) {\n      if (m == 1 || A[m - 1] != x) {\n        return(m)\n      } else {\n        r <- m - 1\n      }\n    } else if (A[m] > x) {\n      r <- m - 1\n    } else {\n      l <- m + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) return(0)\n  left <- 0\n  right <- n - 1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (x == A[mid]) {\n      if (mid == 0 || A[mid - 1] != x) return(mid)\n      right <- mid - 1\n    } else if (x < A[mid]) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 4)\nfind_first_occurrence(A, 5)\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (x == A[mid]) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (x < A[mid]) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NA)\n  }\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- start + (end - start) / 2\n    if (x > A[mid]) {\n      start <- mid + 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  result <- -1\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      high <- mid - 1\n    } else if (x < A[mid]) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(NULL)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NA)\n  }\n  start <- 0\n  end <- n - 1\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n    low <- 1\n    high <- length(A)\n    while (low <= high) {\n        mid <- floor((low + high) / 2)\n        if (A[mid] < x) {\n            low <- mid + 1\n        } else if (A[mid] > x) {\n            high <- mid - 1\n        } else {\n            if (mid == 1 || A[mid - 1] != x) {\n                return (mid)\n            } else {\n                high <- mid - 1\n            }\n        }\n    }\n    return (-1)\n}\n",
    "\n  # TODO\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- left + floor((right - left) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n",
    "\n    n <- length(A)\n    start <- 1\n    end <- n\n    while (start <= end) {\n        mid <- floor((start + end) / 2)\n        if (A[mid] == x) {\n            if (mid == 1 || A[mid - 1] != x) {\n                return(mid)\n            } else {\n                end <- mid - 1\n            }\n        } else if (A[mid] > x) {\n            end <- mid - 1\n        } else {\n            start <- mid + 1\n        }\n    }\n    return(-1)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  left <- 1\n  right <- n\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      left <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nx <- 2\nfind_first_occurrence(A, x)\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  # TODO: Implement this function\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use binary search\n  \n  # YOUR CODE HERE\n  # A is a sorted array\n  # x is the number to find\n  # return the index of the first occurrence of x in A\n  # if x is not in A, return -1\n  #\n  # Hint: use",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] < x) {\n      start <- mid + 1\n    } else {\n      end <- mid - 1\n    }\n  }\n  return(result)\n}\n\nfind_first_occurrence(A, x)\n",
    "\n  # TODO: Implement this function\n  # return -1 if not found\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      if (mid == 0 || A[mid - 1] < x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n"
  ]
}