{
  "name": "mbpp_733_find_first_occurrence",
  "language": "r",
  "prompt": "# Write a function to find the index of the first occurrence of a given number in a sorted array.\nfind_first_occurrence <- function(A, x) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_733_find_first_occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- find_first_occurrence\n    if(!identical(candidate(c(2, 5, 5, 5, 6, 6, 8, 9, 9, 9), 5), 1)){quit('no', 1)}\n    if(!identical(candidate(c(2, 3, 5, 5, 6, 6, 8, 9, 9, 9), 5), 2)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 1, 5, 6, 6, 8, 9, 9, 9), 6), 4)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return (mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return (NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NA)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  low <- 1\n  high <- n\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NULL)\n}\n",
    "\n  # TODO: Implement this function\n  return(0)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  start <- 1\n  end <- n\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        end <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(NULL)\n}\n",
    "\n  low <- 1\n  high <- length(A)\n  while (low <= high) {\n    mid <- floor((low + high) / 2)\n    if (A[mid] == x) {\n      if (mid == 1 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        high <- mid - 1\n      }\n    } else if (A[mid] > x) {\n      high <- mid - 1\n    } else {\n      low <- mid + 1\n    }\n  }\n  return(NA)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  if (length(A) == 0) {\n    return(0)\n  }\n  if (A[1] == x) {\n    return(1)\n  }\n  if (A[1] > x) {\n    return(0)\n  }\n  return(1 + find_first_occurrence(A[-1], x))\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  left <- 0\n  right <- n - 1\n  while (left < right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid\n    }\n  }\n  if (A[left] == x) {\n    return(left)\n  } else {\n    return(NULL)\n  }\n}\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  result <- -1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      right <- mid - 1\n    } else if (A[mid] < x) {\n      left <- mid + 1\n    } else {\n      right <- mid - 1\n    }\n  }\n  return(result)\n}\n\nA <- c(1, 2, 2, 2, 2, 3, 4, 7, 8, 8)\nfind_first_occurrence(A, 2)\nfind_first_occurrence(A, 8)\nfind_first_occurrence(A, 1)\nfind_first_occurrence(A, 10)\n",
    "\n  if (length(A) == 0) {\n    return(NULL)\n  }\n  mid <- floor(length(A) / 2)\n  if (A[mid] == x) {\n    if (mid == 1 || A[mid - 1] != x) {\n      return(mid)\n    } else {\n      return(find_first_occurrence(A[1:mid], x))\n    }\n  } else if (A[mid] > x) {\n    return(find_first_occurrence(A[1:mid], x))\n  } else {\n    return(find_first_occurrence(A[(mid + 1):length(A)], x))\n  }\n}\n\nA <- c(1, 2, 3, 3, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10)\nfind_first_occurrence(A, 3)\n",
    "\n  n <- length(A)\n  left <- 0\n  right <- n - 1\n  while (left <= right) {\n    mid <- floor((left + right) / 2)\n    if (A[mid] < x) {\n      left <- mid + 1\n    } else if (A[mid] > x) {\n      right <- mid - 1\n    } else {\n      if (mid == 0 || A[mid - 1] != x) {\n        return(mid)\n      } else {\n        right <- mid - 1\n      }\n    }\n  }\n  return(-1)\n}\n",
    "\n  n <- length(A)\n  start <- 1\n  end <- n\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (A[mid] == x) {\n      result <- mid\n      end <- mid - 1\n    } else if (A[mid] > x) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  n <- length(A)\n  l <- 1\n  r <- n\n  while (l <= r) {\n    m <- floor((l + r) / 2)\n    if (A[m] == x) {\n      if (m == 1 || A[m - 1] != x) {\n        return (m)\n      } else {\n        r <- m - 1\n      }\n    } else if (A[m] > x) {\n      r <- m - 1\n    } else {\n      l <- m + 1\n    }\n  }\n  return (-1)\n}\n",
    "\n  n <- length(A)\n  if (n == 0) {\n    return(NULL)\n  }\n  start <- 0\n  end <- n - 1\n  result <- -1\n  while (start <= end) {\n    mid <- floor((start + end) / 2)\n    if (x == A[mid]) {\n      result <- mid\n      end <- mid - 1\n    } else if (x < A[mid]) {\n      end <- mid - 1\n    } else {\n      start <- mid + 1\n    }\n  }\n  return(result)\n}\n",
    "\n  # TODO: Implement this function\n  n <- length(A)\n  l <- 1\n  r <- n\n  while(l <= r) {\n    m <- floor((l+r)/2)\n    if(A[m] == x) {\n      if(m == 1 || A[m-1] != x) {\n        return(m)\n      }\n      else {\n        r <- m - 1\n      }\n    }\n    else if(A[m] > x) {\n      r <- m - 1\n    }\n    else {\n      l <- m + 1\n    }\n  }\n  return(-1)\n}\n"
  ]
}