{
  "name": "mbpp_754_extract_index_list",
  "language": "r",
  "prompt": "# We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\nextract_index_list <- function(l1, l2, l3) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_754_extract_index_list.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- extract_index_list\n    if(!identical(candidate(c(1, 1, 3, 4, 5, 6, 7), c(0, 1, 2, 3, 4, 5, 7), c(0, 1, 2, 3, 4, 5, 7)), list(1, 7))){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 3, 4, 5, 6, 7), c(0, 1, 2, 3, 4, 6, 5), c(0, 1, 2, 3, 4, 6, 7)), list(1, 6))){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 3, 4, 6, 5, 6), c(0, 1, 2, 3, 4, 5, 7), c(0, 1, 2, 3, 4, 5, 7)), list(1, 5))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 6, 6, 6), c(0, 1, 2, 3, 4, 5, 7), c(0, 1, 2, 3, 4, 5, 7)), list())){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  l1_index <- which(l1 %in% l2)\n  l2_index <- which(l2 %in% l3)\n  l3_index <- which(l3 %in% l1)\n  index_list <- intersect(l1_index, l2_index, l3_index)\n  return(index_list)\n}\n\nextract_common_elements <- function(l1, l2, l3) {\n  index_list <- extract_index_list(l1, l2, l3)\n  common_elements <- c()\n  for (i in index_list) {\n    common_elements <- c(common_elements, l1[i])\n  }\n  return(common_elements)\n}\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\n\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\n\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\n\nextract_common_elements(l1, l2, l3)\n",
    "\n  # your code here\n}\n",
    "\n  # your code here\n  return(list())\n}\n",
    "\n  l1_index <- which(l1 %in% l2)\n  l2_index <- which(l2 %in% l3)\n  l3_index <- which(l3 %in% l1)\n  return(intersect(intersect(l1_index, l2_index), l3_index))\n}\n\nextract_common_elements <- function(l1, l2, l3) {\n  index_list <- extract_index_list(l1, l2, l3)\n  return(l1[index_list])\n}\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2",
    "\n  l1_index <- which(l1 == l2)\n  l2_index <- which(l2 == l3)\n  l3_index <- which(l3 == l1)\n  return(intersect(l1_index, l2_index, l3_index))\n}\n\nextract_common_elements <- function(l1, l2, l3) {\n  index_list <- extract_index_list(l1, l2, l3)\n  return(l1[index_list])\n}\n\nextract_common_elements(c(1, 2, 3, 4, 5), c(1, 2, 3, 4, 5), c(1, 2, 3, 4, 5))\nextract_common_elements(c(1, 2, 3, 4, 5), c(1, 2, 3, 4, 5), c(1, 2, 3, 4, 5))\nextract_common_elements(c(1, 2, 3, 4, 5), c(1, 2, 3, 4, 5), c(1, 2, 3, 4, 5))\n",
    "\n  # Your code here\n  # You can use the function intersect()\n  # You can use the function which()\n  # You can use the function length()\n  # You can use the function c()\n  # You can use the function list()\n  # You can use the function append()\n  # You can use the function unique()\n  # You can use the function names()\n  # You can use the function unlist()\n  # You can use the function as.list()\n  # You can use the function as.character()\n  # You can use the function as.numeric()\n  # You can use the function as.integer()\n  # You can use the function as.data.frame()\n  # You can use the function as.matrix()\n  # You can use the function as.vector()\n  # You can use the function as.logical()\n  # You can use the function as.factor()\n  # You can use the function as.double()\n  # You can use the function as.complex()\n  # You can use the function as.raw()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n  # You can use the function as.list()\n",
    "\n  # Write your code here\n  l1_index <- which(l1 %in% l2)\n  l2_index <- which(l2 %in% l3)\n  l3_index <- which(l3 %in% l1)\n  index_list <- intersect(l1_index, l2_index, l3_index)\n  return(index_list)\n}\n",
    "\n  # Write your code here\n  index_list <- c()\n  for (i in 1:length(l1)) {\n    if (l1[i] == l2[i] && l2[i] == l3[i]) {\n      index_list <- c(index_list, i)\n    }\n  }\n  return(index_list)\n}\n",
    "\n  # your code here\n  l1_index = which(l1 == l2)\n  l2_index = which(l2 == l3)\n  l3_index = which(l1 == l3)\n  l_index = intersect(l1_index, l2_index, l3_index)\n  return(l_index)\n}\n",
    "\n  # Your code here\n  index_list <- c()\n  for (i in 1:length(l1)) {\n    if (l1[i] == l2[i] && l2[i] == l3[i]) {\n      index_list <- c(index_list, i)\n    }\n  }\n  return(index_list)\n}\n",
    "\n  # your code here\n}\n\nextract_index_list(l1, l2, l3)",
    "\n  l1_l2 <- intersect(l1, l2)\n  l1_l2_l3 <- intersect(l1_l2, l3)\n  l1_l2_l3_index <- sapply(l1_l2_l3, function(x) which(l1 == x))\n  return(l1_l2_l3_index)\n}\n",
    "\n  # your code here\n  return(list())\n}\n",
    "\n  # Write your code here\n  l1_index <- which(l1 == l2)\n  l2_index <- which(l2 == l3)\n  l3_index <- which(l3 == l1)\n  common_index <- intersect(l1_index, l2_index, l3_index)\n  return(common_index)\n}\n",
    "\n  # Write your code here\n  l1_index <- which(l1 == l2)\n  l2_index <- which(l2 == l3)\n  l3_index <- which(l1 == l3)\n  common_index <- intersect(l1_index, l2_index, l3_index)\n  return(common_index)\n}\n",
    "\n  l <- list()\n  for (i in 1:length(l1)) {\n    if (l1[i] == l2[i] && l2[i] == l3[i]) {\n      l <- c(l, l1[i])\n    }\n  }\n  return(l)\n}\n\nextract_index_list(l1, l2, l3)\n",
    "\n  l1_index <- which(l1 == l2)\n  l2_index <- which(l2 == l3)\n  l3_index <- which(l1 == l3)\n  return(intersect(intersect(l1_index, l2_index), l3_index))\n}\n\nextract_common_elements <- function(l1, l2, l3) {\n  index_list <- extract_index_list(l1, l2, l3)\n  return(l1[index_list])\n}\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(2, 3, 4, 5, 6)\nl3 <- c(3, 4, 5, 6, 7)\n\nextract_common_elements(l1, l2, l3)\n",
    "\n  # Your code here\n}\n\nextract_index_list(l1, l2, l3)\n ",
    "\n  index_list <- c()\n  for (i in seq_along(l1)) {\n    if (l1[i] == l2[i] && l2[i] == l3[i]) {\n      index_list <- c(index_list, i)\n    }\n  }\n  return(index_list)\n}\n\nextract_common_elements <- function(l1, l2, l3) {\n  index_list <- extract_index_list(l1, l2, l3)\n  common_elements <- c()\n  for (i in index_list) {\n    common_elements <- c(common_elements, l1[i])\n  }\n  return(common_elements)\n}\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n\nl1 <- c(1, 2, 3, 4, 5)\nl2 <- c(1, 2, 3, 4, 5)\nl3 <- c(1, 2, 3, 4, 5)\nextract_common_elements(l1, l2, l3)\n",
    "\n  common_index <- intersect(intersect(which(l1 == l2), which(l1 == l3)), which(l2 == l3))\n  return(common_index)\n}\n"
  ]
}