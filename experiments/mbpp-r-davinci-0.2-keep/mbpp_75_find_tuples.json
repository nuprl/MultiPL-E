{
  "name": "mbpp_75_find_tuples",
  "language": "r",
  "prompt": "# Write a function to find tuples which have all elements divisible by k from the given list of tuples.\nfind_tuples <- function(test_list, K) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_75_find_tuples.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- find_tuples\n    if(!identical(candidate(list(list(6, 24, 12), list(7, 9, 6), list(12, 18, 21)), 6), list(list(6, 24, 12)))){quit('no', 1)}\n    if(!identical(candidate(list(list(5, 25, 30), list(4, 2, 3), list(7, 8, 9)), 5), list(list(5, 25, 30)))){quit('no', 1)}\n    if(!identical(candidate(list(list(7, 9, 16), list(8, 16, 4), list(19, 17, 18)), 4), list(list(8, 16, 4)))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(test_list[[i]][1] %% K == 0 & test_list[[i]][2] %% K == 0 & test_list[[i]][3] %% K == 0){\n      result[[length(result) + 1]] <- test_list[[i]]\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  divisible_tuples <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      divisible_tuples <- c(divisible_tuples, test_list[[i]])\n    }\n  }\n  return(divisible_tuples)\n}\n",
    "\n  # Write your code here\n  lapply(test_list, function(x) all(x %% K == 0))\n}\n",
    "\n  # Write your code here\n  lapply(test_list, function(x) all(x %% K == 0))\n}\n",
    "\n  # Write your code here\n  res <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      res <- c(res, test_list[[i]])\n    }\n  }\n  return(res)\n}\n",
    "\n  # Write your code here\n  # Return the list of tuples which have all elements divisible by K\n  # Return an empty list if no tuple is found\n  # Return the original list if all tuples have all elements divisible by K\n  # Return the original list if the list is empty\n  # Return the original list if K is 0\n  # Return the original list if K is 1\n  # Return the original list if K is -1\n  # Return the original list if K is -2\n  # Return the original list if K is -3\n  # Return the original list if K is -4\n  # Return the original list if K is -5\n  # Return the original list if K is -6\n  # Return the original list if K is -7\n  # Return the original list if K is -8\n  # Return the original list if K is -9\n  # Return the original list if K is -10\n  # Return the original list if K is -11\n  # Return the original list if K is -12\n  # Return the original list if K is -13\n  # Return the original list if K is -14\n  # Return the original list if K is -15\n  # Return the original list if K is -16\n  # Return the original list if K is -17\n  # Return the original list if K is -18\n  # Return the original list if K is -19\n  # Return the original list if K is -20\n  # Return the original list if K is -21\n  # Return the original list if K is -22\n  # Return the original list if K is -23\n  # Return the original list if K is -24\n  # Return the original list if K is -25\n  # Return the original list if K is -26\n  # Return the original list if K is -27\n  # Return the original list if K is -28\n  # Return the original list if K is -29\n  # Return the original list if K is -30\n  # Return the original list if K is -31\n  # Return the original list if K is -32\n  # Return the original list if K is -33\n  # Return the original list if K is -34\n  # Return the original list if K is -35\n  #",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(test_list[[i]] %% K == 0){\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  return(test_list[apply(test_list, 1, function(x) all(x %% K == 0)),])\n}\n",
    "\n  return(lapply(test_list, function(x) all(x %% K == 0)))\n}\n\nfind_tuples(test_list, K)\n",
    "\n  # Write your code here\n  for(i in 1:length(test_list)){\n    if(test_list[[i]][1] %% K == 0 & test_list[[i]][2] %% K == 0 & test_list[[i]][3] %% K == 0){\n      print(test_list[[i]])\n    }\n  }\n}\n",
    "\n  # Write your code here\n  lapply(test_list, function(x) all(x %% K == 0))\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (tuple in test_list) {\n    if (all(tuple %% K == 0)) {\n      result <- c(result, list(tuple))\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  return(test_list)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      result[[length(result) + 1]] <- test_list[[i]]\n    }\n  }\n  return(result)\n}\n",
    "\n  # Write your code here\n  return(test_list)\n}\n",
    "\n  # Write your code here\n  res <- list()\n  for(i in 1:length(test_list)){\n    if(all(test_list[[i]] %% K == 0)){\n      res <- c(res, test_list[[i]])\n    }\n  }\n  return(res)\n}\n",
    "\n  # Write your code here\n  return(test_list[apply(test_list, 1, function(x) all(x %% K == 0)), ])\n}\n",
    "\n  # Write your code here\n  result <- list()\n  for (i in 1:length(test_list)) {\n    if (all(test_list[[i]] %% K == 0)) {\n      result <- c(result, test_list[[i]])\n    }\n  }\n  return(result)\n}\n\ntest_list <- list(c(4, 5, 6), c(33, 66, 99), c(22, 44, 66))\nK <- 2\nfind_tuples(test_list, K)\n"
  ]
}