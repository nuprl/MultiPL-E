{
  "name": "mbpp_566_sum_digits",
  "language": "r",
  "prompt": "# Write a function to get the sum of the digits of a non-negative integer.\nsum_digits <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_566_sum_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- sum_digits\n    if(!identical(candidate(345), 12)){quit('no', 1)}\n    if(!identical(candidate(12), 3)){quit('no', 1)}\n    if(!identical(candidate(97), 16)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(n %/% 10) + n %% 10)\n  }\n}\n\nsum_digits(123)\n",
    "\n  if (n == 0) {\n    return(0)\n  } else {\n    return(n %% 10 + sum_digits(floor(n / 10)))\n  }\n}\n\nsum_digits(0)\nsum_digits(1)\nsum_digits(10)\nsum_digits(123)\nsum_digits(12345)\n",
    "\n  if (n < 0) {\n    stop(\"n is negative\")\n  }\n  sum(as.integer(strsplit(as.character(n), \"\")[[1]]))\n}\nsum_digits(123)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + (n %% 10))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  return(n %% 10 + sum_digits(n %/% 10))\n}\n\nsum_digits(123)\n",
    "\n    if (n == 0) {\n        return(0)\n    } else {\n        return(n %% 10 + sum_digits(n %/% 10))\n    }\n}\n\nsum_digits(123)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + n %% 10)\n  }\n}\n\nsum_digits(123)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n/10)) + n%%10)\n  }\n}\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + n %% 10)\n  }\n}\n\nsum_digits(123)\n\nsum_digits(12345)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + n %% 10)\n  }\n}\n\nsum_digits(123)\n",
    "\n  if (n == 0) {\n    return(0)\n  } else {\n    return(n %% 10 + sum_digits(n %/% 10))\n  }\n}\n\nsum_digits(123)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + n %% 10)\n  }\n}\n\nsum_digits(123)\nsum_digits(12345)\nsum_digits(123456789)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + n %% 10)\n  }\n}\n\nsum_digits(123)\n",
    "\n  sum(as.integer(strsplit(as.character(n), split = \"\")[[1]]))\n}\n",
    "\n    if (n == 0) {\n        return(0)\n    } else {\n        return(n %% 10 + sum_digits(n %/% 10))\n    }\n}\n\nsum_digits(123)\n",
    "\n    if (n == 0) {\n        return(0)\n    } else {\n        return(n %% 10 + sum_digits(n %/% 10))\n    }\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  } else {\n    return(n %% 10 + sum_digits(floor(n / 10)))\n  }\n}\n\nsum_digits(123)\n",
    "\n  if (n == 0) {\n    return(0)\n  } else {\n    return(n %% 10 + sum_digits(floor(n / 10)))\n  }\n}\n\nsum_digits(123)\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(n %% 10 + sum_digits(n %/% 10))\n  }\n}\n",
    "\n  if (n < 10) {\n    return(n)\n  } else {\n    return(sum_digits(floor(n / 10)) + n %% 10)\n  }\n}\n\nsum_digits(123)\n"
  ]
}