{
  "name": "mbpp_69_is_sublist",
  "language": "r",
  "prompt": "# Write a function to check whether a list contains the given sublist or not.\nis_sublist <- function(l, s) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_69_is_sublist.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- is_sublist\n    if(!identical(candidate(c(2, 4, 3, 5, 7), c(3, 7)), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 3, 5, 7), c(4, 3)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 3, 5, 7), c(1, 6)), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if(length(s) == 0) {\n    return(TRUE)\n  }\n  if(length(l) == 0) {\n    return(FALSE)\n  }\n  if(l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 6))\nis_sublist(c(1, 2, 3, 4, 5), c(6, 7, 8))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i+length(s)-1)] == s)) %>%\n    any\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 5, 6))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1,2,3,4), list(2,3))\nis_sublist(list(1,2,3,4), list(2,4))\n",
    "\n  lapply(1:(length(l) - length(s) + 1), function(i) all(l[i:(i + length(s) - 1)] == s)) %>%\n    any()\n}\n",
    "\n  if(length(s) == 0) return(TRUE)\n  if(length(l) == 0) return(FALSE)\n  if(l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i+length(s)-1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9,0))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9,0,1))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9,0,1,2))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9,0,1,2,3))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9,0,1,2,3,4))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2,3,4,5,6,7,8,9,0,1,2,3,4,5))\nis_sublist(list(1,2,3,4,5,6,7,8,9), list(1,2",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n\nis_sublist(list(1,2,3,4,5,6), list(1,2,3))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8,9))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8,9,10))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8,9,10,11))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8,9,10,11,12))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8,9,10,11,12,13))\nis_sublist(list(1,2,3,4,5,6), list(1,2,3,4,5,6,7,8,9,10,11,12,13,14))\nis_sublist(list(1,2,",
    "\n  if(length(s) == 0) return(TRUE)\n  if(length(l) == 0) return(FALSE)\n  if(l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1,2,3,4,5), list(3,4))\nis_sublist(list(1,2,3,4,5), list(3,4,5))\nis_sublist(list(1,2,3,4,5), list(3,4,6))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 4))\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  FALSE\n}\n\nis_sublist(l, s)",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i + length(s) - 1)] == s))\n}\n\nis_sublist(l, s)\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i + length(s) - 1)] == s))\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  if (length(s) == 0) return(TRUE)\n  if (all(l[1:length(s)] == s)) return(TRUE)\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(l, s)\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) == 0) return(TRUE)\n  if(length(l) == 0) return(FALSE)\n  if(l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7))\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  l <- as.character(l)\n  s <- as.character(s)\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 6))\nis_sublist(c(1, 2, 3, 4, 5), c(6, 7, 8))\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i+length(s)-1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(l) < length(s)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(l) < length(s)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i + length(s) - 1)] == s))\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) {\n        return(is_sublist(l[-1], s[-1]))\n    } else {\n        return(is_sublist(l[-1], s))\n    }\n}\n",
    "\n  l <- as.character(l)\n  s <- as.character(s)\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  else {\n    for (i in 1:(length(l) - length(s) + 1)) {\n      if (all(l[i:(i + length(s) - 1)] == s)) {\n        return(TRUE)\n      }\n    }\n    return(FALSE)\n  }\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4, 5, 6))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4, 5, 6, 7))\n",
    "\n  l_len <- length(l)\n  s_len <- length(s)\n  for (i in seq_len(l_len - s_len + 1)) {\n    if (all(l[i:(i + s_len - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(list(1, 2, 3, 4, 5), list(1, 2, 3))\nis_sublist(list(1, 2, 3, 4, 5), list(3, 4, 5))\nis_sublist(list(1, 2, 3, 4, 5), list(1, 2, 3, 4, 5))\nis_sublist(list(1, 2, 3, 4, 5), list(1, 2, 3, 4, 5, 6))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n\nis_sublist(c(1,2,3,4,5), c(2,3))\nis_sublist(c(1,2,3,4,5), c(2,3,4))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5,6))\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1,2,3,4,5), c(1,2,3))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8,9))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8,9,10))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8,9,10,11))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8,9,10,11,12))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8,9,10,11,12,13))\nis_sublist(c(1,2,3,4,5), c(1,2,3,4,5,6,7,8,9,10,11,12",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(l, s)\n",
    "\n    if (length(s) > length(l)) return(FALSE)\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n    }\n    return(FALSE)\n}\n",
    "\n    if (length(l) < length(s)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  identical(s, l[seq_along(s)])\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:length(l)) {\n    if (l[i] == s[1]) {\n      if (length(s) == 1) {\n        return(TRUE)\n      }\n      if (is_sublist(l[i:length(l)], s[2:length(s)])) {\n        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7, 8))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7, 8, 9))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7, 8, 9, 10))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\nis_sublist(list(1, 2, 3, 4, 5), list(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))\nis_sublist(list(1,",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i+length(s)-1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1, 2, 3, 4, 5), list(3, 4))\n",
    "\n  if(length(s) == 0) return(TRUE)\n  if(length(l) == 0) return(FALSE)\n  if(l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:length(l)) {\n        if (l[i] == s[1]) {\n            if (length(s) == 1) {\n                return(TRUE)\n            }\n            if (is_sublist(l[i:(i+length(s)-1)], s[2:length(s)])) {\n                return(TRUE)\n            }\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1,2,3,4,5), c(3,4))\nis_sublist(c(1,2,3,4,5), c(3,4,5))\nis_sublist(c(1,2,3,4,5), c(3,4,6))\nis_sublist(c(1,2,3,4,5), c(3,4,5,6))\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  is_sublist_rec <- function(l, s) {\n    if (length(s) == 0) {\n      return(TRUE)\n    }\n    if (length(l) == 0) {\n      return(FALSE)\n    }\n    if (l[1] == s[1]) {\n      return(is_sublist_rec(l[-1], s[-1]))\n    }\n    return(is_sublist_rec(l[-1], s))\n  }\n  return(is_sublist_rec(l, s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  lapply(1:(length(l) - length(s) + 1), function(i) all(l[i:(i + length(s) - 1)] == s)) %>%\n    any()\n}\n\nis_sublist(list(1, 2, 3, 4), list(1, 2))\nis_sublist(list(1, 2, 3, 4), list(2, 3))\nis_sublist(list(1, 2, 3, 4), list(3, 4))\nis_sublist(list(1, 2, 3, 4), list(4, 5))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n    if (length(s) > length(l)) return(FALSE)\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n    }\n    return(FALSE)\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1, 2, 3, 4), c(2, 3))\nis_sublist(c(1, 2, 3, 4), c(2, 3, 4))\nis_sublist(c(1, 2, 3, 4), c(2, 3, 5))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  if (length(s) == 0) return(TRUE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i + length(s) - 1)] == s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (head(l) == head(s)) return(is_sublist(tail(l), tail(s)))\n  return(is_sublist(tail(l), s))\n}\n",
    "\n  # Convert the list to a string\n  l_str <- paste(l, collapse = \"\")\n  s_str <- paste(s, collapse = \"\")\n  # Check if the sublist string is contained in the list string\n  if (grepl(s_str, l_str)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(s) == 0)\n    return(TRUE)\n  if (length(l) == 0)\n    return(FALSE)\n  if (l[1] == s[1])\n    return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (head(l) == head(s)) return(is_sublist(tail(l), tail(s)))\n  return(is_sublist(tail(l), s))\n}\n\nis_sublist(list(1, 2, 3, 4, 5), list(3, 4))\nis_sublist(list(1, 2, 3, 4, 5), list(3, 6))\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  stopifnot(is.list(l), is.list(s))\n  all(sapply(s, function(x) x %in% l))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if(length(s) > length(l)) return(FALSE)\n    for(i in seq_along(l)) {\n        if(all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n    }\n    return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  else {\n    for (i in 1:(length(l) - length(s) + 1)) {\n      if (all(l[i:(i + length(s) - 1)] == s)) {\n        return(TRUE)\n      }\n    }\n    return(FALSE)\n  }\n}\n",
    "\n  if(length(s) == 0) return(TRUE)\n  if(length(l) == 0) return(FALSE)\n  if(l[[1]] == s[[1]]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if(length(s) == 0) return(TRUE)\n    if(length(l) == 0) return(FALSE)\n    if(l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) > length(l))\n    return(FALSE)\n  else {\n    for(i in 1:(length(l) - length(s) + 1)) {\n      if(all(l[i:(i + length(s) - 1)] == s))\n        return(TRUE)\n    }\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1, 2, 3, 4), list(2, 3))\nis_sublist(list(1, 2, 3, 4), list(3, 4))\nis_sublist(list(1, 2, 3, 4), list(1, 2, 3, 4))\nis_sublist(list(1, 2, 3, 4), list(1, 2, 3, 4, 5))\nis_sublist(list(1, 2, 3, 4), list(5))\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  l <- as.character(l)\n  s <- as.character(s)\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  # If the sublist is empty, it is always a sublist of the main list\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  # If the sublist is longer than the main list, it is never a sublist\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  # If the first element of the sublist is not in the main list, it is not a sublist\n  if (!(s[1] %in% l)) {\n    return(FALSE)\n  }\n  # If the first element of the sublist is in the main list, check whether the rest of the sublist is in the main list\n  return(is_sublist(l[l != s[1]], s[-1]))\n}\n",
    "\n    if (length(s) == 0) {\n        return(TRUE)\n    }\n    if (length(l) == 0) {\n        return(FALSE)\n    }\n    if (l[1] == s[1]) {\n        return(is_sublist(l[-1], s[-1]))\n    }\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1, 2, 3, 4), c(2, 3))\nis_sublist(c(1, 2, 3, 4), c(2, 3, 4))\nis_sublist(c(1, 2, 3, 4), c(2, 3, 4, 5))\nis_sublist(c(1, 2, 3, 4), c(2, 3, 4, 5, 6))\nis_sublist(c(1, 2, 3, 4), c(2, 3, 4, 5, 6, 7))\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i + length(s) - 1)] == s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  stopifnot(is.list(l) && is.list(s))\n  if (length(s) == 0) return(TRUE)\n  if (length(s) > length(l)) return(FALSE)\n  if (identical(l, s)) return(TRUE)\n  is_sublist(l[-1], s)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  else {\n    for(i in 1:(length(l) - length(s) + 1)) {\n      if(all(l[i:(i + length(s) - 1)] == s)) {\n        return(TRUE)\n      }\n    }\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1,2,3,4,5), list(1,2,3))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8,9))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8,9,10))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8,9,10,11))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8,9,10,11,12))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8,9,10,11,12,13))\nis_sublist(list(1,2,3,4,5), list(1,2,3,4,5,6,7,8,9,10,11,12",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i+length(s)-1)] == s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  for (i in seq_along(l)) {\n    if (all(l[i:(i+length(s)-1)] == s))\n      return(TRUE)\n  }\n  return(FALSE)\n}\n\nis_sublist(l, s)\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(2, 3, 4, 5, 6))\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 6))\nis_sublist(c(1, 2, 3, 4, 5), c(6, 7, 8))\n",
    "\n  stopifnot(is.list(l), is.list(s))\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (identical(l[[1]], s[[1]])) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(l) < length(s)) return(FALSE)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) == 0) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l)-length(s)+1)) {\n    if(all(l[i:(i+length(s)-1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1,2,3,4,5), c(2,3,4))\nis_sublist(c(1,2,3,4,5), c(2,3,6))\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  l <- as.character(l)\n  s <- as.character(s)\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:length(l)) {\n    if (all(l[i:(i+length(s)-1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) {\n        return(is_sublist(l[-1], s[-1]))\n    } else {\n        return(is_sublist(l[-1], s))\n    }\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s))\n      return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if (length(s) == 0) return(TRUE)\n    if (length(l) == 0) return(FALSE)\n    if (l[1] == s[1]) {\n        is_sublist(l[-1], s[-1])\n    } else {\n        is_sublist(l[-1], s)\n    }\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    else {\n        for (i in 1:(length(l) - length(s) + 1)) {\n            if (all(l[i:(i + length(s) - 1)] == s)) {\n                return(TRUE)\n            }\n        }\n        return(FALSE)\n    }\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (head(l) == head(s)) return(is_sublist(tail(l), tail(s)))\n  return(is_sublist(tail(l), s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  } else {\n    return(is_sublist(l[-1], s))\n  }\n}\n\nis_sublist(c(1,2,3,4,5), c(3,4))\nis_sublist(c(1,2,3,4,5), c(3,4,5))\nis_sublist(c(1,2,3,4,5), c(3,4,6))\nis_sublist(c(1,2,3,4,5), c(3,4,5,6))\nis_sublist(c(1,2,3,4,5), c(3,4,5,6,7))\n",
    "\n  l <- unlist(l)\n  s <- unlist(s)\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if(length(s) == 0) return(TRUE)\n    if(length(l) == 0) return(FALSE)\n    if(l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n    return(is_sublist(l[-1], s))\n}\n\nis_sublist(list(1, 2, 3, 4), list(1, 2))\nis_sublist(list(1, 2, 3, 4), list(1, 2, 3, 4))\nis_sublist(list(1, 2, 3, 4), list(1, 2, 3, 4, 5))\nis_sublist(list(1, 2, 3, 4), list(2, 3))\nis_sublist(list(1, 2, 3, 4), list(2, 3, 4))\nis_sublist(list(1, 2, 3, 4), list(2, 3, 5))\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 5))\nis_sublist(c(1, 2, 3, 4, 5), c(3, 4, 6))\nis_sublist(c(1, 2, 3, 4, 5), c(6, 7, 8))\n",
    "\n  n <- length(s)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i+n-1)] == s)) return(TRUE)\n  }\n  FALSE\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq_along(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  FALSE\n}\n\nis_sublist(l, s)\n",
    "\n  is_sublist <- function(l, s) {\n    if (length(s) > length(l)) {\n      return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n      if (all(l[i:(i + length(s) - 1)] == s)) {\n        return(TRUE)\n      }\n    }\n    return(FALSE)\n  }\n  is_sublist(l, s)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (identical(l, s)) return(TRUE)\n  is_sublist(l[-1], s)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[[1]] == s[[1]]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if(length(s) > length(l)) {\n    return(FALSE)\n  }\n  for(i in 1:(length(l) - length(s) + 1)) {\n    if(all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if(length(s) > length(l)) {\n        return(FALSE)\n    }\n    for(i in 1:(length(l) - length(s) + 1)) {\n        if(all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n    if (length(l) < length(s)) {\n        return(FALSE)\n    }\n    for (i in seq(1, length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if(length(s) == 0) return(TRUE)\n  if(length(l) < length(s)) return(FALSE)\n  if(all(l[1:length(s)] == s)) return(TRUE)\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  l <- as.character(l)\n  s <- as.character(s)\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in seq(1, length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) > length(l)) return(FALSE)\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  for (i in 1:length(l)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(l, s)\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(l, s)\n",
    "\n  l <- unlist(l)\n  s <- unlist(s)\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n",
    "\n    if (length(s) > length(l)) {\n        return(FALSE)\n    }\n    for (i in 1:(length(l) - length(s) + 1)) {\n        if (all(l[i:(i + length(s) - 1)] == s)) {\n            return(TRUE)\n        }\n    }\n    return(FALSE)\n}\n",
    "\n  if (length(s) == 0) {\n    return(TRUE)\n  }\n  if (length(l) < length(s)) {\n    return(FALSE)\n  }\n  if (l[1] == s[1]) {\n    return(is_sublist(l[-1], s[-1]))\n  }\n  return(is_sublist(l[-1], s))\n}\n\nis_sublist(c(1,2,3,4,5), c(2,3))\nis_sublist(c(1,2,3,4,5), c(2,3,4))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5,6))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5,6,7))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5,6,7,8))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5,6,7,8,9))\nis_sublist(c(1,2,3,4,5), c(2,3,4,5,6,7,8,9,10))\n",
    "\n  lapply(seq_along(l), function(i) all(l[i:(i + length(s) - 1)] == s)) %>%\n    any()\n}\n",
    "\n  if (length(s) == 0) return(TRUE)\n  if (length(l) == 0) return(FALSE)\n  if (l[1] == s[1]) return(is_sublist(l[-1], s[-1]))\n  return(is_sublist(l[-1], s))\n}\n",
    "\n  if (length(s) > length(l)) {\n    return(FALSE)\n  }\n  for (i in 1:(length(l) - length(s) + 1)) {\n    if (all(l[i:(i + length(s) - 1)] == s)) {\n      return(TRUE)\n    }\n  }\n  return(FALSE)\n}\n"
  ]
}