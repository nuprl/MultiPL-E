{
  "name": "mbpp_778_pack_consecutive_duplicates",
  "language": "r",
  "prompt": "# Write a function to pack consecutive duplicates of a given list elements into sublists.\npack_consecutive_duplicates <- function(list1) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_778_pack_consecutive_duplicates.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- pack_consecutive_duplicates\n    if(!identical(candidate(list(0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4)), list(list(0, 0), list(1), list(2), list(3), list(4, 4), list(5), list(6, 6, 6), list(7), list(8), list(9), list(4, 4)))){quit('no', 1)}\n    if(!identical(candidate(list(10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10)), list(list(10, 10), list(15), list(19), list(18, 18), list(17), list(26, 26), list(17), list(18), list(10)))){quit('no', 1)}\n    if(!identical(candidate(list('a', 'a', 'b', 'c', 'd', 'd')), list(list('a', 'a'), list('b'), list('c'), list('d', 'd')))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[j]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[j]] <- c(list2[[j]], list1[i])\n      } else {\n        j <- j + 1\n        list2[[j]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    pack_consecutive_duplicates_helper(tail(list1, n = -1),\n                                       c(list2, list(pack_consecutive_duplicates_helper2(list1))))\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  }\n  else if (length(list1) == 1) {\n    return(list1)\n  }\n  else if (head(list1, n = 1) == head(list1, n = 2)) {\n    return(c(head(list1, n = 1), pack_consecutive_duplicates_helper2(tail(list1, n = -1))))\n  }\n  else {\n    return(list())\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i - 1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2) + 1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    pack_consecutive_duplicates_helper(list1, list2)\n  }\n}\n\npack_consecutive_duplicates(list(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5))\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    pack_consecutive_duplicates_helper(list1, list2)\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list(), list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2, list3) {\n  if (length(list1) == 0) {\n    return(list3)\n  }\n  if (length(list2) == 0) {\n    list2 <- c(list2, list1[1])\n    list3 <- c(list3, list2)\n    return(pack_consecutive_duplicates_helper(list1[-1], list(), list3))\n  }\n  if (list1[1] == list2[length(list2)]) {\n    list2 <- c(list2, list1[1])\n    list3[length(list3)] <- list2\n    return(pack_consecutive_duplicates_helper(list1[-1], list2, list3))\n  } else {\n    list2 <- c(list2, list1[1])\n    list3 <- c(list3, list2)\n    return(pack_consecutive_duplicates_helper(list1[-1], list(), list3))\n  }\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  list2 <- c(list2, list(list1[1]))\n  return(pack_consecutive_duplicates_helper(list1[-1], list2))\n}\n\npack_consecutive_duplicates(list(\"a\", \"a\", \"a\", \"a\", \"b\", \"c\", \"c\", \"a\", \"a\", \"d\", \"e\", \"e\", \"e\", \"e\"))\n",
    "\n  list2 <- list()\n  i <- 1\n  while(i <= length(list1)) {\n    j <- i\n    while(j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    list2[[i]] <- list1[i:(j-1)]\n    i <- j\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  j <- 1\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[j]] <- list1[i]\n    } else if (list1[i] == list1[i-1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[i]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates <- function(list1, result) {\n    if (length(list1) == 0) {\n      return(result)\n    }\n    else {\n      i <- 1\n      while (i <= length(list1) && list1[i] == list1[1]) {\n        i <- i + 1\n      }\n      result <- c(result, list(list1[1:i-1]))\n      list1 <- list1[i:length(list1)]\n      pack_consecutive_duplicates(list1, result)\n    }\n  }\n  pack_consecutive_duplicates(list1, list())\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[[i]])\n    } else {\n      list2[[length(list2)+1]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for(i in 2:length(list1)) {\n    if(list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while(i <= length(list1)) {\n    list2[[j]] <- list1[i]\n    while(i <= length(list1) && list1[i] == list2[[j]][1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n      i <- i + 1\n    }\n    j <- j + 1\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  pack <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    j <- i\n    while (j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    pack[[length(pack) + 1]] <- list1[i:(j - 1)]\n    i <- j\n  }\n  return(pack)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n    pack_consecutive_duplicates_helper(list1[-1], list2)\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  }\n  else if (list1[1] == list1[2]) {\n    return(c(list1[1], pack_consecutive_duplicates_helper2(list1[-1])))\n  }\n  else {\n    return(list(list1[1]))\n  }\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list1[[i-1]]) {\n            list2[[length(list2)]] <- c(list2[[length(list2)]], list1[[i]])\n        } else {\n            list2[[length(list2)+1]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  index <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[index]][[1]]) {\n      list2[[index]] <- c(list2[[index]], list1[[i]])\n    } else {\n      index <- index + 1\n      list2[[index]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n\npack_consecutive_duplicates(list1)\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), append(list2, list(pack_consecutive_duplicates_helper2(list1))))\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  }\n  else if (length(list1) == 1) {\n    return(list1)\n  }\n  else if (head(list1, 1) == head(list1, 2)) {\n    pack_consecutive_duplicates_helper2(tail(list1, -1))\n  }\n  else {\n    list(head(list1, 1))\n  }\n}\n\npack_consecutive_duplicates(list(1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n  } else {\n    if (list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    } else {\n      list2 <- c(list2, list(list1[1]))\n    }\n  }\n  pack_consecutive_duplicates_helper(list1[-1], list2)\n}\n\npack_consecutive_duplicates(list(1, 2, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5))\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list1 <- unlist(list1)\n  list2 <- list()\n  list2[[1]] <- list1[1]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[i] == list1[i-1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[i]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    list2[[j]] <- list1[[i]]\n    while (i <= length(list1) && list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n      i <- i + 1\n    }\n    j <- j + 1\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for(i in 2:length(list1)) {\n    if(list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n\nlist1 <- list(1, 1, 1, 2, 3, 3, 4, 5, 5, 5)\npack_consecutive_duplicates(list1)\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    j <- i\n    while (j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    list2[[i]] <- list1[i:(j - 1)]\n    i <- j\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  index <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[index]][[1]]) {\n      list2[[index]] <- c(list2[[index]], list1[[i]])\n    } else {\n      index <- index + 1\n      list2[[index]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), c(list2, list(head(list1, 1))))\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    pack_consecutive_duplicates_helper(list1, list2)\n  }\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  } else {\n    list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n    pack_consecutive_duplicates_helper(list1[-which(list1 == list1[1])], list2)\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  } else if (list1[1] == list1[2]) {\n    return(c(list1[1], pack_consecutive_duplicates_helper2(list1[-1])))\n  } else {\n    return(list(list1[1]))\n  }\n}\n\npack_consecutive_duplicates(list(1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4))\n",
    "\n  list_of_lists <- list()\n  list_of_lists[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list_of_lists[[j]] <- c(list_of_lists[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list_of_lists[[j]] <- list1[[i]]\n    }\n  }\n  return(list_of_lists)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    j <- 1\n    while (i <= length(list1)) {\n        if (i == length(list1)) {\n            list2[[j]] <- list1[i]\n            i <- i + 1\n        } else if (list1[i] == list1[i + 1]) {\n            list2[[j]] <- list1[i]\n            i <- i + 1\n        } else {\n            list2[[j]] <- list1[i]\n            i <- i + 1\n            j <- j + 1\n        }\n    }\n    return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else if (list1[i] == list1[i-1]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n    } else {\n      list2[[length(list2)+1]] <- list1[i]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  i <- 1\n  for (j in 2:length(list1)) {\n    if (list1[[j]] == list2[[i]][[1]]) {\n      list2[[i]] <- c(list2[[i]], list1[[j]])\n    } else {\n      i <- i + 1\n      list2[[i]] <- list1[[j]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    j <- i + 1\n    while (j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    list2[[length(list2) + 1]] <- list1[i:(j - 1)]\n    i <- j\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    j <- i + 1\n    while (j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    list2 <- c(list2, list(list1[i:(j-1)]))\n    i <- j\n  }\n  return(list2)\n}\n",
    "\n  # Create an empty list to store the packed sublists\n  packed_list <- list()\n  # Create an empty list to store the current sublist\n  current_sublist <- list()\n  # Create a variable to store the previous element\n  previous_element <- list1[[1]]\n  # Loop through the list\n  for (element in list1) {\n    # If the current element is the same as the previous element, add it to the current sublist\n    if (element == previous_element) {\n      current_sublist <- c(current_sublist, element)\n    } else {\n      # If the current element is not the same as the previous element, add the current sublist to the packed list\n      packed_list <- c(packed_list, current_sublist)\n      # Reset the current sublist to the current element\n      current_sublist <- list(element)\n    }\n    # Update the previous element\n    previous_element <- element\n  }\n  # Add the last sublist to the packed list\n  packed_list <- c(packed_list, current_sublist)\n  # Return the packed list\n  return(packed_list)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    if (i == length(list1)) {\n      list2[[j]] <- list1[i]\n      i <- i + 1\n    } else if (list1[i] == list1[i + 1]) {\n      list2[[j]] <- list1[i]\n      i <- i + 1\n    } else {\n      list2[[j]] <- list1[i]\n      i <- i + 1\n      j <- j + 1\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for(i in 2:length(list1)) {\n    if(list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates <- function(list1, result) {\n    if (length(list1) == 0) {\n      return(result)\n    }\n    else {\n      if (length(result) == 0) {\n        result <- list(list1[1])\n      }\n      else {\n        if (list1[1] == result[[length(result)]][1]) {\n          result[[length(result)]] <- c(result[[length(result)]], list1[1])\n        }\n        else {\n          result <- c(result, list(list1[1]))\n        }\n      }\n      return(pack_consecutive_duplicates(list1[-1], result))\n    }\n  }\n  return(pack_consecutive_duplicates(list1, list()))\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    counter <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[counter]][[1]]) {\n            list2[[counter]] <- c(list2[[counter]], list1[[i]])\n        } else {\n            counter <- counter + 1\n            list2[[counter]] <- list1[[i]]\n        }\n    }\n    list2\n}\n",
    "\n    pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n    if (length(list1) == 0) {\n        return(list2)\n    } else {\n        list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n        pack_consecutive_duplicates_helper(list1[-which(list1 == list1[1])], list2)\n    }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n    if (length(list1) == 0) {\n        return(list())\n    } else if (list1[1] == list1[2]) {\n        return(c(list1[1], pack_consecutive_duplicates_helper2(list1[-1])))\n    } else {\n        return(list(list1[1]))\n    }\n}\n",
    "\n    list1 <- as.character(list1)\n    list2 <- list()\n    i <- 1\n    j <- 1\n    while(i <= length(list1)) {\n        list2[[j]] <- list1[i]\n        while(i <= length(list1) && list1[i] == list2[[j]][1]) {\n            list2[[j]] <- c(list2[[j]], list1[i])\n            i <- i + 1\n        }\n        j <- j + 1\n    }\n    return(list2)\n}\n",
    "\n    pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n    if (length(list1) == 0) {\n        return(list2)\n    } else {\n        list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n        pack_consecutive_duplicates_helper(list1[-which(list1 == list1[1])], list2)\n    }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n    if (length(list1) == 0) {\n        return(list())\n    } else if (length(list1) == 1) {\n        return(list1)\n    } else {\n        if (list1[1] == list1[2]) {\n            return(c(list1[1], pack_consecutive_duplicates_helper2(list1[-1])))\n        } else {\n            return(list1[1])\n        }\n    }\n}\n",
    "\n  # Create a list to store the output\n  output <- list()\n  # Create a variable to store the current element\n  current_element <- list1[[1]]\n  # Create a list to store the current sublist\n  current_sublist <- list()\n  # Loop through the list\n  for (i in 1:length(list1)) {\n    # If the current element is equal to the current element\n    if (list1[[i]] == current_element) {\n      # Add the current element to the current sublist\n      current_sublist[[length(current_sublist) + 1]] <- list1[[i]]\n    } else {\n      # Add the current sublist to the output\n      output[[length(output) + 1]] <- current_sublist\n      # Reset the current sublist\n      current_sublist <- list()\n      # Add the current element to the current sublist\n      current_sublist[[length(current_sublist) + 1]] <- list1[[i]]\n      # Update the current element\n      current_element <- list1[[i]]\n    }\n  }\n  # Add the current sublist to the output\n  output[[length(output) + 1]] <- current_sublist\n  # Return the output\n  return(output)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), c(list2, list(pack_consecutive_duplicates_helper2(list1))))\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  }\n  else if (length(list1) == 1) {\n    return(list1)\n  }\n  else if (head(list1, 1) == head(list1, 2)) {\n    return(c(head(list1, 1), pack_consecutive_duplicates_helper2(tail(list1, -1))))\n  }\n  else {\n    return(list(head(list1, 1)))\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    list2[[j]] <- list1[i]\n    while (i <= length(list1) && list1[i] == list2[[j]][1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n      i <- i + 1\n    }\n    j <- j + 1\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list(list1[1]))\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  list2 <- c(list2, list(list(list1[1])))\n  return(pack_consecutive_duplicates_helper(list1[-1], list2))\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  # Create an empty list to store the result\n  result <- list()\n  # Create an empty list to store the current sublist\n  current_sublist <- list()\n  # Iterate over the list\n  for (i in 1:length(list1)) {\n    # If the current element is the same as the previous one, add it to the current sublist\n    if (i > 1 && list1[i] == list1[i - 1]) {\n      current_sublist <- c(current_sublist, list1[i])\n    } else {\n      # If the current element is different from the previous one, add the current sublist to the result\n      # and create a new sublist with the current element\n      if (length(current_sublist) > 0) {\n        result <- c(result, current_sublist)\n      }\n      current_sublist <- list(list1[i])\n    }\n  }\n  # Add the last sublist to the result\n  result <- c(result, current_sublist)\n  return(result)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n    if (length(list1) == 0) {\n        return(list2)\n    }\n    else {\n        list2 <- c(list2, list(list1[1]))\n        list1 <- list1[-1]\n        while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n            list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n            list1 <- list1[-1]\n        }\n        pack_consecutive_duplicates_helper(list1, list2)\n    }\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    if (i == length(list1) || list1[i] != list1[i + 1]) {\n      list2[[j]] <- list1[seq(i - length(list2[[j]]) + 1, i)]\n      j <- j + 1\n    }\n    i <- i + 1\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  } else {\n    list2 <- c(list2, list(list1[1]))\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  \n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  \n  if (list1[1] == list2[[length(list2)]]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  } else {\n    list2 <- c(list2, list(list1[1]))\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n}\n\npack_consecutive_duplicates(list(1, 1, 1, 2, 2, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    j <- i + 1\n    while (j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    list2[[length(list2) + 1]] <- list1[i:(j - 1)]\n    i <- j\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  while(i <= length(list1)) {\n    j <- i\n    while(j <= length(list1) && list1[i] == list1[j]) {\n      j <- j + 1\n    }\n    list2[[i]] <- list1[i:(j - 1)]\n    i <- j\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n\npack_consecutive_duplicates(list1)\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list(list1[i])\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list(list1[i])\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for(i in 2:length(list1)) {\n    if(list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while(i <= length(list1)) {\n    list2[[j]] <- list1[i]\n    while(i <= length(list1) && list1[i] == list2[[j]][1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n      i <- i + 1\n    }\n    j <- j + 1\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    pack_consecutive_duplicates_helper(list1, list2)\n  }\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    while(i <= length(list1)) {\n        j <- i + 1\n        while(j <= length(list1) && list1[i] == list1[j]) {\n            j <- j + 1\n        }\n        list2[[length(list2) + 1]] <- list1[i:(j - 1)]\n        i <- j\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    if (i == length(list1) || list1[i] != list1[i + 1]) {\n      list2[[j]] <- list1[seq(i - length(list2[[j]]) + 1, i)]\n      j <- j + 1\n    }\n    i <- i + 1\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list1 <- unlist(lapply(split(list1, cumsum(c(TRUE, diff(list1) != 0))), function(x) {\n    if (length(x) == 1) {\n      return(x)\n    } else {\n      return(list(x))\n    }\n  }))\n  return(list1)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    return(pack_consecutive_duplicates_helper(tail(list1, -1), list(list(list1[1]))))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(tail(list1, -1), list2))\n  }\n  list2 <- c(list2, list(list(list1[1])))\n  return(pack_consecutive_duplicates_helper(tail(list1, -1), list2))\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    while (i <= length(list1)) {\n        list2[[i]] <- list1[i]\n        j <- i + 1\n        while (j <= length(list1) && list1[i] == list1[j]) {\n            list2[[i]] <- c(list2[[i]], list1[j])\n            j <- j + 1\n        }\n        i <- j\n    }\n    return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    list2\n  } else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), list2)\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  # Create a vector to store the result\n  result <- vector()\n  # Create a vector to store the current sublist\n  current <- vector()\n  # Iterate over the list\n  for (i in 1:length(list1)) {\n    # If the current element is the same as the previous element\n    if (i > 1 && list1[i] == list1[i - 1]) {\n      # Add it to the current sublist\n      current <- c(current, list1[i])\n    } else {\n      # If the current element is different from the previous element\n      # Add the current sublist to the result\n      result <- c(result, list(current))\n      # Create a new sublist\n      current <- list1[i]\n    }\n  }\n  # Add the last sublist to the result\n  result <- c(result, list(current))\n  # Remove the first element of the result\n  result <- result[-1]\n  # Return the result\n  return(result)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    pack_consecutive_duplicates_helper(list1, list2)\n  }\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    j <- 1\n    while (i <= length(list1)) {\n        if (i == length(list1) || list1[i] != list1[i + 1]) {\n            list2[[j]] <- list1[seq(i, length(list1))[list1[seq(i, length(list1))] == list1[i]]]\n            j <- j + 1\n            i <- i + length(list2[[j - 1]])\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    pack_consecutive_duplicates_helper(list1, list2)\n  }\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(take_while(list1, function(x) x == list1[1])))\n    pack_consecutive_duplicates_helper(drop_while(list1, function(x) x == list1[1]), list2)\n  }\n}\n\npack_consecutive_duplicates(list(1, 1, 1, 2, 3, 3, 4, 4, 4, 4))\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), c(list2, list(take_while(list1, list1[1]))))\n  }\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  list2 <- c(list2, list(list1[1]))\n  return(pack_consecutive_duplicates_helper(list1[-1], list2))\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), list2)\n  }\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    j <- 1\n    while (i <= length(list1)) {\n        if (i == length(list1) || list1[i] != list1[i + 1]) {\n            list2[[j]] <- list1[seq(i, i)]\n            j <- j + 1\n        } else {\n            list2[[j]] <- list1[seq(i, i + 1)]\n            i <- i + 1\n        }\n        i <- i + 1\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    list2[[j]] <- list1[i]\n    while (i <= length(list1) && list1[i] == list2[[j]][1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n      i <- i + 1\n    }\n    j <- j + 1\n  }\n  return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  list2[[1]] <- list1[1]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[i] == list1[i-1]) {\n      list2[[j]] <- c(list2[[j]], list1[i])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[i]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    list2[[i]] <- list1[i]\n    j <- i + 1\n    while (j <= length(list1) && list1[i] == list1[j]) {\n      list2[[i]] <- c(list2[[i]], list1[j])\n      j <- j + 1\n    }\n    i <- j\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[[i]])\n    } else {\n      list2[[length(list2)+1]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates <- function(list1, result) {\n    if (length(list1) == 0) {\n      return(result)\n    }\n    else {\n      first <- list1[1]\n      rest <- list1[-1]\n      if (length(result) == 0) {\n        result <- list(list(first))\n      }\n      else {\n        if (first == result[[length(result)]][1]) {\n          result[[length(result)]] <- c(result[[length(result)]], first)\n        }\n        else {\n          result <- c(result, list(list(first)))\n        }\n      }\n      pack_consecutive_duplicates(rest, result)\n    }\n  }\n  pack_consecutive_duplicates(list1, list())\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n    pack_consecutive_duplicates_helper(list1[-which(list1 == list1[1])], list2)\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  }\n  else if (list1[1] == list1[2]) {\n    c(list1[1], pack_consecutive_duplicates_helper2(list1[-1]))\n  }\n  else {\n    list1[1]\n  }\n}\n\npack_consecutive_duplicates(list(a, a, a, a, b, c, c, a, a, d, e, e, e, e))\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for(i in 2:length(list1)) {\n        if(list1[[i]] != list1[[i-1]]) {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        } else {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        }\n    }\n    return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  i <- 1\n  while (i <= length(list1)) {\n    if (i == length(list1)) {\n      list2[[length(list2) + 1]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i + 1]) {\n        list2[[length(list2) + 1]] <- list1[i]\n      } else {\n        list2[[length(list2) + 1]] <- list1[i]\n        i <- i + 1\n      }\n    }\n    i <- i + 1\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(list1[1]))\n    list1 <- list1[-1]\n    while (length(list1) > 0 && list1[1] == list2[[length(list2)]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n      list1 <- list1[-1]\n    }\n    return(pack_consecutive_duplicates_helper(list1, list2))\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    for (i in 1:length(list1)) {\n        if (i == 1) {\n            list2[[i]] <- list1[i]\n        } else {\n            if (list1[i] == list1[i-1]) {\n                list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n            } else {\n                list2[[length(list2)+1]] <- list1[i]\n            }\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for(i in 2:length(list1)) {\n    if(list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    while (i <= length(list1)) {\n        j <- i + 1\n        while (j <= length(list1) && list1[i] == list1[j]) {\n            j <- j + 1\n        }\n        list2[[length(list2) + 1]] <- list1[i:(j - 1)]\n        i <- j\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list3 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else if (list1[i] == list1[i-1]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n    } else {\n      list2[[length(list2)+1]] <- list1[i]\n    }\n  }\n  for (i in 1:length(list2)) {\n    if (length(list2[[i]]) == 1) {\n      list3[[i]] <- list2[[i]]\n    } else {\n      list3[[i]] <- list(list2[[i]])\n    }\n  }\n  return(list3)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  } else {\n    list2 <- c(list2, list(list1[1]))\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n}\n",
    "\n    pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n    if (length(list1) == 0) {\n        return(list2)\n    }\n    else {\n        list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n        pack_consecutive_duplicates_helper(list1[-which(list1 == list1[1])], list2)\n    }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n    if (length(list1) == 0) {\n        return(list())\n    }\n    else if (list1[1] == list1[2]) {\n        list1[1] <- c(list1[1], pack_consecutive_duplicates_helper2(list1[-1]))\n        return(list1[1])\n    }\n    else {\n        return(list1[1])\n    }\n}\n\npack_consecutive_duplicates(list(a, a, a, a, b, c, c, a, a, d, e, e, e, e))\n",
    "\n    list2 <- list()\n    i <- 1\n    while (i <= length(list1)) {\n        j <- i\n        while (j <= length(list1) && list1[i] == list1[j]) {\n            j <- j + 1\n        }\n        list2[[length(list2) + 1]] <- list1[i:(j - 1)]\n        i <- j\n    }\n    list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    list2\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    list2\n  } else {\n    pack_consecutive_duplicates_helper(tail(list1, -1), list2)\n  }\n}\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  k <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i - 1]]) {\n      list2[[k]] <- c(list2[[k]], list1[[i]])\n    } else {\n      k <- k + 1\n      list2[[k]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else {\n      if (list1[i] == list1[i-1]) {\n        list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n      } else {\n        list2[[length(list2)+1]] <- list1[i]\n      }\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  \n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  \n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  } else {\n    list2 <- c(list2, list(list1[1]))\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for(i in 2:length(list1)) {\n    if(list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while (i <= length(list1)) {\n    if (i == length(list1) || list1[i] != list1[i+1]) {\n      list2[[j]] <- list1[seq(i-length(list2[[j]])+1, i)]\n      j <- j + 1\n    }\n    i <- i + 1\n  }\n  return(list2)\n}\n",
    "\n  list1 <- as.character(list1)\n  list2 <- list()\n  for (i in 1:length(list1)) {\n    if (i == 1) {\n      list2[[i]] <- list1[i]\n    } else if (list1[i] == list1[i-1]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[i])\n    } else {\n      list2[[length(list2)+1]] <- list1[i]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    while(i <= length(list1)) {\n        j <- i\n        while(j <= length(list1) && list1[i] == list1[j]) {\n            j <- j + 1\n        }\n        list2[[i]] <- list1[i:(j - 1)]\n        i <- j\n    }\n    return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  \n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n  }\n  \n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n  } else {\n    list2 <- c(list2, list(list1[1]))\n  }\n  \n  pack_consecutive_duplicates_helper(list1[-1], list2)\n}\n\npack_consecutive_duplicates(c('a', 'a', 'a', 'a', 'b', 'c', 'c', 'a', 'a', 'd', 'e', 'e', 'e', 'e'))\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  list2 <- list()\n  i <- 1\n  j <- 1\n  while(i <= length(list1)) {\n    list2[[j]] <- list1[[i]]\n    while(i <= length(list1) && list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n      i <- i + 1\n    }\n    j <- j + 1\n  }\n  list2\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list1[[i-1]]) {\n            list2[[length(list2)]] <- c(list2[[length(list2)]], list1[[i]])\n        } else {\n            list2[[length(list2)+1]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n    list2 <- list()\n    list2[[1]] <- list1[[1]]\n    j <- 1\n    for (i in 2:length(list1)) {\n        if (list1[[i]] == list2[[j]][[1]]) {\n            list2[[j]] <- c(list2[[j]], list1[[i]])\n        } else {\n            j <- j + 1\n            list2[[j]] <- list1[[i]]\n        }\n    }\n    return(list2)\n}\n",
    "\n    list2 <- list()\n    i <- 1\n    j <- 1\n    while (i <= length(list1)) {\n        if (i == length(list1)) {\n            list2[[j]] <- list1[i]\n            i <- i + 1\n        } else if (list1[i] == list1[i + 1]) {\n            list2[[j]] <- list1[i]\n            i <- i + 1\n        } else {\n            list2[[j]] <- list1[i]\n            i <- i + 1\n            j <- j + 1\n        }\n    }\n    return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] != list1[[i-1]]) {\n      j <- j+1\n      list2[[j]] <- list1[[i]]\n    } else {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[[i]])\n    } else {\n      list2[[length(list2)+1]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  else {\n    list2 <- c(list2, list(pack_consecutive_duplicates_helper2(list1)))\n    pack_consecutive_duplicates_helper(list1[-which(list1 == list1[1])], list2)\n  }\n}\n\npack_consecutive_duplicates_helper2 <- function(list1) {\n  if (length(list1) == 0) {\n    return(list())\n  }\n  else if (length(list1) == 1) {\n    return(list1)\n  }\n  else if (list1[1] == list1[2]) {\n    return(c(list1[1], pack_consecutive_duplicates_helper2(list1[-1])))\n  }\n  else {\n    return(list1[1])\n  }\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[length(list2)]] <- c(list2[[length(list2)]], list1[[i]])\n    } else {\n      list2[[length(list2)+1]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n\nlist1 <- list(1, 1, 1, 2, 3, 3, 4, 5, 5, 5)\npack_consecutive_duplicates(list1)\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list2[[j]][[1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  return(list2)\n}\n",
    "\n  list2 <- list()\n  list2[[1]] <- list1[[1]]\n  j <- 1\n  for (i in 2:length(list1)) {\n    if (list1[[i]] == list1[[i-1]]) {\n      list2[[j]] <- c(list2[[j]], list1[[i]])\n    } else {\n      j <- j + 1\n      list2[[j]] <- list1[[i]]\n    }\n  }\n  list2\n}\n",
    "\n  pack_consecutive_duplicates_helper(list1, list())\n}\n\npack_consecutive_duplicates_helper <- function(list1, list2) {\n  if (length(list1) == 0) {\n    return(list2)\n  }\n  if (length(list2) == 0) {\n    list2 <- list(list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  if (list1[1] == list2[[length(list2)]][1]) {\n    list2[[length(list2)]] <- c(list2[[length(list2)]], list1[1])\n    return(pack_consecutive_duplicates_helper(list1[-1], list2))\n  }\n  list2 <- c(list2, list(list1[1]))\n  return(pack_consecutive_duplicates_helper(list1[-1], list2))\n}\n"
  ]
}