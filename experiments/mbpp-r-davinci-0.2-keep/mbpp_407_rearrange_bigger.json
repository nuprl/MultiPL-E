{
  "name": "mbpp_407_rearrange_bigger",
  "language": "r",
  "prompt": "# Write a function to create the next bigger number by rearranging the digits of a given number.\nrearrange_bigger <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_407_rearrange_bigger.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- rearrange_bigger\n    if(!identical(candidate(12), 21)){quit('no', 1)}\n    if(!identical(candidate(10), FALSE)){quit('no', 1)}\n    if(!identical(candidate(102), 120)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  n <- as.character(n)\n  n_len <- nchar(n)\n  n_vec <- strsplit(n, \"\")[[1]]\n  for (i in (n_len - 1):1) {\n    if (n_vec[i] > n_vec[i - 1]) {\n      n_vec[i] <- n_vec[i - 1]\n      n_vec[i - 1] <- n_vec[i]\n      break\n    }\n  }\n  n_vec <- sort(n_vec[-(1:i)])\n  n_vec <- c(n_vec[1:i], n_vec[-(1:i)])\n  n_vec <- paste(n_vec, collapse = \"\")\n  n_vec <- as.numeric(n_vec)\n  return(n_vec)\n}\n",
    "\n  # Convert the number to a character vector\n  n_chars <- as.character(n)\n  # Get the length of the number\n  n_len <- length(n_chars)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- 1\n  while (i < n_len && n_chars[i] >= n_chars[i + 1]) {\n    i <- i + 1\n  }\n  # If no such digit exists, return -1\n  if (i == n_len) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit found above that is larger than the digit found above\n  j <- i + 1\n  while (j < n_len && n_chars[j] > n_chars[i]) {\n    j <- j + 1\n  }\n  j <- j - 1\n  # Swap the digits found above\n  n_chars[i] <- n_chars[j]\n  n_chars[j] <- n_chars[i]\n  # Sort the digits to the right of the digit found above in ascending order\n  n_chars[(i + 1):n_len] <- sort(n_chars[(i + 1):n_len])\n  # Convert the character vector to a number and return it\n  return(as.numeric(n_chars))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first decreasing digit\n  i <- which(n[-1] > n[-length(n)])[1]\n  # Find the smallest digit greater than n[i]\n  j <- which.min(n[i:length(n)])\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits after n[i]\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Convert to numeric\n  as.numeric(n)\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of the digit found above that is larger than it\n  j <- which.min(n[i:length(n)][n[i:length(n)] > n[i]]) + i - 1\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of the digit found above in ascending order\n  n[(i + 1):length(n)] <- sort(n[(i + 1):length(n)])\n  # Convert the character vector back to a number\n  as.numeric(n)\n}\n",
    "\n  # Get the digits of the number\n  digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(digits[-length(digits)] < digits[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than it\n  smallest_larger <- which.min(digits[first_smaller + 1:length(digits)][digits[first_smaller + 1:length(digits)] > digits[first_smaller]]) + first_smaller\n  # Swap the first smaller digit and the smallest larger digit\n  digits[c(first_smaller, smallest_larger)] <- digits[c(smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  digits[(first_smaller + 1):length(digits)] <- sort(digits[(first_smaller + 1):length(digits)])\n  # Return the rearranged number\n  return(as.integer(paste(digits, collapse = \"\")))\n}\n",
    "\n  # Convert to character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Return the number\n  as.numeric(n)\n}\n",
    "\n  # Split the number into a vector of digits\n  digits <- strsplit(as.character(n), \"\")[[1]]\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(digits[-length(digits)] < digits[-1])[1]\n  # If no such digit exists, the number is already at its maximum\n  if (is.na(i)) return(n)\n  # Find the smallest digit to the right of the ith digit that is larger than the ith digit\n  j <- which.min(digits[-(1:i)][digits[-(1:i)] > digits[i]]) + i\n  # Swap the ith and jth digits\n  digits[c(i, j)] <- digits[c(j, i)]\n  # Sort the digits to the right of the ith digit in ascending order\n  digits[-(1:i)] <- sort(digits[-(1:i)])\n  # Return the number as a number, not a string\n  as.numeric(paste(digits, collapse = \"\"))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Get the length of the number\n  n_len <- length(n_char)\n  # Get the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[1:(n_len-1)] < n_char[2:n_len])[1]\n  # If there is no such digit, return -1\n  if (is.na(i)) {\n    return(-1)\n  }\n  # Get the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n_char[(i+1):n_len][n_char[(i+1):n_len] > n_char[i]]) + i\n  # Swap the digits at index i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[(i+1):n_len] <- sort(n_char[(i+1):n_len])\n  # Return the rearranged number\n  return(as.numeric(n_char))\n}\n",
    "\n  # convert to character vector\n  n_char <- as.character(n)\n  # find the index of the first decreasing digit\n  i <- which(n_char[-1] > n_char[-length(n_char)])[1]\n  # find the index of the smallest digit larger than the digit at i\n  j <- which.min(n_char[i+1:length(n_char)] > n_char[i]) + i\n  # swap the digits at i and j\n  n_char[c(i,j)] <- n_char[c(j,i)]\n  # return the new number\n  as.numeric(paste(n_char[1:i], sort(n_char[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # Sort the digits to the right of i in ascending order\n  n[-(1:i)] <- sort(n[-(1:i)])\n  # Convert the character vector back to a number\n  as.numeric(n)\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the index of the smallest digit that is larger than the digit at index i\n  j <- which.min(n_char[i:length(n_char)]) + i - 1\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[(i + 1):length(n_char)] <- sort(n_char[(i + 1):length(n_char)])\n  # Convert to numeric\n  as.numeric(n_char)\n}\n",
    "\n  n <- as.character(n)\n  n <- strsplit(n, \"\")[[1]]\n  n <- as.numeric(n)\n  n <- sort(n, decreasing = TRUE)\n  n <- as.numeric(paste(n, collapse = \"\"))\n  n\n}\n",
    "\n  # Convert to a character vector\n  n <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return NA\n  if (is.na(i)) return(NA)\n  # Find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap n[i] and n[j]\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the new number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # If no such digit exists, return -1\n  if (is.na(i)) return(-1)\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # Swap the digits at indices i and j\n  n[c(i, j)] <- n[c(j, i)]\n  # Return the number formed by the digits to the right of index i in ascending order followed by the digit at index i\n  return(as.numeric(paste0(sort(n[-(1:i)]), n[i])))\n}\n",
    "\n  # convert to character vector\n  n <- as.character(n)\n  # find the first digit that is smaller than the digit to its right\n  i <- which(n[-length(n)] < n[-1])[1]\n  # find the smallest digit to the right of i that is larger than n[i]\n  j <- which.min(n[-(1:i)][n[-(1:i)] > n[i]]) + i\n  # swap the digits\n  n[c(i, j)] <- n[c(j, i)]\n  # return the rearranged number\n  as.numeric(paste(n[1:i], sort(n[-(1:i)]), sep = \"\"))\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the digit found in the previous step that is larger than the digit found in the previous step\n  j <- which.min(n_char[i:length(n_char)]) + i - 1\n  # Swap the digits found in the previous two steps\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of the digit found in the first step in ascending order\n  n_char[(i + 1):length(n_char)] <- sort(n_char[(i + 1):length(n_char)])\n  # Return the rearranged number\n  return(as.integer(n_char))\n}\n",
    "\n  # Convert the number to a character vector\n  n_char <- as.character(n)\n  # Find the index of the first digit that is smaller than the digit to its right\n  i <- which(n_char[-length(n_char)] < n_char[-1])\n  # If no such digit exists, return -1\n  if (length(i) == 0) {\n    return(-1)\n  }\n  # Find the smallest digit to the right of the digit at index i that is larger than the digit at index i\n  j <- which.min(n_char[-(1:i)][n_char[-(1:i)] > n_char[i]]) + i\n  # Swap the digits at indices i and j\n  n_char[c(i, j)] <- n_char[c(j, i)]\n  # Sort the digits to the right of index i in ascending order\n  n_char[-(1:i)] <- sort(n_char[-(1:i)])\n  # Convert the character vector back to a number and return it\n  return(as.numeric(n_char))\n}\n",
    "\n  # Convert to character vector\n  n_char <- as.character(n)\n  # Find the first digit that is smaller than the digit to its right\n  first_smaller <- which(n_char[-length(n_char)] < n_char[-1])[1]\n  # Find the smallest digit to the right of the first smaller digit that is larger than the first smaller digit\n  smallest_larger <- which.min(n_char[first_smaller+1:length(n_char)][n_char[first_smaller+1:length(n_char)] > n_char[first_smaller]])\n  # Swap the first smaller digit with the smallest larger digit\n  n_char[c(first_smaller, first_smaller + smallest_larger)] <- n_char[c(first_smaller + smallest_larger, first_smaller)]\n  # Sort the digits to the right of the first smaller digit\n  n_char[(first_smaller+1):length(n_char)] <- sort(n_char[(first_smaller+1):length(n_char)])\n  # Return the rearranged number\n  as.numeric(n_char)\n}\n",
    "\n  n_str <- as.character(n)\n  n_str <- strsplit(n_str, \"\")[[1]]\n  n_str <- n_str[order(n_str)]\n  n_str <- paste(n_str, collapse = \"\")\n  n_str <- as.integer(n_str)\n  n_str\n}\n",
    "\n  n_digits <- as.integer(strsplit(as.character(n), \"\")[[1]])\n  n_digits <- rev(n_digits)\n  for (i in seq_along(n_digits)) {\n    if (i == length(n_digits)) {\n      return(n)\n    }\n    if (n_digits[i] > n_digits[i+1]) {\n      n_digits[i] <- n_digits[i+1]\n      n_digits[i+1] <- n_digits[i]\n      n_digits <- rev(n_digits)\n      return(as.integer(paste(n_digits, collapse = \"\")))\n    }\n  }\n}\n\nrearrange_bigger(123)\nrearrange_bigger(1234)\nrearrange_bigger(1243)\nrearrange_bigger(1324)\nrearrange_bigger(1342)\nrearrange_bigger(1423)\nrearrange_bigger(1432)\n"
  ]
}