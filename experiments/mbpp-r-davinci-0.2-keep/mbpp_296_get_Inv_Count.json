{
  "name": "mbpp_296_get_Inv_Count",
  "language": "r",
  "prompt": "# Write a python function to count inversions in an array.\nget_Inv_Count <- function(arr) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_296_get_Inv_Count.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- get_Inv_Count\n    if(!identical(candidate(c(1, 20, 6, 4, 5)), 5)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 1)), 1)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 5, 6, 1)), 3)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  n <- length(arr)\n  inv_count <- 0\n  for (i in 1:(n-1)) {\n    for (j in (i+1):n) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr) - 1)) {\n    for (j in (i + 1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for(i in 1:(length(arr)-1)) {\n    for(j in (i+1):length(arr)) {\n      if(arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n\nget_Inv_Count(c(1, 20, 6, 4, 5))\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for(i in 1:(length(arr)-1)) {\n    for(j in (i+1):length(arr)) {\n      if(arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    inv_count\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr) - 1)) {\n    for (j in (i + 1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n\nget_Inv_Count(c(2, 4, 1, 3, 5))\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr) - 1)) {\n    for (j in (i + 1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  n <- length(arr)\n  inv_count <- 0\n  for (i in 1:(n-1)) {\n    for (j in (i+1):n) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  inv_count\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for(i in 1:(length(arr)-1)) {\n    for(j in (i+1):length(arr)) {\n      if(arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  get_Inv_Count <- function(arr, n) {\n    inv_count <- 0\n    for (i in 1:(n - 1)) {\n      for (j in (i + 1):n) {\n        if (arr[i] > arr[j]) {\n          inv_count <- inv_count + 1\n        }\n      }\n    }\n    inv_count\n  }\n  get_Inv_Count(arr, length(arr))\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    inv_count\n}\n",
    "\n  count <- 0\n  for (i in 1:(length(arr) - 1)) {\n    for (j in (i + 1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n\nget_Inv_Count(c(2, 4, 1, 3, 5))\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for(i in 1:(length(arr)-1)) {\n    for(j in (i+1):length(arr)) {\n      if(arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for(i in 1:(length(arr)-1)) {\n    for(j in (i+1):length(arr)) {\n      if(arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    inv_count\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  n <- length(arr)\n  count <- 0\n  for (i in 1:(n-1)) {\n    for (j in (i+1):n) {\n      if (arr[i] > arr[j]) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    # Write your code here\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    inv_count\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n\nget_Inv_Count(c(1, 20, 6, 4, 5))\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  n <- length(arr)\n  count <- 0\n  for (i in 1:(n-1)) {\n    for (j in (i+1):n) {\n      if (arr[i] > arr[j]) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  if (length(arr) == 1) {\n    return(0)\n  }\n  mid <- floor(length(arr)/2)\n  left <- arr[1:mid]\n  right <- arr[(mid+1):length(arr)]\n  inv_count <- get_Inv_Count(left) + get_Inv_Count(right)\n  i <- 1\n  j <- 1\n  k <- 1\n  while (i <= length(left) && j <= length(right)) {\n    if (left[i] <= right[j]) {\n      arr[k] <- left[i]\n      i <- i + 1\n    } else {\n      arr[k] <- right[j]\n      inv_count <- inv_count + (length(left) - i + 1)\n      j <- j + 1\n    }\n    k <- k + 1\n  }\n  while (i <= length(left)) {\n    arr[k] <- left[i]\n    i <- i + 1\n    k <- k + 1\n  }\n  while (j <= length(right)) {\n    arr[k] <- right[j]\n    j <- j + 1\n    k <- k + 1\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  # Write your code here\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    inv_count\n}\n",
    "\n  get_Inv_Count <- function(arr, n) {\n    if (n == 1) {\n      return(0)\n    }\n    mid <- floor(n / 2)\n    left <- arr[1:mid]\n    right <- arr[(mid + 1):n]\n    inv_count <- get_Inv_Count(left, mid) + get_Inv_Count(right, n - mid)\n    i <- 1\n    j <- 1\n    k <- 1\n    while (i <= mid && j <= n - mid) {\n      if (left[i] <= right[j]) {\n        arr[k] <- left[i]\n        i <- i + 1\n      } else {\n        arr[k] <- right[j]\n        j <- j + 1\n        inv_count <- inv_count + (mid - i + 1)\n      }\n      k <- k + 1\n    }\n    while (i <= mid) {\n      arr[k] <- left[i]\n      i <- i + 1\n      k <- k + 1\n    }\n    while (j <= n - mid) {\n      arr[k] <- right[j]\n      j <- j + 1\n      k <- k + 1\n    }\n    return(inv_count)\n  }\n  return(get_Inv_Count(arr, length(arr)))\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  n <- length(arr)\n  count <- 0\n  for (i in 1:(n-1)) {\n    for (j in (i+1):n) {\n      if (arr[i] > arr[j]) {\n        count <- count + 1\n      }\n    }\n  }\n  return(count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr) - 1)) {\n    for (j in (i + 1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr) - 1)) {\n        for (j in (i + 1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n\nget_Inv_Count(c(2, 4, 1, 3, 5))\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n\nget_Inv_Count(c(2, 4, 1, 3, 5))\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for(i in 1:(length(arr)-1)) {\n        for(j in (i+1):length(arr)) {\n            if(arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inv_count <- 0\n  for(i in 1:(length(arr)-1)) {\n    for(j in (i+1):length(arr)) {\n      if(arr[i] > arr[j]) {\n        inv_count <- inv_count + 1\n      }\n    }\n  }\n  return(inv_count)\n}\n",
    "\n  inversion_count <- 0\n  for (i in 1:(length(arr)-1)) {\n    for (j in (i+1):length(arr)) {\n      if (arr[i] > arr[j]) {\n        inversion_count <- inversion_count + 1\n      }\n    }\n  }\n  return(inversion_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n",
    "\n    inv_count <- 0\n    for (i in 1:(length(arr)-1)) {\n        for (j in (i+1):length(arr)) {\n            if (arr[i] > arr[j]) {\n                inv_count <- inv_count + 1\n            }\n        }\n    }\n    return(inv_count)\n}\n"
  ]
}