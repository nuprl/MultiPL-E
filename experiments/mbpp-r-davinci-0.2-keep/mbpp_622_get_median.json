{
  "name": "mbpp_622_get_median",
  "language": "r",
  "prompt": "# Write a function to find the median of two sorted lists of same size.\nget_median <- function(arr1, arr2, n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- get_median\n    if(!identical(candidate(c(1, 12, 15, 26, 38), c(2, 13, 17, 30, 45), 5), 16.0)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, 8, 9), c(7, 13, 19, 28), 4), 8.5)){quit('no', 1)}\n    if(!identical(candidate(c(3, 6, 14, 23, 36, 42), c(2, 18, 27, 39, 49, 55), 6), 25.0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    }\n    return(get_median(arr1[(n/2):n], arr2[1:(n/2+1)], n/2+1))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n  }\n  return(get_median(arr1[1:(n/2+1)], arr2[(n/2):n], n/2+1))\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):(n/2+1)], arr2[1:(n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):(n/2+1)], n/2))\n    }\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1])/2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2]))/2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    }\n    return(get_median(arr1[(n/2):(n/2+1)], arr2[1:(n/2)], n/2+1))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n  }\n  return(get_median(arr1[1:(n/2)], arr2[(n/2):(n/2+1)], n/2+1))\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- 0\n  m2 <- 0\n  count <- 0\n  \n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    \n    count <- count + 1\n  }\n  \n  return ((m1 + m2) / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  } else {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n  }\n}\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return (m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n        } else {\n            return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n        }\n    }\n    if (n % 2 == 0) {\n        return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n        return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n    }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\nprint(get_median(arr1, arr2, n))\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2 + 1) : n], arr2[1 : (n / 2)], n / 2)\n        }\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2 + 1) : n], n / 2)\n    }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2)], floor(n / 2)))\n    } else {\n      return(get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2) + 1], floor(n / 2) + 1))\n    }\n  }\n  \n  if (n % 2 == 0) {\n    return(get_median(arr1[1:floor(n / 2)], arr2[ceiling(n / 2):n], floor(n / 2)))\n  } else {\n    return(get_median(arr1[1:floor(n / 2) + 1], arr2[ceiling(n / 2):n], floor(n / 2) + 1))\n  }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- 0\n  m2 <- 0\n  count <- 0\n  \n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    \n    count <- count + 1\n  }\n  \n  return((m1 + m2) / 2)\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  # return -1 for invalid input\n  if (n <= 0) return(-1)\n  if (n == 1) return((arr1[1] + arr2[1]) / 2)\n  if (n == 2) return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  \n  # get median of first array\n  m1 <- median(arr1)\n  \n  # get median of second array\n  m2 <- median(arr2)\n  \n  # if medians are equal, return either one\n  if (m1 == m2) return(m1)\n  \n  # if m1 < m2, then median must exist in arr1[m1....] and arr2[....m2]\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1))\n    }\n  }\n  \n  # if m1 > m2, then median must exist in arr1[....m1] and arr2[m2...]\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2))\n  } else {\n    return(get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1))\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2):n], arr2[1:(n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2 + 1):n], arr2[1:(n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1:(n / 2)], arr2[(n / 2):n], n / 2)\n    } else {\n      return get_median(arr1[1:(n / 2)], arr2[(n / 2 + 1):n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    }\n    return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  }\n  return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    } else {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1))\n    }\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n  } else {\n    return(get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2+1)], n/2+1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2+1)], arr2[(n/2):n], n/2+1))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  \n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    \n    count <- count + 1\n  }\n  \n  return ((m1 + m2) / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  \n  while(count <= n) {\n    count <- count + 1\n    \n    if(i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if(j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if(arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  \n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    }\n    return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  }\n  return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n/2 + 1))\n    }\n  }\n  \n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n/2 + 1))\n    }\n  }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n    median <- 0\n    i <- 0\n    j <- 0\n    count <- 0\n    m1 <- 0\n    m2 <- 0\n    while (count <= n) {\n        if (i == n) {\n            m1 <- m2\n            m2 <- arr2[0]\n            break\n        }\n        if (j == n) {\n            m1 <- m2\n            m2 <- arr1[0]\n            break\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 <- m2\n            m2 <- arr1[i]\n            i <- i + 1\n        } else {\n            m1 <- m2\n            m2 <- arr2[j]\n            j <- j + 1\n        }\n        count <- count + 1\n    }\n    median <- (m1 + m2) / 2\n    return(median)\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  \n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    \n    count <- count + 1\n  }\n  \n  return((m1 + m2) / 2)\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return (c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return (c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    } else {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1))\n    }\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n  } else {\n    return(get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1))\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  median <- (m1 + m2) / 2\n  return(median)\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n    }\n  }\n  \n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n  }\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n        } else {\n            return(get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n        } else {\n            return(get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2))\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n    if (n == 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n        }\n        return(get_median(arr1[((n+1)/2):n], arr2[1:((n-1)/2)], (n-1)/2))\n    }\n    if (n % 2 == 0) {\n        return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    }\n    return(get_median(arr1[1:((n-1)/2)], arr2[((n+1)/2):n], (n-1)/2))\n}\n",
    "\n  if (n <= 0) {\n    return -1\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2)\n    } else {\n      get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1)\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return (c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return (c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return (get_median(arr1[((n+1)/2):n], arr2[1:((n+1)/2)], (n+1)/2))\n    }\n  }\n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return (get_median(arr1[1:((n+1)/2)], arr2[((n+1)/2):n], (n+1)/2))\n    }\n  }\n}\n",
    "\n    if (n == 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2)], floor(n / 2))\n        }\n        return get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2) + 1], floor(n / 2) + 1)\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1:floor(n / 2)], arr2[ceiling(n / 2):n], floor(n / 2))\n    }\n    return get_median(arr1[1:floor(n / 2) + 1], arr2[ceiling(n / 2):n], floor(n / 2) + 1)\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  median <- (m1 + m2) / 2\n  return(median)\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  median <- (m1 + m2) / 2\n  return(median)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    } else if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- 0\n  m2 <- 0\n  count <- 0\n  \n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    \n    count <- count + 1\n  }\n  \n  return ((m1 + m2) / 2)\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  \n  while(count <= n) {\n    if(i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    else if(j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if(arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    }\n    else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  \n  median <- (m1 + m2)/2\n  return(median)\n}\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return(max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2) : n], arr2[1 : (n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2) + 1 : n], arr2[1 : (n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1 : (n/2)], arr2[(n/2) : n], n/2))\n    } else {\n      return(get_median(arr1[1 : (n/2)], arr2[(n/2) + 1 : n], n/2))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  \n  while (count <= n) {\n    count <- count + 1\n    \n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  \n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    }\n    return(get_median(arr1[ceiling(n/2):n], arr2[1:ceiling(n/2)], floor(n/2)))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n  }\n  return(get_median(arr1[1:ceiling(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    } else {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n    } else {\n      return(get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1))\n    }\n  }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    if (m1 == m2) return m1\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n        }\n    }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[((n / 2) + 1) : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[((n / 2) + 1) : n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2+1):n], arr2[1:(n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2+1):n], n/2))\n    }\n  }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nget_median(arr1, arr2, 4)\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n    if (n <= 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    \n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    \n    if (m1 == m2) {\n        return m1\n    }\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n/2) : n], arr2[1 : (n/2)], n/2)\n        } else {\n            return get_median(arr1[((n+1)/2) : n], arr2[1 : ((n+1)/2)], (n+1)/2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n/2)], arr2[(n/2) : n], n/2)\n        } else {\n            return get_median(arr1[1 : ((n+1)/2)], arr2[((n+1)/2) : n], (n+1)/2)\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return (c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return (c((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2,\n              (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (c(m1, m2))\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return (get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return (get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  median <- (m1 + m2) / 2\n  return(median)\n}\n",
    "\n  if (n <= 0) {\n    return -1\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\nprint(get_median(arr1, arr2, n))\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) {\n    return m1\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n    }\n  }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):(n/2 + 1)], arr2[1:(n/2)], n/2 + 1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):(n/2 + 1)], n/2 + 1))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- 0\n  m2 <- 0\n  count <- 0\n  while(count <= n) {\n    if(i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if(j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if(arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return((m1 + m2)/2)\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n        } else {\n            return get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n        }\n    }\n    \n    if (m1 > m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n        } else {\n            return get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n        }\n    }\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return(arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return(max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            get_median(arr1[((n / 2) + 1) : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            get_median(arr1[1 : (n / 2)], arr2[((n / 2) + 1) : n], n / 2)\n        }\n    }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]) / 2)\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2)], floor(n / 2)))\n        } else {\n            return(get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2) + 1], floor(n / 2) + 1))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1:floor(n / 2)], arr2[ceiling(n / 2):n], floor(n / 2)))\n        } else {\n            return(get_median(arr1[1:floor(n / 2) + 1], arr2[ceiling(n / 2):n], floor(n / 2) + 1))\n        }\n    }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n - 1) / 2)], (n - 1) / 2)\n    }\n  }\n  \n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : ((n - 1) / 2)], arr2[((n + 1) / 2) : n], (n - 1) / 2)\n    }\n  }\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  \n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return(max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2):n], arr2[1:(n / 2)], n / 2))\n    }\n    return(get_median(arr1[(n / 2 + 1):n], arr2[1:(n / 2)], n / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n / 2)], arr2[(n / 2):n], n / 2))\n  }\n  return(get_median(arr1[1:(n / 2)], arr2[(n / 2 + 1):n], n / 2))\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) return m1\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[((n / 2) + 1) : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : (n / 2)], arr2[((n / 2) + 1) : n], n / 2)\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    }\n    return(get_median(arr1[((n+1)/2):n], arr2[1:((n-1)/2)], (n+1)/2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n  }\n  return(get_median(arr1[1:((n-1)/2)], arr2[((n+1)/2):n], (n+1)/2))\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n    i <- 0\n    j <- 0\n    m1 <- -1\n    m2 <- -1\n    count <- 0\n    while (count <= n) {\n        count <- count + 1\n        if (i == n) {\n            m1 <- m2\n            m2 <- arr2[0]\n            break\n        }\n        if (j == n) {\n            m1 <- m2\n            m2 <- arr1[0]\n            break\n        }\n        if (arr1[i] < arr2[j]) {\n            m1 <- m2\n            m2 <- arr1[i]\n            i <- i + 1\n        } else {\n            m1 <- m2\n            m2 <- arr2[j]\n            j <- j + 1\n        }\n    }\n    return ((m1 + m2) / 2)\n}\n",
    "\n    # return -1 for invalid input\n    if (n <= 0) return(-1)\n    if (n == 1) return((arr1[1] + arr2[1]) / 2)\n    if (n == 2) return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n    \n    # get median of first array\n    m1 <- median(arr1, n)\n    \n    # get median of second array\n    m2 <- median(arr2, n)\n    \n    # if medians are equal, return either one\n    if (m1 == m2) return(m1)\n    \n    # if m1 < m2, then median must exist in ar1[m1....] and ar2[....m2]\n    if (m1 < m2) {\n        if (n % 2 == 0) return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n - n/2))\n        else return(get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n - n/2))\n    }\n    \n    # if m1 > m2, then median must exist in ar1[....m1] and ar2[m2...]\n    if (n % 2 == 0) return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n - n/2))\n    else return(get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n - n/2))\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2+1):n], arr2[1:(n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2+1):n], n/2))\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1))\n    }\n  }\n  \n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1))\n    }\n  }\n}\n",
    "\n  if (n <= 0) {\n    return -1\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    }\n    return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n  }\n  if (n % 2 == 0) {\n    return get_median(arr2[(n / 2) : n], arr1[1 : (n / 2)], n / 2)\n  }\n  return get_median(arr2[((n + 1) / 2) : n], arr1[1 : ((n + 1) / 2)], (n + 1) / 2)\n}\n",
    "\n    if (n <= 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        }\n        return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    }\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- 0\n  m2 <- 0\n  count <- 0\n  \n  while(count <= n) {\n    if(i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    \n    if(j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    \n    if(arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    \n    count <- count + 1\n  }\n  \n  return((m1 + m2) / 2)\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\ncat(\"Median of two sorted arrays is\", get_median(arr1, arr2, n))\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    } else {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2) + 1))\n    }\n  }\n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n    } else {\n      return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2) + 1))\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return m1\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      return get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n/2 + 1)\n    }\n  }\n  \n  if (n % 2 == 0) {\n    return get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n  } else {\n    return get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n/2 + 1)\n  }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while count <= n {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    }\n    return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  }\n  return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n    if (n == 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2):n], arr2[1:(n / 2)], n / 2)\n        }\n        return get_median(arr1[((n + 1) / 2):n], arr2[1:(n / 2)], n - (n / 2))\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1:(n / 2)], arr2[(n / 2):n], n / 2)\n    }\n    return get_median(arr1[1:(n / 2)], arr2[((n + 1) / 2):n], n - (n / 2))\n}\n",
    "\n  # return -1 for invalid input\n  if (n <= 0) return(-1)\n  if (n == 1) return((arr1[1] + arr2[1]) / 2)\n  if (n == 2) return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  \n  # get the median of the first array\n  m1 <- median(arr1, n)\n  \n  # get the median of the second array\n  m2 <- median(arr2, n)\n  \n  # if medians are equal then return either m1 or m2\n  if (m1 == m2) return(m1)\n  \n  # if m1 < m2 then median must exist in arr1[m1....] and arr2[....m2]\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2) + 1:n], arr2[1:(n/2)], n - n/2))\n    } else {\n      return(get_median(arr1[(n/2) + 2:n], arr2[1:(n/2) + 1], n - n/2 - 1))\n    }\n  }\n  \n  # if m1 > m2 then median must exist in arr1[....m1] and arr2[m2...]\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n/2)], arr2[(n/2) + 1:n], n - n/2))\n  } else {\n    return(get_median(arr1[1:(n/2) + 1], arr2[(n/2) + 2:n], n - n/2 - 1))\n  }\n}\n",
    "\n    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    \n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    \n    if (m1 == m2) {\n        return m1\n    }\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n        }\n    }\n    \n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n    }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n <= 0) {\n    return -1\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) {\n    return m1\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) - 1:n], arr2[1:(n / 2) + 1], n - n / 2 + 1)\n    } else {\n      return get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n - n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) - 1:n], n - n / 2 + 1)\n    } else {\n      return get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n - n / 2)\n    }\n  }\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n        }\n    }\n}\n",
    "\n    if (n <= 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        }\n        return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    }\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  median <- (m1 + m2) / 2\n  return(median)\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    }\n    return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n  }\n  return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1))\n}\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return(arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return(max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2 + 1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2 + 1))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  for (count in 1:n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return ((m1 + m2) / 2)\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nprint(get_median(arr1, arr2, n))\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      return get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      return get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1)\n    }\n  }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 0)\n    return -1\n  if (n == 1)\n    return (arr1[1] + arr2[1]) / 2\n  if (n == 2)\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2)\n    return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0)\n      return get_median(arr1[(n / 2) - 1:n], arr2[1:(n / 2) + 1], n - (n / 2) + 1)\n    else\n      return get_median(arr1[(n / 2):n], arr2[1:(n / 2) + 1], n - (n / 2))\n  }\n  \n  if (n % 2 == 0)\n    return get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) - 1:n], n - (n / 2) + 1)\n  else\n    return get_median(arr1[1:(n / 2) + 1], arr2[(n / 2):n], n - (n / 2))\n}\n",
    "\n  if (n == 1) {\n    return(mean(c(arr1[1], arr2[1])))\n  }\n  if (n == 2) {\n    return(mean(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2]))))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  }\n  \n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  } else {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n  }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return (m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n        } else {\n            return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n        }\n    }\n    if (n % 2 == 0) {\n        return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n        return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n    }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\nprint(get_median(arr1, arr2, n))\n",
    "\n  # If the size of the array is 1, then return the average of the two elements.\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  \n  # If the size of the array is 2, then return the average of the two middle elements.\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  \n  # Get the median of the first array.\n  m1 <- median(arr1)\n  \n  # Get the median of the second array.\n  m2 <- median(arr2)\n  \n  # If the medians are equal, then return the median.\n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  # If the median of the first array is greater than the median of the second array, then recur for the first half of the first array and the second half of the second array.\n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n / 2)], arr2[(n / 2):n], n / 2))\n    } else {\n      return(get_median(arr1[1:(n / 2)], arr2[(n / 2 + 1):n], n / 2 + 1))\n    }\n  }\n  \n  # If the median of the first array is less than the median of the second array, then recur for the second half of the first array and the first half of the second array.\n  if (n % 2 == 0) {\n    return(get_median(arr1[(n / 2):n], arr2[1:(n / 2)], n / 2))\n  } else {\n    return(get_median(arr1[(n / 2 + 1):n], arr2[1:(n / 2)], n / 2 + 1))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return(max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n    if (n == 0) {\n        return 0\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n        }\n    }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\ncat(\"Median is \", get_median(arr1, arr2, n))\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n      return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n    }\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    } else {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n    } else {\n      return(get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1))\n    }\n  }\n}\n",
    "\n  if (n <= 0) {\n    return -1\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  } else {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n  }\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n        } else {\n            return(get_median(arr1[(n/2+1):n], arr2[1:(n/2)], n/2))\n        }\n    }\n    if (m1 > m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n        } else {\n            return(get_median(arr1[1:(n/2)], arr2[(n/2+1):n], n/2))\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):(n/2+1)], arr2[1:(n/2)], n/2+1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):(n/2+1)], n/2+1))\n    }\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n    }\n  }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1])/2)\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2]))/2)\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n        }\n        return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2) + 1))\n    }\n    if (n % 2 == 0) {\n        return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n    }\n    return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2) + 1))\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\nprint(get_median(arr1, arr2, n))\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n    }\n  }\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    }\n    return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  }\n  return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2))\n    } else {\n      get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2))\n    } else {\n      get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n    }\n  }\n}\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        }\n        return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    }\n    return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n}\n",
    "\n  # return -1 for invalid input\n  if (n <= 0) return(-1)\n  if (n == 1) return((arr1[1] + arr2[1]) / 2)\n  if (n == 2) return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  \n  # get the median of the first array\n  m1 <- median(arr1, n)\n  \n  # get the median of the second array\n  m2 <- median(arr2, n)\n  \n  # if medians are equal then return either m1 or m2\n  if (m1 == m2) return(m1)\n  \n  # if m1 < m2 then median must exist in arr1[m1....] and arr2[....m2]\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1))\n    }\n  }\n  \n  # if m1 > m2 then median must exist in arr1[....m1] and arr2[m2...]\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2))\n  } else {\n    return(get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1))\n  }\n}\n",
    "\n  median <- 0\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  median <- (m1 + m2) / 2\n  return(median)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\nprint(get_median(arr1, arr2, n))\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2))\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c((arr1[1] + arr2[1]) / 2, (arr1[2] + arr2[2]) / 2))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2)], floor(n / 2)))\n    } else {\n      return(get_median(arr1[ceiling(n / 2):n], arr2[1:floor(n / 2) + 1], floor(n / 2) + 1))\n    }\n  }\n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:floor(n / 2)], arr2[ceiling(n / 2):n], floor(n / 2)))\n    } else {\n      return(get_median(arr1[1:floor(n / 2) + 1], arr2[ceiling(n / 2):n], floor(n / 2) + 1))\n    }\n  }\n}\n",
    "\n    if (n == 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    \n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    \n    if (m1 == m2) {\n        return m1\n    }\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    }\n    \n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n}\n",
    "\n    i <- 0\n    j <- 0\n    m1 <- -1\n    m2 <- -1\n    count <- 0\n    \n    while(count <= n) {\n        count <- count + 1\n        if (arr1[i] < arr2[j]) {\n            m1 <- m2\n            m2 <- arr1[i]\n            i <- i + 1\n        } else {\n            m1 <- m2\n            m2 <- arr2[j]\n            j <- j + 1\n        }\n    }\n    \n    return((m1 + m2) / 2)\n}\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2):n], arr2[1:(n / 2)], n / 2))\n    }\n    return (get_median(arr1[((n + 1) / 2):n], arr2[1:(n / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1:(n / 2)], arr2[(n / 2):n], n / 2))\n  }\n  return (get_median(arr1[1:(n / 2)], arr2[((n + 1) / 2):n], (n + 1) / 2))\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n/2 + 1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n/2 + 1))\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      return get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2)\n    }\n  }\n  \n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      return get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2)\n    }\n  }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nn <- length(arr1)\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n}\n",
    "\n  if (n <= 0) {\n    return -1\n  }\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n    }\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  } else {\n    return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2) + 1:n], arr2[1:(n/2)], n/2)\n    } else {\n      get_median(arr1[(n/2) + 1:n], arr2[1:(n/2) + 1], n/2 + 1)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2) + 1:n], n/2)\n    } else {\n      get_median(arr1[1:(n/2) + 1], arr2[(n/2) + 1:n], n/2 + 1)\n    }\n  }\n}\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return (m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n        } else {\n            return (get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n        } else {\n            return (get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n        }\n    }\n}\n",
    "\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return (c(arr1[1], arr2[1]))\n  }\n  \n  if (n == 2) {\n    return (c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return (m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return (get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n/2 + 1))\n    }\n  }\n  \n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return (get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n/2 + 1))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n    } else {\n      return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n    } else {\n      return(get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1))\n    }\n  }\n}\n",
    "\n    if (n <= 0)\n        return -1\n    if (n == 1)\n        return (arr1[1] + arr2[1]) / 2\n    if (n == 2)\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    \n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    \n    if (m1 == m2)\n        return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0)\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        else\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n    \n    if (n % 2 == 0)\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    else\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n        }\n    }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\n\nget_median(arr1, arr2, length(arr1))\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0)\n      get_median(arr1[(n / 2) - 1:n], arr2[1:(n / 2) + 1], n - (n / 2) + 1)\n    else\n      get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n - (n / 2) + 1)\n  } else {\n    if (n % 2 == 0)\n      get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) - 1:n], n - (n / 2) + 1)\n    else\n      get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n - (n / 2) + 1)\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  count <- 0\n  m1 <- 0\n  m2 <- 0\n  while (count <= n) {\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n    count <- count + 1\n  }\n  return ((m1 + m2) / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    }\n    return(get_median(arr1[((n+1)/2):n], arr2[1:(n/2)], n/2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n  }\n  return(get_median(arr1[1:(n/2)], arr2[((n+1)/2):n], n/2))\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n    if (n == 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        }\n        return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    }\n    return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    }\n    \n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n        } else {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2+1))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n        } else {\n            return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2+1))\n        }\n    }\n}\n",
    "\n  if (n == 0) return 0\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n - 1) / 2)], (n - 1) / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : ((n - 1) / 2)], arr2[((n + 1) / 2) : n], (n - 1) / 2)\n    }\n  }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    \n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    \n    if (m1 == m2) {\n        return(m1)\n    }\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2)], floor(n/2)))\n        } else {\n            return(get_median(arr1[ceiling(n/2):n], arr2[1:floor(n/2) + 1], floor(n/2) + 1))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1:floor(n/2)], arr2[ceiling(n/2):n], floor(n/2)))\n        } else {\n            return(get_median(arr1[1:floor(n/2) + 1], arr2[ceiling(n/2):n], floor(n/2) + 1))\n        }\n    }\n}\n\nget_median(arr1, arr2, n)\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return (m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return (get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return (get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return (get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    }\n    return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  }\n  return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n/2 + 1))\n    }\n  }\n  if (m1 > m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n/2 + 1))\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n        } else {\n            return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n        } else {\n            return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(max(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n    } else {\n      return(get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2))\n    }\n  }\n}\n",
    "\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n        }\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n        return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n    }\n}\n",
    "\n  if (n == 0) {\n    return(0)\n  }\n  if (n == 1) {\n    return((arr1[1] + arr2[1]) / 2)\n  }\n  if (n == 2) {\n    return((max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2)\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2))\n    } else {\n      return(get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2))\n    }\n  }\n  if (n % 2 == 0) {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2))\n  } else {\n    return(get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2))\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n\n  if (m1 == m2) return m1\n\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    } else {\n      get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n    }\n  }\n}\n",
    "\n    if (n <= 0) {\n        return -1\n    }\n    if (n == 1) {\n        return (arr1[1] + arr2[1]) / 2\n    }\n    if (n == 2) {\n        return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n    }\n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    if (m1 == m2) {\n        return m1\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        }\n        return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n    if (n % 2 == 0) {\n        return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n    }\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return(m1)\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2))\n    }\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n        } else {\n            return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n        }\n    }\n}\n",
    "\n    if (n <= 0) return -1\n    if (n == 1) return (arr1[1] + arr2[1]) / 2\n    if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n    \n    m1 <- median(arr1, n)\n    m2 <- median(arr2, n)\n    \n    if (m1 == m2) return m1\n    \n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2)], n / 2)\n        } else {\n            return get_median(arr1[(n / 2) + 1:n], arr2[1:(n / 2) + 1], n / 2 + 1)\n        }\n    } else {\n        if (n % 2 == 0) {\n            return get_median(arr1[1:(n / 2)], arr2[(n / 2) + 1:n], n / 2)\n        } else {\n            return get_median(arr1[1:(n / 2) + 1], arr2[(n / 2) + 1:n], n / 2 + 1)\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    } else {\n      return get_median(arr1[(n / 2) + 1 : n], arr2[1 : (n / 2)], n / 2)\n    }\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  } else {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) + 1 : n], n / 2)\n  }\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  i <- 0\n  j <- 0\n  m1 <- -1\n  m2 <- -1\n  count <- 0\n  while (count <= n) {\n    count <- count + 1\n    if (i == n) {\n      m1 <- m2\n      m2 <- arr2[0]\n      break\n    }\n    if (j == n) {\n      m1 <- m2\n      m2 <- arr1[0]\n      break\n    }\n    if (arr1[i] < arr2[j]) {\n      m1 <- m2\n      m2 <- arr1[i]\n      i <- i + 1\n    } else {\n      m1 <- m2\n      m2 <- arr2[j]\n      j <- j + 1\n    }\n  }\n  return((m1 + m2) / 2)\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2):n], arr2[1:(n/2)], n - n/2)\n    } else {\n      get_median(arr1[(n/2):n], arr2[1:(n/2) + 1], n - n/2)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2):n], n - n/2)\n    } else {\n      get_median(arr1[1:(n/2) + 1], arr2[(n/2):n], n - n/2)\n    }\n  }\n}\n\narr1 <- c(1, 2, 3, 6)\narr2 <- c(4, 6, 8, 10)\nget_median(arr1, arr2, 4)\n\narr1 <- c(1, 12, 15, 26, 38)\narr2 <- c(2, 13, 17, 30, 45)\nget_median(arr1, arr2, 5)\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2)\n    } else {\n      get_median(arr1[(n/2 + 1):n], arr2[1:(n/2)], n/2 + 1)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2)\n    } else {\n      get_median(arr1[1:(n/2)], arr2[(n/2 + 1):n], n/2 + 1)\n    }\n  }\n}\n",
    "\n  if (n == 1) {\n    return (arr1[1] + arr2[1]) / 2\n  }\n  if (n == 2) {\n    return (max(arr1[1], arr2[1]) + min(arr1[2], arr2[2])) / 2\n  }\n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  if (m1 == m2) {\n    return m1\n  }\n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return get_median(arr1[(n / 2) : n], arr2[1 : (n / 2)], n / 2)\n    }\n    return get_median(arr1[((n + 1) / 2) : n], arr2[1 : ((n + 1) / 2)], (n + 1) / 2)\n  }\n  if (n % 2 == 0) {\n    return get_median(arr1[1 : (n / 2)], arr2[(n / 2) : n], n / 2)\n  }\n  return get_median(arr1[1 : ((n + 1) / 2)], arr2[((n + 1) / 2) : n], (n + 1) / 2)\n}\n",
    "\n    if (n == 1) {\n        return(c(arr1[1], arr2[1]))\n    }\n    if (n == 2) {\n        return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n    }\n    m1 <- median(arr1)\n    m2 <- median(arr2)\n    if (m1 == m2) {\n        return(m1)\n    }\n    if (m1 < m2) {\n        if (n % 2 == 0) {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n        } else {\n            return(get_median(arr1[(n/2):n], arr2[1:(n/2+1)], n/2+1))\n        }\n    } else {\n        if (n % 2 == 0) {\n            return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n        } else {\n            return(get_median(arr1[1:(n/2+1)], arr2[(n/2):n], n/2+1))\n        }\n    }\n}\n",
    "\n  if (n == 1) {\n    return(c(arr1[1], arr2[1]))\n  }\n  if (n == 2) {\n    return(c(max(arr1[1], arr2[1]), min(arr1[2], arr2[2])))\n  }\n  \n  m1 <- median(arr1)\n  m2 <- median(arr2)\n  \n  if (m1 == m2) {\n    return(m1)\n  }\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)], n/2))\n    } else {\n      return(get_median(arr1[(n/2):n], arr2[1:(n/2)+1], n/2))\n    }\n  } else {\n    if (n % 2 == 0) {\n      return(get_median(arr1[1:(n/2)], arr2[(n/2):n], n/2))\n    } else {\n      return(get_median(arr1[1:(n/2)+1], arr2[(n/2):n], n/2))\n    }\n  }\n}\n",
    "\n  if (n <= 0) return -1\n  if (n == 1) return (arr1[1] + arr2[1]) / 2\n  if (n == 2) return (max(arr1[1], arr2[1]) + min(arr2[2], arr2[2])) / 2\n  \n  m1 <- median(arr1, n)\n  m2 <- median(arr2, n)\n  \n  if (m1 == m2) return m1\n  \n  if (m1 < m2) {\n    if (n % 2 == 0) {\n      get_median(arr1[(n / 2):n], arr2[1:(n / 2)], n / 2)\n    } else {\n      get_median(arr1[(n / 2 + 1):n], arr2[1:(n / 2)], n / 2 + 1)\n    }\n  } else {\n    if (n % 2 == 0) {\n      get_median(arr1[1:(n / 2)], arr2[(n / 2):n], n / 2)\n    } else {\n      get_median(arr1[1:(n / 2)], arr2[(n / 2 + 1):n], n / 2 + 1)\n    }\n  }\n}\n"
  ]
}