{
  "name": "mbpp_771_check_expression",
  "language": "r",
  "prompt": "# Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\ncheck_expression <- function(exp) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- check_expression\n    if(!identical(candidate('{()}[{}]'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('{()}[{]'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('{()}[{}][]({})'), TRUE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)+(c+d)\")\ncheck_expression(\"(a+b)+(c+d\")\ncheck_expression(\"(a+b)+c+d)\")",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncheck_expression(\"[{()}]\")\ncheck_expression(\"[{(}]\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncheck_expression(\"((a+b)*(c-d))\")\ncheck_expression(\"((a+b)*(c-d)))))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b'))\ncheck_expression(c('a', '+', 'b', ')'))\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[(])\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"(a+b))\")\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c('(', '{', '[')) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(')', '}', ']')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])}[')\ncheck_expression('{([])}]')\ncheck_expression('{([])}[}')\ncheck_expression('{([])}[{]')\ncheck_expression('{([])}[{]}')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([]})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(((a+b)))')\ncheck_expression('(((a+b))')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"[()]{}{[()()]()}\")\ncheck_expression(\"[(])\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\ncheck_expression('((a+b)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"a+b\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == '(') {\n      stack <- c(stack, '(')\n    } else if (substr(exp, i, i) == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b)*(c-d))\")\ncheck_expression(\"((a+b)*(c-d)))))\")\n",
    "\n  stack <- list()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(())')\ncheck_expression('(()')\ncheck_expression('())')\ncheck_expression('(()))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b))\")\ncheck_expression(\"((a+b))+c\")\ncheck_expression(\"((a+b))+c)\")\ncheck_expression(\"((a+b))+c))\")\ncheck_expression(\"((a+b))+c)))\")\ncheck_expression(\"((a+b))+c)))))\")\ncheck_expression(\"((a+b))+c)))))+d\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)))(')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})[\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)))))')\n",
    "\n    stack <- c()\n    for (i in 1:length(exp)) {\n        if (exp[i] == '(') {\n            stack <- c(stack, exp[i])\n        } else if (exp[i] == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\ncheck_expression('((a+b)*(c-d)))))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\" | substr(exp, i, i) == \"[\" | substr(exp, i, i) == \"{\") {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) == \")\" | substr(exp, i, i) == \"]\" | substr(exp, i, i) == \"}\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" & stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" & stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" & stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_expression('((a+b)*(c+d))')\ncheck_",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})[]\")\n",
    "\n    stack <- c()\n    for (i in 1:length(exp)) {\n        if (exp[i] == '(') {\n            stack <- c(stack, exp[i])\n        } else if (exp[i] == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('(((a+b)))')\ncheck_expression('(((a+b))')\ncheck_expression('((a+b)))')\ncheck_expression('((a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(())')\ncheck_expression('((())')\ncheck_expression('((()))')\ncheck_expression('((())))(')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)+(c+d)\")\ncheck_expression(\"(a+b)+(c+d\")\ncheck_expression(\"(a+b)+c+d)\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) == \")\") {\n      if (stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    } else if (substr(exp, i, i) == \"]\") {\n      if (stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    } else if (substr(exp, i, i) == \"}\") {\n      if (stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{[()]}\")\ncheck_expression(\"{[(])}\")\ncheck_expression(\"{{[[(())]]}}\")\n",
    "\n    stack <- list()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b)+(c+d)')\ncheck_expression('(a+b)+(c+d')\ncheck_expression('(a+b)+(c+d))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"{\", \"[\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"}\", \"]\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n          stack <- stack[-length(stack)]\n        } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n          stack <- stack[-length(stack)]\n        } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n          stack <- stack[-length(stack)]\n        } else {\n          return(FALSE)\n        }\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b}\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(((a+b)))')\ncheck_expression('(((a+b))')\ncheck_expression('(((a+b))))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' | exp[i] == '{' | exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' | exp[i] == '}' | exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (exp[i] == ')' & stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == '}' & stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == ']' & stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([}])')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b))\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\ncheck_expression('(a+b)*(c-d))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[]]\")\ncheck_expression(\"{()}[]]{\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[(])\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' | exp[i] == '{' | exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' | exp[i] == '}' | exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' & stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == '}' & stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == ']' & stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])}()')\ncheck_expression('{([])}(')\ncheck_expression('{([])}(]')\ncheck_expression('{([])}(]')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(())((()))')\ncheck_expression('(())((()')\ncheck_expression('(())(()))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)))))')\ncheck_expression('((a+b)*(c-d)))))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\") {\n        if (stack[length(stack)] != \"(\") {\n          return(FALSE)\n        }\n      } else if (substr(exp, i, i) == \"]\") {\n        if (stack[length(stack)] != \"[\") {\n          return(FALSE)\n        }\n      } else if (substr(exp, i, i) == \"}\") {\n        if (stack[length(stack)] != \"{\") {\n          return(FALSE)\n        }\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})[\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == '(') {\n      stack <- c(stack, '(')\n    } else if (substr(exp, i, i) == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n            stack <- c(stack, substr(exp, i, i))\n        } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n            if (length(stack) == 0) {\n                return(FALSE)\n            }\n            if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n                stack <- stack[-length(stack)]\n            } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n                stack <- stack[-length(stack)]\n            } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n                stack <- stack[-length(stack)]\n            } else {\n                return(FALSE)\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[]]\")\n",
    "\n  stack <- list()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b))\")\ncheck_expression(\"((a+b))(\")\ncheck_expression(\"((a+b)))(\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((()))')\ncheck_expression('((())')\ncheck_expression('((())))(')\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('a+b')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"(a+b)+(c+d)\")\ncheck_expression(\"(a+b)+(c+d))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', '(', 'b', '*', 'c', ')', ')'))\ncheck_expression(c('(', 'a', '+', '(', 'b', '*', 'c', ')', ')'))\ncheck_expression(c('(', 'a', '+', '(', 'b', '*', 'c', ')', ')'))\ncheck_expression(c('(', 'a', '+', '(', 'b', '*', 'c', ')', ')'))\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"))\ncheck_expression(c(\"(\", \")\", \"[\", \"]\", \"{\", \"}\"",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('a+b')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})[]\")\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b)(')\ncheck_expression('(a+b)(c+d)')\ncheck_expression('(a+b)(c+d')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\ncheck_expression('(a+b)+(c+d))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n    stack <- c()\n    for (i in 1:length(exp)) {\n        if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n            stack <- c(stack, exp[i])\n        } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            }\n            if (exp[i] == ')' && stack[length(stack)] != '(') {\n                return(FALSE)\n            }\n            if (exp[i] == '}' && stack[length(stack)] != '{') {\n                return(FALSE)\n            }\n            if (exp[i] == ']' && stack[length(stack)] != '[') {\n                return(FALSE)\n            }\n            stack <- stack[-length(stack)]\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    }\n    return(FALSE)\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}(')\ncheck_expression('{([])}(}')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})[]\")\ncheck_expression(\"{(})[\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"a+b\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c('(', '{', '[')) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(')', '}', ']')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}]')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})[]\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == '(') {\n      stack <- c(stack, '(')\n    } else if (substr(exp, i, i) == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{()}[{}]')\ncheck_expression('{()}[{}')\ncheck_expression('{()}[{}]{')\ncheck_expression('{()}[{}]{}')\ncheck_expression('{()}[{}]{}{')\ncheck_expression('{()}[{}]{}{}')\ncheck_expression('{()}[{}]{}{}(')\ncheck_expression('{()}[{}]{}{}()')\ncheck_expression('{()}[{}]{}{}()[')\ncheck_expression('{()}[{}]{}{}()[]')\ncheck_expression('{()}[{}]{}{}()[]{')\ncheck_expression('{()}[{}]{}{}()[]{}')\ncheck_expression('{()}[{}]{}{}()[]{}(')\ncheck_expression('{()}[{}]{}{}()[]{",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\") {\n        if (stack[length(stack)] != \"(\") {\n          return(FALSE)\n        }\n      } else if (substr(exp, i, i) == \"]\") {\n        if (stack[length(stack)] != \"[\") {\n          return(FALSE)\n        }\n      } else if (substr(exp, i, i) == \"}\") {\n        if (stack[length(stack)] != \"{\") {\n          return(FALSE)\n        }\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[]]\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(((())))')\ncheck_expression('(((()))')\ncheck_expression('(((())))(')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[]]\")\ncheck_expression(\"{()}[]]{\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(((a+b)))')\ncheck_expression('(((a+b))')\ncheck_expression('((a+b)))')\ncheck_expression('((a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"",
    "\n  stack <- list()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"a+b\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{(})[]\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c('(', '[', '{')) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(')', ']', '}')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' && stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (exp[i] == ']' && stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      if (exp[i] == '}' && stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)+(c+d)\")\ncheck_expression(\"(a+b)+(c+d\")\ncheck_expression(\"(a+b)+c+d)\")\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n            stack <- c(stack, substr(exp, i, i))\n        } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n            if (length(stack) == 0) {\n                return(FALSE)\n            }\n            if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n                stack <- stack[-length(stack)]\n            } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n                stack <- stack[-length(stack)]\n            } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n                stack <- stack[-length(stack)]\n            } else {\n                return(FALSE)\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' | exp[i] == '{' | exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' | exp[i] == '}' | exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' & stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (exp[i] == '}' & stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      if (exp[i] == ']' & stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\ncheck_expression('{()}')\ncheck_expression('{()}[')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b)(a+b)\")\ncheck_expression(\"(a+b)(a+b)(a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(((a+b)))')\ncheck_expression('(((a+b))')\ncheck_expression('((a+b)))')\ncheck_expression('((a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b)*(c-d))\")\ncheck_expression(\"((a+b)*(c-d)))\")\ncheck_expression(\"((a+b)*(c-d)\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n          stack <- stack[-length(stack)]\n        } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n          stack <- stack[-length(stack)]\n        } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n          stack <- stack[-length(stack)]\n        } else {\n          return(FALSE)\n        }\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncheck_expression('((()))')\ncheck_expression('((())')\ncheck_expression('((())))(')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b))\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"[(])\")\ncheck_expression(\"[()]{}{[()()]()}\")\n",
    "\n  stack <- list()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == \"(\" | exp[i] == \"[\" | exp[i] == \"{\") {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    } else if (exp[i] == \"]\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    } else if (exp[i] == \"}\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b'))\ncheck_expression(c('a', '+', 'b', ')'))\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)))))')\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)))))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      } else if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      } else if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\"",
    "\n  stack <- c()\n  for(i in 1:length(exp)) {\n    if(exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if(exp[i] == ')') {\n      if(length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if(length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == '(') {\n      stack <- c(stack, '(')\n    } else if (substr(exp, i, i) == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == \"(\") {\n            stack <- c(stack, \"(\")\n        } else if (substr(exp, i, i) == \")\") {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[)\")\ncheck_expression(\"{()}[(]\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\") {\n        if (stack[length(stack)] != \"(\") {\n          return(FALSE)\n        } else {\n          stack <- stack[-length(stack)]\n        }\n      } else if (substr(exp, i, i) == \"]\") {\n        if (stack[length(stack)] != \"[\") {\n          return(FALSE)\n        } else {\n          stack <- stack[-length(stack)]\n        }\n      } else if (substr(exp, i, i) == \"}\") {\n        if (stack[length(stack)] != \"{\") {\n          return(FALSE)\n        } else {\n          stack <- stack[-length(stack)]\n        }\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"[()]{}{[()()]()}\")\ncheck_expression(\"[(])\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncheck_expression(c(\"(\", \"[\", \"]\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c(\"(\", \")\"))\ncheck_expression(c",
    "\n  stack <- list()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c('(', '{', '[')) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(')', '}', ']')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (exp[i] == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{()}[]')\ncheck_expression('{()}[')\ncheck_expression('{()}[()]')\ncheck_expression('{()}[()')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(())')\ncheck_expression('(()))')\ncheck_expression('((()')\ncheck_expression('((())')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"a+b\")\n",
    "\n    stack <- c()\n    for (i in 1:length(exp)) {\n        if (exp[i] == '(') {\n            stack <- c(stack, '(')\n        } else if (exp[i] == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((()))')\ncheck_expression('((()')\ncheck_expression('((())))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d))(')\ncheck_expression('((a+b)+(c+d)))(')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for(i in 1:length(exp)) {\n    if(exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if(exp[i] == ')') {\n      if(length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if(length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b)+(c+d))\")\ncheck_expression(\"((a+b)+(c+d)\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c('(', '{', '[')) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(')', '}', ']')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == ')' && stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == '}' && stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == ']' && stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}]')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (exp[i] == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}]')\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('(a+b))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"{\", \"(\", \"[\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\"}\", \")\", \"]\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  return(length(stack) == 0)\n}\n\ncheck_expression(\"[()]{}{[()()]()}\")\ncheck_expression(\"[(])\")\n",
    "\n  stack <- c()\n  for(i in 1:length(exp)) {\n    if(exp[i] %in% c('(', '{', '[')) {\n      stack <- c(stack, exp[i])\n    } else if(exp[i] %in% c(')', '}', ']')) {\n      if(length(stack) == 0) {\n        return(FALSE)\n      }\n      if(exp[i] == ')' && stack[length(stack)] != '(') {\n        return(FALSE)\n      } else if(exp[i] == '}' && stack[length(stack)] != '{') {\n        return(FALSE)\n      } else if(exp[i] == ']' && stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if(length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', 'b', ')', '*', '(', 'c', '+', 'd', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')', '*', '(', 'c', '+', 'd', '}'))\ncheck_expression(c('(', 'a', '+', 'b', ')', '*', '(', 'c', '+', 'd', ')'))\ncheck_expression(c('(', 'a', '+', 'b', ')', '*', '(', 'c', '+', 'd', ')'))\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b)*(c+d))\")\ncheck_expression(\"((a+b)*(c+d)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' && stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (exp[i] == '}' && stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      if (exp[i] == ']' && stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{()}')\ncheck_expression('{(})')\ncheck_expression('{(})')\ncheck_expression('{(})')\ncheck_expression('{(})')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' | exp[i] == '{' | exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' | exp[i] == '}' | exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' & stack[length(stack)] != '(') {\n        return(FALSE)\n      } else if (exp[i] == '}' & stack[length(stack)] != '{') {\n        return(FALSE)\n      } else if (exp[i] == ']' & stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}]')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' && stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (exp[i] == '}' && stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      if (exp[i] == ']' && stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}(')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b))')\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((()))')\ncheck_expression('((())))(')\ncheck_expression('((())))((')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n\ncheck_expression(\"[()]{}{[()()]()}\")\ncheck_expression(\"[(])\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0 || stack[length(stack)] != \"(\") {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    } else if (substr(exp, i, i) == \"]\") {\n      if (length(stack) == 0 || stack[length(stack)] != \"[\") {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    } else if (substr(exp, i, i) == \"}\") {\n      if (length(stack) == 0 || stack[length(stack)] != \"{\") {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})[\")\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) %in% c('(', '{', '[')) {\n            stack <- c(stack, substr(exp, i, i))\n        } else if (substr(exp, i, i) %in% c(')', '}', ']')) {\n            if (length(stack) == 0) {\n                return(FALSE)\n            }\n            if (substr(exp, i, i) == ')' && stack[length(stack)] == '(') {\n                stack <- stack[-length(stack)]\n            } else if (substr(exp, i, i) == '}' && stack[length(stack)] == '{') {\n                stack <- stack[-length(stack)]\n            } else if (substr(exp, i, i) == ']' && stack[length(stack)] == '[') {\n                stack <- stack[-length(stack)]\n            } else {\n                return(FALSE)\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('{()}[]')\ncheck_expression('{()}[')\ncheck_expression('{()}[')\ncheck_expression('{(})')\n",
    "\n  # Write your code here\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substr(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b)+(c+d)\")\ncheck_expression(\"(a+b)+(c+d\")\ncheck_expression(\"(a+b)+(c+d))\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{(})[]\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\ncheck_expression('(a+b))')\ncheck_expression('(a+b)(')\ncheck_expression('(a+b)(c+d)')\ncheck_expression('(a+b)(c+d)(')\ncheck_expression('(a+b)(c+d))')\ncheck_expression('(a+b)(c+d))(e+f)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        if (exp[i] == \")\" && stack[length(stack)] != \"(\") {\n          return(FALSE)\n        } else if (exp[i] == \"]\" && stack[length(stack)] != \"[\") {\n          return(FALSE)\n        } else if (exp[i] == \"}\" && stack[length(stack)] != \"{\") {\n          return(FALSE)\n        }\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])}\")\ncheck_",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((()))')\ncheck_expression('((())')\ncheck_expression('((())))(')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c('(', '{', '[')) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(')', '}', ']')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (exp[i] == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([])}(')\ncheck_expression('{([])}()')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', 'b', ')'))\ncheck_expression(c('(', 'a', '+', 'b'))\ncheck_expression(c('(', 'a', '+', 'b', ')', ')'))\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(())')\ncheck_expression('((())')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b)*(c+d))\")\ncheck_expression(\"((a+b)*(c+d)\")\ncheck_expression(\"(a+b)*(c+d))\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, '(')\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)))))')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b))\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b\")\ncheck_expression(\"a+b)\")\ncheck_expression(\"a+b\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c('(', '{', '[')) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(')', '}', ']')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == ')' && stack[length(stack)] == '(') {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == '}' && stack[length(stack)] == '{') {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == ']' && stack[length(stack)] == '[') {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{([])')\ncheck_expression('{([}])')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{(}[]\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == '(') {\n      stack <- c(stack, '(')\n    } else if (substr(exp, i, i) == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(' | exp[i] == '{' | exp[i] == '[') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')' | exp[i] == '}' | exp[i] == ']') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' & stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (exp[i] == '}' & stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      if (exp[i] == ']' & stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('{([])}')\ncheck_expression('{[(])}')\ncheck_expression('{[()]}')\ncheck_expression('{[()]')\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substr(exp, i, i) == \"(\") {\n            stack <- c(stack, \"(\")\n        } else if (substr(exp, i, i) == \")\") {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression(\"((a+b))\")\ncheck_expression(\"((a+b))(\")\ncheck_expression(\"((a+b))()\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('((a+b)+(c+d))')\ncheck_expression('((a+b)+(c+d)')\n",
    "\n  stack <- list()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (exp[i] == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\ncheck_expression(\"{([])}{\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b))\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\ncheck_expression(\"(a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) == \")\") {\n      if (stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    } else if (substr(exp, i, i) == \"]\") {\n      if (stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    } else if (substr(exp, i, i) == \"}\") {\n      if (stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{(})[]\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    }\n    else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(((a+b)))')\ncheck_expression('(((a+b))')\ncheck_expression('(((a+b)))(')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \")\" && stack[length(stack)] != \"(\") {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] != \"[\") {\n        return(FALSE)\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] != \"{\") {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{([])}\")\ncheck_expression(\"{([])\")\ncheck_expression(\"{([])}{\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}[)\")\ncheck_expression(\"{()}[(]\")\n",
    "\n    stack <- c()\n    for (i in 1:nchar(exp)) {\n        if (substring(exp, i, i) == '(') {\n            stack <- c(stack, '(')\n        } else if (substring(exp, i, i) == ')') {\n            if (length(stack) == 0) {\n                return(FALSE)\n            } else {\n                stack <- stack[-length(stack)]\n            }\n        }\n    }\n    if (length(stack) == 0) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d))')\ncheck_expression('((a+b)*(c-d)')\ncheck_expression('((a+b)*(c-d)))))')\ncheck_expression('((a+b)*(c-d)))))')\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] == '(') {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] == ')') {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression('(a+b)')\ncheck_expression('(a+b')\ncheck_expression('a+b)')\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{(})[]\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{(})\")\ncheck_expression(\"{(})[\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"((a+b))\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\n",
    "\n  stack <- list()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) %in% c(\"(\", \"[\", \"{\")) {\n      stack <- c(stack, substr(exp, i, i))\n    } else if (substr(exp, i, i) %in% c(\")\", \"]\", \"}\")) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (substr(exp, i, i) == \")\" && stack[length(stack)] == \"(\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"]\" && stack[length(stack)] == \"[\") {\n        stack <- stack[-length(stack)]\n      } else if (substr(exp, i, i) == \"}\" && stack[length(stack)] == \"{\") {\n        stack <- stack[-length(stack)]\n      } else {\n        return(FALSE)\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\ncheck_expression(\"{()}[]\")\ncheck_expression(\"{()}[\")\ncheck_expression(\"{()}]\")\ncheck_expression(\"{()}]{\")\n",
    "\n  stack <- c()\n  for (i in 1:nchar(exp)) {\n    if (substr(exp, i, i) == \"(\") {\n      stack <- c(stack, \"(\")\n    } else if (substr(exp, i, i) == \")\") {\n      if (length(stack) == 0) {\n        return(FALSE)\n      } else {\n        stack <- stack[-length(stack)]\n      }\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(\"(a+b)\")\ncheck_expression(\"(a+b)+(c+d)\")\ncheck_expression(\"(a+b))\")\ncheck_expression(\"((a+b)\")\n",
    "\n  stack <- c()\n  for (i in 1:length(exp)) {\n    if (exp[i] %in% c('(', '[', '{')) {\n      stack <- c(stack, exp[i])\n    } else if (exp[i] %in% c(')', ']', '}')) {\n      if (length(stack) == 0) {\n        return(FALSE)\n      }\n      if (exp[i] == ')' && stack[length(stack)] != '(') {\n        return(FALSE)\n      }\n      if (exp[i] == ']' && stack[length(stack)] != '[') {\n        return(FALSE)\n      }\n      if (exp[i] == '}' && stack[length(stack)] != '{') {\n        return(FALSE)\n      }\n      stack <- stack[-length(stack)]\n    }\n  }\n  if (length(stack) == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_expression(c('(', 'a', '+', '(', 'b', '-', 'c', ')', ')'))\ncheck_expression(c('(', 'a', '+', '(', 'b', '-', 'c', ')'))\ncheck_expression(c('(', 'a', '+', '(', 'b', '-', 'c', ')', '}'))\n"
  ]
}