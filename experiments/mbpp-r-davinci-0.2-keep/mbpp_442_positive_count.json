{
  "name": "mbpp_442_positive_count",
  "language": "r",
  "prompt": "# Write a function to find the ration of positive numbers in an array of integers.\npositive_count <- function(nums) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- positive_count\n    if(!identical(candidate(c(0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8)), 0.54)){quit('no', 1)}\n    if(!identical(candidate(c(2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8)), 0.69)){quit('no', 1)}\n    if(!identical(candidate(c(2, 4, -6, -9, 11, -12, 14, -5, 17)), 0.56)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    # Your code here\n    return(sum(nums > 0) / length(nums))\n}\npositive_count(c(1, 2, 3, -4, 5))\n",
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return(positive_count / length(nums))\n}\n",
    "\n  # Your code here\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  # Write your code here\n  positive_count <- sum(nums > 0)\n  return(positive_count/length(nums))\n}\n",
    "\n  # Write your code here\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  # Your code goes here\n  # Return the ratio of positive numbers\n}\n",
    "\n  pos_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      pos_count <- pos_count + 1\n    }\n  }\n  return(pos_count/length(nums))\n}\n\npositive_count(c(1,2,3,4,5))\n",
    "\n  # Write your code here\n  positive_count <- sum(nums > 0)\n  return(positive_count/length(nums))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in nums) {\n    if (i > 0) {\n      count <- count + 1\n    }\n  }\n  return(count/length(nums))\n}\n\npositive_count(c(1, 2, 3, -1, -2, -3))\n",
    "\n  # Initialize a counter.\n  count <- 0\n  # Loop over the values in the vector.\n  for (num in nums) {\n    # If the value is positive, increment the counter.\n    if (num > 0) {\n      count <- count + 1\n    }\n  }\n  # Return the ratio of positive numbers.\n  return(count / length(nums))\n}\n",
    "\n  # Your code goes here\n  nums <- nums[nums > 0]\n  return(length(nums) / length(nums))\n}\n",
    "\n  # Write your code here\n  # You can use the function sum()\n  # You can use the function length()\n  # You can use the function mean()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use the function is.na()\n  # You can use",
    "\n  positive_count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      positive_count <- positive_count + 1\n    }\n  }\n  return (positive_count / length(nums))\n}\n\npositive_count(c(1, 2, 3, -4, -1))\n",
    "\n  # Write your code here\n  pos_count <- 0\n  for (i in nums) {\n    if (i > 0) {\n      pos_count <- pos_count + 1\n    }\n  }\n  return(pos_count/length(nums))\n}\n",
    "\n    # Write your code here\n    positive <- 0\n    for (i in nums) {\n        if (i > 0) {\n            positive <- positive + 1\n        }\n    }\n    return(positive / length(nums))\n}\n\npositive_count(c(1, 2, 3, -1, -2))\n",
    "\n  count <- 0\n  for (num in nums) {\n    if (num > 0) {\n      count <- count + 1\n    }\n  }\n  return(count / length(nums))\n}\n",
    "\n  # Write your code here\n  return(sum(nums > 0) / length(nums))\n}\n",
    "\n  # Write your code here\n  pos_count <- 0\n  for (i in 1:length(nums)) {\n    if (nums[i] > 0) {\n      pos_count <- pos_count + 1\n    }\n  }\n  return(pos_count/length(nums))\n}\n",
    "\n  # Write your code here\n  positive_count <- sum(nums > 0)\n  return(positive_count / length(nums))\n}\n",
    "\n  # Initialize a counter.\n  count <- 0\n  # Loop through the array.\n  for (num in nums) {\n    # If the number is positive, increment the counter.\n    if (num > 0) {\n      count <- count + 1\n    }\n  }\n  # Return the ratio of positive numbers.\n  return(count / length(nums))\n}\n"
  ]
}