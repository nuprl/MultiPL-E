{
  "name": "mbpp_16_text_lowercase_underscore",
  "language": "r",
  "prompt": "# Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\ntext_lowercase_underscore <- function(text) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_16_text_lowercase_underscore.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- text_lowercase_underscore\n    if(!identical(candidate('aab_cbbbc'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('aab_Abbbc'), FALSE)){quit('no', 1)}\n    if(!identical(candidate('Aaab_abbbc'), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntext_lowercase_underscore(\"this_is_a_string\")\ntext_lowercase_underscore(\"thisIsAString\")\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  }\n  else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    if (grepl(\"[a-z]+_[a-z]+\", text)) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if(grepl(\"[a-z]_[a-z]\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntext_lowercase_underscore(\"a_b\")\ntext_lowercase_underscore(\"a_B\")\ntext_lowercase_underscore(\"aB\")\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ntext_lowercase_underscore(\"this_is_a_string\")\ntext_lowercase_underscore(\"thisIsAString\")\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]_[a-z]\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (grepl(\"[a-z]+_[a-z]+\", text)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n"
  ]
}