{
  "name": "mbpp_223_is_majority",
  "language": "r",
  "prompt": "# Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\nis_majority <- function(arr, n, x) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_223_is_majority.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- is_majority\n    if(!identical(candidate(c(1, 2, 3, 3, 3, 3, 10), 7, 3), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 2, 4, 4, 4, 6, 6), 8, 4), FALSE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 1, 2, 2), 5, 1), TRUE)){quit('no', 1)}\n    if(!identical(candidate(c(1, 1, 2, 2), 5, 1), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (n == 1) {\n    return TRUE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[n/2+1:n], n/2, x)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    if (n == 0) {\n        return FALSE\n    }\n    if (arr[n / 2] == x) {\n        return TRUE\n    }\n    if (arr[n / 2] > x) {\n        return is_majority(arr, n / 2, x)\n    }\n    return is_majority(arr, n - n / 2 - 1, x)\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  mid <- floor(n / 2)\n  if (arr[mid] == x) {\n    if (mid + mid > n) {\n      return TRUE\n    }\n    if (arr[mid + mid] == x) {\n      return TRUE\n    }\n    return FALSE\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid + 1):n], n - mid - 1, x)\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # find the count of x\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  # if count is greater than n/2, return true\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\narr <- c(1, 2, 3, 3, 3, 3, 10)\nn <- length(arr)\nx <- 3\nis_majority(arr, n, x)\n",
    "\n  # Write your code here\n  count = 0\n  for(i in 1:n) {\n    if(arr[i] == x) {\n      count = count + 1\n    }\n  }\n  if(count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (x == arr[n/2]) {\n    return 1\n  }\n  if (x > arr[n/2]) {\n    return is_majority(arr, n/2, x)\n  }\n  if (x < arr[n/2]) {\n    return is_majority(arr, n/2, x)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  \n  mid <- floor(n / 2)\n  \n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return TRUE\n    } else {\n      return FALSE\n    }\n  } else if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  } else {\n    return is_majority(arr[(mid + 1):n], n - mid - 1, x)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if(n == 0) return(FALSE)\n  if(n == 1) return(TRUE)\n  mid <- n %/% 2\n  if(arr[mid] == x) {\n    if(mid == 0 || arr[mid - 1] != x) {\n      return(n - mid > mid)\n    } else {\n      return(is_majority(arr[1:mid], mid, x))\n    }\n  } else if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid + 1):n], n - mid - 1, x))\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[n/2+1:n], n/2, x)\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (arr[n/2] == x) {\n    return 1\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  return is_majority(arr[(n/2)+1:n], n/2, x)\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Find the index of first occurrence of x\n  i <- which(arr == x)[1]\n  # If there is no majority element, return false\n  if (i == -1) {\n    return(FALSE)\n  }\n  # If there is a majority element, check if it is the majority element\n  if ((i + n/2 - 1) <= length(arr)) {\n    return(arr[i + n/2 - 1] == x)\n  }\n  # If there is no majority element, return false\n  return(FALSE)\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(1)\n  }\n  else{\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(1)\n  }else{\n    return(0)\n  }\n}\n",
    "\n    if (n == 0) {\n        return FALSE\n    }\n    if (arr[n/2] == x) {\n        return TRUE\n    }\n    if (arr[n/2] > x) {\n        return is_majority(arr, n/2, x)\n    }\n    if (arr[n/2] < x) {\n        return is_majority(arr[n/2+1:n], n/2, x)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(1)\n  }else{\n    return(0)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[(n/2)+1], n/2, x)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid+1):n], n-mid-1, x))\n}\n",
    "\n  # Write your code here\n  if(length(arr) == 0) {\n    return(FALSE)\n  }\n  if(length(arr) == 1) {\n    if(arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(length(arr) == 2) {\n    if(arr[1] == x && arr[2] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(length(arr) == 3) {\n    if(arr[1] == x && arr[2] == x) {\n      return(TRUE)\n    } else if(arr[2] == x && arr[3] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(length(arr) == 4) {\n    if(arr[1] == x && arr[2] == x) {\n      return(TRUE)\n    } else if(arr[2] == x && arr[3] == x) {\n      return(TRUE)\n    } else if(arr[3] == x && arr[4] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(length(arr) == 5) {\n    if(arr[1] == x && arr[2] == x) {\n      return(TRUE)\n    } else if(arr[2] == x && arr[3] == x) {\n      return(TRUE)\n    } else if(arr[3] == x && arr[4] == x) {\n      return(TRUE)\n    } else if(arr[4] == x && arr[5] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if(length(arr) == 6) {\n    if(arr[1] == x && arr[2] == x) {\n      return(TRUE)\n    }",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) return 0\n  if (arr[n/2] == x) {\n    if (n % 2 == 0) {\n      if (arr[n/2 + 1] == x) return 1\n      else return 0\n    } else {\n      return 1\n    }\n  } else if (arr[n/2] > x) {\n    return is_majority(arr[1:(n/2)], n/2, x)\n  } else {\n    return is_majority(arr[(n/2 + 1):n], n/2, x)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n / 2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[1] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr[-1], n-1, x))\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (n == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid+1):n], n-mid-1, x))\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\narr <- c(1, 2, 3, 3, 3, 3, 10)\nn <- length(arr)\nx <- 3\nis_majority(arr, n, x)\n",
    "\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid > n) {\n      return(TRUE)\n    }\n    return(is_majority(arr[mid + 1:n], n - mid - 1, x))\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[mid + 1:n], n - mid - 1, x))\n  }\n}\n",
    "\n    # Write your code here\n    if (sum(arr == x) > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[(n+1)/2] == x) {\n    return(TRUE)\n  }\n  if (arr[(n+1)/2] > x) {\n    return(is_majority(arr[1:(n+1)/2], (n+1)/2, x))\n  }\n  if (arr[(n+1)/2] < x) {\n    return(is_majority(arr[(n+1)/2:n], n/2, x))\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  return is_majority(arr[n/2+1:n], n/2, x)\n}\n",
    "\n  # TODO: Write your code here\n  return(sum(arr == x) > n/2)\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (arr[n/2] == x) {\n    return 1\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  return is_majority(arr, n/2, x)\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if ((mid + mid) <= n) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return 0\n  }\n  if (arr[n/2] == x) {\n    return 1\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[(n/2)+1:n], n/2, x)\n  }\n}\n",
    "\n  # Write your code here\n  count = 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count = count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Your code here\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n / 2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(1)\n  }else{\n    return(0)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (x == arr[n/2]) {\n    if (n/2 + 1 <= n && arr[n/2] == arr[n/2 + 1]) {\n      return TRUE\n    }\n    if (n/2 - 1 >= 0 && arr[n/2] == arr[n/2 - 1]) {\n      return TRUE\n    }\n  }\n  if (x <= arr[n/2]) {\n    return is_majority(arr, n/2, x)\n  }\n  if (x > arr[n/2]) {\n    return is_majority(arr[n/2 + 1:n], n/2, x)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  } else {\n    return(is_majority(arr[(mid+1):n], n - mid - 1, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return(TRUE)\n    }\n    else {\n      return(FALSE)\n    }\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  if (arr[mid] < x) {\n    return(is_majority(arr[(mid+1):n], n-mid-1, x))\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (n == 1) {\n    return arr[1] == x\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    return TRUE\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid+1):n], n-mid-1, x)\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    if ((mid + mid + 1) > n) {\n      return TRUE\n    }\n    if (arr[mid + mid + 1] == x) {\n      return TRUE\n    }\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid + 1):n], n - mid - 1, x)\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n / 2] == x) {\n    return TRUE\n  }\n  if (arr[n / 2] > x) {\n    return is_majority(arr, n / 2, x)\n  }\n  return is_majority(arr, n - n / 2 - 1, x)\n}\n",
    "\n  # find the first occurrence of x\n  first <- first_occurrence(arr, n, x)\n  # if the element is not present at all, return false\n  if (first == -1) {\n    return(FALSE)\n  }\n  # if the element is present more than n/2 times, return true\n  if (arr[first + n/2] == x) {\n    return(TRUE)\n  }\n  # otherwise, return false\n  return(FALSE)\n}\n",
    "\n  # Write your code here\n  if(n == 0) {\n    return(FALSE)\n  }\n  if(n == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(n/2)\n  if(arr[mid] == x) {\n    return(TRUE)\n  }\n  if(arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid+1):n], n-mid-1, x))\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    if (n == 0) {\n        return FALSE\n    }\n    if (arr[n/2] == x) {\n        return TRUE\n    }\n    if (arr[n/2] > x) {\n        return is_majority(arr, n/2, x)\n    }\n    return is_majority(arr, n/2, x)\n}\n",
    "\n  # your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  }\n  return(is_majority(arr[(mid+1):length(arr)], n, x))\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (n == 0) return(FALSE)\n  if (arr[ceiling(n/2)] == x) return(TRUE)\n  if (arr[ceiling(n/2)] > x) return(is_majority(arr[1:ceiling(n/2)], ceiling(n/2), x))\n  return(is_majority(arr[ceiling(n/2):n], n - ceiling(n/2), x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + mid > length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }else{\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 - 1 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[n/2] == x) {\n    return(TRUE)\n  }\n  if (arr[n/2] > x) {\n    return(is_majority(arr[1:(n/2)], n/2, x))\n  } else {\n    return(is_majority(arr[(n/2+1):n], n/2, x))\n  }\n}\n",
    "\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[n/2] == x) {\n    return(TRUE)\n  }\n  if (arr[n/2] > x) {\n    return(is_majority(arr[1:(n/2)], n/2, x))\n  }\n  if (arr[n/2] < x) {\n    return(is_majority(arr[(n/2+1):n], n/2, x))\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (n == 1) {\n    return arr[1] == x\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    return TRUE\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid+1):n], n-mid-1, x)\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n - 1, x))\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[(n/2)+1:n], n/2, x)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if (n == 0) {\n    return(FALSE)\n  }\n  if (n == 1) {\n    return(arr[1] == x)\n  }\n  if (arr[n/2] == x) {\n    return(TRUE)\n  }\n  if (arr[n/2] > x) {\n    return(is_majority(arr[1:(n/2)], n/2, x))\n  }\n  return(is_majority(arr[(n/2):n], n/2, x))\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (length(arr) == 1) {\n    if (arr[1] == x) {\n      return(TRUE)\n    } else {\n      return(FALSE)\n    }\n  }\n  mid <- floor(length(arr)/2)\n  if (arr[mid] == x) {\n    if (mid + n/2 <= length(arr)) {\n      return(TRUE)\n    } else {\n      return(is_majority(arr[(mid+1):length(arr)], n, x))\n    }\n  } else if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], n, x))\n  } else {\n    return(is_majority(arr[(mid+1):length(arr)], n, x))\n  }\n}\n",
    "\n  # your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr[1:n/2], n/2, x)\n  }\n  return is_majority(arr[n/2:n], n/2, x)\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(1)\n  }else{\n    return(0)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (x == arr[n/2]) {\n    return TRUE\n  }\n  if (x > arr[n/2]) {\n    return is_majority(arr[(n/2)+1:n], n/2, x)\n  }\n  return is_majority(arr[1:(n/2)], n/2, x)\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    if (sum(arr == x) > n / 2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n    # Write your code here\n    # If x is present more than n/2 times, then it is the majority element\n    if (sum(arr == x) > n / 2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    if (n == 0) {\n        return FALSE\n    }\n    if (arr[n/2] == x) {\n        return TRUE\n    }\n    if (arr[n/2] > x) {\n        return is_majority(arr, n/2, x)\n    }\n    if (arr[n/2] < x) {\n        return is_majority(arr[(n/2)+1:n], n/2, x)\n    }\n}\n",
    "\n  # Write your code here\n  # Return 1 if x is present more than n/2 times, else return 0\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (n == 1) {\n    return TRUE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[n/2:n], n/2, x)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 1) {\n    return(arr[1] == x)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    return(TRUE)\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid+1):n], n-mid-1, x))\n}\n",
    "\n  # Your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\narr <- c(1, 2, 3, 3, 3, 3, 10)\nn <- length(arr)\nx <- 3\n\nis_majority(arr, n, x)\n",
    "\n  # Your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[n/2+1:n], n/2, x)\n  }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  if (arr[n/2] < x) {\n    return is_majority(arr[n/2 + 1], n/2, x)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    if (length(arr) == 1) {\n        return(arr[1] == x)\n    }\n    \n    mid <- floor(length(arr)/2)\n    if (arr[mid] == x) {\n        return(TRUE)\n    } else if (arr[mid] > x) {\n        return(is_majority(arr[1:mid], n, x))\n    } else {\n        return(is_majority(arr[(mid+1):length(arr)], n, x))\n    }\n}\n",
    "\n  # Write your code here\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  if (arr[n] == x) {\n    return(TRUE)\n  }\n  return(is_majority(arr, n-1, x))\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # YOUR CODE HERE\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Your code here\n  if(sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) return FALSE\n  if (arr[n] == x) return TRUE\n  return is_majority(arr, n-1, x)\n}\n",
    "\n  # Your code here\n  if (length(arr[arr == x]) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (n == 1) {\n    return arr[1] == x\n  }\n  mid <- n %/% 2\n  if (arr[mid] == x) {\n    return TRUE\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid + 1):n], n - mid - 1, x)\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if (mid + mid <= n) {\n      return TRUE\n    }\n    return is_majority(arr, mid, x)\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr, mid, x)\n  }\n  return is_majority(arr[mid+1:n], n-mid-1, x)\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (arr[n/2] == x) {\n    return TRUE\n  }\n  if (arr[n/2] > x) {\n    return is_majority(arr, n/2, x)\n  }\n  return is_majority(arr, n/2, x)\n}\n",
    "\n    # Write your code here\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(1)\n    } else {\n        return(0)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n){\n    if(arr[i] == x){\n      count <- count + 1\n    }\n  }\n  if(count > n/2){\n    return(TRUE)\n  }\n  else{\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 0) {\n    return FALSE\n  }\n  if (n == 1) {\n    return arr[1] == x\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    return (mid + 1) > n/2\n  }\n  if (arr[mid] > x) {\n    return is_majority(arr[1:mid], mid, x)\n  }\n  return is_majority(arr[(mid+1):n], n-mid-1, x)\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (arr[i] == x) {\n            count <- count + 1\n        }\n    }\n    if (count > n/2) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (sum(arr == x) > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if (count > n/2) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Write your code here\n  count <- 0\n  for(i in 1:n) {\n    if(arr[i] == x) {\n      count <- count + 1\n    }\n  }\n  if(count > n/2) {\n    return(1)\n  } else {\n    return(0)\n  }\n}\n",
    "\n  if (length(arr) == 0) {\n    return(FALSE)\n  }\n  mid <- floor(n/2)\n  if (arr[mid] == x) {\n    if ((mid + mid) <= n) {\n      return(TRUE)\n    }\n    return(is_majority(arr[(mid+1):n], n - mid - 1, x))\n  }\n  if (arr[mid] > x) {\n    return(is_majority(arr[1:mid], mid, x))\n  }\n  return(is_majority(arr[(mid+1):n], n - mid - 1, x))\n}\n"
  ]
}