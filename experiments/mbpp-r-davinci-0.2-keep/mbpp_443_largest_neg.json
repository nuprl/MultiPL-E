{
  "name": "mbpp_443_largest_neg",
  "language": "r",
  "prompt": "# Write a python function to find the largest negative number from the given list.\nlargest_neg <- function(list1) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_443_largest_neg.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- largest_neg\n    if(!identical(candidate(c(1, 2, 3, -4, -6)), -6)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, -8, -9)), -9)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, -1)), -1)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(list1)\n",
    "\n  neg_list <- list1[list1 < 0]\n  if (length(neg_list) == 0) {\n    return(0)\n  }\n  else {\n    return(max(neg_list))\n  }\n}\nlargest_neg(list1)\n",
    "\n    list1 <- list1[list1 < 0]\n    if (length(list1) == 0) {\n        return(0)\n    } else {\n        return(max(list1))\n    }\n}\n\nlargest_neg(c(1, -2, -3, -4, 5))\n",
    "\n  neg_list <- list1[list1 < 0]\n  if (length(neg_list) == 0) {\n    return(0)\n  } else {\n    return(max(neg_list))\n  }\n}\n\nlargest_neg(c(1, 2, 3, -1, -2, -3))\n",
    "\n  list1 <- list1[list1 < 0]\n  if(length(list1) == 0) {\n    return(0)\n  } else {\n    return(max(list1))\n  }\n}\n\nlargest_neg(c(12, -34, 40, -45, 50))\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(c(10, -2, -3, -4, -5))\n",
    "\n  neg_list <- list1[list1 < 0]\n  if(length(neg_list) == 0) {\n    return(0)\n  } else {\n    return(max(neg_list))\n  }\n}\n\nlargest_neg(list1)\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    }\n    else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(list1)\n",
    "\n  neg_list <- list1[list1 < 0]\n  if (length(neg_list) == 0) {\n    return(0)\n  } else {\n    return(max(neg_list))\n  }\n}\n\nlargest_neg(list1)\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(c(1, 2, 3, -1, -2, -3))\n",
    "\n  neg_num <- list1[list1 < 0]\n  if (length(neg_num) == 0) {\n    return(0)\n  } else {\n    return(max(neg_num))\n  }\n}\n\nlargest_neg(list1)\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(list1)\n",
    "\n  neg_list <- list1[list1 < 0]\n  if (length(neg_list) == 0) {\n    return(0)\n  } else {\n    return(max(neg_list))\n  }\n}\nlargest_neg(list1)\n",
    "\n  neg_list <- list1[list1 < 0]\n  if(length(neg_list) == 0) {\n    return(0)\n  }\n  else {\n    return(max(neg_list))\n  }\n}\n\nlargest_neg(list1)\n",
    "\n    neg_list <- list1[list1 < 0]\n    if(length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\nlargest_neg(list1)\n",
    "\n  list1 <- list1[list1 < 0]\n  if (length(list1) == 0) {\n    return(0)\n  } else {\n    return(max(list1))\n  }\n}\n\nlargest_neg(c(1, -2, 3, -4, 5))\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    }\n    else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(list1)\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(list1)\n",
    "\n  neg_list <- list1[list1 < 0]\n  if (length(neg_list) == 0) {\n    return(0)\n  } else {\n    return(max(neg_list))\n  }\n}\n\nlargest_neg(list1)\n",
    "\n    neg_list <- list1[list1 < 0]\n    if (length(neg_list) == 0) {\n        return(0)\n    } else {\n        return(max(neg_list))\n    }\n}\n\nlargest_neg(c(1, 2, 3, -1, -2, -3))\nlargest_neg(c(1, 2, 3, 4, 5))\n"
  ]
}