{
  "name": "mbpp_102_snake_to_camel",
  "language": "r",
  "prompt": "# Write a function to convert a snake case string to camel case string.\nsnake_to_camel <- function(word) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_102_snake_to_camel.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- snake_to_camel\n    if(!identical(candidate('python_program'), 'PythonProgram')){quit('no', 1)}\n    if(!identical(candidate('python_language'), 'PythonLanguage')){quit('no', 1)}\n    if(!identical(candidate('programming_language'), 'ProgrammingLanguage')){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  word <- gsub(\"_\", \" \", word)\n  word <- gsub(\"\\\\b([[:lower:]])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\" \", \"\", word)\n  return(word)\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[-1] <- toupper(word[-1])\n  paste(word, collapse = \"\")\n}\n\nsnake_to_camel(\"hello_world\")\nsnake_to_camel(\"hello_world_again\")\nsnake_to_camel(\"hello_world_again_and_again\")\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[2:length(word)] <- toupper(word[2:length(word)])\n  word <- paste(word, collapse = \"\")\n  return(word)\n}\n",
    "\n  # Split the word into a vector of words\n  words <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  words <- lapply(words, function(x) {\n    paste(toupper(substring(x, 1, 1)), substring(x, 2), sep = \"\")\n  })\n  # Concatenate the words\n  paste(words, collapse = \"\")\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word <- paste(word, collapse = \"\")\n  word[1] <- toupper(word[1])\n  return(word)\n}\n\nsnake_to_camel(\"hello_world\")\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[2:length(word)] <- toupper(word[2:length(word)])\n  word <- paste(word, collapse = \"\")\n  return(word)\n}\n",
    "\n  # Split the word by \"_\"\n  word_split <- strsplit(word, \"_\")[[1]]\n  \n  # Capitalize the first letter of each word\n  word_split <- toupper(substr(word_split, 1, 1)) + substr(word_split, 2, nchar(word_split))\n  \n  # Join the words together\n  word_split <- paste(word_split, collapse = \"\")\n  \n  # Return the word\n  return(word_split)\n}\n\nsnake_to_camel(\"hello_world\")\n",
    "\n  # Split the word on the underscores.\n  split_word <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word.\n  capitalized_word <- paste(toupper(substring(split_word, 1, 1)),\n                            substring(split_word, 2),\n                            sep = \"\",\n                            collapse = \"\")\n  # Return the capitalized word.\n  return(capitalized_word)\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word <- paste(word, collapse = \"\")\n  word <- gsub(\"(.)\", \"\\\\U\\\\1\", word, perl = TRUE)\n  word <- gsub(\"^.\", \"\\\\L\\\\1\", word, perl = TRUE)\n  return(word)\n}\n",
    "\n  # Split the word into a vector of strings.\n  word_split <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word.\n  word_split <- toupper(substring(word_split, 1, 1)) + substring(word_split, 2)\n  # Return the word as a string.\n  return(paste(word_split, collapse = \"\"))\n}\n",
    "\n  # Split the word at the underscores\n  split_word <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  split_word <- toupper(substring(split_word, 1, 1)) * substring(split_word, 2)\n  # Paste the words together\n  paste(split_word, collapse = \"\")\n}\n\nsnake_to_camel(\"hello_world\")\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[2:length(word)] <- toupper(word[2:length(word)])\n  word <- paste(word, collapse = \"\")\n  return(word)\n}\n",
    "\n  word <- gsub(\"_([a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\"^([a-z])\", \"\\\\U\\\\1\", word)\n  return(word)\n}\n\nsnake_to_camel(\"hello_world\")\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word <- paste(word, collapse = \"\")\n  word <- gsub(\"(.)\", \"\\\\U\\\\1\", word, perl = TRUE)\n  word <- gsub(\"^.\", \"\\\\L\\\\1\", word, perl = TRUE)\n  return(word)\n}\n",
    "\n  # Split the word into a vector of strings\n  word_split <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  word_split <- toupper(substring(word_split, 1, 1)) * substring(word_split, 2)\n  # Paste the words together\n  paste(word_split, collapse = \"\")\n}\n",
    "\n  # split the word by \"_\"\n  word_split <- strsplit(word, \"_\")[[1]]\n  # capitalize the first letter of each word\n  word_split <- toupper(substr(word_split, 1, 1)) + substr(word_split, 2, nchar(word_split))\n  # paste the words together\n  word_camel <- paste(word_split, collapse = \"\")\n  return(word_camel)\n}\n",
    "\n  word <- gsub(\"_\", \" \", word)\n  word <- gsub(\"(^[a-z])|([ ]+[a-z])\", \"\\\\U\\\\1\", word)\n  word <- gsub(\" \", \"\", word)\n  return(word)\n}\n",
    "\n  # Split the word into a vector of words\n  words <- strsplit(word, \"_\")[[1]]\n  # Capitalize the first letter of each word\n  words <- toupper(substring(words, 1, 1)) * substring(words, 2)\n  # Paste the words together\n  paste(words, collapse = \"\")\n}\n",
    "\n  word <- strsplit(word, \"_\")[[1]]\n  word[1] <- tolower(word[1])\n  word[-1] <- toupper(word[-1])\n  return(paste(word, collapse = \"\"))\n}\n",
    "\n  word <- gsub(\"_\", \" \", word)\n  word <- gsub(\"(\\\\w)(\\\\w*)\", \"\\\\U\\\\1\\\\L\\\\2\", word)\n  word <- gsub(\" \", \"\", word)\n  return(word)\n}\n"
  ]
}