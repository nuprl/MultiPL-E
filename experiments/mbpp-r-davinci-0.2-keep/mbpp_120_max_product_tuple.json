{
  "name": "mbpp_120_max_product_tuple",
  "language": "r",
  "prompt": "# Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\nmax_product_tuple <- function(list1) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_120_max_product_tuple.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- max_product_tuple\n    if(!identical(candidate(list(list(2, 7), list(2, 6), list(1, 8), list(4, 9))), 36)){quit('no', 1)}\n    if(!identical(candidate(list(list(10, 20), list(15, 2), list(5, 10))), 200)){quit('no', 1)}\n    if(!identical(candidate(list(list(11, 44), list(10, 15), list(20, 5), list(12, 9))), 484)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- abs(list1[[i]][1] * list1[[j]][1])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  # Create a list of all possible pairs of tuples\n  list_pairs <- combn(list1, 2)\n  \n  # Create a list of all possible products of tuples\n  list_products <- list_pairs[1,] * list_pairs[2,]\n  \n  # Return the maximum product\n  return(max(list_products))\n}\n",
    "\n  list1 <- as.data.frame(list1)\n  list1$product <- list1$V1 * list1$V2\n  list1$abs_product <- abs(list1$product)\n  max(list1$abs_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- list1[[i]][1] * list1[[j]][2]\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- list1[[i]][1] * list1[[j]][2]\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- abs(list1[[i]][1] * list1[[j]][1])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- list1[[i]][1] * list1[[j]][2]\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_prod <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        prod <- abs(list1[[i]][1] * list1[[j]][2])\n        if (prod > max_prod) {\n          max_prod <- prod\n        }\n      }\n    }\n  }\n  max_prod\n}\n",
    "\n  # Write your code here\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- list1[[i]][1] * list1[[j]][2]\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- abs(list1[[i]][1] * list1[[j]][1])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  # Create a vector of all the products of the tuples.\n  products <- list1[,1] * list1[,2]\n  # Return the maximum product.\n  return(max(products))\n}\n",
    "\n  # Create a list of all possible pairs of tuples\n  list2 <- combn(list1, 2)\n  # Create a list of all possible products between numbers in pairs of tuples\n  list3 <- list2[1, ] * list2[2, ]\n  # Find the maximum absolute product between numbers in pairs of tuples\n  max(abs(list3))\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- abs(list1[[i]][1] * list1[[j]][2])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- abs(list1[[i]][1] * list1[[j]][2])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- prod(list1[[i]]) * prod(list1[[j]])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- abs(list1[[i]][1] * list1[[j]][1])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- list1[[i]][1] * list1[[j]][2]\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_product <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        product <- prod(list1[[i]]) * prod(list1[[j]])\n        if (product > max_product) {\n          max_product <- product\n        }\n      }\n    }\n  }\n  return(max_product)\n}\n",
    "\n  max_prod <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        prod <- abs(list1[[i]][1] * list1[[j]][2])\n        if (prod > max_prod) {\n          max_prod <- prod\n        }\n      }\n    }\n  }\n  return(max_prod)\n}\n",
    "\n  max_prod <- 0\n  for (i in 1:length(list1)) {\n    for (j in 1:length(list1)) {\n      if (i != j) {\n        prod <- abs(list1[[i]][[1]] * list1[[j]][[2]])\n        if (prod > max_prod) {\n          max_prod <- prod\n        }\n      }\n    }\n  }\n  return(max_prod)\n}\n"
  ]
}