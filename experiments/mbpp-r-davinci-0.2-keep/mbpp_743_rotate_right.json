{
  "name": "mbpp_743_rotate_right",
  "language": "r",
  "prompt": "# Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\nrotate_right <- function(list, m) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_743_rotate_right.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- rotate_right\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 3), list(8, 9, 10, 1, 2, 3, 4, 5, 6, 7))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 2), list(9, 10, 1, 2, 3, 4, 5, 6, 7, 8))){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5), list(6, 7, 8, 9, 10, 1, 2, 3, 4, 5))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list) - m + 1):length(list)]\n}\n\nrotate_right(c(1, 2, 3, 4, 5), 2)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  # Write your code here\n  return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1, 2, 3, 4, 5), 2)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    m <- m %% length(list)\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  m <- m %% length(list)\n  list <- c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n  return(list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  } else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list) - m + 1):length(list)]\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  if (length(list) == 0) {\n    return(list)\n  }\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  n <- length(list)\n  m <- m %% n\n  return(c(list[(n-m+1):n], list[1:(n-m)]))\n}\n",
    "\n  list <- c(list, list[1:m])\n  list[-(1:m)]\n}\n",
    "\n  list[(length(list)-m+1):length(list)]\n}\n\nrotate_right(c(1,2,3,4,5), 3)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  list <- list[(length(list) - m + 1):length(list)]\n  list <- c(list, list[1:(length(list) - m)])\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n    if (m < 0) {\n        stop(\"m should be positive\")\n    }\n    if (m > length(list)) {\n        stop(\"m should be less than length of list\")\n    }\n    if (m == 0) {\n        return(list)\n    }\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  return(list[(length(list)-m+1):length(list)])\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n",
    "\n  list <- list[(length(list)-m+1):length(list)]\n  list <- c(list, list[1:(length(list)-m)])\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  list[(length(list)-m+1):length(list)] <- list[1:m]\n  list[1:m] <- NULL\n  return(list)\n}\n",
    "\n  n <- length(list)\n  m <- m %% n\n  return(c(list[(n-m+1):n], list[1:(n-m)]))\n}\n",
    "\n  if (m > 0) {\n    m <- m %% length(list)\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  } else {\n    return(list)\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  list <- c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n  return(list)\n}\n",
    "\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n    list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n    list[1:m] <- list[(length(list)-m+1):length(list)]\n    return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  # Write your code here\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  n <- length(list)\n  m <- m %% n\n  return(c(list[(n-m+1):n], list[1:(n-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  length <- length(list)\n  m <- m %% length\n  list[(length - m + 1):length] <- list[1:m]\n  list[1:(length - m)] <- list[(m + 1):length]\n  list\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  # Write your code here\n  list <- list[(length(list)-m+1):length(list)]\n  list <- c(list, list[1:(length(list)-m)])\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n    if (m == 0) {\n        return(list)\n    }\n    else {\n        return(c(list[length(list)-m+1:length(list)], list[1:length(list)-m]))\n    }\n}\n",
    "\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)]\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  return(c(list[(m+1):length(list)], list[1:m]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n    n <- length(list)\n    m <- m %% n\n    return(c(list[(n - m + 1):n], list[1:(n - m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  m <- m %% length(list)\n  list[(length(list)-m+1):length(list)] <- list[1:m]\n  list[1:m] <- NULL\n  return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m > length(list)) {\n    m <- m %% length(list)\n  }\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n    list[(length(list) - m + 1):length(list)] <- list[1:m]\n    list[1:m] <- NULL\n    list\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  list[(length(list)-m+1):length(list)]\n}\n\nrotate_right(list, 3)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n\nrotate_right(c(1, 2, 3, 4, 5), 2)\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n\nrotate_right(list, 2)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:m]\n  list[1:m] <- NULL\n  return(list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    m <- m %% length(list)\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n    m <- m %% length(list)\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n\nrotate_right(1:10, 3)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list)-m+1:length(list)], list[1:length(list)-m]))\n  }\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n\nrotate_right(1:10, 3)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n\nrotate_right(1:10, 3)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n\nrotate_right(c(1,2,3,4,5,6,7,8,9,10), 3)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[c(length(list)-m+1:length(list), 1:length(list)-m)]\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n\nrotate_right(1:10, 3)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  list <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n    m <- m %% length(list)\n    list <- list[(length(list)-m+1):length(list)]\n    list <- c(list, list[1:(length(list)-m)])\n    return(list)\n}\n",
    "\n  return(list[(length(list)-m+1):length(list)])\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  } else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  # m is the number of items to rotate\n  # if m is negative, rotate left\n  if (m < 0) {\n    m <- length(list) + m\n  }\n  # if m is greater than the length of the list, rotate by the modulus\n  if (m > length(list)) {\n    m <- m %% length(list)\n  }\n  # if m is 0, return the list\n  if (m == 0) {\n    return(list)\n  }\n  # if m is greater than 0, rotate right\n  if (m > 0) {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  if (m > 0) {\n    for (i in 1:m) {\n      list <- c(list[length(list)], list[-length(list)])\n    }\n  }\n  return(list)\n}\n\nrotate_right(list, 3)\n",
    "\n  m <- m %in% 0:length(list)\n  c(list[m+1:length(list)], list[1:m])\n}\nrotate_right(1:10, 3)\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\nrotate_right(1:10, 3)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  n <- length(list)\n  m <- m %% n\n  return(c(list[(n-m+1):n], list[1:(n-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  n <- length(list)\n  m <- m %% n\n  return(c(list[(n-m+1):n], list[1:(n-m)]))\n}\n",
    "\n    m <- m %% length(list)\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  # Write your code here\n  list <- c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n  return(list)\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n\nrotate_right(c(1, 2, 3, 4, 5), 2)\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n    list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n    list[1:m] <- list[(length(list) - m + 1):length(list)]\n    return(list)\n}\n",
    "\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  } else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n\nrotate_right(c(1, 2, 3, 4, 5), 2)\n",
    "\n  # m is the number of items to rotate\n  # list is the list to be rotated\n  # return the rotated list\n  m <- m %% length(list)\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  list\n}\n",
    "\n  list[c(length(list)-m+1:length(list), 1:length(list)-m)]\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  return(c(list[(m+1):length(list)], list[1:m]))\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n}\n",
    "\n  m <- m %% length(list)\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:(length(list) - m)] <- NULL\n  return(list)\n}\n",
    "\n  m <- m %% length(list)\n  c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)])\n}\n\nrotate_right(c(1,2,3,4,5), 2)\n",
    "\n  list[(length(list) - m + 1):length(list)]\n}\n\nrotate_right(1:10, 3)\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  # m is the number of items to rotate\n  # if m is negative, rotate left\n  if (m < 0) {\n    m <- -m\n    list <- rev(list)\n  }\n  # if m is greater than the length of the list, rotate by the remainder\n  if (m > length(list)) {\n    m <- m %% length(list)\n  }\n  # rotate the list\n  list <- c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)])\n  return(list)\n}\n",
    "\n    if (m == 0) {\n        return(list)\n    }\n    else {\n        return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n    }\n}\n",
    "\n  if(m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n  }\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  if (length(list) == 0) {\n    return(list)\n  }\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  list[c(length(list)-m+1:length(list), 1:length(list)-m)]\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[length(list) - m + 1:length(list)], list[1:length(list) - m]))\n  }\n}\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list <- c(list, list[1:m])\n  list[-(1:m)]\n}\n",
    "\n  m <- m %% length(list)\n  return(c(list[(length(list) - m + 1):length(list)], list[1:(length(list) - m)]))\n}\n",
    "\n  if (m == 0) {\n    return(list)\n  }\n  else {\n    return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n  }\n}\n\nrotate_right(c(1,2,3,4,5,6), 2)\n",
    "\n  return(c(list[(length(list)-m+1):length(list)], list[1:(length(list)-m)]))\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list)-m+1):length(list)] <- list[1:(length(list)-m)]\n  list[1:m] <- list[(length(list)-m+1):length(list)]\n  return(list)\n}\n",
    "\n  list[(length(list) - m + 1):length(list)] <- list[1:(length(list) - m)]\n  list[1:m] <- list[(length(list) - m + 1):length(list)]\n  return(list)\n}\n"
  ]
}