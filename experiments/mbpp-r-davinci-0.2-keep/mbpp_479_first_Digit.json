{
  "name": "mbpp_479_first_Digit",
  "language": "r",
  "prompt": "# Write a python function to find the first digit of a given number.\nfirst_Digit <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_479_first_Digit.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- first_Digit\n    if(!identical(candidate(123), 1)){quit('no', 1)}\n    if(!identical(candidate(456), 4)){quit('no', 1)}\n    if(!identical(candidate(12), 1)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    n <- as.character(n)\n    n <- substr(n, 1, 1)\n    n <- as.numeric(n)\n    return(n)\n}\nfirst_Digit(n = 1234)\nfirst_Digit(n = 567)\nfirst_Digit(n = 890)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    n <- as.character(n)\n    n <- substr(n, 1, 1)\n    n <- as.integer(n)\n    return(n)\n}\nfirst_Digit(123)\nfirst_Digit(67.89)\n",
    "\n  n <- abs(n)\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = -1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65.34)\nfirst_Digit(-56)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  n <- abs(n)\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while (n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  print(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while (n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  if(n < 0) {\n    n <- -n\n  }\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(26785)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 567)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    n <- as.character(n)\n    n <- substr(n, 1, 1)\n    n <- as.numeric(n)\n    return(n)\n}\n\nfirst_Digit(123)\nfirst_Digit(65.34)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- abs(n)\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = -123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  n <- abs(n)\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(65.34)\nfirst_Digit(-56)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n,1,1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 123)\nfirst_Digit(n = 67.89)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n    n <- abs(n)\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = -12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n    n <- as.character(n)\n    n <- substr(n, 1, 1)\n    n <- as.numeric(n)\n    return(n)\n}\nfirst_Digit(123)\nfirst_Digit(123.45)\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 56789)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 56789)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 567)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  return(substr(n, 1, 1))\n}\n\nfirst_Digit(n = 12345)\n",
    "\n    while (n>=10) {\n        n <- n%/%10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  if (n < 0) {\n    n <- -n\n  }\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\nfirst_Digit(1234)\nfirst_Digit(12345)\nfirst_Digit(123456)\nfirst_Digit(1234567)\nfirst_Digit(12345678)\nfirst_Digit(123456789)\nfirst_Digit(1234567890)\nfirst_Digit(12345678901)\nfirst_Digit(123456789012)\nfirst_Digit(1234567890123)\nfirst_Digit(12345678901234)\nfirst_Digit(123456789012345)\nfirst_Digit(1234567890123456)\nfirst_Digit(12345678901234567)\nfirst_Digit(123456789012345678)\nfirst_Digit(1234567890123456789)\nfirst_Digit(12345678901234567890)\nfirst_Digit(123456789012345678901)\nfirst_Digit(1234567890123456789012)\nfirst_Digit(12345678901234567890123)\nfirst_Digit(123456789012345678901234)\nfirst_Digit(1234567890123456789012345)\nfirst_Digit(12345678901234567890123456)\nfirst_Digit(123456789012345678901234567)\nfirst_Digit(1234567890123456789012345678)\nfirst_Digit(12345678901234567890123456789)\nfirst_Digit(123456789012345678901234567890)\nfirst_Digit(1234567890123456789012345678901)\nfirst_Digit(12345678901234567890123456789012)\nfirst_Digit(123456789012345",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\nfirst_Digit(n = 6789)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n[1]\n}\nfirst_Digit(1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while (n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while (n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  # Use floor() to get the first digit\n  return(floor(n/10))\n}\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- abs(n)\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 567)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  if(n < 0) {\n    n <- -n\n  }\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = -123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(1234)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.integer(n)\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\n\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 567)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(123)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 567)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 12345)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  n <- substr(n, 1, 1)\n  n <- as.numeric(n)\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 1234)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\n\nfirst_Digit(n = 123)\n",
    "\n  n <- as.character(n)\n  return(substr(n, 1, 1))\n}\nfirst_Digit(n = 1234)\n",
    "\n  while(n >= 10) {\n    n <- n %/% 10\n  }\n  return(n)\n}\nfirst_Digit(n = 123)\n",
    "\n    while(n >= 10) {\n        n <- n %/% 10\n    }\n    return(n)\n}\nfirst_Digit(n = 123)\n"
  ]
}