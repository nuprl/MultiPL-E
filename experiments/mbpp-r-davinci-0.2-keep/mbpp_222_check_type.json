{
  "name": "mbpp_222_check_type",
  "language": "r",
  "prompt": "# Write a function to check if all the elements in tuple have same data type or not.\ncheck_type <- function(test_tuple) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_222_check_type.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- check_type\n    if(!identical(candidate(list(5, 6, 7, 3, 5, 6)), TRUE)){quit('no', 1)}\n    if(!identical(candidate(list(1, 2, '4')), FALSE)){quit('no', 1)}\n    if(!identical(candidate(list(3, 2, 1, 4, 5)), TRUE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[[i]]) != typeof(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    print(\"All elements have same data type\")\n  } else {\n    print(\"Elements have different data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  data_type <- typeof(test_tuple[1])\n  for(i in test_tuple) {\n    if(typeof(i) != data_type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    print(\"All elements have same data type\")\n  } else {\n    print(\"All elements do not have same data type\")\n  }\n}\n",
    "\n    for(i in 1:length(test_tuple)) {\n        if(typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n\ncheck_type(test_tuple)\n",
    "\n  type <- typeof(test_tuple[1])\n  for (i in 1:length(test_tuple)) {\n    if (typeof(test_tuple[i]) != type) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n\ncheck_type(tuple)\n",
    "\n  test_tuple <- as.list(test_tuple)\n  test_tuple <- lapply(test_tuple, typeof)\n  if (length(unique(test_tuple)) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\ncheck_type(tuple)\n",
    "\n  if(length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"Elements have different data type\")\n  }\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    print(\"All elements have same data type\")\n  } else {\n    print(\"All elements do not have same data type\")\n  }\n}\n",
    "\n    for (i in 1:length(test_tuple)) {\n        if (typeof(test_tuple[i]) != typeof(test_tuple[1])) {\n            return(FALSE)\n        }\n    }\n    return(TRUE)\n}\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[[i]]) != class(test_tuple[[1]])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if (length(unique(sapply(test_tuple, typeof))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  for (i in 1:length(test_tuple)) {\n    if (class(test_tuple[i]) != class(test_tuple[1])) {\n      return(FALSE)\n    }\n  }\n  return(TRUE)\n}\n",
    "\n  if(length(unique(sapply(test_tuple, class))) == 1) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    return(\"All elements have same data type\")\n  } else {\n    return(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n",
    "\n  if (length(unique(sapply(test_tuple, class))) == 1) {\n    print(\"All elements have same data type\")\n  } else {\n    print(\"All elements do not have same data type\")\n  }\n}\n\ncheck_type(test_tuple)\n"
  ]
}