{
  "name": "mbpp_461_upper_ctr",
  "language": "r",
  "prompt": "# Write a python function to count the upper case characters in a given string.\nupper_ctr <- function(str) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- upper_ctr\n    if(!identical(candidate('PYthon'), 1)){quit('no', 1)}\n    if(!identical(candidate('BigData'), 1)){quit('no', 1)}\n    if(!identical(candidate('program'), 0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n",
    "\n  str_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str_sub(str, i, i) %in% LETTERS) {\n      str_ctr <- str_ctr + 1\n    }\n  }\n  return(str_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      break\n    }\n    if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in str) {\n    if (i %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= \"A\" & str[i] <= \"Z\") {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= 'A' & str[i] <= 'Z') {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr('Hello World')\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    return(sum(str_count(str, \"[A-Z]\")))\n}\n",
    "\n  return(sum(str_detect(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      upper_ctr <- upper_ctr + 0\n    } else if (str_sub(str, i, i) %in% letters) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[[:upper:]]\", str)))\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_count <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_count <- upper_count + 1\n    }\n  }\n  return(upper_count)\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= 'A' & str[i] <= 'Z') {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      next\n    } else if (str_sub(str, i, i) == toupper(str_sub(str, i, i))) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[[:upper:]]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[[:upper:]]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% letters & str[i] == toupper(str[i])) {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= \"A\" & str[i] <= \"Z\") {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (substr(str, i, i) %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    return(sum(str_detect(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      next\n    }\n    if (str_sub(str, i, i) %in% letters) {\n      if (str_sub(str, i, i) == str_to_upper(str_sub(str, i, i))) {\n        upper_ctr <- upper_ctr + 1\n      }\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  ctr\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] == toupper(str[i])) {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      next\n    } else if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      upper_ctr <- upper_ctr + 0\n    } else if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_count <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_count <- upper_count + 1\n    }\n  }\n  return(upper_count)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_detect(str, \"[A-Z]\")))\n}\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n",
    "\n  upper_count <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_count <- upper_count + 1\n    }\n  }\n  return(upper_count)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] == toupper(str[i])) {\n            upper <- upper + 1\n        }\n    }\n    return(upper)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\nupper_ctr(\"Hello Mr. Rogers, how are you this fine Tuesday?\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello Mr. Rogers, how are you this fine Tuesday?\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (is.na(str_sub(str, i, i))) {\n            next\n        }\n        if (str_sub(str, i, i) %in% LETTERS) {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_detect(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      upper_ctr <- upper_ctr\n    } else if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_extract(str, i))) {\n      upper_ctr <- upper_ctr + 0\n    } else if (str_extract(str, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\nupper_ctr(\"Hello Mr. Rogers, how are you this fine Tuesday?\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    return(sum(str_detect(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_count <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_count <- upper_count + 1\n    }\n  }\n  return(upper_count)\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= 'A' & str[i] <= 'Z') {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_detect(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= 'A' & str[i] <= 'Z') {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello Mr. Rogers, how are you this fine Tuesday?\")\n",
    "\n  return(sum(grepl(\"[[:upper:]]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] >= \"A\" & str[i] <= \"Z\") {\n            upper_ctr <- upper_ctr + 1\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (substr(str, i, i) %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% letters) {\n      if (str[i] == toupper(str[i])) {\n        upper_ctr <- upper_ctr + 1\n      }\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= \"A\" & str[i] <= \"Z\") {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_count <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      next\n    }\n    if (str_sub(str, i, i) %in% LETTERS) {\n      upper_count <- upper_count + 1\n    }\n  }\n  return(upper_count)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      upper_ctr <- upper_ctr + 0\n    } else if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    } else {\n      upper_ctr <- upper_ctr + 0\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      next\n    } else if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_detect(str, \"[A-Z]\")))\n}\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(grepl(\"[A-Z]\", str)))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% letters) {\n            if (str[i] == toupper(str[i])) {\n                upper_ctr <- upper_ctr + 1\n            }\n        }\n    }\n    return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_count <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_count <- upper_count + 1\n    }\n  }\n  return(upper_count)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] >= \"A\" & str[i] <= \"Z\") {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  sum(str_count(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_detect(str, \"[A-Z]\")))\n}\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_count(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello Mr. Rogers, how are you this fine Tuesday?\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (is.na(str_sub(str, i, i))) {\n      upper_ctr <- upper_ctr + 0\n    } else if (str_sub(str, i, i) %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n",
    "\n  sum(str_detect(str, \"[A-Z]\"))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    ctr <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            ctr <- ctr + 1\n        }\n    }\n    return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  return(sum(str_detect(str, \"[A-Z]\")))\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n    upper_count <- 0\n    for (i in 1:nchar(str)) {\n        if (str[i] %in% LETTERS) {\n            upper_count <- upper_count + 1\n        }\n    }\n    return(upper_count)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] == toupper(str[i])) {\n      ctr <- ctr + 1\n    }\n  }\n  return(ctr)\n}\n\nupper_ctr(\"Hello World\")\n",
    "\n  upper_ctr <- 0\n  for (i in 1:nchar(str)) {\n    if (str[i] %in% LETTERS) {\n      upper_ctr <- upper_ctr + 1\n    }\n  }\n  return(upper_ctr)\n}\n"
  ]
}