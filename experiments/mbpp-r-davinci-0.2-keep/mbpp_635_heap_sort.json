{
  "name": "mbpp_635_heap_sort",
  "language": "r",
  "prompt": "# Write a function to sort the given list.\nheap_sort <- function(iterable) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_635_heap_sort.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- heap_sort\n    if(!identical(candidate(c(1, 3, 5, 7, 9, 2, 4, 6, 8, 0)), list(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))){quit('no', 1)}\n    if(!identical(candidate(c(25, 35, 22, 85, 14, 65, 75, 25, 58)), list(14, 22, 25, 25, 35, 58, 65, 75, 85))){quit('no', 1)}\n    if(!identical(candidate(c(7, 1, 9, 5)), list(1, 5, 7, 9))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    # Write your code here.\n    return(iterable)\n}\n ",
    "\n  # Your code here\n}\n",
    "\n    # Create a heap.\n    heap <- heap_create(iterable)\n    # Create a list to store the sorted elements.\n    sorted_list <- list()\n    # Iterate over the heap until it is empty.\n    while (heap_size(heap) > 0) {\n        # Pop the element with the highest priority.\n        sorted_list[[heap_size(heap)]] <- heap_pop(heap)\n    }\n    # Return the sorted list.\n    return(sorted_list)\n}",
    "\n    # Write your code here.\n    return(iterable)\n}",
    "\n  # Write your code here.\n  h = heapify(iterable)\n  for (i in length(iterable):2) {\n    h[[1]] = h[[i]]\n    h[[i]] = h[[length(h)]]\n    h = h[-length(h)]\n    h = heapify(h)\n  }\n  return(h)\n}\n",
    "\n  # Your code here\n}\n",
    "\n  # Your code here\n  return(iterable)\n}",
    "\n  # Write your code here\n  heap <- iterable\n  build_max_heap(heap)\n  for (i in length(heap):2) {\n    swap(heap, 1, i)\n    heap_size <- heap_size - 1\n    max_heapify(heap, 1)\n  }\n  return(heap)\n}\n",
    "\n    # Write your code here.\n    return(iterable)\n}",
    "\n    # Write your code here\n    return(iterable)\n}\n ",
    "\n    # Write your code here.\n    h = new_heap(iterable)\n    result = []\n    while(h.size() > 0) {\n        result.append(h.pop())\n    }\n    return result\n}\n",
    "\n    # Your code here\n}\n",
    "\n    # Your code here\n}\n",
    "\n    # Write your code here\n    heap <- iterable\n    build_max_heap(heap)\n    for (i in length(heap):2) {\n        swap(heap, 1, i)\n        heap_size <- heap_size - 1\n        max_heapify(heap, 1)\n    }\n    return(heap)\n}\n",
    "\n    # Your code here\n    return(iterable)\n}\n",
    "\n  # Write your code here\n  heap <- iterable\n  heapify(heap)\n  end <- length(heap)\n  while (end > 1) {\n    heap[1] <- heap[end]\n    end <- end - 1\n    sift_down(heap, 1, end)\n  }\n  return(heap)\n}\n",
    "\n    # Write your code here.\n    return(iterable)\n}",
    "\n    # Write your code here\n}\n",
    "\n    # Your code here\n    return(iterable)\n}\n",
    "\n    # Write your code here\n    heap <- iterable\n    heapify(heap)\n    for(i in length(heap):2) {\n        swap(heap, 1, i)\n        heap <- heap[-i]\n        heapify(heap, 1)\n    }\n    return(heap)\n}\n"
  ]
}