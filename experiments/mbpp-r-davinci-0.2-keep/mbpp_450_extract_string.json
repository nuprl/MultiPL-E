{
  "name": "mbpp_450_extract_string",
  "language": "r",
  "prompt": "# Write a function to extract specified size of strings from a given list of string values.\nextract_string <- function(str, l) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_450_extract_string.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- extract_string\n    if(!identical(candidate(c('Python', 'list', 'exercises', 'practice', 'solution'), 8), list('practice', 'solution'))){quit('no', 1)}\n    if(!identical(candidate(c('Python', 'list', 'exercises', 'practice', 'solution'), 6), list('Python'))){quit('no', 1)}\n    if(!identical(candidate(c('Python', 'list', 'exercises', 'practice', 'solution'), 9), list('exercises'))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  str <- str[nchar(str) == l]\n  return(str)\n}\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"abc\", \"def\", \"ghi\", \"jkl\"), 3)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"This\", \"is\", \"a\", \"beautiful\", \"morning\"), 5)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"This\", \"is\", \"a\", \"beautiful\", \"day\"), 4)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"abc\", \"def\", \"ghi\"), 3)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(str, 3)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(str, 3)\n",
    "\n  lapply(str, function(x) substr(x, 1, l))\n}\n\nextract_string(c(\"abc\", \"def\", \"ghi\"), 2)\n",
    "\n  str[nchar(str) == l]\n}\nextract_string(str, 5)\n",
    "\n  str_extract <- c()\n  for (i in 1:length(str)) {\n    if (nchar(str[i]) >= l) {\n      str_extract <- c(str_extract, str[i])\n    }\n  }\n  return(str_extract)\n}\n\nstr <- c(\"This is a sample string\", \"This is another sample string\", \"This is a third sample string\")\nextract_string(str, 10)\n",
    "\n  return(str[nchar(str) == l])\n}\n\nextract_string(c(\"this\", \"is\", \"a\", \"list\", \"of\", \"string\", \"values\"), 4)\n",
    "\n  str[nchar(str) == l]\n}\nextract_string(c(\"This\", \"is\", \"a\", \"list\", \"of\", \"strings\"), 2)\n",
    "\n  str <- str[nchar(str) == l]\n  return(str)\n}\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"This\", \"is\", \"a\", \"beautiful\", \"day\"), 4)\n",
    "\n  return(str[str_length(str) == l])\n}\n\nextract_string(str, 4)\n",
    "\n  return(str[nchar(str) == l])\n}\n\nextract_string(c(\"This\", \"is\", \"a\", \"beautiful\", \"day\"), 4)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"this\", \"is\", \"a\", \"list\", \"of\", \"string\", \"values\"), 4)\n",
    "\n  str[nchar(str) == l]\n}\n\nextract_string(c(\"abc\", \"def\", \"ghi\", \"jkl\"), 3)\n",
    "\n  return(str[str_length(str) == l])\n}\n\nextract_string(str, 4)\n",
    "\n  str[str_length(str) == l]\n}\n\nextract_string(c(\"abc\", \"def\", \"ghi\", \"jkl\"), 3)\n"
  ]
}