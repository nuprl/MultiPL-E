{
  "name": "mbpp_722_filter_data",
  "language": "r",
  "prompt": "# The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\nfilter_data <- function(students, h, w) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_722_filter_data.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- filter_data\n    if(!identical(candidate(list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)), 6.0, 70), list('Cierra Vega' = list(6.2, 70)))){quit('no', 1)}\n    if(!identical(candidate(list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)), 5.9, 67), list('Cierra Vega' = list(6.2, 70), 'Kierra Gentry' = list(6.0, 68)))){quit('no', 1)}\n    if(!identical(candidate(list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)), 5.7, 64), list('Cierra Vega' = list(6.2, 70), 'Alden Cantrell' = list(5.9, 65), 'Kierra Gentry' = list(6.0, 68), 'Pierre Cox' = list(5.8, 66)))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students %>%\n    filter(height > h, weight > w)\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  # your code here\n}\n",
    "\n  students[students[,1] > h & students[,2] > w,]\n}\n\nfilter_data(students, 1.7, 70)\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.7, 60)\n",
    "\n  # your code here\n}\n",
    "\n    students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.8, 70)\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students %>% filter(height > h, weight > w)\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  filter(students, height > h, weight > w)\n}\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n",
    "\n  filter(students, height > h, weight > w)\n}\n",
    "\n  # your code here\n}\n",
    "\n  students[students$height > h & students$weight > w, ]\n}\n\nfilter_data(students, 1.8, 80)\n",
    "\n  students <- Filter(function(x) x[1] > h & x[2] > w, students)\n  return(students)\n}\n",
    "\n  students[students[,1] > h & students[,2] > w,]\n}\n\nfilter_data(students, 1.8, 80)\n"
  ]
}