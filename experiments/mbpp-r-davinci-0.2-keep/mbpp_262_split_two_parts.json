{
  "name": "mbpp_262_split_two_parts",
  "language": "r",
  "prompt": "# Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\nsplit_two_parts <- function(list1, L) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_262_split_two_parts.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- split_two_parts\n    if(!identical(candidate(list(1, 1, 2, 3, 4, 4, 5, 1), 3), list(list(1, 1, 2), list(3, 4, 4, 5, 1)))){quit('no', 1)}\n    if(!identical(candidate(list('a', 'b', 'c', 'd'), 2), list(list('a', 'b'), list('c', 'd')))){quit('no', 1)}\n    if(!identical(candidate(list('p', 'y', 't', 'h', 'o', 'n'), 4), list(list('p', 'y', 't', 'h'), list('o', 'n')))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 4)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 5)\n",
    "\n  list1_1 <- list1[1:L]\n  list1_2 <- list1[(L+1):length(list1)]\n  return(list(list1_1, list1_2))\n}\n",
    "\n  list1[1:L]\n  list1[-(1:L)]\n  return(list(list1[1:L], list1[-(1:L)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(c(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 2)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(letters, 10)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(c(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 2)\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(1:10, 5)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[-(1:L)]\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_1 <- list1[1:L]\n  list1_2 <- list1[(L+1):length(list1)]\n  return(list(list1_1, list1_2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 2)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[-(1:L)]\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_1 <- list1[1:L]\n  list1_2 <- list1[(L+1):length(list1)]\n  return(list(list1_1, list1_2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_1 <- list1[1:L]\n  list1_2 <- list1[(L+1):length(list1)]\n  return(list(list1_1, list1_2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(letters, 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  split(list1, rep(1:2, c(L, length(list1)-L)))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n    list1_part1 <- list1[1:L]\n    list1_part2 <- list1[(L+1):length(list1)]\n    return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1 <- list1[1:L]\n  list2 <- list1[(L+1):length(list1)]\n  return(list(list1, list2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(letters, 10)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(letters, 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(list1, 3)\n",
    "\n  list1_1 <- list1[1:L]\n  list1_2 <- list1[(L+1):length(list1)]\n  return(list(list1_1, list1_2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\nsplit_two_parts(1:10, 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9,10), 5)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6,7,8,9), 5)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\nsplit_two_parts(list1, L)\n",
    "\n  list2 <- list1[1:L]\n  list3 <- list1[(L+1):length(list1)]\n  return(list(list2, list3))\n}\n",
    "\n  list2 <- list1[(L+1):length(list1)]\n  list1 <- list1[1:L]\n  return(list(list1, list2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1 <- list1[1:L]\n  list2 <- list1[(L+1):length(list1)]\n  return(list(list1, list2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, 4)\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(c(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1[1:L]\n  list1[(L+1):length(list1)]\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(list1, L)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n    list1[1:L]\n    list1[(L+1):length(list1)]\n    return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n\nsplit_two_parts(c(1,2,3,4,5,6), 3)\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n\nsplit_two_parts(c(1,2,3,4,5), 3)\n",
    "\n  # Your code here\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  list1_1 <- list1[1:L]\n  list1_2 <- list1[(L+1):length(list1)]\n  return(list(list1_1, list1_2))\n}\n",
    "\n  list1_part1 <- list1[1:L]\n  list1_part2 <- list1[(L+1):length(list1)]\n  return(list(list1_part1, list1_part2))\n}\n",
    "\n  return(list(list1[1:L], list1[(L+1):length(list1)]))\n}\n"
  ]
}