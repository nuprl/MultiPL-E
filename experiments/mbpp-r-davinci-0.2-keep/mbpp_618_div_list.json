{
  "name": "mbpp_618_div_list",
  "language": "r",
  "prompt": "# Write a function to divide two lists element wise.\ndiv_list <- function(nums1, nums2) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_618_div_list.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- div_list\n    if(!identical(candidate(c(4, 5, 6), c(1, 2, 3)), list(4.0, 2.5, 2.0))){quit('no', 1)}\n    if(!identical(candidate(c(3, 2), c(1, 4)), list(3.0, 0.5))){quit('no', 1)}\n    if(!identical(candidate(c(90, 120), c(50, 70)), list(1.8, 1.7142857142857142))){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if(length(nums1) != length(nums2)) {\n    stop(\"The two lists must be of the same length\")\n  }\n  else {\n    result <- vector(\"list\", length(nums1))\n    for(i in 1:length(nums1)) {\n      result[[i]] <- nums1[[i]] / nums2[[i]]\n    }\n    return(result)\n  }\n}\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"The lists must be the same length\")\n  }\n  div_list <- vector(\"numeric\", length(nums1))\n  for (i in 1:length(nums1)) {\n    div_list[i] <- nums1[i] / nums2[i]\n  }\n  return(div_list)\n}\n",
    "\n    if (length(nums1) != length(nums2)) {\n        return(NULL)\n    }\n    else {\n        return(nums1 / nums2)\n    }\n}\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be the same length\")\n  }\n  out <- vector(\"numeric\", length(nums1))\n  for (i in 1:length(nums1)) {\n    out[i] <- nums1[i] / nums2[i]\n  }\n  return(out)\n}\n\ndiv_list(nums1, nums2)\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be the same length\")\n  }\n  result <- vector(\"numeric\", length(nums1))\n  for (i in seq_along(nums1)) {\n    result[i] <- nums1[i] / nums2[i]\n  }\n  return(result)\n}\n",
    "\n  # Write your code here.\n  return(nums1/nums2)\n}\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"The two lists must be the same length.\")\n  }\n  result <- vector(\"numeric\", length(nums1))\n  for (i in seq_along(nums1)) {\n    result[i] <- nums1[i] / nums2[i]\n  }\n  return(result)\n}\n",
    "\n  if(length(nums1) != length(nums2)) {\n    stop(\"Length of lists must be equal\")\n  }\n  result <- vector(\"list\", length(nums1))\n  for(i in seq_along(nums1)) {\n    result[[i]] <- nums1[[i]] / nums2[[i]]\n  }\n  return(result)\n}\n\ndiv_list(list(1, 2, 3), list(2, 3, 4))\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be of equal length\")\n  }\n  nums1 / nums2\n}\n\ndiv_list(nums1, nums2)\n",
    "\n    if (length(nums1) != length(nums2)) {\n        stop(\"Length of lists must be equal\")\n    }\n    nums1 / nums2\n}\n",
    "\n  nums1 / nums2\n}\n\ndiv_list(nums1, nums2)\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be of equal length\")\n  }\n  result <- nums1 / nums2\n  return(result)\n}\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be of equal length.\")\n  }\n  nums1 / nums2\n}\n",
    "\n  nums1 / nums2\n}\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be the same length\")\n  }\n  result <- numeric(length(nums1))\n  for (i in seq_along(nums1)) {\n    result[i] <- nums1[i] / nums2[i]\n  }\n  return(result)\n}\n\ndiv_list(nums1, nums2)\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"Lists must be the same length\")\n  }\n  nums1 / nums2\n}\n\ndiv_list(nums1, nums2)\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"The two lists must be of the same length\")\n  }\n  result <- vector(\"numeric\", length(nums1))\n  for (i in 1:length(nums1)) {\n    result[i] <- nums1[i] / nums2[i]\n  }\n  return(result)\n}\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"The lists must be of equal length.\")\n  }\n  nums1 / nums2\n}\n\ndiv_list(nums1, nums2)\n",
    "\n  if (length(nums1) != length(nums2)) {\n    stop(\"The lists must be the same length\")\n  }\n  result <- vector(\"numeric\", length(nums1))\n  for (i in seq_along(nums1)) {\n    result[i] <- nums1[i] / nums2[i]\n  }\n  return(result)\n}\n",
    "\n  nums1 / nums2\n}\n"
  ]
}