{
  "name": "mbpp_454_text_match_wordz",
  "language": "r",
  "prompt": "# Write a function that matches a word containing 'z'.\ntext_match_wordz <- function(text) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_454_text_match_wordz.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- text_match_wordz\n    if(!identical(candidate('pythonz.'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('xyz.'), TRUE)){quit('no', 1)}\n    if(!identical(candidate('  lang  .'), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # 'word' is a special sequence; it matches a word\n  # 'z' matches any single character\n  # '*' repeats a character zero or more times\n  grepl(\"wordz*\", text)\n}\n",
    "\n  str_view(text, \"\\\\w*z\\\\w*\")\n}\n",
    "\n  if (is.na(text)) {\n    return(NA)\n  }\n  if (grepl(\"z\", text)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  if (is.na(text)) {\n    return(NA)\n  }\n  if (grepl(\"z\", text)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  str_detect(text, \"\\\\bz\\\\w*\")\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  str_detect(text, \"\\\\bz\\\\w*\")\n}\n",
    "\n  # Write your code here\n  str_detect(text, \"z\")\n}\n",
    "\n  # 'word' matches a word character (alphanumeric & underscore).\n  # '*' matches zero or more of the preceding token.\n  # 'z' matches a 'z'.\n  grepl(\"word*z\", text)\n}\n",
    "\n  # Write your code here\n  str_detect(text, \"z\")\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  # Write your code here\n  str_detect(text, \"z\")\n}\n",
    "\n  str_view(text, \"z\\\\w+\")\n}\n",
    "\n  str_view(text, \"z\")\n}\n",
    "\n  str_view(text, \"z\\\\w*\")\n}\n"
  ]
}