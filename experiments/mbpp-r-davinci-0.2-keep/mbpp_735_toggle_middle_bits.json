{
  "name": "mbpp_735_toggle_middle_bits",
  "language": "r",
  "prompt": "# Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\ntoggle_middle_bits <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_735_toggle_middle_bits.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- toggle_middle_bits\n    if(!identical(candidate(9), 15)){quit('no', 1)}\n    if(!identical(candidate(10), 12)){quit('no', 1)}\n    if(!identical(candidate(11), 13)){quit('no', 1)}\n    if(!identical(candidate(65), 127)){quit('no', 1)}\n    if(!identical(candidate(77), 115)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n <- n & 0xFFFFFFE\n  n <- n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(0xF)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n1 <- n\n  n2 <- n\n  n1 <- n1 %>% bitwShiftR(2)\n  n2 <- n2 %>% bitwShiftL(2)\n  n1 <- n1 %>% bitwNot()\n  n2 <- n2 %>% bitwNot()\n  n1 <- n1 %>% bitwAnd(n2)\n  n1 <- n1 %>% bitwOr(n)\n  return(n1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n[-c(1, length(n))] <- !n[-c(1, length(n))]\n  return(n)\n}\n\ntoggle_middle_bits(c(1, 0, 1, 1, 0, 1, 0, 1))\n",
    "\n  n & (n - 1)\n}\n\ntoggle_middle_bits(5)\n",
    "\n    n[2:(length(n)-1)] <- !n[2:(length(n)-1)]\n    return(n)\n}\n\ntoggle_middle_bits(c(1,0,0,0,1,0,1,1))\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFE\n  n = n | 0x00000001\n  n = n ^ 0xFFFFFFFC\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n <- n & 0xFFFFFFF8\n  n <- n | 0x00000004\n  n\n}\n\ntoggle_middle_bits(0xF)\ntoggle_middle_bits(0xF0)\ntoggle_middle_bits(0xF00)\ntoggle_middle_bits(0xF000)\ntoggle_middle_bits(0xF0000)\ntoggle_middle_bits(0xF00000)\ntoggle_middle_bits(0xF000000)\ntoggle_middle_bits(0xF0000000)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Your code here\n  n = n + 2^(nchar(n)-1)\n  n = n + 2^(nchar(n)-2)\n  return(n)\n}\ntoggle_middle_bits(11)\n",
    "\n    # Get the first and last bit\n    first_bit <- n %/% 2^(floor(log2(n)) + 1)\n    last_bit <- n %% 2\n    \n    # Get the number of bits to toggle\n    num_bits <- floor(log2(n)) - 1\n    \n    # Get the number of bits to toggle\n    toggle_bits <- 2^num_bits - 1\n    \n    # Toggle the bits\n    n <- n %% 2^(num_bits + 1)\n    n <- n %% 2^num_bits\n    n <- n ^ toggle_bits\n    \n    # Add the first and last bit\n    n <- n + 2^num_bits * first_bit + last_bit\n    \n    return(n)\n}\n\ntoggle_middle_bits(11)\n",
    "\n  # Write your code here\n  n = n + 2^(floor(log2(n))-1)\n  n = n + 2^(floor(log2(n))-2)\n  n = n + 2^(floor(log2(n))-3)\n  n = n + 2^(floor(log2(n))-4)\n  n = n + 2^(floor(log2(n))-5)\n  n = n + 2^(floor(log2(n))-6)\n  n = n + 2^(floor(log2(n))-7)\n  n = n + 2^(floor(log2(n))-8)\n  n = n + 2^(floor(log2(n))-9)\n  n = n + 2^(floor(log2(n))-10)\n  n = n + 2^(floor(log2(n))-11)\n  n = n + 2^(floor(log2(n))-12)\n  n = n + 2^(floor(log2(n))-13)\n  n = n + 2^(floor(log2(n))-14)\n  n = n + 2^(floor(log2(n))-15)\n  n = n + 2^(floor(log2(n))-16)\n  n = n + 2^(floor(log2(n))-17)\n  n = n + 2^(floor(log2(n))-18)\n  n = n + 2^(floor(log2(n))-19)\n  n = n + 2^(floor(log2(n))-20)\n  n = n + 2^(floor(log2(n))-21)\n  n = n + 2^(floor(log2(n))-22)\n  n = n + 2^(floor(log2(n))-23)\n  n = n + 2^(floor(log2(n))-24)\n  n = n + 2^(floor(log2(n))-25)\n  n = n + 2^(floor(log2(n))-26)\n  n = n + 2^(floor",
    "\n  n_bin <- as.integer(as.character(as.raw(n)))\n  n_bin[2:(length(n_bin)-1)] <- !n_bin[2:(length(n_bin)-1)]\n  n_bin <- as.raw(n_bin)\n  return(as.integer(n_bin))\n}\n\ntoggle_middle_bits(0b1101)\n",
    "\n  # Write your code here\n  n = n & 0xfffffffc\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n",
    "\n  n[-c(1, length(n))] <- !n[-c(1, length(n))]\n  n\n}\n\ntoggle_middle_bits(c(0, 0, 0, 0, 0, 0, 0, 0))\n",
    "\n  # Write your code here\n  # return(n)\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000005\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Your code here\n  n = as.integer(n)\n  n = n%%2^(floor(log2(n))-1)\n  n = n + 2^(floor(log2(n))-1)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFFC\n    n = n | 0x00000002\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  # Return the output\n  # Do not print the output, instead return values as specified\n  # Subtracting 1 from the number toggles all the bits except the first and the last bit.\n  # Adding 1 to the number toggles all the bits except the first and the last bit.\n  # XORing the number with the result of the above two steps toggles all the bits except the first and the last bit.\n  return(n ^ ((n - 1) + (n + 1)))\n}\n\ntoggle_middle_bits(10)\n",
    "\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0xF)\n",
    "\n    # Write your code here\n    return(n)\n}\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n1 <- n & 0xfffffffc\n  n2 <- n & 0x00000003\n  n3 <- n1 | n2\n  return(n3)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFE\n  n = n | 0x00000001\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n",
    "\n  # Your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n <- as.integer(n)\n  n <- n %% 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)\n  n <- n + 2^(floor(log2(n))-1)",
    "\n  # Write your code here\n  n <- as.integer(n)\n  n <- n %/% 2\n  n <- n * 2\n  n <- n + 1\n  return(n)\n}\n\ntoggle_middle_bits(11)\n",
    "\n    # Write your code here\n    # Return the result\n    return(n)\n}\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000054\n    return(n)\n}\n\ntoggle_middle_bits(0x00000057)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = as.integer(n)\n  n = n - (n %% 2)\n  n = n + (n %% 4)\n  n = n + (n %% 8)\n  n = n + (n %% 16)\n  n = n + (n %% 32)\n  n = n + (n %% 64)\n  n = n + (n %% 128)\n  n = n + (n %% 256)\n  n = n + (n %% 512)\n  n = n + (n %% 1024)\n  n = n + (n %% 2048)\n  n = n + (n %% 4096)\n  n = n + (n %% 8192)\n  n = n + (n %% 16384)\n  n = n + (n %% 32768)\n  n = n + (n %% 65536)\n  n = n + (n %% 131072)\n  n = n + (n %% 262144)\n  n = n + (n %% 524288)\n  n = n + (n %% 1048576)\n  n = n + (n %% 2097152)\n  n = n + (n %% 4194304)\n  n = n + (n %% 8388608)\n  n = n + (n %% 16777216)\n  n = n + (n %% 33554432)\n  n = n + (n %% 67108864)\n  n = n + (n %% 134217728)\n  n = n + (n %% 268435456)\n  n = n + (n %% 536870912)\n  n = n + (n %% 1073741824)\n  n = n + (n %% 2147483648)\n  n = n + (n %% 4294967296)\n  n = n + (n %% 8589934592)\n  n = n + (n %% 17179869184)\n  n = n + (n %% 34359738368)\n  n = n + (n %% 68719476736)\n  n = n + (n %% 137438953472)\n  n = n + (n %% 274877906944)\n  n =",
    "\n    # Write your code here\n    n = n & 0xFFFFFFE\n    n = n | 0x5555554\n    return(n)\n}\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n <- n & 0xFFFFFFE\n  n <- n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0x55555555)\n",
    "\n  n = n & 0xFFFFFFE\n  n = n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(0xF)\ntoggle_middle_bits(0x7)\ntoggle_middle_bits(0x5)\n",
    "\n  n & (n - 1)\n}\n\ntoggle_middle_bits(5)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x0000001\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    return(n)\n}\n",
    "\n  # Write your code here\n  n = n - (n %% 2)\n  n = n - (n %% 4)\n  n = n + (n %% 8)\n  n = n + (n %% 16)\n  n = n + (n %% 32)\n  n = n + (n %% 64)\n  n = n + (n %% 128)\n  n = n + (n %% 256)\n  n = n + (n %% 512)\n  n = n + (n %% 1024)\n  n = n + (n %% 2048)\n  n = n + (n %% 4096)\n  n = n + (n %% 8192)\n  n = n + (n %% 16384)\n  n = n + (n %% 32768)\n  n = n + (n %% 65536)\n  n = n + (n %% 131072)\n  n = n + (n %% 262144)\n  n = n + (n %% 524288)\n  n = n + (n %% 1048576)\n  n = n + (n %% 2097152)\n  n = n + (n %% 4194304)\n  n = n + (n %% 8388608)\n  n = n + (n %% 16777216)\n  n = n + (n %% 33554432)\n  n = n + (n %% 67108864)\n  n = n + (n %% 134217728)\n  n = n + (n %% 268435456)\n  n = n + (n %% 536870912)\n  n = n + (n %% 1073741824)\n  n = n + (n %% 2147483648)\n  return(n)\n}\n\ntoggle_middle_bits(100)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000005\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  return(n ^ (2^(floor(log2(n))-1)-1))\n}\ntoggle_middle_bits(23)\n",
    "\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  n\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n))-1)\n  n = n - 2^(floor(log2(n))-1)\n  n = n + 2^(floor(log2(n))-1)\n  n = n + 2^(floor(log2(n))-1)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    # Return the result\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Get the first bit\n    first_bit <- n %/% (2^(floor(log2(n)) + 1))\n    # Get the last bit\n    last_bit <- n %% 2\n    # Get the number of bits to toggle\n    num_bits_to_toggle <- floor(log2(n)) - 1\n    # Get the number of bits to toggle\n    num_bits_to_toggle <- floor(log2(n)) - 1\n    # Get the number to toggle\n    num_to_toggle <- n %% (2^(num_bits_to_toggle + 1))\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Get the number to toggle\n    num_to_toggle <- n %% (2^(num_bits_to_toggle + 1))\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n    # Toggle the bits\n    num_to_toggle <- num_to_toggle %% (2^num_bits_to_toggle)\n",
    "\n    # Write your code here\n    n = n %/% 2\n    n = n * 2\n    n = n + 1\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  # Return the result\n  return(n)\n}\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(0xF)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n <- n - 2^(floor(log2(n))-1) - 2^1\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n",
    "\n  # Write your code here\n  n = n - 2^(which(intToBits(n)[-1] == 1)[1])\n  n = n - 2^(which(intToBits(n)[-1] == 1)[1])\n  n = n + 2^(which(intToBits(n)[-1] == 1)[1])\n  n = n + 2^(which(intToBits(n)[-1] == 1)[1])\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFE\n  n = n & 0xFFFFFFFD\n  n = n | 0x00000002\n  n = n | 0x00000001\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n <- n & 0xFFFFFFFC\n  n <- n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFF8)\n",
    "\n    n & (2^(ncol(intToBits(n))-2)-1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(0xF)\n",
    "\n  # Your code here\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n))-1) - 2^1\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)))\n  n = n - 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n)))\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n[2:(length(n)-1)] <- !n[2:(length(n)-1)]\n  return(n)\n}\n\ntoggle_middle_bits(c(0,0,1,1,1,0,0,0))\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(10)\n ",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n + 2^(floor(log(n, 2)) - 1)\n  n = n + 2^(floor(log(n, 2)) - 2)\n  n = n - 2^(floor(log(n, 2)) - 1)\n  n = n - 2^(floor(log(n, 2)) - 2)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n))-1) - 2^1\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # your code goes here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    n <- n & 0xFFFFFFE\n    n <- n | 0x5555554\n    return(n)\n}\n\ntoggle_middle_bits(0xF)\n",
    "\n  n[-c(1, length(n))] <- !n[-c(1, length(n))]\n  n\n}\n\ntoggle_middle_bits(c(1, 0, 1, 0, 1, 0, 1, 0))\n",
    "\n    # Write your code here\n    n = n - 2^(floor(log2(n))-1)\n    n = n - 2^(floor(log2(n))-1)\n    n = n + 2^(floor(log2(n))-1)\n    n = n + 2^(floor(log2(n))-1)\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n",
    "\n  # Write your code here\n  n_bin <- as.integer(strsplit(as.character(as.integer(n)),'')[[1]])\n  n_bin[2:(length(n_bin)-1)] <- 1 - n_bin[2:(length(n_bin)-1)]\n  n_bin <- as.integer(paste(n_bin, collapse = ''))\n  return(n_bin)\n}\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  n\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000004\n    return(n)\n}\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  return(n ^ (2^(floor(log2(n))-1)) - 1)\n}\n\ntoggle_middle_bits(23)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000001\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n",
    "\n  # Write your code here\n  n = n %/% 2\n  n = n * 2\n  n = n + 1\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n & (n - 1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n[2:(length(n)-1)] <- !n[2:(length(n)-1)]\n  return(n)\n}\n\ntoggle_middle_bits(c(1,0,0,1,1,0,1,0))\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000004\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n))-1) - 2^(floor(log2(n))-2)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 1\n  n = n ^ (n >> 1)\n  n = n + 1\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  n & (n-1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)) - 1) - 2^(floor(log2(n)) - 2)\n  n = n + 2^(floor(log2(n)) - 1) + 2^(floor(log2(n)) - 2)\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFE\n    n = n | 0x55555554\n    n\n}\n\ntoggle_middle_bits(0xFFFFFFF)\n",
    "\n  n[-c(1, length(n))] <- !n[-c(1, length(n))]\n  return(n)\n}\n\ntoggle_middle_bits(c(1, 0, 0, 0, 1))\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000004\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n & (2^(nchar(n)-2)-1)\n}\ntoggle_middle_bits(11)\n",
    "\n    return (n ^ (2^(floor(log2(n))-1)-1))\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(0xF7)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(11)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n <- n - 2^(floor(log2(n)))\n  n <- n - 2^(floor(log2(n)))\n  n <- n + 2^(floor(log2(n)))\n  n <- n + 2^(floor(log2(n)))\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = as.integer(n)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1)\n  n = n & (n-1",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(0xF0)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  return(n)\n}\n",
    "\n    n & (n - 1)\n}\n\ntoggle_middle_bits(5)\n",
    "\n  if (n < 0) {\n    return(NA)\n  }\n  if (n == 0) {\n    return(0)\n  }\n  # Get the second bit from the right\n  second_bit <- n & (1 << 1)\n  # Get the second last bit\n  second_last_bit <- n & (1 << (length(as.binary(n)) - 2))\n  # Get the number of bits to be toggled\n  num_bits_to_toggle <- length(as.binary(n)) - 3\n  # Get the mask to toggle the bits\n  mask <- (1 << num_bits_to_toggle) - 1\n  # Toggle the bits\n  toggled_bits <- n ^ mask\n  # Set the second bit and second last bit\n  toggled_bits <- toggled_bits | second_bit\n  toggled_bits <- toggled_bits | second_last_bit\n  return(toggled_bits)\n}\n",
    "\n  # Write your code here\n  n = n %/% 2\n  n = n * 2 + 1\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xfffffffc\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    return(n)\n}\n\ntoggle_middle_bits(13)\n ",
    "\n  n <- n - (n %% 2)\n  n <- n + (n %% 4)\n  n <- n - (n %% 8)\n  n <- n + (n %% 16)\n  n <- n - (n %% 32)\n  n <- n + (n %% 64)\n  n <- n - (n %% 128)\n  n <- n + (n %% 256)\n  n <- n - (n %% 512)\n  n <- n + (n %% 1024)\n  n <- n - (n %% 2048)\n  n <- n + (n %% 4096)\n  n <- n - (n %% 8192)\n  n <- n + (n %% 16384)\n  n <- n - (n %% 32768)\n  n <- n + (n %% 65536)\n  n <- n - (n %% 131072)\n  n <- n + (n %% 262144)\n  n <- n - (n %% 524288)\n  n <- n + (n %% 1048576)\n  n <- n - (n %% 2097152)\n  n <- n + (n %% 4194304)\n  n <- n - (n %% 8388608)\n  n <- n + (n %% 16777216)\n  n <- n - (n %% 33554432)\n  n <- n + (n %% 67108864)\n  n <- n - (n %% 134217728)\n  n <- n + (n %% 268435456)\n  n <- n - (n %% 536870912)\n  n <- n + (n %% 1073741824)\n  n <- n - (n %% 2147483648)\n  n\n}\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000004\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n1 <- n & 0xFFFFFFE\n  n2 <- n & 0xFFFFFFD\n  n3 <- n & 0xFFFFFFB\n  n4 <- n & 0xFFFFFF7\n  n5 <- n & 0xFFFFFEF\n  n6 <- n & 0xFFFFFDF\n  n7 <- n & 0xFFFFFBF\n  n8 <- n & 0xFFFFF7F\n  n9 <- n & 0xFFFFEFF\n  n10 <- n & 0xFFFFDFF\n  n11 <- n & 0xFFFFBFF\n  n12 <- n & 0xFFFF7FF\n  n13 <- n & 0xFFFEFFF\n  n14 <- n & 0xFFFDFFF\n  n15 <- n & 0xFFFBFFF\n  n16 <- n & 0xFFF7FFF\n  n17 <- n & 0xFFEFFFF\n  n18 <- n & 0xFFDFFFF\n  n19 <- n & 0xFFBFFFF\n  n20 <- n & 0xFF7FFFF\n  n21 <- n & 0xFEFFFFF\n  n22 <- n & 0xFDFFFFF\n  n23 <- n & 0xFBFFFFF\n  n24 <- n & 0xF7FFFFF\n  n25 <- n & 0xEFFFFFF\n  n26 <- n & 0xDFFFFFF\n  n27 <- n & 0xBFFFFFF\n  n28 <- n & 0x7FFFFFF\n  n1 <- n1 | 0x1\n  n2 <- n2 | 0x2\n  n3 <- n3 | 0x4\n  n4 <- n4 | 0x8\n  n5 <- n5 | 0x10\n  n6 <- n6 | 0x20\n  n7 <- n7 | 0x40\n  n8 <- n8 | 0x80\n  n9 <- n9 | 0x100\n  n10 <- n10 | 0x200\n  n11 <- n11 | 0x400\n  n12 <- n12 | 0x800\n  n13 <- n13 | 0x1000\n  n14 <- n14 | 0x2000\n  n15 <- n15 |",
    "\n  # Write your code here\n  n = as.integer(n)\n  n = n - 2^(floor(log2(n)) + 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Your code goes here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  n\n}\n\ntoggle_middle_bits(0xF0)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    # Write your code here\n    n = n - 2^(floor(log2(n)) - 1)\n    n = n - 2^(floor(log2(n)) - 1)\n    n = n + 2^(floor(log2(n)) - 1)\n    n = n + 2^(floor(log2(n)) - 1)\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n))-1)\n  n = n - 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n))-1)\n  n = n + 2^(floor(log2(n)))\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n    n = n & 0xFFFFFFE\n    n = n | 0x55555554\n    return(n)\n}\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  n <- n & 0xFFFFFFF0\n  n <- n | 0x0000000A\n  return(n)\n}\n\ntoggle_middle_bits(0xF0)\n",
    "\n  n = n & ~(1 << 1)\n  n = n & ~(1 << 2)\n  n = n & ~(1 << 3)\n  n = n & ~(1 << 4)\n  n = n & ~(1 << 5)\n  n = n & ~(1 << 6)\n  n = n & ~(1 << 7)\n  n = n & ~(1 << 8)\n  n = n & ~(1 << 9)\n  n = n & ~(1 << 10)\n  n = n & ~(1 << 11)\n  n = n & ~(1 << 12)\n  n = n & ~(1 << 13)\n  n = n & ~(1 << 14)\n  n = n & ~(1 << 15)\n  n = n & ~(1 << 16)\n  n = n & ~(1 << 17)\n  n = n & ~(1 << 18)\n  n = n & ~(1 << 19)\n  n = n & ~(1 << 20)\n  n = n & ~(1 << 21)\n  n = n & ~(1 << 22)\n  n = n & ~(1 << 23)\n  n = n & ~(1 << 24)\n  n = n & ~(1 << 25)\n  n = n & ~(1 << 26)\n  n = n & ~(1 << 27)\n  n = n & ~(1 << 28)\n  n = n & ~(1 << 29)\n  n = n & ~(1 << 30)\n  n = n & ~(1 << 31)\n  n\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  #TODO\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  n[2:(length(n)-1)] <- !n[2:(length(n)-1)]\n  n\n}\n\ntoggle_middle_bits(c(1,0,1,0,1,0,1))\n",
    "\n  # Write your code here\n  # Return the output\n  # Do not print it\n  # Use the concept of bitwise operators\n  # https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-python/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-java/\n  # https://www.geeksforgeeks.org/bitwise-operators-r/\n  # https://www.geeksforgeeks.org/bitwise-operators-ruby/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-php/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-perl/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-c-sharp/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-swift/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-javascript/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-golang/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-kotlin/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-scala/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-rust/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-racket/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-haskell/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-erlang/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-lua/\n  # https://www.geeksforgeeks.org/bitwise-operators-in-dart/\n  # https://www.geeksforgeeks.org/",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(13)\n ",
    "\n    # Write your code here\n    n = n & 0xFFFFFFFC\n    n = n | 0x00000002\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n %/% 2\n  n = n * 2\n  n = n + 1\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n[-c(1, length(n))] <- !n[-c(1, length(n))]\n  n\n}\n\ntoggle_middle_bits(c(1, 0, 1, 0, 1, 0, 1, 0))\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    return(n ^ (2^(floor(log2(n))-1) - 1))\n}\n\ntoggle_middle_bits(10)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000004\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n & (n - 1)\n}\n\ntoggle_middle_bits(23)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n & (n - 1)\n}\ntoggle_middle_bits(10)\n",
    "\n    # Write your code here\n    n[-c(1,length(n))] <- !n[-c(1,length(n))]\n    return(n)\n}\n\ntoggle_middle_bits(c(1,0,1,0,1,0,1,0))\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  return (n)\n}\n\ntoggle_middle_bits(11)\n",
    "\n  n[2:(length(n)-1)] <- !n[2:(length(n)-1)]\n  return(n)\n}\n\ntoggle_middle_bits(c(1,0,1,0,1,0,1,0))\n",
    "\n  n <- n - (n %% 2)\n  n <- n + 1\n  n <- n + (n %% 4)\n  n <- n + 2\n  n <- n + (n %% 8)\n  n <- n + 4\n  n <- n + (n %% 16)\n  n <- n + 8\n  n <- n + (n %% 32)\n  n <- n + 16\n  n <- n + (n %% 64)\n  n <- n + 32\n  n <- n + (n %% 128)\n  n <- n + 64\n  n <- n + (n %% 256)\n  n <- n + 128\n  n <- n + (n %% 512)\n  n <- n + 256\n  n <- n + (n %% 1024)\n  n <- n + 512\n  n <- n + (n %% 2048)\n  n <- n + 1024\n  n <- n + (n %% 4096)\n  n <- n + 2048\n  n <- n + (n %% 8192)\n  n <- n + 4096\n  n <- n + (n %% 16384)\n  n <- n + 8192\n  n <- n + (n %% 32768)\n  n <- n + 16384\n  n <- n + (n %% 65536)\n  n <- n + 32768\n  n <- n + (n %% 131072)\n  n <- n + 65536\n  n <- n + (n %% 262144)\n  n <- n + 131072\n  n <- n + (n %% 524288)\n  n <- n + 262144\n  n <- n + (n %% 1048576)\n  n <- n + 524288\n  n <- n + (n %% 2097152)\n  n <- n + 1048576\n  n <- n + (n %% 4194304)\n  n <- n + 2097152\n  n <- n + (n %% 8388608)\n  n <- n + 4194304\n  n <- n + (n %% 16777216)\n  n <- n + 8388608\n  n <- n + (n %% 33554432)\n  n <- n + 16777216\n  n <- n + (n %% 67108864)\n  n <-",
    "\n    # Write your code here\n    n = n & 0xFFFFFFE\n    n = n | 0x5555554\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n & (n - 1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(10)\n",
    "\n    n[2:(length(n)-1)] <- !n[2:(length(n)-1)]\n    return(n)\n}\n\ntoggle_middle_bits(c(1,0,1,0,1,0,1,0))\n",
    "\n    return (n ^ (2^(floor(log2(n))-1)-1))\n}\n\ntoggle_middle_bits(0)\ntoggle_middle_bits(1)\ntoggle_middle_bits(2)\ntoggle_middle_bits(3)\ntoggle_middle_bits(4)\ntoggle_middle_bits(5)\ntoggle_middle_bits(6)\ntoggle_middle_bits(7)\ntoggle_middle_bits(8)\ntoggle_middle_bits(9)\ntoggle_middle_bits(10)\ntoggle_middle_bits(11)\ntoggle_middle_bits(12)\ntoggle_middle_bits(13)\ntoggle_middle_bits(14)\ntoggle_middle_bits(15)\ntoggle_middle_bits(16)\n",
    "\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n    # Write your code here\n    n = as.integer(n)\n    if(n < 0) {\n        n = -n\n    }\n    if(n == 0) {\n        return(0)\n    }\n    if(n == 1) {\n        return(1)\n    }\n    if(n == 2) {\n        return(3)\n    }\n    if(n == 3) {\n        return(2)\n    }\n    if(n == 4) {\n        return(7)\n    }\n    if(n == 5) {\n        return(6)\n    }\n    if(n == 6) {\n        return(5)\n    }\n    if(n == 7) {\n        return(4)\n    }\n    if(n == 8) {\n        return(15)\n    }\n    if(n == 9) {\n        return(14)\n    }\n    if(n == 10) {\n        return(13)\n    }\n    if(n == 11) {\n        return(12)\n    }\n    if(n == 12) {\n        return(11)\n    }\n    if(n == 13) {\n        return(10)\n    }\n    if(n == 14) {\n        return(9)\n    }\n    if(n == 15) {\n        return(8)\n    }\n    if(n == 16) {\n        return(31)\n    }\n    if(n == 17) {\n        return(30)\n    }\n    if(n == 18) {\n        return(29)\n    }\n    if(n == 19) {\n        return(28)\n    }\n    if(n == 20) {\n        return(27)\n    }\n    if(n == 21) {\n        return(26)\n    }\n    if(n == 22) {\n        return(25)\n    }\n    if(n == 23) {\n        return(24)\n    }\n    if(n == 24) {\n        return(23)\n    }\n    if(n == 25) {\n        return(22)\n    }\n    if(n == 26)",
    "\n  # Write your code here\n  n & (n-1)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  return(n)\n}\n",
    "\n  n & (n >> 1) & (n << 1)\n}\ntoggle_middle_bits(10)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFFE\n    n = n | 0x00000001\n    n = n | 0x00000004\n    n = n & 0xFFFFFFF9\n    n = n | 0x00000002\n    n = n | 0x00000008\n    n = n & 0xFFFFFFF6\n    n = n | 0x00000004\n    n = n | 0x00000010\n    n = n & 0xFFFFFFEB\n    n = n | 0x00000008\n    n = n | 0x00000020\n    n = n & 0xFFFFFFD7\n    n = n | 0x00000010\n    n = n | 0x00000040\n    n = n & 0xFFFFFFAF\n    n = n | 0x00000020\n    n = n | 0x00000080\n    n = n & 0xFFFFFF5F\n    n = n | 0x00000040\n    n = n | 0x00000100\n    n = n & 0xFFFFFEFF\n    n = n | 0x00000080\n    n = n | 0x00000200\n    n = n & 0xFFFFFDFF\n    n = n | 0x00000100\n    n = n | 0x00000400\n    n = n & 0xFFFFFBFF\n    n = n | 0x00000200\n    n = n | 0x00000800\n    n = n & 0xFFFFF7FF\n    n = n | 0x00000400\n    n = n | 0x00001000\n    n = n & 0xFFFFEFFF\n    n = n | 0x00000800\n    n = n | 0x00002000\n    n = n & 0xFFFFDFFF\n    n = n | 0x00001000\n    n = n | 0x00004000\n    n = n & 0xFFFBFFFF\n    n = n | 0x00002000\n    n = n | 0x00008000\n    n = n & 0xFFF7FFFF\n    n = n | 0x00004000\n    n = n | 0x00010000\n    n = n & 0xFFEFFFFF\n    n = n | 0x00008000\n    n = n | 0x000200",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  return(n ^ (2^(floor(log2(n))-1)-1))\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n <- n & 0xFFFFFFE\n  n <- n | 0x5555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000001\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n    # Write your code here\n    n = n & 0xFFFFFFF8\n    n = n | 0x00000004\n    return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n    return(n ^ ((2^(floor(log2(n))-1))-1))\n}\n\ntoggle_middle_bits(23)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n - 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  n = n + 2^(floor(log2(n)) - 1)\n  return(n)\n}\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)))\n  n = n - 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n)))\n  return(n)\n}\n",
    "\n  # Write your code here\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n - 2^(floor(log2(n)))\n  n = n - 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n)))\n  n = n + 2^(floor(log2(n)))\n  return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n    n <- n & 0xFFFFFFE\n    n <- n | 0x55555554\n    return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFE\n  n = n | 0x00000001\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFFC\n  n = n | 0x00000002\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  n\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n    # Write your code here\n    # Return the output\n    return(n)\n}\n\ntoggle_middle_bits(10)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFE\n  n = n | 0x55555554\n  return(n)\n}\n\ntoggle_middle_bits(0xFFFFFFFF)\n",
    "\n  # Write your code here\n  n <- as.integer(n)\n  n <- as.binary(n)\n  n <- as.integer(n)\n  n <- n %/% 100\n  n <- n * 100\n  n <- as.binary(n)\n  n <- as.integer(n)\n  return(n)\n}\n\ntoggle_middle_bits(11)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\n\ntoggle_middle_bits(13)\n",
    "\n  # Write your code here\n  n = n & 0xFFFFFFF8\n  n = n | 0x00000004\n  return(n)\n}\ntoggle_middle_bits(13)\n"
  ]
}