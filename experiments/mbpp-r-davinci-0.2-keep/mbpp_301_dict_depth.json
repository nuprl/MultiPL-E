{
  "name": "mbpp_301_dict_depth",
  "language": "r",
  "prompt": "# Write a function to find the depth of a dictionary.\ndict_depth <- function(d) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- dict_depth\n    if(!identical(candidate(list('a' = 1, 'b' = list('c' = list('d' = list())))), 4)){quit('no', 1)}\n    if(!identical(candidate(list('a' = 1, 'b' = list('c' = 'python'))), 2)){quit('no', 1)}\n    if(!identical(candidate(list(1 = 'Sun', 2 = list(3 = list(4 = 'Mon')))), 3)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.atomic(d)) {\n    return(1)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  if (is.data.frame(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  if (is.matrix(d)) {\n    return(2)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    max(sapply(d, function(x) if (is.list(x)) dict_depth(x) else 0)) + 1\n}\n",
    "\n  max(sapply(d, function(x) {\n    if (is.list(x)) {\n      dict_depth(x)\n    } else {\n      0\n    }\n  })) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) return(0)\n  if (is.list(d)) return(1 + max(sapply(d, dict_depth)))\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  max(sapply(d, function(x) {\n    if (is.list(x)) {\n      dict_depth(x)\n    } else {\n      0\n    }\n  })) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if(is.list(d)) {\n    max(sapply(d, dict_depth)) + 1\n  } else {\n    1\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (all(sapply(d, is.atomic))) {\n    return(1)\n  }\n  return(1 + max(sapply(d, dict_depth)))\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    if (is.list(d)) {\n        return(1 + max(sapply(d, dict_depth)))\n    }\n    return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  } else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  max(sapply(d, function(x) if(is.list(x)) dict_depth(x) else 0)) + 1\n}\n",
    "\n  max(sapply(d, function(x) {\n    if (is.list(x)) {\n      dict_depth(x)\n    } else {\n      0\n    }\n  })) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n\ndict_depth(dict)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  return(1)\n}\n\ndict_depth(dict)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  max(sapply(d, function(x) if(is.list(x)) dict_depth(x) else 0)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (all(sapply(d, is.atomic))) {\n    return(1)\n  }\n  return(1 + max(sapply(d, dict_depth)))\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  } else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max_depth <- 0\n  for (value in d) {\n    if (is.list(value)) {\n      depth <- dict_depth(value) + 1\n      if (depth > max_depth) {\n        max_depth <- depth\n      }\n    }\n  }\n  return(max_depth)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, function(x) {\n    if (is.list(x)) {\n      return(dict_depth(x))\n    } else {\n      return(0)\n    }\n  })) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(unlist(lapply(d, dict_depth))))\n  }\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  if (is.null(d)) return(0)\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  } else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth) + 1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth) + 1)\n}\n",
    "\n  if (length(d) == 0)\n    return(0)\n  else\n    return(1 + max(sapply(d, dict_depth)))\n}\n\ndict_depth(dict)\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n    if (is.null(d)) return(0)\n    if (is.list(d)) return(1 + max(sapply(d, dict_depth)))\n    return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    if (is.null(d)) {\n        return(0)\n    }\n    if (is.list(d)) {\n        return(1 + max(sapply(d, dict_depth)))\n    }\n    return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  } else {\n    return(max(unlist(lapply(d, dict_depth))) + 1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (all(sapply(d, is.atomic))) {\n    return(1)\n  }\n  return(1 + max(sapply(d, dict_depth)))\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if(length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (any(sapply(d, is.list))) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  } else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  } else if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  } else {\n    return(1)\n  }\n}\n",
    "\n  if (is.null(d)) return(0)\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n    if (is.null(d)) {\n        return(0)\n    }\n    if (all(sapply(d, is.null))) {\n        return(1)\n    }\n    return(1 + max(sapply(d, dict_depth)))\n}\n",
    "\n  max(sapply(d, function(x) if (is.list(x)) dict_depth(x) else 0)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n    if (is.null(d)) return(0)\n    if (is.list(d)) return(1 + max(sapply(d, dict_depth)))\n    return(1)\n}\n",
    "\n    if (is.null(d)) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if(!is.list(d)) return(0)\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(sapply(d, dict_depth)) + 1)\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (length(d) == 1) {\n    return(1)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  max(sapply(d, function(x) if (is.list(x)) dict_depth(x) else 0)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(max(sapply(d, dict_depth)) + 1)\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) return(0)\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  } else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(unlist(lapply(d, dict_depth))) + 1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  max(sapply(d, function(x) if(is.list(x)) dict_depth(x) + 1 else 0))\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n    if(!is.list(d)) return(0)\n    max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(sapply(d, dict_depth)) + 1)\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    } else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  max(sapply(d, function(x) {\n    if (is.list(x)) {\n      dict_depth(x)\n    } else {\n      1\n    }\n  }))\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.list(d)) {\n    max(sapply(d, dict_depth)) + 1\n  } else {\n    1\n  }\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(max(sapply(d, dict_depth)) + 1)\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  } else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n\ndict_depth(d)\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  max(unlist(lapply(d, function(x) {\n    if (is.list(x)) {\n      dict_depth(x)\n    } else {\n      1\n    }\n  })))\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if(is.null(d)) return(0)\n  if(is.list(d)) {\n    max(sapply(d, dict_depth)) + 1\n  } else {\n    1\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  return(1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (length(d) == 0) return(0)\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    max(unlist(lapply(d, dict_depth))) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(max(sapply(d, dict_depth)) + 1)\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  else if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  else {\n    return(1)\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  max(sapply(d, function(x) if(is.list(x)) dict_depth(x) else 0)) + 1\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(d)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  } else {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(unlist(lapply(d, dict_depth))) + 1\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  if (all(sapply(d, is.atomic))) {\n    return(1)\n  }\n  return(1 + max(sapply(d, dict_depth)))\n}\n",
    "\n    if (length(d) == 0) {\n        return(0)\n    }\n    else {\n        return(1 + max(unlist(lapply(d, dict_depth))))\n    }\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth) + 1)\n}\n",
    "\n  if (is.null(d)) {\n    return(0)\n  }\n  if (is.list(d)) {\n    return(1 + max(sapply(d, dict_depth)))\n  }\n  return(1)\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  else {\n    return(1 + max(unlist(lapply(d, dict_depth))))\n  }\n}\n",
    "\n  if (is.null(d)) return(0)\n  if (length(d) == 0) return(1)\n  1 + max(sapply(d, dict_depth))\n}\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n\ndict_depth(dict)\n",
    "\n  if (length(d) == 0) {\n    return(0)\n  }\n  max(sapply(d, dict_depth)) + 1\n}\n"
  ]
}