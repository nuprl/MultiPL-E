{
  "name": "mbpp_96_divisor",
  "language": "r",
  "prompt": "# Write a python function to find the number of divisors of a given integer.\ndivisor <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_96_divisor.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- divisor\n    if(!identical(candidate(15), 4)){quit('no', 1)}\n    if(!identical(candidate(12), 6)){quit('no', 1)}\n    if(!identical(candidate(9), 3)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(length(divisors))\n}\n\ndivisor(12)\n",
    "\n  divisors <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- divisors + 1\n    }\n  }\n  return(divisors)\n}\n\ndivisor(12)\n",
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(length(divisors))\n}\n\ndivisor(12)\n",
    "\n  divisor <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisor <- divisor + 1\n    }\n  }\n  return(divisor)\n}\n\ndivisor(6)\n",
    "\n  divisors <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- divisors + 1\n    }\n  }\n  return(divisors)\n}\n\ndivisor(10)\n",
    "\n  divisor <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisor <- divisor + 1\n    }\n  }\n  return(divisor)\n}\n\ndivisor(6)\n",
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(length(divisors))\n}\n\ndivisor(10)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\ndivisor(12)\n",
    "\n    divisor <- 0\n    for (i in 1:n) {\n        if (n %% i == 0) {\n            divisor <- divisor + 1\n        }\n    }\n    return(divisor)\n}\n\ndivisor(6)\n",
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(length(divisors))\n}\n\ndivisor(10)\n",
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(divisors)\n}\n\ndivisor(100)\n",
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(length(divisors))\n}\n",
    "\n  divisors <- c()\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- c(divisors, i)\n    }\n  }\n  return(length(divisors))\n}\n\ndivisor(12)\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ndivisor(10)\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (n %% i == 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n}\n\ndivisor(6)\n",
    "\n  divisors <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisors <- divisors + 1\n    }\n  }\n  return(divisors)\n}\n",
    "\n  count <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      count <- count + 1\n    }\n  }\n  return(count)\n}\n\ndivisor(10)\n",
    "\n    count <- 0\n    for (i in 1:n) {\n        if (n %% i == 0) {\n            count <- count + 1\n        }\n    }\n    return(count)\n}\n\ndivisor(12)\n",
    "\n  divisor <- 0\n  for (i in 1:n) {\n    if (n %% i == 0) {\n      divisor <- divisor + 1\n    }\n  }\n  return(divisor)\n}\n\ndivisor(10)\n"
  ]
}