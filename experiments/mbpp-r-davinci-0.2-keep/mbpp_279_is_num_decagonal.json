{
  "name": "mbpp_279_is_num_decagonal",
  "language": "r",
  "prompt": "# Write a function to find the nth decagonal number.\nis_num_decagonal <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- is_num_decagonal\n    if(!identical(candidate(3), 27)){quit('no', 1)}\n    if(!identical(candidate(7), 175)){quit('no', 1)}\n    if(!identical(candidate(10), 370)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  is_num_triangular(n)\n}\n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  nth_decagonal <- function(n) {\n    return(n * (3 * n - 2))\n  }\n  n_decagonal <- nth_decagonal(n)\n  n_decagonal_minus_1 <- nth_decagonal(n - 1)\n  n_decagonal_plus_1 <- nth_decagonal(n + 1)\n  return(is_num_triangular(n_decagonal) & is_num_pentagonal(n_decagonal) & is_num_hexagonal(n_decagonal) & is_num_heptagonal(n_decagonal) & is_num_octagonal(n_decagonal) & is_num_nonagonal(n_decagonal) & is_num_triangular(n_decagonal_minus_1) & is_num_pentagonal(n_decagonal_minus_1) & is_num_hexagonal(n_decagonal_minus_1) & is_num_heptagonal(n_decagonal_minus_1) & is_num_octagonal(n_decagonal_minus_1) & is_num_nonagonal(n_decagonal_minus_1) & is_num_triangular(n_decagonal_plus_1) & is_num_pentagonal(n_decagonal_plus_1) & is_num_hexagonal(n_decagonal_plus_1) & is_num_heptagonal(n_decagonal_plus_1) & is_num_octagonal(n_decagonal_plus_1) & is_num_nonagonal(n_decagonal_plus_1))\n}\n",
    "\n    # Find the root of the equation 10x^2 - 9x - 2n = 0\n    # The root is the decagonal number\n    root <- (9 + sqrt(81 + 40 * n)) / 20\n    # Check if the root is an integer\n    if (root == floor(root)) {\n        return(TRUE)\n    } else {\n        return(FALSE)\n    }\n}\n",
    "\n  n <- as.integer(n)\n  if (n < 0) {\n    return(FALSE)\n  }\n  if (n == 0) {\n    return(TRUE)\n  }\n  if (is_num_decagonal(n - 10)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  n <- as.numeric(n)\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  if (n %% 10 == 0) {\n    return(is_num_decagonal(n / 10))\n  }\n  return(FALSE)\n}\n",
    "\n  if (n %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (is_num_pentagonal(n) & is_num_triangular(n)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # A decagonal number is a figurate number that extends the concept of\n  # triangular and square numbers to the decagon (a ten-sided polygon).\n  # The nth decagonal number is given by the formula:\n  # Dn = 4n^2 - 3n\n  #\n  # Args:\n  #   n: Number to check if it is decagonal.\n  #\n  # Returns:\n  #   TRUE if n is decagonal, FALSE otherwise.\n  #\n  # Examples:\n  #   is_num_decagonal(1)\n  #   [1] TRUE\n  #   is_num_decagonal(2)\n  #   [1] TRUE\n  #   is_num_decagonal(3)\n  #   [1] FALSE\n  #   is_num_decagonal(4)\n  #   [1] TRUE\n  #   is_num_decagonal(5)\n  #   [1] FALSE\n  #   is_num_decagonal(6)\n  #   [1] TRUE\n  #   is_num_decagonal(7)\n  #   [1] FALSE\n  #   is_num_decagonal(8)\n  #   [1] TRUE\n  #   is_num_decagonal(9)\n  #   [1] FALSE\n  #   is_num_decagonal(10)\n  #   [1] TRUE\n  #   is_num_decagonal(11)\n  #   [1] FALSE\n  #   is_num_decagonal(12)\n  #   [1] TRUE\n  #   is_num_decagonal(13)\n  #   [1] FALSE\n  #   is_num_decagonal(14)\n  #   [1] TRUE\n  #   is_num_decagonal(15)\n  #   [1] FALSE\n  #   is_num_decagonal(16)\n  #   [1] TRUE\n  #   is_num_decagonal(17)\n  #   [1] FALSE\n  #   is_num_decagonal(18)\n  #   [1] TRUE\n  #   is_num_decagonal(19)\n ",
    "\n  is_num_triangular(n) & is_num_pentagonal(n)\n}\n",
    "\n  if (is_num_triangular(n) & is_num_pentagonal(n)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  # Find the largest number that is less than or equal to n.\n  n_dec <- floor(sqrt(2 * n / 5))\n  # Return TRUE if n is equal to the nth decagonal number.\n  return(n == n_dec * (3 * n_dec - 1) / 2)\n}\n",
    "\n  # n = (3 * x^2 - x) / 2\n  # 3 * x^2 - x - 2n = 0\n  # x = (1 + sqrt(1 + 24 * n)) / 6\n  x <- (1 + sqrt(1 + 24 * n)) / 6\n  if (x == floor(x)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n == 1) {\n    return(TRUE)\n  }\n  if (n < 1) {\n    return(FALSE)\n  }\n  if (is_num_decagonal(n - 1)) {\n    return(TRUE)\n  }\n  if (is_num_decagonal(n - 10)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n",
    "\n  if (n %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  if (n %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  is_num_pentagonal(n) && is_num_triangular(n)\n}\n",
    "\n  # Check if n is a decagonal number\n  # Return TRUE if it is, FALSE if not\n  # Hint: use the is_num_triangular function\n  if (is_num_triangular(n)) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  nth_decagonal <- function(n) {\n    return(n*(3*n-2))\n  }\n  if (nth_decagonal(n) %% 10 == 0) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  n <- as.numeric(n)\n  if (n < 0) {\n    return(FALSE)\n  }\n  n <- n / 10\n  if (n == floor(n)) {\n    return(TRUE)\n  }\n  return(FALSE)\n}\n"
  ]
}