{
  "name": "mbpp_577_last_Digit_Factorial",
  "language": "r",
  "prompt": "# Write a python function to find the last digit in factorial of a given number.\nlast_Digit_Factorial <- function(n) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_577_last_Digit_Factorial.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- last_Digit_Factorial\n    if(!identical(candidate(4), 4)){quit('no', 1)}\n    if(!identical(candidate(21), 0)){quit('no', 1)}\n    if(!identical(candidate(30), 0)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return (1)\n  }\n  else {\n    return (n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Invalid Input\")\n  } else {\n    fact <- 1\n    for (i in 1:n) {\n      fact <- fact * i\n    }\n    return(fact %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    factorial <- function(n) {\n        if (n == 0) {\n            return(1)\n        } else {\n            return(n * factorial(n - 1))\n        }\n    }\n    return(factorial(n) %% 10)\n}\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(as.numeric(substr(fact, nchar(fact), nchar(fact))))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for(i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(as.integer(substr(fact, nchar(fact), nchar(fact))))\n}\nlast_Digit_Factorial(5)\n",
    "\n    if(n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Invalid Input\")\n  }\n  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(6)\n  }\n  if (n == 4) {\n    return(4)\n  }\n  if (n == 5) {\n    return(2)\n  }\n  if (n == 6) {\n    return(2)\n  }\n  if (n == 7) {\n    return(4)\n  }\n  if (n == 8) {\n    return(2)\n  }\n  if (n == 9) {\n    return(8)\n  }\n  if (n == 10) {\n    return(8)\n  }\n  if (n == 11) {\n    return(8)\n  }\n  if (n == 12) {\n    return(6)\n  }\n  if (n == 13) {\n    return(6)\n  }\n  if (n == 14) {\n    return(8)\n  }\n  if (n == 15) {\n    return(8)\n  }\n  if (n == 16) {\n    return(6)\n  }\n  if (n == 17) {\n    return(6)\n  }\n  if (n == 18) {\n    return(8)\n  }\n  if (n == 19) {\n    return(2)\n  }\n  if (n == 20) {\n    return(6)\n  }\n  if (n == 21) {\n    return(6)\n  }\n  if (n == 22) {\n    return(4)\n  }\n  if (n == 23) {\n    return(2)\n  }\n  if (n == 24) {\n    return(6)\n  }\n  if (n == 25) {\n    return(2)\n  }\n  if (n == 26) {\n    return(4)\n  }\n  if (n ==",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Invalid Input\")\n  }\n  else {\n    factorial <- 1\n    for (i in 1:n) {\n      factorial <- factorial * i\n    }\n    return(factorial %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n*last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if(n == 0) {\n        return(1)\n    } else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Invalid Input\")\n  }\n  else {\n    fact <- 1\n    for (i in 1:n) {\n      fact <- fact * i\n    }\n    return(fact %% 10)\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(0)\n  }\n  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(6)\n  }\n  if (n == 4) {\n    return(4)\n  }\n  if (n == 5) {\n    return(0)\n  }\n  if (n == 6) {\n    return(0)\n  }\n  if (n == 7) {\n    return(0)\n  }\n  if (n == 8) {\n    return(0)\n  }\n  if (n == 9) {\n    return(0)\n  }\n  if (n == 10) {\n    return(0)\n  }\n  if (n == 11) {\n    return(0)\n  }\n  if (n == 12) {\n    return(0)\n  }\n  if (n == 13) {\n    return(0)\n  }\n  if (n == 14) {\n    return(0)\n  }\n  if (n == 15) {\n    return(0)\n  }\n  if (n == 16) {\n    return(0)\n  }\n  if (n == 17) {\n    return(0)\n  }\n  if (n == 18) {\n    return(0)\n  }\n  if (n == 19) {\n    return(0)\n  }\n  if (n == 20) {\n    return(0)\n  }\n  if (n == 21) {\n    return(0)\n  }\n  if (n == 22) {\n    return(0)\n  }\n  if (n == 23) {\n    return(0)\n  }\n  if (n == 24) {\n    return(0)\n  }\n  if (n == 25) {\n    return(0)\n  }\n  if (n == 26) {\n    return(0)\n  }\n  if (n == 27",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if(n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n < 0) {\n    return(\"Invalid Input\")\n  }\n  else {\n    fact <- 1\n    for (i in 1:n) {\n      fact <- fact * i\n    }\n    return(fact %% 10)\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(0)\n  }\n  if (n < 2) {\n    return(1)\n  }\n  if (n < 5) {\n    return(n)\n  }\n  if (n < 10) {\n    return(n - 5)\n  }\n  if (n < 20) {\n    return(n - 10)\n  }\n  if (n < 25) {\n    return(n - 15)\n  }\n  if (n < 50) {\n    return(n - 20)\n  }\n  if (n < 100) {\n    return(n - 50)\n  }\n  if (n < 500) {\n    return(n - 100)\n  }\n  if (n < 1000) {\n    return(n - 500)\n  }\n  if (n < 5000) {\n    return(n - 1000)\n  }\n  if (n < 10000) {\n    return(n - 5000)\n  }\n  if (n < 50000) {\n    return(n - 10000)\n  }\n  if (n < 100000) {\n    return(n - 50000)\n  }\n  if (n < 500000) {\n    return(n - 100000)\n  }\n  if (n < 1000000) {\n    return(n - 500000)\n  }\n  if (n < 5000000) {\n    return(n - 1000000)\n  }\n  if (n < 10000000) {\n    return(n - 5000000)\n  }\n  if (n < 50000000) {\n    return(n - 10000000)\n  }\n  if (n < 100000000) {\n    return(n - 50000000)\n  }\n  if (n < 500000000) {\n    return(n - 100000000)\n  }\n  if (n < 1000000000) {\n    return(n - 500000000)\n  }\n  if (n < 5000000000) {\n    return(n - 1000000000)\n  }\n  if (n < 10000000000) {\n    return(n - 5000000000)\n  }\n  if (n < 50000000000) {\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n < 0) {\n    return(0)\n  }\n  else {\n    fact <- 1\n    for(i in 1:n) {\n      fact <- fact * i\n    }\n    return(fact %% 10)\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Invalid Input\")\n  }\n  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(6)\n  }\n  if (n == 4) {\n    return(4)\n  }\n  if (n == 5) {\n    return(2)\n  }\n  if (n == 6) {\n    return(2)\n  }\n  if (n == 7) {\n    return(4)\n  }\n  if (n == 8) {\n    return(2)\n  }\n  if (n == 9) {\n    return(8)\n  }\n  if (n == 10) {\n    return(8)\n  }\n  if (n == 11) {\n    return(8)\n  }\n  if (n == 12) {\n    return(6)\n  }\n  if (n == 13) {\n    return(6)\n  }\n  if (n == 14) {\n    return(8)\n  }\n  if (n == 15) {\n    return(8)\n  }\n  if (n == 16) {\n    return(6)\n  }\n  if (n == 17) {\n    return(2)\n  }\n  if (n == 18) {\n    return(6)\n  }\n  if (n == 19) {\n    return(2)\n  }\n  if (n == 20) {\n    return(2)\n  }\n  if (n == 21) {\n    return(4)\n  }\n  if (n == 22) {\n    return(2)\n  }\n  if (n == 23) {\n    return(8)\n  }\n  if (n == 24) {\n    return(4)\n  }\n  if (n == 25) {\n    return(6)\n  }\n  if (n == 26) {\n    return(8)\n  }\n  if (n ==",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    factorial <- 1\n    for (i in 1:n) {\n        factorial <- factorial * i\n    }\n    return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(substr(fact, nchar(fact), nchar(fact)))\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact %% 10)\n}\n",
    "\n    if (n < 0) {\n        return(\"Invalid Input\")\n    }\n    else {\n        fact <- 1\n        for (i in 1:n) {\n            fact <- fact * i\n        }\n        return(fact %% 10)\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  print(fact)\n  print(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(\"Invalid Input\")\n  }\n  else if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if(n < 0) {\n    return(0)\n  } else {\n    fact <- 1\n    for(i in 1:n) {\n      fact <- fact * i\n    }\n    return(fact %% 10)\n  }\n}\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- function(n) {\n    if (n == 0) {\n      return(1)\n    } else {\n      return(n * factorial(n - 1))\n    }\n  }\n  return(factorial(n) %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n    factorial <- 1\n    for (i in 1:n) {\n        factorial <- factorial * i\n    }\n    return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    } else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- function(n) {\n    if (n == 0) {\n      return (1)\n    }\n    else {\n      return (n * factorial(n - 1))\n    }\n  }\n  return (factorial(n) %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if(n < 0) {\n        return(\"Invalid Input\")\n    }\n    else {\n        factorial <- 1\n        for(i in 1:n) {\n            factorial <- factorial * i\n        }\n        return(factorial%%10)\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- function(n) {\n    if (n == 0) {\n      return(1)\n    } else {\n      return(n * factorial(n - 1))\n    }\n  }\n  return(as.numeric(substr(factorial(n), nchar(factorial(n)), nchar(factorial(n)))))\n}\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n-1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nprint(last_Digit_Factorial(5))\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n < 0) {\n        return(\"Invalid Input\")\n    }\n    else if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n-1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  last_digit <- fact %% 10\n  return(last_digit)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    if (n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n - 1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n < 0) {\n    return(NA)\n  }\n  if (n == 0) {\n    return(1)\n  }\n  return(n * last_Digit_Factorial(n - 1))\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  if (n == 1) {\n    return(1)\n  }\n  if (n == 2) {\n    return(2)\n  }\n  if (n == 3) {\n    return(6)\n  }\n  if (n == 4) {\n    return(4)\n  }\n  if (n == 5) {\n    return(2)\n  }\n  if (n == 6) {\n    return(2)\n  }\n  if (n == 7) {\n    return(4)\n  }\n  if (n == 8) {\n    return(2)\n  }\n  if (n == 9) {\n    return(8)\n  }\n  if (n == 10) {\n    return(8)\n  }\n  if (n == 11) {\n    return(8)\n  }\n  if (n == 12) {\n    return(6)\n  }\n  if (n == 13) {\n    return(6)\n  }\n  if (n == 14) {\n    return(8)\n  }\n  if (n == 15) {\n    return(2)\n  }\n  if (n == 16) {\n    return(6)\n  }\n  if (n == 17) {\n    return(2)\n  }\n  if (n == 18) {\n    return(4)\n  }\n  if (n == 19) {\n    return(2)\n  }\n  if (n == 20) {\n    return(2)\n  }\n  if (n == 21) {\n    return(4)\n  }\n  if (n == 22) {\n    return(2)\n  }\n  if (n == 23) {\n    return(8)\n  }\n  if (n == 24) {\n    return(4)\n  }\n  if (n == 25) {\n    return(6)\n  }\n  if (n == 26) {\n    return(8)\n  }\n  if (n == 27) {\n    return(6)\n  }\n  if (n == 28",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    fact <- 1\n    for (i in 1:n) {\n        fact <- fact * i\n    }\n    return(fact %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    factorial <- 1\n    for (i in 1:n) {\n        factorial <- factorial * i\n    }\n    return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  }\n  else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if(n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  factorial <- 1\n  for (i in 1:n) {\n    factorial <- factorial * i\n  }\n  return(factorial %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  fact <- 1\n  for (i in 1:n) {\n    fact <- fact * i\n  }\n  return(fact %% 10)\n}\nlast_Digit_Factorial(5)\n",
    "\n    if(n == 0) {\n        return(1)\n    }\n    else {\n        return(n * last_Digit_Factorial(n-1))\n    }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n  if (n == 0) {\n    return(1)\n  } else {\n    return(n * last_Digit_Factorial(n - 1))\n  }\n}\n\nlast_Digit_Factorial(5)\n",
    "\n    factorial <- 1\n    for (i in 1:n) {\n        factorial <- factorial * i\n    }\n    return(factorial %% 10)\n}\n\nlast_Digit_Factorial(5)\n"
  ]
}