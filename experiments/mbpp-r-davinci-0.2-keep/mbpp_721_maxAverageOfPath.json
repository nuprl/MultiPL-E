{
  "name": "mbpp_721_maxAverageOfPath",
  "language": "r",
  "prompt": "# Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\nmaxAverageOfPath <- function(cost) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_721_maxAverageOfPath.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- maxAverageOfPath\n    if(!identical(candidate(list(list(1, 2, 3), list(6, 5, 4), list(7, 3, 9))), 5.2)){quit('no', 1)}\n    if(!identical(candidate(list(list(2, 3, 4), list(7, 6, 5), list(8, 4, 10))), 6.2)){quit('no', 1)}\n    if(!identical(candidate(list(list(3, 4, 5), list(8, 7, 6), list(9, 5, 11))), 7.2)){quit('no', 1)}\n    if(!identical(candidate(list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9))), 5.8)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  n <- length(cost)\n  # Create a matrix to store results of subproblems\n  dp <- matrix(0, n, n)\n  # Initialize first column of total cost(tc) array\n  tc <- matrix(0, n, n)\n  for (i in 1:n) {\n    tc[i, 1] <- cost[i, 1] + tc[i-1, 1]\n  }\n  # Initialize first row of tc array\n  for (j in 2:n) {\n    tc[1, j] <- cost[1, j] + tc[1, j-1]\n  }\n  # Construct rest of the tc array\n  for (i in 2:n) {\n    for (j in 2:n) {\n      tc[i, j] <- cost[i, j] + tc[i-1, j] + tc[i, j-1] - tc[i-1, j-1]\n    }\n  }\n  # Initialize first column of dp array\n  for (i in 1:n) {\n    dp[i, 1] <- tc[i, 1]\n  }\n  # Initialize first row of dp array\n  for (j in 2:n) {\n    dp[1, j] <- tc[1, j]\n  }\n  # Construct rest of the dp array\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- tc[i, j] + max(dp[i-1, j], dp[i, j-1])\n    }\n  }\n  return(dp[n, n]/(2*n-1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Your code here\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    # Write your code here\n    # Return the maximum average cost of a path\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for(i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for(i in 2:n) {\n        for(j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n]/(n+n-1))\n}\n ",
    "\n    n <- length(cost)\n    # Initialize the matrix for storing results of subproblems\n    dp <- matrix(0, n, n)\n    # Fill the enteries for 0th column\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    # Fill the enteries for 0th row\n    for (j in 2:n) {\n        dp[1, j] <- dp[1, j - 1] + cost[1, j]\n    }\n    # Fill rest of the enteries in bottom up manner\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n        }\n    }\n    # Return the maximum average\n    return (dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  n <- length(cost)\n  for (i in 1:(n-1)) {\n    cost[[i+1]][1] <- cost[[i+1]][1] + cost[[i]][1]\n    cost[[1]][i+1] <- cost[[1]][i+1] + cost[[1]][i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  for (i in 2:n) {\n    cost[i,1] <- cost[i,1] + cost[i-1,1]\n  }\n  for (j in 2:m) {\n    cost[1,j] <- cost[1,j] + cost[1,j-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      cost[i,j] <- cost[i,j] + max(cost[i-1,j], cost[i,j-1])\n    }\n  }\n  return(cost[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  # your code here\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the average cost of each cell\n  avg <- matrix(0, n, n)\n  # Initialize the first cell\n  avg[1,1] <- cost[1,1]\n  # Initialize the first row\n  for (i in 2:n) {\n    avg[1,i] <- avg[1,i-1] + cost[1,i]\n  }\n  # Initialize the first column\n  for (i in 2:n) {\n    avg[i,1] <- avg[i-1,1] + cost[i,1]\n  }\n  # Calculate the average cost of each cell\n  for (i in 2:n) {\n    for (j in 2:n) {\n      avg[i,j] <- (avg[i-1,j] + avg[i,j-1] + cost[i,j]) / 2\n    }\n  }\n  # Return the average cost of the last cell\n  return(avg[n,n])\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  \n  # get the size of the matrix\n  n <- length(cost)\n  # initialize the matrix for the results\n  result <- matrix(0, nrow = n, ncol = n)\n  # initialize the first cell\n  result[1,1] <- cost[1,1]\n  \n  # loop through the matrix\n  for (i in 1:n) {\n    for (j in 1:n) {\n      # if we are in the first row or column, we can only go right or down\n      if (i == 1) {\n        result[i,j] <- result[i,j-1] + cost[i,j]\n      } else if (j == 1) {\n        result[i,j] <- result[i-1,j] + cost[i,j]\n      } else {\n        # otherwise, we can go right or down, so we take the max of the two\n        result[i,j] <- max(result[i-1,j], result[i,j-1]) + cost[i,j]\n      }\n    }\n  }\n  \n  # return the result\n  return(result[n,n] / (n*n))\n}\n",
    "\n  # Your code goes here\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,m] / (n+m-1)\n}\n",
    "\n  # Your code here\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n+n-2))\n}\n ",
    "\n  # Your code goes here\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m){\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n){\n    for(j in 2:m){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (j in 2:m) {\n        dp[1, j] <- dp[1, j - 1] + cost[1, j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    if (n == 0) {\n        return(0)\n    }\n    if (n == 1) {\n        return(cost[[1]][[1]])\n    }\n    # Initialize the matrix\n    matrix <- matrix(0, n, n)\n    matrix[1,1] <- cost[[1]][[1]]\n    for (i in 2:n) {\n        matrix[1,i] <- matrix[1,i-1] + cost[[1]][[i]]\n        matrix[i,1] <- matrix[i-1,1] + cost[[i]][[1]]\n    }\n    # Fill the matrix\n    for (i in 2:n) {\n        for (j in 2:n) {\n            matrix[i,j] <- max(matrix[i-1,j], matrix[i,j-1]) + cost[[i]][[j]]\n        }\n    }\n    return(matrix[n,n] / (n*n))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- length(cost)\n    for (i in 1:n) {\n        for (j in 1:n) {\n            if (i == 1 && j == 1) {\n                cost[i,j] <- cost[i,j]\n            } else if (i == 1) {\n                cost[i,j] <- cost[i,j] + cost[i,j-1]\n            } else if (j == 1) {\n                cost[i,j] <- cost[i,j] + cost[i-1,j]\n            } else {\n                cost[i,j] <- cost[i,j] + max(cost[i-1,j], cost[i,j-1])\n            }\n        }\n    }\n    return(cost[n,n]/(n*n))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n    n <- length(cost)\n    # Initialize the matrix to store the cost of the path\n    pathCost <- matrix(0, n, n)\n    pathCost[1, 1] <- cost[1, 1]\n    # Fill the first row\n    for (j in 2:n) {\n        pathCost[1, j] <- pathCost[1, j - 1] + cost[1, j]\n    }\n    # Fill the first column\n    for (i in 2:n) {\n        pathCost[i, 1] <- pathCost[i - 1, 1] + cost[i, 1]\n    }\n    # Fill the rest of the matrix\n    for (i in 2:n) {\n        for (j in 2:n) {\n            pathCost[i, j] <- cost[i, j] + max(pathCost[i - 1, j], pathCost[i, j - 1])\n        }\n    }\n    # Return the maximum average\n    return (pathCost[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,m]/(n+m-1)\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all possible paths\n  n <- length(cost)\n  path <- matrix(0,n,n)\n  path[1,1] <- cost[1,1]\n  for(i in 2:n){\n    path[1,i] <- path[1,i-1] + cost[1,i]\n    path[i,1] <- path[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      path[i,j] <- max(path[i-1,j],path[i,j-1]) + cost[i,j]\n    }\n  }\n  return(path[n,n]/(n*n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:n) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n  # Write your code here\n  # Return the maximum average over all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the maximum average\n  maxAvg <- matrix(0, n, n)\n  # Initialize the matrix to store the number of paths\n  numPaths <- matrix(0, n, n)\n  # Initialize the first row and column of the matrix\n  maxAvg[1, 1] <- cost[1, 1]\n  numPaths[1, 1] <- 1\n  for (i in 2:n) {\n    maxAvg[1, i] <- maxAvg[1, i - 1] + cost[1, i]\n    numPaths[1, i] <- 1\n    maxAvg[i, 1] <- maxAvg[i - 1, 1] + cost[i, 1]\n    numPaths[i, 1] <- 1\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      maxAvg[i, j] <- max(maxAvg[i - 1, j], maxAvg[i, j - 1]) + cost[i, j]\n      numPaths[i, j] <- numPaths[i - 1, j] + numPaths[i, j - 1]\n    }\n  }\n  # Return the maximum average\n  return(maxAvg[n, n] / numPaths[n, n])\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the cost of each path\n  pathCost <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the number of paths to each cell\n  pathCount <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the average cost of each path\n  pathAvg <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first cell of the matrix\n  pathCost[1,1] <- cost[1,1]\n  pathCount[1,1] <- 1\n  pathAvg[1,1] <- cost[1,1]\n  # Initialize the first row of the matrix\n  for (i in 2:n) {\n    pathCost[1,i] <- pathCost[1,i-1] + cost[1,i]\n    pathCount[1,i] <- 1\n    pathAvg[1,i] <- pathCost[1,i]\n  }\n  # Initialize the first column of the matrix\n  for (i in 2:n) {\n    pathCost[i,1] <- pathCost[i-1,1] + cost[i,1]\n    pathCount[i,1] <- 1\n    pathAvg[i,1] <- pathCost[i,1]\n  }\n  # Initialize the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      if (pathAvg[i-1,j] > pathAvg[i,j-1]) {\n        pathCost[i,j] <- pathCost[i-1,j] + cost[i,j]\n        pathCount[i,j] <- pathCount[i-1,j]\n        pathAvg[i,j] <- pathCost[i,j] / pathCount[i,j]\n      } else if (pathAvg[i-1,j] < pathAvg[i,j-1]) {\n        pathCost[i,j] <- pathCost[i,j-1] + cost[i,j]\n        pathCount[i,j] <- path",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  # initialize the matrix\n  dp <- matrix(0, n, m)\n  # initialize the first row and column\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:m) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  # return the maximum average\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i == 1 && j == 1) {\n        next\n      }\n      if (i == 1) {\n        dp[i, j] <- dp[i, j - 1] + cost[i, j]\n      } else if (j == 1) {\n        dp[i, j] <- dp[i - 1, j] + cost[i, j]\n      } else {\n        dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n      }\n    }\n  }\n  dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return (dp[n, n] / (2 * n - 1))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average cost of a path\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    dp[n, n] / (n * n)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  # Initialize the matrix to store the cost of the path\n  pathCost <- matrix(0, n, m)\n  # Initialize the matrix to store the number of paths\n  pathCount <- matrix(0, n, m)\n  # Initialize the matrix to store the average cost\n  pathAvg <- matrix(0, n, m)\n  # Initialize the first cell\n  pathCost[1, 1] <- cost[1, 1]\n  pathCount[1, 1] <- 1\n  pathAvg[1, 1] <- cost[1, 1]\n  # Initialize the first row\n  for (j in 2:m) {\n    pathCost[1, j] <- pathCost[1, j - 1] + cost[1, j]\n    pathCount[1, j] <- 1\n    pathAvg[1, j] <- pathCost[1, j]\n  }\n  # Initialize the first column\n  for (i in 2:n) {\n    pathCost[i, 1] <- pathCost[i - 1, 1] + cost[i, 1]\n    pathCount[i, 1] <- 1\n    pathAvg[i, 1] <- pathCost[i, 1]\n  }\n  # Compute the cost, count and average for the rest of the cells\n  for (i in 2:n) {\n    for (j in 2:m) {\n      # Compute the cost of the path\n      pathCost[i, j] <- pathCost[i - 1, j] + cost[i, j]\n      # Compute the number of paths\n      pathCount[i, j] <- pathCount[i - 1, j]\n      # Compute the average cost\n      pathAvg[i, j] <- pathCost[i, j] / pathCount[i, j]\n      # Check if the path from the top is better\n      if (pathAvg[i - 1, j] > pathAvg[i, j]) {\n        pathCost[i, j] <- pathCost[i - 1, j]\n        pathCount[i, j] <- pathCount[i - 1, j]\n        pathAvg",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  # initialize the matrix\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  # return the result\n  return(dp[n,n] / (2*n-1))\n}",
    "\n  # Write your code here\n  # Return the maximum average\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- length(cost)\n    mat <- matrix(0, n, n)\n    mat[1,1] <- cost[1,1]\n    for (i in 2:n){\n        mat[1,i] <- mat[1,i-1] + cost[1,i]\n        mat[i,1] <- mat[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n){\n        for (j in 2:n){\n            mat[i,j] <- max(mat[i-1,j], mat[i,j-1]) + cost[i,j]\n        }\n    }\n    return(mat[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  n <- length(cost)\n  mat <- matrix(0, n, n)\n  mat[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    mat[1,i] <- mat[1,i-1] + cost[1,i]\n    mat[i,1] <- mat[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      mat[i,j] <- max(mat[i-1,j], mat[i,j-1]) + cost[i,j]\n    }\n  }\n  return(mat[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the sum of the path\n  sum <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the number of paths\n  count <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column\n  sum[1, 1] <- cost[1, 1]\n  count[1, 1] <- 1\n  for (i in 2:n) {\n    sum[1, i] <- sum[1, i - 1] + cost[1, i]\n    count[1, i] <- 1\n    sum[i, 1] <- sum[i - 1, 1] + cost[i, 1]\n    count[i, 1] <- 1\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      sum[i, j] <- sum[i - 1, j] + cost[i, j]\n      count[i, j] <- count[i - 1, j]\n      if (sum[i, j - 1] + cost[i, j] > sum[i, j]) {\n        sum[i, j] <- sum[i, j - 1] + cost[i, j]\n        count[i, j] <- count[i, j - 1]\n      } else if (sum[i, j - 1] + cost[i, j] == sum[i, j]) {\n        count[i, j] <- count[i, j] + count[i, j - 1]\n      }\n    }\n  }\n  # Return the average\n  return(sum[n, n] / count[n, n])\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (j in 2:m) {\n        dp[1, j] <- dp[1, j - 1] + cost[1, j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return (dp[n, m] / (n + m - 1))\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m] / (n+m-1))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column\n  dp[1,] <- cumsum(cost[1,])\n  dp[,1] <- cumsum(cost[,1])\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  # Return the maximum average\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n] / (2*n - 1)\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # Fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  cost[[n]][n] / (2*n-1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0,n,m)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for (i in 2:n) {\n        for (j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  # Initialize the matrix for storing results of subproblems\n  dp <- matrix(0, n, m)\n  # Fill the entries for 0th row and 0th column\n  dp[1,1] <- cost[1,1]\n  for (i in 2:m) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill rest of the entries in bottom up manner\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- cost[i,j] + max(dp[i,j-1], dp[i-1,j])\n    }\n  }\n  # Return the maximum average\n  return(dp[n,m] / (n+m-1))\n}\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  avg <- matrix(0, n, n)\n  avg[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    avg[1,i] <- avg[1,i-1] + cost[1,i]\n    avg[i,1] <- avg[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      avg[i,j] <- max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n    }\n  }\n  avg[n,n] / (n*n)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n] / (n*n)\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  avg <- matrix(0, n, n)\n  avg[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    avg[1,i] <- avg[1,i-1] + cost[1,i]\n    avg[i,1] <- avg[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      avg[i,j] <- max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n    }\n  }\n  return(avg[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  max_avg <- 0\n  for (i in 1:n) {\n    for (j in 1:n) {\n      if (i == 1 & j == 1) {\n        cost[i, j] <- cost[i, j]\n      } else if (i == 1) {\n        cost[i, j] <- cost[i, j] + cost[i, j - 1]\n      } else if (j == 1) {\n        cost[i, j] <- cost[i, j] + cost[i - 1, j]\n      } else {\n        cost[i, j] <- cost[i, j] + max(cost[i - 1, j], cost[i, j - 1])\n      }\n    }\n  }\n  max_avg <- cost[n, n] / (n * n)\n  return(max_avg)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n) {\n    for(j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, nrow = n, ncol = n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, m] / (n + m - 1)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j-1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(cost)\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/((n-1)*2+1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    # Initialize the matrix to store the cost of the path\n    pathCost <- matrix(0, nrow = n, ncol = n)\n    # Initialize the matrix to store the number of paths\n    pathCount <- matrix(0, nrow = n, ncol = n)\n    # Initialize the matrix to store the average cost\n    pathAvg <- matrix(0, nrow = n, ncol = n)\n    # Initialize the first cell of the matrix\n    pathCost[1,1] <- cost[1,1]\n    pathCount[1,1] <- 1\n    pathAvg[1,1] <- cost[1,1]\n    # Initialize the first row of the matrix\n    for (j in 2:n) {\n        pathCost[1,j] <- pathCost[1,j-1] + cost[1,j]\n        pathCount[1,j] <- 1\n        pathAvg[1,j] <- pathCost[1,j]\n    }\n    # Initialize the first column of the matrix\n    for (i in 2:n) {\n        pathCost[i,1] <- pathCost[i-1,1] + cost[i,1]\n        pathCount[i,1] <- 1\n        pathAvg[i,1] <- pathCost[i,1]\n    }\n    # Fill the rest of the matrix\n    for (i in 2:n) {\n        for (j in 2:n) {\n            if (pathAvg[i-1,j] > pathAvg[i,j-1]) {\n                pathCost[i,j] <- pathCost[i-1,j] + cost[i,j]\n                pathCount[i,j] <- pathCount[i-1,j]\n                pathAvg[i,j] <- pathCost[i,j] / pathCount[i,j]\n            } else if (pathAvg[i-1,j] < pathAvg[i,j-1]) {\n                pathCost[i,j] <- pathCost[i,j-1] + cost[i,j]\n                pathCount[i,j] <- pathCount[i,j-1",
    "\n    # Write your code here\n    # Return the maximum average\n    n <- length(cost)\n    avg <- matrix(0,n,n)\n    avg[1,1] <- cost[1,1]\n    for(i in 2:n){\n        avg[1,i] <- avg[1,i-1] + cost[1,i]\n        avg[i,1] <- avg[i-1,1] + cost[i,1]\n    }\n    for(i in 2:n){\n        for(j in 2:n){\n            avg[i,j] <- max(avg[i-1,j],avg[i,j-1]) + cost[i,j]\n        }\n    }\n    return(avg[n,n]/(n*n))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,m]/(n+m-1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n] / (n*n)\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the cost of the path\n  pathCost <- matrix(0, nrow = n, ncol = n)\n  # Initialize the matrix to store the number of paths\n  pathCount <- matrix(0, nrow = n, ncol = n)\n  # Initialize the first row and column\n  pathCost[1,] <- cost[1,]\n  pathCount[1,] <- 1\n  pathCost[,1] <- cost[,1]\n  pathCount[,1] <- 1\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      # If the path from the top is better\n      if (pathCost[i-1,j] > pathCost[i,j-1]) {\n        pathCost[i,j] <- pathCost[i-1,j] + cost[i,j]\n        pathCount[i,j] <- pathCount[i-1,j]\n      }\n      # If the path from the left is better\n      else if (pathCost[i-1,j] < pathCost[i,j-1]) {\n        pathCost[i,j] <- pathCost[i,j-1] + cost[i,j]\n        pathCount[i,j] <- pathCount[i,j-1]\n      }\n      # If the paths from the top and left are equal\n      else {\n        pathCost[i,j] <- pathCost[i-1,j] + cost[i,j]\n        pathCount[i,j] <- pathCount[i-1,j] + pathCount[i,j-1]\n      }\n    }\n  }\n  # Return the average\n  return(pathCost[n,n] / pathCount[n,n])\n}",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, nrow = n, ncol = m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Your code goes here\n  n <- length(cost)\n  m <- matrix(0, n, n)\n  m[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    m[1,i] <- m[1,i-1] + cost[1,i]\n    m[i,1] <- m[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i,j] <- max(m[i-1,j], m[i,j-1]) + cost[i,j]\n    }\n  }\n  return(m[n,n]/(n*n))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(cost)\n  n <- length(cost)\n  dp <- matrix(0,n,n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n){\n    for(j in 2:n){\n      dp[i,j] <- max(dp[i-1,j],dp[i,j-1]) + cost[i,j]\n    }\n  }\n  print(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m){\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n){\n    for(j in 2:m){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,m] / (n+m-1)\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average over all paths\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (2*n-1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, nrow = n, ncol = m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j-1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  # Write your code here\n  # Initialize the matrix\n  n <- length(cost)\n  mat <- matrix(0, nrow = n, ncol = n)\n  mat[1, 1] <- cost[1, 1]\n  # Fill the first row\n  for (i in 2:n) {\n    mat[1, i] <- mat[1, i - 1] + cost[1, i]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    mat[i, 1] <- mat[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      mat[i, j] <- max(mat[i - 1, j], mat[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the maximum average\n  return(mat[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix for storing results of subproblems\n  dp <- matrix(0, n, n)\n  # Paths starting from the last cell have cost equal to the value of the cell\n  dp[n, n] <- cost[n, n]\n  # Fill last row and last column as base case values for the DP\n  for (i in seq(n - 1, 1, -1)) {\n    dp[n, i] <- cost[n, i] + dp[n, i + 1]\n    dp[i, n] <- cost[i, n] + dp[i + 1, n]\n  }\n  # Fill the DP matrix\n  for (i in seq(n - 1, 1, -1)) {\n    for (j in seq(n - 1, 1, -1)) {\n      dp[i, j] <- cost[i, j] + max(dp[i + 1, j], dp[i, j + 1])\n    }\n  }\n  # Return the maximum average\n  return(dp[1, 1] / (n * n))\n}",
    "\n  n <- length(cost)\n  # Initialize the matrix with the first row and column\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  # Initialize the matrix\n  dp <- matrix(0, nrow = n, ncol = n)\n  # Base case\n  dp[1, 1] <- cost[1, 1]\n  # Fill the first row\n  for (j in 2:n) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n, n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, nrow = n, ncol = n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  # your code goes here\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m){\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n){\n    for(j in 2:m){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- dim(cost)[1]\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  max_avg <- 0\n  for(i in 1:n){\n    for(j in 1:m){\n      if(i==1 & j==1){\n        cost[i,j] <- cost[i,j]\n      }else if(i==1){\n        cost[i,j] <- cost[i,j] + cost[i,j-1]\n      }else if(j==1){\n        cost[i,j] <- cost[i,j] + cost[i-1,j]\n      }else{\n        cost[i,j] <- cost[i,j] + max(cost[i-1,j],cost[i,j-1])\n      }\n    }\n  }\n  max_avg <- cost[n,m]/(n+m-1)\n  return(max_avg)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  # Create a matrix to store results of subproblems\n  dp <- matrix(0, n, n)\n  # Initialize first column of total cost(tc) matrix\n  tc <- matrix(0, n, n)\n  for (i in 1:n) {\n    tc[i, 1] <- tc[i-1, 1] + cost[i, 1]\n  }\n  # Initialize first row of tc matrix\n  for (j in 2:n) {\n    tc[1, j] <- tc[1, j-1] + cost[1, j]\n  }\n  # Construct rest of the tc matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      tc[i, j] <- cost[i, j] + tc[i-1, j] + tc[i, j-1] - tc[i-1, j-1]\n    }\n  }\n  # Initialize first column of dp matrix\n  for (i in 1:n) {\n    dp[i, 1] <- tc[i, 1]\n  }\n  # Initialize first row of dp matrix\n  for (j in 2:n) {\n    dp[1, j] <- tc[1, j]\n  }\n  # Construct rest of the dp matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- tc[i, j] + max(dp[i-1, j], dp[i, j-1])\n    }\n  }\n  return(dp[n, n]/(2*n-1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:n) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/((n-1)*2 + 1)\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the average cost of the path\n  avg <- matrix(0, n, n)\n  # Initialize the matrix to store the number of paths to the cell\n  num <- matrix(0, n, n)\n  # Initialize the first cell\n  avg[1,1] <- cost[1,1]\n  num[1,1] <- 1\n  # Initialize the first row\n  for (j in 2:n) {\n    avg[1,j] <- avg[1,j-1] + cost[1,j]\n    num[1,j] <- 1\n  }\n  # Initialize the first column\n  for (i in 2:n) {\n    avg[i,1] <- avg[i-1,1] + cost[i,1]\n    num[i,1] <- 1\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      if (avg[i-1,j] > avg[i,j-1]) {\n        avg[i,j] <- avg[i-1,j] + cost[i,j]\n        num[i,j] <- num[i-1,j]\n      } else if (avg[i-1,j] < avg[i,j-1]) {\n        avg[i,j] <- avg[i,j-1] + cost[i,j]\n        num[i,j] <- num[i,j-1]\n      } else {\n        avg[i,j] <- avg[i-1,j] + cost[i,j]\n        num[i,j] <- num[i-1,j] + num[i,j-1]\n      }\n    }\n  }\n  # Return the average cost of the path\n  return(avg[n,n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n-1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n){\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(j in 2:m){\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for(i in 2:n){\n    for(j in 2:m){\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  print(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    # Initialize the matrix\n    matrix <- matrix(0, nrow = n, ncol = n)\n    matrix[1,1] <- cost[1,1]\n    # Fill the first row\n    for (i in 2:n) {\n        matrix[1,i] <- matrix[1,i-1] + cost[1,i]\n    }\n    # Fill the first column\n    for (i in 2:n) {\n        matrix[i,1] <- matrix[i-1,1] + cost[i,1]\n    }\n    # Fill the rest of the matrix\n    for (i in 2:n) {\n        for (j in 2:n) {\n            matrix[i,j] <- max(matrix[i-1,j], matrix[i,j-1]) + cost[i,j]\n        }\n    }\n    return(matrix[n,n]/(n*n))\n}",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  for (i in 2:n) {\n    cost[[i]][1] <- cost[[i]][1] + cost[[i-1]][1]\n    cost[[1]][i] <- cost[[1]][i] + cost[[1]][i-1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      cost[[i]][j] <- cost[[i]][j] + max(cost[[i-1]][j], cost[[i]][j-1])\n    }\n  }\n  return(cost[[n]][n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  m <- matrix(0, nrow = n, ncol = n)\n  m[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    m[1,i] <- m[1,i-1] + cost[1,i]\n    m[i,1] <- m[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      m[i,j] <- max(m[i-1,j], m[i,j-1]) + cost[i,j]\n    }\n  }\n  return(m[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix with the first row and column\n  mat <- matrix(0, nrow = n, ncol = n)\n  mat[1,] <- cumsum(cost[1,])\n  mat[,1] <- cumsum(cost[,1])\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      mat[i,j] <- cost[i,j] + max(mat[i-1,j], mat[i,j-1])\n    }\n  }\n  # Return the maximum average\n  return(mat[n,n] / n^2)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n    # Write your code here\n    # Return the maximum average of all paths\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n ",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, nrow = n, ncol = m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3, ncol = 3)\nmaxAverageOfPath(cost)\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix to store the average cost of each cell\n  avg <- matrix(0, n, n)\n  # Initialize the first cell\n  avg[1,1] <- cost[1,1]\n  # Fill the first row\n  for (i in 2:n) {\n    avg[1,i] <- avg[1,i-1] + cost[1,i]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    avg[i,1] <- avg[i-1,1] + cost[i,1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      avg[i,j] <- max(avg[i-1,j], avg[i,j-1]) + cost[i,j]\n    }\n  }\n  # Return the average cost of the last cell\n  return(avg[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  # Your code here\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n ",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix for storing results of subproblems\n  dp <- matrix(0, n, n)\n  # Paths starting from the last cell have cost equal to the value of the last cell\n  dp[n, n] <- cost[n, n]\n  # Fill last row and last column as base to fill entire table\n  for (i in n:1) {\n    dp[i, n] <- dp[i + 1, n] + cost[i, n]\n    dp[n, i] <- dp[n, i + 1] + cost[n, i]\n  }\n  # Fill the table in bottom-up fashion\n  for (i in (n - 1):1) {\n    for (j in (n - 1):1) {\n      dp[i, j] <- cost[i, j] + max(dp[i + 1, j], dp[i, j + 1])\n    }\n  }\n  # Return the maximum average\n  return(dp[1, 1] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  # initialize the matrix\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  # return the maximum average\n  return(dp[n,n] / (2*n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for(i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for(i in 2:n) {\n    for(j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1,1] <- cost[1,1]\n    for (i in 2:n) {\n        dp[1,i] <- dp[1,i-1] + cost[1,i]\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix for dynamic programming\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  # Fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- cost[i,j] + max(dp[i-1,j], dp[i,j-1])\n    }\n  }\n  # Return the maximum average\n  return(dp[n,n] / (n * n))\n}\n",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(cost)\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  print(dp[n,n]/(n*n))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n] / (2*n - 1)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m]/(n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n] / (n*n))\n}\n",
    "\n  n <- length(cost)\n  # initialize the matrix with the first row and column\n  mat <- matrix(0, n, n)\n  mat[1,] <- cumsum(cost[1,])\n  mat[,1] <- cumsum(cost[,1])\n  # fill the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      mat[i,j] <- cost[i,j] + max(mat[i-1,j], mat[i,j-1])\n    }\n  }\n  # return the maximum average\n  return(mat[n,n] / (n*n))\n}\n ",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, n, m)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,m] / (n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/((n-1)*2)\n}\n",
    "\n  n <- length(cost)\n  # Initialize the matrix for dynamic programming\n  dp <- matrix(0, n, n)\n  # The first element is the same as the cost matrix\n  dp[1,1] <- cost[1,1]\n  # Fill the first row\n  for (j in 2:n) {\n    dp[1,j] <- dp[1,j-1] + cost[1,j]\n  }\n  # Fill the first column\n  for (i in 2:n) {\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  # Fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  # Return the maximum average\n  return(dp[n,n] / (n*n))\n}",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (n * n)\n}\n\ncost <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n] / (2*n - 1)\n}\n",
    "\n  n <- nrow(cost)\n  m <- ncol(cost)\n  # create a matrix to store the cost of the path\n  path <- matrix(0, nrow = n, ncol = m)\n  # initialize the first row and column\n  path[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    path[i,1] <- path[i-1,1] + cost[i,1]\n  }\n  for (j in 2:m) {\n    path[1,j] <- path[1,j-1] + cost[1,j]\n  }\n  # fill the rest of the matrix\n  for (i in 2:n) {\n    for (j in 2:m) {\n      path[i,j] <- cost[i,j] + max(path[i-1,j], path[i,j-1])\n    }\n  }\n  # return the average\n  return(path[n,m] / (n+m-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- cost[i, j] + max(dp[i - 1, j], dp[i, j - 1])\n    }\n  }\n  return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i-1] + cost[1, i]\n        dp[i, 1] <- dp[i-1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i-1, j], dp[i, j-1]) + cost[i, j]\n        }\n    }\n    dp[n, n] / (2*n-1)\n}\n",
    "\n    n <- nrow(cost)\n    m <- ncol(cost)\n    dp <- matrix(0, n, m)\n    dp[1,1] <- cost[1,1]\n    for(i in 2:n) {\n        dp[i,1] <- dp[i-1,1] + cost[i,1]\n    }\n    for(j in 2:m) {\n        dp[1,j] <- dp[1,j-1] + cost[1,j]\n    }\n    for(i in 2:n) {\n        for(j in 2:m) {\n            dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n        }\n    }\n    return(dp[n,m]/(n+m-1))\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  dp[n, n] / (2 * n - 1)\n}",
    "\n  # Write your code here\n  # Return the maximum average of all paths\n  n <- nrow(cost)\n  m <- ncol(cost)\n  dp <- matrix(0, nrow = n, ncol = m)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (j in 2:m) {\n    dp[1, j] <- dp[1, j - 1] + cost[1, j]\n  }\n  for (i in 2:n) {\n    for (j in 2:m) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return(dp[n, m] / (n + m - 1))\n}\n",
    "\n  # Write your code here\n  # To print results to the standard output you can use print()\n  # Example: print(\"Hello world!\")\n  n <- length(cost)\n  dp <- matrix(0, nrow = n, ncol = n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  return(dp[n,n]/(2*n-1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1, 1] <- cost[1, 1]\n  for (i in 2:n) {\n    dp[1, i] <- dp[1, i - 1] + cost[1, i]\n    dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n    }\n  }\n  return (dp[n, n] / (n * n))\n}\n",
    "\n    n <- length(cost)\n    dp <- matrix(0, n, n)\n    dp[1, 1] <- cost[1, 1]\n    for (i in 2:n) {\n        dp[1, i] <- dp[1, i - 1] + cost[1, i]\n        dp[i, 1] <- dp[i - 1, 1] + cost[i, 1]\n    }\n    for (i in 2:n) {\n        for (j in 2:n) {\n            dp[i, j] <- max(dp[i - 1, j], dp[i, j - 1]) + cost[i, j]\n        }\n    }\n    return(dp[n, n] / (2 * n - 1))\n}\n",
    "\n  n <- length(cost)\n  dp <- matrix(0, n, n)\n  dp[1,1] <- cost[1,1]\n  for (i in 2:n) {\n    dp[1,i] <- dp[1,i-1] + cost[1,i]\n    dp[i,1] <- dp[i-1,1] + cost[i,1]\n  }\n  for (i in 2:n) {\n    for (j in 2:n) {\n      dp[i,j] <- max(dp[i-1,j], dp[i,j-1]) + cost[i,j]\n    }\n  }\n  dp[n,n]/n\n}\n\ncost <- matrix(c(1,2,3,4,5,6,7,8,9), 3, 3)\nmaxAverageOfPath(cost)\n"
  ]
}