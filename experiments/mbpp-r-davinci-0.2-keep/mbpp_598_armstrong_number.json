{
  "name": "mbpp_598_armstrong_number",
  "language": "r",
  "prompt": "# Write a function to check whether the given number is armstrong or not.\narmstrong_number <- function(number) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_598_armstrong_number.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- armstrong_number\n    if(!identical(candidate(153), TRUE)){quit('no', 1)}\n    if(!identical(candidate(259), FALSE)){quit('no', 1)}\n    if(!identical(candidate(4458), FALSE)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + as.integer(substr(number_string, i, i)) ^ number_length\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_of_digits <- nchar(number)\n  sum <- 0\n  for (i in 1:number_of_digits) {\n    sum <- sum + (as.integer(substr(number, i, i))^number_of_digits)\n  }\n  if (sum == number) {\n    return(\"Armstrong Number\")\n  } else {\n    return(\"Not an Armstrong Number\")\n  }\n}\n\narmstrong_number(153)\n",
    "\n    number_list <- strsplit(as.character(number), \"\")[[1]]\n    number_list <- as.numeric(number_list)\n    number_list <- number_list ^ length(number_list)\n    sum(number_list) == number\n}\n\narmstrong_number(153)\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + (as.integer(substr(number_string, i, i)) ^ number_length)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_of_digits <- nchar(number)\n  sum <- 0\n  for (i in 1:number_of_digits) {\n    sum <- sum + (as.integer(substr(number, i, i)) ^ number_of_digits)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  number_sum <- 0\n  for (i in 1:number_length) {\n    number_sum <- number_sum + (as.numeric(substr(number_string, i, i))^number_length)\n  }\n  if (number_sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + (as.integer(substr(number_string, i, i)) ^ number_length)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  armstrong_sum <- 0\n  for (i in 1:number_length) {\n    armstrong_sum <- armstrong_sum + (as.numeric(substr(number_string, i, i)) ^ number_length)\n  }\n  if (armstrong_sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + (as.numeric(substr(number_string, i, i))^number_length)\n  }\n  if (sum == number) {\n    return(\"Armstrong Number\")\n  } else {\n    return(\"Not an Armstrong Number\")\n  }\n}\n\narmstrong_number(153)\narmstrong_number(1634)\narmstrong_number(1635)\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + as.numeric(substr(number_string, i, i))^number_length\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + (as.integer(substr(number_string, i, i))^number_length)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\narmstrong_number(153)\narmstrong_number(154)\n",
    "\n  number_digits <- nchar(number)\n  sum <- 0\n  for (i in 1:number_digits) {\n    sum <- sum + (as.numeric(substr(number, i, i)) ^ number_digits)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\narmstrong_number(371)\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + (as.integer(substr(number_string, i, i))^number_length)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n    number_string <- as.character(number)\n    number_length <- nchar(number_string)\n    sum <- 0\n    for (i in 1:number_length) {\n        sum <- sum + as.numeric(substr(number_string, i, i))^number_length\n    }\n    if (sum == number) {\n        return(\"Armstrong Number\")\n    } else {\n        return(\"Not Armstrong Number\")\n    }\n}\n\narmstrong_number(153)\narmstrong_number(371)\narmstrong_number(407)\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for(i in 1:number_length) {\n    sum <- sum + as.numeric(substr(number_string, i, i))^number_length\n  }\n  if(sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_of_digits <- nchar(number)\n  sum <- 0\n  while(number > 0) {\n    remainder <- number %% 10\n    sum <- sum + (remainder ^ number_of_digits)\n    number <- number %/% 10\n  }\n  if(sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_of_digits <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_of_digits) {\n    sum <- sum + as.numeric(substr(number_string, i, i))^number_of_digits\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n\narmstrong_number(153)\narmstrong_number(154)\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + (as.integer(substr(number_string, i, i)) ^ number_length)\n  }\n  if (sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  armstrong_sum <- 0\n  for (i in 1:number_length) {\n    armstrong_sum <- armstrong_sum + (as.numeric(substr(number_string, i, i)) ^ number_length)\n  }\n  if (armstrong_sum == number) {\n    return(TRUE)\n  } else {\n    return(FALSE)\n  }\n}\n",
    "\n  number_string <- as.character(number)\n  number_length <- nchar(number_string)\n  sum <- 0\n  for (i in 1:number_length) {\n    sum <- sum + as.integer(substr(number_string, i, i))^number_length\n  }\n  if (sum == number) {\n    return(\"Armstrong Number\")\n  } else {\n    return(\"Not an Armstrong Number\")\n  }\n}\n"
  ]
}