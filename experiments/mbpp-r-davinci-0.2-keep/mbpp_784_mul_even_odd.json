{
  "name": "mbpp_784_mul_even_odd",
  "language": "r",
  "prompt": "# Write a function to find the product of first even and odd number of a given list.\nmul_even_odd <- function(list1) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_784_mul_even_odd.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- mul_even_odd\n    if(!identical(candidate(c(1, 3, 5, 7, 4, 1, 6, 8)), 4)){quit('no', 1)}\n    if(!identical(candidate(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)), 2)){quit('no', 1)}\n    if(!identical(candidate(c(1, 5, 7, 9, 10)), 10)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n    even <- list1[seq(2, length(list1), 2)]\n    odd <- list1[seq(1, length(list1), 2)]\n    prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[which(list1 %% 2 == 0)]\n  odd_num <- list1[which(list1 %% 2 != 0)]\n  prod(even_num[1], odd_num[1])\n}\nmul_even_odd(list1)\n",
    "\n  even <- list1[seq(2, length(list1), 2)]\n  odd <- list1[seq(1, length(list1), 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(c(1, 2, 3, 4, 5, 6))\n",
    "\n  even <- list1[seq(2, length(list1), 2)]\n  odd <- list1[seq(1, length(list1), 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[which(list1 %% 2 == 0)]\n  odd_num <- list1[which(list1 %% 2 != 0)]\n  prod(even_num[1], odd_num[1])\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[which(list1 %% 2 == 0)]\n  odd_num <- list1[which(list1 %% 2 != 0)]\n  prod(even_num[1], odd_num[1])\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[seq(2, length(list1), by = 2)]\n  odd_num <- list1[seq(1, length(list1), by = 2)]\n  prod(even_num) * prod(odd_num)\n}\n\nmul_even_odd(list1)\n",
    "\n  even <- list1[seq(2, length(list1), 2)]\n  odd <- list1[seq(1, length(list1), 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even <- list1[seq(2, length(list1), 2)]\n  odd <- list1[seq(1, length(list1), 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[seq(2, length(list1), 2)]\n  odd_num <- list1[seq(1, length(list1), 2)]\n  return(even_num[1] * odd_num[1])\n}\nmul_even_odd(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n",
    "\n  even <- list1[seq(2, length(list1), by = 2)]\n  odd <- list1[seq(1, length(list1), by = 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[seq(2, length(list1), by = 2)]\n  odd_num <- list1[seq(1, length(list1), by = 2)]\n  prod(even_num) * prod(odd_num)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_odd <- c(list1[1], list1[2])\n  return(prod(even_odd))\n}\n\nmul_even_odd(list1)\n",
    "\n  even_odd <- c(list1[1], list1[2])\n  return(prod(even_odd))\n}\nmul_even_odd(list1)\n",
    "\n  even <- list1[seq(2, length(list1), by = 2)]\n  odd <- list1[seq(1, length(list1), by = 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[seq(2, length(list1), by = 2)]\n  odd_num <- list1[seq(1, length(list1), by = 2)]\n  prod(even_num) * prod(odd_num)\n}\n\nmul_even_odd(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n",
    "\n  even <- list1[seq(2, length(list1), by = 2)]\n  odd <- list1[seq(1, length(list1), by = 2)]\n  prod(even) * prod(odd)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[seq(2, length(list1), 2)]\n  odd_num <- list1[seq(1, length(list1), 2)]\n  prod(even_num) * prod(odd_num)\n}\nmul_even_odd(list1)\n",
    "\n  even_num <- list1[seq(2, length(list1), by = 2)]\n  odd_num <- list1[seq(1, length(list1), by = 2)]\n  prod(even_num) * prod(odd_num)\n}\n\nmul_even_odd(list1)\n",
    "\n  even_odd <- list(even = list1[2], odd = list1[1])\n  return(prod(even_odd))\n}\n\nmul_even_odd(list1)\n"
  ]
}