{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "r",
  "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nmax_sum_increasing_subseq <- function(a, n, index, k) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- max_sum_increasing_subseq\n    if(!identical(candidate(c(1, 101, 2, 3, 100, 4, 5), 7, 4, 6), 11)){quit('no', 1)}\n    if(!identical(candidate(c(1, 101, 2, 3, 100, 4, 5), 7, 2, 5), 7)){quit('no', 1)}\n    if(!identical(candidate(c(11, 15, 19, 21, 26, 28, 31), 7, 2, 4), 71)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n  }\n  if (a[k] > a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum = 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index]) {\n      max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index) + a[index])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 0:(index-1)) {\n    if (a[i] < a[index]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (a[index] > a[k]) {\n        return(max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, index+1, k+1)))\n    } else {\n        return(max_sum_increasing_subseq(a, n, index, k+1))\n    }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index)))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k <= index) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[k] < a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1) + a[k]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max_sum_increasing_subseq(a, n, index - 1, k))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    else {\n        max_sum <- 0\n        for (i in 1:index) {\n            if (a[i] < a[k]) {\n                max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n            }\n        }\n        return(max_sum + a[k])\n    }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k > index) {\n    return(max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  if (k > index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index + 1] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, k - 1) + a[index]\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 1) {\n    return(max(a[k], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 0:(index - 1)) {\n    if (a[i] < a[index] && i < k) {\n      sum <- max_sum_increasing_subseq(a, n, i, k) + a[index]\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n\nmax_sum_increasing_subseq(a, n, n, n)\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    if (k == 1) {\n      return(a[index])\n    } else {\n      return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n    }\n  }\n  if (k == 1) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 1) {\n    return(a[1])\n  }\n  max_sum <- 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index] && i < k) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[index])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[k])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  # Write your code here\n  if(index == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for(i in 1:index-1) {\n    if(a[i] < a[k]) {\n      sum <- max_sum_increasing_subseq(a, n, i, k)\n      if(sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, k, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 2) {\n    return(max(a[1], a[2], a[1] + a[2]))\n  }\n  if (index == k) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    return(max(a[index], a[index] + a[index - 1]))\n  }\n  if (k == index) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  } else {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n  }\n}\n\nmax_sum_increasing_subseq(a, n, 1, 1)\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  \n  if (k == 0) {\n    return(a[index])\n  }\n  \n  if (k == index) {\n    return(a[index])\n  }\n  \n  if (k < index) {\n    return(0)\n  }\n  \n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 0) {\n    return(a[0])\n  }\n  if (a[k] > a[index]) {\n    return(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  if (a[index] < a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  if (a[index] >= a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k <= index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  \n  # If the kth element is not included in the subsequence.\n  ans1 <- max_sum_increasing_subseq(a, n, index + 1, k)\n  \n  # If the kth element is included in the subsequence.\n  ans2 <- 0\n  if (a[index] < a[k]) {\n    ans2 <- max_sum_increasing_subseq(a, n, index + 1, k) + a[index]\n  }\n  \n  return(max(ans1, ans2))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  # If we include the kth element, then we need to find the maximum sum of increasing subsequence from prefix until kth index.\n  include_k <- a[k] + max_sum_increasing_subseq(a, n, k, k + 1)\n  # If we exclude the kth element, then we need to find the maximum sum of increasing subsequence from prefix until (k + 1)th index.\n  exclude_k <- max_sum_increasing_subseq(a, n, index, k + 1)\n  return(max(include_k, exclude_k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if(index == n) {\n        return(0)\n    }\n    if(k == n) {\n        return(0)\n    }\n    if(k <= index) {\n        return(0)\n    }\n    if(a[k] < a[index]) {\n        return(0)\n    }\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    if (k == 2) {\n      return(max(a[1], a[2]))\n    } else {\n      return(a[1])\n    }\n  }\n  if (index == k) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index < k) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (i < k) {\n      continue\n    }\n    sum <- max_sum_increasing_subseq(a, n, i, k) + a[index]\n    if (sum > max_sum) {\n      max_sum <- sum\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  if (a[k] < a[index]) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (index == 2) {\n    return(max(a[1], a[2], a[1] + a[3]))\n  }\n  if (k == 2) {\n    return(max(a[index], a[index] + a[index - 1]))\n  }\n  if (k == 3) {\n    return(max(a[index], a[index] + a[index - 1], a[index] + a[index - 2]))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n    if (index == 1) {\n        return(a[index])\n    }\n    if (k == 1) {\n        return(a[index])\n    }\n    max_sum <- 0\n    for (i in 1:(index - 1)) {\n        if (a[i] < a[index]) {\n            temp <- max_sum_increasing_subseq(a, n, i, k - 1)\n            if (temp > max_sum) {\n                max_sum <- temp\n            }\n        }\n    }\n    return(max_sum + a[index])\n}\n",
    "\n  if (k == n) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k + 1),\n             a[k] + max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k > index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 1) {\n    if (k == 1) {\n      return(a[1])\n    } else {\n      return(0)\n    }\n  }\n  if (k <= index) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == 1) {\n        return(a[index])\n    }\n    max_sum <- 0\n    for (i in 1:(index - 1)) {\n        if (a[i] < a[index]) {\n            sum <- max_sum_increasing_subseq(a, n, i, index) + a[index]\n            if (sum > max_sum) {\n                max_sum <- sum\n            }\n        }\n    }\n    return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1)))\n  }\n  if (k > index) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1)))\n  }\n}\n",
    "\n  if (index == 1) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  max_sum <- 0\n  for (i in 1:(index-1)) {\n    if (a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, index) + a[index]\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k < 0) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == 0) {\n        return(a[1])\n    }\n    if (index == 1) {\n        return(max(a[1], a[2]))\n    }\n    if (k == 1) {\n        return(max(a[index], max_sum_increasing_subseq(a, n, index-1, k)))\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index-1, k-1), max_sum_increasing_subseq(a, n, index-1, k)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  else {\n    max_sum <- 0\n    for (i in 1:(index-1)) {\n      if (a[i] < a[index] && i < k) {\n        sum <- max_sum_increasing_subseq(a, n, i, k) + a[index]\n        if (sum > max_sum) {\n          max_sum <- sum\n        }\n      }\n    }\n    return(max_sum)\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  # Find the maximum sum of increasing subsequence from prefix until ith index.\n  max_sum <- max_sum_increasing_subseq(a, n, index - 1, k)\n  # Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n  if (a[index] < a[k]) {\n    max_sum <- max(max_sum, a[index] + max_sum_increasing_subseq(a, n, k, k - 1))\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + a[0])\n  }\n  if (k == index) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n  } else {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (k == n) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[k])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, index, k + 2)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 0:(index-1)) {\n    if (a[i] < a[k]) {\n      sum <- max_sum_increasing_subseq(a, n, i, k)\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k),\n             max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index] && i < k) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[index])\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  \n  if (k == 0) {\n    return(0)\n  }\n  \n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum = 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1) + a[k]))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == 0) {\n        return(a[1])\n    }\n    if (index == 1) {\n        return(max(a[1], a[2]))\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    if (k < index) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  \n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  \n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 1) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), \n             max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + a[k])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k]))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n  }\n  else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (a[k] > a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k - 1), a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k - 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n  } else {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    if (k == 1) {\n      return(a[1])\n    } else {\n      return(a[2])\n    }\n  }\n  if (k == index + 1) {\n    return(a[index + 1])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k),\n             a[index + 1] + max_sum_increasing_subseq(a, n, index - 1, index)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1] + a[2])\n  }\n  if (k == 2) {\n    return(a[1] + a[3])\n  }\n  if (k == 3) {\n    return(a[1] + a[4])\n  }\n  if (k == 4) {\n    return(a[1] + a[5])\n  }\n  if (k == 5) {\n    return(a[1] + a[6])\n  }\n  if (k == 6) {\n    return(a[1] + a[7])\n  }\n  if (k == 7) {\n    return(a[1] + a[8])\n  }\n  if (k == 8) {\n    return(a[1] + a[9])\n  }\n  if (k == 9) {\n    return(a[1] + a[10])\n  }\n  if (k == 10) {\n    return(a[1] + a[11])\n  }\n  if (k == 11) {\n    return(a[1] + a[12])\n  }\n  if (k == 12) {\n    return(a[1] + a[13])\n  }\n  if (k == 13) {\n    return(a[1] + a[14])\n  }\n  if (k == 14) {\n    return(a[1] + a[15])\n  }\n  if (k == 15) {\n    return(a[1] + a[16])\n  }\n  if (k == 16) {\n    return(a[1] + a[17])\n  }\n  if (k == 17) {\n    return(a[1] + a[18])\n  }\n  if (k == 18) {\n    return(a[1] + a[19])\n  }\n  if (k == 19) {\n    return(a[1] + a[20",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, k, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k <= index) {\n        return(0)\n    }\n    if (a[index] > a[k]) {\n        return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n    } else {\n        return(max_sum_increasing_subseq(a, n, index, k + 1))\n    }\n}\n",
    "\n  if (k == n) {\n    return(0)\n  }\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) return(0)\n  if (k == 0) return(0)\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, k) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k - 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  if (index == k) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k <= index) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(max(a[index], max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[k])\n  }\n  if (k == index) {\n    return(a[k])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k - 1), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[k]))\n}\n",
    "\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, a[k] + max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 1) {\n    return(a[1])\n  }\n  max_sum <- 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index] && i < k) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[index])\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k <= index) {\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index - 1) + a[index + 1]))\n  }\n  return(max_sum_increasing_subseq(a, n, index - 1, k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  else {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(max_sum_increasing_subseq(a, n, index + 1, index + 1))\n  }\n  if (a[index] < a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n\nmax_sum_increasing_subseq(a, n, 0, 0)\n",
    "\n  # Write your code here\n  if(index == n) {\n    return(0)\n  }\n  if(k == n) {\n    return(0)\n  }\n  if(a[k] > a[index]) {\n    return(a[k] + max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n  else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k == 0) {\n        return(0)\n    }\n    if (k <= index) {\n        return(max(max_sum_increasing_subseq(a, n, index - 1, k),\n                   max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n    } else {\n        return(max_sum_increasing_subseq(a, n, index - 1, k))\n    }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 0) {\n    return(max(a[1], a[2]))\n  }\n  if (k == 1) {\n    return(max(a[1], a[2], a[1] + a[2]))\n  }\n  if (index == k) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 0) {\n    return(a[0])\n  }\n  if (k == 1) {\n    return(max(a[0], a[1]))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index < k) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (index == 0) {\n    return(a[k])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index - 1, k + 1) + a[k]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k == index) {\n        return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    }\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  if (k == 0) {\n    return(max(a[1], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  if (a[k] > a[index]) {\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max_sum_increasing_subseq(a, n, index - 1, k))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 1) {\n    return(a[1])\n  }\n  else {\n    max_sum <- 0\n    for (i in 1:(index - 1)) {\n      if (a[i] < a[index] && i < k) {\n        sum <- max_sum_increasing_subseq(a, n, i, k) + a[index]\n        if (sum > max_sum) {\n          max_sum <- sum\n        }\n      }\n    }\n    return(max_sum)\n  }\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (a[index] > a[k]) {\n        return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n    } else {\n        return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (index == 1) {\n    return(max(a[1], a[2]))\n  }\n  if (k == index) {\n    return(max(a[index], max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(0)\n  }\n  if (index == 1) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  if (k == 1) {\n    return(a[1])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      temp <- max_sum_increasing_subseq(a, n, i, k-1) + a[k]\n      if (temp > max_sum) {\n        max_sum <- temp\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] < a[k]) {\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) return(0)\n  if (k == n) return(0)\n  if (k < index) return(0)\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[index]) {\n      sum <- max_sum_increasing_subseq(a, n, i, k) + a[index]\n      if (sum > max_sum) {\n        max_sum <- sum\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n                   max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1),\n               max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k <= index) {\n    return(0)\n  }\n  # If we include the kth element, then the sum will be a[k] + max_sum_increasing_subseq(a, n, index, k + 1)\n  # If we don't include the kth element, then the sum will be max_sum_increasing_subseq(a, n, index + 1, k + 1)\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (k == n) {\n    return(0)\n  }\n  if (index == 0) {\n    return(a[k])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[k] + max_sum_increasing_subseq(a, n, index - 1, index)))\n}\n\nmax_sum_increasing_subseq(a, n, n - 1, n - 1)\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    return(max(a[index], a[index] + a[index - 1]))\n  }\n  if (index == k) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n    if (index == 0) {\n        return(a[1])\n    }\n    if (index == 1) {\n        return(max(a[1], a[2]))\n    }\n    if (k == index) {\n        return(sum(a[1:index]))\n    }\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  # Write your code here\n  if(index == 1) {\n    return(a[1])\n  }\n  max_sum = 0\n  for(i in 1:index-1) {\n    if(a[i] < a[k]) {\n      sum = max_sum_increasing_subseq(a, n, i, i) + a[k]\n      if(sum > max_sum) {\n        max_sum = sum\n      }\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1)))\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k == 0) {\n        return(a[index])\n    }\n    if (k == 1) {\n        return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n    }\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 0:(index-1)) {\n    if (a[i] < a[index]) {\n      sum_i <- max_sum_increasing_subseq(a, n, i, k)\n      if (sum_i > max_sum) {\n        max_sum <- sum_i\n      }\n    }\n  }\n  if (a[index] < a[k]) {\n    return(max_sum + a[index])\n  } else {\n    return(max_sum)\n  }\n}\n",
    "\n  if (k == n) {\n    return(0)\n  }\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (index == k) {\n        return(a[index])\n    }\n    if (index > k) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[index] + max_sum_increasing_subseq(a, n, k, k + 1)))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(max(a[k] + max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n  } else {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1)))\n  }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (k == n) {\n    return(a[n])\n  }\n  if (index == 0) {\n    return(a[k])\n  }\n  return(max(a[k] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (index == 1) {\n    return(max(a[index], a[index] + a[index - 1]))\n  }\n  if (k == index) {\n    return(max(a[index], a[index] + max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k <= index) {\n    return(max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, index)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[k])\n  }\n  if (k < index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 0:(index - 1)) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k - 1) + a[k])\n    }\n  }\n  return(max(max_sum, max_sum_increasing_subseq(a, n, index, k - 1)))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (index == 0) {\n        return(a[k])\n    }\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), a[k] + max_sum_increasing_subseq(a, n, index - 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k + 1)))\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k == 0) {\n        return(a[index])\n    }\n    if (a[index] > a[k]) {\n        return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n    } else {\n        return(max_sum_increasing_subseq(a, n, index - 1, k))\n    }\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (index == 0) {\n    return(a[k])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index, k+1), max_sum_increasing_subseq(a, n, index-1, index-1) + a[k]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + a[0])\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1) + a[index]))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index < k) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n  }\n  if (index > k) {\n    return(max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n}\n"
  ]
}