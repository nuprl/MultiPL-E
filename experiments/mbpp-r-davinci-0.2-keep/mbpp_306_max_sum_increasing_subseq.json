{
  "name": "mbpp_306_max_sum_increasing_subseq",
  "language": "r",
  "prompt": "# Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\nmax_sum_increasing_subseq <- function(a, n, index, k) {",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_306_max_sum_increasing_subseq.py",
  "prompt_terminology": "verbatim",
  "tests": "test_humaneval <- function() {\ncandidate <- max_sum_increasing_subseq\n    if(!identical(candidate(c(1, 101, 2, 3, 100, 4, 5), 7, 4, 6), 11)){quit('no', 1)}\n    if(!identical(candidate(c(1, 101, 2, 3, 100, 4, 5), 7, 2, 5), 7)){quit('no', 1)}\n    if(!identical(candidate(c(11, 15, 19, 21, 26, 28, 31), 7, 2, 4), 71)){quit('no', 1)}\n}\ntest_humaneval()",
  "stop_tokens": [
    "\n#",
    "\n```"
  ],
  "completions": [
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  if (index > k) {\n    return(0)\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  if (k == index) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n  }\n  if (a[k] > a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), max_sum_increasing_subseq(a, n, index + 1, k) + a[index]))\n  }\n  return(max_sum_increasing_subseq(a, n, index + 1, k + 1))\n}\n",
    "\n  if (index == 1) {\n    return(a[index])\n  }\n  max_sum = 0\n  for (i in 1:(index - 1)) {\n    if (a[i] < a[index]) {\n      max_sum = max(max_sum, max_sum_increasing_subseq(a, n, i, index) + a[index])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k < index) {\n    return(0)\n  }\n  max_sum <- 0\n  for (i in 0:(index-1)) {\n    if (a[i] < a[index]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k) + a[index])\n    }\n  }\n  return(max_sum)\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (a[index] > a[k]) {\n        return(max(max_sum_increasing_subseq(a, n, index, k+1), a[k] + max_sum_increasing_subseq(a, n, index+1, k+1)))\n    } else {\n        return(max_sum_increasing_subseq(a, n, index, k+1))\n    }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == 1) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index - 1, k))\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k), max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (index == k) {\n    return(a[index])\n  }\n  return(max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (a[index] > a[k]) {\n    return(a[index] + max_sum_increasing_subseq(a, n, index + 1, k))\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, index)))\n}\n",
    "\n  if (index == 0) {\n    return(a[k])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    if (k <= index) {\n        return(0)\n    }\n    return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (a[k] < a[index]) {\n    return(max(max_sum_increasing_subseq(a, n, index, k + 1), max_sum_increasing_subseq(a, n, index + 1, index + 1) + a[k]))\n  } else {\n    return(max_sum_increasing_subseq(a, n, index, k + 1))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (a[index] > a[k]) {\n    return(max(a[index] + max_sum_increasing_subseq(a, n, index - 1, k - 1), max_sum_increasing_subseq(a, n, index - 1, k)))\n  }\n  return(max_sum_increasing_subseq(a, n, index - 1, k))\n}\n",
    "\n    if (index == n) {\n        return(0)\n    }\n    if (k == n) {\n        return(0)\n    }\n    if (k < index) {\n        return(0)\n    }\n    if (k == index) {\n        return(a[index])\n    }\n    return(max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k + 1) + a[index]))\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n    if (index == 0) {\n        return(a[index])\n    }\n    else {\n        max_sum <- 0\n        for (i in 1:index) {\n            if (a[i] < a[k]) {\n                max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n            }\n        }\n        return(max_sum + a[k])\n    }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  if (k == 0) {\n    return(a[index])\n  }\n  if (k == index) {\n    return(a[index])\n  }\n  if (k > index) {\n    return(max(max_sum_increasing_subseq(a, n, index-1, k), max_sum_increasing_subseq(a, n, index-1, k-1) + a[index]))\n  }\n}\n",
    "\n  if (index == 0) {\n    return(a[index])\n  }\n  max_sum <- 0\n  for (i in 1:index) {\n    if (a[i] < a[k]) {\n      max_sum <- max(max_sum, max_sum_increasing_subseq(a, n, i, k))\n    }\n  }\n  return(max_sum + a[k])\n}\n",
    "\n  if (index == n) {\n    return(0)\n  }\n  if (k == n) {\n    return(0)\n  }\n  if (k < index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index + 1, k + 1), a[index] + max_sum_increasing_subseq(a, n, index + 1, k)))\n}\n",
    "\n  if (index == 0) {\n    return(a[1])\n  }\n  if (k == 0) {\n    return(a[1])\n  }\n  if (k == 1) {\n    return(a[1] + max_sum_increasing_subseq(a, n, index - 1, k - 1))\n  }\n  if (k > index) {\n    return(0)\n  }\n  return(max(max_sum_increasing_subseq(a, n, index - 1, k), a[index + 1] + max_sum_increasing_subseq(a, n, index - 1, k - 1)))\n}\n"
  ]
}