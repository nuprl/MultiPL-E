name: HumanEval_22_filter_integers
language: ts
prompt: "//Filter given list of any python values only for integers\n// >>> filter_integers(['a',\
  \ 3.14, 5])\n// [5]\n// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n// [1, 2,\
  \ 3]\nfunction filter_integers(values: any[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_integers;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([4, {}, [], 23.2, 9, \"adasd\"]),[4, 9]);\n  assert.deepEqual(candidate([3,\
  \ \"c\", 3, 3, \"a\", \"b\"]),[3, 3, 3]);\n}\n\ntest();"
completions: ["    const ints = []\n    for (const item of values) {\n        if (Number.isInteger(item))\
    \ ints.push(item)\n    }\n    return ints\n}\n", "  return values.filter(is_integer);\n\
    }\n", "    let result: number[] = [];\n    for (let value of values) {\n     \
    \   if (typeof value === 'number' && Number.isInteger(value)) {\n            result.push(value);\n\
    \        }\n    }\n    return result;\n}\n", "  let filtered: number[] = [];\n\
    \  for (let value of values) {\n    if (isinstance(value, int)) {\n      filtered.push(value);\n\
    \    }\n  }\n  return filtered;\n}\n", "    let result = [];\n    for (let value\
    \ of values) {\n        if (typeof value === 'number' && !Number.isNaN(value))\
    \ {\n            result.push(value);\n        }\n    }\n    return result;\n}\n",
  "  return values.filter(value => Number.isInteger(value));\n}\n", "  return values.filter(v\
    \ => typeof v === 'number' && v % 1 === 0);\n}\n", "    const filtered = [];\n\
    \    for (const val of values) {\n        if (typeof val === 'number' && val %\
    \ 1 === 0) {\n            filtered.push(val);\n        }\n    }\n    return filtered;\n\
    }\nexport function filter_integers_test() {\n    assert(arrays_equal(filter_integers(['a',\
    \ 3.14, 5]), [5]));\n    assert(arrays_equal(filter_integers([1, 2, 3, 'abc',\
    \ {}, []]), [1, 2, 3]));\n}\n", "    return values.filter(function(v) { return\
    \ typeof v === 'number' && v % 1 === 0; });\n}\n", "    let integers = values.filter(value\
    \ => typeof value === 'number');\n    return integers;\n}\n", "    //throw new\
    \ Error(\"Not implemented\");\n    let result : number[] = [];\n    values.forEach(x\
    \ => {\n        if (typeof x === 'number' && x % 1 === 0) {\n            result.push(x);\n\
    \        }\n    });\n    return result;\n}\n", "  return values.filter(value =>\
    \ typeof value === 'number' && value % 1 === 0);\n}\n\n", "    return values.filter(isInteger);\n\
    }\n\n", "  return values.filter(x => typeof x === 'number' && x % 1 === 0);\n\
    }\n", "  let result: number[] = [];\n  for (let value of values) {\n    if (typeof\
    \ value === 'number' && value === Math.floor(value)) {\n      result.push(value);\n\
    \    }\n  }\n  return result;\n}\n", "  let new_list: number[] = [];\n  for (let\
    \ value of values) {\n    if (typeof value === 'number' && (value % 1) === 0)\
    \ {\n      new_list.push(value);\n    }\n  }\n  return new_list;\n}\n", "  return\
    \ values.filter(val => typeof val === 'number' && val % 1 === 0);\n}\n", "   \
    \ return values.filter(v => typeof v === 'number');\n}\n", "    return values.filter(item\
    \ => typeof item === 'number' && item % 1 === 0);\n}\n", "    var integers = values.filter(function(value)\
    \ {\n        return typeof value === 'number' && value % 1 === 0;\n    });\n \
    \   return integers;\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
