name: HumanEval_56_correct_bracketing
language: ts
prompt: "//brackets is a string of \"<\" and \">\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
  )\n// False\n// >>> correct_bracketing(\"<>\")\n// True\n// >>> correct_bracketing(\"\
  <<><>>\")\n// True\n// >>> correct_bracketing(\"><<>\")\n// False\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
  ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
  ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
  <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
  <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"\
  <><><<><>><>>><>\"),false);\n}\n\ntest();"
completions: ["    let checkBrackets: string[] = brackets.split(\"\");\n    let openBrackets:\
    \ number = 0;\n    for (let i: number = 0; i < checkBrackets.length; i++) {\n\
    \        if (checkBrackets[i] === \"<\") {\n            openBrackets++;\n    \
    \    } else if (checkBrackets[i] === \">\") {\n            openBrackets--;\n \
    \       }\n        if (openBrackets < 0) {\n            return false;\n      \
    \  }\n    }\n    if (openBrackets === 0) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\n", "    if (brackets.length % 2 == 1) {\n  \
    \      return false;\n    }\n    let balanced = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            balanced += 1;\n  \
    \      } else {\n            balanced -= 1;\n        }\n        if (balanced <\
    \ 0) {\n            return false;\n        }\n    }\n    return balanced == 0;\n\
    }\n", "    let brackets_open: number = 0;\n    let brackets_close: number = 0;\n\
    \    for (let i: number = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"<\") {\n            brackets_open += 1;\n        } else if (brackets[i]\
    \ == \">\") {\n            brackets_close += 1;\n        }\n    }\n    if (brackets_open\
    \ != brackets_close) {\n        return false;\n    }\n    return true;\n}\nconsole.log(correct_bracketing(\"\
    <>\"));\nconsole.log(correct_bracketing(\"<<><>>\"));\nconsole.log(correct_bracketing(\"\
    ><<>\"));\n", "    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open += 1;\n        } else\
    \ {\n            open -= 1;\n        }\n        if (open < 0) {\n            return\
    \ false;\n        }\n    }\n    return open === 0;\n}\n", "    let count = 0;\n\
    \    let len = brackets.length;\n    for (let i = 0; i < len; i++) {\n       \
    \ if (brackets[i] === '<') {\n            count++;\n        } else {\n       \
    \     count--;\n        }\n        if (count < 0) {\n            return false;\n\
    \        }\n    }\n    return count === 0;\n}\n\nexport {\n    snake_to_camel,\n\
    \    camel_to_snake,\n    is_valid_email,\n    encrypt,\n    decrypt,\n    correct_bracketing\n\
    }", "  const bracket_stack: string[] = [];\n  const bracket_map: {[key: string]:\
    \ string} = {\n    '<': '>',\n    '>': '<'\n  };\n  for (let bracket of brackets)\
    \ {\n    if (bracket_stack.length === 0) {\n      bracket_stack.push(bracket);\n\
    \    } else {\n      const last_bracket = bracket_stack[bracket_stack.length -\
    \ 1];\n      if (bracket_map[last_bracket] === bracket) {\n        bracket_stack.pop();\n\
    \      } else {\n        bracket_stack.push(bracket);\n      }\n    }\n  }\n \
    \ return bracket_stack.length === 0;\n}\n", "  let count = 0;\n  for (let i =\
    \ 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      count\
    \ += 1;\n    } else if (brackets[i] === \">\") {\n      count -= 1;\n    }\n \
    \   if (count < 0) {\n      return false;\n    }\n  }\n  return count === 0;\n\
    }\n\ntest(correct_bracketing(\"<\"), false);\ntest(correct_bracketing(\"<>\"),\
    \ true);\ntest(correct_bracketing(\"<<><>>\"), true);\ntest(correct_bracketing(\"\
    ><<>\"), false);\n", "  let openingBrackets = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"<\") {\n      openingBrackets++;\n    } else\
    \ {\n      openingBrackets--;\n    }\n    if (openingBrackets < 0) {\n      return\
    \ false;\n    }\n  }\n  return openingBrackets === 0;\n}\n", "  let stack: string[]\
    \ = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] ===\
    \ \"<\") {\n      stack.push(brackets[i]);\n    } else {\n      if (stack.length\
    \ === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n \
    \ return stack.length === 0;\n}\n", "    let left = 0;\n    let right = 0;\n \
    \   for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"\
    <\") {\n            left++;\n        } else {\n            right++;\n        }\n\
    \        if (right > left) {\n            return false;\n        }\n    }\n  \
    \  return left === right;\n}\n", "    let count = 0;\n    for (let i = 0; i <\
    \ brackets.length; i++) {\n        let char = brackets.charAt(i);\n        if\
    \ (char === \"<\") {\n            count += 1;\n        } else if (char === \"\
    >\") {\n            count -= 1;\n        }\n        if (count < 0) {\n       \
    \     return false;\n        }\n    }\n    return count === 0;\n}\n", "    let\
    \ n = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === '<') {\n            n += 1;\n        } else {\n            n -= 1;\n   \
    \     }\n        if (n < 0) {\n            return false;\n        }\n    }\n \
    \   return n === 0;\n}\n", "    let count: number = 0;\n    for (let i: number\
    \ = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"<\") {\n   \
    \         count++;\n        } else if (brackets[i] === \">\") {\n            count--;\n\
    \        }\n        if (count < 0) {\n            return false;\n        }\n \
    \   }\n    return count === 0;\n}\n", "  let count: number = 0;\n  for (let i:\
    \ number = 0; i < brackets.length; i++) {\n    let c: string = brackets.charAt(i);\n\
    \    if (c === \"<\") {\n      count += 1;\n    } else if (c === \">\") {\n  \
    \    count -= 1;\n    }\n    if (count < 0) {\n      return false;\n    }\n  }\n\
    \  return count === 0;\n}\n", "    // your solution here\n    return undefined;\n\
    }\n", "  let stack: string[] = [];\n  for (let i = 0; i < brackets.length; i++)\
    \ {\n    let current = brackets[i];\n    if (current === \"<\") {\n      stack.push(current);\n\
    \    } else if (current === \">\") {\n      let last = stack.pop();\n      if\
    \ (last !== \"<\") {\n        return false;\n      }\n    }\n  }\n  return true;\n\
    }\n", "    let count: number = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n", "    let count = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            count++;\n       \
    \ } else {\n            count--;\n        }\n        if (count < 0) {\n      \
    \      return false;\n        }\n    }\n    return count === 0;\n}\n", "    //\
    \ Use an array as a stack.\n    const stack: string[] = [];\n    for (const bracket\
    \ of brackets) {\n        if (bracket === '<') {\n            stack.push(bracket);\n\
    \        } else if (bracket === '>') {\n            if (stack.length === 0) {\n\
    \                return false;\n            }\n            stack.pop();\n    \
    \    }\n    }\n    return stack.length === 0;\n}\n", "  let counter = 0;\n  let\
    \ length = brackets.length;\n  for (let i = 0; i < length; i++) {\n    if (brackets[i]\
    \ === \"<\") {\n      counter++;\n    } else {\n      counter--;\n    }\n    if\
    \ (counter < 0) {\n      return false;\n    }\n  }\n  return counter === 0;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
