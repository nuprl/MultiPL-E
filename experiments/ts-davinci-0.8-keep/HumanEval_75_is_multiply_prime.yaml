name: HumanEval_75_is_multiply_prime
language: ts
prompt: "//Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n// and false otherwise.\n// Knowing that (a) is less then\
  \ 100. \n// Example:\n// is_multiply_prime(30) == True\n// 30 = 2 * 3 * 5\nfunction\
  \ is_multiply_prime(a: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_multiply_prime;\n  assert.deepEqual(candidate(5),false);\n\
  \  assert.deepEqual(candidate(30),true);\n  assert.deepEqual(candidate(8),true);\n\
  \  assert.deepEqual(candidate(10),false);\n  assert.deepEqual(candidate(125),true);\n\
  \  assert.deepEqual(candidate(105),true);\n  assert.deepEqual(candidate(126),false);\n\
  \  assert.deepEqual(candidate(729),false);\n  assert.deepEqual(candidate(891),false);\n\
  \  assert.deepEqual(candidate(1001),true);\n}\n\ntest();"
completions: ["  let result = true;\n  let number1 = 0;\n  let number2 = 0;\n  let\
    \ number3 = 0;\n  for (let i = 2; i < a; i++) {\n    if (a % i == 0) {\n     \
    \ if (is_prime(i)) {\n        if (number1 == 0) {\n          number1 = i;\n  \
    \      } else if (number2 == 0) {\n          number2 = i;\n        } else if (number3\
    \ == 0) {\n          number3 = i;\n        }\n      }\n    }\n  }\n  if (number1\
    \ == 0 || number2 == 0 || number3 == 0) {\n    result = false;\n  } else {\n \
    \   if (number1 * number2 * number3 == a) {\n      result = true;\n    } else\
    \ {\n      result = false;\n    }\n  }\n  return result;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let num1: number = 0;\n    let num2: number = 0;\n    let num3: number = 0;\n\
    \    for (let i: number = 2; i < a; i++) {\n        if (a % i == 0) {\n      \
    \      if (num1 == 0) {\n                num1 = i;\n            } else if (num2\
    \ == 0) {\n                num2 = i;\n            } else if (num3 == 0) {\n  \
    \              num3 = i;\n            }\n        }\n    }\n    if (num1 != 0 &&\
    \ num2 != 0 && num3 != 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\n", "  let result: boolean = false;\n  if (a % 2 === 0 && a\
    \ % 3 === 0 && a % 5 === 0) {\n    result = true;\n  }\n  return result;\n}\n\n\
    console.log(is_multiply_prime(30));\n", "  let count: number = 0;\n  let num:\
    \ number = 2;\n  while (num <= a) {\n    if (a % num == 0) {\n      a /= num;\n\
    \      count++;\n    } else {\n      num++;\n    }\n  }\n  return count == 3;\n\
    }\nconsole.log(is_multiply_prime(30)); // true\nconsole.log(is_multiply_prime(31));\
    \ // false\nconsole.log(is_multiply_prime(15)); // false\nconsole.log(is_multiply_prime(25));\
    \ // false\n", "    let result: number = 0;\n    for (let i: number = 2; i < a;\
    \ i++) {\n        if (a % i == 0) {\n            for (let j: number = 2; j < i;\
    \ j++) {\n                if (i % j == 0) {\n                    result++;\n \
    \               }\n            }\n            if (result == 0) {\n           \
    \     for (let k: number = 2; k < a; k++) {\n                    if (a % k ==\
    \ 0) {\n                        for (let l: number = 2; l < k; l++) {\n      \
    \                      if (k % l == 0) {\n                                result++;\n\
    \                            }\n                        }\n                  \
    \      if (result == 0) {\n                            for (let m: number = 2;\
    \ m < a; m++) {\n                                if (a % m == 0) {\n         \
    \                           for (let n: number = 2; n < m; n++) {\n          \
    \                              if (m % n == 0) {\n                           \
    \                 result++;\n                                        }\n     \
    \                               }\n                                    if (result\
    \ == 0) {\n                                        return true;\n            \
    \                        }\n                                }\n              \
    \              }\n                        }\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return false;\n}\n", "  let primeNumbers:\
    \ Array<number> = [];\n  for (let i = 2; i < a; i++) {\n    if (is_prime(i)) {\n\
    \      primeNumbers.push(i);\n    }\n  }\n  for (let i = 0; i < primeNumbers.length;\
    \ i++) {\n    for (let j = i + 1; j < primeNumbers.length; j++) {\n      for (let\
    \ k = j + 1; k < primeNumbers.length; k++) {\n        if (primeNumbers[i] * primeNumbers[j]\
    \ * primeNumbers[k] === a) {\n          return true;\n        }\n      }\n   \
    \ }\n  }\n  return false;\n}\n", "    if (a >= 100) return false;\n    if (a ==\
    \ 1) return false;\n    if (a == 2) return true;\n    if (a == 3) return true;\n\
    \    if (a == 5) return true;\n    if (a == 7) return true;\n    if (a == 11)\
    \ return true;\n    if (a == 13) return true;\n    if (a == 17) return true;\n\
    \    if (a == 19) return true;\n    if (a == 23) return true;\n    if (a == 29)\
    \ return true;\n    if (a == 31) return true;\n    if (a == 37) return true;\n\
    \    if (a == 41) return true;\n    if (a == 43) return true;\n    if (a == 47)\
    \ return true;\n    if (a == 53) return true;\n    if (a == 59) return true;\n\
    \    if (a == 61) return true;\n    if (a == 67) return true;\n    if (a == 71)\
    \ return true;\n    if (a == 73) return true;\n    if (a == 79) return true;\n\
    \    if (a == 83) return true;\n    if (a == 89) return true;\n    if (a == 97)\
    \ return true;\n    if (a == 6) return true;\n    if (a == 10) return true;\n\
    \    if (a == 14) return true;\n    if (a == 15) return true;\n    if (a == 21)\
    \ return true;\n    if (a == 22) return true;\n    if (a == 33) return true;\n\
    \    if (a == 34) return true;\n    if (a == 35) return true;\n    if (a == 38)\
    \ return true;\n    if (a == 39) return true;\n    if (a == 46) return true;\n\
    \    if (a == 51) return true;\n    if (a == 55) return true;\n    if (a == 57)\
    \ return true;\n    if (a == 58) return true;\n    if (a == 62) return true;\n\
    \    if (a == 65) return true;\n    if (a == 69) return true;\n    if (a ==",
  "    let is_multiply_prime: boolean = false;\n    let counter_of_primes: number\
    \ = 0;\n    for (let i: number = 2; i < a; i++) {\n        if (is_prime(i)) {\n\
    \            counter_of_primes++;\n            for (let j: number = 2; j < a;\
    \ j++) {\n                if (is_prime(j)) {\n                    counter_of_primes++;\n\
    \                    for (let k: number = 2; k < a; k++) {\n                 \
    \       if (is_prime(k)) {\n                            counter_of_primes++;\n\
    \                            if (a === i * j * k) {\n                        \
    \        is_multiply_prime = true;\n                            }\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return is_multiply_prime;\n}\n", "  // if (a%2 === 0 && a%3\
    \ === 0 && a%5 === 0) {\n  //   return true;\n  // } else {\n  //   return false;\n\
    \  // }\n  return a%2 === 0 && a%3 === 0 && a%5 === 0;\n}\n", "    let result:\
    \ number[] = [];\n    let x: number = 2;\n    while (x <= a) {\n        if (a\
    \ % x == 0) {\n            result.push(x);\n            a = a / x;\n        }\
    \ else {\n            x++;\n        }\n    }\n    for (let i: number = 0; i <\
    \ result.length; i++) {\n        if (result[i] == 2 || result[i] == 3 || result[i]\
    \ == 5 || result[i] == 7) {\n            return true;\n        } else {\n    \
    \        return false;\n        }\n    }\n}\nconsole.log(is_multiply_prime(30));\n",
  "  let res: boolean = false;\n  for (let i = 2; i < a; i++) {\n    for (let j =\
    \ 2; j < a; j++) {\n      for (let k = 2; k < a; k++) {\n        if (i * j * k\
    \ === a) {\n          if (is_prime(i) && is_prime(j) && is_prime(k)) {\n     \
    \       res = true;\n          }\n        }\n      }\n    }\n  }\n  return res;\n\
    }\n\nconsole.log(is_multiply_prime(30));\n", "    // filter the 100 numbers between\
    \ 0 and 100\n    var primes = [...Array(100).keys()].filter(i => is_prime(i))\n\
    \    // return if a is the multiplication of 3 prime numbers\n    return primes.some(p\
    \ => {\n        return (a % p === 0) && is_multiply_prime(a / p)\n    })\n}",
  "  return false;\n}\nconsole.log(is_multiply_prime(30));\n", "  for (let i = 2;\
    \ i < a; i++) {\n    for (let j = 2; j < a; j++) {\n      for (let k = 2; k <\
    \ a; k++) {\n        if (i * j * k === a) {\n          return true;\n        }\n\
    \      }\n    }\n  }\n  return false;\n}\nconsole.log(is_multiply_prime(30));\n",
  "    let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i = 0; i < primeNumbers.length;\
    \ i++) {\n        for (let j = 0; j < primeNumbers.length; j++) {\n          \
    \  for (let k = 0; k < primeNumbers.length; k++) {\n                if (primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a) {\n                    return true;\n\
    \                }\n            }\n        }\n    }\n    return false;\n}\n\n\
    console.log(is_multiply_prime(30));\n", "  if (a < 100) {\n    return true;\n\
    \  }\n  return false;\n}", "    return false;\n}\n\nexport { is_multiply_prime\
    \ };", "    let res: number = 2;\n    for (let i: number = 3; i < a; i++) {\n\
    \        if (a % i == 0) {\n            res = i;\n            a = a / i;\n   \
    \         i = 3;\n        }\n    }\n    if (res == 2) {\n        return true;\n\
    \    }\n    else {\n        return false;\n    }\n}\nconsole.log(is_multiply_prime(30));\n",
  "  let multipliers: number[] = []\n  for (let i = 2; i < a; i++) {\n    if (a %\
    \ i == 0) {\n      multipliers.push(i)\n    }\n  }\n  if (multipliers.length ==\
    \ 2) {\n    return true\n  }\n  return false\n}\n\ntest('', () => {\n  expect(is_multiply_prime(30)).toBe(true)\n\
    })", "    const primes = prime_array(a);\n    return has_three_factors(a, primes);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
