language: ts
name: HumanEval_104_unique_digits
results:
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  x.forEach(num => {\n\
    \    if (num.toString().split('').every(n => n % 2 != 0)) {\n      result.push(num);\n\
    \    }\n  });\n  return result.sort((a, b) => a - b);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpgo2nqa9f.ts(12,45): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n\tconst uniq: number[] = [];\n\tfor (let i = 0; i < x.length;\
    \ i++) {\n\t\tif (x[i].toString().split('').every(str => str % 2 !== 0)) {\n\t\
    \t\tuniq.push(x[i]);\n\t\t}\n\t}\n\treturn uniq.sort((a, b) => a - b);\n}\n\n\
    console.log(unique_digits([15, 33, 1422, 1]));\nconsole.log(unique_digits([152,\
    \ 323, 1422, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpujy4hzjy.ts(12,46): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let ret: number[] = [];\n    for (let i: number =\
    \ 0; i < x.length; i++) {\n        let xstring: string = String(x[i]);\n     \
    \   let isOdd: boolean = true;\n        for (let j: number = 0; j < xstring.length;\
    \ j++) {\n            if (xstring[j] % 2 == 0) {\n                isOdd = false;\n\
    \                break;\n            }\n        }\n        if (isOdd) {\n    \
    \        ret.push(x[i]);\n        }\n    }\n    ret.sort(function (a, b) { return\
    \ a - b });\n    return ret;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0lb4f7ss.ts(15,17): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let number: number = x[i];\n        let hasEven:\
    \ boolean = false;\n        do {\n            let digit: number = number % 10;\n\
    \            number = (number - digit) / 10;\n            if (digit % 2 == 0)\
    \ {\n                hasEven = true;\n                break;\n            }\n\
    \        } while (number > 0);\n        if (!hasEven) {\n            result.push(x[i]);\n\
    \        }\n    }\n    return result.sort();\n}\n\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  135,\n  31\n\
    ]\n\nshould loosely deep-equal\n\n[\n  31,\n  135\n]\n    at test (/tmp/tmpkhslzeqv.js:34:12)\n\
    \    at Object.<anonymous> (/tmp/tmpkhslzeqv.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 135, 31\
    \ ],\n  expected: [ 31, 135 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    let i: number = 0;\n\
    \    while (i < x.length) {\n        // console.log(\"Number is \" + x[i]);\n\
    \        if (x[i] < 0) {\n            // console.log(\"Number is negative\");\n\
    \            i++;\n            continue;\n        }\n        if (x[i] < 10) {\n\
    \            // console.log(\"Number is single digit\");\n            result.push(x[i]);\n\
    \            i++;\n            continue;\n        }\n        let digits: number[]\
    \ = [];\n        while (x[i] >= 10) {\n            let mod: number = x[i] % 10;\n\
    \            // console.log(\"Modulus is \" + mod);\n            digits.push(mod);\n\
    \            x[i] = x[i] / 10;\n        }\n        digits.push(x[i]);\n      \
    \  let isEven: boolean = false;\n        for (let j: number = 0; j < digits.length;\
    \ j++) {\n            if (digits[j] % 2 == 0) {\n                isEven = true;\n\
    \                break;\n            }\n        }\n        if (!isEven) {\n  \
    \          result.push(digits.reverse().join(\"\"));\n        }\n        i++;\n\
    \    }\n    return result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpiq6yt0j7.ts(41,25): error TS2345: Argument of type
    ''string'' is not assignable to parameter of type ''number''.

    '
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  const even = [2, 4, 6, 8, 0];\n  const results: number[]\
    \ = [];\n  for (let i = 0; i < x.length; i++) {\n    if (even.indexOf(x[i] % 10)\
    \ === -1) {\n      results.push(x[i]);\n    }\n  }\n  return results;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422,\
    \ 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmpoucdfbqm.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpoucdfbqm.js:27:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(x => {\n        let hasEvenDigit\
    \ = false;\n        while (x > 0) {\n            if (x % 2 === 0) {\n        \
    \        hasEvenDigit = true;\n                break;\n            }\n       \
    \     x = Math.floor(x / 10);\n        }\n        return !hasEvenDigit;\n    }).sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n\treturn [];\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp1y1u4eue.js:15:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1y1u4eue.js:20:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    for (let i = 0; i\
    \ < x.length; i++) {\n        let num: number = x[i];\n        if (isEven(num))\
    \ {\n            continue;\n        }\n        result.push(num);\n    }\n    return\
    \ result.sort((a, b) => a - b);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1n7m3ymv.ts(13,13): error TS2304: Cannot find name
    ''isEven''.

    '
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    return x.filter(x => x.toString().split('').filter(x\
    \ => x % 2 == 0).length == 0).sort();\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpog6neuo_.ts(10,61): error TS2362: The left-hand side
    of an arithmetic operation must be of type ''any'', ''number'', ''bigint'' or
    an enum type.

    '
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    var y: number[] = [];\n    for (var i = 0; i < x.length;\
    \ i++) {\n        if (x[i] % 2 != 0) {\n            y.push(x[i]);\n        }\n\
    \    }\n    y.sort();\n    return y;\n}\nconsole.log(unique_digits([15, 33, 1422,\
    \ 1]));\nconsole.log(unique_digits([152, 323, 1422, 10]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  323\n]\n\n\
    should loosely deep-equal\n\n[]\n    at test (/tmp/tmpsj8vdvw6.js:25:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpsj8vdvw6.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 323 ],\n\
    \  expected: [],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 1, 15, 33 ]

    [ 323 ]

    '
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    var unique: number[] = [];\n    for (var i = 0; i\
    \ < x.length; i++) {\n        if (unique_digit(x[i])) {\n            unique.push(x[i]);\n\
    \        }\n    }\n    return unique;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptjjzvipa.ts(12,13): error TS2552: Cannot find name
    ''unique_digit''. Did you mean ''unique_digits''?

    '
  timestamp: 1659821431
- exit_code: 2
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result = [];\n  for (let item of x) {\n    if (item.toString().includes(\"\
    2\") || item.toString().includes(\"4\") || item.toString().includes(\"6\") ||\
    \ item.toString().includes(\"8\") || item.toString().includes(\"0\")) {\n    \
    \  continue;\n    } else {\n      result.push(item);\n    }\n  }\n  return result;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphhldskj2.ts(12,25): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmphhldskj2.ts(12,58): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmphhldskj2.ts(12,91): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmphhldskj2.ts(12,124): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmphhldskj2.ts(12,157): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659821431
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let n: number[] = [];\n    for (let i: number = 0;\
    \ i < x.length; i++) {\n        let isEven: boolean = false;\n        let digits:\
    \ number[] = x[i].toString().split('').map(Number);\n        for (let j: number\
    \ = 0; j < digits.length; j++) {\n            if (digits[j] % 2 === 0) {\n   \
    \             isEven = true;\n            }\n        }\n        if (!isEven) {\n\
    \            n.push(x[i]);\n        }\n    }\n    return n.sort((a, b) => a -\
    \ b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821431
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let unique = [];\n    for (let i = 0; i < x.length;\
    \ i++) {\n        if (x[i].toString().split('').every(y => parseInt(y) % 2 ===\
    \ 1)) {\n            unique.push(x[i]);\n        }\n    }\n    return unique.sort((a,\
    \ b) => a - b);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821431
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let ans: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    if (String(x[i]).split(\"\").every(char => Number(char) % 2 ===\
    \ 1)) {\n      ans.push(x[i]);\n    }\n  }\n  return ans.sort((a, b) => a - b);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821431
- exit_code: 0
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n  let result: number[] = [];\n  for (let i = 0; i < x.length;\
    \ i++) {\n    if (x[i].toString().indexOf(\"2\") === -1 &&\n      x[i].toString().indexOf(\"\
    4\") === -1 &&\n      x[i].toString().indexOf(\"6\") === -1 &&\n      x[i].toString().indexOf(\"\
    8\") === -1 &&\n      x[i].toString().indexOf(\"0\") === -1) {\n      result.push(x[i]);\n\
    \    }\n  }\n  return result.sort(function (a, b) { return a - b });\n}\n\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    var uniqueArray: number[] = [];\n    x.forEach(e\
    \ => {\n        if (e % 2 == 1) {\n            uniqueArray.push(e);\n        }\n\
    \    });\n    return uniqueArray;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = unique_digits;\n\
    \  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152,\
    \ 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111,\
    \ 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp16278rzi.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmp16278rzi.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n\tlet array: number[] = [];\n\tlet unique: boolean =\
    \ true;\n\tx.forEach(num => {\n\t\tlet digits: string[] = num.toString().split('');\n\
    \t\tdigits.forEach(digit => {\n\t\t\tif(parseInt(digit) % 2 === 0) unique = false;\n\
    \t\t});\n\t\tif(unique) array.push(num);\n\t\tunique = true;\n\t});\n\treturn\
    \ array;\n}\nconsole.log(unique_digits([15, 33, 1422, 1]));\nconsole.log(unique_digits([152,\
    \ 323, 1422, 10]));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = unique_digits;\n  assert.deepEqual(candidate([15,\
    \ 33, 1422, 1]),[1, 15, 33]);\n  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n\
    \  assert.deepEqual(candidate([12345, 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135,\
    \ 103, 31]),[31, 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmp1moirv44.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmp1moirv44.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ 15, 33, 1 ]

    []

    '
  timestamp: 1659821431
- exit_code: 1
  program: "//Given a list of positive integers x. return a sorted list of all \n\
    // elements that hasn't any even digit.\n// Note: Returned list should be sorted\
    \ in increasing order.\n// For example:\n// >>> unique_digits([15, 33, 1422, 1])\n\
    // [1, 15, 33]\n// >>> unique_digits([152, 323, 1422, 10])\n// []\nfunction unique_digits(x:\
    \ number[]): number[] {\n    let result: number[] = [];\n    x.forEach(\n    \
    \    (num) => {\n            if (num % 2 === 1) {\n                result.push(num);\n\
    \            }\n        }\n    );\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = unique_digits;\n  assert.deepEqual(candidate([15, 33, 1422, 1]),[1, 15, 33]);\n\
    \  assert.deepEqual(candidate([152, 323, 1422, 10]),[]);\n  assert.deepEqual(candidate([12345,\
    \ 2033, 111, 151]),[111, 151]);\n  assert.deepEqual(candidate([135, 103, 31]),[31,\
    \ 135]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  15,\n  33,\n\
    \  1\n]\n\nshould loosely deep-equal\n\n[\n  1,\n  15,\n  33\n]\n    at test (/tmp/tmplogp8sag.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmplogp8sag.js:26:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ 15, 33,\
    \ 1 ],\n  expected: [ 1, 15, 33 ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821431
