name: HumanEval_18_how_many_times
language: ts
prompt: "//Find how many times a given substring can be found in the original string.\
  \ Count overlaping cases.\n// >>> how_many_times('', 'a')\n// 0\n// >>> how_many_times('aaa',\
  \ 'a')\n// 3\n// >>> how_many_times('aaaa', 'aa')\n// 3\nfunction how_many_times(string:\
  \ string, substring: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = how_many_times;\n  assert.deepEqual(candidate(\"\"\
  , \"x\"),0);\n  assert.deepEqual(candidate(\"xyxyxyx\", \"x\"),4);\n  assert.deepEqual(candidate(\"\
  cacacacac\", \"cac\"),4);\n  assert.deepEqual(candidate(\"john doe\", \"john\"),1);\n\
  }\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n   \
    \ if (string.slice(i, i + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    let occurences: number = 0;\n    let\
    \ index = string.indexOf(substring);\n    while (index !== -1) {\n        occurences++;\n\
    \        index = string.indexOf(substring, index + 1);\n    }\n    return occurences;\n\
    }\nconsole.log(how_many_times('', 'a'));\nconsole.log(how_many_times('aaa', 'a'));\n\
    console.log(how_many_times('aaaa', 'aa'));\n", "    let count = 0;\n    for (let\
    \ i = 0; i < string.length; i++) {\n        if (string.slice(i, i + substring.length)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n", "    let sum = 0;\n    for (let i = 0; i < string.length; i++) {\n     \
    \   for (let j = 0; j < substring.length; j++) {\n            if (substring[j]\
    \ === string[i + j]) {\n                sum += 1;\n            }\n        }\n\
    \    }\n    return sum;\n}\n", "  let count = 0;\n  let offset = 0;\n  while (true)\
    \ {\n    let index = string.indexOf(substring, offset);\n    if (index === -1)\
    \ break;\n    count++;\n    offset = index + 1;\n  }\n  return count;\n}\n", " \
    \   if (substring.length === 0) {\n        return 0;\n    }\n    let times = 0;\n\
    \    for (let i = 0; i < string.length; i++) {\n        if (string.charAt(i) ===\
    \ substring.charAt(0)) {\n            const rest_of_string = string.substring(i);\n\
    \            if (rest_of_string.startsWith(substring)) {\n                times++;\n\
    \            }\n        }\n    }\n    return times;\n}\n", "    if (substring.length\
    \ === 0) return 0;\n    let count = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        if (string.charAt(i) === substring.charAt(0)) {\n          \
    \  let match = true;\n            for (let k = 1; k < substring.length; k++) {\n\
    \                if (string.charAt(i + k) !== substring.charAt(k)) {\n       \
    \             match = false;\n                    break;\n                }\n\
    \            }\n            if (match) count++;\n        }\n    }\n    return\
    \ count;\n}\n", "    var output = 0;\n    for (var i = 0; i < string.length; i++)\
    \ {\n        var index = string.indexOf(substring, i);\n        if (index != -1)\
    \ {\n            output++;\n            i = index;\n        }\n    }\n    return\
    \ output;\n}\n", "    const substringLength = substring.length;\n    if (substringLength\
    \ === 0) return 0;\n    let found = 0;\n    for (let i = 0; i < string.length;\
    \ i++) {\n        let substringCandidate = string.substr(i, substringLength);\n\
    \        if (substringCandidate === substring) {\n            found++;\n     \
    \       i += substringLength - 1;\n        }\n    }\n    return found;\n}\n",
  "  let count = 0;\n  for (let index = 0; index < string.length; index++) {\n   \
    \ if (string.slice(index, index + substring.length) === substring) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "    let count = 0;\n    for (let i = 0; i\
    \ < string.length; i++) {\n        if (string.substr(i, substring.length) ===\
    \ substring) {\n            count++;\n        }\n    }\n    return count;\n}\n",
  "  let count = 0;\n  if (substring === '') {\n    return count;\n  }\n  for (let\
    \ i = 0; i < string.length; i++) {\n    if (string.slice(i, i + substring.length)\
    \ === substring) {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let\
    \ result = 0;\n  let index = 0;\n  let len = substring.length;\n  while (true)\
    \ {\n    index = string.indexOf(substring, index);\n    if (index < 0) {\n   \
    \   break;\n    }\n    result++;\n    index += len;\n  }\n  return result;\n}\n",
  "  let count = 0;\n  let index = 0;\n  while (true) {\n    index = string.indexOf(substring,\
    \ index);\n    if (index === -1) {\n      break;\n    }\n    count++;\n    index++;\n\
    \  }\n  return count;\n}\n\nconsole.log(how_many_times('', 'a'));\nconsole.log(how_many_times('aaa',\
    \ 'a'));\nconsole.log(how_many_times('aaaa', 'aa'));\n", "    if (substring ===\
    \ '') {\n        return 0;\n    }\n    let count = 0;\n    let index = string.indexOf(substring);\n\
    \    while (index !== -1) {\n        count++;\n        index = string.indexOf(substring,\
    \ index + 1);\n    }\n    return count;\n}\n", "  if (substring.length === 0)\
    \ {\n    return 0;\n  }\n  let str: string = string;\n  let count: number = 0;\n\
    \  while (str.length > 0) {\n    if (str.indexOf(substring) === 0) {\n      count\
    \ += 1;\n      str = str.substring(substring.length);\n    } else {\n      str\
    \ = str.substring(1);\n    }\n  }\n  return count;\n}", "    let len_string =\
    \ string.length;\n    let len_substring = substring.length;\n    let counter =\
    \ 0;\n    for (let i = 0; i < len_string; i++) {\n        if (string.slice(i,\
    \ i + len_substring) === substring) {\n            counter++;\n        }\n   \
    \ }\n    return counter;\n}\n", "    return string.split(substring).length - 1;\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < string.length; i++) {\n   \
    \     if (string.substr(i, substring.length) === substring) count++;\n    }\n\
    \    return count;\n}\n\nconsole.log(how_many_times('', 'a'));\nconsole.log(how_many_times('aaa',\
    \ 'a'));\nconsole.log(how_many_times('aaaa', 'aa'));", "    let count = 0;\n \
    \   for (let i = 0; i < string.length; i++) {\n        if (string.substr(i, substring.length)\
    \ === substring) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
