name: HumanEval_146_specialFilter
language: ts
prompt: "//Write a function that takes an array of numbers as input and returns \n\
  // the number of elements in the array that are greater than 10 and both \n// first\
  \ and last digits of a number are odd (1, 3, 5, 7, 9).\n// For example:\n// specialFilter([15,\
  \ -73, 14, -15]) => 1 \n// specialFilter([33, -2, -3, 45, 21, 109]) => 2\nfunction\
  \ specialFilter(nums: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = specialFilter;\n  assert.deepEqual(candidate([5, -2,\
  \ 1, -5]),0);\n  assert.deepEqual(candidate([15, -73, 14, -15]),1);\n  assert.deepEqual(candidate([33,\
  \ -2, -3, 45, 21, 109]),2);\n  assert.deepEqual(candidate([43, -12, 93, 125, 121,\
  \ 109]),4);\n  assert.deepEqual(candidate([71, -2, -33, 75, 21, 19]),3);\n  assert.deepEqual(candidate([1]),0);\n\
  \  assert.deepEqual(candidate([]),0);\n}\n\ntest();"
completions: ["    let count = 0;\n    nums.forEach(function (num) {\n        if (num\
    \ > 10 && num % 2 != 0 && num % 10 != 0) {\n            count++;\n        }\n\
    \    });\n    return count;\n}\n", "    var result: number = 0;\n    for (var\
    \ i = 0; i < nums.length; i++) {\n        var num: number = nums[i];\n       \
    \ if (num > 10 && isFirstDigitOdd(num) && isLastDigitOdd(num)) {\n           \
    \ result += 1;\n        }\n    }\n    return result;\n}\n", "    let result =\
    \ 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 &&\
    \ isOdd(nums[i])) {\n            result++;\n        }\n    }\n    return result;\n\
    }\n", "    return nums.filter(x => {\n        let str = x.toString();\n      \
    \  return x > 10 && [str[0], str[str.length - 1]].every(c => '13579'.includes(c));\n\
    \    }).length;\n}\n", "    let count = 0;\n    nums.forEach(num => {\n      \
    \  if (num > 10 && num % 2 != 0 && num % 10 != 0) {\n            count++;\n  \
    \      }\n    });\n    return count;\n}\n", "    return nums.filter(num => {\n\
    \        const firstDigit = Math.abs(num) % 10;\n        const lastDigit = parseInt(String(Math.abs(num)).slice(-1));\n\
    \        return num > 10 && (firstDigit + lastDigit) % 2 !== 0;\n    }).length;\n\
    }\n", "\tlet counts = 0;\n\tnums.forEach(function(n) {\n\t\tif (n > 10 && n %\
    \ 2 !== 0 && n % 10 % 2 !== 0) {\n\t\t\tcounts++;\n\t\t}\n\t});\n\treturn counts;\n\
    }", "  var counter = 0;\n  for (var i = 0; i < nums.length; i++) {\n    var firstDigit\
    \ = nums[i].toString().charAt(0);\n    var lastDigit = nums[i].toString().charAt(nums[i].toString().length\
    \ - 1);\n    if (nums[i] > 10 && firstDigit % 2 === 1 && lastDigit % 2 === 1)\
    \ {\n      counter++;\n    }\n  }\n  return counter;\n}\n", "    let count = 0;\n\
    \    for (let i = 0; i < nums.length; i++) {\n        let num = nums[i];\n   \
    \     if (num > 10 && num % 2 !== 0 && (num % 10) % 2 !== 0) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let result = 0;\n    nums.forEach(element\
    \ => {\n        if (isBiggerThan10(element) && isFirstDigitOdd(element) && isLastDigitOdd(element))\
    \ {\n            result++;\n        }\n    });\n    return result;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10\
    \ && nums[i] % 2 === 1 && nums[0] % 2 === 1 &&\n      Math.abs(nums[i]) % 10 ===\
    \ 1) {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "    let result\
    \ = 0;\n    for (let i = 0; i < nums.length; i++) {\n        let n = nums[i];\n\
    \        if (n < 10 || n > 100) {\n            continue;\n        }\n        let\
    \ d1 = n % 10;\n        let d2 = Math.floor(n / 10);\n        if (d1 % 2 == 1\
    \ && d2 % 2 == 1) {\n            result++;\n        }\n    }\n    return result;\n\
    }\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109]));\n", "    let specialNumbers: number = 0;\n    nums.forEach(num\
    \ => {\n        const strNum: string = num.toString();\n        const firstNum:\
    \ number = Number(strNum[0]);\n        const lastNum: number = Number(strNum[strNum.length\
    \ - 1]);\n        if (num > 10 && firstNum % 2 !== 0 && lastNum % 2 !== 0) {\n\
    \            specialNumbers++;\n        }\n    });\n    return specialNumbers;\n\
    }\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109]));\nconsole.log('-------------------------------------------------');\n\
    \n", "\treturn nums.filter(val => {\n\t\tconst str = val.toString();\n\t\treturn\
    \ val > 10 && [str[0], str[str.length - 1]].every(char => Number(char) % 2);\n\
    \t}).length;\n}\n", "    let filtered = nums.filter(num => (num > 10 && Math.abs(num)\
    \ % 10 === Math.floor(Math.abs(num) / 10) % 10));\n    return filtered.length;\n\
    }\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33,\
    \ -2, -3, 45, 21, 109])); // 2\nconsole.log(specialFilter([23, -9, -7, 35, 24,\
    \ 102])); // 0\nconsole.log(specialFilter([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])); //\
    \ 0\n", "    let filtered = nums.filter(n => \n        n > 10 && \n        Math.abs(n)\
    \ % 10 % 2 !== 0 && \n        Math.abs(n) % 10 === Math.floor(Math.abs(n) / Math.pow(10,\
    \ Math.floor(Math.log10(Math.abs(n)))) % 10));\n    return filtered.length;\n\
    }\n", "  // your code here\n  let count = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] > 10 && nums[i] % 2 !== 0 &&\n      nums[i].toString().length\
    \ === 2 &&\n      (nums[i].toString()[0] % 2 !== 0 || nums[i].toString()[1] %\
    \ 2 !== 0)) {\n      count++;\n    }\n  }\n  return count;\n}\n\n", "    //your\
    \ code\n    let count = 0;\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    let first = nums[i].toString().split('')[0];\n        let last = nums[i].toString().split('')[nums[i].toString().length\
    \ - 1];\n        if (nums[i] > 10 && isOdd(+first) && isOdd(+last)) {\n      \
    \      count++;\n        }\n    }\n    return count;\n}\n", "  return nums.filter(x\
    \ => x > 10 && x.toString().length > 1 && x.toString()[0] % 2 != 0 && x.toString()[x.toString().length\
    \ - 1] % 2 != 0).length;\n}\n", "    let count = 0;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        if (nums[i] > 10 && nums[i] % 2 === 1 && parseInt(nums[i].toString()[0])\
    \ % 2 === 1 && parseInt(nums[i].toString()[nums[i].toString().length - 1]) % 2\
    \ === 1) {\n            count++;\n        }\n    }\n    return count;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
