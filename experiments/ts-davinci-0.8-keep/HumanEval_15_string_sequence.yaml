name: HumanEval_15_string_sequence
language: ts
prompt: "//Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n// >>> string_sequence(0)\n// '0'\n// >>> string_sequence(5)\n//\
  \ '0 1 2 3 4 5'\nfunction string_sequence(n: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_sequence;\n  assert.deepEqual(candidate(0),\"\
  0\");\n  assert.deepEqual(candidate(3),\"0 1 2 3\");\n  assert.deepEqual(candidate(10),\"\
  0 1 2 3 4 5 6 7 8 9 10\");\n}\n\ntest();"
completions: ["  return Array.from(Array(n + 1).keys()).join(' ');\n}\n", "  // your\
    \ code goes here\n  let res = '';\n  for (let i = 0; i <= n; i++) {\n    res +=\
    \ i + ' ';\n  }\n  return res.trim();\n}\n", "  // console.log(n);\n  let sequence\
    \ = \"\";\n  for (let i = 0; i <= n; i++) {\n    sequence += `${i} `;\n  }\n \
    \ return sequence.trim();\n}\n", "  let res = '';\n  for (let i = 0; i <= n; i++)\
    \ {\n    res += i + ' ';\n  }\n  return res.trim();\n}\n", "    return '';\n}\n",
  "    return ''\n}\n", "    let result: string = '';\n    for (let i = 0; i <= n;\
    \ i++) {\n        result += i + ' ';\n    }\n    return result.trim();\n}\n",
  "    //Completa aqu\xED tu c\xF3digo\n    let array: number[] = [];\n    for (let\
    \ i = 0; i <= n; i++) {\n        array.push(i);\n    }\n    return array.join(\"\
    \ \");\n}\n", "    if (n === 0) {\n        return \"0\";\n    } else {\n     \
    \   return string_sequence(n - 1) + \" \" + n;\n    }\n}\n", "  var str: string\
    \ = '';\n  for (var i = 0; i <= n; i++) {\n    str += i + ' ';\n  }\n  return\
    \ str.trim();\n}\n", "  let result = '';\n  for (let i = 0; i <= n; i++) {\n \
    \   result += i + ' ';\n  }\n  return result.trim();\n}\n", "  if (n === 0) {\n\
    \    return '0';\n  } else {\n    return string_sequence(n - 1) + ' ' + n;\n \
    \ }\n}\n", "  var i: number,\n    str: string = '';\n  for (i = 0; i <= n; i++)\
    \ {\n    str += i + ' ';\n  }\n  return str.trim();\n}\n\nconsole.log(string_sequence(0));\n\
    console.log(string_sequence(5));\nconsole.log(string_sequence(10));\n", "    var\
    \ ans: string = '';\n    if (n >= 0) {\n        ans = ans + n;\n        if (n\
    \ > 0)\n            ans = string_sequence(n - 1) + ' ' + ans;\n    }\n    return\
    \ ans;\n}\n", "  var result: string = '';\n  var i: number;\n  for (i = 0; i <=\
    \ n; i++) {\n    result += i + ' ';\n  }\n  return result.trim();\n}\n", "   \
    \ if (n === 0) return '0';\n    let result = '';\n    for (let i = 0; i <= n;\
    \ i++) {\n        result += i + ' ';\n    }\n    return result.trim();\n}\n",
  "    return (n < 0) ? ' ' : n + ' ' + string_sequence(n - 1);\n}\n", "    let s\
    \ = \"\";\n    for (let i = 0; i <= n; i++) {\n        s += i.toString() + \"\
    \ \";\n    }\n    return s.trim();\n}\n", "    let nums: string = '';\n    for\
    \ (let i = 0; i <= n; i++) {\n        nums += String(i) + ' ';\n    }\n    return\
    \ nums.trim();\n}\n", "    return n < 0 ? '' : `${string_sequence(n - 1)} ${n}`;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
