name: HumanEval_133_sum_squares
language: ts
prompt: "//You are given a list of numbers.\n// You need to return the sum of squared\
  \ numbers in the given list,\n// round each element in the list to the upper int(Ceiling)\
  \ first.\n// Examples:\n// For lst = [1,2,3] the output should be 14\n// For lst\
  \ = [1,4,9] the output should be 98\n// For lst = [1,3,5,7] the output should be\
  \ 84\n// For lst = [1.4,4.2,0] the output should be 29\n// For lst = [-2.4,1,1]\
  \ the output should be 6\nfunction sum_squares(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sum_squares;\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 3.0]),14);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0]),14);\n  assert.deepEqual(candidate([1.0,\
  \ 3.0, 5.0, 7.0]),84);\n  assert.deepEqual(candidate([1.4, 4.2, 0.0]),29);\n  assert.deepEqual(candidate([-2.4,\
  \ 1.0, 1.0]),6);\n  assert.deepEqual(candidate([100.0, 1.0, 15.0, 2.0]),10230);\n\
  \  assert.deepEqual(candidate([10000.0, 10000.0]),200000000);\n  assert.deepEqual(candidate([-1.4,\
  \ 4.6, 6.3]),75);\n  assert.deepEqual(candidate([-1.4, 17.9, 18.9, 19.9]),1086);\n\
  \  assert.deepEqual(candidate([0.0]),0);\n  assert.deepEqual(candidate([-1.0]),1);\n\
  \  assert.deepEqual(candidate([-1.0, 1.0, 0.0]),2);\n}\n\ntest();"
completions: ["  let temp: number[] = lst.map(item => Math.ceil(item));\n  return\
    \ temp.reduce((a, b) => a + b * b, 0);\n}\n\nconsole.log(sum_squares([1, 4, 9]));",
  "  return lst.map(x => Math.ceil(x))\n    .map(x => x * x)\n    .reduce((a, b) =>\
    \ a + b, 0);\n}\n", "  let sum: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}\nconsole.log(sum_squares([1,\
    \ 2, 3])); //14\nconsole.log(sum_squares([1, 4, 9])); //98\nconsole.log(sum_squares([1,\
    \ 3, 5, 7])); //84\nconsole.log(sum_squares([1.4, 4.2, 0])); //29\nconsole.log(sum_squares([-2.4,\
    \ 1, 1])); //6\n", "    let sum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        sum += Math.ceil(lst[i]) ** 2;\n    }\n    return sum;\n}\n\n\
    console.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1, 4, 9]));\nconsole.log(sum_squares([1,\
    \ 3, 5, 7]));\nconsole.log(sum_squares([1.4, 4.2, 0]));\nconsole.log(sum_squares([-2.4,\
    \ 1, 1]));", "  return lst.map(x => Math.ceil(x)).reduce((acc, curr) => acc +\
    \ curr * curr, 0);\n}\n", "    return lst.map(Math.ceil).reduce((sum, el) => sum\
    \ + Math.pow(el, 2), 0);\n}\n\nconsole.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1,\
    \ 4, 9]));\nconsole.log(sum_squares([1, 3, 5, 7]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0]));\nconsole.log(sum_squares([-2.4, 1, 1]));", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n\
    \  return sum;\n}\n\nconsole.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1,\
    \ 4, 9]));\nconsole.log(sum_squares([1, 3, 5, 7]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0]));\nconsole.log(sum_squares([-2.4, 1, 1]));", "  return lst.map(Math.ceil).reduce((a,\
    \ b) => a + b * b, 0);\n}\n\nconsole.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1,\
    \ 4, 9]));\nconsole.log(sum_squares([1, 3, 5, 7]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0]));\nconsole.log(sum_squares([-2.4, 1, 1]));", "  return lst.map(x =>\
    \ Math.ceil(x)).reduce((x, y) => x + y ** 2, 0);\n}\n\nconsole.log(sum_squares([1,\
    \ 2, 3]));\nconsole.log(sum_squares([1, 4, 9]));\nconsole.log(sum_squares([1,\
    \ 3, 5, 7]));\nconsole.log(sum_squares([1.4, 4.2, 0]));\nconsole.log(sum_squares([-2.4,\
    \ 1, 1]));", "  let result = 0;\n  lst.forEach(element => {\n    result += Math.ceil(element)\
    \ ** 2;\n  });\n  return result;\n}\n", "  let sum = 0;\n  for (let i = 0; i <\
    \ lst.length; i++) {\n    let elem = lst[i];\n    sum += Math.ceil(elem) ** 2;\n\
    \  }\n  return sum;\n}\n\nconsole.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1,\
    \ 4, 9]));\nconsole.log(sum_squares([1, 3, 5, 7]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0]));\nconsole.log(sum_squares([-2.4, 1, 1]));", "  return lst.map(el =>\
    \ Math.ceil(el)).reduce((acc, el) => acc + Math.pow(el, 2), 0);\n}\n", "    var\
    \ sum = 0;\n    for (var i = 0; i < lst.length; i++) {\n        sum += Math.pow(Math.ceil(lst[i]),\
    \ 2);\n    }\n    return sum;\n}\n", "    return Math.round(lst.reduce((acc, val)\
    \ => acc + val * val, 0));\n}\n\nconsole.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1,\
    \ 4, 9]));\nconsole.log(sum_squares([1, 3, 5, 7]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0]));\nconsole.log(sum_squares([-2.4, 1, 1]));", "  return lst.map(x =>\
    \ Math.ceil(x)).reduce((a, b) => a + b * b, 0);\n}\n", "    return lst.map(Math.ceil).reduce((a,\
    \ b) => a + b ** 2, 0);\n}\n", "  const newArray = lst.map(function(x) {\n   \
    \ return Math.ceil(x);\n  });\n  let squaresSum = 0;\n  for (let i = 0; i < newArray.length;\
    \ i++) {\n    squaresSum += newArray[i] * newArray[i];\n  }\n  return squaresSum;\n\
    }\n\nexport default sum_squares;", "  let sum = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    sum += Math.ceil(lst[i]) ** 2;\n  }\n  return sum;\n}\n\nconsole.log(sum_squares([1,\
    \ 2, 3]));\nconsole.log(sum_squares([1, 4, 9]));\nconsole.log(sum_squares([1,\
    \ 3, 5, 7]));\nconsole.log(sum_squares([1.4, 4.2, 0]));\nconsole.log(sum_squares([-2.4,\
    \ 1, 1]));", "  let result = 0;\n  for (let num of lst) {\n    result += Math.pow(Math.ceil(num),\
    \ 2);\n  }\n  return result;\n}\n\nconsole.log(sum_squares([1, 2, 3]));\nconsole.log(sum_squares([1,\
    \ 4, 9]));\nconsole.log(sum_squares([1, 3, 5, 7]));\nconsole.log(sum_squares([1.4,\
    \ 4.2, 0]));\nconsole.log(sum_squares([-2.4, 1, 1]));", "    return lst.map(x\
    \ => Math.ceil(x)).reduce((x, y) => x + y * y, 0);\n}\n\nconsole.log(sum_squares([1,\
    \ 2, 3]));\nconsole.log(sum_squares([1, 4, 9]));\nconsole.log(sum_squares([1,\
    \ 3, 5, 7]));\nconsole.log(sum_squares([1.4, 4.2, 0]));\nconsole.log(sum_squares([-2.4,\
    \ 1, 1]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
