name: HumanEval_162_string_to_md5
language: ts
prompt: "//Given a string 'text', return its md5 hash equivalent string.\n// If 'text'\
  \ is an empty string, return None.\n// >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n\
  function string_to_md5(text: string): string | undefined {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_to_md5;\n  assert.deepEqual(candidate(\"Hello\
  \ world\"),\"3e25960a79dbc69b674cd4ec67a72c62\");\n  assert.deepEqual(candidate(\"\
  \"),undefined);\n  assert.deepEqual(candidate(\"A B C\"),\"0ef78513b0cb8cef12743f5aeb35f888\"\
  );\n  assert.deepEqual(candidate(\"password\"),\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  );\n}\n\ntest();"
completions: ["  const md5 = require('md5');\n  return md5(text);\n}\n\n", "  if (text.length)\
    \ {\n    return crypto.createHash('md5').update(text).digest('hex');\n  } else\
    \ {\n    return undefined;\n  }\n}\n", "    if (text.length > 0) {\n        return\
    \ crypto.createHash('md5').update(text).digest('hex');\n    }\n    return undefined;\n\
    }\n", "    if (text.length === 0) {\n        return undefined;\n    }\n\n    return\
    \ CryptoJS.MD5(text).toString();\n}\n", "    if (text.length === 0) {\n      \
    \  return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n\
    }\n", "  if (text === '') {\n    return undefined;\n  }\n  let md5 = crypto.createHash('md5');\n\
    \  md5.update(text);\n  return md5.digest('hex');\n}\n", "  return CryptoJS.MD5(text).toString();\n\
    }\n", "    if (!text) {\n        return undefined;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n\
    }\n", "    if (text == \"\") {\n        return undefined;\n    }\n    let hash\
    \ = md5(text);\n    return hash;\n}\n", "    if (text === \"\") {\n        return\
    \ undefined;\n    }\n    let crypto = require('crypto');\n    let hash = crypto.createHash('md5').update(text).digest('hex');\n\
    \    return hash;\n}\n", "    if (!text) {\n        return undefined;\n    }\n\
    \    return crypto.createHash('md5').update(text).digest('hex');\n}\n", "    if\
    \ (!text) {\n        return;\n    }\n    const md5 = require('md5');\n    return\
    \ md5(text);\n}\n\n", "  if (text === \"\") {\n    return undefined;\n  }\n  return\
    \ crypto.createHash(\"md5\").update(text).digest(\"hex\");\n}\n", "    if (!text)\
    \ {\n        return;\n    }\n    return createHash('md5').update(text).digest('hex');\n\
    }\n\nexport { string_to_md5 };", "    let md5sum = crypto.createHash('md5');\n\
    \    md5sum.update(text);\n    return md5sum.digest('hex');\n}\n\nlet md5_1 =\
    \ string_to_md5('Hello world');\nlet md5_2 = string_to_md5('Hello world');\nlet\
    \ md5_3 = string_to_md5('This is a different string');\n\nconsole.log(md5_1, md5_2,\
    \ md5_3);\n", "    if (text == \"\") {\n        return undefined;\n    }\n   \
    \ return md5(text);\n}\n", "  if (text === \"\") {\n    return undefined;\n  }\n\
    \  let md5 = crypto.createHash(\"md5\");\n  md5.update(text);\n  return md5.digest(\"\
    hex\");\n}\n", "  if (text.length === 0) {\n    return undefined;\n  }\n  // text\
    \ += 'es6'; // example of using template literals\n  const md5 = crypto.createHash('md5');\n\
    \  return md5.update(text).digest('hex');\n}\n", "    return md5(text);\n}\n\n",
  "  if (text === '') {\n    return undefined;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
