name: HumanEval_39_prime_fib
language: ts
prompt: "//prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib(n:\
  \ number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = prime_fib;\n  assert.deepEqual(candidate(1),2);\n\
  \  assert.deepEqual(candidate(2),3);\n  assert.deepEqual(candidate(3),5);\n  assert.deepEqual(candidate(4),13);\n\
  \  assert.deepEqual(candidate(5),89);\n  assert.deepEqual(candidate(6),233);\n \
  \ assert.deepEqual(candidate(7),1597);\n  assert.deepEqual(candidate(8),28657);\n\
  \  assert.deepEqual(candidate(9),514229);\n  assert.deepEqual(candidate(10),433494437);\n\
  }\n\ntest();"
completions: ["  let i = 2;\n  let count = 1;\n  let fib = fibonacci(i);\n  while\
    \ (count < n) {\n    fib = fibonacci(i);\n    i++;\n    if (is_prime(fib)) {\n\
    \      count++;\n    }\n  }\n  return fib;\n}\n\nexport { fibonacci, is_prime,\
    \ prime_fib };", "    if (n <= 0)\n        return 0;\n    if (n === 1)\n     \
    \   return 2;\n    if (n === 2)\n        return 3;\n    let idx = 3;\n    let\
    \ f2 = 2;\n    let f1 = 3;\n    let f = 5;\n    while (idx <= n) {\n        f2\
    \ = f1;\n        f1 = f;\n        f = f1 + f2;\n        if (f % 2 !== 0 && is_prime(f))\n\
    \            idx += 1;\n    }\n    return f;\n}\n", "    const fibArr = fib_gen(n);\n\
    \    const primeFibArr = fibArr.filter(x => is_prime(x));\n    return primeFibArr[n\
    \ - 1];\n}\n", "    return PrimeFibonacci.get(n);\n}\n", "    let is_prime = function(n:\
    \ number): boolean {\n        let is_prime = true;\n        let limit = Math.ceil(Math.sqrt(n));\n\
    \        for (let i = 2; i <= limit; i++) {\n            if (n % i == 0) {\n \
    \               is_prime = false;\n                break;\n            }\n   \
    \     }\n        return is_prime;\n    }\n\n    let fib = function(n: number):\
    \ number {\n        let arr = [0, 1];\n        if (n <= 2) {\n            return\
    \ 1;\n        }\n        for (let i = 2; i <= n; i++) {\n            arr.push(arr[i\
    \ - 1] + arr[i - 2]);\n        }\n        return arr[n];\n    }\n\n    let i =\
    \ 0;\n    let current_fib = 0;\n    while (i < n) {\n        current_fib = fib(i);\n\
    \        if (is_prime(current_fib)) {\n            i++;\n        }\n    }\n  \
    \  return current_fib;\n}\n", "    let res = 2;\n    let a = 1;\n    let b = 1;\n\
    \    let c = 0;\n    let count = 1;\n    if (n == 1) {\n        return res;\n\
    \    }\n    while (count < n) {\n        c = a + b;\n        if (is_prime(c))\
    \ {\n            res = c;\n            count += 1;\n        }\n        a = b;\n\
    \        b = c;\n    }\n    return res;\n}\n", "  if (n < 1) return 0;\n  let\
    \ a = 1;\n  let b = 2;\n  let c = 0;\n  let i = 1;\n  while (i < n) {\n    if\
    \ (is_prime(a)) {\n      c = a;\n      i++;\n    }\n    if (i == n) break;\n \
    \   a = b;\n    b = b + c;\n  }\n  return a;\n}\n", "  let f1 = 2;\n  let f2 =\
    \ 3;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  if (n === 1) {\n    return f1;\n\
    \  } else if (n === 2) {\n    return f2;\n  } else {\n    for (let i = 3; i <=\
    \ n; i++) {\n      c = f1 + f2;\n      f1 = f2;\n      f2 = c;\n      a = c;\n\
    \      while (a > 1) {\n        b = 0;\n        for (let j = 2; j <= a; j++) {\n\
    \          if (a % j === 0) {\n            b++;\n          }\n        }\n    \
    \    if (b === 1) {\n          break;\n        } else {\n          a--;\n    \
    \    }\n      }\n    }\n    return a;\n  }\n}\n", "    let lastFib = 2;\n    let\
    \ index = 1;\n    while (index < n) {\n        let currentFib = fib(index);\n\
    \        if (isPrime(currentFib)) {\n            lastFib = currentFib;\n     \
    \       index += 1;\n        }\n    }\n    return lastFib;\n}\n", "    let i =\
    \ 0;\n    let fib_number = -1;\n    while (i < n) {\n        if (fib_number ===\
    \ -1) {\n            fib_number = 2;\n        } else {\n            fib_number\
    \ = fib_next(fib_number);\n        }\n        if (is_prime(fib_number)) {\n  \
    \          i += 1;\n        }\n    }\n    return fib_number;\n}\n", "  let num\
    \ = 2, a = 1, b = 1, index = 1;\n  while (index < n) {\n    num = a + b;\n   \
    \ a = b;\n    b = num;\n    if (is_prime(num)) {\n      index++;\n    }\n  }\n\
    \  return num;\n}\n", "    return 0;\n}\n", "    // return if n-th Fibonacci number\
    \ is prime\n    return 0;\n}\n", "    let b = 1;\n    let a = 0;\n    let i =\
    \ 0;\n    while (i < n) {\n        let c = a + b;\n        a = b;\n        b =\
    \ c;\n        if (is_prime(c)) {\n            i += 1;\n        }\n    }\n    return\
    \ a;\n}\n", "    let list = [2, 3, 5];\n    if (n <= list.length) {\n        return\
    \ list[n - 1];\n    }\n    let fib_1 = 1;\n    let fib_2 = 2;\n    let fib_3 =\
    \ 0;\n    let fib = 3;\n    while (true) {\n        if (is_prime(fib)) {\n   \
    \         list.push(fib);\n        }\n        if (list.length === n) {\n     \
    \       return list[n - 1];\n        }\n        fib_3 = fib_1 + fib_2;\n     \
    \   fib_1 = fib_2;\n        fib_2 = fib_3;\n        fib = fib_3;\n    }\n}\n",
  "    let i = 1;\n    let i_prime = 2;\n    let j = 0;\n    let j_prime = 1;\n  \
    \  for (let k = 0; k < n; k++) {\n        let t = i;\n        i = i_prime;\n \
    \       i_prime = i_prime + t;\n        t = j;\n        j = j_prime;\n       \
    \ j_prime = j_prime + t;\n    }\n    return i_prime;\n}\n", "  let a = 1;\n  let\
    \ b = 1;\n  let c = 2;\n  let count = 0;\n  let result = 0;\n  if (n == 1) {\n\
    \    return c;\n  }\n  while (count != n) {\n    if (count == n - 1) {\n     \
    \ result = c;\n    }\n    a = b;\n    b = c;\n    c = a + b;\n    count += 1;\n\
    \  }\n  return result;\n}\n", "    if (n == 1) {\n        return 2;\n    }\n \
    \   let a = 2;\n    let b = 3;\n    let temp = 0;\n    let i = 2;\n    while (i\
    \ < n) {\n        temp = a + b;\n        a = b;\n        b = temp;\n        i++;\n\
    \    }\n    return b;\n}\n", "    return 0;\n}\n", "  let count = 0;\n  let i\
    \ = 0;\n  while (count < n) {\n    if (isPrime(fib(i))) {\n      count++;\n  \
    \  }\n    i++;\n  }\n  return fib(i - 1);\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
