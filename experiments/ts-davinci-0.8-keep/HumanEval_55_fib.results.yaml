language: ts
name: HumanEval_55_fib
results:
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n === 0)\
    \ {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    }\n\
    \    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    let a = 0,\
    \ b = 1, c = 1;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n    \
    \    a = b;\n        b = c;\n    }\n    return c;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n <= 2)\
    \ {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821488
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821488
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    let fib_1 =\
    \ 0;\n    let fib_2 = 1;\n    let fib;\n    for (let i = 2; i <= n; i++) {\n \
    \       fib = fib_1 + fib_2;\n        fib_1 = fib_2;\n        fib_2 = fib;\n \
    \   }\n    return fib;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nundefined\n\n\
    should loosely deep-equal\n\n1\n    at test (/tmp/tmp_96p3ui7.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp_96p3ui7.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: undefined,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 1) {\n\
    \    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
    \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n <= 2)\
    \ {\n        return 1;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }\n}\n\ntest(\"fib\", () => {\n    expect(fib(10)).toBe(55);\n    expect(fib(1)).toBe(1);\n\
    \    expect(fib(8)).toBe(21);\n});\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphc12lwhx.ts(16,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmphc12lwhx.ts(17,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmphc12lwhx.ts(18,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmphc12lwhx.ts(19,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659821491
- exit_code: 1
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    // TODO\n \
    \   return n;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n10\n\nshould loosely\
    \ deep-equal\n\n55\n    at test (/tmp/tmppua61nwy.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppua61nwy.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 10,\n  expected:\
    \ 55,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n < 1)\
    \ {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n\
    \    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else {\n    return\
    \ fib(n - 1) + fib(n - 2);\n  }\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n <= 2)\
    \ {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\ntest('test\
    \ function fib', () => {\n    expect(fib(10)).toBe(55);\n    expect(fib(1)).toBe(1);\n\
    \    expect(fib(8)).toBe(21);\n});\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8qhey30q.ts(14,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmp8qhey30q.ts(15,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp8qhey30q.ts(16,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmp8qhey30q.ts(17,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    let result:\
    \ number[] = [];\n    let one = 1;\n    let two = 1;\n    let nextNum: number;\n\
    \    for (let i = 0; i < n; i++) {\n        result.push(one);\n        nextNum\
    \ = one + two;\n        one = two;\n        two = nextNum;\n    }\n    return\
    \ result[n - 1];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n <= 1)\
    \ {\n        return n;\n    } else {\n        return fib(n - 1) + fib(n - 2);\n\
    \    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821489
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821488
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n === 0)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n\
    \ - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821488
- exit_code: 2
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n  if (n <= 1) {\n\
    \    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n\nexport\
    \ { max, min, average, fib };\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpyuvd4v19.ts(16,10): error TS2304: Cannot find name
    ''max''.

    ../../../../../tmp/tmpyuvd4v19.ts(16,15): error TS2304: Cannot find name ''min''.

    ../../../../../tmp/tmpyuvd4v19.ts(16,20): error TS2304: Cannot find name ''average''.

    '
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n === 0)\
    \ {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n\
    \    return fib(n - 1) + fib(n - 2);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    return n <=\
    \ 2 ? 1 : fib(n - 1) + fib(n - 2);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = fib;\n \
    \ assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n \
    \ assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n\
    \  assert.deepEqual(candidate(12),144);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
- exit_code: 0
  program: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n\
    // 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n    if (n == 0)\
    \ return 0;\n    else if (n == 1) return 1;\n    else return fib(n - 1) + fib(n\
    \ - 2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n\
    \  assert.deepEqual(candidate(1),1);\n  assert.deepEqual(candidate(8),21);\n \
    \ assert.deepEqual(candidate(11),89);\n  assert.deepEqual(candidate(12),144);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821491
