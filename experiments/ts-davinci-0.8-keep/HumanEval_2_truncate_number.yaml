name: HumanEval_2_truncate_number
language: ts
prompt: "//Given a positive floating point number, it can be decomposed into\n// and\
  \ integer part (largest integer smaller than given number) and decimals\n// (leftover\
  \ part always smaller than 1).\n// Return the decimal part of the number.\n// >>>\
  \ truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
  \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
  }\n\ntest();"
completions: ["  return number % 1;\n}\n", "  return number - Math.floor(number);\n\
    }\n", "    var decimal = number % 1;\n    return decimal;\n}\n", "  return number\
    \ - Math.floor(number);\n}\n", "  return number - Math.floor(number);\n}\n", " \
    \ return number - Math.floor(number);\n}\n", "  return number % 1;\n}\n", "  return\
    \ number - Math.floor(number);\n}\n", "    return 0.0;\n}\n", "  return number\
    \ % 1;\n}\n", "  return number % 1;\n}\n", "  // TODO:\n  return 0;\n}\n", " \
    \   return parseFloat(number.toString().split('.')[1]) || 0;\n}\n", "  if (number\
    \ < 0) {\n    return truncate_number(-number);\n  }\n  let floored = Math.floor(number);\n\
    \  return number - floored;\n}\n", "    return number - Math.floor(number);\n\
    }\n", "    return number - Math.floor(number);\n}\n", "  return 0;\n}\n", "  \
    \  return number - parseInt(number.toString());\n}\n", "    if (typeof number\
    \ === 'number') {\n        const decimal = number - Math.floor(number);\n    \
    \    return decimal\n    }\n    return NaN\n}\n", "    return number - Math.floor(number);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
