name: HumanEval_31_is_prime
language: ts
prompt: "//Return true if a given number is prime, and false otherwise.\n// >>> is_prime(6)\n\
  // False\n// >>> is_prime(101)\n// True\n// >>> is_prime(11)\n// True\n// >>> is_prime(13441)\n\
  // True\n// >>> is_prime(61)\n// True\n// >>> is_prime(4)\n// False\n// >>> is_prime(1)\n\
  // False\nfunction is_prime(n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_prime;\n  assert.deepEqual(candidate(6),false);\n\
  \  assert.deepEqual(candidate(101),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(13441),true);\n  assert.deepEqual(candidate(61),true);\n\
  \  assert.deepEqual(candidate(4),false);\n  assert.deepEqual(candidate(1),false);\n\
  \  assert.deepEqual(candidate(5),true);\n  assert.deepEqual(candidate(11),true);\n\
  \  assert.deepEqual(candidate(17),true);\n  assert.deepEqual(candidate(85),false);\n\
  \  assert.deepEqual(candidate(77),false);\n  assert.deepEqual(candidate(255379),false);\n\
  }\n\ntest();"
completions: ["    for (let i = 2; i < n; i++) {\n        if (n % i == 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "  let i: number;\n\
    \  let n_sqrt: number;\n  let n_is_prime: boolean;\n\n  n_sqrt = Math.sqrt(n);\n\
    \  n_is_prime = true;\n\n  for (i = 2; i <= n_sqrt; i++) {\n    if (n % i ===\
    \ 0) {\n      n_is_prime = false;\n      break;\n    }\n  }\n\n  return n_is_prime;\n\
    }\n", "    //Based on the sieve of Eratosthenes\n    if (n === 1) {\n        return\
    \ false;\n    }\n    if (n < 4) {\n        return true;\n    }\n    if (n % 2\
    \ === 0) {\n        return false;\n    }\n    if (n < 9) {\n        return true;\n\
    \    }\n    if (n % 3 === 0) {\n        return false;\n    }\n    const r = Math.floor(Math.sqrt(n));\n\
    \    let f = 5;\n    while (f <= r) {\n        if (n % f === 0) {\n          \
    \  return false;\n        }\n        if (n % (f + 2) === 0) {\n            return\
    \ false;\n        }\n        f += 6;\n    }\n    return true;\n}\n", "    if (n\
    \ < 2) {\n        return false;\n    }\n    if (n == 2) {\n        return true;\n\
    \    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    for (let i =\
    \ 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\n\nconsole.log(is_prime(100));\nconsole.log(is_prime(101));\n\
    console.log(is_prime(4));\nconsole.log(is_prime(1));\nconsole.log(is_prime(11));\n\
    console.log(is_prime(13441));\nconsole.log(is_prime(61));\n", "    if (n == 1\
    \ || n == 2) {\n        return true;\n    }\n    for (let i = 2; i < n; i++) {\n\
    \        if (n % i == 0) {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    for (let i = 2; i < n; i++) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\n", "  if (n\
    \ < 2) {\n    return false;\n  }\n  const max = Math.sqrt(n);\n  for (let i =\
    \ 2; i <= max; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\
    \  return true;\n}\n", "    if (n <= 1) {\n        return false;\n    }\n    for\
    \ (let i = 2; i <= Math.floor(Math.sqrt(n)); i++) {\n        if (n % i === 0)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nconsole.log(is_prime(61));\n",
  "    let test_val: number = 2;\n    if (n === 1) {\n        return false;\n    }\n\
    \    while (test_val < n) {\n        if (n % test_val === 0) {\n            return\
    \ false;\n        }\n        test_val += 1;\n    }\n    return true;\n}", "  \
    \  if (n === 2) {\n        return true;\n    }\n    else if (n > 2) {\n      \
    \  // check if n is divisible by any number less than n\n        for (let i =\
    \ 2; i < n; i++) {\n            if (n % i === 0) {\n                return false;\n\
    \            }\n        }\n        return true;\n    }\n    else {\n        return\
    \ false;\n    }\n}\n", "    if (n < 1) {\n        return false;\n    }\n    else\
    \ if (n === 1) {\n        return false;\n    }\n    else if (n === 2) {\n    \
    \    return true;\n    }\n    else {\n        for (let i = 2; i < n; i++) {\n\
    \            if (n % i === 0) {\n                return false;\n            }\n\
    \        }\n        return true;\n    }\n}\n", "    if (n <= 1) {\n        return\
    \ false;\n    }\n    else if (n <= 3) {\n        return true;\n    }\n    else\
    \ if (n % 2 == 0 || n % 3 == 0) {\n        return false;\n    }\n    let i = 5;\n\
    \    while (i * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n   \
    \         return false;\n        }\n        i = i + 6;\n    }\n    return true;\n\
    }\n", "    return false;\n}\n", "    if (n < 2) return false;\n    if (n % 2 ===\
    \ 0) return false;\n    if (n === 2) return true;\n    let divisor = 3;\n    while\
    \ (divisor < n) {\n        if (n % divisor === 0) return false;\n        divisor\
    \ += 2;\n    }\n    return true;\n}\n", "    for (let index = 2; index < n; index++)\
    \ {\n        if (n % index == 0) {\n            return false;\n        }\n   \
    \ }\n    return true;\n}\n", "    if (n <= 1) {\n        return false;\n    }\n\
    \    else if (n <= 3) {\n        return true;\n    }\n    else if (n % 2 == 0\
    \ || n % 3 == 0) {\n        return false;\n    }\n    let i = 5;\n    while (i\
    \ * i <= n) {\n        if (n % i == 0 || n % (i + 2) == 0) {\n            return\
    \ false;\n        }\n        i = i + 6;\n    }\n    return true;\n}\n\nconsole.log(is_prime(6));\n\
    console.log(is_prime(101));\nconsole.log(is_prime(11));\nconsole.log(is_prime(13441));\n\
    console.log(is_prime(61));\nconsole.log(is_prime(4));\nconsole.log(is_prime(1));\n",
  "    if (n == 1) {\n        return false;\n    }\n    for (let i = 2; i < n; i++)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    if (n < 2) {\n        return false;\n    }\n   \
    \ for (let i = 2; i < n; i++) {\n        if (n % i == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n", "  if (n <= 1) {\n    return\
    \ false;\n  } else if (n === 2) {\n    return true;\n  } else {\n    for (let\
    \ x = 2; x < n; x++) {\n      if (n % x === 0) {\n        return false;\n    \
    \  }\n    }\n    return true;\n  }\n}\n", "    return is_prime_helper(n, 2);\n\
    }"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
