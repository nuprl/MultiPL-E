name: HumanEval_43_pairs_sum_to_zero
language: ts
prompt: "//pairs_sum_to_zero takes a list of integers as an input.\n// it returns\
  \ True if there are two distinct elements in the list that\n// sum to zero, and\
  \ False otherwise.\n// >>> pairs_sum_to_zero([1, 3, 5, 0])\n// False\n// >>> pairs_sum_to_zero([1,\
  \ 3, -2, 1])\n// False\n// >>> pairs_sum_to_zero([1, 2, 3, 7])\n// False\n// >>>\
  \ pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n// True\n// >>> pairs_sum_to_zero([1])\n\
  // False\nfunction pairs_sum_to_zero(l: number[]): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pairs_sum_to_zero;\n  assert.deepEqual(candidate([1,\
  \ 3, 5, 0]),false);\n  assert.deepEqual(candidate([1, 3, -2, 1]),false);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 7]),false);\n  assert.deepEqual(candidate([2, 4, -5, 3, 5, 7]),true);\n\
  \  assert.deepEqual(candidate([1]),false);\n  assert.deepEqual(candidate([-3, 9,\
  \ -1, 3, 2, 30]),true);\n  assert.deepEqual(candidate([-3, 9, -1, 3, 2, 31]),true);\n\
  \  assert.deepEqual(candidate([-3, 9, -1, 4, 2, 30]),false);\n  assert.deepEqual(candidate([-3,\
  \ 9, -1, 4, 2, 31]),false);\n}\n\ntest();"
completions: ["  // YOUR CODE HERE\n  throw new Error(\"Not implemented\");\n}\n",
  "    return helper(l, 0);\n}\n", "    // Your code here\n    return false;\n}\n",
  "    // Your code here\n    return false;\n}\n", "  for (let i = 0; i < l.length;\
    \ i++) {\n    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j]\
    \ === 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n",
  "  const a = l.map(i => Math.abs(i)).sort((a, b) => a - b);\n  let i = 0;\n  let\
    \ j = a.length - 1;\n  while (i < j) {\n    if (a[i] + a[j] === 0) {\n      return\
    \ true;\n    } else if (a[i] + a[j] < 0) {\n      i++;\n    } else {\n      j--;\n\
    \    }\n  }\n  return false;\n}\n", "  for (let i = 0; i < l.length; i++) {\n\
    \    for (let j = i + 1; j < l.length; j++) {\n      if (l[i] + l[j] === 0) {\n\
    \        return true;\n      }\n    }\n  }\n  return false;\n}\n", "    const\
    \ positive = l.filter(x => x > 0);\n    const negative = l.filter(x => x < 0);\n\
    \    const zero = l.indexOf(0);\n    if (zero !== -1) {\n        return true;\n\
    \    }\n    let res = [];\n    positive.forEach(pos => {\n        let neg = negative.indexOf(-pos);\n\
    \        if (neg !== -1) {\n            res.push([pos, -pos]);\n        }\n  \
    \  });\n    return res.length > 0;\n}\n", "  if (l.length < 2) {\n    return false;\n\
    \  } else {\n    for (let i = 0; i < l.length; i++) {\n      for (let j = i +\
    \ 1; j < l.length; j++) {\n        if (l[i] + l[j] === 0) {\n          return\
    \ true;\n        }\n      }\n    }\n    return false;\n  }\n}\n", "    // your\
    \ code here\n    let i: number = 0;\n    let j: number = l.length - 1;\n    let\
    \ zero_pairs: boolean = false;\n    while (i < j) {\n        if (l[i] + l[j] ===\
    \ 0) {\n            zero_pairs = true;\n            break;\n        }\n      \
    \  i++;\n        j--;\n    }\n    return zero_pairs;\n}\n", "    // TODO: Write\
    \ your code here\n    return false;\n}\n", "    // Please write your code here\n\
    \    return undefined;\n}\n", "    // your code here\n    return false;\n}\n",
  "    let result: boolean = false;\n    let first: number;\n    let second: number;\n\
    \    let third: number;\n    let fourth: number;\n    let fifth: number;\n   \
    \ let sixth: number;\n    for (let i: number = 0; i < l.length; i++) {\n     \
    \   first = l[i];\n        for (let j: number = 0; j < l.length; j++) {\n    \
    \        second = l[j];\n            for (let k: number = 0; k < l.length; k++)\
    \ {\n                third = l[k];\n                for (let m: number = 0; m\
    \ < l.length; m++) {\n                    fourth = l[m];\n                   \
    \ for (let n: number = 0; n < l.length; n++) {\n                        fifth\
    \ = l[n];\n                        for (let p: number = 0; p < l.length; p++)\
    \ {\n                            sixth = l[p];\n                            if\
    \ (first + second === 0) {\n                                result = true;\n \
    \                           } else if (first + third === 0) {\n              \
    \                  result = true;\n                            } else if (first\
    \ + fourth === 0) {\n                                result = true;\n        \
    \                    } else if (first + fifth === 0) {\n                     \
    \           result = true;\n                            } else if (first + sixth\
    \ === 0) {\n                                result = true;\n                 \
    \           } else if (second + third === 0) {\n                             \
    \   result = true;\n                            } else if (second + fourth ===\
    \ 0) {\n                                result = true;\n                     \
    \       } else if (second + fifth === 0) {\n                                result\
    \ = true;\n                            } else if (second + sixth === 0) {\n  \
    \                              result = true;\n                            } else\
    \ if (third + fourth === 0) {\n                                result = true;\n\
    \                            } else if (third + fifth === 0) {\n             \
    \                   result = true;\n                            } else if (third\
    \ + sixth === 0) {\n                                result = true;\n         \
    \                   } else if (fourth + fifth === 0) {\n                     \
    \           result = true;\n                            } else if (fourth + sixth\
    \ === 0) {\n                                result = true;", "    // If there\
    \ are no elements in the list, then it is not possible to\n    // have a sum of\
    \ zero.\n    if (l.length === 0) {\n        return false;\n    }\n    // If there\
    \ is only one element in the list, then you cannot sum two\n    // elements to\
    \ get zero.\n    if (l.length === 1) {\n        return false;\n    }\n    // If\
    \ there are two or more elements in the list, we will first\n    // sort the list,\
    \ and then check if there are two elements that\n    // sum to zero.\n    l.sort();\n\
    \    let left_index = 0;\n    let right_index = l.length - 1;\n    while (left_index\
    \ < right_index) {\n        if (l[left_index] + l[right_index] === 0) {\n    \
    \        return true;\n        }\n        if (l[left_index] + l[right_index] <\
    \ 0) {\n            left_index++;\n        } else {\n            right_index--;\n\
    \        }\n    }\n    return false;\n}\n", "    // YOUR CODE HERE\n    throw\
    \ new Error(\"Method not implemented.\");\n}\n", "  // YOUR CODE HERE\n  // You\
    \ can change anything in this function.\n  // You are not allowed to call any\
    \ other functions.\n  let n: number = l.length;\n  if (n > 0) {\n    for (let\
    \ i: number = 0; i < n; i++) {\n      for (let j: number = i + 1; j < n; j++)\
    \ {\n        if (l[i] + l[j] === 0) {\n          return true;\n        }\n   \
    \   }\n    }\n  }\n  return false;\n}\n", "    return false;\n}", "    for (let\
    \ i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++)\
    \ {\n            if (l[i] + l[j] === 0) {\n                return true;\n    \
    \        }\n        }\n    }\n    return false;\n}\n", "    // throw \"Not implemented\"\
    ;\n    return false;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
