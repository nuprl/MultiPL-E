name: HumanEval_89_encrypt
language: ts
prompt: "//Create a function encrypt that takes a string as an argument and\n// returns\
  \ a string encrypted with the alphabet being rotated. \n// The alphabet should be\
  \ rotated in a manner such that the letters \n// shift down by two multiplied to\
  \ two places.\n// For example:\n// encrypt('hi') returns 'lm'\n// encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n// encrypt('gf') returns 'kj'\n// encrypt('et') returns 'ix'\n\
  function encrypt(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = encrypt;\n  assert.deepEqual(candidate(\"hi\"),\"\
  lm\");\n  assert.deepEqual(candidate(\"asdfghjkl\"),\"ewhjklnop\");\n  assert.deepEqual(candidate(\"\
  gf\"),\"kj\");\n  assert.deepEqual(candidate(\"et\"),\"ix\");\n  assert.deepEqual(candidate(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\");\n  assert.deepEqual(candidate(\"hellomyfriend\"\
  ),\"lippsqcjvmirh\");\n  assert.deepEqual(candidate(\"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\");\n  assert.deepEqual(candidate(\"\
  a\"),\"e\");\n}\n\ntest();"
completions: ["  let alph = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  let result = \"\";\n  for\
    \ (let i = 0; i < s.length; i++) {\n    for (let j = 0; j < alph.length; j++)\
    \ {\n      if (s[i] === alph[j]) {\n        if (s[i] === \"y\") {\n          result\
    \ += \"a\";\n        } else if (s[i] === \"z\") {\n          result += \"b\";\n\
    \        } else {\n          result += alph[j + 2];\n        }\n      }\n    }\n\
    \  }\n  return result;\n}\n", "    let arr = s.split('');\n    let enArr = [];\n\
    \    for (let i = 0; i < arr.length; i++) {\n        const element = arr[i];\n\
    \        if (element.charCodeAt(0) > 107) {\n            enArr.push(String.fromCharCode(element.charCodeAt(0)\
    \ - 10));\n        } else {\n            enArr.push(String.fromCharCode(element.charCodeAt(0)\
    \ + 16));\n        }\n    }\n    return enArr.join('');\n}\nconsole.log(encrypt('hi'));\n\
    console.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\nconsole.log(encrypt('et'));\n",
  "    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    const shiftedAlphabet =\
    \ alphabet.slice(2) + alphabet.slice(0, 2);\n    const alphabetArray = alphabet.split('');\n\
    \    const shiftedAlphabetArray = shiftedAlphabet.split('');\n    let encryptedString\
    \ = \"\";\n    for (let i = 0; i < s.length; i++) {\n        const currentLetter\
    \ = s[i];\n        const currentIndex = alphabetArray.indexOf(currentLetter);\n\
    \        encryptedString += shiftedAlphabetArray[currentIndex];\n    }\n    return\
    \ encryptedString;\n}\n", "    let alphabet = [\"a\", \"b\", \"c\", \"d\", \"\
    e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"\
    p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    let encrypted = \"\";\n    for (let i = 0; i < s.length; i++) {\n       \
    \ let x = alphabet.indexOf(s[i]);\n        encrypted += alphabet[x + 2]\n    }\n\
    \    return encrypted;\n}\n\nconsole.log(encrypt('ewhjklnop'));", "  let encryptString\
    \ = '';\n  for (let i = 0; i < s.length; i++) {\n    encryptString += String.fromCharCode(s.charCodeAt(i)\
    \ + (s.length * 2));\n  }\n  return encryptString;\n}\n", "    let result: string\
    \ = '';\n    for (let i: number = 0; i < s.length; i++) {\n        result += String.fromCharCode(s.charCodeAt(i)\
    \ + (i * 2));\n    }\n    return result;\n}\n", "    return s.split('').map(x\
    \ => {\n        if (x.charCodeAt(0) <= 121 && x.charCodeAt(0) >= 97) {\n     \
    \       return String.fromCharCode(x.charCodeAt(0) + 2);\n        } else if (x.charCodeAt(0)\
    \ <= 89 && x.charCodeAt(0) >= 65) {\n            return String.fromCharCode(x.charCodeAt(0)\
    \ + 2);\n        } else if (x.charCodeAt(0) === 90) {\n            return String.fromCharCode(x.charCodeAt(0)\
    \ - 24);\n        } else if (x.charCodeAt(0) === 122) {\n            return String.fromCharCode(x.charCodeAt(0)\
    \ - 24);\n        } else {\n            return x;\n        }\n    }).join('');\n\
    }\n\nconsole.log(encrypt('hi')); // returns 'lm'\nconsole.log(encrypt('asdfghjkl'));\
    \ // returns 'ewhjklnop'\nconsole.log(encrypt('gf')); // returns 'kj'\nconsole.log(encrypt('et'));\
    \ // returns 'ix'\nconsole.log(encrypt('e')); // returns 'g'\nconsole.log(encrypt('z'));\
    \ // returns 'b'\nconsole.log(encrypt('a')); // returns 'c'\nconsole.log(encrypt('Z'));\
    \ // returns 'B'\nconsole.log(encrypt('A')); // returns 'C'\nconsole.log(encrypt('t'));\
    \ // returns 'v'\nconsole.log(encrypt('T')); // returns 'V'\nconsole.log(encrypt('p'));\
    \ // returns 'r'\nconsole.log(encrypt('P')); // returns 'R'\nconsole.log(encrypt('!'));\
    \ // returns '!'\nconsole.log(encrypt('$')); // returns '$'\nconsole.log(encrypt('%'));\
    \ // returns '%'\nconsole.log(encrypt('&')); // returns '&'\nconsole.log(encrypt('*'));\
    \ // returns '*'\nconsole.log", "    let secretWord: string = '';\n    let alphabet:\
    \ string = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < s.length;\
    \ i++) {\n        let index: number = alphabet.indexOf(s[i]);\n        secretWord\
    \ += alphabet[(index + 2) * 2];\n    }\n    return secretWord;\n}\n", "  let alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  let result = ''\n  for (let i = 0; i < s.length;\
    \ i++) {\n    let temp = (alphabet.indexOf(s[i]) + 2) * 2\n    if (temp > 25)\
    \ {\n      temp = temp - 26\n    }\n    result += alphabet[temp]\n  }\n  return\
    \ result\n}\nconsole.log(encrypt('asdfghjkl'))\n", "    let r: string = '';\n\
    \    for (let i = 0; i < s.length; i++) {\n        r += String.fromCharCode(s.charCodeAt(i)\
    \ + 2 * 2);\n    }\n    return r;\n}\n", "  let sArray = s.split('');\n  let alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'.split('');\n  let shift = 2;\n  let encrypted\
    \ = '';\n  for (let i = 0; i < sArray.length; i++) {\n    if (alphabet.indexOf(sArray[i])\
    \ > -1) {\n      encrypted += alphabet[(alphabet.indexOf(sArray[i]) + shift *\
    \ 2) % alphabet.length];\n    } else {\n      encrypted += sArray[i];\n    }\n\
    \  }\n  return encrypted;\n}", "    let result: string = '';\n    let alpha: string\
    \ = 'abcdefghijklmnopqrstuvwxyz';\n    for (let i: number = 0; i < s.length; i++)\
    \ {\n        let pos: number = alpha.indexOf(s[i]);\n        if (pos === -1) {\n\
    \            result += s[i];\n        } else {\n            result += alpha[(pos\
    \ + 2) % 26];\n        }\n    }\n    return result;\n}", "    const alphabet:\
    \ string[] = s.split('');\n    alphabet.sort();\n    const alphabetObj: { [k:\
    \ string]: number } = {};\n    for (let i = 0; i < alphabet.length; i++) {\n \
    \       alphabetObj[alphabet[i]] = i;\n    }\n    const result: string[] = [];\n\
    \    for (let i = 0; i < s.length; i++) {\n        result.push(alphabet[(alphabetObj[s[i]]\
    \ + 2) % alphabet.length]);\n    }\n    return result.join('');\n}\n", "  const\
    \ arr: string[] = s.split('');\n  const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n  const newArr: string[] = arr.map((item) => {\n    const index = alphabet.indexOf(item);\n\
    \    return alphabet[(index + 4) % 26];\n  });\n  return newArr.join('');\n}\n\
    console.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\n\
    console.log(encrypt('et'));\n", "    let alphabet = ['a', 'b', 'c', 'd', 'e',\
    \ 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',\
    \ 'v', 'w', 'x', 'y', 'z'];\n    let res = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        let char = s[i];\n        let index = alphabet.indexOf(char);\n\
    \        let newIndex = index + 2 * 2;\n        if (newIndex > 25) {\n       \
    \     newIndex = newIndex - 25;\n        }\n        res += alphabet[newIndex];\n\
    \    }\n    return res;\n}\n", "  const arr: string[] = s.split('');\n  const\
    \ result: string[] = [];\n  for (let i = 0; i < arr.length; i++) {\n    result.push(arr[i]);\n\
    \    if (i % 2 === 0) {\n      result.push(arr[i]);\n    }\n  }\n  return result.join('');\n\
    }\n", "  const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n\
    \  let encryptedString = '';\n  s.split('').forEach(c => {\n    const position\
    \ = alphabet.indexOf(c);\n    if (position > -1) {\n      const encryptedPosition\
    \ = (position + (2 * 2)) % alphabet.length;\n      encryptedString += alphabet[encryptedPosition];\n\
    \    } else {\n      encryptedString += c;\n    }\n  });\n  return encryptedString;\n\
    }\n", "    const result: string[] = [];\n    for (let i = 0; i < s.length; i++)\
    \ {\n        const code = s.charCodeAt(i);\n        if (code >= 97 && code <=\
    \ 122) {\n            result.push(String.fromCharCode(((code - 97 + 2) % 26) +\
    \ 97));\n        } else if (code >= 65 && code <= 90) {\n            result.push(String.fromCharCode(((code\
    \ - 65 + 2) % 26) + 65));\n        } else {\n            result.push(s[i]);\n\
    \        }\n    }\n    return result.join('');\n}\n", "    //loop through string\
    \ \n    //check if index + 2 is > alphabet \n    //if so, substract 26 \n    let\
    \ encryptString = '';\n    for (let i = 0; i < s.length; i++) {\n        let temp\
    \ = s.charCodeAt(i) + 2;\n        if (temp > 122) {\n            temp -= 26;\n\
    \        }\n        encryptString += String.fromCharCode(temp);\n    }\n    return\
    \ encryptString;\n}", "    return s.split('').map(c => {\n        let code = c.charCodeAt(0);\n\
    \        if (code > 109) return String.fromCharCode(code - 10);\n        else\
    \ if (code < 110) return String.fromCharCode(code + 16);\n        else return\
    \ c;\n    }).join('');\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
