name: HumanEval_141_file_name_check
language: ts
prompt: "//Create a function which takes a string representing a file's name, and\
  \ returns\n// 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  // A file's name is considered to be valid if and only if all the following conditions\
  \ \n// are met:\n// - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n// - The file's name contains exactly one dot '.'\n// - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n// the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n// - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n// Examples:\n// file_name_check(\"example.txt\"\
  ) # => 'Yes'\n// file_name_check(\"1example.dll\") # => 'No' (the name should start\
  \ with a latin alphapet letter)\nfunction file_name_check(file_name: string): string\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = file_name_check;\n  assert.deepEqual(candidate(\"\
  example.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"1example.dll\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"s1sdf3.asd\"),\"No\");\n  assert.deepEqual(candidate(\"\
  K.dll\"),\"Yes\");\n  assert.deepEqual(candidate(\"MY16FILE3.exe\"),\"Yes\");\n\
  \  assert.deepEqual(candidate(\"His12FILE94.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _Y.txt\"),\"No\");\n  assert.deepEqual(candidate(\"?aREYA.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  /this_is_valid.dll\"),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.wow\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"this_is_valid.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  this_is_valid.txtexe\"),\"No\");\n  assert.deepEqual(candidate(\"#this2_i4s_5valid.ten\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"@this1_is6_valid.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  this_is_12valid.6exe4.txt\"),\"No\");\n  assert.deepEqual(candidate(\"all.exe.txt\"\
  ),\"No\");\n  assert.deepEqual(candidate(\"I563_No.exe\"),\"Yes\");\n  assert.deepEqual(candidate(\"\
  Is3youfault.txt\"),\"Yes\");\n  assert.deepEqual(candidate(\"no_one#knows.dll\"\
  ),\"Yes\");\n  assert.deepEqual(candidate(\"1I563_Yes3.exe\"),\"No\");\n  assert.deepEqual(candidate(\"\
  I563_Yes3.txtt\"),\"No\");\n  assert.deepEqual(candidate(\"final..txt\"),\"No\"\
  );\n  assert.deepEqual(candidate(\"final132\"),\"No\");\n  assert.deepEqual(candidate(\"\
  _f4indsartal132.\"),\"No\");\n  assert.deepEqual(candidate(\".txt\"),\"No\");\n\
  \  assert.deepEqual(candidate(\"s.\"),\"No\");\n}\n\ntest();"
completions: ["    const digits = '0123456789';\n    let cnt_digits = 0;\n    let\
    \ dot_found = false;\n    let file_name_len = file_name.length;\n    let after_dot\
    \ = file_name.substring(file_name_len - 3, file_name_len);\n    let is_valid_extension\
    \ = (after_dot === 'txt' || after_dot === 'exe' || after_dot === 'dll');\n   \
    \ for (let i = 0; i < file_name_len; i++) {\n        let character = file_name.charAt(i);\n\
    \        if (character === '.') {\n            dot_found = true;\n        }\n\
    \        if (digits.indexOf(character) !== -1) {\n            cnt_digits++;\n\
    \        }\n    }\n    if (cnt_digits > 3 || !dot_found || cnt_digits === file_name_len\
    \ || !is_valid_extension) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\n\nexport {\n    file_name_check\n}", "    //Using a regex to check the conditions\n\
    \    let regex = /^[a-zA-Z]{1}[a-zA-Z\\d]{0,18}\\.txt|exe|dll$/;\n    return regex.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "    const latinAlphabet: string = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    let allowedExtension: string[] = ['txt', 'exe', 'dll'];\n    let numDigits:\
    \ number = 0;\n    let extention: string = '';\n    for (let i: number = 0; i\
    \ < file_name.length; i++) {\n        if (latinAlphabet.indexOf(file_name[i])\
    \ === -1) {\n            if (file_name[i] === '.') {\n                extention\
    \ = file_name.substring(i + 1);\n                break;\n            }\n     \
    \       if (file_name[i] >= '0' && file_name[i] <= '9') {\n                numDigits++;\n\
    \            }\n        }\n    }\n    if (allowedExtension.indexOf(extention)\
    \ === -1 || numDigits > 3) {\n        return 'No';\n    }\n    return 'Yes';\n\
    }\nconsole.log(file_name_check(\"example.txt\"));\nconsole.log(file_name_check(\"\
    1example.dll\"));", "    //Regex to find digits, letters, and the letters 'txt',\
    \ 'exe', and 'dll'.\n    const letters = /[a-zA-Z]/;\n    const digits = /[0-9]/;\n\
    \    const file_types = /(\\.txt)|(\\.exe)|(\\.dll)/;\n    //Find all characters\
    \ from the regex above in the file name.\n    const all_letters = letters.test(file_name);\n\
    \    const all_digits = digits.test(file_name);\n    const file_type = file_types.test(file_name);\n\
    \    //Count the number of digits and letters, respectively.\n    const number_of_digits\
    \ = (file_name.match(digits) || []).length;\n    const number_of_letters = (file_name.match(letters)\
    \ || []).length;\n    //Test the file name to see if it fits the criteria.\n \
    \   const is_valid = all_letters && all_digits && file_type && number_of_digits\
    \ <= 3 && number_of_letters > 0;\n    //Return the result.\n    return is_valid\
    \ ? 'Yes' : 'No';\n}\n", "  return 'Yes';\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));", "\tconst numberRegex\
    \ = /[0-9]/g;\n\tconst numberRegexOnly = /^[0-9]*$/g;\n\tconst dotRegex = /[.]/g;\n\
    \tconst substringRegex = /^[a-zA-Z]/g;\n\tconst substringRegex1 = /[a-zA-Z]/g;\n\
    \tconst extensionRegex = /(txt|exe|dll)$/g;\n\tconst numberOfDigits = file_name.match(numberRegex);\n\
    \tconst numberOfDots = file_name.match(dotRegex);\n\tconst substring = file_name.match(substringRegex);\n\
    \tconst extension = file_name.match(extensionRegex);\n\tconst substring1 = file_name.match(substringRegex1);\n\
    \tif (numberOfDigits) {\n\t\tif (numberOfDigits.length < 4) {\n\t\t\tif (numberOfDots)\
    \ {\n\t\t\t\tif (numberOfDots.length === 1) {\n\t\t\t\t\tif (substring) {\n\t\t\
    \t\t\t\tif (extension) {\n\t\t\t\t\t\t\treturn 'Yes';\n\t\t\t\t\t\t}\n\t\t\t\t\
    \t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn 'No';\n}\n", "  // Do your magic\
    \ here\n  return '';\n}\n\nexport { file_name_check };", "    let count = 0;\n\
    \    let dot_count = 0;\n    let extension = file_name.split('.')[1];\n    let\
    \ first = file_name.split('.')[0];\n    for (let i of first) {\n        if (isNaN(Number(i)))\
    \ {\n            count++;\n        }\n    }\n    for (let i of file_name) {\n\
    \        if (i === '.') {\n            dot_count++;\n        }\n    }\n    if\
    \ (dot_count !== 1) {\n        return 'No';\n    }\n    else if (count === 0)\
    \ {\n        return 'No';\n    }\n    else if (!['txt', 'exe', 'dll'].includes(extension))\
    \ {\n        return 'No';\n    }\n    else if (file_name.split('.')[0].length\
    \ < 1) {\n        return 'No';\n    }\n    else {\n        return 'Yes';\n   \
    \ }\n}\nconsole.log(file_name_check(\"example.txt\"));", "    if (file_name.split(\"\
    \").filter(element => element >= \"0\" && element <= \"9\").length > 3) {\n  \
    \      return \"No\";\n    } else if (file_name.indexOf(\".\") != file_name.lastIndexOf(\"\
    .\")) {\n        return \"No\";\n    } else if (file_name.split(\".\")[0].length\
    \ === 0 || file_name.split(\".\")[0].charCodeAt(0) > \"z\".charCodeAt(0) || file_name.split(\"\
    .\")[0].charCodeAt(0) < \"a\".charCodeAt(0)) {\n        return \"No\";\n    }\
    \ else if (file_name.split(\".\")[1] != \"txt\" && file_name.split(\".\")[1] !=\
    \ \"exe\" && file_name.split(\".\")[1] != \"dll\") {\n        return \"No\";\n\
    \    } else {\n        return \"Yes\";\n    }\n}\n", "    return /^[a-zA-Z]+\\\
    d{0,3}(\\.(txt|exe|dll))$/.test(file_name) ? 'Yes' : 'No';\n}\n\nconsole.log(file_name_check(\"\
    example.txt\"));\nconsole.log(file_name_check(\"1example.dll\"));\n", "    return\
    \ (isValidFileName(file_name)) ? 'Yes' : 'No';\n}\n", "    // Your code goes here.\
    \ Happy coding!\n}\n", "    const regex = /^[a-zA-Z]\\w{1,}\\.txt|exe|dll$/g\n\
    \    return regex.test(file_name) ? 'Yes' : 'No'\n}\n", "  const valid_str = '([a-zA-Z]+)\\\
    .(txt|exe|dll)';\n  const regex = new RegExp(valid_str);\n  return regex.test(file_name)\
    \ ? 'Yes' : 'No';\n}\n", "  if (file_name.length === 0) {\n    return 'No';\n\
    \  }\n  const [beforeDot, afterDot] = file_name.split('.');\n  if (\n    !beforeDot\
    \ ||\n    /[^0-9]/g.test(beforeDot) ||\n    /[^a-zA-Z]/g.test(beforeDot[0]) ||\n\
    \    (beforeDot.match(/[0-9]/g) || []).length > 3 ||\n    !['txt', 'exe', 'dll'].includes(afterDot)\n\
    \  ) {\n    return 'No';\n  }\n  return 'Yes';\n}\n", "  if (!file_name.match(/^[a-zA-Z]+\\\
    d*\\.(txt|exe|dll)$/)) {\n    return 'No';\n  }\n  return 'Yes';\n}\n\nconsole.log(file_name_check('example.txt'));\n\
    console.log(file_name_check('1example.dll'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('exampledll'));\nconsole.log(file_name_check('aexample.dll'));\n\
    console.log(file_name_check('example.dll'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('111111.txt'));\nconsole.log(file_name_check('1example.dll'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name_check('example.exe'));\n\
    console.log(file_name_check('example.txt'));\nconsole.log(file_name", "  //for\
    \ dot\n  let dotCount = 0;\n  //for digits\n  let digitCount = 0;\n  //for first\
    \ letter\n  let firstLetter = '';\n  //to see if digit count is over 3\n  let\
    \ digitCounter = 0;\n  //to see if file name is valid\n  let validName = true;\n\
    \  //to return txt, exe, or dll\n  let fileNameExt = '';\n  for (let i = 0; i\
    \ < file_name.length; i++) {\n    if (file_name[i] === '.') {\n      dotCount++;\n\
    \    }\n    if (dotCount === 1) {\n      fileNameExt = file_name.slice(i + 1);\n\
    \    }\n    if (file_name[i] === '0' || file_name[i] === '1' || file_name[i] ===\
    \ '2' || file_name[i] === '3' || file_name[i] === '4' || file_name[i] === '5'\
    \ || file_name[i] === '6' || file_name[i] === '7' || file_name[i] === '8' || file_name[i]\
    \ === '9') {\n      digitCount++;\n      digitCounter++;\n    }\n    if (digitCounter\
    \ > 3) {\n      validName = false;\n    }\n    if (file_name[i] === '.' && i ===\
    \ 0) {\n      validName = false;\n    }\n    if (file_name[i] === '.' && i > 0)\
    \ {\n      firstLetter = file_name[i - 1];\n    }\n  }\n  if (dotCount !== 1)\
    \ {\n    validName = false;\n  }\n  if (firstLetter !== 'a' && firstLetter !==\
    \ 'b' && firstLetter !== 'c' && firstLetter !== 'd' && firstLetter !== 'e' &&\
    \ firstLetter !== 'f' && firstLetter !== 'g' && firstLetter !== 'h' && firstLetter\
    \ !== 'i' && firstLetter !== 'j' && firstLetter !== 'k' && firstLetter !== 'l'\
    \ && firstLetter !== '", "\tlet file_name_reg = /^[a-zA-Z]\\w*(\\d{0,3})\\.(txt|exe|dll)$/;\n\
    \treturn file_name_reg.test(file_name) ? 'Yes' : 'No';\n}\n", "    const latin_letters\
    \ = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let is_valid:\
    \ boolean = true;\n    let num_of_digits: number = 0;\n    let dot_index: number\
    \ = -1;\n    let dot_substr: string = '';\n    let substr_before_dot: string =\
    \ '';\n    let substr_after_dot: string = '';\n    // check if the number of digits\
    \ is more than 3\n    for (let i = 0; i < file_name.length; i++) {\n        if\
    \ (file_name[i] >= '0' && file_name[i] <= '9') {\n            num_of_digits++;\n\
    \        }\n    }\n    if (num_of_digits > 3) {\n        is_valid = false;\n \
    \   }\n    // check if there is exactly one dot\n    if (file_name.indexOf('.')\
    \ !== file_name.lastIndexOf('.')) {\n        is_valid = false;\n    }\n    else\
    \ {\n        dot_index = file_name.indexOf('.');\n        dot_substr = file_name.substring(dot_index,\
    \ file_name.length);\n        substr_before_dot = file_name.substring(0, dot_index);\n\
    \        substr_after_dot = file_name.substring(dot_index + 1, file_name.length);\n\
    \    }\n    // check if the substring before the dot is not empty and that it\
    \ starts with a latin letter\n    if (substr_before_dot === '' || latin_letters.indexOf(substr_before_dot[0])\
    \ === -1) {\n        is_valid = false;\n    }\n    // check if the substring after\
    \ the dot is one of the following: ['txt', 'exe', 'dll']\n    if (substr_after_dot\
    \ !== 'txt' && substr_after_dot !== 'exe' && substr_after_dot !== 'dll') {\n \
    \       is_valid = false;\n    }\n    if (is_valid) {\n        return 'Yes", " \
    \   const regexFileName = /^[a-zA-Z][a-zA-Z0-9]{0,3}\\.(txt|exe|dll)$/;\n    const\
    \ isValid = regexFileName.test(file_name);\n    return isValid ? 'Yes' : 'No';\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
