name: HumanEval_124_valid_date
language: ts
prompt: "//You have to write a function which validates a given date string and\n\
  // returns True if the date is valid otherwise False.\n// The date is valid if all\
  \ of the following rules are satisfied:\n// 1. The date string is not empty.\n//\
  \ 2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  // 3. The months should not be less than 1 or higher than 12.\n// 4. The date should\
  \ be in the format: mm-dd-yyyy\n// for example: \n// valid_date('03-11-2000') =>\
  \ True\n// valid_date('15-01-2012') => False\n// valid_date('04-0-2040') => False\n\
  // valid_date('06-04-2020') => True\n// valid_date('06/04/2020') => False\nfunction\
  \ valid_date(date: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = valid_date;\n  assert.deepEqual(candidate(\"03-11-2000\"\
  ),true);\n  assert.deepEqual(candidate(\"15-01-2012\"),false);\n  assert.deepEqual(candidate(\"\
  04-0-2040\"),false);\n  assert.deepEqual(candidate(\"06-04-2020\"),true);\n  assert.deepEqual(candidate(\"\
  01-01-2007\"),true);\n  assert.deepEqual(candidate(\"03-32-2011\"),false);\n  assert.deepEqual(candidate(\"\
  \"),false);\n  assert.deepEqual(candidate(\"04-31-3000\"),false);\n  assert.deepEqual(candidate(\"\
  06-06-2005\"),true);\n  assert.deepEqual(candidate(\"21-31-2000\"),false);\n  assert.deepEqual(candidate(\"\
  04-12-2003\"),true);\n  assert.deepEqual(candidate(\"04122003\"),false);\n  assert.deepEqual(candidate(\"\
  20030412\"),false);\n  assert.deepEqual(candidate(\"2003-04\"),false);\n  assert.deepEqual(candidate(\"\
  2003-04-12\"),false);\n  assert.deepEqual(candidate(\"04-2003\"),false);\n}\n\n\
  test();"
completions: ["    if (date.length > 0) {\n        let m1 = Number(date.slice(0, 2));\n\
    \        let m2 = Number(date.slice(3, 5));\n        let m3 = Number(date.slice(6,\
    \ 10));\n        if (m1 > 0 && m1 < 13 && m2 > 0 && m2 < 32 && m3 > 0 && m3 <\
    \ 10000) {\n            if (m1 == 2 && m2 > 29) {\n                return false;\n\
    \            }\n            else if (m1 == 2 && m2 <= 29) {\n                return\
    \ true;\n            }\n            else if (m1 % 2 != 0 && m1 <= 7 && m2 < 32)\
    \ {\n                return true;\n            }\n            else if (m1 % 2\
    \ == 0 && m1 >= 8 && m1 <= 12 && m2 < 32) {\n                return true;\n  \
    \          }\n            else if (m1 % 2 == 0 && m1 <= 7 && m2 < 31) {\n    \
    \            return true;\n            }\n            else if (m1 % 2 != 0 &&\
    \ m1 >= 8 && m1 <= 12 && m2 < 31) {\n                return true;\n          \
    \  }\n            else {\n                return false;\n            }\n     \
    \   }\n        else {\n            return false;\n        }\n    }\n    else {\n\
    \        return false;\n    }\n}", "    if (date.length == 0) return false;\n\
    \    let a = date.split('-');\n    if (a.length != 3) return false;\n    let y\
    \ = Number(a[2]);\n    let m = Number(a[0]);\n    let d = Number(a[1]);\n    if\
    \ (m < 1 || m > 12) return false;\n    if (m == 2) {\n        if (d < 1 || d >\
    \ 29) return false;\n    } else if (m == 1 || m == 3 || m == 5 || m == 7 || m\
    \ == 8 || m == 10 || m == 12) {\n        if (d < 1 || d > 31) return false;\n\
    \    } else {\n        if (d < 1 || d > 30) return false;\n    }\n    return true;\n\
    }\n", "    const dateFields = date.split('-');\n    if (dateFields.length !==\
    \ 3) {\n        return false;\n    }\n    let isValid = true;\n    //check the\
    \ month field\n    const month: number = Number(dateFields[0]);\n    const daysInMonth:\
    \ number = Number(dateFields[1]);\n    const year: number = Number(dateFields[2]);\n\
    \    if (month < 1 || month > 12) {\n        isValid = false;\n    }\n    if (isValid)\
    \ {\n        if (month === 2) {\n            //check the days in february\n  \
    \          if (daysInMonth < 1 || daysInMonth > 29) {\n                isValid\
    \ = false;\n            }\n        } else if (daysInMonth < 1 || daysInMonth >\
    \ 31) {\n            isValid = false;\n        }\n    }\n    if (isValid) {\n\
    \        //check the year\n        if (year < 1) {\n            isValid = false;\n\
    \        }\n    }\n    return isValid;\n}\n\ndescribe('valid date test cases',\
    \ () => {\n    it('valid date', () => {\n        expect(valid_date('03-11-2000')).to.be.true;\n\
    \    });\n    it('invalid date', () => {\n        expect(valid_date('15-01-2012')).to.be.false;\n\
    \    });\n    it('invalid date', () => {\n        expect(valid_date('04-0-2040')).to.be.false;\n\
    \    });\n    it('valid date', () => {\n        expect(valid_date('06-04-2020')).to.be.true;\n\
    \    });\n    it('invalid date', () => {\n        expect(valid_date('06/04/2020')).to.be.false;\n\
    \    });\n});", "  let [mm, dd, yyyy] = date.split(\"-\");\n  let [d, m, y] =\
    \ [+dd, +mm, +yyyy];\n  return (\n    !isNaN(d) &&\n    !isNaN(m) &&\n    !isNaN(y)\
    \ &&\n    [2, 3, 1].includes(date.length) &&\n    ((m === 1 || m === 3 || m ===\
    \ 5 || m === 7 || m === 8 || m === 10 || m === 12) && d <= 31 && d >= 1) &&\n\
    \    ((m === 4 || m === 6 || m === 9 || m === 11) && d <= 30 && d >= 1) &&\n \
    \   (m === 2 && d <= 29 && d >= 1) &&\n    (m > 0 && m <= 12)\n  );\n}\n", " \
    \   if (date.length === 0) {\n        return false;\n    }\n    if (date.length\
    \ !== 10) {\n        return false;\n    }\n    let month = parseInt(date.slice(0,\
    \ 2));\n    let day = parseInt(date.slice(3, 5));\n    let year = parseInt(date.slice(6,\
    \ 10));\n    if (month < 1 || month > 12) {\n        return false;\n    }\n  \
    \  if (month === 2) {\n        if (day < 1 || day > 29) {\n            return\
    \ false;\n        }\n    }\n    if (month === 4 || month === 6 || month === 9\
    \ || month === 11) {\n        if (day < 1 || day > 30) {\n            return false;\n\
    \        }\n    }\n    if (month === 1 || month === 3 || month === 5 || month\
    \ === 7 || month === 8 || month === 10 || month === 12) {\n        if (day < 1\
    \ || day > 31) {\n            return false;\n        }\n    }\n    if (year <\
    \ 2020) {\n        return false;\n    }\n    if (date.charAt(2) !== '-' || date.charAt(5)\
    \ !== '-') {\n        return false;\n    }\n    return true;\n}\n", "    if (date\
    \ === \"\") return false;\n    if (!date.includes(\"-\")) return false;\n    const\
    \ date_split = date.split(\"-\");\n    if (date_split.length !== 3) return false;\n\
    \    const month = parseInt(date_split[0]);\n    const day = parseInt(date_split[1]);\n\
    \    const year = parseInt(date_split[2]);\n    if (month < 1 || month > 12) return\
    \ false;\n    if (day < 1 || day > 31) return false;\n    if (month === 2 && day\
    \ > 29) return false;\n    if (month === 4 || month === 6 || month === 9 || month\
    \ === 11) {\n        if (day > 30) return false;\n    }\n    if (year < 0) return\
    \ false;\n    return true;\n}\nconsole.log(valid_date('11-12-2006'));\nconsole.log(valid_date('06-04-2020'));\n\
    console.log(valid_date('06/04/2020'));\nconsole.log(valid_date('4-4-2002'));\n",
  "    return /^([0-2][0-9]|3[0-1])-(0[1-9]|1[0-2])-([0-9]{4})$/.test(date);\n}\n",
  "    const monthDay = (d: Date): boolean => {\n        const month = d.getMonth()\
    \ + 1;\n        const day = d.getDate();\n        if (month === 2) {\n       \
    \     if (day < 1 || day > 29) return false;\n        } else if (month === 4 ||\
    \ month === 6 || month === 9 || month === 11) {\n            if (day < 1 || day\
    \ > 30) return false;\n        } else {\n            if (day < 1 || day > 31)\
    \ return false;\n        }\n        return true;\n    }\n    const dateFormat\
    \ = /(\\d{2})-(\\d{2})-(\\d{4})/;\n    if (!dateFormat.test(date)) return false;\n\
    \    const [_, month, day, year] = dateFormat.exec(date)!;\n    const d = new\
    \ Date(`${month}/${day}/${year}`);\n    if (isNaN(d.getTime())) return false;\n\
    \    return monthDay(d);\n}\n", "    let dataArray = date.split('-');\n    let\
    \ days = +dataArray[1];\n    let months = +dataArray[0];\n    if (date === '')\
    \ {\n        return false;\n    }\n    if (dataArray.length !== 3) {\n       \
    \ return false;\n    }\n    switch (months) {\n        case 1:\n        case 3:\n\
    \        case 5:\n        case 7:\n        case 8:\n        case 10:\n       \
    \ case 12:\n            if (days < 1 || days > 31) {\n                return false;\n\
    \            }\n            break;\n        case 4:\n        case 6:\n       \
    \ case 9:\n        case 11:\n            if (days < 1 || days > 30) {\n      \
    \          return false;\n            }\n            break;\n        case 2:\n\
    \            if (days < 1 || days > 29) {\n                return false;\n   \
    \         }\n            break;\n        default:\n            return false;\n\
    \    }\n    return true;\n}\n\nexport { valid_date }", "  const arr = date.split('-');\n\
    \  const dd = +arr[0];\n  const mm = +arr[1];\n  const yyyy = +arr[2];\n  if (mm\
    \ < 1 || mm > 12) {\n    return false;\n  }\n  if (yyyy < 0) {\n    return false;\n\
    \  }\n  if (mm === 2) {\n    if (dd < 1 || dd > 29) {\n      return false;\n \
    \   }\n  } else if (mm === 4 || mm === 6 || mm === 9 || mm === 11) {\n    if (dd\
    \ < 1 || dd > 30) {\n      return false;\n    }\n  } else {\n    if (dd < 1 ||\
    \ dd > 31) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    //YOUR\
    \ CODE GOES HERE!!!\n    let result = false;\n    let parseDate = date.split('-');\n\
    \    let year = parseInt(parseDate[2]);\n    let month = parseInt(parseDate[0]);\n\
    \    let day = parseInt(parseDate[1]);\n    let dateArr = date.split('-');\n \
    \   if (dateArr.length == 3) {\n        if (year < 2020 && year > 2000) {\n  \
    \          if (month >= 1 && month <= 12) {\n                if (month == 2) {\n\
    \                    if (day <= 29 && day >= 1) {\n                        result\
    \ = true;\n                    }\n                } else if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ {\n                    if (day <= 31 && day >= 1) {\n                      \
    \  result = true;\n                    }\n                } else if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) {\n                    if (day\
    \ <= 30 && day >= 1) {\n                        result = true;\n             \
    \       }\n                }\n            }\n        }\n    }\n    return result;\n\
    }", "    return date.match(/^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[0-9]{4}$/)\
    \ !== null;\n}\n", "    // your code here\n    const [month, day, year] = date.split('-');\n\
    \    if (Number(day) > 31 || Number(day) < 1) {\n        return false;\n    }\n\
    \    if (Number(month) > 12 || Number(month) < 1) {\n        return false;\n \
    \   }\n    if (date.length !== 10) {\n        return false;\n    }\n    if (!/^[0-9]{4}$/.test(year))\
    \ {\n        return false;\n    }\n    if (!/^[0-9]{2}$/.test(month)) {\n    \
    \    return false;\n    }\n    if (!/^[0-9]{2}$/.test(day)) {\n        return\
    \ false;\n    }\n    if (!/^\\d{2}-\\d{2}-\\d{4}$/.test(date)) {\n        return\
    \ false;\n    }\n    if (date[2] !== '-' || date[5] !== '-') {\n        return\
    \ false;\n    }\n    return true;\n}", "    let myDate = new Date(date);\n   \
    \ let validDate = new Date(date);\n    validDate.setMonth(validDate.getMonth()\
    \ + 1);\n    validDate.setDate(0);\n    if (myDate.getDate() === validDate.getDate())\
    \ {\n        return true;\n    }\n    return false;\n}\nconsole.log(valid_date('06-04-2020'));\n\
    console.log(valid_date('06-04-2019'));\n", "  const [month, day, year] = date.split(\"\
    -\").map(Number);\n  let result = true;\n  if (year && month && day) {\n    if\
    \ (month <= 12 && month >= 1) {\n      if (month <= 7 && month % 2 == 1) {\n \
    \       if (day >= 1 && day <= 31) {\n          result = true;\n        } else\
    \ {\n          result = false;\n        }\n      } else if (month >= 8 && month\
    \ % 2 == 0) {\n        if (day >= 1 && day <= 31) {\n          result = true;\n\
    \        } else {\n          result = false;\n        }\n      } else if (month\
    \ <= 7 && month % 2 == 0) {\n        if (day >= 1 && day <= 30) {\n          result\
    \ = true;\n        } else {\n          result = false;\n        }\n      } else\
    \ if (month >= 8 && month % 2 == 1) {\n        if (day >= 1 && day <= 30) {\n\
    \          result = true;\n        } else {\n          result = false;\n     \
    \   }\n      } else if (month == 2) {\n        if (day >= 1 && day <= 29) {\n\
    \          result = true;\n        } else {\n          result = false;\n     \
    \   }\n      }\n    } else {\n      result = false;\n    }\n  } else {\n    result\
    \ = false;\n  }\n  return result;\n}\n", "    // Your code here\n    var re =\
    \ /^(0?[1-9]|1[012])[-\\/.](0?[1-9]|[12][0-9]|3[01])[-\\/.](19|20)\\d\\d$/;\n\
    \    if (re.test(date)) {\n        return true;\n    }\n    return false;\n}\n\
    console.log(valid_date('03-11-2000'))\nconsole.log(valid_date('15-01-2012'))\n\
    console.log(valid_date('04-0-2040'))\nconsole.log(valid_date('06-04-2020'))\n\
    console.log(valid_date('06/04/2020'))", "    // Intensionally left blank\n   \
    \ return false;\n}\n\ndescribe('valid_date', () => {\n    it('should return true\
    \ for valid dates', () => {\n        expect(valid_date('03-11-2000')).to.equal(true);\n\
    \        expect(valid_date('06-04-2020')).to.equal(true);\n    });\n    it('should\
    \ return false for invalid dates', () => {\n        expect(valid_date('15-01-2012')).to.equal(false);\n\
    \        expect(valid_date('04-0-2040')).to.equal(false);\n        expect(valid_date('06/04/2020')).to.equal(false);\n\
    \    });\n});", "    const months = {\n        '01': { min: 1, max: 31 },\n  \
    \      '02': { min: 1, max: 29 },\n        '03': { min: 1, max: 31 },\n      \
    \  '04': { min: 1, max: 30 },\n        '05': { min: 1, max: 31 },\n        '06':\
    \ { min: 1, max: 30 },\n        '07': { min: 1, max: 31 },\n        '08': { min:\
    \ 1, max: 31 },\n        '09': { min: 1, max: 30 },\n        '10': { min: 1, max:\
    \ 31 },\n        '11': { min: 1, max: 30 },\n        '12': { min: 1, max: 31 }\n\
    \    }\n    let arr = date.split('-');\n    if (arr.length !== 3) {\n        return\
    \ false;\n    }\n    if (!arr[0] || !arr[1] || !arr[2]) {\n        return false;\n\
    \    }\n    let month = arr[0].padStart(2, '0');\n    let day = arr[1].padStart(2,\
    \ '0');\n    let year = arr[2];\n    if (month in months) {\n        if (Number(day)\
    \ >= months[month].min && Number(day) <= months[month].max) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nconsole.log(valid_date('03-11-2000'));\n\
    console.log(valid_date('15-01-2012'));\nconsole.log(valid_date('04-0-2040'));\n\
    console.log(valid_date('06-04-2020'));\nconsole.log(valid_date('06/04/2020'));",
  "    if (date.length > 0) {\n        let days = +date.slice(0, 2);\n        let\
    \ month = +date.slice(3, 5);\n        let years = +date.slice(6, 10);\n      \
    \  let months = [1, 3, 5, 7, 8, 10, 12];\n        let months_30 = [4, 6, 9, 11];\n\
    \        if (months.includes(month)) {\n            if (days >= 1 && days <= 31)\
    \ {\n                if (month >= 1 && month <= 12) {\n                    if\
    \ (date.length === 10) {\n                        return true;\n             \
    \       }\n                }\n            }\n        }\n        else if (months_30.includes(month))\
    \ {\n            if (days >= 1 && days <= 30) {\n                if (month >=\
    \ 1 && month <= 12) {\n                    if (date.length === 10) {\n       \
    \                 return true;\n                    }\n                }\n   \
    \         }\n        }\n        else if (month === 2) {\n            if (days\
    \ >= 1 && days <= 29) {\n                if (month >= 1 && month <= 12) {\n  \
    \                  if (date.length === 10) {\n                        return true;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return false;\n}\nconsole.log(valid_date('06-04-2020'));\n", "  let [month,\
    \ day, year] = date.split('-');\n  month = parseInt(month);\n  day = parseInt(day);\n\
    \  year = parseInt(year);\n  if (date.includes('/')) return false;\n  if (!month\
    \ || !day || !year) return false;\n  if (month < 1 || month > 12) return false;\n\
    \  if (day < 1 || day > 31) return false;\n  if ((month == 4 || month == 6 ||\
    \ month == 9 || month == 11) && day > 30) return false;\n  if (month == 2 && day\
    \ > 29) return false;\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
