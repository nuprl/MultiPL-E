language: ts
name: HumanEval_2_truncate_number
results:
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number % 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n\
    \  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number - Math.floor(number);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    var decimal = number % 1;\n    return decimal;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number - Math.floor(number);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number - Math.floor(number);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number - Math.floor(number);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number % 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n\
    \  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number - Math.floor(number);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 1
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    return 0.0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n0.5\n    at test (/tmp/tmp34szcrea.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp34szcrea.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 0.5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number % 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n\
    \  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return number % 1;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n\
    \  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  // TODO:\n  return 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = truncate_number;\n\
    \  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n0.5\n    at test (/tmp/tmpkgy1ku8_.js:14:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkgy1ku8_.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 0.5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    return parseFloat(number.toString().split('.')[1]) || 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n5\n\nshould loosely\
    \ deep-equal\n\n0.5\n    at test (/tmp/tmpvvwe7d8j.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvvwe7d8j.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 5,\n  expected:\
    \ 0.5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  if (number < 0) {\n    return truncate_number(-number);\n  }\n \
    \ let floored = Math.floor(number);\n  return number - floored;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    return number - Math.floor(number);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    return number - Math.floor(number);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
- exit_code: 1
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n  return 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n0.5\n    at test (/tmp/tmp3712nmqe.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp3712nmqe.js:17:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ 0.5,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    return number - parseInt(number.toString());\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    if (typeof number === 'number') {\n        const decimal = number\
    \ - Math.floor(number);\n        return decimal\n    }\n    return NaN\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n\
    \  assert.deepEqual(candidate(1.25),0.25);\n  assert.deepEqual(candidate(123.0),0.0);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given a positive floating point number, it can be decomposed into\n\
    // and integer part (largest integer smaller than given number) and decimals\n\
    // (leftover part always smaller than 1).\n// Return the decimal part of the number.\n\
    // >>> truncate_number(3.5)\n// 0.5\nfunction truncate_number(number: number):\
    \ number {\n    return number - Math.floor(number);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = truncate_number;\n  assert.deepEqual(candidate(3.5),0.5);\n  assert.deepEqual(candidate(1.25),0.25);\n\
    \  assert.deepEqual(candidate(123.0),0.0);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822275
