name: HumanEval_55_fib
language: ts
prompt: "//Return n-th Fibonacci number.\n// >>> fib(10)\n// 55\n// >>> fib(1)\n//\
  \ 1\n// >>> fib(8)\n// 21\nfunction fib(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fib;\n  assert.deepEqual(candidate(10),55);\n  assert.deepEqual(candidate(1),1);\n\
  \  assert.deepEqual(candidate(8),21);\n  assert.deepEqual(candidate(11),89);\n \
  \ assert.deepEqual(candidate(12),144);\n}\n\ntest();"
completions: ["    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n\
    \        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "    let\
    \ a = 0, b = 1, c = 1;\n    for (let i = 2; i <= n; i++) {\n        c = a + b;\n\
    \        a = b;\n        b = c;\n    }\n    return c;\n}\n", "  if (n < 2) {\n\
    \    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "    if (n <= 2)\
    \ {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "  if\
    \ (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "    let fib_1 = 0;\n    let fib_2 = 1;\n  \
    \  let fib;\n    for (let i = 2; i <= n; i++) {\n        fib = fib_1 + fib_2;\n\
    \        fib_1 = fib_2;\n        fib_2 = fib;\n    }\n    return fib;\n}\n", " \
    \ if (n <= 1) {\n    return n;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n\
    \  }\n}", "    if (n <= 2) {\n        return 1;\n    } else {\n        return\
    \ fib(n - 1) + fib(n - 2);\n    }\n}\n\ntest(\"fib\", () => {\n    expect(fib(10)).toBe(55);\n\
    \    expect(fib(1)).toBe(1);\n    expect(fib(8)).toBe(21);\n});\n", "    // TODO\n\
    \    return n;\n}\n", "    if (n < 1) {\n        return 0;\n    }\n    if (n ===\
    \ 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", " \
    \ if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 1;\n  } else\
    \ {\n    return fib(n - 1) + fib(n - 2);\n  }\n}\n", "    if (n <= 2) {\n    \
    \    return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\ntest('test function\
    \ fib', () => {\n    expect(fib(10)).toBe(55);\n    expect(fib(1)).toBe(1);\n\
    \    expect(fib(8)).toBe(21);\n});\n", "    let result: number[] = [];\n    let\
    \ one = 1;\n    let two = 1;\n    let nextNum: number;\n    for (let i = 0; i\
    \ < n; i++) {\n        result.push(one);\n        nextNum = one + two;\n     \
    \   one = two;\n        two = nextNum;\n    }\n    return result[n - 1];\n}\n",
  "    if (n <= 1) {\n        return n;\n    } else {\n        return fib(n - 1) +\
    \ fib(n - 2);\n    }\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n ===\
    \ 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n}\n", "  if (n\
    \ === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  return\
    \ fib(n - 1) + fib(n - 2);\n}\n", "  if (n <= 1) {\n    return n;\n  } else {\n\
    \    return fib(n - 1) + fib(n - 2);\n  }\n}\n\nexport { max, min, average, fib\
    \ };", "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n   \
    \     return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n}\n", "    return\
    \ n <= 2 ? 1 : fib(n - 1) + fib(n - 2);\n}", "    if (n == 0) return 0;\n    else\
    \ if (n == 1) return 1;\n    else return fib(n - 1) + fib(n - 2);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
