name: HumanEval_61_correct_bracketing
language: ts
prompt: "//brackets is a string of \"(\" and \")\".\n// return True if every opening\
  \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"(\"\
  )\n// False\n// >>> correct_bracketing(\"()\")\n// True\n// >>> correct_bracketing(\"\
  (()())\")\n// True\n// >>> correct_bracketing(\")(()\")\n// False\nfunction correct_bracketing(brackets:\
  \ string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
  ()\"),true);\n  assert.deepEqual(candidate(\"(()())\"),true);\n  assert.deepEqual(candidate(\"\
  ()()(()())()\"),true);\n  assert.deepEqual(candidate(\"()()((()()())())(()()(()))\"\
  ),true);\n  assert.deepEqual(candidate(\"((()())))\"),false);\n  assert.deepEqual(candidate(\"\
  )(()\"),false);\n  assert.deepEqual(candidate(\"(\"),false);\n  assert.deepEqual(candidate(\"\
  ((((\"),false);\n  assert.deepEqual(candidate(\")\"),false);\n  assert.deepEqual(candidate(\"\
  (()\"),false);\n  assert.deepEqual(candidate(\"()()(()())())(()\"),false);\n  assert.deepEqual(candidate(\"\
  ()()(()())()))()\"),false);\n}\n\ntest();"
completions: ["    var count: number = 0;\n    for (var i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == '(') {\n            count += 1;\n       \
    \ } else if (brackets[i] == ')') {\n            count -= 1;\n        }\n     \
    \   if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count == 0;\n}\n", "    let counter = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === '(') {\n            counter++;\n       \
    \ } else if (brackets[i] === ')') {\n            counter--;\n        }\n     \
    \   if (counter < 0) {\n            return false;\n        }\n    }\n    return\
    \ counter === 0;\n}\n", "  var i: number;\n  var n: number;\n  var stack: string[];\n\
    \  n = brackets.length;\n  stack = [];\n  for (i = 0; i < n; i++) {\n    if (brackets[i]\
    \ === \"(\") {\n      stack.push(\"(\");\n    } else {\n      if (stack.length\
    \ === 0) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n \
    \ return stack.length === 0;\n}\n", "    let result: boolean = true;\n    let\
    \ brackets_counter: number = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === '(') {\n            brackets_counter += 1;\n\
    \        } else if (brackets[i] === ')') {\n            brackets_counter -= 1;\n\
    \        }\n        if (brackets_counter < 0) {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result && brackets_counter ===\
    \ 0;\n}\n\n", "    let count = 0;\n    for (let bracket of brackets) {\n     \
    \   if (bracket === '(') {\n            count++;\n        } else if (bracket ===\
    \ ')') {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count === 0;\n}\n", "    // function\
    \ that checks if characters in string is valid\n    function is_valid(input: string):\
    \ boolean {\n        // if length of input is 0, return true\n        if (input.length\
    \ === 0) {\n            return true;\n        }\n        // if first and last\
    \ character is the same, check if middle is valid\n        if (input[0] === input[input.length\
    \ - 1]) {\n            return is_valid(input.slice(1, input.length - 1));\n  \
    \      }\n        // if first and last character is not the same, return false\n\
    \        return false;\n    }\n    // if length of brackets is even, divide it\
    \ into 2 halfs\n    if (brackets.length % 2 === 0) {\n        return is_valid(brackets.slice(0,\
    \ brackets.length / 2)) && is_valid(brackets.slice(brackets.length / 2));\n  \
    \  }\n    // if length of brackets is odd, return false\n    return false;\n}\n\
    \nconsole.log(correct_bracketing(\"(\"));\nconsole.log(correct_bracketing(\"()\"\
    ));\nconsole.log(correct_bracketing(\"(()())\"));\nconsole.log(correct_bracketing(\"\
    )(()\"));\n\nexport { }", "  let open = 0;\n  for (let i = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] === \"(\") {\n      open++;\n    } else if (brackets[i]\
    \ === \")\") {\n      open--;\n    } else {\n      throw new Error(\"invalid brackets\"\
    );\n    }\n    if (open < 0) {\n      return false;\n    }\n  }\n  return open\
    \ === 0;\n}\n", "  var testOpen: string = \"(\";\n  var testClose: string = \"\
    )\";\n  var counter: number = 0;\n  for (var i: number = 0; i < brackets.length;\
    \ i++) {\n    if (brackets[i] == testOpen) {\n      counter++;\n    } else if\
    \ (brackets[i] == testClose) {\n      counter--;\n    }\n    if (counter < 0)\
    \ {\n      return false;\n    }\n  }\n  if (counter != 0) {\n    return false;\n\
    \  }\n  return true;\n}\n", "    let count = 0;\n    for (let bracket of brackets)\
    \ {\n        if (bracket === '(') {\n            count += 1;\n        } else if\
    \ (bracket === ')') {\n            count -= 1;\n        }\n        if (count <\
    \ 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n", "    if (brackets[0] === ')') {\n        return false;\n    }\n    let brackets_array\
    \ = brackets.split('');\n    let left_brackets = brackets_array.filter(b => b\
    \ === '(');\n    let right_brackets = brackets_array.filter(b => b === ')');\n\
    \    return left_brackets.length === right_brackets.length;\n}\n", "    let counter\
    \ = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ === '(') {\n            counter++;\n        } else if (brackets[i] === ')')\
    \ {\n            counter--;\n        } else {\n            return false;\n   \
    \     }\n        if (counter < 0) {\n            return false;\n        }\n  \
    \  }\n    return counter === 0;\n}\n", "  // YOUR CODE HERE\n  return undefined;\n\
    }\n", "    let left_counter = 0;\n    let right_counter = 0;\n    for (let i =\
    \ 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n     \
    \       left_counter++;\n        } else if (brackets[i] === \")\") {\n       \
    \     right_counter++;\n        }\n    }\n    return left_counter === right_counter;\n\
    }\nconsole.log(correct_bracketing(\"(\"));\nconsole.log(correct_bracketing(\"\
    ()\"));\nconsole.log(correct_bracketing(\"(()())\"));\nconsole.log(correct_bracketing(\"\
    )(()\"));\n", "    let bracket_stack: string[] = [];\n    for (let i: number =\
    \ 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\") {\n     \
    \       bracket_stack.push(brackets[i]);\n        } else if (brackets[i] === \"\
    )\") {\n            if (bracket_stack.length === 0) {\n                return\
    \ false;\n            } else {\n                bracket_stack.pop();\n       \
    \     }\n        }\n    }\n    return bracket_stack.length === 0;\n}\n", "   \
    \ let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if\
    \ (brackets[i] === \"(\") {\n            count++;\n        } else if (brackets[i]\
    \ === \")\") {\n            count--;\n        }\n        if (count < 0) {\n  \
    \          return false;\n        }\n    }\n    return count === 0;\n}\n", " \
    \ return brackets.split(\"\").filter(char => char === \"(\").length === brackets.split(\"\
    \").filter(char => char === \")\").length\n}\n", "    let open = 0;\n    for (let\
    \ c of brackets) {\n        if (c === \"(\") {\n            open += 1;\n     \
    \   } else if (c === \")\") {\n            open -= 1;\n        }\n        if (open\
    \ < 0) {\n            return false;\n        }\n    }\n    return open === 0;\n\
    }\n", "    let opening: number = 0;\n    let closing: number = 0;\n    for (let\
    \ i: number = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\"\
    ) {\n            opening++;\n        } else if (brackets[i] === \")\") {\n   \
    \         closing++;\n        }\n    }\n    return opening === closing;\n}\n",
  "    let stack: string[] = [];\n    for (let i = 0; i < brackets.length; i++) {\n\
    \        if (brackets[i] === \"(\") {\n            stack.push(brackets[i]);\n\
    \        } else if (brackets[i] === \")\") {\n            if (stack.length ===\
    \ 0) {\n                return false;\n            } else {\n                stack.pop();\n\
    \            }\n        }\n    }\n    return stack.length === 0;\n}\n", "    var\
    \ n_open = 0;\n    for (var i = 0; i < brackets.length; i++) {\n        if (brackets[i]\
    \ == \"(\") {\n            n_open += 1;\n        } else if (brackets[i] == \"\
    )\") {\n            n_open -= 1;\n        } else {\n            return false;\n\
    \        }\n        if (n_open < 0) {\n            return false;\n        }\n\
    \    }\n    return n_open == 0;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
