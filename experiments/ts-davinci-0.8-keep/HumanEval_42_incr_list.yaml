name: HumanEval_42_incr_list
language: ts
prompt: "//Return list with elements incremented by 1.\n// >>> incr_list([1, 2, 3])\n\
  // [2, 3, 4]\n// >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n// [6, 4, 6, 3, 4,\
  \ 4, 10, 1, 124]\nfunction incr_list(l: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = incr_list;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([3, 2, 1]),[4, 3, 2]);\n  assert.deepEqual(candidate([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124]);\n}\n\ntest();"
completions: ["    return l.map(num => num + 1);\n}\n", "    let result: number[]\
    \ = [];\n    for (let i = 0; i < l.length; i++) {\n        result.push(l[i] +\
    \ 1);\n    }\n    return result;\n}\n", "    return l.map(v => v + 1);\n}\n",
  "    const result: number[] = [];\n    for (let i = 0; i < l.length; i++) {\n  \
    \      result.push(l[i] + 1);\n    }\n    return result;\n}", "    return l.map(x\
    \ => x + 1);\n}\n", "    let incr_l: number[] = [];\n    for (let i = 0; i < l.length;\
    \ i++) {\n        incr_l.push(l[i] + 1);\n    }\n    return incr_l;\n}\n", " \
    \   var l2: number[] = [];\n    for (var i = 0; i < l.length; i++) {\n       \
    \ l2.push(l[i] + 1);\n    }\n    return l2;\n}\nconsole.log(incr_list([1, 2, 3]));\n\
    console.log(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n", "    return l.map(v\
    \ => v + 1);\n}\n", "  return l.map(i => i + 1);\n}\n", "  return l.map(function(x:\
    \ number) {\n    return x + 1;\n  });\n}\n", "  let list: number[] = [];\n  for\
    \ (let i = 0; i < l.length; i++) {\n    list.push(l[i] + 1);\n  }\n  return list;\n\
    }\n", "    var incr_l = l.map(function (item) {\n        return item + 1;\n  \
    \  });\n    return incr_l;\n}\n", "    let res: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        res.push(l[i] + 1);\n    }\n    return res;\n\
    }\n", "    let k: number[] = [];\n    for (let i: number = 0; i < l.length; i++)\
    \ {\n        k.push(l[i] + 1);\n    }\n    return k;\n}\nconsole.log(incr_list([1,\
    \ 2, 3]));\nconsole.log(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n", "  let\
    \ i: number = 0;\n  let ret: number[] = [];\n  while (i < l.length) {\n    ret.push(l[i]\
    \ + 1);\n    i = i + 1;\n  }\n  return ret;\n}\n", "    return l.map(v => v +\
    \ 1);\n}\n", "    return l.map(e => e + 1);\n}\n", "  let newList: number[] =\
    \ l.map(function(num) {\n    return num + 1;\n  });\n  return newList;\n}\n",
  "    return l.map(v => v + 1);\n}\n", "    return l.map( (a: number) => a + 1);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
