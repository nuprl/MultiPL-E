name: HumanEval_68_pluck
language: ts
prompt: "//\"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n// your task is to pluck one of the nodes and return it.\n// The\
  \ plucked node should be the node with the smallest even value.\n// If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n// The plucked node should be returned in a list, [ smalest_value, its\
  \ index ],\n// If there are no even values or the given array is empty, return [].\n\
  // Example 1:\n// Input: [4,2,3]\n// Output: [2, 1]\n// Explanation: 2 has the smallest\
  \ even value, and 2 has the smallest index.\n// Example 2:\n// Input: [1,2,3]\n\
  // Output: [2, 1]\n// Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index. \n// Example 3:\n// Input: []\n// Output: []\n// Example 4:\n\
  // Input: [5, 0, 3, 0, 4, 2]\n// Output: [0, 1]\n// Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n// so we will choose the first zero, which has\
  \ the smallest index.\n// Constraints:\n// * 1 <= nodes.length <= 10000\n// * 0\
  \ <= node.value\nfunction pluck(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = pluck;\n  assert.deepEqual(candidate([4, 2, 3]),[2,\
  \ 1]);\n  assert.deepEqual(candidate([1, 2, 3]),[2, 1]);\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5, 0, 3, 0, 4, 2]),[0, 1]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 0, 5, 3]),[0, 3]);\n  assert.deepEqual(candidate([5, 4, 8, 4, 8]),[4, 1]);\n\
  \  assert.deepEqual(candidate([7, 6, 7, 1]),[6, 1]);\n  assert.deepEqual(candidate([7,\
  \ 9, 7, 1]),[]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    let i: number = 0;\n    let minEven:\
    \ number = Number.MAX_SAFE_INTEGER;\n    for (let x of arr) {\n        if (x %\
    \ 2 === 0 && x < minEven) {\n            minEven = x;\n            result[0] =\
    \ x;\n            result[1] = i;\n        }\n        i++;\n    }\n    return result;\n\
    }", "    const result: number[] = [];\n    let even_nums: number[] = [];\n   \
    \ for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n  \
    \          even_nums.push(arr[i]);\n        }\n    }\n    if (even_nums.length\
    \ === 0) {\n        return result;\n    }\n    else {\n        let min_even_num:\
    \ number = even_nums[0];\n        let min_idx: number = arr.indexOf(min_even_num);\n\
    \        for (let j = 1; j < even_nums.length; j++) {\n            if (even_nums[j]\
    \ < min_even_num) {\n                min_even_num = even_nums[j];\n          \
    \      min_idx = arr.indexOf(min_even_num);\n            }\n        }\n      \
    \  result.push(min_even_num);\n        result.push(min_idx);\n        return result;\n\
    \    }\n}\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2,\
    \ 10, 0, 12, 2, 4, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6,\
    \ 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3,\
    \ 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6,\
    \ 2, 3, 4, 6, 2, 3, 4, 6, 2, 3, 4, 6, 2, 3,", "    let min = Infinity;\n    let\
    \ res: number[] = [];\n    arr.forEach((num, i) => {\n        if(num % 2 === 0\
    \ && num < min) {\n            min = num;\n            res = [num, i];\n     \
    \   }\n    });\n    return res;\n}\n", "    let result: number[] = [];\n    let\
    \ min: number = Infinity;\n    let minIndex: number = Infinity;\n    for (let\
    \ i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min)\
    \ {\n            min = arr[i];\n            minIndex = i;\n        }\n    }\n\
    \    if (min === Infinity) {\n        return result;\n    }\n    result.push(min);\n\
    \    result.push(minIndex);\n    return result;\n}\n", "    let minEven = Infinity;\n\
    \    let minEvenIdx = Infinity;\n    let evenFound = false;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        const curr = arr[i];\n        if (curr %\
    \ 2 === 0) {\n            evenFound = true;\n            if (curr < minEven) {\n\
    \                minEven = curr;\n                minEvenIdx = i;\n          \
    \  }\n        }\n    }\n    return evenFound ? [minEven, minEvenIdx] : [];\n}\n",
  "    const evens = arr.filter(x => x % 2 === 0);\n    if (evens.length === 0) {\n\
    \        return [];\n    }\n    const min = Math.min(...evens);\n    return [min,\
    \ arr.indexOf(min)];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "    let smallestEven = Infinity;\n    let smallestEvenIndex = Infinity;\n    let\
    \ currentIndex = 0;\n    for (let value of arr) {\n        if (value % 2 === 0\
    \ && value < smallestEven) {\n            smallestEven = value;\n            smallestEvenIndex\
    \ = currentIndex;\n        }\n        currentIndex++;\n    }\n    if (smallestEven\
    \ === Infinity) {\n        return [];\n    }\n    return [smallestEven, smallestEvenIndex];\n\
    }\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\n\
    console.log(pluck([5, 0, 3, 0, 4, 2]));", "    let currSmallestEven: number |\
    \ undefined = undefined;\n    let currSmallestEvenIndex: number | undefined =\
    \ undefined;\n    let index = 0;\n    for (let num of arr) {\n        if (num\
    \ % 2 === 0) {\n            if (currSmallestEven === undefined || num < currSmallestEven)\
    \ {\n                currSmallestEven = num;\n                currSmallestEvenIndex\
    \ = index;\n            }\n        }\n        index++;\n    }\n    if (currSmallestEven\
    \ !== undefined) {\n        return [currSmallestEven, currSmallestEvenIndex];\n\
    \    }\n    return [];\n}\n", "    const evenNumbers = arr.filter(x => x % 2 ===\
    \ 0);\n    return evenNumbers.length === 0 ? [] : [Math.min(...evenNumbers), arr.indexOf(Math.min(...evenNumbers))];\n\
    }\n", "  let minEven = Number.MAX_SAFE_INTEGER;\n  let result = [];\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (arr[i] % 2 === 0 && arr[i] < minEven)\
    \ {\n      minEven = arr[i];\n      result = [minEven, i];\n    }\n  }\n  return\
    \ result;\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\n\
    console.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));", "    // fill\
    \ in code here\n    return [];\n}\n", "    let min = Number.MAX_SAFE_INTEGER,\n\
    \        index = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            index = i;\n        }\n    }\n    return min === Number.MAX_SAFE_INTEGER\
    \ ? [] : [min, index + 1];\n}\n", "  // Good luck!\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let pos = 0;\n  let index = 0;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0 && arr[i] < min) {\n      min = arr[i];\n      pos =\
    \ i;\n    }\n  }\n  if (min === Number.MAX_SAFE_INTEGER) {\n    return [];\n \
    \ }\n  return [min, pos];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1,\
    \ 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));",
  "  if (!arr.length) return [];\n  const map = new Map<number, number>();\n  for\
    \ (let i = 0; i < arr.length; i++) {\n    const el = arr[i];\n    if (el % 2 ===\
    \ 0) {\n      map.set(el, i);\n    }\n  }\n  if (!map.size) return [];\n  let\
    \ min = Number.MAX_SAFE_INTEGER;\n  for (const [k, v] of map) {\n    if (k < min)\
    \ {\n      min = k;\n    }\n  }\n  return [min, map.get(min)];\n}\n\nconsole.log(pluck([4,\
    \ 2, 3])); // [2, 1]\nconsole.log(pluck([1, 2, 3])); // [2, 1]\nconsole.log(pluck([]));\
    \ // []\nconsole.log(pluck([5, 0, 3, 0, 4, 2])); // [0, 1]", "    if (arr.length\
    \ === 0) return [];\n    let smallestValue = Infinity;\n    let index = -1;\n\
    \    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] % 2 === 0 && arr[i]\
    \ < smallestValue) {\n            smallestValue = arr[i];\n            index =\
    \ i;\n        }\n    }\n    if (index === -1) return [];\n    return [smallestValue,\
    \ index];\n}\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\n\
    console.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));", "    let min\
    \ = Number.MAX_SAFE_INTEGER;\n    let res = [];\n    for (let i = 0; i < arr.length;\
    \ i++) {\n        if (arr[i] % 2 === 0 && arr[i] < min) {\n            min = arr[i];\n\
    \            res = [min, i];\n        }\n    }\n    return res;\n}\n", "  // TODO:\
    \ remove return and implement function\n  return [0, 0];\n}\n\nexport { pluck\
    \ };", "    const arr2 = arr.filter(e => e % 2 === 0);\n    return arr2.length\
    \ > 0 ? [arr2[0], arr.indexOf(arr2[0])] : [];\n}\n", "    if (!arr.length) {\n\
    \        return [];\n    }\n    const even = arr.filter(n => n % 2 === 0);\n \
    \   if (!even.length) {\n        return [];\n    }\n    const minEven = Math.min(...even);\n\
    \    return [minEven, arr.indexOf(minEven)];\n}\n\nconsole.log(JSON.stringify(pluck([4,\
    \ 2, 3]))); // [2, 1]\nconsole.log(JSON.stringify(pluck([1, 2, 3]))); // [2, 1]\n\
    console.log(JSON.stringify(pluck([]))); // []\nconsole.log(JSON.stringify(pluck([5,\
    \ 0, 3, 0, 4, 2]))); // [0, 1]", "  // TODO\n  let min = [];\n  let minEven =\
    \ Infinity;\n  let minEvenIndex = 0;\n  for (let i = 0; i < arr.length; i++) {\n\
    \    if (arr[i] % 2 === 0 && arr[i] < minEven) {\n      minEven = arr[i];\n  \
    \    minEvenIndex = i;\n    }\n  }\n  if (minEven === Infinity) {\n    return\
    \ [];\n  }\n  min = [minEven, minEvenIndex];\n  return min;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
