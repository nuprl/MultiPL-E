name: HumanEval_84_solve
language: ts
prompt: "//Given a positive integer N, return the total sum of its digits in binary.\n\
  // Example\n// For N = 1000, the sum of digits will be 1 the output should be \"\
  1\".\n// For N = 150, the sum of digits will be 6 the output should be \"110\".\n\
  // For N = 147, the sum of digits will be 12 the output should be \"1100\".\n//\
  \ Variables:\n// @N integer\n// Constraints: 0 \u2264 N \u2264 10000.\n// Output:\n\
  // a string of binary number\nfunction solve(N: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(1000),\"1\");\n\
  \  assert.deepEqual(candidate(150),\"110\");\n  assert.deepEqual(candidate(147),\"\
  1100\");\n  assert.deepEqual(candidate(333),\"1001\");\n  assert.deepEqual(candidate(963),\"\
  10010\");\n}\n\ntest();"
completions: ["  let result = \"\";\n  if (N === 0) {\n    return 0;\n  }\n  while\
    \ (N > 0) {\n    result = (N % 2) + result;\n    N = Math.floor(N / 2);\n  }\n\
    \  return result;\n}\n", "  let nums: string[] = [];\n  for (let i = N; i > 0;\
    \ i = Math.floor(i / 2)) {\n    nums.push(String(i % 2));\n  }\n  return nums.reverse().join(\"\
    \");\n}\n\nexport function solve2(N: number): string {\n  return N.toString(2);\n\
    }\nconsole.log(solve(147));\nconsole.log(solve2(147));", "  let sum: number =\
    \ 0;\n  let binary: string = \"\";\n  let binaryArr: string[] = [];\n  while (N\
    \ > 0) {\n    let remainder: number = N % 2;\n    binary = remainder + binary;\n\
    \    N = Math.floor(N / 2);\n  }\n  binaryArr = binary.split(\"\");\n  for (let\
    \ i: number = 0; i < binaryArr.length; i++) {\n    sum += parseInt(binaryArr[i]);\n\
    \  }\n  return sum.toString();\n}\n", "  // return N.toString(2).split('').reduce((acc,\
    \ curr) => acc + parseInt(curr), 0).toString()\n  return parseInt(N.toString(2).split('').reduce((acc,\
    \ curr) => acc + curr, 0), 10).toString()\n}\n\nconst result = solve(150)\nconsole.log(result)",
  "  let num = N.toString(2);\n  let total = 0;\n  for (let i = 0; i < num.length;\
    \ i++) {\n    total += parseInt(num[i]);\n  }\n  return total.toString();\n}\n",
  "  let binary: number[] = [];\n  let sum: number = 0;\n  let binarySum: number =\
    \ 0;\n  while (N > 0) {\n    binary.push(N % 2);\n    N = Math.floor(N / 2);\n\
    \  }\n  binary = binary.reverse();\n  for (let i = 0; i < binary.length; i++)\
    \ {\n    sum += binary[i];\n  }\n  binarySum = parseInt(binary.join(\"\"));\n\
    \  return sum == 0 ? \"0\" : sum.toString();\n}\nconsole.log(solve(150));\nconsole.log(solve(1000));\n\
    console.log(solve(147));", "  let binary: string = \"\";\n  while (N > 0) {\n\
    \    binary = `${N % 2}${binary}`;\n    N = Math.floor(N / 2);\n  }\n  return\
    \ binary;\n}\n\nconsole.log(solve(1000));", "    let bin = (N >>> 0).toString(2);\n\
    \    console.log(bin);\n    let sum = 0;\n    for (let i = 0; i < bin.length;\
    \ i++) {\n        sum += parseInt(bin[i]);\n    }\n    console.log(sum);\n   \
    \ return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));", "    // return (N.toString(2).split('').reduce((sum,\
    \ val) => parseInt(sum) + parseInt(val))).toString();\n    return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));", "  const binary = N.toString(2);\n  return Array.from(binary).reduce((acc,\
    \ curr) => Number(acc) + Number(curr), 0)\n    .toString();\n}", "  const binary:\
    \ string = N.toString(2);\n  let sum: number = 0;\n  for (let i = 0; i < binary.length;\
    \ i++) {\n    sum += parseInt(binary[i]);\n  }\n  return sum.toString();\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  return (N >>> 0).toString(2);\n}\n\nexport { solve };", "    return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "  // convert number to string\n  let n = N.toString(2);\n  // convert string to\
    \ array\n  let nArr = n.split(\"\");\n  // get the length of array\n  let nLen\
    \ = nArr.length;\n  // create a empty array for total sum of all elements\n  let\
    \ sumArr = [];\n  // loop through the array and convert strings to number and\
    \ sum them\n  for (let i = 0; i < nLen; i++) {\n    // sum of all element\n  \
    \  sumArr.push(parseInt(nArr[i]));\n  }\n  // return the sum of all element\n\
    \  return sumArr.reduce((a, b) => a + b).toString();\n}\nconsole.log(solve(1000));\n\
    console.log(solve(150));\nconsole.log(solve(147));", "    //happy coding!\n  \
    \  var binary = \"\";\n    var binary1 = \"\";\n    var totalBinary = 0;\n   \
    \ var totalBinary1 = 0;\n    var totalBinary2 = 0;\n    var totalBinary3 = 0;\n\
    \    var totalBinary4 = 0;\n    var totalBinary5 = 0;\n    var totalBinary6 =\
    \ 0;\n    var totalBinary7 = 0;\n    var totalBinary8 = 0;\n    var totalBinary9\
    \ = 0;\n    var sum = 0;\n    var sum1 = 0;\n    var sum2 = 0;\n    var sum3 =\
    \ 0;\n    var sum4 = 0;\n    var sum5 = 0;\n    var sum6 = 0;\n    var sum7 =\
    \ 0;\n    var sum8 = 0;\n    var sum9 = 0;\n    var totalString = \"\";\n    var\
    \ totalString1 = \"\";\n    var totalString2 = \"\";\n    var totalString3 = \"\
    \";\n    var totalString4 = \"\";\n    var totalString5 = \"\";\n    var totalString6\
    \ = \"\";\n    var totalString7 = \"\";\n    var totalString8 = \"\";\n    var\
    \ totalString9 = \"\";\n    var add = 0;\n    var add1 = 0;\n    var add2 = 0;\n\
    \    var add3 = 0;\n    var add4 = 0;\n    var add5 = 0;\n    var add6 = 0;\n\
    \    var add7 = 0;\n    var add8 = 0;\n    var add9 = 0;\n    binary = N.toString(2);\n\
    \    for (var i = 0; i < binary.length; i++) {\n        if (binary[i] == \"1\"\
    ) {\n            totalBinary = 1;\n        }\n        else {\n            totalBinary\
    \ = 0;\n        }\n        totalString = totalString + totalBinary;\n    }\n \
    \   if (totalString.length == 1) {\n        return totalString;\n    }\n    else\
    \ if (totalString.length == 2) {\n        for (var i = 0; i < totalString.length;\
    \ i++) {\n            add = parseInt(totalString", "    return N.toString(2);\n\
    }\n\nconsole.log(solve(1000));", "  let sum: number = 0;\n  let binary: string\
    \ = \"\";\n  while (N) {\n    const mod = N % 2;\n    sum += mod;\n    binary\
    \ = mod + binary;\n    N = Math.floor(N / 2);\n  }\n  return sum + \"\";\n}\n\n\
    console.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));",
  "    let binary: number[] = [];\n    let sum: number = 0;\n    let product: number\
    \ = 1;\n    let remainder: number = N;\n    let counter: number = 0;\n    while\
    \ (remainder > 0) {\n        binary[counter] = remainder % 2;\n        remainder\
    \ = Math.floor(remainder / 2);\n        counter++;\n    }\n    binary.reverse();\n\
    \    binary.forEach(\n        (bit: number) => {\n            if (bit === 1) {\n\
    \                sum += bit * product;\n            }\n            product *=\
    \ 10;\n        }\n    );\n    return sum.toString();\n}\nconsole.log(solve(147));\n\
    console.log(solve(150));\nconsole.log(solve(1000));", "  const binary = N.toString(2);\n\
    \  const total = binary.split(\"\").reduce((a, b) => parseInt(a) + parseInt(b));\n\
    \  return total.toString();\n}\n", "  let sum = 0;\n  const num = N.toString(2);\n\
    \  for (let i = 0; i < num.length; i++) {\n    sum += Number(num[i]);\n  }\n \
    \ return sum.toString();\n}\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\n\
    console.log(solve(147));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
