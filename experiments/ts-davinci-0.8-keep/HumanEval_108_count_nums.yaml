name: HumanEval_108_count_nums
language: ts
prompt: "//Write a function count_nums which takes an array of integers and returns\n\
  // the number of elements which has a sum of digits > 0.\n// If a number is negative,\
  \ then its first signed digit will be negative:\n// e.g. -123 has signed digits\
  \ -1, 2, and 3.\n// >>> count_nums([]) == 0\n// >>> count_nums([-1, 11, -11]) ==\
  \ 1\n// >>> count_nums([1, 1, 2]) == 3\nfunction count_nums(arr: number[]): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_nums;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([-1, -2, 0]),0);\n  assert.deepEqual(candidate([1,\
  \ 1, 2, -2, 3, 4, 5]),6);\n  assert.deepEqual(candidate([1, 6, 9, -6, 0, 1, 5]),5);\n\
  \  assert.deepEqual(candidate([1, 100, 98, -7, 1, -1]),4);\n  assert.deepEqual(candidate([12,\
  \ 23, 34, -45, -56, 0]),5);\n  assert.deepEqual(candidate([0, 1]),1);\n  assert.deepEqual(candidate([1]),1);\n\
  }\n\ntest();"
completions: ["    return -1;\n}\n", "    var count = 0;\n    for (var i = 0; i <\
    \ arr.length; i++) {\n        var element = arr[i];\n        if (element > 0)\
    \ {\n            element = element;\n        } else {\n            element = element\
    \ * -1;\n        }\n        var digit_sum = 0;\n        var remainder = element;\n\
    \        while (remainder > 0) {\n            digit_sum += remainder % 10;\n \
    \           remainder = Math.floor(remainder / 10);\n        }\n        if (digit_sum\
    \ > 0) {\n            count += 1;\n        }\n    }\n    return count;\n}\n",
  "  return 0;\n}\n", "    let count = 0;\n    for (let val of arr) {\n        let\
    \ sum = 0;\n        let sign = Math.sign(val);\n        if (sign === -1) {\n \
    \           val = Math.abs(val);\n            let first_digit = val % 10;\n  \
    \          sum += first_digit;\n            val = Math.floor(val / 10);\n    \
    \    }\n        while (val > 0) {\n            let last_digit = val % 10;\n  \
    \          sum += last_digit;\n            val = Math.floor(val / 10);\n     \
    \   }\n        if (sum > 0) {\n            count++;\n        }\n    }\n    return\
    \ count;\n}\nconsole.log(count_nums([]));\nconsole.log(count_nums([-1, 11, -11]));\n\
    console.log(count_nums([1, 1, 2]));\n", "    let count = 0;\n    for (let i =\
    \ 0; i < arr.length; i++) {\n        let sum = 0;\n        let num = arr[i];\n\
    \        if (num < 0) {\n            num = -num;\n        }\n        while (num\
    \ > 0) {\n            sum += num % 10;\n            num = Math.floor(num / 10);\n\
    \        }\n        if (sum > 0) {\n            count++;\n        }\n    }\n \
    \   return count;\n}\n\n", "  let sum = 0;\n  let count = 0;\n  for (let i = 0;\
    \ i < arr.length; i++) {\n    if (arr[i] < 0) {\n      sum += -arr[i];\n    }\
    \ else {\n      sum += arr[i];\n    }\n    if (sum > 0) {\n      count++;\n  \
    \  }\n  }\n  return count;\n}\n", "  //your code here\n  return 0;\n}\n", "  let\
    \ count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (sum_digits(arr[i])\
    \ > 0) {\n      count += 1;\n    }\n  }\n  return count;\n}\n", "  return arr.filter(num\
    \ =>\n    num.toString().split('').reduce((acc, digit) => acc + parseInt(digit),\
    \ 0) > 0\n  ).length;\n}\n", "  let count = 0;\n  for (let elem of arr) {\n  \
    \  let sum = 0;\n    if (elem < 0) {\n      sum += elem * -1;\n    } else {\n\
    \      sum += elem;\n    }\n    while (sum > 0) {\n      let rem = sum % 10;\n\
    \      sum = (sum - rem) / 10;\n      sum += rem;\n    }\n    if (sum > 0) {\n\
    \      count++;\n    }\n  }\n  return count;\n}", "  let count = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (add_digit(arr[i]) > 0) {\n      count++;\n\
    \    }\n  }\n  return count;\n}\n", "  //return 0;\n  let nums = 0;\n  for (let\
    \ i = 0; i < arr.length; i++) {\n    if (sum_digits(arr[i]) > 0) {\n      nums++;\n\
    \    }\n  }\n  return nums;\n}\n", "  const n = arr.length;\n  let count = 0;\n\
    \  let i = 0;\n  while (i < n) {\n    if (\n      Math.abs(Math.floor(arr[i] /\
    \ 10)) +\n        Math.abs(arr[i] % 10) >\n      0\n    ) {\n      count++;\n\
    \    }\n    i++;\n  }\n  return count;\n}\n", "    var ans: number = 0;\n    for\
    \ (var i in arr) {\n        var sum: number = 0;\n        var x: number = arr[i];\n\
    \        if (x < 0) {\n            x = x * -1;\n        }\n        while (x >\
    \ 0) {\n            sum += x % 10;\n            x = Math.floor(x / 10);\n    \
    \    }\n        if (sum > 0) {\n            ans += 1;\n        }\n    }\n    return\
    \ ans;\n}\n", "    return 0;\n}\n", "  return 0;\n}\n", "    let count = 0;\n\
    \    for (let i of arr) {\n        if (i >= 0) {\n            let digits = i.toString().split('');\n\
    \            let digit_sum = 0;\n            for (let digit of digits) {\n   \
    \             digit_sum += parseInt(digit);\n            }\n            if (digit_sum\
    \ > 0) {\n                count++;\n            }\n        } else {\n        \
    \    let digits = i.toString().split('');\n            let digit_sum = 0;\n  \
    \          for (let digit of digits) {\n                if (digit == '-') {\n\
    \                    continue;\n                }\n                digit_sum +=\
    \ parseInt(digit);\n            }\n            if (digit_sum > 0) {\n        \
    \        count++;\n            }\n        }\n    }\n    return count;\n}\n", " \
    \   let num: number = 0;\n    for (let i: number = 0; i < arr.length; i++) {\n\
    \        if (sum_digits(arr[i]) > 0) {\n            num++;\n        }\n    }\n\
    \    return num;\n}\n", "    if (arr.length === 0) return 0;\n    else if (arr.length\
    \ === 1) return isSumDigitsPositive(arr[0]) ? 1 : 0;\n    else return count_nums([arr[0]])\
    \ + count_nums(arr.slice(1, arr.length));\n}\n", "    let count = 0;\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        let curr = Math.abs(arr[i]);\n \
    \       let currCount = 0;\n        while (curr > 0) {\n            currCount\
    \ += curr % 10;\n            curr = Math.floor(curr / 10);\n        }\n      \
    \  if (currCount > 0) {\n            count++;\n        }\n    }\n    return count;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
