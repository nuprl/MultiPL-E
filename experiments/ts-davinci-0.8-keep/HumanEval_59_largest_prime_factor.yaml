name: HumanEval_59_largest_prime_factor
language: ts
prompt: "//Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  // >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n//\
  \ 2\nfunction largest_prime_factor(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = largest_prime_factor;\n  assert.deepEqual(candidate(15),5);\n\
  \  assert.deepEqual(candidate(27),3);\n  assert.deepEqual(candidate(63),7);\n  assert.deepEqual(candidate(330),11);\n\
  \  assert.deepEqual(candidate(13195),29);\n}\n\ntest();"
completions: ["    let num = n;\n    let factor = 2;\n    while (factor < num) {\n\
    \        if (num % factor === 0) {\n            num = num / factor;\n        }\
    \ else {\n            factor += 1;\n        }\n    }\n    return factor;\n}",
  "    let start = 2;\n    while (n > 1) {\n        if (n % start === 0) {\n     \
    \       n = n / start;\n        } else {\n            start++;\n        }\n  \
    \  }\n    return start;\n}\n", "    let factor: number = 2;\n    let largest:\
    \ number = 0;\n    while (n > 1) {\n        if (n % factor == 0) {\n         \
    \   largest = factor;\n            n /= factor;\n        } else {\n          \
    \  factor++;\n        }\n    }\n    return largest;\n}\n", "    let i = 2;\n \
    \   let factors = []\n    while (i < n / 2) {\n        if (n % i == 0) {\n   \
    \         factors.push(i);\n        }\n        i++\n    }\n    console.log(factors);\n\
    \    return factors.pop();\n}\n\nlargest_prime_factor(2048);", "    let prime\
    \ = 2;\n    let factor = 1;\n    while (n != 1) {\n        if (n % prime == 0)\
    \ {\n            factor = prime;\n            n /= prime;\n        } else {\n\
    \            prime += 1;\n        }\n    }\n    return factor;\n}\n\nconsole.log(largest_prime_factor(600851475143));",
  "    let result = 1;\n    // Loop should start at 2, if it starts at 3 the test\
    \ case 2048 will fail.\n    for (let i = 2; i < n; i++) {\n        if (n % i ===\
    \ 0) {\n            // If n is divisible by i, then n is not a prime number.\n\
    \            result = i;\n            break;\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(largest_prime_factor(2048));\nconsole.log(largest_prime_factor(13195));",
  "    let next = 2;\n    let largest = 1;\n    while (n > 1) {\n        while (n\
    \ % next === 0) {\n            largest = next;\n            n = n / next;\n  \
    \      }\n        next++;\n    }\n    return largest;\n}\n", "    for (let i =\
    \ Math.floor(Math.sqrt(n)); i > 1; i--) {\n        if (n % i === 0 && is_prime(i))\
    \ {\n            return i;\n        }\n    }\n    return 0;\n}", "    let f =\
    \ 2;\n    while (n > 1) {\n        if (n % f == 0) {\n            n /= f;\n  \
    \      } else {\n            f += 1;\n        }\n    }\n    return f;\n}\n", " \
    \   if (n < 2) {\n        return 1;\n    }\n    let factors = factor(n);\n   \
    \ let max = 1;\n    for (let i = 0; i < factors.length; i++) {\n        if (factors[i]\
    \ > max) {\n            max = factors[i];\n        }\n    }\n    return max;\n\
    }\n", "    let i = n - 1;\n    while (i > 1) {\n        if (n % i === 0 && is_prime(i))\
    \ {\n            return i;\n        }\n        i -= 1;\n    }\n    return 1;\n\
    }\n", "  // WRITE YOUR CODE HERE\n  return 0;\n}\n", "    return 0;\n}\n", " \
    \   var i: number;\n    var arr: number[] = [];\n    var prime_arr: number[] =\
    \ [];\n    if (n % 2 == 0) {\n        arr.push(2);\n    }\n    for (i = 3; i <=\
    \ n; i += 2) {\n        if (n % i == 0) {\n            arr.push(i);\n        }\n\
    \    }\n    for (i = 0; i < arr.length; i++) {\n        for (var j = 3; j <= arr[i];\
    \ j += 2) {\n            if (arr[i] % j == 0) {\n                break;\n    \
    \        }\n            if (j >= arr[i] - 1) {\n                prime_arr.push(arr[i]);\n\
    \            }\n        }\n    }\n    return prime_arr[prime_arr.length - 1];\n\
    }\n", "    let factor = 2;\n    while (n > 1) {\n        if (n % factor === 0)\
    \ {\n            n /= factor;\n        } else {\n            factor++;\n     \
    \   }\n    }\n    return factor;\n}\n", "    // TODO\n    return 0;\n}\n", " \
    \   let prime_factors: number[] = [];\n    let candidate: number = 2;\n    while\
    \ (n > 1) {\n        while (n % candidate === 0) {\n            prime_factors.push(candidate);\n\
    \            n /= candidate;\n        }\n        candidate++;\n    }\n    return\
    \ prime_factors[prime_factors.length - 1];\n}\n", "    let factors = prime_factors(n);\n\
    \    return factors[factors.length - 1];\n}\n", "    var i = 1, largest = 0;\n\
    \    while (i < n / 2) {\n        if (n % i === 0) {\n            var divisor\
    \ = n / i;\n            if (is_prime(divisor)) {\n                largest = divisor;\n\
    \                break;\n            }\n        }\n        i++;\n    }\n    return\
    \ largest;\n}\n", "  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n\
    \      n /= i;\n    } else {\n      i++;\n    }\n  }\n  return i;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
