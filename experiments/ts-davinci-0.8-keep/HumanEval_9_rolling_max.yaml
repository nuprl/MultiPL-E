name: HumanEval_9_rolling_max
language: ts
prompt: "//From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n// in the sequence.\n// >>> rolling_max([1, 2, 3, 2,\
  \ 3, 4, 2])\n// [1, 2, 3, 3, 3, 4, 4]\nfunction rolling_max(numbers: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rolling_max;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([4,\
  \ 3, 2, 1]),[4, 4, 4, 4]);\n  assert.deepEqual(candidate([3, 2, 3, 100, 3]),[3,\
  \ 3, 3, 100, 100]);\n}\n\ntest();"
completions: ["  const result: number[] = [];\n  let max = 0;\n  for (let i = 0; i\
    \ < numbers.length; i++) {\n    max = Math.max(max, numbers[i]);\n    result.push(max);\n\
    \  }\n  return result;\n}\n", "  const result: number[] = [];\n  let currentMax\
    \ = -Infinity;\n  for (const n of numbers) {\n    if (n > currentMax) {\n    \
    \  currentMax = n;\n    }\n    result.push(currentMax);\n  }\n  return result;\n\
    }\n", "    let max_stack: number[] = [];\n    let max_stack_index: number[] =\
    \ [];\n    let result: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (max_stack.length === 0) {\n            max_stack.push(numbers[i]);\n\
    \            max_stack_index.push(i);\n        } else {\n            let l = max_stack.length;\n\
    \            let last: number = max_stack[l - 1];\n            if (numbers[i]\
    \ > last) {\n                max_stack.push(numbers[i]);\n                max_stack_index.push(i);\n\
    \            } else {\n                max_stack.push(last);\n               \
    \ max_stack_index.push(max_stack_index[l - 1]);\n            }\n        }\n  \
    \  }\n    for (let i = 0; i < numbers.length; i++) {\n        result.push(max_stack[i]);\n\
    \    }\n    return result;\n}\n", "    if (!numbers.length) return [];\n    let\
    \ res: number[] = [numbers[0]];\n    for (let i = 1; i < numbers.length; i++)\
    \ {\n        res.push(Math.max(res[i - 1], numbers[i]));\n    }\n    return res;\n\
    }\n", "    const result: number[] = [];\n    let max = -1;\n    for (let i = 0;\
    \ i < numbers.length; i++) {\n        max = Math.max(max, numbers[i]);\n     \
    \   result.push(max);\n    }\n    return result;\n}\n", "    let max = numbers[0];\n\
    \    let res = [max];\n    for (let i = 1; i < numbers.length; i++) {\n      \
    \  let num = numbers[i];\n        if (num > max) {\n            max = num;\n \
    \       }\n        res.push(max);\n    }\n    return res;\n}\n", "  let result:\
    \ number[] = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let max: number\
    \ = numbers[i];\n    for (let j = 0; j <= i; j++) {\n      if (numbers[j] > max)\
    \ {\n        max = numbers[j];\n      }\n    }\n    result.push(max);\n  }\n \
    \ return result;\n}\n", "    const result: number[] = [];\n    let roll_max =\
    \ numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i]\
    \ > roll_max) {\n            roll_max = numbers[i];\n        }\n        result.push(roll_max);\n\
    \    }\n    return result;\n}\n", "  if (!numbers.length) {\n    return [];\n\
    \  }\n  let result: number[] = [numbers[0]];\n  for (let i = 1; i < numbers.length;\
    \ i++) {\n    result.push(Math.max(result[i - 1], numbers[i]));\n  }\n  return\
    \ result;\n}\n", "    let result: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let maxSoFar = Math.max(...numbers.slice(0, i + 1));\n     \
    \   result.push(maxSoFar);\n    }\n    return result;\n}\n\nexport { rolling_max\
    \ };", "    let result: number[] = [];\n    let max_val: number = -Infinity;\n\
    \    for (let val of numbers) {\n        if (val > max_val) {\n            max_val\
    \ = val;\n        }\n        result.push(max_val);\n    }\n    return result;\n\
    }\n", "  return numbers.map((_, i) => Math.max(...numbers.slice(0, i + 1)));\n\
    }\n", "  const rollingMax: number[] = [];\n  const loop_array = [...numbers];\n\
    \n  let max: number;\n  loop_array.forEach((number, i) => {\n    if (i === 0)\
    \ {\n      max = number;\n    } else {\n      max = Math.max(max, number);\n \
    \   }\n    rollingMax.push(max);\n  });\n\n  return rollingMax;\n}\n", "    let\
    \ maxes: number[] = [];\n    let max = numbers[0];\n    maxes.push(max);\n   \
    \ for (let i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n\
    \            max = numbers[i];\n        }\n        maxes.push(max);\n    }\n \
    \   return maxes;\n}\n", "    if (numbers.length === 0) {\n        return [];\n\
    \    }\n    let result: number[] = [numbers[0]];\n    for (let i = 1; i < numbers.length;\
    \ i++) {\n        if (numbers[i] > result[i - 1]) {\n            result.push(numbers[i]);\n\
    \        } else {\n            result.push(result[i - 1]);\n        }\n    }\n\
    \    return result;\n}\n", "    const result: number[] = [];\n    let max = 0;\n\
    \    for (let number of numbers) {\n        max = Math.max(max, number);\n   \
    \     result.push(max);\n    }\n    return result;\n}\n", "  let maxArray: number[]\
    \ = [];\n  let max: number = 0;\n  for (let i = 0; i < numbers.length; i++) {\n\
    \    max = Math.max(max, numbers[i]);\n    maxArray.push(max);\n  }\n  return\
    \ maxArray;\n}\n", "  return new RollingMax(numbers).roll();\n}\n", "    let result:\
    \ number[] = [];\n    let max = numbers[0];\n    result.push(max);\n    for (let\
    \ i = 1; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n       \
    \     max = numbers[i];\n        }\n        result.push(max);\n    }\n    return\
    \ result;\n}\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n", "    return\
    \ numbers.map((number, i) => Math.max(...numbers.slice(0, i + 1)));\n}\n\nconsole.log(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
