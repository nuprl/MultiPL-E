name: HumanEval_16_count_distinct_characters
language: ts
prompt: "//Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n// >>> count_distinct_characters('xyzXYZ')\n// 3\n// >>> count_distinct_characters('Jerry')\n\
  // 4\nfunction count_distinct_characters(string: string): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = count_distinct_characters;\n  assert.deepEqual(candidate(\"\
  \"),0);\n  assert.deepEqual(candidate(\"abcde\"),5);\n  assert.deepEqual(candidate(\"\
  abcdecadeCADE\"),5);\n  assert.deepEqual(candidate(\"aaaaAAAAaaaa\"),1);\n  assert.deepEqual(candidate(\"\
  Jerry jERRY JeRRRY\"),5);\n}\n\ntest();"
completions: ["    const distinctCharacters = new Set();\n    for (const character\
    \ of string) {\n        distinctCharacters.add(character.toLowerCase());\n   \
    \ }\n    return distinctCharacters.size;\n}\n", "  return new Set(string.toLowerCase()).size;\n\
    }\n", "    const lowercase = string.toLowerCase();\n    return (lowercase.split('').filter((el,\
    \ index, arr) => arr.indexOf(el) === index)).length;\n}", "    // TODO\n    let\
    \ chars = {};\n    let count = 0;\n    for (let i = 0; i < string.length; i++)\
    \ {\n        if (!chars[string[i]]) {\n            chars[string[i]] = 1;\n   \
    \         count++;\n        }\n    }\n    return count;\n}\n", "    return Array.from(new\
    \ Set(string.toLowerCase())).length;\n}\nconsole.log(count_distinct_characters('xyzXYZ'));\n\
    console.log(count_distinct_characters('Jerry'));\n", "    return new Set(string.toLowerCase()).size;\n\
    }\n", "  let obj = {};\n  for (let char of string) {\n    char = char.toLowerCase();\n\
    \    if (!obj[char]) {\n      obj[char] = 1;\n    }\n  }\n  return Object.keys(obj).length;\n\
    }\n", "    return new Set(string.toLowerCase()).size;\n}\n", "  // Placeholder\
    \ so code compiles\n  return 0;\n}\n", "    let charArray: string[] = Array.from(string.toLowerCase());\n\
    \    let setCharArray: Set<string> = new Set(charArray);\n    return setCharArray.size;\n\
    }\n\nconsole.log(count_distinct_characters('xyzXYZ'));\nconsole.log(count_distinct_characters('Jerry'));\n",
  "  return new Set(string.toLowerCase()).size;\n}\n", "  // for (i in string) {\n\
    \  //   console.log(string[i]);\n  // }\n  const arr = string.split(\"\");\n \
    \ const output = arr.reduce((acc, curr) => {\n    if (!acc.includes(curr)) {\n\
    \      acc.push(curr);\n    }\n    return acc;\n  }, []);\n  return output.length;\n\
    }\n", "    const string_array = string.split('');\n    const string_distinct =\
    \ [...new Set(string_array)];\n    return string_distinct.length;\n}\n", "  let\
    \ str = string.toLowerCase();\n  let hashMap = {};\n  for (let i = 0; i < str.length;\
    \ i++) {\n    if (!hashMap[str[i]]) {\n      hashMap[str[i]] = true;\n    }\n\
    \  }\n  return Object.keys(hashMap).length;\n}\n", "  let set: Set<string> = new\
    \ Set(string.toLowerCase().split(''));\n  return set.size;\n}\n\nexport { count_distinct_characters\
    \ };", "    return string.toLowerCase().split('').filter((value, index, self)\
    \ => {\n        return self.indexOf(value) === index;\n    }).length;\n}\n", " \
    \   return string.length;\n}\n\ncount_distinct_characters('Jerry');\n\n", "  \
    \  const chars = string.toLowerCase().split('');\n    const uniqueChars = new\
    \ Set(chars);\n    return uniqueChars.size;\n}\n\ndescribe('count_distinct_characters',\
    \ () => {\n    it('should pass', () => {\n        expect(count_distinct_characters('xyzXYZ')).toBe(3);\n\
    \        expect(count_distinct_characters('Jerry')).toBe(4);\n    });\n});", " \
    \ return [...new Set(string.toLowerCase())].length;\n}\n", "    let result = string.toLowerCase().split('').reduce((distinct:\
    \ string[], char: string) => {\n        if (distinct.indexOf(char) === -1) {\n\
    \            distinct.push(char);\n        }\n        return distinct;\n    },\
    \ []);\n    return result.length;\n}\n\nconsole.log(count_distinct_characters('xyzXYZ'));\n\
    console.log(count_distinct_characters('Jerry'));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
