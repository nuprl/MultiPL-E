name: HumanEval_26_remove_duplicates
language: ts
prompt: "//From a list of integers, remove all elements that occur more than once.\n\
  // Keep order of elements left the same as in the input.\n// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n// [1, 3, 4]\nfunction remove_duplicates(numbers: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = remove_duplicates;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4]),[1, 2, 3, 4]);\n  assert.deepEqual(candidate([1,\
  \ 2, 3, 2, 4, 3, 5]),[1, 4, 5]);\n}\n\ntest();"
completions: ["    let cleanArr: number[] = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        if (numbers.indexOf(numbers[i]) == numbers.lastIndexOf(numbers[i]))\
    \ {\n            cleanArr.push(numbers[i]);\n        }\n    }\n    return cleanArr;\n\
    }\n", "    let result: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        if (result.indexOf(numbers[i]) < 0) {\n            result.push(numbers[i]);\n\
    \        }\n    }\n    return result;\n}\n", "    const unique_numbers: number[]\
    \ = [];\n    for (let i = 0; i < numbers.length; i++) {\n        if (unique_numbers.indexOf(numbers[i])\
    \ == -1) {\n            unique_numbers.push(numbers[i]);\n        }\n    }\n \
    \   return unique_numbers;\n}\n\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n",
  "    return numbers.filter((value, index, self) => {\n        return self.indexOf(value)\
    \ === index;\n    });\n}\n", "    return numbers.filter((v, i) => numbers.indexOf(v)\
    \ === i);\n}\n\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n", "    let\
    \ unique: number[] = [];\n    for (let i: number = 0; i < numbers.length; i++)\
    \ {\n        if (unique.indexOf(numbers[i]) == -1) {\n            unique.push(numbers[i]);\n\
    \        }\n    }\n    return unique;\n}\n", "    const map = new Map();\n   \
    \ numbers.forEach(i => {\n        if (map.has(i)) {\n            map.set(i, map.get(i)\
    \ + 1);\n        } else {\n            map.set(i, 1);\n        }\n    });\n  \
    \  return Array.from(map).filter(i => i[1] === 1).map(i => i[0]);\n}\n\nexport\
    \ default remove_duplicates;", "    let unique_array: number[] = [];\n    let\
    \ unique_number_set: Set<number> = new Set();\n    numbers.forEach(\n        (number)\
    \ => {\n            if (!unique_number_set.has(number)) {\n                unique_array.push(number);\n\
    \                unique_number_set.add(number);\n            }\n        }\n  \
    \  );\n    return unique_array;\n}\n\nconsole.log(remove_duplicates([1, 2, 3,\
    \ 2, 4]));\n", "    var new_array: number[] = [];\n    var match: boolean = false;\n\
    \    numbers.sort();\n    numbers.forEach(function (element) {\n        if (new_array.indexOf(element)\
    \ === -1) {\n            new_array.push(element);\n        }\n    });\n    return\
    \ new_array;\n}\n", "    const uniqueNumbers: number[] = [];\n    for (let i:\
    \ number = 0; i < numbers.length; i++) {\n        if (uniqueNumbers.indexOf(numbers[i])\
    \ === -1) {\n            uniqueNumbers.push(numbers[i]);\n        }\n    }\n \
    \   return uniqueNumbers;\n}\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n",
  "    let unique_numbers: number[] = [];\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        let number = numbers[i];\n        if (unique_numbers.indexOf(number)\
    \ == -1) {\n            unique_numbers.push(number);\n        }\n    }\n    return\
    \ unique_numbers;\n}\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n", " \
    \   let result = [];\n    for (let number of numbers) {\n        if (result.indexOf(number)\
    \ === -1) {\n            result.push(number);\n        }\n    }\n    return result;\n\
    }\n", "    let unique: number[] = [];\n    for (let i: number = 0; i < numbers.length;\
    \ i++) {\n        let unique_counter: number = 0;\n        for (let j: number\
    \ = 0; j < numbers.length; j++) {\n            if (numbers[i] === numbers[j])\
    \ {\n                unique_counter++;\n            }\n        }\n        if (unique_counter\
    \ < 2) {\n            unique.push(numbers[i]);\n        }\n    }\n    return unique;\n\
    }\n", "    return numbers.filter((v, i) => numbers.indexOf(v) === i);\n}\n", " \
    \   return Array.from(new Set(numbers));\n}\n", "    const duplicateNumbers: number[]\
    \ = [];\n    numbers.forEach(num => {\n        if (duplicateNumbers.includes(num))\
    \ {\n            const duplicateIndex = duplicateNumbers.indexOf(num);\n     \
    \       duplicateNumbers.splice(duplicateIndex, 1);\n        } else {\n      \
    \      duplicateNumbers.push(num);\n        }\n    });\n    return duplicateNumbers;\n\
    }\n\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n", "    const result =\
    \ [];\n    const unique = new Set();\n    for (const number of numbers) {\n  \
    \      if (!unique.has(number)) {\n            unique.add(number);\n         \
    \   result.push(number);\n        }\n    }\n    return result;\n}\n\ntest(remove_duplicates([1,\
    \ 2, 3, 2, 4]), [1, 3, 4]);\n", "    return numbers.filter((value, index, array)\
    \ => array.indexOf(value) === index);\n}\n", "    const filtered: number[] = [];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        if (numbers.indexOf(numbers[i])\
    \ === i) {\n            filtered.push(numbers[i]);\n        }\n    }\n    return\
    \ filtered;\n}\n", "    const seen: Set<number> = new Set();\n    return numbers.filter(number\
    \ => {\n        if (seen.has(number)) {\n            return false;\n        }\n\
    \        seen.add(number);\n        return true;\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
