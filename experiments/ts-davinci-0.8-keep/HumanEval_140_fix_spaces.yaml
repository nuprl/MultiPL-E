name: HumanEval_140_fix_spaces
language: ts
prompt: "//Given a string text, replace all spaces in it with underscores, \n// and\
  \ if a string has more than 2 consecutive spaces, \n// then replace all consecutive\
  \ spaces with - \n// fix_spaces(\"Example\") == \"Example\"\n// fix_spaces(\"Example\
  \ 1\") == \"Example_1\"\n// fix_spaces(\" Example 2\") == \"_Example_2\"\n// fix_spaces(\"\
  \ Example   3\") == \"_Example-3\"\nfunction fix_spaces(text: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fix_spaces;\n  assert.deepEqual(candidate(\"Example\"\
  ),\"Example\");\n  assert.deepEqual(candidate(\"Mudasir Hanif \"),\"Mudasir_Hanif_\"\
  );\n  assert.deepEqual(candidate(\"Yellow Yellow  Dirty  Fellow\"),\"Yellow_Yellow__Dirty__Fellow\"\
  );\n  assert.deepEqual(candidate(\"Exa   mple\"),\"Exa-mple\");\n  assert.deepEqual(candidate(\"\
  \   Exa 1 2 2 mple\"),\"-Exa_1_2_2_mple\");\n}\n\ntest();"
completions: ["    return text.replace(/\\s+/g, (match) => {\n        const re = new\
    \ RegExp(match);\n        if (re.exec(match).length <= 2) {\n            return\
    \ \"_\";\n        } else {\n            return \"-\";\n        }\n    });\n}\n",
  "  let result: string = text.replace(/\\s/g, \"_\");\n  result = result.replace(/__/g,\
    \ \"-\");\n  return result;\n}\n\nconsole.log(fix_spaces(\"Example 1\"));\nconsole.log(fix_spaces(\"\
    \ Example 2\"));\nconsole.log(fix_spaces(\" Example   3\"));\n", "    //let patt1\
    \ = /\\s{2,}/g;\n    let patt1 = /\\s{2,}/;\n    let patt2 = /\\s/g;\n    if (patt1.test(text))\
    \ {\n        return text.replace(patt1, \"-\").replace(patt2, \"_\");\n    } else\
    \ {\n        return text.replace(patt2, \"_\");\n    }\n}\n", "  return text.replace(/\\\
    s+/g, (match) => match.length > 2 ? '-' : '_');\n}\n", "    return text.replace(/\\\
    s{2,}/g, \"-\").replace(/\\s/g, \"_\");\n}\n", "    // return text.replace(/ +/g,\
    \ (match, offset, string) => {\n    //     if (offset === 0) {\n    //       \
    \  return \"_\";\n    //     }\n    //     if (match.length > 2) {\n    //   \
    \      return \"-\";\n    //     }\n    //     return \"_\";\n    // });\n   \
    \ return text.replace(/ +/g, match => {\n        if (match.length > 2) {\n   \
    \         return \"-\";\n        }\n        return \"_\";\n    });\n}\n", "  return\
    \ text.split(\"  \").join(\"-\").split(\" \").join(\"_\");\n}\n", "    var text\
    \ = text.replace(/\\s/g, \"_\");\n    return text.replace(/_+/g, \"-\");\n}\n\
    console.log(fix_spaces(\"Example   3\"));\n", "  return text.split(\" \").map(word\
    \ => word.trim()).join(\"_\").replace(/_+/g, \"-\");\n}\n", "    return text.replace(/\\\
    s+/g, '_').replace(/\\s{2,}/g, '-');\n}\n", "    return text.replace(/ +/g, '\
    \ ').replace(/ /g, '_').replace(/ +/g, '-');\n}\n", "    let result: string =\
    \ text.replace(/\\s/g, \"_\");\n    let pattern: RegExp = /_+/g;\n    let match:\
    \ RegExpExecArray | null;\n    while ((match = pattern.exec(result)) !== null)\
    \ {\n        if (match[0].length > 2) {\n            result = result.replace(match[0],\
    \ \"-\");\n        }\n    }\n    return result;\n}", "  // return text.replace(/\\\
    s{1,}/g, '_');\n  // return text.replace(/\\s{2,}/g, '-');\n  return text.replace(/\
    \ {2,}/g, '-').replace(/ /g, '_');\n}\n", "    let newText = text.replace(/  +/g,\
    \ '-');\n    newText = newText.replace(/ /g, '_');\n    return newText;\n}\n",
  "    // your code here\n    return text;\n}\n", "    const underscore = \"_\";\n\
    \    const dash = \"-\";\n    const space = \" \";\n    const spacePattern = /\\\
    s/g;\n    const spacesPattern = /\\s\\s/g;\n    let spaces = text.match(spacesPattern);\n\
    \    let count = spaces ? spaces.length : 0;\n    return text.replace(spacePattern,\
    \ underscore).replace(spacesPattern, dash).trim();\n}\n", "    var result: string\
    \ = \"\";\n    var spaceCount: number = 0;\n    for (var index: number = 0; index\
    \ < text.length; index++) {\n        var char: string = text[index];\n       \
    \ if (char === \" \") {\n            spaceCount++;\n            if (spaceCount\
    \ > 2) {\n                spaceCount = 1;\n                result += \"-\";\n\
    \            } else {\n                result += \"_\";\n            }\n     \
    \   } else {\n            spaceCount = 0;\n            result += char;\n     \
    \   }\n    }\n    return result;\n}\n", "    return text.replace(/\\s{2,}/g, '-').replace(/\\\
    s/g, '_');\n}\n\nconsole.log(fix_spaces(\"Example\"));\nconsole.log(fix_spaces(\"\
    Example 1\"));\nconsole.log(fix_spaces(\" Example 2\"));\nconsole.log(fix_spaces(\"\
    \ Example   3\"));", "    return text.replace(/  +/g, '-').replace(/ /g, '_');\n\
    }\n", "  let result = text.replace(/ /g, \"_\");\n  if (result.match(/ {2,}/g))\
    \ {\n    result = result.replace(/ {2,}/g, \"-\");\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
