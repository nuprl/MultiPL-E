name: HumanEval_79_decimal_to_binary
language: ts
prompt: "//You will be given a number in decimal form and your task is to convert\
  \ it to\n// binary format. The function should return a string, with each character\
  \ representing a binary\n// number. Each character in the string will be '0' or\
  \ '1'.\n// There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n// The extra characters are there to help with the\
  \ format.\n// Examples:\n// decimal_to_binary(15)   # returns \"db1111db\"\n// decimal_to_binary(32)\
  \   # returns \"db100000db\"\nfunction decimal_to_binary(decimal: number): string\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = decimal_to_binary;\n  assert.deepEqual(candidate(0),\"\
  db0db\");\n  assert.deepEqual(candidate(32),\"db100000db\");\n  assert.deepEqual(candidate(103),\"\
  db1100111db\");\n  assert.deepEqual(candidate(15),\"db1111db\");\n}\n\ntest();"
completions: ["  let result = \"db\";\n  let binary = [];\n  let remainder;\n  if\
    \ (decimal >= 0) {\n    while (decimal > 0) {\n      remainder = decimal % 2;\n\
    \      binary.push(remainder);\n      decimal = Math.floor(decimal / 2);\n   \
    \ }\n    for (let i = binary.length - 1; i >= 0; i--) {\n      result += binary[i];\n\
    \    }\n    result += \"db\";\n  } else {\n    result = \"-\" + decimal_to_binary(Math.abs(decimal));\n\
    \  }\n  return result;\n}\n", "    const binary = \"\";\n    return `db${binary}db`;\n\
    }\n", "    let bstr = '';\n    while (decimal > 0) {\n        let bit = decimal\
    \ % 2;\n        bstr = bit + bstr;\n        decimal = Math.floor(decimal / 2);\n\
    \    }\n    return \"db\" + bstr + \"db\";\n}\nconsole.log(decimal_to_binary(14));\n\
    console.log(decimal_to_binary(32));\n", "  const arr = [];\n  while (decimal >\
    \ 0) {\n    if (decimal % 2 === 0) {\n      arr.push(0);\n    } else {\n     \
    \ arr.push(1);\n    }\n    decimal = Math.floor(decimal / 2);\n  }\n  arr.push(\"\
    db\");\n  arr.reverse();\n  arr.unshift(\"db\");\n  return arr.join(\"\");\n}\n",
  "  const result = '';\n  while (decimal > 0) {\n    result.unshift(decimal % 2);\n\
    \    decimal = decimal / 2;\n  }\n  return result;\n}\n\nconsole.log(decimal_to_binary(15));",
  "    const binary = decimal.toString(2);\n    return `db${binary}db`;\n}\n", " \
    \ if (decimal < 0) {\n    throw new Error('Input number must be larger than 0.');\n\
    \  }\n\n  let num = decimal;\n  let binary = '';\n  while (num > 0) {\n    const\
    \ remainder = num % 2;\n    binary = remainder + binary;\n    num = Math.floor(num\
    \ / 2);\n  }\n\n  return `db${binary}db`;\n}\n\nexport default decimal_to_binary;",
  "  return \"db\" + decimal.toString(2) + \"db\";\n}\n", "  let result = 'db';\n\
    \  let binary = decimal.toString(2);\n  for (let i = 0; i < 8 - binary.length;\
    \ i++) {\n    result += '0';\n  }\n  result += binary;\n  result += 'db';\n  return\
    \ result;\n}\n", "    let binary = [];\n    if (decimal === 0) return 'db0db';\n\
    \    while (decimal > 0) {\n        binary.push(decimal % 2);\n        decimal\
    \ = Math.floor(decimal / 2);\n    }\n    return 'db' + binary.reverse().join('')\
    \ + 'db';\n}\n", "  let binary = \"\";\n  while (decimal > 0) {\n    if (decimal\
    \ % 2 == 0) {\n      binary = \"0\" + binary;\n    } else {\n      binary = \"\
    1\" + binary;\n    }\n    decimal = Math.floor(decimal / 2);\n  }\n  return \"\
    db\" + binary + \"db\";\n}\n", "  let result = \"db\";\n  while (decimal >= 1)\
    \ {\n    result += Math.floor(decimal % 2);\n    decimal = decimal / 2;\n  }\n\
    \  return result.split(\"\").reverse().join(\"\") + \"db\";\n}\n", "  return \"\
    db\" + decimal.toString(2) + \"db\";\n}\n", "  let binary = '';\n  while (decimal\
    \ > 0) {\n    if (decimal % 2 === 0) {\n      binary = '0' + binary;\n    } else\
    \ {\n      binary = '1' + binary;\n    }\n    decimal = Math.floor(decimal / 2);\n\
    \  }\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(15));\nconsole.log(decimal_to_binary(32));\n",
  "  let binary = (decimal >>> 0).toString(2);\n  return `db${binary}db`;\n}\n\nconsole.log(decimal_to_binary(15));\n\
    console.log(decimal_to_binary(32));\n", "  return \"db\" + decimal.toString(2)\
    \ + \"db\";\n}\n", "  let res = \"db\";\n  let isDone = false;\n  while (!isDone)\
    \ {\n    const quotient = Math.floor(decimal / 2);\n    const remainder = decimal\
    \ % 2;\n    res += remainder;\n    decimal = quotient;\n    if (quotient === 0)\
    \ {\n      isDone = true;\n    }\n  }\n  res += \"db\";\n  return res;\n}\n",
  "    let str = \"db\";\n    let res = decimal % 2;\n    decimal = Math.floor(decimal\
    \ / 2);\n    while (decimal > 0) {\n        res = decimal % 2;\n        decimal\
    \ = Math.floor(decimal / 2);\n        str = str + res;\n    }\n    return str\
    \ + \"db\";\n}\n", "    let result = 'db';\n    while (decimal > 0) {\n      \
    \  const digit = decimal % 2;\n        result = digit + result;\n        decimal\
    \ = Math.floor(decimal / 2);\n    }\n    return result + 'db';\n}\n", "    let\
    \ res = \"db\";\n    let bin_arr = [];\n    let res_arr = [];\n    let i = 0;\n\
    \    if (decimal === 0) {\n        return \"db0db\";\n    }\n    while (decimal\
    \ > 0) {\n        bin_arr[i] = decimal % 2;\n        decimal = decimal / 2;\n\
    \        decimal = Math.floor(decimal);\n        i++;\n    }\n    let j = 0;\n\
    \    while (i > 0) {\n        res_arr[j] = bin_arr[i - 1];\n        i--;\n   \
    \     j++;\n    }\n    res += res_arr.join(\"\");\n    res += \"db\";\n    return\
    \ res;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
