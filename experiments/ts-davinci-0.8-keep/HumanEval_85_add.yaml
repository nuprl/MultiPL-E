name: HumanEval_85_add
language: ts
prompt: "//Given a non-empty list of integers lst. add the even elements that are\
  \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
  \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
  \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
completions: ["    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n \
    \       if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\n", "    let sum = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "    let\
    \ result = 0;\n    lst.forEach((value, index) => {\n        if (index % 2 ===\
    \ 1 && value % 2 === 0) {\n            result += value;\n        }\n    });\n\
    \    return result;\n}\n", "    let result = 0;\n    lst.forEach((element, i)\
    \ => {\n        if(i % 2 !== 0 && element % 2 === 0) {\n            result +=\
    \ element;\n        }\n    });\n    return result;\n}\n\nconsole.log(add([4, 2,\
    \ 6, 7]));\nconsole.log(add([2, 3, 4, 7, 8, 1, 3, 4, 5, 6, 7, 1, 2, 3, 4, 7, 8,\
    \ 9, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 1, 3, 5, 7, 9, 11]));", "    return lst.filter((val,\
    \ index) => val % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0);\n}\n",
  "  return lst.filter((value, index) => index % 2 === 1 && value % 2 === 0).reduce((acc,\
    \ value) => acc + value, 0);\n}\n", "    return lst.filter((el, index) => el %\
    \ 2 === 0 && index % 2 !== 0).reduce((a, b) => a + b);\n}\nconsole.log(add([4,\
    \ 2, 6, 7]));\n", "    return lst.filter((n,i) => i % 2 !== 0 && n % 2 === 0).reduce((acc,\
    \ curr) => acc + curr, 0);\n}\n\nexport default add;", "  let sum = 0;\n  lst.forEach((item,\
    \ index) => {\n    if (index % 2 === 1 && item % 2 === 0) {\n      sum += item;\n\
    \    }\n  });\n  return sum;\n}\n", "\treturn lst.filter((e,i) => i % 2 && e %\
    \ 2 === 0).reduce((a,b) => a + b, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 &&\
    \ lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}", " \
    \ let evens = lst.filter((v, i) => i % 2 !== 0);\n  return evens.reduce((a, b)\
    \ => a + b, 0);\n}\n", "  // let returnValue = 0;\n  // for (let i = 0; i < lst.length;\
    \ i++) {\n  //   if (i % 2 !== 0 && lst[i] % 2 === 0) {\n  //     returnValue\
    \ += lst[i];\n  //   }\n  // }\n  // return returnValue;\n  return lst.reduce((acc,\
    \ current, i) => {\n    if (i % 2 !== 0 && current % 2 === 0) {\n      return\
    \ acc + current;\n    }\n    return acc;\n  }, 0);\n}\n", "  return lst.filter((e,\
    \ index) => index % 2 && e % 2 === 0).reduce((acc, next) => acc + next, 0);\n\
    }\n", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2\
    \ !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nconsole.log(add([4, 2, 6, 7]));\n", "    return lst.filter((a, index) => index\
    \ % 2 == 1 && a % 2 == 0).reduce((a, b) => a + b);\n}", "  return lst.filter((n,\
    \ index) => index % 2 === 1 && n % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\n\
    export default add;", "  return lst.filter((e, i) => (i + 1) % 2 === 0 && e %\
    \ 2 === 0).reduce((a, b) => a + b);\n}\n\nexport default add;", "  let result\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 1 && lst[i]\
    \ % 2 == 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", " \
    \   let evenNum: number = 0;\n    for (let i = 0; i < lst.length; i++) {\n   \
    \     if (i % 2 != 0 && lst[i] % 2 == 0) {\n            evenNum += lst[i];\n \
    \       }\n    }\n    return evenNum;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
