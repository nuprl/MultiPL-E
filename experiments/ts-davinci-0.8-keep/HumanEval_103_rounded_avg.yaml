name: HumanEval_103_rounded_avg
language: ts
prompt: "//You are given two positive integers n and m, and your task is to compute\
  \ the\n// average of the integers from n through m (including n and m). \n// Round\
  \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
  \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
  \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"0b11010\"\
  \nfunction rounded_avg(n: number, m: number): string| number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
  0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
  \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
  );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
  \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
  );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
  \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
  \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
completions: ["    if (n > m) return -1;\n    const result = Math.round((n + m) /\
    \ 2);\n    return `0b${result.toString(2)}`;\n}\nconsole.log(rounded_avg(20, 33));\n",
  "    if (n > m) return -1;\n    const roundedAverage = Math.round((n + m) / 2);\n\
    \    return `0b${roundedAverage.toString(2)}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));", "  const avg = Math.round((n + m) / 2);\n  return n > m ? -1 : `0b${avg.toString(2)}`;\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));", "    if (n > m) return -1;\n    const\
    \ avg = Math.round((n + m) / 2);\n    return \"0b\" + avg.toString(2);\n}\n",
  "    if (n > m) {\n        return -1;\n    }\n\n    let sum = 0;\n    for (let i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n\n    return ((Math.round(sum\
    \ / (m - n + 1))) >>> 0).toString(2);\n}\n\nexport default rounded_avg;", "  \
    \  if (n > m) {\n        return -1;\n    }\n\n    let sum = 0;\n    for (let i\
    \ = n; i <= m; i++) {\n        sum += i;\n    }\n\n    return `0b${(Math.round(sum\
    \ / (m - n + 1))).toString(2)}`;\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));",
  "    if (n > m) return -1;\n    return Math.round((n + m) / 2).toString(2);\n}\n",
  "    if (n > m) return -1;\n    const average = Math.round((n + m) / 2);\n    return\
    \ `0b${average.toString(2)}`;\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));",
  "  let average = Math.round((m + n) / 2);\n  if (n > m) {\n    return -1;\n  }\n\
    \  return average.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));",
  "    let average = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n\
    \    }\n    return average.toString(2);\n\n}\n\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));", "    if (n > m) {\n        return -1;\n    }\n    let sum = n;\n   \
    \ for (let i = n + 1; i <= m; i++) {\n        sum += i;\n    }\n    const average\
    \ = Math.round(sum / (m - n + 1));\n    return `0b${average.toString(2)}`;\n}\n\
    console.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));", "    if (n > m) return -1;\n    let\
    \ sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n   \
    \ const avg = Math.round(sum / (m - n + 1));\n    return `0b${avg.toString(2)}`;\n\
    }\n", "  if (n > m) return -1;\n  let arr = [];\n  for (let i = n; i <= m; i++)\
    \ {\n    arr.push(i);\n  }\n  let avg = Math.round(arr.reduce((a, b) => a + b)\
    \ / arr.length);\n  return \"0b\" + avg.toString(2);\n}\n\nconsole.log(rounded_avg(10,\
    \ 20));", "    const average: number = Math.round((n + m) / 2);\n    const result:\
    \ string = average.toString(2);\n    if (n > m) {\n        return -1;\n    } else\
    \ {\n        return `0b${result}`;\n    }\n}\n\n", "    if (n > m) return -1;\n\
    \    let sum = 0;\n    for (let i = n; i <= m; i++) {\n        sum += i;\n   \
    \ }\n    return '0b' + Math.round(sum / (m - n + 1)).toString(2);\n}\n", "   \
    \ //write your code here\n}\n", "    let total = 0;\n    let count = 0;\n    if\
    \ (n > m) {\n        return -1;\n    }\n    for (let i = n; i <= m; i++) {\n \
    \       total += i;\n        count++;\n    }\n    let avg = total / count;\n \
    \   let rounded = Math.round(avg);\n    let binary = rounded.toString(2);\n  \
    \  return `0b${binary}`;\n}\n", "    if (n > m) return -1;\n    let sum = 0;\n\
    \    for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let binaryValue\
    \ = Math.round(sum / (m - n + 1)).toString(2);\n    return `0b${binaryValue}`;\n\
    }\n\nexport { rounded_avg }", "    if (n > m) return -1;\n    let sum = 0;\n \
    \   for (let i = n; i <= m; i++) {\n        sum += i;\n    }\n    let result =\
    \ Math.round(sum / (m - n + 1)).toString(2);\n    return `0b${result}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));", "    let avg = (n + m) / 2;\n    let roundedAvg = Math.round(avg);\n\
    \    let bin = (roundedAvg >>> 0).toString(2);\n    if (n > m) {\n        return\
    \ -1;\n    }\n    return '0b' + bin;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
