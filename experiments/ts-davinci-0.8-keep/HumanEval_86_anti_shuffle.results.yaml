language: ts
name: HumanEval_86_anti_shuffle
results:
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  return s\n    .split(\" \")\n    .map(word => word.split(\"\").sort().join(\"\
    \"))\n    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  return s.split(\" \").map(x => x.split(\"\").sort().join(\"\")).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    let arr: string[] = s.split(' ');\n    let finalString: string = '';\n\
    \    for (let i: number = 0; i < arr.length; i++) {\n        let tmpArr: string[]\
    \ = arr[i].split('');\n        tmpArr.sort();\n        let tmpStr: string = tmpArr.join('');\n\
    \        finalString += tmpStr + ' ';\n    }\n    return finalString.trim();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 2
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  let str: string = '';\n  let prev: string = '';\n  let curr: string = '';\n\
    \  for (let i = 0; i < s.length; i++) {\n    curr = s[i];\n    if (curr == ' '\
    \ && prev == ' ') {\n      continue;\n    } else if (curr != ' ') {\n      str\
    \ += curr;\n    } else {\n      str += sort(str.substring(str.lastIndexOf(' ')\
    \ + 1)) + ' ';\n    }\n    prev = curr;\n  }\n  return sort(str.substring(str.lastIndexOf('\
    \ ') + 1)) + ' ' + str.substring(0, str.lastIndexOf(' '));\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcqyf8yfz.ts(21,14): error TS2304: Cannot find name
    ''sort''.

    ../../../../../tmp/tmpcqyf8yfz.ts(25,10): error TS2304: Cannot find name ''sort''.

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  const result = s.split(\" \").map(word =>\n    word\n      .split(\"\"\
    )\n      .sort()\n      .join(\"\")\n  );\n  return result.join(\" \");\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  // TODO: implement\n  return null;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nnull\n\nshould\
    \ loosely deep-equal\n\n'Hi'\n    at test (/tmp/tmpmy8vmdg8.js:17:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmy8vmdg8.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: null,\n  expected:\
    \ 'Hi',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    const result = [];\n    const words = s.split(' ');\n    for (let i =\
    \ 0; i < words.length; i++) {\n        const letter = [];\n        for (let j\
    \ = 0; j < words[i].length; j++) {\n            letter.push(words[i][j]);\n  \
    \      }\n        result.push(letter.sort().join(''));\n    }\n    return result.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    return s.split(' ').map(function (w) {\n        return w.split('').sort().join('');\n\
    \    }).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  const trimmed: string = s.trim()\n  const words: string[] = trimmed.split('\
    \ ')\n  const result: string[] = []\n  const wordProcessor = (word: string): string\
    \ => {\n    const sorted = word.split('').sort()\n    const sortedAsciiValue =\
    \ sorted.map(l => l.charCodeAt(0))\n    const wordToArray = word.split('')\n \
    \   const asciiValue = wordToArray.map(l => l.charCodeAt(0))\n    const ordered\
    \ = asciiValue.map((value, index) => {\n      const temp = sortedAsciiValue.indexOf(value)\n\
    \      return sorted[temp]\n    })\n    return ordered.join('')\n  }\n  for (let\
    \ i = 0; i < words.length; i++) {\n    if (words[i] !== '') {\n      result.push(wordProcessor(words[i]))\n\
    \    } else {\n      result.push('')\n    }\n  }\n  return result.join(' ')\n\
    }\nconsole.log(anti_shuffle('Hi'))\nconsole.log(anti_shuffle('hello'))\nconsole.log(anti_shuffle('Hello\
    \ World!!!'))\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'hello'\n\nshould\
    \ loosely deep-equal\n\n'ehllo'\n    at test (/tmp/tmpllylheav.js:42:12)\n   \
    \ at Object.<anonymous> (/tmp/tmpllylheav.js:49:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'hello',\n\
    \  expected: 'ehllo',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'Hi

    hello

    Hello World!!!

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  let result = \"\";\n  let splitted: string[] = s.split(\" \");\n  for (let\
    \ word of splitted) {\n    let letters: string[] = word.split(\"\");\n    letters.sort();\n\
    \    result += letters.join(\"\");\n    result += \" \";\n  }\n  return result.trim();\n\
    }\n\nconsole.log(anti_shuffle(\"Hello World!!!\"));\nconsole.log(anti_shuffle(\"\
    Hi\"));\nconsole.log(anti_shuffle(\"hello\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hello !!!Wdlor

    Hi

    ehllo

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  // your code here\n  return s.split(\" \").map(word => {\n    return word.split(\"\
    \").sort().join(\"\");\n  }).join(\" \");\n}\n\nconsole.log(anti_shuffle('Hi'));\n\
    console.log(anti_shuffle('hello'));\nconsole.log(anti_shuffle('Hello World!!!'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    return s.split(\" \").map(x => x.split(\"\").sort().join(\"\")).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  return s.split(\" \").map(a => a.split(\"\").sort().join(\"\")).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  return s.split(' ').map(w => {\n    return w.split('').sort().join('');\n\
    \  }).join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    let result = '';\n    s.split(' ').forEach(word => {\n        result\
    \ += word.split('').sort().join('') + ' ';\n    });\n    return result.trim();\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    const words = s.split(' ');\n    const ans = [];\n    for (const word\
    \ of words) {\n        ans.push(word.split('').sort().join(''));\n    }\n    return\
    \ ans.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"\
    Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  let shuffled = s.split(' ').map( word => word.split('').sort().join('')\
    \ );\n  return shuffled.join(' ');\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n  return s.split(' ').map(word => word.split('').sort().join('')).join('\
    \ ');\n}\nconsole.log(anti_shuffle('Hi'));\nconsole.log(anti_shuffle('hello'));\n\
    console.log(anti_shuffle('Hello World!!!'));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hi

    ehllo

    Hello !!!Wdlor

    '
  timestamp: 1659822216
- exit_code: 2
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    return (\n        s\n            .split(' ')\n            .map(x => {\n\
    \                return x\n                    .split('')\n                  \
    \  .sort()\n                    .join('');\n            })\n            .join('\
    \ ')\n    );\n}\n\ntest('anti_shuffle', () => {\n    expect(anti_shuffle('Hi')).toBe('Hi');\n\
    \    expect(anti_shuffle('hello')).toBe('ehllo');\n    expect(anti_shuffle('Hello\
    \ World!!!')).toBe('Hello !!!Wdlor');\n});\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = anti_shuffle;\n\
    \  assert.deepEqual(candidate(\"Hi\"),\"Hi\");\n  assert.deepEqual(candidate(\"\
    hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"number\"),\"bemnru\");\n\
    \  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpg0r3d6kx.ts(24,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpg0r3d6kx.ts(25,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpg0r3d6kx.ts(26,5): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpg0r3d6kx.ts(27,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Write a function that takes a string and returns an ordered version\
    \ of it.\n// Ordered version of string, is a string where all words (separated\
    \ by space)\n// are replaced by a new word where all the characters arranged in\n\
    // ascending order based on ascii value.\n// Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n// For example:\n// anti_shuffle('Hi')\
    \ returns 'Hi'\n// anti_shuffle('hello') returns 'ehllo'\n// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunction anti_shuffle(s: string): string\
    \ {\n    return s.split(\" \").map(word => {\n        const splitWord = word.split(\"\
    \");\n        const sortedWord = splitWord.sort();\n        return sortedWord.join(\"\
    \");\n    }).join(\" \");\n}\nconsole.log(anti_shuffle(\"Hello World!!!\"));\n\
    \n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = anti_shuffle;\n  assert.deepEqual(candidate(\"Hi\"\
    ),\"Hi\");\n  assert.deepEqual(candidate(\"hello\"),\"ehllo\");\n  assert.deepEqual(candidate(\"\
    number\"),\"bemnru\");\n  assert.deepEqual(candidate(\"abcd\"),\"abcd\");\n  assert.deepEqual(candidate(\"\
    Hello World!!!\"),\"Hello !!!Wdlor\");\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"Hi. My name is Mister Robot. How are you?\"\
    ),\".Hi My aemn is Meirst .Rboot How aer ?ouy\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Hello !!!Wdlor

    '
  timestamp: 1659822216
