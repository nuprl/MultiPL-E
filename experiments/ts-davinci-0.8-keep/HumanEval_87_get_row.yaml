name: HumanEval_87_get_row
language: ts
prompt: "//You are given a 2 dimensional data, as a nested lists,\n// which is similar\
  \ to matrix, however, unlike matrices,\n// each row may contain a different number\
  \ of columns.\n// Given lst, and integer x, find integers x in the list,\n// and\
  \ return list of tuples, [(x1, y1), (x2, y2) ...] such that\n// each tuple is a\
  \ coordinate - (row, columns), starting with 0.\n// Sort coordinates initially by\
  \ rows in ascending order.\n// Also, sort coordinates of the row by columns in descending\
  \ order.\n// Examples:\n// get_row([\n// [1,2,3,4,5,6],\n// [1,2,3,4,1,6],\n// [1,2,3,4,5,1]\n\
  // ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n// get_row([], 1) == []\n\
  // get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\nfunction get_row(lst: number[][],\
  \ x: number): [number, number][] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_row;\n  assert.deepEqual(candidate([[1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 4], [1, 0],\
  \ [2, 5], [2, 0]]);\n  assert.deepEqual(candidate([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3,\
  \ 4, 5, 6]], 2),[[0, 1], [1, 1], [2, 1], [3, 1], [4, 1], [5, 1]]);\n  assert.deepEqual(candidate([[1,\
  \ 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 1, 3, 4, 5, 6], [1, 2, 1, 4, 5, 6], [1,\
  \ 2, 3, 1, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1),[[0, 0], [1, 0], [2,\
  \ 1], [2, 0], [3, 2], [3, 0], [4, 3], [4, 0], [5, 4], [5, 0], [6, 5], [6, 0]]);\n\
  \  assert.deepEqual(candidate([], 1),[]);\n  assert.deepEqual(candidate([[1]], 2),[]);\n\
  \  assert.deepEqual(candidate([[], [1], [1, 2, 3]], 3),[[2, 2]]);\n}\n\ntest();"
completions: ["    let result: [number, number][] = [];\n    lst.forEach((element,\
    \ index, array) => {\n        element.forEach((element, index, array) => {\n \
    \           if (element === x) {\n                result.push([index, array.indexOf(element)]);\n\
    \            }\n        });\n    });\n    return result;\n}\n", "  return lst\n\
    \    .reduce((acc, row, rowIndex) => {\n      row.forEach((cell, cellIndex) =>\
    \ {\n        if (cell === x) {\n          acc.push([rowIndex, cellIndex]);\n \
    \       }\n      });\n      return acc;\n    }, [])\n    .sort((a, b) => a[0]\
    \ - b[0])\n    .sort((a, b) => b[1] - a[1]);\n}\n", "    let result: [number,\
    \ number][] = [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let\
    \ j = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n     \
    \           result.push([i, j]);\n            }\n        }\n    }\n    let row_sort\
    \ = result.sort((a, b) => a[0] - b[0]);\n    let col_sort = row_sort.sort((a,\
    \ b) => b[1] - a[1]);\n    return col_sort;\n}\nconsole.log(get_row([\n    [1,\
    \ 2, 3, 4, 5, 6],\n    [1, 2, 3, 4, 1, 6],\n    [1, 2, 3, 4, 5, 1]\n], 1));",
  "    let result: [number, number][] = [];\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                result.push([i, j]);\n            }\n        }\n \
    \   }\n    return result.sort((a, b) => {\n        if (a[0] < b[0]) {\n      \
    \      return -1;\n        } else if (a[0] > b[0]) {\n            return 1;\n\
    \        } else {\n            if (a[1] > b[1]) {\n                return -1;\n\
    \            } else if (a[1] < b[1]) {\n                return 1;\n          \
    \  } else {\n                return 0;\n            }\n        }\n    });\n}\n",
  "    let solution: [number, number][] = [];\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === x) {\n                solution.push([i, j]);\n            }\n        }\n\
    \    }\n    solution.sort((a, b) => {\n        if (a[0] === b[0]) {\n        \
    \    return b[1] - a[1];\n        }\n        return a[0] - b[0];\n    });\n  \
    \  return solution;\n}\n", "  let temp: [number, number][] = [];\n  lst.forEach((y,\
    \ i) =>\n    y.forEach((z, j) => {\n      if (z === x) {\n        temp.push([i,\
    \ j]);\n      }\n    })\n  );\n  return temp.sort((a, b) => {\n    if (a[0] ===\
    \ b[0]) {\n      return b[1] - a[1];\n    }\n    return a[0] - b[0];\n  });\n\
    }\n\nexport { get_row };", "    let res: [number, number][] = [];\n    for (let\
    \ i: number = 0; i < lst.length; i++) {\n        for (let j: number = 0; j < lst[i].length;\
    \ j++) {\n            if (lst[i][j] === x) {\n                res.push([i, j]);\n\
    \            }\n        }\n    }\n    return res.sort((a, b) => (a[0] - b[0])\
    \ || (b[1] - a[1]));\n}\n\n", "  const arr: [number, number][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        arr.push([i, j]);\n      }\n    }\n  }\n\
    \  return arr\n    .sort((a, b) => a[0] - b[0])\n    .sort((a, b) => a[1] - b[1])\n\
    \    .reverse();\n}\n\nconsole.log(get_row([], 1));\nconsole.log(get_row([[],\
    \ [1], [1, 2, 3]], 3));\nconsole.log(\n  get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3,\
    \ 4, 1, 6], [1, 2, 3, 4, 5, 1]], 1)\n);\n", "  return lst\n    .reduce((acc, e,\
    \ i) => [...acc, ...e.map((ee, ii) => [i, ii])], [])\n    .filter(([, e]) => e\
    \ === x)\n    .sort(([a, b], [c, d]) => {\n      if (a === c) {\n        return\
    \ b - d;\n      }\n      return a - c;\n    });\n}\n", "    return lst.reduce((prev,\
    \ curr, index) => {\n        for (let i = 0; i < curr.length; i++) {\n       \
    \     if (curr[i] === x) {\n                prev.push([index, i]);\n         \
    \   }\n        }\n        return prev;\n    }, []).sort((a, b) => {\n        return\
    \ a[0] > b[0] ? 1 : a[0] < b[0] ? -1 : b[1] - a[1];\n    });\n}\n", "  let res:\
    \ [number, number][] = [];\n  lst.forEach((e, y) => {\n    if (e.includes(x))\
    \ {\n      res.push(...e.map((f, z) => (f === x ? [y, z] : null)).filter(\n  \
    \      (g) => g !== null\n      ) as [number, number][]);\n    }\n  });\n  return\
    \ res.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    } else if\
    \ (a[0] > b[0]) {\n      return 1;\n    } else {\n      if (a[1] > b[1]) {\n \
    \       return -1;\n      } else if (a[1] < b[1]) {\n        return 1;\n     \
    \ } else {\n        return 0;\n      }\n    }\n  });\n}\nconsole.log(get_row([\n\
    \  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 1));\n\
    console.log(get_row([], 1));\nconsole.log(get_row([[], [1], [1, 2, 3]], 3));\n",
  "  const result: [number, number][] = [];\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x)\
    \ {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result.sort((a,\
    \ b) => a[0] - b[0] || b[1] - a[1]);\n}\n", "  return lst\n    .map((row, rowNum)\
    \ =>\n      row\n        .map((num, colNum) => {\n          if (num === x) {\n\
    \            return [rowNum, colNum];\n          }\n        })\n        .filter(el\
    \ => el)\n    )\n    .reduce((acc, el) => acc.concat(el), [])\n    .sort((a, b)\
    \ => (a[0] > b[0] ? 1 : -1))\n    .sort((a, b) => (a[1] < b[1] ? 1 : -1));\n}\n",
  "  return lst\n    .reduce((acc, row, rowIndex) => {\n      row.forEach((element,\
    \ colIndex) => {\n        if (element === x) {\n          acc.push([rowIndex,\
    \ colIndex]);\n        }\n      });\n      return acc;\n    }, [])\n    .sort((a,\
    \ b) => {\n      if (a[0] === b[0]) {\n        return b[1] - a[1];\n      }\n\
    \      return a[0] - b[0];\n    });\n}\n\nconsole.log(\n  get_row(\n    [\n  \
    \    [1, 2, 3, 4, 5, 6],\n      [1, 2, 3, 4, 1, 6],\n      [1, 2, 3, 4, 5, 1]\n\
    \    ],\n    1\n  )\n);\n", "  let result: [number, number][] = [];\n  for (let\
    \ i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst[i].length; j++) {\n\
    \      if (lst[i][j] === x) {\n        result.push([i, j]);\n      }\n    }\n\
    \  }\n  return result.sort((a, b) => {\n    return a[0] > b[0] ? 1 : a[0] < b[0]\
    \ ? -1 : a[1] > b[1] ? -1 : 1;\n  });\n}\n", "  let result: [number, number][]\
    \ = [];\n  lst.forEach((item, index) => {\n    let arr: number[] = [];\n    item.forEach((item,\
    \ index) => {\n      if (item === x) {\n        arr.push(index);\n      }\n  \
    \  });\n    if (arr.length) {\n      result.push(...arr.map(v => [index, v]));\n\
    \    }\n  });\n  return result.sort((a, b) => {\n    if (a[0] > b[0]) {\n    \
    \  return 1;\n    } else if (a[0] < b[0]) {\n      return -1;\n    } else {\n\
    \      return b[1] - a[1];\n    }\n  });\n}\n", "    let row: [number, number][]\
    \ = [];\n    for (let i: number = 0; i < lst.length; i++) {\n        for (let\
    \ j: number = 0; j < lst[i].length; j++) {\n            if (lst[i][j] === x) {\n\
    \                row.push([i, j]);\n            }\n        }\n    }\n    row.sort((a,\
    \ b) => {\n        if (a[0] === b[0]) {\n            return b[1] - a[1];\n   \
    \     }\n        return a[0] - b[0];\n    });\n    return row;\n}\n", "  const\
    \ list: [number, number][] = [];\n  lst.forEach((item, index) => {\n    const\
    \ indexs = item.filter(el => el === x).map(el => item.indexOf(el));\n    indexs.forEach(el\
    \ => list.push([index, el]));\n  });\n  return list.sort((a, b) => {\n    if (a[0]\
    \ > b[0]) {\n      return 1;\n    } else if (a[0] < b[0]) {\n      return -1;\n\
    \    } else {\n      if (a[1] > b[1]) {\n        return -1;\n      } else if (a[1]\
    \ < b[1]) {\n        return 1;\n      } else {\n        return 0;\n      }\n \
    \   }\n  });\n}\n", "    let result: [number, number][] = [];\n    let temp =\
    \ [];\n    for (let i = 0; i < lst.length; i++) {\n        for (let j = 0; j <\
    \ lst[i].length; j++) {\n            if (lst[i][j] === x) {\n                temp.push([i,\
    \ j]);\n            }\n        }\n    }\n    for (let i = 0; i < temp.length;\
    \ i++) {\n        for (let j = i + 1; j < temp.length; j++) {\n            if\
    \ (temp[i][0] > temp[j][0]) {\n                [temp[i], temp[j]] = [temp[j],\
    \ temp[i]];\n            }\n        }\n    }\n    for (let i = 0; i < temp.length;\
    \ i++) {\n        for (let j = i + 1; j < temp.length; j++) {\n            if\
    \ (temp[i][0] === temp[j][0]) {\n                if (temp[i][1] < temp[j][1])\
    \ {\n                    [temp[i], temp[j]] = [temp[j], temp[i]];\n          \
    \      }\n            }\n        }\n    }\n    return temp;\n}\n", "  const row:\
    \ number[][] = [];\n  lst.forEach((col, y) =>\n    col.forEach((num, i) => {\n\
    \      if (num === x) {\n        row.push([y, i]);\n      }\n    })\n  );\n  return\
    \ row.sort((a, b) => {\n    if (a[0] === b[0]) {\n      return b[1] - a[1];\n\
    \    }\n    return a[0] - b[0];\n  });\n}\n\nexport { get_row };"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
