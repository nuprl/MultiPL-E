name: HumanEval_65_circular_shift
language: ts
prompt: "//Circular shift the digits of the integer x, shift the digits right by shift\n\
  // and return the result as a string.\n// If shift > number of digits, return digits\
  \ reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift(x: number, shift: number): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = circular_shift;\n  assert.deepEqual(candidate(100,\
  \ 2),\"001\");\n  assert.deepEqual(candidate(12, 2),\"12\");\n  assert.deepEqual(candidate(97,\
  \ 8),\"79\");\n  assert.deepEqual(candidate(12, 1),\"21\");\n  assert.deepEqual(candidate(11,\
  \ 101),\"11\");\n}\n\ntest();"
completions: ["    const s = x.toString();\n    return shift <= s.length ? s.slice(shift)\
    \ + s.slice(0, shift) : s.split('').reverse().join('');\n}\n", "  let num_digits\
    \ = Math.floor(Math.log10(x)) + 1;\n  if (shift > num_digits) {\n    return x.toString().split(\"\
    \").reverse().join(\"\");\n  }\n  let front = Math.floor(x / Math.pow(10, shift));\n\
    \  let back = x % Math.pow(10, shift);\n  return back.toString() + front.toString();\n\
    }\n", "    if (shift > Math.floor(Math.log10(x)) + 1) {\n        return String(x).split(\"\
    \").reverse().join(\"\");\n    } else {\n        let num = String(x);\n      \
    \  let left = num.slice(0, num.length - shift);\n        let right = num.slice(num.length\
    \ - shift);\n        return right + left;\n    }\n}\n", "    const x_str = x.toString();\n\
    \    if (shift > x_str.length) {\n        return x_str.split(\"\").reverse().join(\"\
    \");\n    }\n    const first_half = x_str.slice(0, x_str.length - shift);\n  \
    \  const second_half = x_str.slice(x_str.length - shift);\n    return second_half\
    \ + first_half;\n}\n", "    // First check if we are going to do one round\n \
    \   let s = x.toString();\n    let ls = s.length;\n    if (shift % ls === 0) {\n\
    \        return s;\n    }\n\n    let res = s.substring(ls - shift, ls) + s.substring(0,\
    \ ls - shift);\n    return res;\n}\n", "    if (shift === 0) {\n        return\
    \ x.toString();\n    }\n    let size = Math.floor(Math.log10(x) + 1);\n    if\
    \ (shift > size) {\n        return x.toString().split(\"\").reverse().join(\"\"\
    );\n    }\n    let left_side = Math.floor(x / Math.pow(10, shift));\n    let right_side\
    \ = x % Math.pow(10, shift);\n    let result = right_side * Math.pow(10, size\
    \ - shift) + left_side;\n    return result.toString();\n}\n", "  let result =\
    \ '';\n  let digits = get_digits(x);\n  let i = 0;\n  while (i < shift) {\n  \
    \  let d = digits.pop();\n    if (d) {\n      result += d;\n    }\n    i++;\n\
    \  }\n  if (digits.length > 0) {\n    result += digits.join('');\n  }\n  return\
    \ result;\n}\n", "  return x.toString().split('').reverse().join('').substr(0,\
    \ shift).split('').reverse().join('');\n}\n", "    let digits: string = x.toString();\n\
    \    let new_digits: string = \"\";\n    let offset: number = digits.length -\
    \ shift;\n    if (offset < 0) {\n        return reverse_string(digits);\n    }\n\
    \    for (let i: number = offset; i < digits.length; i++) {\n        new_digits\
    \ += digits[i];\n    }\n    for (let i: number = 0; i < offset; i++) {\n     \
    \   new_digits += digits[i];\n    }\n    return new_digits;\n}\n", "    return\
    \ x.toString().slice(shift % x.toString().length) + x.toString().slice(0, shift\
    \ % x.toString().length);\n}\n", "  const str = x.toString();\n  if (shift >=\
    \ str.length) {\n    return str.split(\"\").reverse().join(\"\");\n  }\n  return\
    \ str.slice(shift) + str.slice(0, shift);\n}\n", "    let xString = x.toString();\n\
    \    let length = xString.length;\n    if (shift >= length) {\n        return\
    \ xString.split(\"\").reverse().join(\"\");\n    } else {\n        let firstPortion\
    \ = xString.substring(length - shift, length);\n        let secondPortion = xString.substring(0,\
    \ length - shift);\n        return firstPortion + secondPortion;\n    }\n}", " \
    \ const x_str = x.toString();\n  let len = x_str.length;\n  if (shift > len) {\n\
    \    return x_str.split(\"\").reverse().join(\"\");\n  }\n  let shift_str = x_str.slice(len\
    \ - shift);\n  shift_str += x_str.slice(0, len - shift);\n  return shift_str;\n\
    }\n", "    return x.toString().slice(shift) + x.toString().slice(0, shift);\n\
    }\n", "  var i: number, j: number, temp: number, power: number, num: number, result:\
    \ string = \"\";\n  if (shift < 0) {\n    return null;\n  }\n  if (shift === 0)\
    \ {\n    return String(x);\n  }\n  if (x < 0) {\n    num = -x;\n  } else {\n \
    \   num = x;\n  }\n  // If shift > number of digits in the number,\n  // reverse\
    \ the digits in the number\n  if (num < Math.pow(10, shift)) {\n    while (num\
    \ > 0) {\n      result += String(num % 10);\n      num = Math.floor(num / 10);\n\
    \    }\n    if (x < 0) {\n      result = \"-\" + result;\n    }\n    return result;\n\
    \  }\n  // Else shift left\n  power = 1;\n  for (i = 0; i < shift; i++) {\n  \
    \  power *= 10;\n  }\n  while (num > 0) {\n    temp = num % power;\n    num =\
    \ Math.floor(num / power);\n    for (j = 0; j < shift; j++) {\n      result +=\
    \ String(temp % 10);\n      temp = Math.floor(temp / 10);\n    }\n  }\n  if (x\
    \ < 0) {\n    result = \"-\" + result;\n  }\n  return result;\n}\n", "    var\
    \ to_string = x.toString();\n    if (shift > to_string.length) {\n        return\
    \ to_string.split(\"\").reverse().join(\"\");\n    }\n    return to_string.slice(shift)\
    \ + to_string.slice(0, shift);\n}\n", "    let digits: string = x.toString();\n\
    \    let num_digits: number = digits.length;\n    let shift_mod: number = shift\
    \ % num_digits;\n    return digits.slice(num_digits - shift_mod) + digits.slice(0,\
    \ num_digits - shift_mod);\n}\n", "    if (shift > Math.floor(Math.log10(x)) +\
    \ 1) {\n        return circular_shift(x, shift - Math.floor(Math.log10(x)) - 1);\n\
    \    }\n    return x.toString().slice(shift) + x.toString().slice(0, shift);\n\
    }\n", "  return String(x)\n    .split(\"\")\n    .map(char => Number(char))\n\
    \    .reduce((acc, curr, i, arr) => {\n      let j = (i + shift) % arr.length;\n\
    \      acc[j] = curr;\n      return acc;\n    }, [])\n    .join(\"\");\n}\n\n\
    console.log(circular_shift(12, 1));\nconsole.log(circular_shift(12, 2));\nconsole.log(circular_shift(12,\
    \ 5));\nconsole.log(circular_shift(1234, 2));\nconsole.log(circular_shift(1234,\
    \ 5));\n", "    const reversedDigits = get_digits(x).reverse();\n    return reversedDigits.slice(shift).concat(reversedDigits.slice(0,\
    \ shift)).join('');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
