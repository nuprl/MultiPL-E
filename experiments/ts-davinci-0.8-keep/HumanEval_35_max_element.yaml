name: HumanEval_35_max_element
language: ts
prompt: "//Return maximum element in the list.\n// >>> max_element([1, 2, 3])\n//\
  \ 3\n// >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n// 123\nfunction\
  \ max_element(l: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = max_element;\n  assert.deepEqual(candidate([1, 2,\
  \ 3]),3);\n  assert.deepEqual(candidate([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]),124);\n\
  }\n\ntest();"
completions: ["    return Math.max(...l);\n}\n", "    return reduce((x, y) => max(x,\
    \ y), l);\n}\n", "  return 0;\n}\n", "    return Math.max(...l);\n}\n", "  return\
    \ l.reduce((m, v) => v > m ? v : m, l[0]);\n}\n", "    if (l.length === 0) {\n\
    \        return null;\n    }\n\n    let max = l[0];\n    for (let i = 1; i < l.length;\
    \ i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n\
    \    return max;\n}\n", "    return l.reduce((l, r) => l > r ? l : r);\n}\n",
  "    let x = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > x)\
    \ {\n            x = l[i];\n        }\n    }\n    return x;\n}\n", "  return l.reduce((max,\
    \ value) => (value > max ? value : max), l[0]);\n}\n", "  return Math.max(...l);\n\
    }\n", "    let m = -Infinity;\n    for (let i of l) m = Math.max(m, i);\n    return\
    \ m;\n}\n", "    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n    \
    \    if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return\
    \ max;\n}\n", "  return Math.max(...l);\n}\n", "    return Math.max(...l);\n}",
  "  return Math.max(...l);\n}\n", "  return Math.max(...l);\n}\n", "  // TODO: Implement\
    \ code here\n  return -1;\n}\n", "    let max: number = l[0];\n    l.forEach(e\
    \ => {\n        if (e > max) {\n            max = e;\n        }\n    });\n   \
    \ return max;\n}\n", "    return 0;\n}\n", "    return l.reduce((a, b) => Math.max(a,\
    \ b));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
