language: ts
name: HumanEval_103_rounded_avg
results:
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    const result = Math.round((n + m) / 2);\n    return\
    \ `0b${result.toString(2)}`;\n}\nconsole.log(rounded_avg(20, 33));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpny0o5rqk.js:22:12)\n\
    \    at Object.<anonymous> (/tmp/tmpny0o5rqk.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    const roundedAverage = Math.round((n + m) / 2);\n  \
    \  return `0b${roundedAverage.toString(2)}`;\n}\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpek_xnajp.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpek_xnajp.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n  const\
    \ avg = Math.round((n + m) / 2);\n  return n > m ? -1 : `0b${avg.toString(2)}`;\n\
    }\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10,\
    \ 20));\nconsole.log(rounded_avg(20, 33));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmptwdxmide.js:23:12)\n\
    \    at Object.<anonymous> (/tmp/tmptwdxmide.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    const avg = Math.round((n + m) / 2);\n    return \"\
    0b\" + avg.toString(2);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpqlul_ion.js:21:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqlul_ion.js:32:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) {\n        return -1;\n    }\n\n    let sum = 0;\n    for (let i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n\n    return ((Math.round(sum / (m\
    \ - n + 1))) >>> 0).toString(2);\n}\n\nexport default rounded_avg;\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpty06xpb3.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpty06xpb3.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) {\n        return -1;\n    }\n\n    let sum = 0;\n    for (let i = n;\
    \ i <= m; i++) {\n        sum += i;\n    }\n\n    return `0b${(Math.round(sum\
    \ / (m - n + 1))).toString(2)}`;\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmph26i2vys.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmph26i2vys.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    return Math.round((n + m) / 2).toString(2);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\"\
    );\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpmhtd7h_h.js:18:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmhtd7h_h.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    const average = Math.round((n + m) / 2);\n    return\
    \ `0b${average.toString(2)}`;\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpmzw7anmi.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpmzw7anmi.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n  let\
    \ average = Math.round((m + n) / 2);\n  if (n > m) {\n    return -1;\n  }\n  return\
    \ average.toString(2);\n}\n\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpugtczbpw.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpugtczbpw.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    let\
    \ average = Math.round((n + m) / 2);\n    if (n > m) {\n        return -1;\n \
    \   }\n    return average.toString(2);\n\n}\n\nconsole.log(rounded_avg(1, 5));\n\
    console.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'11'\n\nshould\
    \ loosely deep-equal\n\n'0b11'\n    at test (/tmp/tmpm266mf23.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpm266mf23.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '11',\n  expected:\
    \ '0b11',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '11

    -1

    1111

    11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) {\n        return -1;\n    }\n    let sum = n;\n    for (let i = n +\
    \ 1; i <= m; i++) {\n        sum += i;\n    }\n    const average = Math.round(sum\
    \ / (m - n + 1));\n    return `0b${average.toString(2)}`;\n}\nconsole.log(rounded_avg(1,\
    \ 5));\nconsole.log(rounded_avg(7, 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20,\
    \ 33));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp04anio50.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmp04anio50.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n \
    \       sum += i;\n    }\n    const avg = Math.round(sum / (m - n + 1));\n   \
    \ return `0b${avg.toString(2)}`;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = rounded_avg;\n\
    \  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmp7j6qw3ao.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmp7j6qw3ao.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n  if\
    \ (n > m) return -1;\n  let arr = [];\n  for (let i = n; i <= m; i++) {\n    arr.push(i);\n\
    \  }\n  let avg = Math.round(arr.reduce((a, b) => a + b) / arr.length);\n  return\
    \ \"0b\" + avg.toString(2);\n}\n\nconsole.log(rounded_avg(10, 20));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n\
    \  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpqbohct6x.js:26:12)\n\
    \    at Object.<anonymous> (/tmp/tmpqbohct6x.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b1111

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    const\
    \ average: number = Math.round((n + m) / 2);\n    const result: string = average.toString(2);\n\
    \    if (n > m) {\n        return -1;\n    } else {\n        return `0b${result}`;\n\
    \    }\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpq60neiyz.js:25:12)\n\
    \    at Object.<anonymous> (/tmp/tmpq60neiyz.js:36:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n \
    \       sum += i;\n    }\n    return '0b' + Math.round(sum / (m - n + 1)).toString(2);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpw92aeg27.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpw92aeg27.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 2
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    //write\
    \ your code here\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp1jhntw2r.ts(10,45): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    let\
    \ total = 0;\n    let count = 0;\n    if (n > m) {\n        return -1;\n    }\n\
    \    for (let i = n; i <= m; i++) {\n        total += i;\n        count++;\n \
    \   }\n    let avg = total / count;\n    let rounded = Math.round(avg);\n    let\
    \ binary = rounded.toString(2);\n    return `0b${binary}`;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpaipxxmf_.js:30:12)\n\
    \    at Object.<anonymous> (/tmp/tmpaipxxmf_.js:41:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n \
    \       sum += i;\n    }\n    let binaryValue = Math.round(sum / (m - n + 1)).toString(2);\n\
    \    return `0b${binaryValue}`;\n}\n\nexport { rounded_avg }\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"0b11\");\n  assert.deepEqual(candidate(7,\
    \ 13),\"0b1010\");\n  assert.deepEqual(candidate(964, 977),\"0b1111001010\");\n\
    \  assert.deepEqual(candidate(996, 997),\"0b1111100100\");\n  assert.deepEqual(candidate(560,\
    \ 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185, 546),\"0b101101110\"\
    );\n  assert.deepEqual(candidate(362, 496),\"0b110101101\");\n  assert.deepEqual(candidate(350,\
    \ 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197, 233),\"0b11010111\"\
    );\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5, 1),-1);\n\
    \  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpa3lohani.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmpa3lohani.js:39:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    if\
    \ (n > m) return -1;\n    let sum = 0;\n    for (let i = n; i <= m; i++) {\n \
    \       sum += i;\n    }\n    let result = Math.round(sum / (m - n + 1)).toString(2);\n\
    \    return `0b${result}`;\n}\nconsole.log(rounded_avg(1, 5));\nconsole.log(rounded_avg(7,\
    \ 5));\nconsole.log(rounded_avg(10, 20));\nconsole.log(rounded_avg(20, 33));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1, 5),\"\
    0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpysb55q5r.js:29:12)\n\
    \    at Object.<anonymous> (/tmp/tmpysb55q5r.js:40:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0b11

    -1

    0b1111

    0b11011

    '
  timestamp: 1659821975
- exit_code: 1
  program: "//You are given two positive integers n and m, and your task is to compute\
    \ the\n// average of the integers from n through m (including n and m). \n// Round\
    \ the answer to the nearest integer and convert that to binary.\n// If n is greater\
    \ than m, return -1.\n// Example:\n// rounded_avg(1, 5) => \"0b11\"\n// rounded_avg(7,\
    \ 5) => -1\n// rounded_avg(10, 20) => \"0b1111\"\n// rounded_avg(20, 33) => \"\
    0b11010\"\nfunction rounded_avg(n: number, m: number): string| number {\n    let\
    \ avg = (n + m) / 2;\n    let roundedAvg = Math.round(avg);\n    let bin = (roundedAvg\
    \ >>> 0).toString(2);\n    if (n > m) {\n        return -1;\n    }\n    return\
    \ '0b' + bin;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = rounded_avg;\n  assert.deepEqual(candidate(1,\
    \ 5),\"0b11\");\n  assert.deepEqual(candidate(7, 13),\"0b1010\");\n  assert.deepEqual(candidate(964,\
    \ 977),\"0b1111001010\");\n  assert.deepEqual(candidate(996, 997),\"0b1111100100\"\
    );\n  assert.deepEqual(candidate(560, 851),\"0b1011000010\");\n  assert.deepEqual(candidate(185,\
    \ 546),\"0b101101110\");\n  assert.deepEqual(candidate(362, 496),\"0b110101101\"\
    );\n  assert.deepEqual(candidate(350, 902),\"0b1001110010\");\n  assert.deepEqual(candidate(197,\
    \ 233),\"0b11010111\");\n  assert.deepEqual(candidate(7, 5),-1);\n  assert.deepEqual(candidate(5,\
    \ 1),-1);\n  assert.deepEqual(candidate(5, 5),\"0b101\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'0b1111001011'\n\
    \nshould loosely deep-equal\n\n'0b1111001010'\n    at test (/tmp/tmpbim_iaeb.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpbim_iaeb.js:35:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '0b1111001011',\n\
    \  expected: '0b1111001010',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821975
