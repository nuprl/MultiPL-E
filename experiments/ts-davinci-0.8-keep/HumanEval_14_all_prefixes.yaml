name: HumanEval_14_all_prefixes
language: ts
prompt: "//Return list of all prefixes from shortest to longest of the input string\n\
  // >>> all_prefixes('abc')\n// ['a', 'ab', 'abc']\nfunction all_prefixes(string:\
  \ string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = all_prefixes;\n  assert.deepEqual(candidate(\"\"),[]);\n\
  \  assert.deepEqual(candidate(\"asdfgh\"),[\"a\", \"as\", \"asd\", \"asdf\", \"\
  asdfg\", \"asdfgh\"]);\n  assert.deepEqual(candidate(\"WWW\"),[\"W\", \"WW\", \"\
  WWW\"]);\n}\n\ntest();"
completions: ["    const results: string[] = [];\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        results.push(string.slice(0, i));\n    }\n    return results;\n\
    }\n", "    const result: string[] = [];\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        result.push(string.slice(0, i));\n    }\n    return result;\n\
    }\n", "  let result: string[] = []\n  for (let i: number = 1; i <= string.length;\
    \ i++) {\n    result.push(string.slice(0, i))\n  }\n  return result\n}\n", " \
    \   const prefixes: string[] = [];\n    for (let i = 1; i <= string.length; i++)\
    \ {\n        prefixes.push(string.slice(0, i));\n    }\n    return prefixes;\n\
    }\n", "  let ret: string[] = [];\n  for (let i = 1; i <= string.length; i++) {\n\
    \    ret.push(string.slice(0, i));\n  }\n  return ret;\n}\n", "    let prefixes:\
    \ string[] = [];\n    for (let i = 1; i <= string.length; i++) {\n        prefixes.push(string.slice(0,\
    \ i));\n    }\n    return prefixes;\n}\n", "  const result: string[] = [];\n \
    \ for (let i = 1; i <= string.length; i++) {\n    result.push(string.slice(0,\
    \ i));\n  }\n  return result;\n}\n", "    var result: string[] = [];\n    for\
    \ (var i = 1; i <= string.length; i++) {\n        result.push(string.substring(0,\
    \ i));\n    }\n    return result;\n}\n", "    let string_array = string.split('');\n\
    \    let result: string[] = [];\n    for (let i = 0; i < string_array.length;\
    \ i++) {\n        result.push(string_array.slice(0, i + 1).join(''));\n    }\n\
    \    return result;\n}\n", "  const result: string[] = [];\n  for (let i = 1;\
    \ i <= string.length; i++) {\n    result.push(string.slice(0, i));\n  }\n  return\
    \ result;\n}\n\nfunction* common_prefixes(\n  list: string[],\n  min_length: number\
    \ = 1,\n  longest_first: boolean = false\n): Generator<string[]> {\n  const n\
    \ = list.length;\n  const lists: string[][] = new Array(n);\n  let k = n;\n  while\
    \ (k--) {\n    lists[k] = all_prefixes(list[k]).filter(\n      (p) => p.length\
    \ >= min_length && !contains(lists[k], p)\n    );\n  }\n  if (longest_first) {\n\
    \    lists.forEach((l) => l.reverse());\n  }\n  const minlen = min(lists.map((l)\
    \ => l.length));\n  let index = minlen;\n  while (index--) {\n    const result:\
    \ string[] = [];\n    let i = n;\n    while (i--) {\n      result.push(lists[i][index]);\n\
    \    }\n    yield result;\n  }\n}\n", "  let prefixes: string[] = [];\n  let i\
    \ = 1;\n  while (i <= string.length) {\n    prefixes.push(string.slice(0, i));\n\
    \    i += 1;\n  }\n  return prefixes;\n}\n", "  return range(1, string.length\
    \ + 1).map(i => string.slice(0, i));\n}\n", "  const res: string[] = [];\n  for\
    \ (let i = 1; i <= string.length; i++) {\n    res.push(string.slice(0, i));\n\
    \  }\n  return res;\n}\n", "    let results: string[] = [];\n    for (let idx\
    \ = 0; idx < string.length; idx++) {\n        results.push(string.slice(0, idx\
    \ + 1));\n    }\n    return results;\n}\n", "    var prefixes: string[] = [];\n\
    \    for (var i = 1; i <= string.length; i++) {\n        prefixes.push(string.substring(0,\
    \ i));\n    }\n    return prefixes;\n}\n", "    const result: string[] = [];\n\
    \    for (let i = 1; i <= string.length; i++) {\n        result.push(string.slice(0,\
    \ i));\n    }\n    return result;\n}\n", "    const result: string[] = [];\n \
    \   for (let i = 1; i <= string.length; i++) {\n        result.push(string.slice(0,\
    \ i));\n    }\n    return result;\n}\n", "    const prefixes: string[] = [];\n\
    \    const n: number = string.length;\n    for (let i = 0; i < n; i++) {\n   \
    \     const s: string = string.substring(0, i + 1);\n        prefixes.push(s);\n\
    \    }\n    return prefixes;\n}\n", "  var output = []\n  for (var i = 1; i <=\
    \ string.length; i++) {\n    output.push(string.slice(0, i))\n  }\n  return output\n\
    }\n", "    const result: string[] = [];\n    for (let i = 1; i <= string.length;\
    \ i++) {\n        result.push(string.slice(0, i));\n    }\n    return result;\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
