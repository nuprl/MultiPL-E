name: HumanEval_48_is_palindrome
language: ts
prompt: "//Checks if given string is a palindrome\n// >>> is_palindrome('')\n// True\n\
  // >>> is_palindrome('aba')\n// True\n// >>> is_palindrome('aaaaa')\n// True\n//\
  \ >>> is_palindrome('zbcd')\n// False\nfunction is_palindrome(text: string): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_palindrome;\n  assert.deepEqual(candidate(\"\"\
  ),true);\n  assert.deepEqual(candidate(\"aba\"),true);\n  assert.deepEqual(candidate(\"\
  aaaaa\"),true);\n  assert.deepEqual(candidate(\"zbcd\"),false);\n  assert.deepEqual(candidate(\"\
  xywyx\"),true);\n  assert.deepEqual(candidate(\"xywyz\"),false);\n  assert.deepEqual(candidate(\"\
  xywzx\"),false);\n}\n\ntest();"
completions: ["    let len = text.length;\n    for (let i = 0; i < Math.floor(len\
    \ / 2); i++) {\n        if (text[i] !== text[len - i - 1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\n\n", "    if (text.length <=\
    \ 1) {\n        return true;\n    } else if (text[0] == text[text.length - 1])\
    \ {\n        return is_palindrome(text.slice(1, text.length - 1));\n    } else\
    \ {\n        return false;\n    }\n}\n", "    if (text === text.split('').reverse().join(''))\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}", " \
    \ if (text.length == 0) {\n    return true;\n  }\n  if (text[0] != text[text.length\
    \ - 1]) {\n    return false;\n  }\n  return is_palindrome(text.slice(1, text.length\
    \ - 1));\n}\n", "    let reverse = \"\";\n    for (let i = text.length - 1; i\
    \ >= 0; i--) {\n        reverse += text[i];\n    }\n    return reverse === text;\n\
    }\n", "    return text.split('').reverse().join('') === text;\n}\n", "    if (text.length\
    \ <= 1) {\n        return true;\n    } else if (text[0] != text[text.length -\
    \ 1]) {\n        return false;\n    } else {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n}\n", "    if (text.length === 0) {\n        return\
    \ true;\n    } else {\n        if (text[0] === text[text.length - 1]) {\n    \
    \        return is_palindrome(text.slice(1, text.length - 1));\n        } else\
    \ {\n            return false;\n        }\n    }\n}", "    let palindrome = true;\n\
    \    for (let i = 0; i < text.length / 2; i++) {\n        if (text[i] !== text[text.length\
    \ - 1 - i]) {\n            palindrome = false;\n        }\n    }\n    return palindrome;\n\
    }\n", "    return is_palindrome_recursive(text, 0, text.length - 1);\n}\n", " \
    \   let n = text.length;\n    let middle = n/2;\n    let end = n-1;\n    let is_palindrome\
    \ = true;\n    for (let i = 0; i < middle; i++) {\n        if (text[i] != text[end-i])\
    \ {\n            is_palindrome = false;\n            break;\n        }\n    }\n\
    \    return is_palindrome;\n}\n", "    return text === reverse(text);\n}\n", " \
    \ return text.split('').reverse().join('') === text;\n}\n", "  if (text.length\
    \ <= 1) {\n    return true;\n  } else if (text[0] !== text[text.length - 1]) {\n\
    \    return false;\n  } else {\n    return is_palindrome(text.slice(1, text.length\
    \ - 1));\n  }\n}\n", "    for (let i: number = 0; i < Math.floor(text.length /\
    \ 2); i++) {\n        if (text[i] !== text[text.length - 1 - i]) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\n", "    if (text.length\
    \ <= 1) {\n        return true;\n    }\n    else if (text[0] === text[text.length\
    \ - 1]) {\n        return is_palindrome(text.slice(1, text.length - 1));\n   \
    \ }\n    else {\n        return false;\n    }\n}\n", "  if (text.length <= 1)\
    \ {\n    return true;\n  }\n  else if (text[0] != text[text.length - 1]) {\n \
    \   return false;\n  }\n  else {\n    return is_palindrome(text.slice(1, text.length\
    \ - 1));\n  }\n}\n", "    if (text === '') {\n        return true;\n    }\n  \
    \  if (text[0] === text[text.length - 1]) {\n        return is_palindrome(text.slice(1,\
    \ text.length - 1));\n    }\n    return false;\n}\n", "    let left = 0;\n   \
    \ let right = text.length - 1;\n    while (left < right) {\n        if (text[left]\
    \ != text[right]) {\n            return false;\n        }\n        left += 1;\n\
    \        right -= 1;\n    }\n    return true;\n}\n\n", "    let i: number = 0;\n\
    \    let j: number = text.length - 1;\n    while (i < j) {\n        if (text[i]\
    \ !== text[j]) {\n            return false;\n        }\n        i++;\n       \
    \ j--;\n    }\n    return true;\n}\n\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
