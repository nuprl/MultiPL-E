name: HumanEval_149_sorted_list_sum
language: ts
prompt: "//Write a function that accepts a list of strings as a parameter,\n// deletes\
  \ the strings that have odd lengths from it,\n// and returns the resulted list with\
  \ a sorted order,\n// The list is always a list of strings and never an array of\
  \ numbers,\n// and it may contain duplicates.\n// The order of the list should be\
  \ ascending by length of each word, and you\n// should return the list sorted by\
  \ that rule.\n// If two words have the same length, sort the list alphabetically.\n\
  // The function should return a list of strings in sorted order.\n// You may assume\
  \ that all words will have the same length.\n// For example:\n// assert list_sort([\"\
  aa\", \"a\", \"aaa\"]) => [\"aa\"]\n// assert list_sort([\"ab\", \"a\", \"aaa\"\
  , \"cd\"]) => [\"ab\", \"cd\"]\nfunction sorted_list_sum(lst: string[]): string[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sorted_list_sum;\n  assert.deepEqual(candidate([\"\
  aa\", \"a\", \"aaa\"]),[\"aa\"]);\n  assert.deepEqual(candidate([\"school\", \"\
  AI\", \"asdf\", \"b\"]),[\"AI\", \"asdf\", \"school\"]);\n  assert.deepEqual(candidate([\"\
  d\", \"b\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"d\", \"dcba\",\
  \ \"abcd\", \"a\"]),[\"abcd\", \"dcba\"]);\n  assert.deepEqual(candidate([\"AI\"\
  , \"ai\", \"au\"]),[\"AI\", \"ai\", \"au\"]);\n  assert.deepEqual(candidate([\"\
  a\", \"b\", \"b\", \"c\", \"c\", \"a\"]),[]);\n  assert.deepEqual(candidate([\"\
  aaaa\", \"bbbb\", \"dd\", \"cc\"]),[\"cc\", \"dd\", \"aaaa\", \"bbbb\"]);\n}\n\n\
  test();"
completions: ["  return lst.filter(x => x.length % 2 === 0).sort((a, b) =>\n    a.length\
    \ > b.length ? 1 : -1\n  );\n}\n", "  let ret_arr: string[] = [];\n  let word_len_map:\
    \ {[k: string]: number} = {};\n  let word_arr_map: {[k: string]: string[]} = {};\n\
    \  for (let i = 0; i < lst.length; i++) {\n    let word = lst[i];\n    let word_len\
    \ = word.length;\n    if (word_len % 2 !== 0) {\n      if (word_len_map[word_len])\
    \ {\n        word_len_map[word_len]++;\n        word_arr_map[word_len].push(word);\n\
    \      } else {\n        word_len_map[word_len] = 1;\n        word_arr_map[word_len]\
    \ = [word];\n      }\n    }\n  }\n  for (let key in word_len_map) {\n    let words\
    \ = word_arr_map[key];\n    if (words.length > 1) {\n      words.sort();\n   \
    \ }\n    ret_arr = ret_arr.concat(words);\n  }\n  return ret_arr;\n}\nlet list1\
    \ = [\"aa\", \"a\", \"aaa\"];\nconsole.log(sorted_list_sum(list1));\nlet list2\
    \ = [\"ab\", \"a\", \"aaa\", \"cd\"];\nconsole.log(sorted_list_sum(list2));\n",
  "  return lst.filter(x => x.length % 2 !== 0).sort();\n}\n", "  if (lst.length ===\
    \ 0) {\n    return lst;\n  }\n  const filtered_odds = lst.filter(value => value.length\
    \ % 2 === 0);\n  const sorted_list = filtered_odds.sort((a, b) => {\n    if (a.length\
    \ < b.length) {\n      return -1;\n    }\n    if (a.length > b.length) {\n   \
    \   return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    if (a > b)\
    \ {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted_list;\n}\n",
  "  return lst.filter(function (elem) {\n    return elem.length % 2 == 0;\n  }).sort(function\
    \ (a, b) {\n    if (a.length < b.length) return -1;\n    if (a.length > b.length)\
    \ return 1;\n    if (a.length == b.length) {\n      if (a < b) return -1;\n  \
    \    if (a > b) return 1;\n    }\n    return 0;\n  });\n}\n", "  let result: string[]\
    \ = [];\n  for (let i: number = 0; i < lst.length; i++) {\n    if (lst[i].length\
    \ % 2 === 0) {\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return\
    \ result;\n}\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));",
  "  let result = lst.filter(x => x.length % 2 === 0).sort((a, b) => {\n    if (a.length\
    \ < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n   \
    \   return 1;\n    } else {\n      if (a < b) {\n        return -1;\n      } else\
    \ if (a > b) {\n        return 1;\n      } else {\n        return 0;\n      }\n\
    \    }\n  });\n  return result;\n}\n", "  if (lst.length <= 1) {\n    return lst;\n\
    \  }\n  const odd_length_words = lst.filter(item => item.length % 2 !== 0);\n\
    \  if (odd_length_words.length === 0) {\n    return lst;\n  }\n  odd_length_words.sort((a,\
    \ b) => a.length - b.length);\n  return odd_length_words;\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "  const sorted_list = lst.sort();\n  let previous_item = sorted_list[0];\n\
    \  for (let i = 1; i < sorted_list.length; i++) {\n    const item = sorted_list[i];\n\
    \    if (item === previous_item) {\n      sorted_list.splice(i, 1);\n      i--;\n\
    \    } else {\n      previous_item = item;\n    }\n  }\n  return sorted_list;\n\
    }\n", "  let dic: { [key: string]: number } = {};\n  for (let s of lst) {\n  \
    \  dic[s] = dic[s] ? dic[s] + 1 : 1;\n  }\n  let l: string[] = Object.keys(dic);\n\
    \  let ans: string[] = [];\n  for (let i = 1; i <= l.length; i++) {\n    for (let\
    \ j = 0; j < l.length; j++) {\n      if (l[j].length === i) {\n        for (let\
    \ k = 0; k < dic[l[j]]; k++) {\n          ans.push(l[j]);\n        }\n      }\n\
    \    }\n  }\n  return ans;\n}\n", "  return lst.filter(x => x.length % 2 === 0).sort();\n\
    }\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\n", "  const sorted_lst = lst.sort();\n  const\
    \ odd_length_words = sorted_lst.filter(word => word.length % 2 === 1);\n  return\
    \ odd_length_words;\n}\n\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]), [\"\
    aa\"]);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]), [\"ab\", \"\
    cd\"]);\n", "  let output = [];\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (lst[i].length % 2 == 0) {\n      output.push(lst[i]);\n    }\n  }\n  output.sort((a,\
    \ b) => a.length - b.length);\n  return output;\n}\n\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"])); // => [\"aa\"]\nconsole.log(sorted_list_sum([\"ab\",\
    \ \"a\", \"aaa\", \"cd\"])); // => [\"ab\", \"cd\"]\n", "  const arr: string[]\
    \ = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 ===\
    \ 0) {\n      arr.push(lst[i]);\n    }\n  }\n  arr.sort();\n  return arr;\n}\n\
    \nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\nconsole.log(sorted_list_sum([\"ab\", \"aa\"\
    , \"aaa\", \"cd\"]));\n", "  let result: string[] = [];\n  lst.forEach(element\
    \ => {\n    if (element.length % 2 == 0) {\n      result.push(element);\n    }\n\
    \  });\n  result.sort();\n  return result;\n}\n", "  let result: string[] = [];\n\
    \  for (let i: number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 ===\
    \ 0) {\n      result.push(lst[i]);\n    }\n  }\n  result.sort();\n  return result;\n\
    }\n\nlet myList3: string[] = [\"aaa\", \"ab\", \"a\", \"cd\"];\nconsole.log(sorted_list_sum(myList3));\n",
  "  return lst.filter(a => a.length % 2 === 0).sort((a, b) =>\n    a.length === b.length\
    \ ? a.localeCompare(b) : a.length - b.length\n  );\n}\nconsole.log(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nconsole.log(sorted_list_sum([\"ab\", \"a\", \"aaa\"\
    , \"cd\"]));\n", "  let sum_list: string[] = [];\n  let even_words: string[] =\
    \ lst.filter(word => word.length % 2 === 0);\n  let odd_words: string[] = lst.filter(word\
    \ => word.length % 2 === 1);\n  sum_list = even_words.concat(odd_words);\n  sum_list.sort();\n\
    \  return sum_list;\n}\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    console.log(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n", "  // create\
    \ a new array of odd length strings\n  let odd_strings = lst.filter(function(x)\
    \ {\n    return x.length % 2 == 1;\n  });\n  // sort that list alphabetically\n\
    \  odd_strings.sort();\n  // return the list\n  return odd_strings;\n}\nlet list_to_sort\
    \ = [\"aa\", \"a\", \"aaa\"];\nconsole.log(sorted_list_sum(list_to_sort));\n",
  "  let even_list: string[] = [];\n  let odd_list: string[] = [];\n  for (let i:\
    \ number = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 0) {\n   \
    \   even_list.push(lst[i]);\n    } else {\n      odd_list.push(lst[i]);\n    }\n\
    \  }\n  odd_list.sort();\n  even_list.sort();\n  let sorted_list: string[] = [];\n\
    \  for (let j: number = 0; j < odd_list.length; j++) {\n    sorted_list.push(odd_list[j]);\n\
    \  }\n  for (let z: number = 0; z < even_list.length; z++) {\n    sorted_list.push(even_list[z]);\n\
    \  }\n  return sorted_list;\n}\n\nlet my_string_list: string[] = [\"ab\", \"a\"\
    , \"aaa\", \"cd\"];\nconsole.log(sorted_list_sum(my_string_list));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
