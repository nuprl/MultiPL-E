language: ts
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    // TODO:\
    \ implement function\n    return x.toString(base);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  if (x ===\
    \ 0) {\n    return \"0\";\n  }\n  if (x < 0) {\n    throw new Error(\"x must be\
    \ non-negative\");\n  }\n  if (base < 0) {\n    throw new Error(\"base must be\
    \ positive\");\n  }\n  if (base > 10) {\n    throw new Error(\"base must be less\
    \ than 10\");\n  }\n  let res = \"\";\n  let n = x;\n  while (n > 0) {\n    res\
    \ = (n % base).toString() + res;\n    n = Math.floor(n / base);\n  }\n  return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    if (x ===\
    \ 0) {\n        return \"0\";\n    }\n\n    const digis = [];\n    while (x >\
    \ 0) {\n        digis.push(x % base);\n        x = Math.floor(x / base);\n   \
    \ }\n\n    return digis.reverse().join(\"\");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  return x.toString(base);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8, 3),\"\
    22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  let result\
    \ = \"\";\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x\
    \ / base);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    if (x <=\
    \ 0) {\n        return '0';\n    }\n    if (base <= 0) {\n        return '';\n\
    \    }\n    let digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let res\
    \ = '';\n    while (x > 0) {\n        res = digits[x % base] + res;\n        x\
    \ = Math.floor(x / base);\n    }\n    return res;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 2
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  if (x < base)\
    \ {\n    return x.toString();\n  }\n  return change_base(Math.floor(x / base),\
    \ base) + (x % base).toString();\n}\n\ntest('test change_base function', () =>\
    \ {\n  expect(change_base(8, 3)).toBe('22');\n  expect(change_base(8, 2)).toBe('1000');\n\
    \  expect(change_base(7, 2)).toBe('111');\n});\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpww1t0cfr.ts(17,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpww1t0cfr.ts(18,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpww1t0cfr.ts(19,3): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpww1t0cfr.ts(20,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    let res\
    \ = \"\";\n    while (x > 0) {\n        res = (x % base).toString() + res;\n \
    \       x = Math.floor(x / base);\n    }\n    return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    let dic:\
    \ string = \"0123456789\";\n    let result: string = \"\";\n    while (x > 0)\
    \ {\n        result = dic[x % base] + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  let str:\
    \ string = \"\";\n  let remain: number = 0;\n  while (x > 0) {\n    remain = x\
    \ % base;\n    x = Math.floor(x / base);\n    str = remain.toString() + str;\n\
    \  }\n  return str;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    let convert\
    \ = '';\n    let q = x;\n    let r = 0;\n    do {\n        r = q % base;\n   \
    \     q = Math.floor(q / base);\n        convert = String(r) + convert;\n    }\
    \ while (q > 0);\n    return convert;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 2
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    let s =\
    \ \"\";\n    let stack = new Stack();\n    while (x > 0) {\n        stack.push(x\
    \ % base);\n        x = Math.floor(x / base);\n    }\n    while (!stack.isEmpty())\
    \ {\n        s += stack.pop();\n    }\n    return s;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnqnm03tn.ts(12,21): error TS2552: Cannot find name
    ''Stack''. Did you mean ''stack''?

    '
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    if (x ===\
    \ 0) return \"0\";\n    let digit = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    let digits = [];\n    let answer = \"\";\n    while (x > 0) {\n       \
    \ let temp = x % base;\n        digits.push(temp);\n        x = Math.floor(x /\
    \ base);\n    }\n    for (let i = digits.length - 1; i >= 0; i--) {\n        answer\
    \ += digit[digits[i]];\n    }\n    return answer;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = change_base;\n  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    if (x ==\
    \ 0) {\n        return \"0\";\n    }\n\n    let result = \"\";\n    while (x !=\
    \ 0) {\n        result = x % base + result;\n        x = Math.floor(x / base);\n\
    \    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    let res\
    \ = \"\";\n    while (x >= base) {\n        res = String(x % base) + res;\n  \
    \      x = Math.floor(x / base);\n    }\n    res = String(x) + res;\n    return\
    \ res;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    return\
    \ x.toString(base);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  const reverseString\
    \ = (str: string): string => {\n    return str.split(\"\").reverse().join(\"\"\
    );\n  };\n\n  let conversion = \"\";\n  while (x > 0) {\n    conversion += (x\
    \ % base).toString();\n    x = Math.floor(x / base);\n  }\n  conversion = reverseString(conversion);\n\
    \  return conversion;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    return\
    \ x.toString(base);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = change_base;\n  assert.deepEqual(candidate(8,\
    \ 3),\"22\");\n  assert.deepEqual(candidate(9, 3),\"100\");\n  assert.deepEqual(candidate(234,\
    \ 2),\"11101010\");\n  assert.deepEqual(candidate(16, 2),\"10000\");\n  assert.deepEqual(candidate(8,\
    \ 2),\"1000\");\n  assert.deepEqual(candidate(7, 2),\"111\");\n  assert.deepEqual(candidate(2,\
    \ 3),\"2\");\n  assert.deepEqual(candidate(3, 4),\"3\");\n  assert.deepEqual(candidate(4,\
    \ 5),\"4\");\n  assert.deepEqual(candidate(5, 6),\"5\");\n  assert.deepEqual(candidate(6,\
    \ 7),\"6\");\n  assert.deepEqual(candidate(7, 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n    if (x ==\
    \ 0) {\n        return \"0\";\n    }\n    var result = \"\";\n    while (x !=\
    \ 0) {\n        result = String(x % base) + result;\n        x = Math.floor(x\
    \ / base);\n    }\n    return result;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822096
- exit_code: 0
  program: "//Change numerical base of input number x to base.\n// return string representation\
    \ after the conversion.\n// base numbers are less than 10.\n// >>> change_base(8,\
    \ 3)\n// '22'\n// >>> change_base(8, 2)\n// '1000'\n// >>> change_base(7, 2)\n\
    // '111'\nfunction change_base(x: number, base: number): string {\n  let result\
    \ = '';\n  while (x > 0) {\n    result = x % base + result;\n    x = Math.floor(x\
    \ / base);\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = change_base;\n\
    \  assert.deepEqual(candidate(8, 3),\"22\");\n  assert.deepEqual(candidate(9,\
    \ 3),\"100\");\n  assert.deepEqual(candidate(234, 2),\"11101010\");\n  assert.deepEqual(candidate(16,\
    \ 2),\"10000\");\n  assert.deepEqual(candidate(8, 2),\"1000\");\n  assert.deepEqual(candidate(7,\
    \ 2),\"111\");\n  assert.deepEqual(candidate(2, 3),\"2\");\n  assert.deepEqual(candidate(3,\
    \ 4),\"3\");\n  assert.deepEqual(candidate(4, 5),\"4\");\n  assert.deepEqual(candidate(5,\
    \ 6),\"5\");\n  assert.deepEqual(candidate(6, 7),\"6\");\n  assert.deepEqual(candidate(7,\
    \ 8),\"7\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822095
