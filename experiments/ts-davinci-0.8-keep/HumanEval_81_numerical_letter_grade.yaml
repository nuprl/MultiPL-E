name: HumanEval_81_numerical_letter_grade
language: ts
prompt: "//It is the last week of the semester and the teacher has to give the grades\n\
  // to students. The teacher has been making her own algorithm for grading.\n// The\
  \ only problem is, she has lost the code she used for grading.\n// She has given\
  \ you a list of GPAs for some students and you have to write \n// a function that\
  \ can output a list of letter grades using the following table:\n// GPA       |\
  \    Letter grade\n// 4.0                A+\n// > 3.7                A \n// > 3.3\
  \                A- \n// > 3.0                B+\n// > 2.7                B \n//\
  \ > 2.3                B-\n// > 2.0                C+\n// > 1.7                C\n\
  // > 1.3                C-\n// > 1.0                D+ \n// > 0.7              \
  \  D \n// > 0.0                D-\n// 0.0                E\n// Example:\n// grade_equation([4.0,\
  \ 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\nfunction numerical_letter_grade(grades:\
  \ number[]): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = numerical_letter_grade;\n  assert.deepEqual(candidate([4.0,\
  \ 3, 1.7, 2, 3.5]),[\"A+\", \"B\", \"C-\", \"C\", \"A-\"]);\n  assert.deepEqual(candidate([1.2]),[\"\
  D+\"]);\n  assert.deepEqual(candidate([0.5]),[\"D-\"]);\n  assert.deepEqual(candidate([0.0]),[\"\
  E\"]);\n  assert.deepEqual(candidate([1.0, 0.3, 1.5, 2.8, 3.3]),[\"D\", \"D-\",\
  \ \"C-\", \"B\", \"B+\"]);\n  assert.deepEqual(candidate([0.0, 0.7]),[\"E\", \"\
  D-\"]);\n}\n\ntest();"
completions: ["    return grades.map(grade => {\n        if (grade === 4.0) {\n  \
    \          return 'A+';\n        }\n        if (grade >= 3.7) {\n            return\
    \ 'A';\n        }\n        if (grade >= 3.3) {\n            return 'A-';\n   \
    \     }\n        if (grade >= 3.0) {\n            return 'B+';\n        }\n  \
    \      if (grade >= 2.7) {\n            return 'B';\n        }\n        if (grade\
    \ >= 2.3) {\n            return 'B-';\n        }\n        if (grade >= 2.0) {\n\
    \            return 'C+';\n        }\n        if (grade >= 1.7) {\n          \
    \  return 'C';\n        }\n        if (grade >= 1.3) {\n            return 'C-';\n\
    \        }\n        if (grade >= 1.0) {\n            return 'D+';\n        }\n\
    \        if (grade >= 0.7) {\n            return 'D';\n        }\n        if (grade\
    \ > 0.0) {\n            return 'D-';\n        }\n        return 'E';\n    });\n\
    }\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5])); //=> ['A+', 'B',\
    \ 'C-', 'C', 'A-']\n", "    const letters: string[] = ['E', 'D-', 'D', 'D+', 'C-',\
    \ 'C', 'C+', 'B-', 'B', 'B+', 'A-', 'A', 'A+'];\n    const letters_grades: number[]\
    \ = [0, 0.7, 1, 1.3, 1.7, 2, 2.3, 2.7, 3, 3.3, 3.7, 4, 4.01];\n    return grades.map(g\
    \ => {\n        for (let i = 0; i < letters_grades.length; i++) {\n          \
    \  if (g >= letters_grades[i]) {\n                return letters[i];\n       \
    \     }\n        }\n        return 'E';\n    });\n}\n", "  return grades.map(function(grade)\
    \ {\n    if (grade >= 4.0) {\n      return 'A+';\n    } else if (grade >= 3.7)\
    \ {\n      return 'A';\n    } else if (grade >= 3.3) {\n      return 'A-';\n \
    \   } else if (grade >= 3.0) {\n      return 'B+';\n    } else if (grade >= 2.7)\
    \ {\n      return 'B';\n    } else if (grade >= 2.3) {\n      return 'B-';\n \
    \   } else if (grade >= 2.0) {\n      return 'C+';\n    } else if (grade >= 1.7)\
    \ {\n      return 'C';\n    } else if (grade >= 1.3) {\n      return 'C-';\n \
    \   } else if (grade >= 1.0) {\n      return 'D+';\n    } else if (grade >= 0.7)\
    \ {\n      return 'D';\n    } else if (grade >= 0.0) {\n      return 'D-';\n \
    \   } else {\n      return 'E';\n    }\n  });\n}\n", "  const letterGrades: string[]\
    \ = [];\n  grades.forEach((grade) => {\n    if (grade >= 4.0) {\n      letterGrades.push(\"\
    A+\");\n    } else if (grade >= 3.7) {\n      letterGrades.push(\"A\");\n    }\
    \ else if (grade >= 3.3) {\n      letterGrades.push(\"A-\");\n    } else if (grade\
    \ >= 3.0) {\n      letterGrades.push(\"B+\");\n    } else if (grade >= 2.7) {\n\
    \      letterGrades.push(\"B\");\n    } else if (grade >= 2.3) {\n      letterGrades.push(\"\
    B-\");\n    } else if (grade >= 2.0) {\n      letterGrades.push(\"C+\");\n   \
    \ } else if (grade >= 1.7) {\n      letterGrades.push(\"C\");\n    } else if (grade\
    \ >= 1.3) {\n      letterGrades.push(\"C-\");\n    } else if (grade >= 1.0) {\n\
    \      letterGrades.push(\"D+\");\n    } else if (grade >= 0.7) {\n      letterGrades.push(\"\
    D\");\n    } else if (grade >= 0.0) {\n      letterGrades.push(\"D-\");\n    }\
    \ else {\n      letterGrades.push(\"E\");\n    }\n  });\n  return letterGrades;\n\
    }\n", "  return grades.map(grade => {\n    if (grade >= 4.0) {\n      return 'A+';\n\
    \    } else if (grade >= 3.7) {\n      return 'A';\n    } else if (grade >= 3.3)\
    \ {\n      return 'A-';\n    } else if (grade >= 3.0) {\n      return 'B+';\n\
    \    } else if (grade >= 2.7) {\n      return 'B';\n    } else if (grade >= 2.3)\
    \ {\n      return 'B-';\n    } else if (grade >= 2.0) {\n      return 'C+';\n\
    \    } else if (grade >= 1.7) {\n      return 'C';\n    } else if (grade >= 1.3)\
    \ {\n      return 'C-';\n    } else if (grade >= 1.0) {\n      return 'D+';\n\
    \    } else if (grade >= 0.7) {\n      return 'D';\n    } else if (grade >= 0.0)\
    \ {\n      return 'D-';\n    } else {\n      return 'E';\n    }\n  });\n}\nconsole.log(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5])); // [\"A+\", \"B\", \"C-\", \"C\", \"A-\"]\nconsole.log(numerical_letter_grade([2.0,\
    \ 3.1, 3.7, 4.0])); // [\"C+\", \"B-\", \"A-\", \"A+\"]\nconsole.log(numerical_letter_grade([3.8,\
    \ 3.3, 3.4, 3.9])); // [\"A\", \"A-\", \"A-\", \"A\"]\nconsole.log(numerical_letter_grade([1.5,\
    \ 2.1, 1.0, 2.7])); // [\"D+\", \"C-\", \"D+\", \"B-\"]\nconsole.log(numerical_letter_grade([3.5,\
    \ 3.3, 3.2, 3.1])); // [\"A-\", \"A-\", \"A-\", \"A-\"]\nconsole.log(numerical_letter_grade([1",
  "  return grades.map(grade => {\n    if (grade < 0.7) {\n      return \"E\";\n \
    \   } else if (grade < 1.0) {\n      return \"D-\";\n    } else if (grade < 1.3)\
    \ {\n      return \"D+\";\n    } else if (grade < 1.7) {\n      return \"D\";\n\
    \    } else if (grade < 2.0) {\n      return \"C-\";\n    } else if (grade < 2.3)\
    \ {\n      return \"C+\";\n    } else if (grade < 2.7) {\n      return \"C\";\n\
    \    } else if (grade < 3.0) {\n      return \"B-\";\n    } else if (grade < 3.3)\
    \ {\n      return \"B+\";\n    } else if (grade < 3.7) {\n      return \"B\";\n\
    \    } else if (grade <= 4.0) {\n      return \"A-\";\n    } else {\n      return\
    \ \"A+\";\n    }\n  });\n}\n", "  return grades.map(grade => {\n    switch (true)\
    \ {\n      case grade >= 4.0:\n        return 'A+';\n      case grade >= 3.7:\n\
    \        return 'A';\n      case grade >= 3.3:\n        return 'A-';\n      case\
    \ grade >= 3.0:\n        return 'B+';\n      case grade >= 2.7:\n        return\
    \ 'B';\n      case grade >= 2.3:\n        return 'B-';\n      case grade >= 2.0:\n\
    \        return 'C+';\n      case grade >= 1.7:\n        return 'C';\n      case\
    \ grade >= 1.3:\n        return 'C-';\n      case grade >= 1.0:\n        return\
    \ 'D+';\n      case grade >= 0.7:\n        return 'D';\n      case grade >= 0.0:\n\
    \        return 'D-';\n      default:\n        return 'E';\n    }\n  });\n}\n",
  "  return grades.map(n => {\n    if (n == 4.0) return 'A+';\n    if (n > 3.7) return\
    \ 'A';\n    if (n > 3.3) return 'A-';\n    if (n > 3.0) return 'B+';\n    if (n\
    \ > 2.7) return 'B';\n    if (n > 2.3) return 'B-';\n    if (n > 2.0) return 'C+';\n\
    \    if (n > 1.7) return 'C';\n    if (n > 1.3) return 'C-';\n    if (n > 1.0)\
    \ return 'D+';\n    if (n > 0.7) return 'D';\n    if (n > 0.0) return 'D-';\n\
    \    return 'E';\n  });\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2,\
    \ 3.5]));\n", "    const grade_table = [\n        {\n            \"letter\": \"\
    A+\",\n            \"gpa\": 4.0\n        },\n        {\n            \"letter\"\
    : \"A\",\n            \"gpa\": 3.7\n        },\n        {\n            \"letter\"\
    : \"A-\",\n            \"gpa\": 3.3\n        },\n        {\n            \"letter\"\
    : \"B+\",\n            \"gpa\": 3.0\n        },\n        {\n            \"letter\"\
    : \"B\",\n            \"gpa\": 2.7\n        },\n        {\n            \"letter\"\
    : \"B-\",\n            \"gpa\": 2.3\n        },\n        {\n            \"letter\"\
    : \"C+\",\n            \"gpa\": 2.0\n        },\n        {\n            \"letter\"\
    : \"C\",\n            \"gpa\": 1.7\n        },\n        {\n            \"letter\"\
    : \"C-\",\n            \"gpa\": 1.3\n        },\n        {\n            \"letter\"\
    : \"D+\",\n            \"gpa\": 1.0\n        },\n        {\n            \"letter\"\
    : \"D\",\n            \"gpa\": 0.7\n        },\n        {\n            \"letter\"\
    : \"D-\",\n            \"gpa\": 0.0\n        },\n        {\n            \"letter\"\
    : \"E\",\n            \"gpa\": 0.0\n        }\n    ];\n    return grades.map(\n\
    \        (grade) => grade_table.filter(\n            ({gpa}) => grade >= gpa\n\
    \        )[0].letter\n    );\n}", "    let letter_grades: string[] = [];\n   \
    \ for (let grade of grades) {\n        if (grade === 4.0) {\n            letter_grades.push('A+');\n\
    \        } else if (grade > 3.7) {\n            letter_grades.push('A');\n   \
    \     } else if (grade > 3.3) {\n            letter_grades.push('A-');\n     \
    \   } else if (grade > 3.0) {\n            letter_grades.push('B+');\n       \
    \ } else if (grade > 2.7) {\n            letter_grades.push('B');\n        } else\
    \ if (grade > 2.3) {\n            letter_grades.push('B-');\n        } else if\
    \ (grade > 2.0) {\n            letter_grades.push('C+');\n        } else if (grade\
    \ > 1.7) {\n            letter_grades.push('C');\n        } else if (grade > 1.3)\
    \ {\n            letter_grades.push('C-');\n        } else if (grade > 1.0) {\n\
    \            letter_grades.push('D+');\n        } else if (grade > 0.7) {\n  \
    \          letter_grades.push('D');\n        } else if (grade > 0.0) {\n     \
    \       letter_grades.push('D-');\n        } else {\n            letter_grades.push('E');\n\
    \        }\n    }\n    return letter_grades;\n}\nconsole.log(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));\n", "  return grades.map(grade => {\n    if (grade >= 4.0)\
    \ {\n      return 'A+';\n    } else if (grade >= 3.7) {\n      return 'A';\n \
    \   } else if (grade >= 3.3) {\n      return 'A-';\n    } else if (grade >= 3.0)\
    \ {\n      return 'B+';\n    } else if (grade >= 2.7) {\n      return 'B';\n \
    \   } else if (grade >= 2.3) {\n      return 'B-';\n    } else if (grade >= 2.0)\
    \ {\n      return 'C+';\n    } else if (grade >= 1.7) {\n      return 'C';\n \
    \   } else if (grade >= 1.3) {\n      return 'C-';\n    } else if (grade >= 1.0)\
    \ {\n      return 'D+';\n    } else if (grade >= 0.7) {\n      return 'D';\n \
    \   } else if (grade > 0.0) {\n      return 'D-';\n    } else {\n      return\
    \ 'E';\n    }\n  });\n}\n", "    let map = {\n        'A+': 4.0,\n        'A':\
    \ 3.7,\n        'A-': 3.3,\n        'B+': 3.0,\n        'B': 2.7,\n        'B-':\
    \ 2.3,\n        'C+': 2.0,\n        'C': 1.7,\n        'C-': 1.3,\n        'D+':\
    \ 1.0,\n        'D': 0.7,\n        'D-': 0.0,\n        'E': 0.0\n    }\n    return\
    \ grades.map(grade => {\n        let letter_grade = '';\n        for (let key\
    \ in map) {\n            if (grade >= map[key]) {\n                letter_grade\
    \ = key;\n                break;\n            }\n        }\n        return letter_grade;\n\
    \    });\n}\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n", " \
    \   let grading_system = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3:\
    \ 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0:\
    \ 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7:\
    \ 'D',\n        0.0: 'D-',\n        -1: 'E'\n    }\n    let cumulative = {}\n\
    \    Object.keys(grading_system).forEach(key => {\n        cumulative[key] = grading_system[key]\n\
    \    })\n    let grade_list = grades.map(x => {\n        if (cumulative[x] !==\
    \ undefined) return cumulative[x]\n        else {\n            let grading_keys\
    \ = Object.keys(cumulative)\n            grading_keys.forEach(function (key) {\n\
    \                if (Number(key) > x) {\n                    cumulative[key] =\
    \ grading_system[key]\n                }\n            })\n            return cumulative[Object.keys(cumulative)[0]]\n\
    \        }\n    })\n    return grade_list\n}", "  return grades.map(x => {\n \
    \   if (x == 4.0) {\n      return \"A+\";\n    } else if (x > 3.7) {\n      return\
    \ \"A\";\n    } else if (x > 3.3) {\n      return \"A-\";\n    } else if (x >\
    \ 3.0) {\n      return \"B+\";\n    } else if (x > 2.7) {\n      return \"B\"\
    ;\n    } else if (x > 2.3) {\n      return \"B-\";\n    } else if (x > 2.0) {\n\
    \      return \"C+\";\n    } else if (x > 1.7) {\n      return \"C\";\n    } else\
    \ if (x > 1.3) {\n      return \"C-\";\n    } else if (x > 1.0) {\n      return\
    \ \"D+\";\n    } else if (x > 0.7) {\n      return \"D\";\n    } else if (x >\
    \ 0.0) {\n      return \"D-\";\n    } else {\n      return \"E\";\n    }\n  });\n\
    }\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n", "  //write\
    \ your function here\n  let gradesArr = []\n  for (let i = 0; i < grades.length;\
    \ i++) {\n    if (grades[i] >= 4.0) {\n      gradesArr.push('A+')\n    } else\
    \ if (grades[i] >= 3.7) {\n      gradesArr.push('A')\n    } else if (grades[i]\
    \ >= 3.3) {\n      gradesArr.push('A-')\n    } else if (grades[i] >= 3.0) {\n\
    \      gradesArr.push('B+')\n    } else if (grades[i] >= 2.7) {\n      gradesArr.push('B')\n\
    \    } else if (grades[i] >= 2.3) {\n      gradesArr.push('B-')\n    } else if\
    \ (grades[i] >= 2.0) {\n      gradesArr.push('C+')\n    } else if (grades[i] >=\
    \ 1.7) {\n      gradesArr.push('C')\n    } else if (grades[i] >= 1.3) {\n    \
    \  gradesArr.push('C-')\n    } else if (grades[i] >= 1.0) {\n      gradesArr.push('D+')\n\
    \    } else if (grades[i] >= 0.7) {\n      gradesArr.push('D')\n    } else if\
    \ (grades[i] >= 0.0) {\n      gradesArr.push('D-')\n    } else {\n      gradesArr.push('E')\n\
    \    }\n  }\n  return gradesArr\n}\n", "  // Solution here...\n  const grade_letter\
    \ = [\n    { min: 4.0, grade: \"A+\" },\n    { min: 3.7, grade: \"A\" },\n   \
    \ { min: 3.3, grade: \"A-\" },\n    { min: 3.0, grade: \"B+\" },\n    { min: 2.7,\
    \ grade: \"B\" },\n    { min: 2.3, grade: \"B-\" },\n    { min: 2.0, grade: \"\
    C+\" },\n    { min: 1.7, grade: \"C\" },\n    { min: 1.3, grade: \"C-\" },\n \
    \   { min: 1.0, grade: \"D+\" },\n    { min: 0.7, grade: \"D\" },\n    { min:\
    \ 0.0, grade: \"D-\" },\n    { min: -1, grade: \"E\" }\n  ];\n  let result = [];\n\
    \  for (let grade of grades) {\n    for (let letter of grade_letter) {\n     \
    \ if (grade >= letter.min) {\n        result.push(letter.grade);\n        break;\n\
    \      }\n    }\n  }\n  return result;\n}\nconsole.log(numerical_letter_grade([4.0,\
    \ 3, 1.7, 2, 3.5]));", "  return grades.map(grade =>\n    grade >= 4.0\n     \
    \ ? \"A+\"\n      : grade >= 3.7\n      ? \"A\"\n      : grade >= 3.3\n      ?\
    \ \"A-\"\n      : grade >= 3.0\n      ? \"B+\"\n      : grade >= 2.7\n      ?\
    \ \"B\"\n      : grade >= 2.3\n      ? \"B-\"\n      : grade >= 2.0\n      ? \"\
    C+\"\n      : grade >= 1.7\n      ? \"C\"\n      : grade >= 1.3\n      ? \"C-\"\
    \n      : grade >= 1.0\n      ? \"D+\"\n      : grade >= 0.7\n      ? \"D\"\n\
    \      : grade >= 0.0\n      ? \"D-\"\n      : \"E\"\n  );\n}\n", "  const grade_map\
    \ = new Map([\n    [4.0, 'A+'],\n    [3.7, 'A'],\n    [3.3, 'A-'],\n    [3.0,\
    \ 'B+'],\n    [2.7, 'B'],\n    [2.3, 'B-'],\n    [2.0, 'C+'],\n    [1.7, 'C'],\n\
    \    [1.3, 'C-'],\n    [1.0, 'D+'],\n    [0.7, 'D'],\n    [0.0, 'D-'],\n  ]);\n\
    \  return grades.map((g) => {\n    let letter = grade_map.get(g) || 'E';\n   \
    \ if (g > 3.7) {\n      letter = 'A+';\n    }\n    return letter;\n  });\n}\n\n\
    console.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n", "  let letter_grades:\
    \ string[] = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i]\
    \ >= 4.0) {\n      letter_grades.push(\"A+\");\n    } else if (grades[i] > 3.7)\
    \ {\n      letter_grades.push(\"A\");\n    } else if (grades[i] > 3.3) {\n   \
    \   letter_grades.push(\"A-\");\n    } else if (grades[i] > 3.0) {\n      letter_grades.push(\"\
    B+\");\n    } else if (grades[i] > 2.7) {\n      letter_grades.push(\"B\");\n\
    \    } else if (grades[i] > 2.3) {\n      letter_grades.push(\"B-\");\n    } else\
    \ if (grades[i] > 2.0) {\n      letter_grades.push(\"C+\");\n    } else if (grades[i]\
    \ > 1.7) {\n      letter_grades.push(\"C\");\n    } else if (grades[i] > 1.3)\
    \ {\n      letter_grades.push(\"C-\");\n    } else if (grades[i] > 1.0) {\n  \
    \    letter_grades.push(\"D+\");\n    } else if (grades[i] > 0.7) {\n      letter_grades.push(\"\
    D\");\n    } else if (grades[i] > 0.0) {\n      letter_grades.push(\"D-\");\n\
    \    } else {\n      letter_grades.push(\"E\");\n    }\n  }\n  return letter_grades;\n\
    }\n", "    let result: string[] = [];\n    for (let grade of grades) {\n     \
    \   if (grade >= 4.0) {\n            result.push('A+');\n        } else if (grade\
    \ >= 3.7) {\n            result.push('A');\n        } else if (grade >= 3.3) {\n\
    \            result.push('A-');\n        } else if (grade >= 3.0) {\n        \
    \    result.push('B+');\n        } else if (grade >= 2.7) {\n            result.push('B');\n\
    \        } else if (grade >= 2.3) {\n            result.push('B-');\n        }\
    \ else if (grade >= 2.0) {\n            result.push('C+');\n        } else if\
    \ (grade >= 1.7) {\n            result.push('C');\n        } else if (grade >=\
    \ 1.3) {\n            result.push('C-');\n        } else if (grade >= 1.0) {\n\
    \            result.push('D+');\n        } else if (grade >= 0.7) {\n        \
    \    result.push('D');\n        } else if (grade >= 0.0) {\n            result.push('D-');\n\
    \        } else {\n            result.push('E');\n        }\n    }\n    return\
    \ result;\n}\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
