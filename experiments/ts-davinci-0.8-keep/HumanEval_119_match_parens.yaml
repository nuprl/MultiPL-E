name: HumanEval_119_match_parens
language: ts
prompt: "//You are given a list of two strings, both strings consist of open\n// parentheses\
  \ '(' or close parentheses ')' only.\n// Your job is to check if it is possible\
  \ to concatenate the two strings in\n// some order, that the resulting string will\
  \ be good.\n// A string S is considered to be good if and only if all parentheses\
  \ in S\n// are balanced. For example: the string '(())()' is good, while the string\n\
  // '())' is not.\n// Return 'Yes' if there's a way to make a good string, and return\
  \ 'No' otherwise.\n// Examples:\n// match_parens(['()(', ')']) == 'Yes'\n// match_parens([')',\
  \ ')']) == 'No'\nfunction match_parens(lst: string[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = match_parens;\n  assert.deepEqual(candidate([\"()(\"\
  , \")\"]),\"Yes\");\n  assert.deepEqual(candidate([\")\", \")\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (()(())\", \"())())\"]),\"No\");\n  assert.deepEqual(candidate([\")())\", \"(()()(\"\
  ]),\"Yes\");\n  assert.deepEqual(candidate([\"(())))\", \"(()())((\"]),\"Yes\");\n\
  \  assert.deepEqual(candidate([\"()\", \"())\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  (()(\", \"()))()\"]),\"Yes\");\n  assert.deepEqual(candidate([\"((((\", \"((())\"\
  ]),\"No\");\n  assert.deepEqual(candidate([\")(()\", \"(()(\"]),\"No\");\n  assert.deepEqual(candidate([\"\
  )(\", \")(\"]),\"No\");\n  assert.deepEqual(candidate([\"(\", \")\"]),\"Yes\");\n\
  \  assert.deepEqual(candidate([\")\", \"(\"]),\"Yes\");\n}\n\ntest();"
completions: ["  // Your code here\n  return 'No';\n}", "    const chars = lst.join('').split('');\n\
    \    let count = 0;\n    for (let i = 0; i < chars.length; i++) {\n        const\
    \ ch = chars[i];\n        if (ch === '(') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return count === 0 ? 'Yes' : 'No';\n}\n", "   \
    \ if (lst.length == 2) {\n        return (balance(lst[0] + lst[1]) ? 'Yes' : 'No');\n\
    \    } else if (lst.length == 1) {\n        return (balance(lst[0]) ? 'Yes' :\
    \ 'No');\n    } else {\n        return 'No';\n    }\n}\n", "  let l = lst[0];\n\
    \  let r = lst[1];\n  let lr = [...l, ...r];\n  let balance = 0;\n  for (let i\
    \ = 0; i < lr.length; i++) {\n    if (lr[i] === \"(\") {\n      balance++;\n \
    \   } else {\n      balance--;\n    }\n    if (balance < 0) {\n      return \"\
    No\";\n    }\n  }\n  return balance === 0 ? \"Yes\" : \"No\";\n}\n", "    let\
    \ str = '';\n    let bracket = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        for (let j = 0; j < lst[i].length; j++) {\n            if (lst[i][j]\
    \ === '(') {\n                bracket++;\n            } else {\n             \
    \   bracket--;\n            }\n            if (bracket < 0) {\n              \
    \  return 'No';\n            }\n        }\n    }\n    return bracket === 0 ? 'Yes'\
    \ : 'No';\n}\nconsole.log(match_parens(['()', '()']));\nconsole.log(match_parens(['()',\
    \ ')(']));\nconsole.log(match_parens(['()(', ')']));\nconsole.log(match_parens([')',\
    \ ')']));\n", "  return \"\";\n}\n", "  const stack = [];\n  for (let i = 0; i\
    \ < lst[0].length; i++) {\n    stack.push(lst[0][i]);\n  }\n  for (let i = 0;\
    \ i < lst[1].length; i++) {\n    if (stack.length === 0) {\n      return 'No';\n\
    \    }\n    const last = stack[stack.length - 1];\n    if (last === '(' && lst[1][i]\
    \ === ')') {\n      stack.pop();\n    } else {\n      stack.push(lst[1][i]);\n\
    \    }\n  }\n  return stack.length === 0 ? 'Yes' : 'No';\n}\n", "    let lst_0\
    \ = lst[0], lst_1 = lst[1], res_0 = \"\", res_1 = \"\";\n    while (lst_0.length\
    \ != 0) {\n        let i = 0;\n        while (i < lst_0.length) {\n          \
    \  if (lst_0[i] == '(') {\n                res_0 += lst_0[i];\n              \
    \  lst_0 = lst_0.substring(0, i) + lst_0.substring(i + 1);\n            } else\
    \ {\n                i++;\n            }\n        }\n        if (res_0.length\
    \ != 0) {\n            i = 0;\n            while (i < lst_1.length) {\n      \
    \          if (lst_1[i] == ')') {\n                    res_1 += lst_1[i];\n  \
    \                  lst_1 = lst_1.substring(0, i) + lst_1.substring(i + 1);\n \
    \               } else {\n                    i++;\n                }\n      \
    \      }\n        }\n    }\n    if (res_0.length == 0 && res_1.length == 0) {\n\
    \        return \"Yes\";\n    } else {\n        return \"No\";\n    }\n}\n\nconsole.log(match_parens(['()(',\
    \ ')']));\nconsole.log(match_parens([')', ')']));\nconsole.log(match_parens(['()()',\
    \ ')()']));\nconsole.log(match_parens(['()()()', '()()()']));\nconsole.log(match_parens(['(()()()',\
    \ '()()())']));\nconsole.log(match_parens(['((()()()', '()()()))']));\n\nexport\
    \ { }", "    return '';\n}\n", "  let goodString = '';\n  let badString = '';\n\
    \  let goodClose = 0;\n  let goodOpen = 0;\n  let badClose = 0;\n  let badOpen\
    \ = 0;\n  let goodClosed = false;\n  let badClosed = false;\n  let goodList =\
    \ [];\n  let badList = [];\n  for (let i = 0; i < lst[0].length; i++) {\n    if\
    \ (lst[0][i] === '(') {\n      goodOpen++;\n      goodList.push('(');\n    } else\
    \ {\n      goodList.push(')');\n      goodClose++;\n    }\n  }\n  for (let i =\
    \ 0; i < lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      badOpen++;\n\
    \      badList.push('(');\n    } else {\n      badList.push(')');\n      badClose++;\n\
    \    }\n  }\n  if (goodOpen > goodClose) {\n    goodString = goodList.join('')\
    \ + ')'.repeat(goodOpen - goodClose);\n  } else if (goodOpen < goodClose) {\n\
    \    goodString = goodList.join('') + '('.repeat(goodClose - goodOpen);\n  } else\
    \ {\n    goodString = goodList.join('');\n  }\n  if (badOpen > badClose) {\n \
    \   badString = badList.join('') + ')'.repeat(badOpen - badClose);\n  } else if\
    \ (badOpen < badClose) {\n    badString = badList.join('') + '('.repeat(badClose\
    \ - badOpen);\n  } else {\n    badString = badList.join('');\n  }\n  goodClosed\
    \ = checker(goodString);\n  badClosed = checker(badString);\n  if (goodClosed\
    \ === true && badClosed === true) {\n    return 'Yes';\n  } else {\n    return\
    \ 'No';\n  }\n}", "    let strA = lst[0];\n    let strB = lst[1];\n    let allParentheses\
    \ = [strA, strB].join('');\n    let result = allParentheses.split('').reduce((balance,\
    \ paren) => {\n        if (paren === '(') {\n            return balance + 1;\n\
    \        } else {\n            return balance - 1;\n        }\n    }, 0);\n  \
    \  return result === 0 ? 'Yes' : 'No';\n}\n", "  const nums = count_parens(lst);\n\
    \  if (nums[0] === nums[1]) {\n    return 'Yes';\n  }\n  return 'No';\n}\n", " \
    \ let open_cnt = 0;\n  let close_cnt = 0;\n  for (let s of lst) {\n    for (let\
    \ c of s) {\n      if (c === '(') {\n        open_cnt++;\n      } else {\n   \
    \     close_cnt++;\n      }\n    }\n  }\n  return open_cnt === close_cnt ? 'Yes'\
    \ : 'No';\n}\n", "    // your code here\n    let counter: number = 0;\n    let\
    \ result: string = '';\n    let open: number = 0;\n    let close: number = 0;\n\
    \    for (let i: number = 0; i < lst.length; i++) {\n        for (let j: number\
    \ = 0; j < lst[i].length; j++) {\n            let letter: string = lst[i][j];\n\
    \            if (letter === '(') {\n                open++;\n            } else\
    \ {\n                close++;\n            }\n        }\n    }\n    if (open >\
    \ close) {\n        counter = open - close;\n        for (let i: number = 0; i\
    \ < counter; i++) {\n            result += '(';\n        }\n        for (let i:\
    \ number = 0; i < lst.length; i++) {\n            result += lst[i];\n        }\n\
    \        for (let i: number = 0; i < counter; i++) {\n            result += ')';\n\
    \        }\n    } else if (open < close) {\n        counter = close - open;\n\
    \        for (let i: number = 0; i < counter; i++) {\n            result += ')';\n\
    \        }\n        for (let i: number = 0; i < lst.length; i++) {\n         \
    \   result += lst[i];\n        }\n        for (let i: number = 0; i < counter;\
    \ i++) {\n            result += '(';\n        }\n    } else {\n        for (let\
    \ i: number = 0; i < lst.length; i++) {\n            result += lst[i];\n     \
    \   }\n    }\n    let counter2: number = 0;\n    for (let i: number = 0; i < result.length;\
    \ i++) {\n        let letter: string = result[i];\n        if (letter === '(')\
    \ {\n            counter2++;\n        } else {\n            counter2--;\n    \
    \    }\n        if (counter2 < 0) {\n            return 'No';\n        }\n   \
    \ }\n    return 'Yes';\n}\n\nconsole.log(match_parens(['()()', '()'])); // 'Yes'\n",
  "    const num_open = (parens: string): number => {\n        const num = parens.split('').reduce((acc,\
    \ cur) => {\n            if (cur === '(') {\n                return acc + 1;\n\
    \            } else {\n                return acc - 1;\n            }\n      \
    \  }, 0);\n        return num;\n    };\n    const num_open1 = num_open(lst[0]);\n\
    \    const num_open2 = num_open(lst[1]);\n    if (num_open1 === 0) {\n       \
    \ if (num_open2 === 0) {\n            return 'Yes';\n        } else {\n      \
    \      return 'No';\n        }\n    } else if (num_open1 < 0) {\n        if (num_open2\
    \ <= 0) {\n            return 'No';\n        } else {\n            if (num_open1\
    \ + num_open2 === 0) {\n                return 'Yes';\n            } else {\n\
    \                return 'No';\n            }\n        }\n    } else {\n      \
    \  if (num_open2 >= 0) {\n            return 'No';\n        } else {\n       \
    \     if (num_open1 + num_open2 === 0) {\n                return 'Yes';\n    \
    \        } else {\n                return 'No';\n            }\n        }\n  \
    \  }\n}\n", "  let i = 0;\n  let j = lst[1].length - 1;\n  for (const c of lst[0])\
    \ {\n    if (c === '(') {\n      i++;\n    } else {\n      i--;\n    }\n  }\n\
    \  for (const c of lst[1]) {\n    if (c === '(') {\n      j++;\n    } else {\n\
    \      j--;\n    }\n  }\n  return i === 0 && j === 0 ? 'Yes' : 'No';\n}\n", " \
    \ let [open, close] = [0, 0];\n  for (let i = 0; i < lst[0].length; i++) {\n \
    \   if (lst[0][i] === '(') {\n      open++;\n    } else {\n      close++;\n  \
    \  }\n  }\n  for (let i = 0; i < lst[1].length; i++) {\n    if (lst[1][i] ===\
    \ '(') {\n      open++;\n    } else {\n      close++;\n    }\n  }\n  if (open\
    \ === close) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n", " \
    \   if (lst.length !== 2) {\n        return 'No';\n    }\n    const lhs = lst[0];\n\
    \    const rhs = lst[1];\n    let count: number = 0;\n    for (let i = 0; i <\
    \ lhs.length; i++) {\n        if (lhs[i] === '(') {\n            count++;\n  \
    \      } else {\n            count--;\n        }\n        if (count < 0) {\n \
    \           return 'No';\n        }\n    }\n    for (let i = 0; i < rhs.length;\
    \ i++) {\n        if (rhs[i] === '(') {\n            count++;\n        } else\
    \ {\n            count--;\n        }\n        if (count < 0) {\n            return\
    \ 'No';\n        }\n    }\n    return count === 0 ? 'Yes' : 'No';\n}\n\nconsole.log(match_parens(['()(',\
    \ ')']));\nconsole.log(match_parens([')', ')']));\n", "    let left_parens = 0;\n\
    \    let right_parens = 0;\n    lst[0].split('').forEach(x => {\n        if (x\
    \ === '(') {\n            left_parens++;\n        } else {\n            right_parens++;\n\
    \        }\n    });\n    lst[1].split('').forEach(x => {\n        if (x === '(')\
    \ {\n            left_parens++;\n        } else {\n            right_parens++;\n\
    \        }\n    });\n    if (left_parens === right_parens) {\n        return 'Yes';\n\
    \    } else {\n        return 'No';\n    }\n}\n", "  let open = 0, close = 0;\n\
    \  for (let i = 0; i < lst[0].length; i++) {\n    if (lst[0][i] === '(') {\n \
    \     open++;\n    } else {\n      close++;\n    }\n  }\n  for (let i = 0; i <\
    \ lst[1].length; i++) {\n    if (lst[1][i] === '(') {\n      open++;\n    } else\
    \ {\n      close++;\n    }\n  }\n  return (open === close ? 'Yes' : 'No');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
