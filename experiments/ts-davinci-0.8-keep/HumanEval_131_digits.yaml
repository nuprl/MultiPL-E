name: HumanEval_131_digits
language: ts
prompt: "//Given a positive integer n, return the product of the odd digits.\n// Return\
  \ 0 if all digits are even.\n// For example:\n// digits(1)  == 1\n// digits(4) \
  \ == 0\n// digits(235) == 15\nfunction digits(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = digits;\n  assert.deepEqual(candidate(5),5);\n  assert.deepEqual(candidate(54),5);\n\
  \  assert.deepEqual(candidate(120),1);\n  assert.deepEqual(candidate(5014),5);\n\
  \  assert.deepEqual(candidate(98765),315);\n  assert.deepEqual(candidate(5576543),2625);\n\
  \  assert.deepEqual(candidate(2468),0);\n}\n\ntest();"
completions: ["    let array = n.toString().split('');\n    let res = array.filter(el\
    \ => {\n        return parseInt(el) % 2 !== 0;\n    });\n    let result = res.reduce((acc,\
    \ cV) => {\n        return acc * parseInt(cV);\n    }, 1);\n    return result;\n\
    }\n", "    const nStr: string = n.toString();\n    let res: number = 1;\n    for\
    \ (let i: number = 0; i < nStr.length; i++) {\n        const tmp: number = +nStr[i];\n\
    \        if (tmp % 2 !== 0) {\n            res *= tmp;\n        }\n    }\n   \
    \ return res;\n}\n", "  return n.toString().split('').reduce((acc, n) => {\n \
    \   n = Number(n);\n    return n % 2 !== 0 ? acc * n : acc;\n  }, 1);\n}\n\nconsole.log(digits(1));\
    \ // 1\nconsole.log(digits(4)); // 0\nconsole.log(digits(235)); // 15\nconsole.log(digits(6249));\
    \ // 75\nconsole.log(digits(999)); // 729\nconsole.log(digits(1305)); // 15\n\
    console.log(digits(1676)); // 168\nconsole.log(digits(2825)); // 0\nconsole.log(digits(890));\
    \ // 0\nconsole.log(digits(3572)); // 0\nconsole.log(digits(128)); // 0\nconsole.log(digits(64));\
    \ // 0\nconsole.log(digits(0)); // 0\nconsole.log(digits(24)); // 0\nconsole.log(digits(25));\
    \ // 5\nconsole.log(digits(123)); // 6\nconsole.log(digits(86)); // 0\nconsole.log(digits(35));\
    \ // 5\nconsole.log(digits(22)); // 0\nconsole.log(digits(13)); // 1\nconsole.log(digits(62));\
    \ // 0\nconsole.log(digits(471678)); // 105\nconsole.log(digits(471679)); // 15\n\
    console.log(digits(471680)); // 0\nconsole.log(digits(471681)); // 63\nconsole.log(digits(471682));\
    \ // 0\nconsole.log(digits(471683)); // 105\nconsole.log(digits(471684)); // 0\n\
    console.log(digits(471685)); // 105\nconsole.log(digits(471686)); // 0\nconsole.log(digits(471687));\
    \ // 105\nconsole.log(digits(471688)); // 0\nconsole.log(digits(471689)); // 105\n\
    console.log(digits(471690)); // 0\nconsole.log(digits(471691)); // 105\nconsole.log",
  "  let result = 1;\n  while (n !== 0) {\n    const digit = n % 10;\n    if (digit\
    \ % 2 !== 0) {\n      result *= digit;\n    }\n    n = Math.floor(n / 10);\n \
    \ }\n  return result;\n}\n", "  const nString = n.toString();\n  let oddNumbers:\
    \ string[] = [];\n  for (let i = 0; i < nString.length; i++) {\n    if (nString[i]\
    \ % 2 !== 0) {\n      oddNumbers.push(nString[i]);\n    }\n  }\n  if (oddNumbers.length\
    \ === 0) {\n    return 0;\n  }\n  let numbers: number[] = [];\n  for (let i =\
    \ 0; i < oddNumbers.length; i++) {\n    numbers.push(parseInt(oddNumbers[i]));\n\
    \  }\n  let sum = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum *=\
    \ numbers[i];\n  }\n  return sum;\n}\nconsole.log(digits(123));\nconsole.log(digits(4));\n",
  "  return Array.from(String(n))\n    .map(Number)\n    .filter(isOdd)\n    .reduce((prod,\
    \ val) => prod * val, 1);\n}\n", "    //return n.toString().split('').map(Number).filter(x\
    \ => x % 2 === 1).reduce((x, y) => x * y, 1);\n    return n.toString().split('').reduce((x,\
    \ y) => y % 2 === \"1\" ? x * +y : x, 1);\n}\n\nexport function runTests(): void\
    \ {\n    const ts: number[] = [\n        1,\n        4,\n        235\n    ];\n\
    \    const as: number[] = [\n        1,\n        0,\n        15\n    ];\n\n  \
    \  for (let i: number = 0; i < ts.length; i++) {\n        const r: number = digits(ts[i]);\n\
    \        console.log(`${r} == ${as[i]}`);\n    }\n}", "  const arr: number[] =\
    \ n.toString().split('').map(Number);\n  let result: number = 1;\n  for (let i:\
    \ number = 0; i < arr.length; i++) {\n    if (arr[i] % 2 !== 0) {\n      result\
    \ *= arr[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(digits(235));\nconsole.log(digits(4));\n\
    console.log(digits(1));", "    let nString: string = n.toString();\n    let finalInt:\
    \ number = 1;\n    for (let i: number = 0; i < nString.length; i++) {\n      \
    \  if (nString[i] % 2 !== 0) {\n            finalInt *= Number(nString[i]);\n\
    \        }\n    }\n    return finalInt;\n}\n\nconsole.log(digits(235));\nconsole.log(digits(4));\n\
    console.log(digits(1));\nconsole.log(digits(0));\nconsole.log(digits(8));\nconsole.log(digits(123456));",
  "  let nums = n.toString().split('');\n  let result = 1;\n  for (let i = 0; i <\
    \ nums.length; i++) {\n    if (nums[i] % 2 === 1) {\n      result *= Number(nums[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let k = 0;\n    let s = String(n);\n\
    \    for (let i = 0; i < s.length; i++) {\n        let c = Number(s[i]);\n   \
    \     if (c % 2 === 1) {\n            k *= c;\n        }\n    }\n    return k;\n\
    }\n\nexport default digits;", "  return n\n    .toString()\n    .split(\"\")\n\
    \    .map(x => parseInt(x))\n    .filter(x => x % 2 !== 0)\n    .reduce((x, y)\
    \ => x * y, 1);\n}\n\nconsole.log(digits(435));", "    //stringy\n    // let numbers:\
    \ string = n.toString();\n    // let output: number = 1;\n    // for (let i: number\
    \ = 0; i < numbers.length; i++) {\n    //     if (Number(numbers[i]) % 2 === 1)\
    \ {\n    //         output *= Number(numbers[i]);\n    //     }\n    // }\n  \
    \  // return output;\n\n    //numbery\n    if (n === 0) {\n        return 0;\n\
    \    } else if (n % 2 === 1) {\n        return n % 10 * digits(Math.floor(n /\
    \ 10));\n    } else {\n        return digits(Math.floor(n / 10));\n    }\n}\n\n\
    console.log(digits(15));\nconsole.log(digits(123456789));\n", "    const number\
    \ = n.toString().split('');\n    let product = 1;\n    for (let i = 0; i < number.length;\
    \ i++) {\n        if (parseInt(number[i]) % 2 == 1) {\n            product *=\
    \ parseInt(number[i]);\n        }\n    }\n    return product;\n}\nconsole.log(digits(234));\n\
    console.log(digits(6789));\nconsole.log(digits(123456789));", "  const numbers:\
    \ number[] = n.toString().split('').map(e => Number(e));\n  const result: number[]\
    \ = numbers.filter(e => e % 2 !== 0);\n  return (result.length === 0) ? 0 : result.reduce((acc,\
    \ cur) => acc * cur);\n}\n\nexport default digits;", "    const numArr = String(n).split('');\n\
    \    const oddNumArr = numArr.filter(i => i % 2 !== 0);\n    const final = oddNumArr.reduce((acc,\
    \ curr) => acc * curr, 1);\n    return final;\n}", "    const allDigits = n.toString().split('').map(Number);\n\
    \    return allDigits.reduce((sum, current) => current % 2 !== 0 ? sum * current\
    \ : sum, 1);\n}\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n",
  "    const str = n.toString();\n    const arr = str.split('');\n    let result =\
    \ 0;\n    for (let i = 0; i < arr.length; i++) {\n        let int = parseInt(arr[i]);\n\
    \        if (int % 2 === 1) {\n            result += int;\n        }\n    }\n\
    \    return result;\n}\n\nconsole.log(digits(12345));", "    return parseInt(n.toString().split('').filter(x\
    \ => +x % 2).join(''), 10) || 0;\n}", "  let arr = n.toString().split('').map(num\
    \ => Number(num));\n  let oddNums = arr.filter(num => num % 2 != 0);\n  let product\
    \ = oddNums.reduce((acc, curr) => acc * curr, 1);\n  return product;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
