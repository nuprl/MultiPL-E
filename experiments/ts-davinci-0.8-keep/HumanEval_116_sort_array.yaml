name: HumanEval_116_sort_array
language: ts
prompt: "//In this Kata, you have to sort an array of non-negative integers according\
  \ to\n// number of ones in their binary representation in ascending order.\n// For\
  \ similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n// >>> sort_array([-2,\
  \ -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n// >>> sort_array([1, 0, 2, 3, 4]) [0,\
  \ 1, 2, 3, 4]\nfunction sort_array(arr: number[]): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([1, 5, 2,\
  \ 3, 4]),[1, 2, 4, 3, 5]);\n  assert.deepEqual(candidate([-2, -3, -4, -5, -6]),[-4,\
  \ -2, -6, -5, -3]);\n  assert.deepEqual(candidate([1, 0, 2, 3, 4]),[0, 1, 2, 4,\
  \ 3]);\n  assert.deepEqual(candidate([]),[]);\n  assert.deepEqual(candidate([2,\
  \ 5, 77, 4, 5, 3, 5, 7, 2, 3, 4]),[2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77]);\n  assert.deepEqual(candidate([3,\
  \ 6, 44, 12, 32, 5]),[32, 3, 5, 6, 12, 44]);\n  assert.deepEqual(candidate([2, 4,\
  \ 8, 16, 32]),[2, 4, 8, 16, 32]);\n  assert.deepEqual(candidate([2, 4, 8, 16, 32]),[2,\
  \ 4, 8, 16, 32]);\n}\n\ntest();"
completions: ["    let res: number[] = [];\n    for (let i = 0; i < arr.length; i++)\
    \ {\n        let binStr = arr[i].toString(2);\n        let onesCount = binStr.match(/1/g);\n\
    \        let oneCount = onesCount === null ? 0 : onesCount.length;\n        res.push(binStr\
    \ + '' + oneCount + '' + arr[i]);\n    }\n    res.sort();\n    return res.map(str\
    \ => parseInt(str.slice(str.length - 5, str.length)));\n}\n\nconsole.log(sort_array([1,\
    \ 5, 2, 3, 4]));\nconsole.log(sort_array([-2, -3, -4, -5, -6]));\nconsole.log(sort_array([1,\
    \ 0, 2, 3, 4]));\n", "    // return arr.sort((a, b) => (a - b)).sort((a, b) =>\
    \ (countOnes(a) - countOnes(b)));\n    return arr.sort((a, b) => (countOnes(a)\
    \ - countOnes(b)) || (a - b));\n}\n\nconsole.log(sort_array([1, 5, 2, 3, 4]));\
    \ // == [1, 2, 3, 4, 5]\nconsole.log(sort_array([-2, -3, -4, -5, -6])); // ==\
    \ [-6, -5, -4, -3, -2]\nconsole.log(sort_array([1, 0, 2, 3, 4])); //[0, 1, 2,\
    \ 3, 4]\n", "    let obj = [];\n    arr.forEach(el => {\n        let tmp = [];\n\
    \        tmp.push(el);\n        tmp.push(toBinary(el));\n        obj.push(tmp);\n\
    \    });\n    obj.sort((a, b) => a[1] - b[1]);\n    arr = obj.map(el => el[0]);\n\
    \    return arr;\n}\n\nconst toBinary = (num: number): number => {\n    let count\
    \ = 0;\n    while (num != 0) {\n        count += num & 1;\n        num >>= 1;\n\
    \    }\n    return count;\n}\n", "  return arr.sort((a, b) => {\n    const aStr\
    \ = a.toString(2);\n    const bStr = b.toString(2);\n    const aOnes = aStr.split(\"\
    \").filter(x => x === \"1\").length;\n    const bOnes = bStr.split(\"\").filter(x\
    \ => x === \"1\").length;\n    return aOnes === bOnes ? a - b : aOnes - bOnes;\n\
    \  });\n}\n\nexport function kata5(arr: number[]): number[] {\n  return sort_array(arr);\n\
    }", "  return arr.sort((a, b) =>\n    binaryCompare(a, b)\n  );\n}\n", "    return\
    \ arr.sort((a, b) => \n        a.toString(2).replace(/0/g, '').length - b.toString(2).replace(/0/g,\
    \ '').length || a - b);\n}\n", "  return arr.sort((a, b) => {\n    let sa = (a\
    \ >>> 0).toString(2).match(/1/g);\n    let sb = (b >>> 0).toString(2).match(/1/g);\n\
    \    if (sa === null && sb === null) return 0;\n    if (sa === null) return -1;\n\
    \    if (sb === null) return 1;\n    return sa.length - sb.length || a - b;\n\
    \  });\n}", "  return arr.sort((a, b) => {\n    if (to_binary(a).match(/1/g).length\
    \ === to_binary(b).match(/1/g).length) {\n      return a - b;\n    }\n    return\
    \ to_binary(a).match(/1/g).length - to_binary(b).match(/1/g).length;\n  });\n\
    }\n", "  return arr.sort((a, b) => {\n    return (a.toString(2).match(/1/g) ||\
    \ []).length - (b.toString(2).match(/1/g) || []).length || a - b;\n  });\n}\n\n\
    export default sort_array;", "  // place to store sorted arr\n  let result: number[]\
    \ = [];\n  // place to store sorted ones\n  let ones = [];\n  // place to store\
    \ sorted zeros\n  let zeros = [];\n  // create a loop to iterate through the array\n\
    \  for (let i = 0; i < arr.length; i++) {\n    // create a variable to hold binary\
    \ values\n    let binary: string = \"\";\n    // create a variable to hold decimal\
    \ values\n    let decimal: number = arr[i];\n    // create a while loop to divide\
    \ by 2\n    while (decimal > 0) {\n      binary = decimal % 2 + binary;\n    \
    \  decimal = Math.floor(decimal / 2);\n    }\n    // create a count variable to\
    \ count number of ones\n    let count: number = 0;\n    // create a loop to iterate\
    \ through binary variable\n    for (let j = 0; j < binary.length; j++) {\n   \
    \   // check if binary value is equal to one\n      if (binary[j] === \"1\") {\n\
    \        // add one to count\n        count++;\n      }\n    }\n    // create\
    \ if statement\n    if (count === 0) {\n      // push value to zeros\n      zeros.push(arr[i]);\n\
    \    } else {\n      // push value to ones\n      ones.push(arr[i]);\n    }\n\
    \  }\n  // sort the zero array\n  zeros.sort((a, b) => a - b);\n  // sort the\
    \ one array\n  ones.sort((a, b) => a - b);\n  // create a loop to iterate through\
    \ the zero array\n  for (let n = 0; n < zeros.length; n++) {\n    // push value\
    \ to result\n    result.push(zeros[n]);\n  }\n  // create a loop to iterate through\
    \ the one array\n  for (let m = 0; m < ones.length; m++) {\n    // push value\
    \ to result\n    result.push(ones[m]);\n  }\n  // return result\n  return result;\n\
    }\n", "  return arr.sort((a, b) => {\n    let aBin = a.toString(2);\n    let bBin\
    \ = b.toString(2);\n    let aOnes = (aBin.match(/1/g) || []).length;\n    let\
    \ bOnes = (bBin.match(/1/g) || []).length;\n    if (aOnes === bOnes) {\n     \
    \ return a - b;\n    }\n    return aOnes - bOnes;\n  });\n}\n", "  let comp =\
    \ (a: number, b: number) => {\n    let bitsA = a.toString(2).match(/1/g)?.length\
    \ ?? 0;\n    let bitsB = b.toString(2).match(/1/g)?.length ?? 0;\n    if (bitsA\
    \ === bitsB) {\n      return a - b;\n    }\n    return bitsA - bitsB;\n  };\n\
    \  arr.sort(comp);\n  return arr;\n}\n", "    return arr.sort((a, b) => {\n  \
    \      const a1 = a.toString(2).match(/1/g);\n        const b1 = b.toString(2).match(/1/g);\n\
    \        if (a1 && b1) {\n            if (a1.length !== b1.length) {\n       \
    \         return a1.length - b1.length;\n            } else {\n              \
    \  return a - b;\n            }\n        } else if (a1) {\n            return\
    \ -1;\n        } else if (b1) {\n            return 1;\n        } else {\n   \
    \         return a - b;\n        }\n    });\n}\n", "    // return arr.sort((a,\
    \ b) => a.toString(2).split('1').length - b.toString(2).split('1').length);\n\
    \    return arr.sort((a, b) => a.toString(2).split('1').length - b.toString(2).split('1').length);\n\
    }\nconsole.log(sort_array([1, 0, 2, 3, 4]));\n", "    return arr.sort((a, b) =>\
    \ {\n        let aBin = a.toString(2);\n        let bBin = b.toString(2);\n  \
    \      let aBinOnes = aBin.match(/1/g) ? aBin.match(/1/g).length : 0;\n      \
    \  let bBinOnes = bBin.match(/1/g) ? bBin.match(/1/g).length : 0;\n        return\
    \ aBinOnes !== bBinOnes ? aBinOnes - bBinOnes : a - b;\n    });\n}\n", "  return\
    \ arr.sort((a, b) => {\n    const abinary = a.toString(2);\n    const bbinary\
    \ = b.toString(2);\n    return (\n      (bbinary.match(/1/g) || []).length -\n\
    \      (abinary.match(/1/g) || []).length ||\n      a - b\n    );\n  });\n}\n",
  "    return arr.sort((a, b) =>\n        getOnesCount(a) === getOnesCount(b) ? a\
    \ - b : getOnesCount(a) - getOnesCount(b)\n    );\n}\n", "  return arr.sort((a,\
    \ b) => {\n    const binA = a.toString(2).split('').filter(d => d === '1').length;\n\
    \    const binB = b.toString(2).split('').filter(d => d === '1').length;\n   \
    \ return binA === binB ? a - b : binA - binB;\n  });\n}\n", "  return arr.sort((a,\
    \ b) => {\n    const binaryA = a.toString(2).split('').filter(num => num === '1').length;\n\
    \    const binaryB = b.toString(2).split('').filter(num => num === '1').length;\n\
    \    if (binaryA !== binaryB) {\n      return binaryA - binaryB;\n    }\n    return\
    \ a - b;\n  });\n}\n", "  return arr.sort((a, b) => {\n    let binA = a.toString(2).split('').filter(v\
    \ => v === '1').length;\n    let binB = b.toString(2).split('').filter(v => v\
    \ === '1').length;\n    return binA - binB || a - b;\n  });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
