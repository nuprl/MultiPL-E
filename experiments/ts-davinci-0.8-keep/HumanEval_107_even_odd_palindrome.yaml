name: HumanEval_107_even_odd_palindrome
language: ts
prompt: "//Given a positive integer n, return a tuple that has the number of even\
  \ and odd\n// integer palindromes that fall within the range(1, n), inclusive.\n\
  // Example 1:\n// Input: 3\n// Output: (1, 2)\n// Explanation:\n// Integer palindrome\
  \ are 1, 2, 3. one of them is even, and two of them are odd.\n// Example 2:\n//\
  \ Input: 12\n// Output: (4, 6)\n// Explanation:\n// Integer palindrome are 1, 2,\
  \ 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n// Note:\n\
  // 1. 1 <= n <= 10^3\n// 2. returned tuple has the number of even and odd integer\
  \ palindromes respectively.\nfunction even_odd_palindrome(n: number): [number, number]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = even_odd_palindrome;\n  assert.deepEqual(candidate(123),[8,\
  \ 13]);\n  assert.deepEqual(candidate(12),[4, 6]);\n  assert.deepEqual(candidate(3),[1,\
  \ 2]);\n  assert.deepEqual(candidate(63),[6, 8]);\n  assert.deepEqual(candidate(25),[5,\
  \ 6]);\n  assert.deepEqual(candidate(19),[4, 6]);\n  assert.deepEqual(candidate(9),[4,\
  \ 5]);\n  assert.deepEqual(candidate(1),[0, 1]);\n}\n\ntest();"
completions: ["  // e.g. (1, 2)\n  const result: [number, number] = [0, 0];\n  //\
    \ TODO\n  return result;\n}\n\nexport { even_odd_palindrome };", "    const dp\
    \ = new Array(n + 1).fill(0);\n    dp[0] = 0;\n    dp[1] = 1;\n    for (let i\
    \ = 2; i <= n; i++) {\n        dp[i] = dp[i >> 1] + (i & 1);\n    }\n    return\
    \ [dp[n >> 1], dp[n] - dp[n >> 1]];\n}\n\nexport { even_odd_palindrome };", " \
    \ let [even, odd] = [0, 0];\n  for (let i = 1; i <= n; i++) {\n    if (is_palindrome(i))\
    \ {\n      if (i % 2 === 0) {\n        even++;\n      } else {\n        odd++;\n\
    \      }\n    }\n  }\n  return [even, odd];\n}\n", "  // const [even, odd] = [0,\
    \ 0];\n  // for (let i = 1; i <= n; i++) {\n  //   if (is_palindrome(i)) {\n \
    \ //     (i % 2 ? odd : even)++;\n  //   }\n  // }\n  // return [even, odd];\n\
    \  return [0, 0];\n}\n\nexport default function runTests(): void {\n  const inputs\
    \ = [3, 12];\n  const expecteds = [[1, 2], [4, 6]];\n\n  inputs.forEach((input,\
    \ index) => {\n    const expected = expecteds[index];\n    const result = even_odd_palindrome(input);\n\
    \n    console.log(`${result} === ${expected}`);\n  });\n}", "    let even = 0;\n\
    \    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i))\
    \ {\n            if (i % 2 == 0) even++;\n            else odd++;\n        }\n\
    \    }\n    return [even, odd];\n}\n", "    let even_count = 0;\n    let odd_count\
    \ = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i)) {\n\
    \            even_count += i % 2 === 0 ? 1 : 0;\n            odd_count += i %\
    \ 2 === 1 ? 1 : 0;\n        }\n    }\n    return [even_count, odd_count];\n}\n",
  "    function isPalindrome(num: number): boolean {\n        if (num < 0) {\n   \
    \         return false;\n        }\n        let res = 0;\n        let n = num;\n\
    \        while (n > 0) {\n            res = res * 10 + n % 10;\n            n\
    \ = Math.floor(n / 10);\n        }\n        return res === num;\n    }\n    let\
    \ even_count = 0;\n    let odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n            \
    \    even_count++;\n            } else {\n                odd_count++;\n     \
    \       }\n        }\n    }\n    return [even_count, odd_count];\n}\n", "    let\
    \ even_count = 0;\n    let odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        let is_palindrome = true;\n        let j = i;\n        let rev = 0;\n\
    \        while (j > 0) {\n            let rem = j % 10;\n            rev = rev\
    \ * 10 + rem;\n            j = Math.floor(j / 10);\n        }\n        if (rev\
    \ != i) {\n            is_palindrome = false;\n        }\n        if (is_palindrome)\
    \ {\n            if (i % 2 == 0) {\n                even_count++;\n          \
    \  } else {\n                odd_count++;\n            }\n        }\n    }\n \
    \   return [even_count, odd_count];\n}\n\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));", "    let even = 0;\n    let odd = 0;\n\
    \    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i.toString()))\
    \ {\n            if (i % 2 == 0) {\n                even++;\n            } else\
    \ {\n                odd++;\n            }\n        }\n    }\n    return [even,\
    \ odd];\n}\n", "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <=\
    \ n; i++) {\n        if (is_palindrome(i.toString())) {\n            if (i % 2\
    \ === 0) {\n                even++;\n            } else {\n                odd++;\n\
    \            }\n        }\n    }\n    return [even, odd];\n}", "    const even:\
    \ number = Math.floor(n / 11) * 2;\n    let odd: number = Math.floor(n / 11);\n\
    \    if (n % 11 === 6) {\n        odd += 1;\n    } else if (n % 11 > 6) {\n  \
    \      odd += 2;\n    }\n    return [even, odd];\n}\n", "  if (n <= 0) {\n   \
    \ return [0, 0];\n  }\n  const counts = [0, 0];\n  for (let i = 1; i <= n; i++)\
    \ {\n    if (is_palindrome(i)) {\n      counts[i % 2]++;\n    }\n  }\n  return\
    \ counts;\n}\n", "  let even_palindrome = 0;\n  let odd_palindrome = 0;\n  let\
    \ i = 1;\n  while (i <= n) {\n    const str = String(i);\n    if (str === str.split(\"\
    \").reverse().join(\"\")) {\n      if (i % 2 === 0) {\n        even_palindrome++;\n\
    \      } else {\n        odd_palindrome++;\n      }\n    }\n    i++;\n  }\n  return\
    \ [even_palindrome, odd_palindrome];\n}\n\nconsole.log(even_odd_palindrome(3));\n\
    console.log(even_odd_palindrome(12));", "    let even: number = 0;\n    let odd:\
    \ number = 0;\n    if (n < 1) return [even, odd];\n    for (let i = 1; i <= n;\
    \ i++) {\n        if (palindrome(i)) {\n            (i % 2 == 0) ? even++ : odd++;\n\
    \        }\n    }\n    return [even, odd];\n}\n", "    let even_count = 0;\n \
    \   let odd_count = 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i))\
    \ {\n            if (i % 2 === 0) {\n                even_count++;\n         \
    \   } else {\n                odd_count++;\n            }\n        }\n    }\n\
    \    return [even_count, odd_count];\n}\n", "    let even = 0;\n    let odd =\
    \ 0;\n    for (let i = 1; i <= n; i++) {\n        if (is_palindrome(i.toString())\
    \ && i % 2 === 0) {\n            even++;\n        } else if (is_palindrome(i.toString())\
    \ && i % 2 !== 0) {\n            odd++;\n        }\n    }\n    return [even, odd];\n\
    }\n", "    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n\
    \        if (is_palindrome(i.toString())) {\n            if (i % 2 === 0) {\n\
    \                even++;\n            } else {\n                odd++;\n     \
    \       }\n        }\n    }\n    return [even, odd];\n}\n", "  let odd_count =\
    \ 0;\n  let even_count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 ==\
    \ 0) {\n      even_count++;\n    } else {\n      odd_count++;\n    }\n  }\n  return\
    \ [even_count, odd_count];\n}\n\nconsole.log(even_odd_palindrome(12));", "   \
    \ let even: number = 0;\n    let odd: number = 0;\n    for (let i = 1; i <= n;\
    \ i++) {\n        if (is_palindrome(i)) {\n            if (i % 2 == 0) {\n   \
    \             even++;\n            } else {\n                odd++;\n        \
    \    }\n        }\n    }\n    return [even, odd];\n}\n", "    function isPalindrome(n:\
    \ number): boolean {\n        if (n < 0) return false;\n        let reversed =\
    \ 0;\n        let copy = n;\n        while (copy) {\n            reversed = reversed\
    \ * 10 + copy % 10;\n            copy = Math.floor(copy / 10);\n        }\n  \
    \      return reversed === n;\n    }\n    let even = 0;\n    let odd = 0;\n  \
    \  for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n          \
    \  i % 2 === 0 ? even++ : odd++;\n        }\n    }\n    return [even, odd];\n\
    }\n\nconsole.log(even_odd_palindrome(3));\nconsole.log(even_odd_palindrome(12));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
