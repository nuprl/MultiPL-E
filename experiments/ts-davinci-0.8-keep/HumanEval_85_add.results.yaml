language: ts
name: HumanEval_85_add
results:
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            result +=\
    \ lst[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (i % 2 !== 0 && lst[i] % 2 === 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    let result = 0;\n    lst.forEach((value, index) =>\
    \ {\n        if (index % 2 === 1 && value % 2 === 0) {\n            result +=\
    \ value;\n        }\n    });\n    return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    let result = 0;\n    lst.forEach((element, i) => {\n\
    \        if(i % 2 !== 0 && element % 2 === 0) {\n            result += element;\n\
    \        }\n    });\n    return result;\n}\n\nconsole.log(add([4, 2, 6, 7]));\n\
    console.log(add([2, 3, 4, 7, 8, 1, 3, 4, 5, 6, 7, 1, 2, 3, 4, 7, 8, 9, 1, 2, 3,\
    \ 4, 5, 6, 8, 9, 10, 11, 1, 3, 5, 7, 9, 11]));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    22

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    return lst.filter((val, index) => val % 2 === 0 &&\
    \ index % 2 === 1).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  return lst.filter((value, index) => index % 2 === 1 &&\
    \ value % 2 === 0).reduce((acc, value) => acc + value, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    return lst.filter((el, index) => el % 2 === 0 && index\
    \ % 2 !== 0).reduce((a, b) => a + b);\n}\nconsole.log(add([4, 2, 6, 7]));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n\
    \  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    return lst.filter((n,i) => i % 2 !== 0 && n % 2 ===\
    \ 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nexport default add;\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  let sum = 0;\n  lst.forEach((item, index) => {\n    if\
    \ (index % 2 === 1 && item % 2 === 0) {\n      sum += item;\n    }\n  });\n  return\
    \ sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n\treturn lst.filter((e,i) => i % 2 && e % 2 === 0).reduce((a,b)\
    \ => a + b, 0);\n}\n\nconsole.log(add([4, 2, 6, 7]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      sum += lst[i];\n    }\n \
    \ }\n  return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  let evens = lst.filter((v, i) => i % 2 !== 0);\n  return\
    \ evens.reduce((a, b) => a + b, 0);\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n134\n\nshould\
    \ loosely deep-equal\n\n122\n    at test (/tmp/tmpyq69_7fk.js:12:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyq69_7fk.js:16:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 134,\n  expected:\
    \ 122,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  // let returnValue = 0;\n  // for (let i = 0; i < lst.length;\
    \ i++) {\n  //   if (i % 2 !== 0 && lst[i] % 2 === 0) {\n  //     returnValue\
    \ += lst[i];\n  //   }\n  // }\n  // return returnValue;\n  return lst.reduce((acc,\
    \ current, i) => {\n    if (i % 2 !== 0 && current % 2 === 0) {\n      return\
    \ acc + current;\n    }\n    return acc;\n  }, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  return lst.filter((e, index) => index % 2 && e % 2 ===\
    \ 0).reduce((acc, next) => acc + next, 0);\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n\
    \  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 !== 0 && lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n\
    \  }\n  return sum;\n}\nconsole.log(add([4, 2, 6, 7]));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    return lst.filter((a, index) => index % 2 == 1 && a\
    \ % 2 == 0).reduce((a, b) => a + b);\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add;\n \
    \ assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4, 5,\
    \ 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  return lst.filter((n, index) => index % 2 === 1 && n\
    \ % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nexport default add;\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  return lst.filter((e, i) => (i + 1) % 2 === 0 && e %\
    \ 2 === 0).reduce((a, b) => a + b);\n}\n\nexport default add;\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++)\
    \ {\n    if (i % 2 == 1 && lst[i] % 2 == 0) {\n      result += lst[i];\n    }\n\
    \  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add;\n  assert.deepEqual(candidate([4,\
    \ 88]),88);\n  assert.deepEqual(candidate([4, 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4,\
    \ 0, 6, 7]),0);\n  assert.deepEqual(candidate([4, 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n// Examples:\n// add([4, 2, 6, 7]) ==> 2\nfunction add(lst:\
    \ number[]): number {\n    let evenNum: number = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (i % 2 != 0 && lst[i] % 2 == 0) {\n            evenNum +=\
    \ lst[i];\n        }\n    }\n    return evenNum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add;\n  assert.deepEqual(candidate([4, 88]),88);\n  assert.deepEqual(candidate([4,\
    \ 5, 6, 7, 2, 122]),122);\n  assert.deepEqual(candidate([4, 0, 6, 7]),0);\n  assert.deepEqual(candidate([4,\
    \ 4, 6, 8]),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
