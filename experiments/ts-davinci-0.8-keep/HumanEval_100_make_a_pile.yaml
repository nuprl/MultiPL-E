name: HumanEval_100_make_a_pile
language: ts
prompt: "//Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in a list, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3,\
  \ 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5,\
  \ 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8,\
  \ 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"
completions: ["    // let x: number[] = [];\n    // for (let i = 1; i <= n; i++) {\n\
    \    //     x.push(i);\n    // }\n    // return x;\n    let x: number[] = [n];\n\
    \    let i: number = 2;\n    while (i <= n) {\n        if (n % 2 === 0) {\n  \
    \          x.push(x[x.length - 1] + i);\n        } else {\n            x.push(x[x.length\
    \ - 1] + i + 1);\n        }\n        i++;\n    }\n    return x;\n}\n", "  let\
    \ result: number[] = [n];\n  for (let i = 1; i < n; i++) {\n    result.push(result[i\
    \ - 1] + (result[i - 1] % 2 == 0 ? 2 : 1));\n  }\n  return result;\n}\n", "  const\
    \ result: number[] = [];\n  while (n > 0) {\n    result.push(n);\n    n = n %\
    \ 2 === 0 ? n + 1 : n + 2;\n  }\n  return result;\n}\n", "  let pile: number[]\
    \ = [];\n  let stones: number = n;\n  let level: number = 1;\n  let i: number\
    \ = 0;\n  while (i < n) {\n    pile.push(stones);\n    stones =\n      level %\
    \ 2 == 0\n        ? stones + level + 1\n        : stones + level + 2;\n    level++;\n\
    \    i++;\n  }\n  return pile;\n}\n", "    let res: number[] = [];\n    for (let\
    \ i = n; i > 0; i--) {\n        let n = i % 2 === 0 ? i + 1 : i + 2;\n       \
    \ res.push(n);\n    }\n    return res;\n}\nconsole.log(make_a_pile(3));\nconsole.log(make_a_pile(10));\n\
    console.log(make_a_pile(13));\n", "  const stones: number[] = [];\n  stones.push(n);\n\
    \  for (let i = 1; i < n; i++) {\n    if (n % 2 === 0) {\n      stones.push(stones[i\
    \ - 1] + 2);\n    } else {\n      stones.push(stones[i - 1] + 1);\n    }\n  }\n\
    \  return stones;\n}\n", "  let arr = [n];\n  for (let i = n; i > 0; i--) {\n\
    \    i % 2 === 0 ? arr.push(i - 1) : arr.push(i - 2);\n  }\n  return arr;\n}\n\
    \nconsole.log(make_a_pile(3));\n", "  // TODO: implement me\n  return [];\n}\n",
  "  let pile: number[] = [];\n  pile.push(n);\n  for (let i = 1; i < n; i++) {\n\
    \    if (n % 2 === 0) {\n      pile.push(n + i * 2);\n    } else {\n      pile.push(n\
    \ + i * 2 - 1);\n    }\n  }\n  return pile;\n}\n\ntest(\"test\", () => {\n  expect(make_a_pile(3)).toEqual([3,\
    \ 5, 7]);\n  expect(make_a_pile(4)).toEqual([4, 6, 8, 10]);\n  expect(make_a_pile(5)).toEqual([5,\
    \ 7, 9, 11, 13]);\n  expect(make_a_pile(10)).toEqual([10, 12, 14, 16, 18, 20,\
    \ 22, 24, 26, 28]);\n});", "  let myArray: number[] = [];\n  let i: number = 0;\n\
    \  while (i < n) {\n    i++;\n    myArray.push(i);\n  }\n  return myArray;\n}\n",
  "  let stones: number[] = [];\n  for (let i = 0; i < n; i++) {\n    stones.push(n\
    \ + 2 * i);\n  }\n  return stones;\n}\n", "    return [...Array(n).keys()].map(el\
    \ => {\n        if (el === 0) {\n            return n;\n        }\n        if\
    \ (n % 2 === 0) {\n            return el % 2 === 0 ? (el + 2) : (el + 1);\n  \
    \      } else {\n            return el % 2 === 0 ? (el + 1) : (el + 2);\n    \
    \    }\n    });\n}\nconsole.log(make_a_pile(3));\n", "  let result: number[] =\
    \ [];\n  for (let i = 0; i < n; i++) {\n    let next_odd = 1 + 2 * i;\n    let\
    \ next_even = 2 + 2 * i;\n    if (n % 2 === 0) {\n      result.push(next_even);\n\
    \    } else {\n      result.push(next_odd);\n    }\n  }\n  return result;\n}\n",
  "  const res: number[] = [];\n  for (let i = n; i < n * 2; i++) {\n    res.push(i);\n\
    \  }\n  return res;\n}\n", "  return [n, ...make_a_pile(n % 2 === 0 ? n + 1 :\
    \ n + 2)];\n}\n\nexport { make_a_pile };", "    const result: number[] = [];\n\
    \    let count = n;\n    for (let i = 0; i < n; i++) {\n        result.push(count);\n\
    \        if (count % 2 === 0) {\n            count += 1;\n        } else {\n \
    \           count += 2;\n        }\n    }\n    return result;\n}\n", "    let\
    \ result: number[] = [n];\n    let i = 1;\n    while (result[i - 1] > 2) {\n \
    \       if (result[i - 1] % 2 == 0) {\n            result.push(result[i - 1] -\
    \ 1);\n        } else {\n            result.push(result[i - 1] - 2);\n       \
    \ }\n        i++;\n    }\n    return result;\n}\n", "    let result: number[]\
    \ = [];\n    while (n > 0) {\n        result.push(n);\n        n = n % 2 === 0\
    \ ? n - 1 : n + 1;\n    }\n    return result;\n}\n", "    const result: number[]\
    \ = [];\n    for (let i = 0; i < n; i++) {\n        const number =\n         \
    \   i === 0 ? n : i % 2 === 0 ? result[i - 1] + 2 : result[i - 1] + 1;\n     \
    \   result.push(number);\n    }\n    return result;\n}\n", "    // your code here\n\
    \    return [];\n}\n\nconsole.log(make_a_pile(1));\nconsole.log(make_a_pile(2));\n\
    console.log(make_a_pile(3));\nconsole.log(make_a_pile(4));\nconsole.log(make_a_pile(5));\n\
    console.log(make_a_pile(6));\nconsole.log(make_a_pile(7));\nconsole.log(make_a_pile(8));\n\
    console.log(make_a_pile(9));\nconsole.log(make_a_pile(10));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
