name: HumanEval_20_find_closest_elements
language: ts
prompt: "//From a supplied list of numbers (of length at least two) select and return\
  \ two that are the closest to each\n// other and return them in order (smaller number,\
  \ larger number).\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n\
  // (2.0, 2.2)\n// >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n//\
  \ (2.0, 2.0)\nfunction find_closest_elements(numbers: number[]): [number, number]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = find_closest_elements;\n  assert.deepEqual(candidate([1.0,\
  \ 2.0, 3.9, 4.0, 5.0, 2.2]),[3.9, 4.0]);\n  assert.deepEqual(candidate([1.0, 2.0,\
  \ 5.9, 4.0, 5.0]),[5.0, 5.9]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0,\
  \ 5.0, 2.2]),[2.0, 2.2]);\n  assert.deepEqual(candidate([1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0]),[2.0, 2.0]);\n  assert.deepEqual(candidate([1.1, 2.2, 3.1, 4.1, 5.1]),[2.2,\
  \ 3.1]);\n}\n\ntest();"
completions: ["  const nums = [...numbers];\n  nums.sort((a, b) => a - b);\n  const\
    \ results = [...nums];\n  let minDist = nums[1] - nums[0];\n  for (let i = 1;\
    \ i < nums.length - 1; i++) {\n    const dist = nums[i + 1] - nums[i];\n    if\
    \ (dist < minDist) {\n      minDist = dist;\n      results[0] = nums[i];\n   \
    \   results[1] = nums[i + 1];\n    }\n  }\n  return results;\n}\n", "    if (numbers.length\
    \ < 2) {\n        throw new Error(\"Numbers array must be at least two elements\
    \ long\")\n    }\n    let sortedNumbers = numbers.sort();\n    let closest = [sortedNumbers[0],\
    \ sortedNumbers[1]];\n    let minDistance = Math.abs(sortedNumbers[0] - sortedNumbers[1]);\n\
    \    for (let i = 0; i < sortedNumbers.length - 1; i++) {\n        let distance\
    \ = Math.abs(sortedNumbers[i] - sortedNumbers[i + 1]);\n        if (distance <\
    \ minDistance) {\n            minDistance = distance;\n            closest = [sortedNumbers[i],\
    \ sortedNumbers[i + 1]];\n        }\n    }\n    return closest;\n}\n\n", "  let\
    \ closest: [number, number] = [numbers[0], numbers[1]];\n  let diff = closest[1]\
    \ - closest[0];\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j\
    \ = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[j] - numbers[i])\
    \ < diff) {\n        closest = [numbers[i], numbers[j]];\n        diff = Math.abs(numbers[j]\
    \ - numbers[i]);\n      }\n    }\n  }\n  return closest;\n}", "  let minimum =\
    \ numbers[0] - numbers[1];\n  let smallest = numbers[0];\n  let biggest = numbers[1];\n\
    \  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length;\
    \ j++) {\n      if (i != j) {\n        if (minimum > Math.abs(numbers[i] - numbers[j]))\
    \ {\n          minimum = Math.abs(numbers[i] - numbers[j]);\n          smallest\
    \ = numbers[i];\n          biggest = numbers[j];\n        }\n      }\n    }\n\
    \  }\n  return [smallest, biggest];\n}\n", "    let minimum = Infinity;\n    let\
    \ result: [number, number] = [numbers[0], numbers[1]];\n    for (let i = 0; i\
    \ < numbers.length - 1; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            if (Math.abs(numbers[i] - numbers[j]) < minimum) {\n   \
    \             minimum = Math.abs(numbers[i] - numbers[j]);\n                result\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return result;\n\
    }\n", "    const result: [number, number] = [numbers[0], numbers[1]];\n    let\
    \ minDiff = Math.abs(numbers[0] - numbers[1]);\n    for (let i = 0; i < numbers.length\
    \ - 1; i++) {\n        const diff = Math.abs(numbers[i] - numbers[i + 1]);\n \
    \       if (diff < minDiff) {\n            minDiff = diff;\n            result[0]\
    \ = numbers[i];\n            result[1] = numbers[i + 1];\n        }\n    }\n \
    \   return result;\n}\n", "    let min_diff = Infinity;\n    let min_diff_numbers:\
    \ [number, number] = [0, 0];\n    for (let i = 0; i < numbers.length - 1; i++)\
    \ {\n        for (let j = i + 1; j < numbers.length; j++) {\n            let current_diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n            if (current_diff < min_diff)\
    \ {\n                min_diff = current_diff;\n                min_diff_numbers\
    \ = [numbers[i], numbers[j]];\n            }\n        }\n    }\n    return min_diff_numbers;\n\
    }\n", "  if (numbers.length < 2) {\n    throw new Error(\"At least two numbers\
    \ are required\");\n  }\n  var first = numbers[0];\n  var second = numbers[1];\n\
    \  var closest: [number, number] = null;\n  for (var i = 0; i < numbers.length;\
    \ i++) {\n    for (var j = i + 1; j < numbers.length; j++) {\n      first = numbers[i];\n\
    \      second = numbers[j];\n      if (closest === null || Math.abs(closest[0]\
    \ - closest[1]) > Math.abs(first - second)) {\n        closest = [first, second];\n\
    \      }\n    }\n  }\n  return closest;\n}\n", "    let minDistance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let minIndex = 0;\n    for (let i = 1; i < numbers.length\
    \ - 1; i++) {\n        let distance = Math.abs(numbers[i] - numbers[i + 1]);\n\
    \        if (distance < minDistance) {\n            minDistance = distance;\n\
    \            minIndex = i;\n        }\n    }\n    return [numbers[minIndex], numbers[minIndex\
    \ + 1]];\n}\n\nexport {sum_elements, find_closest_elements}", "    if (numbers.length\
    \ < 2) {\n        throw new Error(\"must have at least two numbers\");\n    }\n\
    \    let closest: [number, number] = [numbers[0], numbers[1]];\n    let closest_diff\
    \ = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ const current_diff = Math.abs(numbers[i] - numbers[j]);\n            if (current_diff\
    \ < closest_diff) {\n                closest = [numbers[i], numbers[j]];\n   \
    \             closest_diff = current_diff;\n            }\n        }\n    }\n\
    \    return closest;\n}\n", "    let diff = Math.abs(numbers[0] - numbers[1]);\n\
    \    let closest: [number, number] = [numbers[0], numbers[1]];\n    for (let i\
    \ = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j < numbers.length;\
    \ j++) {\n            let newDiff = Math.abs(numbers[i] - numbers[j]);\n     \
    \       if (newDiff < diff) {\n                diff = newDiff;\n             \
    \   closest = [numbers[i], numbers[j]];\n            }\n        }\n    }\n   \
    \ if (closest[0] > closest[1]) {\n        return [closest[1], closest[0]];\n \
    \   }\n    return closest;\n}\n\n", "    let a = numbers[0];\n    let b = numbers[1];\n\
    \    let min_diff = Math.abs(a - b);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ if (Math.abs(numbers[i] - numbers[j]) < min_diff) {\n                a = numbers[i];\n\
    \                b = numbers[j];\n                min_diff = Math.abs(a - b);\n\
    \            }\n        }\n    }\n    return [a, b];\n}\nconsole.log(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));\nconsole.log(find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]));\n", "    if (numbers.length < 2) {\n        throw Error(`The\
    \ list of numbers must have at least two elements`);\n    }\n\n    let min_1:\
    \ number;\n    let min_2: number;\n    let min_difference: number = Number.MAX_VALUE;\n\
    \n    for (let i = 0; i < numbers.length - 1; i++) {\n        const current_difference\
    \ = Math.abs(numbers[i] - numbers[i + 1]);\n        if (current_difference < min_difference)\
    \ {\n            min_difference = current_difference;\n            min_1 = numbers[i];\n\
    \            min_2 = numbers[i + 1];\n        }\n    }\n\n    return [min_1, min_2];\n\
    }\n", "    if (numbers.length <= 1) {\n        throw new Error(\"Not enough numbers\"\
    );\n    }\n    let closest: [number, number] = [numbers[0], numbers[1]];\n   \
    \ let diff = Math.abs(closest[0] - closest[1]);\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let j = i + 1; j < numbers.length; j++) {\n           \
    \ let curDiff = Math.abs(numbers[i] - numbers[j]);\n            if (curDiff <\
    \ diff) {\n                closest = [numbers[i], numbers[j]];\n             \
    \   diff = curDiff;\n            }\n        }\n    }\n    if (closest[0] > closest[1])\
    \ {\n        return [closest[1], closest[0]];\n    }\n    return closest;\n}\n",
  "  if (numbers.length < 2) throw \"illegal argument\";\n  let ans: [number, number]\
    \ = [numbers[0], numbers[1]];\n  let diff = Math.abs(ans[0] - ans[1]);\n  for\
    \ (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length;\
    \ j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < diff) {\n        diff\
    \ = Math.abs(numbers[i] - numbers[j]);\n        ans = [numbers[i], numbers[j]];\n\
    \      }\n    }\n  }\n  return ans;\n}\n", "    let minDistance = Math.abs(numbers[0]\
    \ - numbers[1]);\n    let closestElement: [number, number] = [numbers[0], numbers[1]];\n\
    \    numbers.sort();\n    for (let i = 0; i < numbers.length - 1; i++) {\n   \
    \     if (Math.abs(numbers[i] - numbers[i + 1]) < minDistance) {\n           \
    \ minDistance = Math.abs(numbers[i] - numbers[i + 1]);\n            closestElement\
    \ = [numbers[i], numbers[i + 1]];\n        }\n    }\n    return closestElement;\n\
    }\n\n", "    // Complete your code here\n    return [0, 0];\n}\n\nconsole.log(find_closest_elements([1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]));\nconsole.log(find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]));\n", "    let s: number[] = []\n    for (let i = 0; i < numbers.length;\
    \ i++) {\n        for (let k = i + 1; k < numbers.length; k++) {\n           \
    \ let z = Math.abs(numbers[i] - numbers[k])\n            s.push(z)\n        }\n\
    \    }\n    s.sort()\n    let closest = s[0]\n    let index = numbers.indexOf(closest)\n\
    \    return [numbers[index], numbers[index + 1]]\n}\n", "    if (numbers.length\
    \ < 2) {\n        throw \"Must have at least two numbers\"\n    }\n    let closest_distance\
    \ = Math.abs(numbers[0] - numbers[1]);\n    let closest_pair = [numbers[0], numbers[1]];\n\
    \    for (let i = 0; i < numbers.length; i++) {\n        for (let j = i + 1; j\
    \ < numbers.length; j++) {\n            let distance = Math.abs(numbers[i] - numbers[j]);\n\
    \            if (distance < closest_distance) {\n                closest_distance\
    \ = distance;\n                closest_pair = [numbers[i], numbers[j]];\n    \
    \        }\n        }\n    }\n    return closest_pair;\n}\n", "    let closestSoFar:\
    \ number = Number.MAX_VALUE;\n    let closestPair: [number, number] = [numbers[0],\
    \ numbers[1]];\n    for (let i = 0; i < numbers.length; i++) {\n        for (let\
    \ j = i + 1; j < numbers.length; j++) {\n            let distance = Math.abs(numbers[i]\
    \ - numbers[j]);\n            if (distance < closestSoFar) {\n               \
    \ closestSoFar = distance;\n                closestPair = [numbers[i], numbers[j]];\n\
    \            }\n        }\n    }\n    return closestPair;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
