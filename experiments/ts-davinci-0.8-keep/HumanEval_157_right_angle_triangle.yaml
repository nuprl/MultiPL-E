name: HumanEval_157_right_angle_triangle
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n// sides form a right-angled triangle, False otherwise.\n// A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n// 90 degree.\n\
  // Example:\n// right_angle_triangle(3, 4, 5) == True\n// right_angle_triangle(1,\
  \ 2, 3) == False\nfunction right_angle_triangle(a: number, b: number, c: number):\
  \ boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = right_angle_triangle;\n  assert.deepEqual(candidate(3,\
  \ 4, 5),true);\n  assert.deepEqual(candidate(1, 2, 3),false);\n  assert.deepEqual(candidate(10,\
  \ 6, 8),true);\n  assert.deepEqual(candidate(2, 2, 2),false);\n  assert.deepEqual(candidate(7,\
  \ 24, 25),true);\n  assert.deepEqual(candidate(10, 5, 7),false);\n  assert.deepEqual(candidate(5,\
  \ 12, 13),true);\n  assert.deepEqual(candidate(15, 8, 17),true);\n  assert.deepEqual(candidate(48,\
  \ 55, 73),true);\n  assert.deepEqual(candidate(1, 1, 1),false);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),false);\n}\n\ntest();"
completions: ["  let sum: number;\n  let arr: number[] = [a, b, c];\n  let [s1, s2,\
    \ s3] = arr.sort((a, b) => a - b);\n  if (s1 * s1 + s2 * s2 === s3 * s3) {\n \
    \   return true;\n  } else {\n    return false;\n  }\n}\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\n", "    if (Math.pow(a,\
    \ 2) + Math.pow(b, 2) == Math.pow(c, 2)) {\n        return true;\n    } else {\n\
    \        return false;\n    }\n}\nconsole.log(right_angle_triangle(3, 4, 5));\
    \ // True\nconsole.log(right_angle_triangle(1, 2, 3)); // False\n", "    let sorted\
    \ = [a, b, c].sort((a, b) => a - b);\n    let bigger = sorted[2];\n    let sum\
    \ = sorted.reduce((a, b) => a + b);\n    let pyth = sum - bigger;\n    return\
    \ bigger ** 2 === pyth ** 2;\n}\n", "    return (a * a + b * b === c * c) || (a\
    \ * a + c * c === b * b) || (b * b + c * c === a * a);\n}\n\nconsole.log(right_angle_triangle(3,\
    \ 4, 5));\nconsole.log(right_angle_triangle(1, 2, 3));\nconsole.log(right_angle_triangle(5,\
    \ 3, 4));", "  if (a > b && a > c) {\n    return Math.pow(a, 2) === Math.pow(b,\
    \ 2) + Math.pow(c, 2);\n  }\n  if (b > a && b > c) {\n    return Math.pow(b, 2)\
    \ === Math.pow(a, 2) + Math.pow(c, 2);\n  }\n  if (c > a && c > b) {\n    return\
    \ Math.pow(c, 2) === Math.pow(a, 2) + Math.pow(b, 2);\n  }\n  return false;\n\
    }\n", "    let array = [a, b, c];\n    array.sort((a, b) => a - b);\n    return\
    \ array[0] ** 2 + array[1] ** 2 === array[2] ** 2;\n}\n", "  return Math.pow(a,\
    \ 2) + Math.pow(b, 2) === Math.pow(c, 2);\n}\n\nexport default right_angle_triangle;",
  "\tlet result: boolean = false;\n\tlet arr: number[] = [a, b, c];\n\tarr.sort((a,\
    \ b) => a - b);\n\tconst [a1, b1, c1] = arr;\n\tif (a1 * a1 + b1 * b1 === c1 *\
    \ c1) {\n\t\tresult = true;\n\t}\n\treturn result;\n}\n", "    if (a === 0 ||\
    \ b === 0 || c === 0) {\n        return false;\n    }\n    if (a * a + b * b ===\
    \ c * c) {\n        return true;\n    }\n    if (a * a + c * c === b * b) {\n\
    \        return true;\n    }\n    if (b * b + c * c === a * a) {\n        return\
    \ true;\n    }\n    return false;\n}\n", "    let sides = [a, b, c];\n    let\
    \ maxSide = Math.max(...sides);\n    return maxSide * maxSide === (sides[0] *\
    \ sides[0] + sides[1] * sides[1] + sides[2] * sides[2] - maxSide * maxSide);\n\
    }\n", "    let ans: boolean = false;\n    if (is_right_triangle(a, b, c)) {\n\
    \        ans = true;\n    }\n    if (is_right_triangle(a, c, b)) {\n        ans\
    \ = true;\n    }\n    if (is_right_triangle(b, c, a)) {\n        ans = true;\n\
    \    }\n    return ans;\n}\n", "    if (a > b && a > c) {\n        return c*c\
    \ + b*b === a*a;\n    }\n    if (b > a && b > c) {\n        return a*a + c*c ===\
    \ b*b;\n    }\n    if (c > a && c > b) {\n        return a*a + b*b === c*c;\n\
    \    }\n    return false;\n}\n\n", "    return a*a + b*b === c*c;\n}\n", "   \
    \ const [x, y, z] = [a, b, c].sort();\n    return z ** 2 === x ** 2 + y ** 2;\n\
    }\n", "    let sorted = [a, b, c].sort((a, b) => a - b);\n    return Math.pow(sorted[0],\
    \ 2) + Math.pow(sorted[1], 2) === Math.pow(sorted[2], 2);\n}\n", "    const sides:\
    \ number[] = [a, b, c];\n    sides.sort((a, b) => a - b);\n    if (sides[0] <=\
    \ 0 || sides[1] <= 0 || sides[2] <= 0) {\n        return false;\n    }\n    if\
    \ (sides[0] ** 2 + sides[1] ** 2 === sides[2] ** 2) {\n        return true;\n\
    \    }\n    return false;\n}\n", "    let sortArray = [a, b, c].sort((a, b) =>\
    \ b - a);\n    return a * a + b * b === c * c\n}\n", "  let angle: string;\n \
    \ let sides = [a, b, c].sort();\n  let a2 = sides[0] ** 2;\n  let b2 = sides[1]\
    \ ** 2;\n  let c2 = sides[2] ** 2;\n  if (a2 + b2 === c2) {\n    angle = \"right\
    \ angle\";\n  } else {\n    angle = \"not right angle\";\n  }\n  return angle;\n\
    }\n", "    let [x, y, z] = [a, b, c].sort((a, b) => a - b);\n    return (x * x\
    \ + y * y) === z * z;\n}\n", "    return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c,\
    \ 2);\n}\n\nconsole.log(right_angle_triangle(3, 4, 5));\nconsole.log(right_angle_triangle(1,\
    \ 2, 3));\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
