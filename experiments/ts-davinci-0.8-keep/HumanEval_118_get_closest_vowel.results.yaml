language: ts
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    const vowels = \"aeiou\";\n    const consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    let vowel = \"\";\n    let index = word.length -\
    \ 1;\n    if (index > 0) {\n        while (index > 0) {\n            const char\
    \ = word[index];\n            if (vowels.includes(char) && consonants.includes(word[index\
    \ - 1])) {\n                vowel = char;\n                break;\n          \
    \  }\n            index--;\n        }\n    }\n    return vowel;\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpi5lb9b1l.ts(19,24): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    ../../../../../tmp/tmpi5lb9b1l.ts(19,53): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    '
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  // 1st solution : only took care of half of the test cases\n\
    \  //   let v = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  //   let result = [];\n\
    \  //   for (let letter of word) {\n  //     if (v.includes(letter)) {\n  // \
    \      result.push(letter);\n  //     }\n  //   }\n  //   return result[result.length\
    \ - 1];\n  // 2nd solution : took care of all test cases but not optimal\n  //\
    \   let v = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  //   let indexOfVowel = -1;\n\
    \  //   for (let i = word.length - 1; i >= 0; i--) {\n  //     if (v.includes(word[i]))\
    \ {\n  //       indexOfVowel = i;\n  //       break;\n  //     }\n  //   }\n \
    \ //   if (indexOfVowel !== -1) {\n  //     return word[indexOfVowel];\n  // \
    \  } else {\n  //     return \"\";\n  //   }\n  // 3rd solution : took care of\
    \ all test cases, no indexOf\n  let v = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\
    \  for (let i = word.length - 1; i >= 0; i--) {\n    if (v.includes(word[i]))\
    \ {\n      return word[i];\n    }\n  }\n  return \"\";\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpmm4cpvaa.ts(38,11): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'];\n    let vowelIndex = -1;\n    let consonantIndex = -1;\n    for\
    \ (let i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ !== -1) {\n            vowelIndex = i;\n            break;\n        }\n    }\n\
    \    for (let i = vowelIndex - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i])\
    \ === -1) {\n            consonantIndex = i;\n            break;\n        }\n\
    \    }\n    return vowelIndex > -1 && consonantIndex > -1 ? word[vowelIndex] :\
    \ '';\n}\n\nconsole.log(get_closest_vowel(\"ab\")); //''\nconsole.log(get_closest_vowel(\"\
    FULL\")); //'U'\nconsole.log(get_closest_vowel(\"quick\")); //''\nconsole.log(get_closest_vowel(\"\
    yogurt\")); //'u'\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'i'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpwnb0yt9p.js:40:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpwnb0yt9p.js:50:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '

    U

    i

    u

    '
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I',\
    \ 'O', 'U'];\n    let ans = '';\n    let index = -1;\n    for (let i = word.length\
    \ - 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            ans\
    \ = word[i];\n            index = i;\n            break;\n        }\n    }\n \
    \   if (index > 1) {\n        for (let i = index - 1; i >= 0; i--) {\n       \
    \     if (!vowels.includes(word[i])) {\n                return ans;\n        \
    \    }\n        }\n    }\n    return '';\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp71y9ckdn.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmp71y9ckdn.ts(24,25): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    // Simple regexp that matches the specified word and\
    \ returns the first or last match of it\n    let re = /[aeiou]/ig\n    let matches\
    \ = word.match(re)\n    // if the word matches and there is a match return the\
    \ match\n    if (word.match(re) && matches.length > 0) {\n        return matches[matches.length\
    \ - 1]\n    }\n    return \"\"\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"\
    ));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'a'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpoeyv8ptu.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoeyv8ptu.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'a',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'u

    U

    i

    a

    '
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  const vowels = 'aeiou';\n  for (let i = word.length - 1;\
    \ i >= 0; i--) {\n    if (vowels.includes(word[i])) {\n      return word[i];\n\
    \    }\n  }\n  return '';\n}\n\nconsole.log(get_closest_vowel(\"yogurt\"));\n\
    console.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"quick\"\
    ));\nconsole.log(get_closest_vowel(\"ab\"));\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpz2o636av.ts(14,16): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    const listOfVowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    const listOfVowelsUpper = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n  \
    \  let firstConsonant: string;\n    let secondConsonant: string;\n    let positionOfFirstConsonant:\
    \ number;\n    let positionOfSecondConsonant: number;\n    let closestVowel: string;\n\
    \    let closestVowelUpper: string;\n    let positionOfClosestVowel: number;\n\
    \    let positionOfClosestVowelUpper: number;\n    let letterBeforeVowel: string;\n\
    \    let letterBeforeVowelUpper: string;\n    let positionOfLetterBeforeVowel:\
    \ number;\n    let positionOfLetterBeforeVowelUpper: number;\n    for (let i =\
    \ 0; i < word.length; i++) {\n        if (word[i] !== listOfVowels[0] && word[i]\
    \ !== listOfVowels[1] && word[i] !== listOfVowels[2] && word[i] !== listOfVowels[3]\
    \ && word[i] !== listOfVowels[4] && word[i] !== listOfVowelsUpper[0] && word[i]\
    \ !== listOfVowelsUpper[1] && word[i] !== listOfVowelsUpper[2] && word[i] !==\
    \ listOfVowelsUpper[3] && word[i] !== listOfVowelsUpper[4]) {\n            firstConsonant\
    \ = word[i];\n            positionOfFirstConsonant = i;\n            break;\n\
    \        }\n    }\n    for (let j = positionOfFirstConsonant + 1; j < word.length;\
    \ j++) {\n        if (word[j] !== listOfVowels[0] && word[j] !== listOfVowels[1]\
    \ && word[j] !== listOfVowels[2] && word[j] !== listOfVowels[3] && word[j] !==\
    \ listOfV\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3oiw8epv.ts(35,1): error TS1005: '')'' expected.

    ../../../../../tmp/tmp3oiw8epv.ts(56,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659822095
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = 'aeiou';\n  let result = [];\n  for (let i\
    \ = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i]) && word[i]\
    \ !== word[i - 1]) {\n      result.push(word[i]);\n    }\n  }\n  if (result.length)\
    \ {\n    return result[0];\n  } else {\n    return '';\n  }\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprpw7zo3m.ts(15,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  //write your code here\n  return \"\";\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpfw7maz2m.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfw7maz2m.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  const vowels = \"aeiouAEIOU\";\n  const consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\";\n  let newWord = word.split(\"\"\
    );\n  for (let i = newWord.length - 1; i >= 0; i--) {\n    if (consonants.includes(newWord[i])\
    \ && consonants.includes(newWord[i - 1])) {\n      for (let j = i + 1; j < newWord.length;\
    \ j++) {\n        if (vowels.includes(newWord[j])) {\n          return newWord[j];\n\
    \        }\n      }\n    }\n  }\n  return \"\";\n}\nconsole.log(get_closest_vowel(\"\
    yogurt\")); //==> \"u\"\nconsole.log(get_closest_vowel(\"FULL\")); //==> \"U\"\
    \nconsole.log(get_closest_vowel(\"quick\")); //==> \"\"\nconsole.log(get_closest_vowel(\"\
    ab\")); //==> \"\"\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp4q1rvfll.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"''.

    ../../../../../tmp/tmp4q1rvfll.ts(16,55): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"''.

    ../../../../../tmp/tmp4q1rvfll.ts(18,20): error TS2339: Property ''includes''
    does not exist on type ''"aeiouAEIOU"''.

    '
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    const vowels = \"aeiou\";\n    const consonants = \"\
    bcdfghjklmnpqrstvwxyz\";\n    let result = \"\";\n    let closest = \"\";\n  \
    \  for (let i = word.length - 1; i >= 0; i--) {\n        if (consonants.indexOf(word[i])\
    \ >= 0) {\n            for (let j = i + 1; j < word.length; j++) {\n         \
    \       if (vowels.indexOf(word[j]) >= 0) {\n                    if (closest ==\
    \ \"\") {\n                        closest = word[j];\n                    }\n\
    \                    if (j < word.length - 1) {\n                        if (consonants.indexOf(word[j\
    \ + 1]) >= 0) {\n                            result = word[j];\n             \
    \               break;\n                        }\n                    }\n   \
    \             }\n            }\n            break;\n        }\n    }\n    return\
    \ result != \"\" ? result : closest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmptco5so_2.js:39:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptco5so_2.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    const consonants = \"bcdfghjklmnpqrstvwxyz\";\n    const\
    \ vowels = \"aeiou\";\n    let result = \"\";\n    for (let i = word.length -\
    \ 1; i >= 0; i--) {\n        if (vowels.includes(word[i])) {\n            if (vowels.includes(word[i\
    \ - 1]) || consonants.includes(word[i - 1])) {\n                if (consonants.includes(word[i\
    \ + 1]) || vowels.includes(word[i + 1])) {\n                    result = word[i];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7dpg97fr.ts(16,20): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    ../../../../../tmp/tmp7dpg97fr.ts(17,24): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    ../../../../../tmp/tmp7dpg97fr.ts(17,60): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    ../../../../../tmp/tmp7dpg97fr.ts(18,32): error TS2339: Property ''includes''
    does not exist on type ''"bcdfghjklmnpqrstvwxyz"''.

    ../../../../../tmp/tmp7dpg97fr.ts(18,64): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n \
    \   word = word.toLowerCase();\n    let result = \"\";\n    let temp = word.length;\n\
    \    for (let i = 0; i < word.length; i++) {\n        if (vowels.indexOf(word[i])\
    \ >= 0) {\n            if (i - 1 > 0 && i + 1 < word.length) {\n             \
    \   if (vowels.indexOf(word[i - 1]) < 0 && vowels.indexOf(word[i + 1]) < 0) {\n\
    \                    let temp = i;\n                    result = word[i];\n  \
    \              }\n            }\n        }\n    }\n    return result;\n}\n\nexport\
    \ default get_closest_vowel;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n''\n\nshould loosely\
    \ deep-equal\n\n'u'\n    at test (/tmp/tmpl0ai5tsw.js:35:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpl0ai5tsw.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = \"aeiou\";\n    let str: string = \"\";\n\
    \    let pos: number = 0;\n    let min: number = word.length + 1;\n    for (let\
    \ i = word.length - 1; i >= 0; i--) {\n        if (vowels.indexOf(word[i]) > -1)\
    \ {\n            for (let j = 0; j < i; j++) {\n                if (vowels.indexOf(word[j])\
    \ == -1) {\n                    if (i - j < min) {\n                        min\
    \ = i - j;\n                        pos = i;\n                    }\n        \
    \            break;\n                }\n            }\n        }\n    }\n    if\
    \ (min < word.length + 1) {\n        str = word[pos];\n    }\n    return str;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'o'\n\nshould\
    \ loosely deep-equal\n\n'u'\n    at test (/tmp/tmpyxpxbx8s.js:37:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpyxpxbx8s.js:51:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'o',\n  expected:\
    \ 'u',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let wordArray = word.split('');\n    let answer = '';\n\
    \    let aValue = wordArray.reduceRight((acc, v, index) => {\n        if (v.match(/[aeiou]/gi))\
    \ {\n            if (wordArray[index + 1] && wordArray[index + 1].match(/[^aeiou]/gi))\
    \ {\n                if (wordArray[index - 1] && wordArray[index - 1].match(/[^aeiou]/gi))\
    \ {\n                    answer = v;\n                    return;\n          \
    \      }\n            }\n        }\n    });\n    return answer;\n}\n\nconsole.log(get_closest_vowel(\"\
    yogurt\"));\nconsole.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"\
    quick\"));\nconsole.log(get_closest_vowel(\"ab\"));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: "../../../../../tmp/tmpqpzxnon1.ts(14,40): error TS2345: Argument of type\
    \ '(acc: string, v: string, index: number) => void' is not assignable to parameter\
    \ of type '(previousValue: string, currentValue: string, currentIndex: number,\
    \ array: string[]) => string'.\n  Type 'void' is not assignable to type 'string'.\n"
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  let vowels = { \"a\": 0, \"e\": 0, \"i\": 0, \"o\": 0,\
    \ \"u\": 0 };\n  let vowels_found = [];\n  let vowels_arr = Object.keys(vowels);\n\
    \  let word_arr = word.split(\"\");\n  for (let i = word_arr.length - 1; i >=\
    \ 0; i--) {\n    let char = word_arr[i];\n    if (vowels_arr.includes(char)) {\n\
    \      vowels_found.push(char);\n    } else {\n      if (vowels_found.length >\
    \ 0) {\n        return vowels_found[0];\n      }\n    }\n  }\n  return \"\";\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe_0e_2j9.ts(18,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  const vowels = \"aeiou\";\n  let vowelsIdx = [];\n  let\
    \ answer = \"\";\n  let wordIdx = word.length - 1;\n  while (wordIdx >= 0) {\n\
    \    if (vowels.includes(word[wordIdx])) {\n      vowelsIdx.push(wordIdx);\n \
    \   }\n    wordIdx--;\n  }\n  if (vowelsIdx.length === 0) {\n    return \"\";\n\
    \  } else if (vowelsIdx.length === 1) {\n    return word[vowelsIdx[0]];\n  } else\
    \ {\n    for (let i = 0; i < vowelsIdx.length - 1; i++) {\n      if (vowelsIdx[i]\
    \ - vowelsIdx[i + 1] === 1) {\n        answer = vowelsIdx[i];\n      }\n    }\n\
    \    return word[answer];\n  }\n}\nconsole.log(get_closest_vowel(\"yogurt\"));\n\
    console.log(get_closest_vowel(\"FULL\"));\nconsole.log(get_closest_vowel(\"quick\"\
    ));\nconsole.log(get_closest_vowel(\"ab\"));\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = get_closest_vowel;\n\
    \  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdfdgxqer.ts(17,16): error TS2339: Property ''includes''
    does not exist on type ''"aeiou"''.

    '
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let i = word.length - 1;\n    while (i > 0) {\n     \
    \   let ch = word[i];\n        if (ch === 'a' || ch === 'e' || ch === 'i' || ch\
    \ === 'o' || ch === 'u') {\n            if (isConsonant(word[i - 1])) {\n    \
    \            return ch;\n            }\n        }\n        i--;\n    }\n    return\
    \ '';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"\
    yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpvj514rip.ts(16,17): error TS2304: Cannot find name
    ''isConsonant''.

    '
  timestamp: 1659822096
- exit_code: 1
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n    let vowels = {\n        'a': true,\n        'e': true,\n\
    \        'i': true,\n        'o': true,\n        'u': true,\n        'A': true,\n\
    \        'E': true,\n        'I': true,\n        'O': true,\n        'U': true\n\
    \    };\n    let arr = word.split('');\n    let vowel = '';\n    for (let i =\
    \ arr.length - 1; i >= 0; i--) {\n        if (vowels[arr[i]]) {\n            vowel\
    \ = arr[i];\n            if (i > 0 && !vowels[arr[i - 1]]) {\n               \
    \ return vowel;\n            }\n        }\n    }\n    return '';\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"\
    ),\"u\");\n  assert.deepEqual(candidate(\"full\"),\"u\");\n  assert.deepEqual(candidate(\"\
    easy\"),\"\");\n  assert.deepEqual(candidate(\"eAsy\"),\"\");\n  assert.deepEqual(candidate(\"\
    ali\"),\"\");\n  assert.deepEqual(candidate(\"bad\"),\"a\");\n  assert.deepEqual(candidate(\"\
    most\"),\"o\");\n  assert.deepEqual(candidate(\"ab\"),\"\");\n  assert.deepEqual(candidate(\"\
    ba\"),\"\");\n  assert.deepEqual(candidate(\"quick\"),\"\");\n  assert.deepEqual(candidate(\"\
    anime\"),\"i\");\n  assert.deepEqual(candidate(\"Asia\"),\"\");\n  assert.deepEqual(candidate(\"\
    Above\"),\"o\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'i'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmp2vsf7s8q.js:43:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2vsf7s8q.js:53:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'i',\n  expected:\
    \ '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822096
- exit_code: 2
  program: "//You are given a word. Your task is to find the closest vowel that stands\
    \ between \n// two consonants from the right side of the word (case sensitive).\n\
    // Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n// find any vowel met the above condition. \n// You may assume that\
    \ the given string contains English letter only.\n// Example:\n// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n// get_closest_vowel(\"FULL\") ==> \"U\"\n// get_closest_vowel(\"\
    quick\") ==> \"\"\n// get_closest_vowel(\"ab\") ==> \"\"\nfunction get_closest_vowel(word:\
    \ string): string {\n  // !!!\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n \
    \ const consonants = 'bcdfghjklmnpqrstvwxyz'.split('');\n  let left_vowel = '';\n\
    \  let right_vowel = '';\n  let left_consonant = '';\n  let right_consonant =\
    \ '';\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (vowels.includes(word[i]))\
    \ {\n      left_vowel = word[i];\n      break;\n    }\n  }\n  for (let i = 0;\
    \ i < word.length; i++) {\n    if (vowels.includes(word[i])) {\n      right_vowel\
    \ = word[i];\n      break;\n    }\n  }\n  for (let i = word.length - 1; i >= 0;\
    \ i--) {\n    if (consonants.includes(word[i])) {\n      left_consonant = word[i];\n\
    \      break;\n    }\n  }\n  for (let i = 0; i < word.length; i++) {\n    if (consonants.includes(word[i]))\
    \ {\n      right_consonant = word[i];\n      break;\n    }\n  }\n  if (right_vowel\
    \ === '' || left_vowel === '') {\n    return '';\n  }\n  if (right_consonant ===\
    \ '' || left_consonant === '') {\n    return '';\n  }\n  if (right_vowel === left_vowel)\
    \ {\n    return right_vowel;\n  }\n  return '';\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = get_closest_vowel;\n  assert.deepEqual(candidate(\"yogurt\"),\"u\");\n  assert.deepEqual(candidate(\"\
    full\"),\"u\");\n  assert.deepEqual(candidate(\"easy\"),\"\");\n  assert.deepEqual(candidate(\"\
    eAsy\"),\"\");\n  assert.deepEqual(candidate(\"ali\"),\"\");\n  assert.deepEqual(candidate(\"\
    bad\"),\"a\");\n  assert.deepEqual(candidate(\"most\"),\"o\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"\");\n  assert.deepEqual(candidate(\"ba\"),\"\");\n  assert.deepEqual(candidate(\"\
    quick\"),\"\");\n  assert.deepEqual(candidate(\"anime\"),\"i\");\n  assert.deepEqual(candidate(\"\
    Asia\"),\"\");\n  assert.deepEqual(candidate(\"Above\"),\"o\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmptq7ygsof.ts(20,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmptq7ygsof.ts(26,16): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmptq7ygsof.ts(32,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    ../../../../../tmp/tmptq7ygsof.ts(38,20): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822096
