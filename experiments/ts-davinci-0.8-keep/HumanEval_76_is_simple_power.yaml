name: HumanEval_76_is_simple_power
language: ts
prompt: "//Your task is to write a function that returns true if a number x is a simple\n\
  // power of n and false in other cases.\n// x is a simple power of n if n**int=x\n\
  // For example:\n// is_simple_power(1, 4) => true\n// is_simple_power(2, 2) => true\n\
  // is_simple_power(8, 2) => true\n// is_simple_power(3, 2) => false\n// is_simple_power(3,\
  \ 1) => false\n// is_simple_power(5, 3) => false\nfunction is_simple_power(x: number,\
  \ n: number): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_simple_power;\n  assert.deepEqual(candidate(16,\
  \ 2),true);\n  assert.deepEqual(candidate(143214, 16),false);\n  assert.deepEqual(candidate(4,\
  \ 2),true);\n  assert.deepEqual(candidate(9, 3),true);\n  assert.deepEqual(candidate(16,\
  \ 4),true);\n  assert.deepEqual(candidate(24, 2),false);\n  assert.deepEqual(candidate(128,\
  \ 4),false);\n  assert.deepEqual(candidate(12, 6),false);\n  assert.deepEqual(candidate(1,\
  \ 1),true);\n  assert.deepEqual(candidate(1, 12),true);\n}\n\ntest();"
completions: ["    let i = 0;\n    while (Math.pow(n, i) < x) {\n        i++;\n  \
    \  }\n    if (Math.pow(n, i) === x) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}\n\nconsole.log(is_simple_power(27, 3));\nconsole.log(is_simple_power(24,\
    \ 2));\nconsole.log(is_simple_power(23, 5));\nconsole.log(is_simple_power(1, 4));\n\
    console.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3,\
    \ 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n",
  "  let p = Math.log(x) / Math.log(n);\n  return Number.isInteger(p);\n}\n", "  let\
    \ isSimplePower = false;\n  let i = 1;\n  while (x >= Math.pow(n, i)) {\n    if\
    \ (x === Math.pow(n, i)) {\n      isSimplePower = true;\n    }\n    i++;\n  }\n\
    \  return isSimplePower;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ let result = Math.log(x) / Math.log(n);\n  return result % 1 === 0;\n}\n", " \
    \ if (x === 1) return true;\n  for (let i = 0; i < x; i++) {\n    if (Math.pow(n,\
    \ i) === x) return true;\n  }\n  return false;\n}\n", "  return Math.log(x) /\
    \ Math.log(n) % 1 === 0;\n}\n\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(2, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   return Math.pow(n, Math.round(Math.log(x) / Math.log(n))) === x;\n}\nconsole.log(is_simple_power(8,\
    \ 2));", "    return Math.log(x) / Math.log(n) % 1 === 0\n}\n", "  let result\
    \ = Math.log(x) / Math.log(n);\n  return Number.isInteger(result);\n}\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let counter = 0;\n  while (Math.pow(n, counter) <= x) {\n    if (Math.pow(n,\
    \ counter) === x) {\n      return true;\n    }\n    counter++;\n  }\n  return\
    \ false;\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \ return x === Math.pow(n, Math.round(Math.log(x) / Math.log(n)));\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  return x % n === 0 ? is_simple_power(x / n, n) : x === 1;\n}\n", " \
    \ return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let root = Math.pow(x,\
    \ 1 / n);\n    return (root % 1) === 0;\n}\n\nexport default is_simple_power;",
  "  return Math.log(x) / Math.log(n) % 1 === 0;\n}\n", "    let base = x;\n    while\
    \ (base >= n) {\n        if (base % n === 0) {\n            base /= n;\n     \
    \   } else {\n            return false;\n        }\n    }\n    return base ===\
    \ 1;\n}\n", "  if (x === n) return true;\n  if (n < 2) return false;\n  return\
    \ is_simple_power(x / n, n);\n}\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2,\
    \ 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\n\
    console.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));", " \
    \   let i = 1;\n    let result = 1;\n    while (result < x) {\n        result\
    \ = n ** i;\n        i++;\n    }\n    return result === x;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));", "  let result = x;\n  while (result > 1) {\n    result /= n;\n  }\n \
    \ return result === 1;\n}\n\nexport default is_simple_power;", "  return x % n\
    \ === 0 ? is_simple_power(x / n, n) : x === 1;\n}\n\nconsole.log(is_simple_power(1,\
    \ 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\n\
    console.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5,\
    \ 3));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
