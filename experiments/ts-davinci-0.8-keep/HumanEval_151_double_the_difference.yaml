name: HumanEval_151_double_the_difference
language: ts
prompt: "//Given a list of numbers, return the sum of squares of the numbers\n// in\
  \ the list that are odd. Ignore numbers that are negative or not integers.\n// double_the_difference([1,\
  \ 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n// double_the_difference([-1, -2, 0]) == 0\n\
  // double_the_difference([9, -2]) == 81\n// double_the_difference([0]) == 0  \n\
  // If the input list is empty, return 0.\nfunction double_the_difference(lst: number[]):\
  \ number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = double_the_difference;\n  assert.deepEqual(candidate([]),0);\n\
  \  assert.deepEqual(candidate([5.0, 4.0]),25);\n  assert.deepEqual(candidate([0.1,\
  \ 0.2, 0.3]),0);\n  assert.deepEqual(candidate([-10.0, -20.0, -30.0]),0);\n  assert.deepEqual(candidate([-1.0,\
  \ -2.0, 8.0]),0);\n  assert.deepEqual(candidate([0.2, 3.0, 5.0]),34);\n  assert.deepEqual(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]),165);\n}\n\ntest();"
completions: ["    if (lst.length > 0) {\n        return lst.reduce((sum, lst_item)\
    \ => {\n            if (Number.isInteger(lst_item) && lst_item >= 0) {\n     \
    \           if (lst_item % 2 == 1) {\n                    return sum + lst_item\
    \ * lst_item;\n                }\n            }\n            return sum;\n   \
    \     }, 0);\n    }\n    return 0;\n}\n", "    let sum = 0;\n    for (let i =\
    \ 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n \
    \           sum += lst[i] * lst[i];\n        }\n    }\n    return sum;\n}\n",
  "    return 0;\n}\n", "    let sum: number = 0;\n    for (let i: number = 0; i <\
    \ lst.length; i++) {\n        if (lst[i] % 2 != 0 && !isNaN(lst[i])) {\n     \
    \       sum += Math.pow(lst[i], 2);\n        }\n    }\n    return sum;\n}\n",
  "    if (lst.length == 0) {\n        return 0;\n    }\n    var total = 0;\n    for\
    \ (var i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 == 1 && !isNaN(lst[i]))\
    \ {\n            total += Math.pow(lst[i], 2);\n        }\n    }\n    return total;\n\
    }\n", "    // return lst.filter(n => n % 2 !== 0).map(n => n * n).reduce((a,b)\
    \ => a + b, 0);\n\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] > 0 && Number.isInteger(lst[i])) {\n            if (lst[i]\
    \ % 2 !== 0) {\n                sum += lst[i] * lst[i];\n            }\n     \
    \   }\n    }\n    return sum;\n}\n\n", "    let sum = 0;\n    lst.forEach(el =>\
    \ {\n        if (el % 2 != 0 && el >= 0) {\n            sum += el * el;\n    \
    \    }\n    });\n    return sum;\n}\n", "  if (lst.length === 0) {\n    return\
    \ 0;\n  }\n\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if\
    \ (lst[i] % 2 !== 0 && lst[i] > 0) {\n      total += lst[i] * lst[i];\n    }\n\
    \  }\n  return total;\n}\n", "    let result = 0;\n    for (let i = 0; i < lst.length;\
    \ i++) {\n        if (lst[i] % 2 == 1 && lst[i] >= 0) {\n            result +=\
    \ lst[i] ** 2;\n        }\n    }\n    return result;\n}\n", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > 0 && Number.isInteger(lst[i]))\
    \ {\n            if (lst[i] % 2 != 0) {\n                sum += Math.pow(lst[i],\
    \ 2);\n            }\n        }\n    }\n    return sum;\n}\n\n", "    var sum:\
    \ number = 0;\n    for (var i = 0; i < lst.length; i++) {\n        if (isNaN(lst[i])\
    \ || lst[i] % 2 == 0 || lst[i] < 0)\n            continue;\n        sum += Math.pow(lst[i],\
    \ 2);\n    }\n    return sum;\n}\n", "  // your code here\n  var squaredSum =\
    \ 0;\n  for (var num of lst) {\n    if (Math.abs(num % 2) == 1 && num > 0) {\n\
    \      squaredSum += Math.pow(num, 2);\n    }\n  }\n  return squaredSum;\n}\n",
  "    let sum: number = 0;\n    let num: number = 0;\n    let diff: number = 0;\n\
    \    let arr: number[] = [];\n    for (let i: number = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            arr.push(lst[i]);\n\
    \        }\n    }\n    for (let i: number = 0; i < arr.length; i++) {\n      \
    \  num = arr[i] * arr[i];\n        sum = sum + num;\n    }\n    diff = sum * 2;\n\
    \    return diff;\n}\n", "  var sum = 0;\n  for (var i = 0; i < lst.length; i++)\
    \ {\n    if (lst[i] % 2 == 1) {\n      sum += Math.pow(lst[i], 2);\n    }\n  }\n\
    \  return sum;\n}\n", "  var sum = 0;\n  var i;\n  for (i = 0; i < lst.length;\
    \ i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      sum += lst[i] * lst[i];\n\
    \    }\n  }\n  return sum;\n}\n", "    let sum = 0;\n    for (let number of lst)\
    \ {\n        if (number % 2 == 1 && number > 0) {\n            sum += number *\
    \ number;\n        }\n    }\n    return sum;\n}\n\n", "    let output = 0;\n \
    \   for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 !== 0 && !isNaN(lst[i]))\
    \ {\n            output += Math.pow(lst[i], 2);\n        }\n    }\n    return\
    \ output;\n}\n", "    let total = 0;\n    for (let i = 0; i < lst.length; i++)\
    \ {\n        if (lst[i] % 2 !== 0 && lst[i] > 0) {\n            total += Math.pow(lst[i],\
    \ 2);\n        }\n    }\n    return total;\n}\nconsole.log(double_the_difference([1,\
    \ 3, 2, 0]));\nconsole.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9,\
    \ -2]));\nconsole.log(double_the_difference([0]));\n", "  var sum = 0;\n  for\
    \ (var i = 0; i < lst.length; i++) {\n    if (typeof lst[i] == \"number\" && !isNaN(lst[i])\
    \ && lst[i] > 0 && Math.abs(lst[i]) == lst[i]) {\n      if (lst[i] % 2 == 1) {\n\
    \        sum += lst[i] ** 2;\n      }\n    }\n  }\n  return sum;\n}\n\nconsole.log(double_the_difference([1,\
    \ 3, 2, 0]));\nconsole.log(double_the_difference([-1, -2, 0]));\nconsole.log(double_the_difference([9,\
    \ -2]));\nconsole.log(double_the_difference([0]));\n", "  let sum = 0;\n  for\
    \ (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] % 2 != 0) {\n\
    \      sum += Math.pow(lst[i], 2);\n    }\n  }\n  return sum;\n}\ntest(double_the_difference([1,\
    \ 3, 2, 0]), 10);\ntest(double_the_difference([-1, -2, 0]), 0);\ntest(double_the_difference([9,\
    \ -2]), 81);\ntest(double_the_difference([0]), 0);\ntest(double_the_difference([]),\
    \ 0);\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
