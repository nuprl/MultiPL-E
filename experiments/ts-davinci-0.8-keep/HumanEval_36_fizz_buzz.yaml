name: HumanEval_36_fizz_buzz
language: ts
prompt: "//Return the number of times the digit 7 appears in integers less than n\
  \ which are divisible by 11 or 13.\n// >>> fizz_buzz(50)\n// 0\n// >>> fizz_buzz(78)\n\
  // 2\n// >>> fizz_buzz(79)\n// 3\nfunction fizz_buzz(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fizz_buzz;\n  assert.deepEqual(candidate(50),0);\n\
  \  assert.deepEqual(candidate(78),2);\n  assert.deepEqual(candidate(79),3);\n  assert.deepEqual(candidate(100),3);\n\
  \  assert.deepEqual(candidate(200),6);\n  assert.deepEqual(candidate(4000),192);\n\
  \  assert.deepEqual(candidate(10000),639);\n  assert.deepEqual(candidate(100000),8026);\n\
  }\n\ntest();"
completions: ["  let count = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 ===\
    \ 0 || i % 13 === 0) {\n      let num = i.toString();\n      let total = 0;\n\
    \      for (let j = 0; j < num.length; j++) {\n        if (num[j] === \"7\") {\n\
    \          total += 1;\n        }\n      }\n      count += total;\n    }\n  }\n\
    \  return count;\n}\n", "  let count = 0;\n  for (let i = 1; i < n; i++) {\n \
    \   if (i % 11 === 0 || i % 13 === 0) {\n      count += get7s(i);\n    }\n  }\n\
    \  return count;\n}\n\nconsole.log(fizz_buzz(50));\nconsole.log(fizz_buzz(78));\n\
    console.log(fizz_buzz(79));\n", "    let counter = 0;\n    for (let i = 7; i <\
    \ n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            let x =\
    \ String(i);\n            for (let j = 0; j < x.length; j++) {\n             \
    \   if (x[j] === '7') {\n                    counter += 1;\n                }\n\
    \            }\n        }\n    }\n    return counter;\n}\n\n", "  let count: number\
    \ = 0;\n  for (let i: number = 1; i < n; i++) {\n    if (i % 11 === 0 || i % 13\
    \ === 0) {\n      count += i.toString().split(\"\").filter(x => x === \"7\").length;\n\
    \    }\n  }\n  return count;\n}\n", "  let count = 0;\n  for (let i = 7; i < n;\
    \ i++) {\n    if (i % 11 === 0 || i % 13 === 0) {\n      let s = i.toString();\n\
    \      for (let j = 0; j < s.length; j++) {\n        if (s[j] === \"7\") {\n \
    \         count++;\n        }\n      }\n    }\n  }\n  return count;\n}\n", " \
    \   let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 ===\
    \ 0 || i % 13 === 0) {\n            if (i.toString().includes('7')) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;\n}\n",
  "  let count = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0 || i %\
    \ 13 === 0) {\n      if (i.toString().indexOf(\"7\") !== -1) {\n        count++;\n\
    \      }\n    }\n  }\n  return count;\n}\n", "    let count = 0;\n    let num,\
    \ i;\n    for (i = 0; i < n; i++) {\n        num = i;\n        if (num % 11 ===\
    \ 0 || num % 13 === 0) {\n            while (num > 0) {\n                if (num\
    \ % 10 === 7) {\n                    count++;\n                }\n           \
    \     num = Math.floor(num / 10);\n            }\n        }\n    }\n    return\
    \ count;\n}\n", "    let count = 0;\n    for (let i = 0; i < n; i++) {\n     \
    \   if (i % 11 === 0 || i % 13 === 0) {\n            if (seven_count(i) > 0) {\n\
    \                count++;\n            }\n        }\n    }\n    return count;\n\
    }\n", "  let total = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 11 === 0\
    \ || i % 13 === 0) {\n      let num = i;\n      while (num > 0) {\n        let\
    \ digit = num % 10;\n        if (digit === 7) {\n          total++;\n        }\n\
    \        num = Math.floor(num / 10);\n      }\n    }\n  }\n  return total;\n}\n",
  "    let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0\
    \ || i % 13 === 0) {\n            let x = i;\n            while (x > 0) {\n  \
    \              if (x % 10 === 7) count++;\n                x = Math.floor(x /\
    \ 10);\n            }\n        }\n    }\n    return count;\n}\n", "    let counter\
    \ = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 === 0 || i % 13\
    \ === 0) {\n            counter += count_sevens(i);\n        }\n    }\n    return\
    \ counter;\n}\n", "    let count: number = 0;\n    for (let i: number = 0; i <\
    \ n; i++) {\n        if (i % 11 === 0 || i % 13 === 0) {\n            const digits:\
    \ number[] = digits_of(i);\n            for (let d of digits) {\n            \
    \    if (d === 7) {\n                    count++;\n                }\n       \
    \     }\n        }\n    }\n    return count;\n}\n", "  // Your code here\n  return\
    \ 0;\n}\n", "  // write your code here\n  return 0;\n}\n", "    let count = 0;\n\
    \    for (let i = 7; i < n; i++) {\n        if (i % 11 === 0 || i % 13 === 0)\
    \ {\n            let num = i.toString();\n            for (let j = 0; j < num.length;\
    \ j++) {\n                if (num[j] === '7') {\n                    count +=\
    \ 1;\n                }\n            }\n        }\n    }\n    return count;\n\
    }\n\n", "    // Your code here\n    return 0;\n}\n", "  return null;\n}\n", " \
    \   let count = 0;\n    for (let i = 0; i < n; i++) {\n        if (i % 11 ===\
    \ 0 || i % 13 === 0) {\n            count += (\"\" + i).split(\"7\").length -\
    \ 1;\n        }\n    }\n    return count;\n}\n", "    let i = 0;\n    let count\
    \ = 0;\n    while (i < n) {\n        if (i % 11 === 0 || i % 13 === 0) {\n   \
    \         count += count_sevens(i);\n        }\n        i += 1;\n    }\n    return\
    \ count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
