name: HumanEval_34_unique
language: ts
prompt: "//Return sorted unique elements in a list\n// >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"
completions: ["    let uniqueList: number[] = []\n    for (let i: number = 0; i <\
    \ l.length; i++) {\n        if (uniqueList.indexOf(l[i]) === -1) {\n         \
    \   uniqueList.push(l[i])\n        }\n    }\n    uniqueList.sort()\n    return\
    \ uniqueList\n}\n", "    var u: number[] = [];\n    for (var i = 0; i < l.length;\
    \ i++) {\n        if (u.indexOf(l[i]) < 0) u.push(l[i]);\n    }\n    return u;\n\
    }\n", "  return [...new Set(l)].sort((a, b) => a - b);\n}\n", "    return l.filter((v,\
    \ i, o) => o.indexOf(v) === i);\n}\n", "    return l.sort().filter((v, i, l) =>\
    \ i === 0 || v > l[i - 1]);\n}\n\nexport { unique };", "  let res: number[] =\
    \ [];\n  l.forEach(function(item: number) {\n    if (res.indexOf(item) === -1)\
    \ {\n      res.push(item);\n    }\n  });\n  return res;\n}\n", "  return [...(new\
    \ Set(l))].sort((a, b) => a - b);\n}\n\nexport { unique };", "  let res: number[]\
    \ = [];\n  for (let i = 0; i < l.length; i++) {\n    if (res.indexOf(l[i]) ==\
    \ -1) {\n      res.push(l[i]);\n    }\n  }\n  return res.sort((a, b) => a - b);\n\
    }\n", "    return [...new Set(l)].sort((a, b) => a - b);\n}\n", "    return l.filter((x,\
    \ i) => l.indexOf(x) === i);\n}\n", "  return Array.from(new Set(l)).sort((a,\
    \ b) => a - b);\n}\n", "    let ret = []\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (ret.indexOf(l[i]) == -1) {\n            ret.push(l[i])\n    \
    \    }\n    }\n    return ret\n}\n", "    l.sort();\n    return l.filter((v, i,\
    \ l) => i < 1 || v != l[i - 1]);\n}\n", "    return l.filter((v, i, a) => a.indexOf(v)\
    \ === i).sort((a, b) => a - b);\n}\n", "  return Array.from(new Set(l)).sort()\n\
    }\n", "    const u = new Set(l);\n    return Array.from(u);\n}\n", "  let s =\
    \ new Set(l);\n  return [...s].sort((a, b) => a - b);\n}\n", "  return l.sort().filter((i,\
    \ j) => i !== l[j - 1]);\n}\n", "    // TODO: is the input already sorted?\n \
    \   //      if so, then we don't need to do that\n    l.sort();\n    const uniq:\
    \ number[] = [];\n    let p = l[0];\n    for (let i = 1; i < l.length; i++) {\n\
    \        if (l[i] !== p) {\n            uniq.push(p);\n            p = l[i];\n\
    \        }\n    }\n    uniq.push(p);\n    return uniq;\n}\n", "    return l.sort().filter((value,\
    \ index, arr) => {\n        return value !== arr[index + 1];\n    });\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
