name: HumanEval_29_filter_by_prefix
language: ts
prompt: "//Filter an input list of strings only for ones that start with a given prefix.\n\
  // >>> filter_by_prefix([], 'a')\n// []\n// >>> filter_by_prefix(['abc', 'bcd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'array']\nfunction filter_by_prefix(strings:\
  \ string[], prefix: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_prefix;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n}\n\n\
  test();"
completions: ["    return strings.filter( (s) => { return s.startsWith(prefix); }\
    \ );\n}\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "  return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(function(x:\
    \ string) {\n        return x.startsWith(prefix);\n    });\n}\n", "    return\
    \ strings.filter(s => s.startsWith(prefix));\n}\n", "  return strings.filter(str\
    \ => str.startsWith(prefix));\n}\n", "    // YOUR CODE HERE\n    let re = new\
    \ RegExp(prefix + \".*\", \"g\");\n    let found = strings.filter(function(string)\
    \ {\n        return string.match(re);\n    });\n    return found;\n}", "    var\
    \ result: string[] = []\n    for (var i = 0; i < strings.length; i++) {\n    \
    \    var string = strings[i]\n        if (string.indexOf(prefix) == 0) {\n   \
    \         result.push(string)\n        }\n    }\n    return result\n}\n", "  \
    \  let ret: string[] = [];\n    for (let s of strings) {\n        if (prefix.length\
    \ > s.length) {\n            continue;\n        }\n        if (s.slice(0, prefix.length)\
    \ == prefix) {\n            ret.push(s);\n        }\n    }\n    return ret;\n\
    }\n", "    return strings.filter(function(string) {\n        return string.startsWith(prefix);\n\
    \    });\n}\n", "    return strings.filter(str => str.startsWith(prefix));\n}\n",
  "    return strings.filter(s => s.startsWith(prefix));\n}\n", "    return strings.filter(value\
    \ => value.startsWith(prefix));\n}\n", "    let prefix_length = prefix.length;\n\
    \    return strings.filter(s => s.substring(0, prefix_length) === prefix);\n}\n",
  "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    let result: string[]\
    \ = [];\n    for (let value of strings) {\n        if (value.startsWith(prefix))\
    \ {\n            result.push(value);\n        }\n    }\n    return result;\n}\n",
  "    //TODO: Function body\n    return strings.filter(s => s.startsWith(prefix));\n\
    }\n", "  return strings.filter(s => s.startsWith(prefix));\n}\n", "    var ret\
    \ = [];\n    for (var i = 0; i < strings.length; i++) {\n        if (strings[i].substring(0,\
    \ prefix.length) == prefix) {\n            ret.push(strings[i]);\n        }\n\
    \    }\n    return ret;\n}\n", "    return strings.filter(s => s.startsWith(prefix));\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
