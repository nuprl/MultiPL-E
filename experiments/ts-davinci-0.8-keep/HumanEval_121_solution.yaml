name: HumanEval_121_solution
language: ts
prompt: "//Given a non-empty list of integers, return the sum of all of the odd elements\
  \ that are in even positions.\n// Examples\n// solution([5, 8, 7, 1]) ==> 12\n//\
  \ solution([3, 3, 3, 3, 3]) ==> 9\n// solution([30, 13, 24, 321]) ==>0\nfunction\
  \ solution(lst: number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solution;\n  assert.deepEqual(candidate([5, 8, 7,\
  \ 1]),12);\n  assert.deepEqual(candidate([3, 3, 3, 3, 3]),9);\n  assert.deepEqual(candidate([30,\
  \ 13, 24, 321]),0);\n  assert.deepEqual(candidate([5, 9]),5);\n  assert.deepEqual(candidate([2,\
  \ 4, 8]),0);\n  assert.deepEqual(candidate([30, 13, 23, 32]),23);\n  assert.deepEqual(candidate([3,\
  \ 13, 2, 9]),3);\n}\n\ntest();"
completions: ["  return lst.filter((val, i) => i % 2 == 0 && val % 2 != 0).reduce((a,\
    \ b) => a + b, 0);\n}\n", "  let even: number[] = [];\n  let odd: number[] = [];\n\
    \  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0) {\n      even.push(lst[i]);\n\
    \    } else {\n      odd.push(lst[i]);\n    }\n  }\n  let filteredOdd: number[]\
    \ = odd.filter((num) => num % 2 != 0);\n  return filteredOdd.reduce((acc, curr)\
    \ => acc + curr, 0);\n}\nconsole.log(solution([30, 13, 24, 321]));\n", "  let\
    \ total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 !== 0 &&\
    \ lst[i] % 2 !== 0) {\n      total += lst[i];\n    }\n  }\n  return total;\n}\n\
    console.log(solution([5, 8, 7, 1]));", "  return lst.filter((num, index) => index\
    \ % 2 !== 0 && num % 2 !== 0).reduce((acc, curr) => acc + curr, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30,\
    \ 13, 24, 321]));", "  let odd: number = 0;\n  for (let i = 0; i < lst.length;\
    \ i++) {\n    i % 2 == 0 && lst[i] % 2 == 1 ? (odd += lst[i]) : null;\n  }\n \
    \ return odd;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n", "    return lst.filter((x,\
    \ index) => index % 2 == 0 && x % 2 == 1).reduce((pre, cur) => pre + cur, 0);\n\
    }\n", "  let answer = 0;\n  lst.forEach((x, index) => {\n    if (index % 2 ===\
    \ 0 && x % 2 === 1) {\n      answer += x;\n    }\n  });\n  return answer;\n}\n\
    \nexport function evenOdd(lst: number[]): number {\n  return solution(lst);\n}",
  "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0 &&\
    \ lst[i] % 2 !== 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\n\n\
    console.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "    let sum = 0;\n    for (let i\
    \ = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i] % 2 !== 0) {\n\
    \            sum += lst[i];\n        }\n    }\n    return sum;\n}\n", "  return\
    \ lst.filter((x, i) => i % 2 !== 0 && x % 2 !== 0).reduce((a, b) => a + b, 0);\n\
    }\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\n\
    console.log(solution([30, 13, 24, 321]));", "  return lst.filter((val, idx) =>\
    \ val % 2 === 1 && idx % 2 === 0).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(solution([5,\
    \ 8, 7, 1]));", "  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n  \
    \  if (i % 2 == 0 && lst[i] % 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return\
    \ sum;\n}\nconsole.log(solution([30, 13, 24, 321]));\n", "    return lst.filter((x,\
    \ idx) => idx % 2 === 1 && x % 2 === 1).reduce((acc, x) => acc + x, 0);\n}\n",
  "  return lst.filter((v, i) => v % 2 !== 0 && i % 2 === 0).reduce((a, b) => a +\
    \ b, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "    let sum = 0;\n\
    \    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0 && lst[i]\
    \ % 2 !== 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n\
    }\n", "  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i\
    \ % 2 === 0 && lst[i] % 2 !== 0) {\n      result += lst[i];\n    }\n  }\n  return\
    \ result;\n}\n", "    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n\
    \        if (i % 2 == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n  \
    \      }\n    }\n    return sum;\n}\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n", "  let result\
    \ = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i]\
    \ % 2 != 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n", " \
    \ return lst.filter((num, index) => num % 2 !== 0 && index % 2 === 0).reduce((x,\
    \ y) => x + y, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3,\
    \ 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));", "  let result =\
    \ 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 == 0 && lst[i] %\
    \ 2 != 0) {\n      result += lst[i];\n    }\n  }\n  return result;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
