name: HumanEval_143_words_in_sentence
language: ts
prompt: "//You are given a string representing a sentence,\n// the sentence contains\
  \ some words separated by a space,\n// and you have to return a string that contains\
  \ the words from the original sentence,\n// whose lengths are prime numbers,\n//\
  \ the order of the words in the new string should be the same as the original one.\n\
  // Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"is\"\n// Example\
  \ 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"go for\"\n// Constraints:\n\
  // * 1 <= len(sentence) <= 100\n// * sentence contains only letters\nfunction words_in_sentence(sentence:\
  \ string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = words_in_sentence;\n  assert.deepEqual(candidate(\"\
  This is a test\"),\"is\");\n  assert.deepEqual(candidate(\"lets go for swimming\"\
  ),\"go for\");\n  assert.deepEqual(candidate(\"there is no place available here\"\
  ),\"there is no place\");\n  assert.deepEqual(candidate(\"Hi I am Hussein\"),\"\
  Hi am Hussein\");\n  assert.deepEqual(candidate(\"go for it\"),\"go for it\");\n\
  \  assert.deepEqual(candidate(\"here\"),\"\");\n  assert.deepEqual(candidate(\"\
  here is\"),\"is\");\n}\n\ntest();"
completions: ["    const words = sentence.split(\" \");\n    const is_prime = (length:\
    \ number): boolean => {\n        for (let i = 2; i < length; i++) {\n        \
    \    if (length % i === 0) {\n                return false;\n            }\n \
    \       }\n        return true;\n    };\n    const res = words.filter((w) => is_prime(w.length));\n\
    \    return res.join(\" \");\n}\n", "    function is_prime(x: number): boolean\
    \ {\n        if (x <= 1) {\n            return false;\n        }\n        for\
    \ (let i = 2; i < x; i++) {\n            if (x % i === 0) {\n                return\
    \ false;\n            }\n        }\n        return true;\n    }\n    const words\
    \ = sentence.split(\" \");\n    const ret: string[] = [];\n    for (const word\
    \ of words) {\n        if (is_prime(word.length)) {\n            ret.push(word);\n\
    \        }\n    }\n    return ret.join(\" \");\n}\n\nconsole.log(words_in_sentence(\"\
    This is a test\"));\nconsole.log(words_in_sentence(\"lets go for swimming\"));",
  "    const s = sentence.split(' ');\n    const result = [];\n    const prime_set\
    \ = prime_set_top_n(100);\n    s.forEach(function (item) {\n        const len\
    \ = item.length;\n        if (prime_set.has(len)) {\n            result.push(item);\n\
    \        }\n    });\n    return result.join(' ');\n}\n", "    let result = [];\n\
    \    for (let word of sentence.split(' ')) {\n        if (is_prime(word.length))\
    \ {\n            result.push(word);\n        }\n    }\n    return result.join('\
    \ ');\n}\n", "    const words: string[] = sentence.split(\" \");\n    const prime_length_words:\
    \ string[] = [];\n    const prime_numbers: number[] = [2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n \
    \   words.forEach((word: string) => {\n        if (prime_numbers.includes(word.length))\
    \ {\n            prime_length_words.push(word);\n        }\n    });\n    return\
    \ prime_length_words.join(\" \");\n}\n\nconsole.log(words_in_sentence(\"This is\
    \ a test\"));\nconsole.log(words_in_sentence(\"lets go for swimming\"));", " \
    \ const words = sentence.split(\" \");\n  const primes = new Set([2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97]);\n  return words.filter(word => primes.has(word.length)).join(\" \"\
    );\n}\n\nconsole.log(words_in_sentence(\"This is a test\"));\nconsole.log(words_in_sentence(\"\
    lets go for swimming\"));", "    return sentence.split(\" \").filter(function\
    \ (word: string) {\n        return is_prime(word.length);\n    }).join(\" \");\n\
    }", "    const words = sentence.split(\" \");\n    let result = \"\";\n    for\
    \ (let i = 0; i < words.length; i++) {\n        if (is_prime(words[i].length))\
    \ {\n            result += words[i] + \" \";\n        }\n    }\n    return result.trim();\n\
    }", "  const sentence_array = sentence.split(\" \");\n  let new_sentence = \"\"\
    ;\n  for (let i = 0; i < sentence_array.length; i++) {\n    if (check_prime(sentence_array[i].length))\
    \ {\n      new_sentence += sentence_array[i] + \" \";\n    }\n  }\n  return new_sentence.slice(0,\
    \ new_sentence.length - 1);\n}", "  const words = sentence.split(\" \");\n  const\
    \ primes = new Set<number>([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]);\n  const wordsPrimeLen = words.filter(word\
    \ => primes.has(word.length));\n  return wordsPrimeLen.join(\" \");\n}\n", " \
    \   let words = sentence.split(\" \");\n    let prime_words = [];\n    words.forEach(word\
    \ => {\n        if (is_prime(word.length)) {\n            prime_words.push(word);\n\
    \        }\n    });\n    return prime_words.join(\" \");\n}", "  return sentence\n\
    \    .split(\" \")\n    .filter((word) => {\n      if (word.length === 1) return\
    \ true;\n      if (word.length === 2) return true;\n      for (let i = 2; i <\
    \ word.length; i++) {\n        if (word.length % i === 0) return false;\n    \
    \  }\n      return true;\n    })\n    .join(\" \");\n}\n\nconsole.log(words_in_sentence(\"\
    This is a test\"));", "  const get_length = (w: string) => w.length;\n  const\
    \ is_prime = (n: number) => {\n    if (n <= 1) return false;\n    if (n === 2)\
    \ return true;\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) return\
    \ false;\n    }\n    return true;\n  };\n  const words = sentence.split(\" \"\
    );\n  const words_length = words.map(get_length);\n  const result = words_length.filter(is_prime);\n\
    \  return words.join(\" \");\n}\n\nconsole.log(words_in_sentence(\"This is a test\"\
    ));\nconsole.log(words_in_sentence(\"lets go for swimming\"));", "    let output:\
    \ string = \"\";\n    let word_count: number = 0;\n    let prime_count: number\
    \ = 0;\n    let word_array: string[] = sentence.split(\" \");\n    let prime_array:\
    \ number[] = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59,\
    \ 61, 67, 71, 73, 79, 83, 89, 97];\n    for (let i: number = 0; i < word_array.length;\
    \ i++) {\n        word_count = word_array[i].length;\n        prime_count = 0;\n\
    \        for (let j: number = 0; j < prime_array.length; j++) {\n            if\
    \ (word_count === prime_array[j]) {\n                prime_count++;\n        \
    \    }\n        }\n        if (prime_count !== 0) {\n            output += word_array[i]\
    \ + \" \";\n        }\n    }\n    return output.trim();\n}\nconsole.log(words_in_sentence(\"\
    This is a test\"));\nconsole.log(words_in_sentence(\"lets go for swimming\"));",
  "    const letters = sentence.split(' ');\n    const result = [];\n    for (let\
    \ i = 0; i < letters.length; i++) {\n        if (letters[i].length > 1 && isPrime(letters[i].length))\
    \ {\n            result.push(letters[i]);\n        }\n    }\n    return result.join('\
    \ ');\n}\n", "  const primes = findPrimes(sentence.length);\n  const words = sentence.split(\"\
    \ \");\n  let output = \"\";\n  for (let i = 0; i < words.length; i++) {\n   \
    \ if (primes.includes(words[i].length)) {\n      output += `${words[i]} `;\n \
    \   }\n  }\n  return output.slice(0, -1);\n}\n", "  const words = sentence.split(\"\
    \ \");\n  const ans = [];\n  for (let i = 0; i < words.length; i++) {\n    if\
    \ (isPrime(words[i].length)) {\n      ans.push(words[i]);\n    }\n  }\n  return\
    \ ans.join(\" \");\n}\n", "    return sentence.split(\" \").filter(s => is_prime(s.length)).join(\"\
    \ \");\n}", "    const is_prime = (n: number): boolean => {\n        const f =\
    \ Math.floor(Math.sqrt(n));\n        for (let i = 2; i <= f; i++) {\n        \
    \    if (n % i === 0) {\n                return false;\n            }\n      \
    \  }\n        return true;\n    };\n    const result: string[] = [];\n    const\
    \ words = sentence.split(' ');\n    for (const word of words) {\n        if (is_prime(word.length))\
    \ {\n            result.push(word);\n        }\n    }\n    return result.join('\
    \ ');\n}\n", "    const is_prime = (n: number): boolean => {\n        if (n <=\
    \ 1) {\n            return false;\n        }\n        let sqrt_n = Math.sqrt(n);\n\
    \        for (let i = 2; i <= sqrt_n; i++) {\n            if (n % i === 0) {\n\
    \                return false;\n            }\n        }\n        return true;\n\
    \    };\n    let arr = sentence.split(\" \");\n    let result = \"\";\n    for\
    \ (let i = 0; i < arr.length; i++) {\n        if (is_prime(arr[i].length)) {\n\
    \            result += arr[i] + \" \";\n        }\n    }\n    return result.trim();\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
