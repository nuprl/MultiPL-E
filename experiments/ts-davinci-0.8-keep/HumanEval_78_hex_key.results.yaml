language: ts
name: HumanEval_78_hex_key
results:
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        if (num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i]\
    \ === '7' || num[i] === 'B' || num[i] === 'D') {\n            count++;\n     \
    \   }\n    }\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let result: number = 0;\n    let counter: number = 0;\n\
    \    let hex_num: any = {\n        \"0\": 0,\n        \"1\": 1,\n        \"2\"\
    : 2,\n        \"3\": 3,\n        \"4\": 4,\n        \"5\": 5,\n        \"6\":\
    \ 6,\n        \"7\": 7,\n        \"8\": 8,\n        \"9\": 9,\n        \"A\":\
    \ 10,\n        \"B\": 11,\n        \"C\": 12,\n        \"D\": 13,\n        \"\
    E\": 14,\n        \"F\": 15\n    }\n    let prime_num: number[] = [2, 3, 5, 7,\
    \ 11, 13];\n    for (let i: number = 0; i < num.length; i++) {\n        result\
    \ = hex_num[num[i]];\n        if (prime_num.indexOf(result) != -1) {\n       \
    \     counter++;\n        }\n    }\n    return counter;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822160
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let key: string = \"ABCDEF\";\n    let count: number\
    \ = 0;\n    for (let i: number = 0; i < num.length; i++) {\n        if (key.indexOf(num[i])\
    \ != -1) {\n            count++;\n        }\n    }\n    return count;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmp13rcm0t4.js:30:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp13rcm0t4.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let key: number = 0;\n  const primes: number[] = [2, 3,\
    \ 5, 7, 11, 13];\n  const hex: string[] = ['0', '1', '2', '3', '4', '5', '6',\
    \ '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n  for (let i: number = 0; i <\
    \ num.length; i++) {\n    for (let j: number = 0; j < primes.length; j++) {\n\
    \      if (hex[primes[j]] === num[i]) {\n        key++;\n      }\n    }\n  }\n\
    \  return key;\n}\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    6

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let primes: number[] = [2, 3, 5, 7, 11, 13];\n    let\
    \ hex: string[] = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    let counter: number\
    \ = 0;\n    let index: number = 0;\n    for (let i: number = 0; i < num.length;\
    \ i++) {\n        for (let j: number = 0; j < hex.length; j++) {\n           \
    \ if (num[i] == hex[j]) {\n                index = j;\n            }\n       \
    \ }\n        for (let k: number = 0; k < primes.length; k++) {\n            if\
    \ (index == primes[k]) {\n                counter++;\n            }\n        }\n\
    \    }\n    return counter;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let count: number = 0;\n  let charCode: number = 0;\n \
    \ let primeKeys: number[] = [2, 3, 5, 7, 11, 13];\n  let digits: string[] = [];\n\
    \  for (let i: number = 0; i < num.length; i++) {\n    charCode = num.charCodeAt(i);\n\
    \    if (charCode > 47 && charCode < 58) {\n      digits.push(num[i]);\n    }\
    \ else if (charCode > 64 && charCode < 71) {\n      if (charCode === 65) {\n \
    \       digits.push('10');\n      } else if (charCode === 66) {\n        digits.push('11');\n\
    \      } else if (charCode === 67) {\n        digits.push('12');\n      } else\
    \ if (charCode === 68) {\n        digits.push('13');\n      } else if (charCode\
    \ === 69) {\n        digits.push('14');\n      } else if (charCode === 70) {\n\
    \        digits.push('15');\n      }\n    }\n  }\n  for (let i: number = 0; i\
    \ < digits.length; i++) {\n    if (primeKeys.indexOf(parseInt(digits[i])) !==\
    \ -1) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let result: number = 0;\n    const hex_num = num.toUpperCase();\n\
    \    for (let i = 0; i < hex_num.length; i++) {\n        switch (hex_num[i]) {\n\
    \            case '2':\n            case '3':\n            case '5':\n       \
    \     case '7':\n            case 'B':\n            case 'D':\n              \
    \  result++;\n                break;\n        }\n    }\n    return result;\n}\n\
    console.log(hex_key(\"2020\"));\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2\"));\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    1

    2

    4

    6

    1

    '
  timestamp: 1659822160
- exit_code: 2
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let count: number = 0;\n  const primNums: string[] = ['2',\
    \ '3', '5', '7', 'B', 'D'];\n  for (let i: number = 0; i < num.length; i++) {\n\
    \    if (primNums.includes(num[i])) {\n      count++;\n    }\n  }\n  return count;\n\
    }\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxokcbhox.ts(21,18): error TS2339: Property ''includes''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822160
- exit_code: 2
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let count = 0;\n    let primes = [11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107,\
    \ 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193,\
    \ 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281,\
    \ 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383,\
    \ 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479,\
    \ 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593,\
    \ 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683,\
    \ 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809,\
    \ 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\
    \ 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    let hexs =\
    \ ['A', 'B', 'C', 'D', 'E', 'F'];\n    let hexDigits = (num.split('').map(char\
    \ => {\n        if (hexs.includes(char)) {\n            return primes[hexs.indexOf(char)];\n\
    \        } else {\n            return parseInt(char);\n        }\n    }));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb31ncvpu.ts(42,8): error TS1005: ''}'' expected.

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let hex_arr: string[] = num.split('');\n    let hex_primes:\
    \ number[] = [2, 3, 5, 7, 11, 13];\n    let dec_num: number = 0;\n    let hex_primes_count:\
    \ number = 0;\n    for (let h = 0; h < hex_arr.length; h++) {\n        switch\
    \ (hex_arr[h]) {\n            case 'A': dec_num = 10; break;\n            case\
    \ 'B': dec_num = 11; break;\n            case 'C': dec_num = 12; break;\n    \
    \        case 'D': dec_num = 13; break;\n            case 'E': dec_num = 14; break;\n\
    \            case 'F': dec_num = 15; break;\n            default: dec_num = parseInt(hex_arr[h]);\n\
    \        }\n        for (let p = 0; p < hex_primes.length; p++) {\n          \
    \  if (dec_num === hex_primes[p]) {\n                hex_primes_count++;\n   \
    \         }\n        }\n    }\n    return hex_primes_count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 2
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let primes: string = \"2357BD\";\n  let count: number =\
    \ 0;\n  num.split(\"\").forEach(element => {\n    if (primes.includes(element))\
    \ {\n      count++;\n    }\n  });\n  return count;\n}\n\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpudma3hhz.ts(21,16): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let hexes: string[] = [\"2\", \"3\", \"5\", \"7\", \"B\"\
    , \"D\"];\n  let count: number = 0;\n  for (let i: number = 0; i < num.length;\
    \ i++) {\n    for (let j: number = 0; j < hexes.length; j++) {\n      if (num[i]\
    \ === hexes[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n}\n\
    console.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"\
    ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"\
    2020\"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 2
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let count = 0;\n    for (let i = 0; i < num.length; i++)\
    \ {\n        let value = Number.parseInt(num[i], 16);\n        let sqrt = Math.floor(Math.sqrt(value));\n\
    \        if (value % 2 === 0) {\n            continue;\n        }\n        if\
    \ (value % 3 === 0) {\n            continue;\n        }\n        if (value % 5\
    \ === 0) {\n            continue;\n        }\n        if (value % 7 === 0) {\n\
    \            continue;\n        }\n        if (value % 11 === 0) {\n         \
    \   count++;\n            continue;\n        }\n        if (value % 13 === 0)\
    \ {\n            count++;\n            continue;\n        }\n        for (let\
    \ j = 7; j <= sqrt; j = j + 2) {\n            if (value % j === 0) {\n       \
    \         break;\n            }\n            if (j >= sqrt) {\n              \
    \  count++;\n            }\n        }\n    }\n    return count;\n}\nconsole.log(hex_key(\"\
    AB\"));\nconsole.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\n\
    console.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n\
    \  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3fpn50o2.ts(20,28): error TS2339: Property ''parseInt''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let count = 0;\n    let nums = num.split('');\n    nums.forEach(function\
    \ (n) {\n        switch (n) {\n            case '2':\n            case '3':\n\
    \            case '5':\n            case '7':\n            case 'B':\n       \
    \     case 'D':\n                count++;\n                break;\n        }\n\
    \    });\n    return count;\n}\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let arr = num.split(\"\");\n  let sum = 0;\n  for (let\
    \ item of arr) {\n    if (item === \"A\" || item === \"B\" || item === \"D\")\
    \ {\n      sum += 1;\n    }\n  }\n  return sum;\n}\nconsole.log(hex_key(\"1077E\"\
    ));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpgvexa0dz.js:32:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgvexa0dz.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let result: number = 0;\n    let num_array: string[]\
    \ = num.split('');\n    let i: number = 0;\n    while (i < num_array.length) {\n\
    \        if (num_array[i] === '2' || num_array[i] === '3' || num_array[i] ===\
    \ '5' || num_array[i] === '7' || num_array[i] === 'B' || num_array[i] === 'D')\
    \ {\n            result++;\n        }\n        i++;\n    }\n    return result;\n\
    }\nconsole.log(hex_key(\"123456789ABCDEF0\"));\nconsole.log(hex_key(\"AB\"));\n\
    console.log(hex_key(\"1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"\
    123456789ABCDEF0\"));\nconsole.log(hex_key(\"2020\"));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '6

    1

    2

    4

    6

    2

    '
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let isHexPrime = (n: string): boolean => {\n        let\
    \ nums = \"2,3,5,7,B,D\".split(\",\");\n        return nums.indexOf(n) > -1;\n\
    \    }\n    let nums = num.split(\"\");\n    let count = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        if (isHexPrime(nums[i])) {\n           \
    \ count++;\n        }\n    }\n    return count;\n}\n\nconsole.log(hex_key(\"1077E\"\
    ));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\nconsole.log(hex_key(\"\"));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2

    4

    6

    2

    0

    '
  timestamp: 1659822160
- exit_code: 2
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let count: number = 0;\n    let hexCode: string = \"\"\
    ;\n    for (let i: number = 0; i < num.length; i++) {\n        if (isPrime(parseInt(num[i],\
    \ 16))) {\n            count++;\n        }\n    }\n    return count;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"\
    1077E\"),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpurs2yprx.ts(21,13): error TS2304: Cannot find name
    ''isPrime''.

    '
  timestamp: 1659822160
- exit_code: 1
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n  let key: string = \"2,3,5,7,B,D\"\n  let re: RegExp = new\
    \ RegExp(key, \"g\")\n  let arr: any = num.match(re)\n  let result: number = arr.length\n\
    \  return result\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = hex_key;\n  assert.deepEqual(candidate(\"\
    AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"),2);\n  assert.deepEqual(candidate(\"\
    ABED1A33\"),4);\n  assert.deepEqual(candidate(\"2020\"),2);\n  assert.deepEqual(candidate(\"\
    123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ),12);\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpp8gtoxu4.js:21\n    var result = arr.length;\n                \
    \     ^\n\nTypeError: Cannot read properties of null (reading 'length')\n    at\
    \ hex_key (/tmp/tmpp8gtoxu4.js:21:22)\n    at test (/tmp/tmpp8gtoxu4.js:27:22)\n\
    \    at Object.<anonymous> (/tmp/tmpp8gtoxu4.js:34:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822160
- exit_code: 0
  program: "//You have been tasked to write a function that receives \n// a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n// digits that are\
    \ primes (prime number, or a prime, is a natural number \n// greater than 1 that\
    \ is not a product of two smaller natural numbers).\n// Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n// Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n// So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n// B (=decimal 11), D (=decimal 13).\n// Note: you may\
    \ assume the input is always correct or empty string, \n// and symbols A,B,C,D,E,F\
    \ are always uppercase.\n// Examples:\n// For num = \"AB\" the output should be\
    \ 1.\n// For num = \"1077E\" the output should be 2.\n// For num = \"ABED1A33\"\
    \ the output should be 4.\n// For num = \"123456789ABCDEF0\" the output should\
    \ be 6.\n// For num = \"2020\" the output should be 2.\nfunction hex_key(num:\
    \ string): number {\n    let result: number = 0;\n    let key: string = \"0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F\"\
    ;\n    let num_to_array: string[] = key.split(\",\");\n    let is_prime: boolean\
    \ = false;\n    let in_num: string[] = num.split(\"\");\n    in_num.forEach(element\
    \ => {\n        is_prime = false;\n        for (let i = 0; i < num_to_array.length;\
    \ i++) {\n            if (element == num_to_array[i]) {\n                if (i\
    \ == 0 || i == 1) {\n                    is_prime = false;\n                }\
    \ else if (i == 2 || i == 3 || i == 5 || i == 7 || i == 11 || i == 13) {\n   \
    \                 is_prime = true;\n                } else {\n               \
    \     for (let j = 2; j < i; j++) {\n                        if (i % j == 0) {\n\
    \                            is_prime = false;\n                            break;\n\
    \                        } else {\n                            is_prime = true;\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        if (is_prime) {\n            result++;\n        }\n\
    \    });\n    return result;\n}\n\nconsole.log(hex_key(\"AB\"));\nconsole.log(hex_key(\"\
    1077E\"));\nconsole.log(hex_key(\"ABED1A33\"));\nconsole.log(hex_key(\"123456789ABCDEF0\"\
    ));\nconsole.log(hex_key(\"2020\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = hex_key;\n\
    \  assert.deepEqual(candidate(\"AB\"),1);\n  assert.deepEqual(candidate(\"1077E\"\
    ),2);\n  assert.deepEqual(candidate(\"ABED1A33\"),4);\n  assert.deepEqual(candidate(\"\
    2020\"),2);\n  assert.deepEqual(candidate(\"123456789ABCDEF0\"),6);\n  assert.deepEqual(candidate(\"\
    112233445566778899AABBCCDDEEFF00\"),12);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    2

    4

    6

    2

    '
  timestamp: 1659822160
