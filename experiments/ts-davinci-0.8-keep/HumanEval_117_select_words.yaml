name: HumanEval_117_select_words
language: ts
prompt: "//Given a string s and a natural number n, you have been tasked to implement\
  \ \n// a function that returns a list of all words from string s that contain exactly\
  \ \n// n consonants, in order these words appear in the string s.\n// If the string\
  \ s is empty then the function should return an empty list.\n// Note: you may assume\
  \ the input string contains only letters and spaces.\n// Examples:\n// select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n// select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n// select_words(\"simple white space\", 2)\
  \ ==> []\n// select_words(\"Hello world\", 4) ==> [\"world\"]\n// select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nfunction select_words(s: string, n: number): string[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = select_words;\n  assert.deepEqual(candidate(\"Mary\
  \ had a little lamb\", 4),[\"little\"]);\n  assert.deepEqual(candidate(\"Mary had\
  \ a little lamb\", 3),[\"Mary\", \"lamb\"]);\n  assert.deepEqual(candidate(\"simple\
  \ white space\", 2),[]);\n  assert.deepEqual(candidate(\"Hello world\", 4),[\"world\"\
  ]);\n  assert.deepEqual(candidate(\"Uncle sam\", 3),[\"Uncle\"]);\n  assert.deepEqual(candidate(\"\
  \", 4),[]);\n  assert.deepEqual(candidate(\"a b c d e f\", 1),[\"b\", \"c\", \"\
  d\", \"f\"]);\n}\n\ntest();"
completions: ["  const results: string[] = [];\n  let numberOfConsonants = 0;\n  let\
    \ word = \"\";\n  let isConsonant = false;\n  for (let i = 0; i < s.length; i++)\
    \ {\n    const letter = s[i];\n    if (letter === \" \") {\n      if (numberOfConsonants\
    \ === n) {\n        results.push(word);\n      }\n      word = \"\";\n      numberOfConsonants\
    \ = 0;\n      isConsonant = false;\n    } else {\n      word += letter;\n    \
    \  isConsonant =\n        isConsonant ||\n        /[b-df-hj-np-tv-z]/i.test(letter)\
    \ ||\n        /[B-DF-HJ-NP-TV-Z]/i.test(letter);\n      if (isConsonant) {\n \
    \       numberOfConsonants++;\n      }\n    }\n  }\n  if (numberOfConsonants ===\
    \ n) {\n    results.push(word);\n  }\n  return results;\n}\n", "    return s.split('\
    \ ').filter(w => w.split('').filter(l => 'bcdfghjklmnpqrstvwxyz'.includes(l)).length\
    \ === n);\n}\n", "  return s.split(' ').filter(word => {\n    let consonants =\
    \ word.match(/[aeiou]/gi);\n    return (consonants ? word.length - consonants.length\
    \ : word.length) === n;\n  });\n}\n", "    const words = s.split(' ');\n    const\
    \ vowels = ['a', 'e', 'i', 'o', 'u'];\n    return words.filter(word => word.split('').filter(letter\
    \ => !vowels.includes(letter)).length === n);\n}\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));\n", "    const\
    \ vowels = \"aeiou\";\n    const words = s.split(' ');\n    const result = [];\n\
    \    for (let word of words) {\n        if (word.length > 0) {\n            let\
    \ consonants = 0;\n            for (let i = 0; i < word.length; i++) {\n     \
    \           if (vowels.indexOf(word[i].toLowerCase()) === -1) {\n            \
    \        consonants++;\n                }\n            }\n            if (consonants\
    \ === n) {\n                result.push(word);\n            }\n        }\n   \
    \ }\n    return result;\n}\n", "    var result: string[] = [];\n    var words:\
    \ string[] = s.split(' ');\n    for (var i: number = 0; i < words.length; i++)\
    \ {\n        if (countConsonants(words[i]) == n) {\n            result.push(words[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  const cons = [\"b\", \"c\", \"\
    d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"\
    r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"z\"];\n  let words = s.split(\" \");\n\
    \  let consonants = [];\n  let final = [];\n  words.forEach(element => {\n   \
    \ for (let i = 0; i < element.length; i++) {\n      if (cons.includes(element[i]))\
    \ {\n        consonants.push(element[i]);\n      }\n    }\n    if (consonants.length\
    \ === n) {\n      final.push(element);\n    }\n    consonants = [];\n  });\n \
    \ return final;\n}\n", "    let reg = /[aeiou]/i;\n    let words = s.split(\"\
    \ \");\n    let arr = [];\n    for (let i = 0; i < words.length; i++) {\n    \
    \    let count = 0;\n        for (let j = 0; j < words[i].length; j++) {\n   \
    \         if (!reg.test(words[i][j])) {\n                count++;\n          \
    \  }\n        }\n        if (count === n) {\n            arr.push(words[i]);\n\
    \        }\n    }\n    return arr;\n}\nconsole.log(select_words(\"simple white\
    \ space\", 2));\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"Hello world\", 4));\n\
    console.log(select_words(\"Uncle sam\", 3));", "  if (s === \"\") return [];\n\
    \  let words = s.split(\" \");\n  let str: string[] = [];\n  words.forEach(word\
    \ => {\n    if (\n      word.split(\"\").filter(letter => isVowel(letter)).length\
    \ ===\n      word.length - n\n    ) {\n      str.push(word);\n    }\n  });\n \
    \ return str;\n}\nconsole.log(select_words(\"Mary had a little lamb\", 4));\n",
  "    let result: string[] = [];\n    let words = s.split(\" \");\n    words.forEach(word\
    \ => {\n        if (isConsonant(word) === n) {\n            result.push(word);\n\
    \        }\n    });\n    return result;\n}\n", "    const words = s.split(' ');\n\
    \    return words.filter(word => word.split('').filter(letter => isConsonant(letter)).length\
    \ === n);\n}", "    return s.split(' ').filter(w => w.split('').filter(c => c.match(/[aeiou]/gi)).length\
    \ === n);\n}\n", "    let res: string[] = [];\n    let consonents = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    let words = s.split(\" \");\n    for (let i = 0; i < words.length; i++)\
    \ {\n        let tmp: string = words[i];\n        let c = 0;\n        for (let\
    \ j = 0; j < tmp.length; j++) {\n            if (consonents.includes(tmp[j]))\
    \ c++;\n        }\n        if (c == n) res.push(tmp);\n    }\n    return res;\n\
    }\nconsole.log(select_words(\"Mary had a little lamb\", 4));\nconsole.log(select_words(\"\
    Mary had a little lamb\", 3));\nconsole.log(select_words(\"simple white space\"\
    , 2));\nconsole.log(select_words(\"Hello world\", 4));\nconsole.log(select_words(\"\
    Uncle sam\", 3));", "    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'z'];\n    return\
    \ s.split(' ').filter(x => {\n        const xLetters = x.split('');\n        return\
    \ xLetters.filter(x => consonants.includes(x)).length === n;\n    });\n}\n\nconsole.log(select_words(\"\
    Mary had a little lamb\", 4));\nconsole.log(select_words(\"Mary had a little lamb\"\
    , 3));\nconsole.log(select_words(\"simple white space\", 2));\nconsole.log(select_words(\"\
    Hello world\", 4));\nconsole.log(select_words(\"Uncle sam\", 3));", "  const vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  const consonants = s.split('').filter(char =>\
    \ !vowels.includes(char.toLowerCase()));\n  const words = s.split(' ');\n  const\
    \ result = [];\n  words.forEach(word => {\n    const wordConsonants = word.split('').filter(char\
    \ => !vowels.includes(char.toLowerCase()));\n    if (wordConsonants.length ===\
    \ n) {\n      result.push(word);\n    }\n  });\n  return result;\n}\n", "    const\
    \ result: string[] = [];\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    const\
    \ words = s.split(' ');\n    for (let i = 0; i < words.length; i++) {\n      \
    \  let consonants = 0;\n        for (let j = 0; j < words[i].length; j++) {\n\
    \            if (!vowels.includes(words[i][j].toLowerCase())) {\n            \
    \    consonants++;\n            }\n        }\n        if (consonants === n) {\n\
    \            result.push(words[i]);\n        }\n    }\n    return result;\n}\n",
  "    if (!s.length) return [];\n    const res: string[] = [];\n    const words =\
    \ s.split(' ');\n    const ccount = (w: string) => {\n        let count = 0;\n\
    \        for (let i = 0; i < w.length; i++) {\n            if (!isVowel(w[i]))\
    \ count++;\n        }\n        return count;\n    }\n    for (let i = 0; i < words.length;\
    \ i++) {\n        if (ccount(words[i]) === n) res.push(words[i]);\n    }\n   \
    \ return res;\n}\n", "  return s.split(\" \").filter(word => [...word].filter(l\
    \ => /[^aeiou]/i.test(l)).length === n);\n}\n\nexport default select_words;",
  "  let result: string[] = [];\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let\
    \ words = s.split(' ');\n  let letters: string[];\n  let nConst: number;\n  for\
    \ (let i = 0; i < words.length; i++) {\n    nConst = 0;\n    letters = words[i].split('');\n\
    \    for (let j = 0; j < letters.length; j++) {\n      if (!vowels.includes(letters[j]))\
    \ {\n        nConst++;\n      }\n    }\n    if (nConst === n) {\n      result.push(words[i]);\n\
    \    }\n  }\n  return result;\n}\n", "    let words = s.split(' ').filter(s =>\
    \ /[aeiou]/gi.test(s) === false);\n    let res = [];\n    for (let i = 0; i <\
    \ words.length; i++) {\n        if (words[i].length === n) res.push(words[i]);\n\
    \    }\n    return res;\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
