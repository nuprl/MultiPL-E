language: ts
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    if (s === null || s === '') {\n        return s;\n    }\n    let result\
    \ = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === s[i].toUpperCase())\
    \ {\n            result += s[i].toLowerCase();\n        } else if (s[i] === s[i].toLowerCase())\
    \ {\n            result += s[i].toUpperCase();\n        } else {\n           \
    \ result += s[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(solve(\"\
    1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\
    ABC\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"\"));\nconsole.log(solve(null));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"\
    aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould\
    \ loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpakvgwdl_.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpakvgwdl_.js:47:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n\
    \  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1234

    AB

    #A@c

    abc

    AbC


    null

    '
  timestamp: 1659821677
- exit_code: 0
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    let res = \"\";\n    let isChar = false;\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (s[i].match(/[a-z]/i)) {\n            isChar = true;\n  \
    \          s[i] === s[i].toUpperCase() ? res += s[i].toLowerCase() : res += s[i].toUpperCase();\n\
    \        } else {\n            res += s[i];\n        }\n    }\n    if (!isChar)\
    \ {\n        res = res.split(\"\").reverse().join(\"\");\n    }\n    return res;\n\
    }\n\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"\
    #a@C\"));\nconsole.log(solve(\"aBcD\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n\
    \  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'AB

    4321

    #A@c

    AbCd

    '
  timestamp: 1659821677
- exit_code: 0
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  if (!s.match(/[a-z]/i)) {\n    return s.split('').reverse().join('');\n\
    \  }\n\n  return s.split('').map(ch => {\n    const charCode = ch.charCodeAt(0);\n\
    \    if (charCode >= 65 && charCode <= 90) {\n      return String.fromCharCode(charCode\
    \ + 32);\n    } else if (charCode >= 97 && charCode <= 122) {\n      return String.fromCharCode(charCode\
    \ - 32);\n    } else {\n      return ch;\n    }\n  }).join('');\n}\n\nconsole.log(solve('ab'));\n\
    console.log(solve('#a@C'));\nconsole.log(solve('1234'));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'AB

    #A@c

    4321

    '
  timestamp: 1659821677
- exit_code: 2
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    let res = '';\n    for (let c of s) {\n        res += isLetter(c) ? flipCase(c)\
    \ : c;\n    }\n    return res.length ? res : reverseString(s);\n}\n\nconsole.log(solve(\"\
    1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\"\
    );\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpktu7y6so.ts(12,19): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    ../../../../../tmp/tmpktu7y6so.ts(13,16): error TS2304: Cannot find name ''isLetter''.

    ../../../../../tmp/tmpktu7y6so.ts(13,30): error TS2304: Cannot find name ''flipCase''.

    ../../../../../tmp/tmpktu7y6so.ts(15,31): error TS2304: Cannot find name ''reverseString''.

    '
  timestamp: 1659821676
- exit_code: 0
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    let result: string = '';\n    if (s.split('').every(el => el.match(/[^a-zA-Z]/)))\
    \ {\n        result = s.split('').reverse().join('');\n    } else {\n        s.split('').forEach(char\
    \ => {\n            if (char.match(/[a-zA-Z]/)) {\n                if (char ===\
    \ char.toUpperCase()) {\n                    result += char.toLowerCase();\n \
    \               } else {\n                    result += char.toUpperCase();\n\
    \                }\n            } else {\n                result += char;\n  \
    \          }\n        });\n    }\n    return result;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  let result = \"\";\n  const str = s.split(\"\");\n  str.forEach((x) =>\
    \ {\n    if (x.match(/[a-z]/)) {\n      result += x.toUpperCase();\n    } else\
    \ if (x.match(/[A-Z]/)) {\n      result += x.toLowerCase();\n    } else {\n  \
    \    result += x;\n    }\n  });\n  return result.split(\"\").reverse().join(\"\
    \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"\
    AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'FdSa'\n\nshould\
    \ loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpxz09ifvd.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpxz09ifvd.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'FdSa',\n\
    \  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821677
- exit_code: 2
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  let reversed = '';\n  for (let char of s) {\n    const isUpper = char ===\
    \ char.toUpperCase();\n    char = isUpper ? char.toLowerCase() : char.toUpperCase();\n\
    \    reversed += char;\n  }\n  return reversed;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2ocnuyd1.ts(12,20): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821677
- exit_code: 2
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    let result: string = '';\n    for (let i = 0; i < s.length; i++) {\n\
    \        if (isLetter(s[i])) {\n            result += (isUpperCase(s[i])) ? s[i].toLowerCase()\
    \ : s[i].toUpperCase();\n        } else {\n            result += s[i];\n     \
    \   }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n\
    \  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzz_dy8oe.ts(13,13): error TS2304: Cannot find name
    ''isLetter''.

    ../../../../../tmp/tmpzz_dy8oe.ts(14,24): error TS2304: Cannot find name ''isUpperCase''.

    '
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  return s.split('').map(c => /[a-z]/i.test(c) ? c.toUpperCase() : c.toLowerCase()).join('');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"\
    aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ASDF'\n\nshould\
    \ loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmph21nt5zp.js:16:12)\n    at\
    \ Object.<anonymous> (/tmp/tmph21nt5zp.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ASDF',\n\
    \  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821677
- exit_code: 0
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    if (s.match(/[a-z]/gi)){\n        return s.split('').map(letter => {\n\
    \            if(letter.match(/[a-z]/gi)){\n                return letter === letter.toUpperCase()\
    \ ? letter.toLowerCase() : letter.toUpperCase();\n            }\n            return\
    \ letter;\n        }).join('');\n    }\n    return s.split('').reverse().join('');\n\
    }\n\nconsole.log(solve('ab'));\nconsole.log(solve('aB'));\nconsole.log(solve('#a@C'));\n\
    console.log(solve('1234'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"\
    AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'AB

    Ab

    #A@c

    4321

    '
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  return (\n    s\n      .split(\"\")\n      .map((x) =>\n        x.match(/[a-z]/i)\
    \ ? (x === x.toUpperCase() ? x.toLowerCase() : x.toUpperCase()) : x\n      )\n\
    \      .join(\"\")\n  );\n}\n\nexport default solve;\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould\
    \ loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpdqwk72cc.js:25:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdqwk72cc.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n\
    \  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  return s.split('').map(c => {\n    return c.match(/[a-z]/i) ?\n      c.toUpperCase()\
    \ === c ? c.toLowerCase() : c.toUpperCase() : c;\n  }).join('');\n}\n\nconsole.log(solve(\"\
    1234\")); // 4321\nconsole.log(solve(\"ab\")); // AB\nconsole.log(solve(\"#a@C\"\
    )); // #A@c\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"\
    AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould\
    \ loosely deep-equal\n\n'4321'\n    at test (/tmp/tmp4m5hjo5c.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4m5hjo5c.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n\
    \  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1234

    AB

    #A@c

    '
  timestamp: 1659821677
- exit_code: 0
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    let arr = s.split('');\n    if (!/[a-z]/gi.test(s)) return arr.reverse().join('');\n\
    \    return arr.map(char => {\n        if (/[a-z]/gi.test(char)) {\n         \
    \   return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \        }\n        return char;\n    }).join('');\n}\n\nconsole.log(solve('#a@C'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"\
    aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '#A@c

    '
  timestamp: 1659821677
- exit_code: 2
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  let arr = s.split('');\n  let newArr = [];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let uppercase = alphabet.toUpperCase();\n  let flag = false;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (alphabet.includes(arr[i]) || uppercase.includes(arr[i]))\
    \ {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (alphabet.includes(arr[j])) {\n    \
    \    newArr.push(arr[j].toUpperCase());\n      } else if (uppercase.includes(arr[j]))\
    \ {\n        newArr.push(arr[j].toLowerCase());\n      } else {\n        newArr.push(arr[j]);\n\
    \      }\n    }\n  } else {\n    for (let j = arr.length - 1; j >= 0; j--) {\n\
    \      newArr.push(arr[j]);\n    }\n  }\n  return newArr.join('');\n}\nconsole.log(solve('1234'));\n\
    console.log(solve('ab'));\nconsole.log(solve('#a@C'));\nconsole.log(solve('aB'));\n\
    console.log(solve('chris'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"\
    AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfln2afxl.ts(17,18): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpfln2afxl.ts(17,48): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpfln2afxl.ts(24,20): error TS2339: Property ''includes''
    does not exist on type ''string''.

    ../../../../../tmp/tmpfln2afxl.ts(26,28): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659821677
- exit_code: 2
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    return s.split('').map(char => {\n        if (/[a-z]/i.test(char)) {\n\
    \            return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \        } else {\n            return char;\n        }\n    }).join('').split('').reverse().join('');\n\
    }\n\nconsole.log(solve('wY'));\nconsole.log(solve('#a@C'));\nconsole.log(solve('ab'));\n\
    console.log(solve('1234'));\nconsole.log(solve('1A'));\nconsole.log(solve('Ab'));\n\
    console.log(solve('\"1A3a'));\nconsole.log(solve('CIViL\")'));\nconsole.log(solve('!!!%%%'));\n\
    console.log(solve('Ad'));\nconsole.log(solve('$#@'));\nconsole.log(solve('@#@$'));\n\
    console.log(solve('###A'));\nconsole.log(solve('abc'));\nconsole.log(solve('Zac'));\n\
    console.log(solve('Zac'));\nconsole.log(solve('@W@'));\nconsole.log(solve('@#@$'));\n\
    console.log(solve('#@$'));\nconsole.log(solve('@#$'));\nconsole.log(solve('@#$%'));\n\
    console.log(solve('VzD'));\nconsole.log(solve('@#@$%'));\nconsole.log(solve('@#@$%V'));\n\
    console.log(solve('$wY'));\nconsole.log(solve('@#$%^'));\nconsole.log(solve('@#@$%^'));\n\
    console.log(solve('@#@$%^&'));\nconsole.log(solve('@#@$%^&*'));\nconsole.log(solve('@#@$%^&*('));\n\
    console.log(solve('@#@$%^&*()'));\nconsole.log(\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = solve;\n\
    \  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpv5hkx78w.ts(52,9): error TS1005: '','' expected.

    '
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n  let result = '';\n  for (let i = 0; i < s.length; i++) {\n    const code\
    \ = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n      result += String.fromCharCode(code\
    \ + 32);\n    } else if (code >= 97 && code <= 122) {\n      result += String.fromCharCode(code\
    \ - 32);\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n\
    }\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"\
    aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould\
    \ loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpfbcmg_54.js:33:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfbcmg_54.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n\
    \  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1234

    AB

    #A@c

    '
  timestamp: 1659821677
- exit_code: 2
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    return s.split('').map(char => {\n        if (char.match(/[a-z]/i)) {\n\
    \            return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \        }\n        return char;\n    }).join('');\n}\n\nexport function runTests():\
    \ void {\n    const test = (s: string, out: string) => {\n        it(`${s} ->\
    \ ${out}`, () => {\n            assert.equal(solve(s), out);\n        });\n  \
    \  };\n    test(\"ab\", \"AB\");\n    test(\"aB\", \"Ab\");\n    test(\"#a@C\"\
    , \"#A@c\");\n    test(\"123\", \"123\");\n    test(\"\", \"\");\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n\
    \  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplmn59ze3.ts(21,9): error TS2582: Cannot find name
    ''it''. Do you need to install type definitions for a test runner? Try `npm i
    @types/jest` or `npm i @types/mocha`.

    '
  timestamp: 1659821677
- exit_code: 0
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    const r = s.split('').map(c => isNaN(Number(c)) ? (c === c.toUpperCase()\
    \ ? c.toLowerCase() : c.toUpperCase()) : c).join('');\n    return s.replace(/[A-Za-z]/g,\
    \ '') === s ? r.split('').reverse().join('') : r;\n}\n\nconsole.log(solve(\"1234\"\
    ));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: '4321

    AB

    #A@c

    '
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    return s.split('').reduce((pre, cur) => {\n        if(/[a-z]/i.test(cur))\
    \ {\n            return /[a-z]/.test(cur) ? pre += cur.toUpperCase() : pre +=\
    \ cur.toLowerCase();\n        } else {\n            return pre += cur;\n     \
    \   }\n    }, '').split('').reverse().join('');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"aSdF\");\n  assert.deepEqual(candidate(\"\
    1234\"),\"4321\");\n  assert.deepEqual(candidate(\"ab\"),\"AB\");\n  assert.deepEqual(candidate(\"\
    #a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"#AsdfW^45\"),\"#aSDFw^45\"\
    );\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n  assert.deepEqual(candidate(\"\
    #$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"#ccc\"),\"#CCC\");\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'FdSa'\n\nshould\
    \ loosely deep-equal\n\n'aSdF'\n    at test (/tmp/tmpdiiyh3am.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpdiiyh3am.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'FdSa',\n\
    \  expected: 'aSdF',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821677
- exit_code: 1
  program: "//You are given a string s.\n// if s[i] is a letter, reverse its case\
    \ from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the\
    \ string contains no letters, reverse the string.\n// The function should return\
    \ the resulted string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"\
    ab\") = \"AB\"\n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string\
    \ {\n    // let sArr = s.split('');\n    // let isLetterArr = sArr.map(n => n.match(/[a-z]/i));\n\
    \    // if (isLetterArr.indexOf(true) === -1) {\n    //     return sArr.reverse().join('');\n\
    \    // }\n    // let letterArr = sArr.filter(n => n.match(/[a-z]/i) !== null);\n\
    \    // let lowerCaseArr = letterArr.map(n => n.toLowerCase());\n    // let upperCaseArr\
    \ = letterArr.map(n => n.toUpperCase());\n    // for (let i = 0; i < lowerCaseArr.length;\
    \ i++) {\n    //     let letter = sArr.indexOf(lowerCaseArr[i]);\n    //     if\
    \ (letter !== -1) {\n    //         sArr[letter] = upperCaseArr[i];\n    //  \
    \   }\n    // }\n    // return sArr.join('');\n    \n    //Best Practice\n   \
    \ return s.split('').map(c => c.match(/[a-z]/i) ? (c === c.toUpperCase() ? c.toLowerCase()\
    \ : c.toUpperCase()) : c).join('');\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"\
    ab\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"a@C\"));\nconsole.log(solve(\"\
    \"));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"\
    ),\"aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
    ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
    #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\"\
    );\n  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
    #ccc\"),\"#CCC\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'1234'\n\nshould\
    \ loosely deep-equal\n\n'4321'\n    at test (/tmp/tmpqcf7vchj.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpqcf7vchj.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: '1234',\n\
    \  expected: '4321',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '1234

    AB

    #A@c

    A@c


    '
  timestamp: 1659821677
