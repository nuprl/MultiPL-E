name: HumanEval_71_triangle_area
language: ts
prompt: "//Given the lengths of the three sides of a triangle. Return the area of\n\
  // the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n// Otherwise return -1\n// Three sides make a valid triangle when the sum of\
  \ any two sides is greater \n// than the third side.\n// Example:\n// triangle_area(3,\
  \ 4, 5) == 6.00\n// triangle_area(1, 2, 10) == -1\nfunction triangle_area(a: number,\
  \ b: number, c: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = triangle_area;\n  assert.deepEqual(candidate(3, 4,\
  \ 5),6.0);\n  assert.deepEqual(candidate(1, 2, 10),-1);\n  assert.deepEqual(candidate(4,\
  \ 8, 5),8.18);\n  assert.deepEqual(candidate(2, 2, 2),1.73);\n  assert.deepEqual(candidate(1,\
  \ 2, 3),-1);\n  assert.deepEqual(candidate(10, 5, 7),16.25);\n  assert.deepEqual(candidate(2,\
  \ 6, 3),-1);\n  assert.deepEqual(candidate(1, 1, 1),0.43);\n  assert.deepEqual(candidate(2,\
  \ 2, 10),-1);\n}\n\ntest();"
completions: ["    let p = (a + b + c) / 2;\n    let area = Math.sqrt(p * (p - a)\
    \ * (p - b) * (p - c));\n    return area > 0 ? area : -1;\n}\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "  let p = (a + b + c) /\
    \ 2;\n  let r = Math.sqrt(p * (p - a) * (p - b) * (p - c));\n  return r > 0 ?\
    \ Math.round(r * 100) / 100 : -1;\n}\n", "  const isTriangle = a + b > c && a\
    \ + c > b && b + c > a;\n  return isTriangle ? Number((Math.sqrt(\n    (a + b\
    \ + c) * (a + b - c) * (a - b + c) * (-a + b + c)\n  ) / 4).toFixed(2)) : -1;\n\
    }\nconsole.log(triangle_area(1, 2, 10));\nconsole.log(triangle_area(3, 4, 5));\n",
  "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n    if (area > 0) {\n        return +area.toFixed(2);\n    } else\
    \ {\n        return -1;\n    }\n}\n\nconsole.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    let s = (a + b + c) / 2;\n    return Math.sqrt(s * (s - a)\
    \ * (s - b) * (s - c)) || -1;\n}\n", "    let s = (a + b + c) / 2;\n    let area\
    \ = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    if (isNaN(area)) {\n    \
    \    return -1;\n    }\n    return Math.round(area * 100) / 100;\n}\n\nconsole.log(triangle_area(3,\
    \ 4, 5));\nconsole.log(triangle_area(1, 2, 10));\n", "    const perimeter = (a\
    \ + b + c) / 2;\n    const area = Math.sqrt(perimeter * (perimeter - a) * (perimeter\
    \ - b) * (perimeter - c));\n    return Number.isNaN(area) ? -1 : area;\n}\n\n\
    console.log(triangle_area(3, 4, 5));\nconsole.log(triangle_area(1, 2, 10));",
  "  const s = (a + b + c) / 2;\n  const area = Math.sqrt(s * (s - a) * (s - b) *\
    \ (s - c));\n  return area >= 0 ? Math.round(area * 100) / 100 : -1;\n}\n\nconsole.log(triangle_area(1,\
    \ 2, 10));\nconsole.log(triangle_area(5, 5, 5));\nconsole.log(triangle_area(3,\
    \ 4, 5));\n", "    let s = (a + b + c) / 2;\n    return (s - a) * (s - b) * (s\
    \ - c) > 0 ? Math.sqrt(s * (s - a) * (s - b) * (s - c)) : -1;\n}\n", "    if (a\
    \ + b <= c || a + c <= b || b + c <= a) {\n        return -1;\n    }\n    const\
    \ s = (a + b + c) / 2;\n    return +(Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2);\n\
    }\n", "    let heron = (a, b, c) => {\n        let p = (a + b + c) / 2;\n    \
    \    return Math.sqrt(p * (p - a) * (p - b) * (p - c));\n    }\n    if (a + b\
    \ > c && a + c > b && b + c > a) {\n        return Math.round(heron(a, b, c) *\
    \ 100) / 100;\n    }\n    return -1;\n}\n", "  let area: number;\n  if (a + b\
    \ > c && a + c > b && b + c > a) {\n    area = (a + b + c) / 2;\n    return Math.round(Math.sqrt(area\
    \ * (area - a) * (area - b) * (area - c)) * 100) / 100;\n  } else {\n    return\
    \ -1;\n  }\n}\n", "    const p = (a + b + c) / 2;\n    const s = Math.sqrt(p *\
    \ (p - a) * (p - b) * (p - c));\n    return s == s ? +s.toFixed(2) : -1;\n}\n",
  "  let s = (a + b + c) / 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s -\
    \ c));\n  if (area === 0) {\n    return -1;\n  } else {\n    return +area.toFixed(2);\n\
    \  }\n}\n", "    if(a + b > c && a + c > b && b + c > a){\n        let p = (a\
    \ + b + c) / 2;\n        return Math.round(Math.sqrt(p * (p - a) * (p - b) * (p\
    \ - c)) * 100) / 100;\n    }\n    return -1;\n}\n", "  const aSq = a * a;\n  const\
    \ bSq = b * b;\n  const cSq = c * c;\n  const s = (a + b + c) / 2;\n  const areaSq\
    \ = s * (s - a) * (s - b) * (s - c);\n  if (areaSq < 0) {\n    return -1;\n  }\n\
    \  const area = Math.sqrt(areaSq);\n  return Number(area.toFixed(2));\n}\nconsole.log(triangle_area(1,\
    \ 2, 10));\n", "    let s = (a + b + c) / 2;\n    let area = Math.sqrt(s * (s\
    \ - a) * (s - b) * (s - c));\n    if (area <= 0) {\n        return -1;\n    }\n\
    \    return Number(area.toFixed(2));\n}\n", "    let area = -1;\n    if (validateTriangle(a,\
    \ b, c)) {\n        area = areaOfTriangle(a, b, c);\n    }\n    return +area.toFixed(2);\n\
    }\n", "    // TODO: Implement\n    return -1;\n}\n", "  let s = (a + b + c) /\
    \ 2;\n  let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n  return area\
    \ > 0 ? Number(area.toFixed(2)) : -1;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
