name: HumanEval_161_solve
language: ts
prompt: "//You are given a string s.\n// if s[i] is a letter, reverse its case from\
  \ lower to upper or vise versa, \n// otherwise keep it as it is.\n// If the string\
  \ contains no letters, reverse the string.\n// The function should return the resulted\
  \ string.\n// Examples\n// solve(\"1234\") = \"4321\"\n// solve(\"ab\") = \"AB\"\
  \n// solve(\"#a@C\") = \"#A@c\"\nfunction solve(s: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = solve;\n  assert.deepEqual(candidate(\"AsDf\"),\"\
  aSdF\");\n  assert.deepEqual(candidate(\"1234\"),\"4321\");\n  assert.deepEqual(candidate(\"\
  ab\"),\"AB\");\n  assert.deepEqual(candidate(\"#a@C\"),\"#A@c\");\n  assert.deepEqual(candidate(\"\
  #AsdfW^45\"),\"#aSDFw^45\");\n  assert.deepEqual(candidate(\"#6@2\"),\"2@6#\");\n\
  \  assert.deepEqual(candidate(\"#$a^D\"),\"#$A^d\");\n  assert.deepEqual(candidate(\"\
  #ccc\"),\"#CCC\");\n}\n\ntest();"
completions: ["    if (s === null || s === '') {\n        return s;\n    }\n    let\
    \ result = '';\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] ===\
    \ s[i].toUpperCase()) {\n            result += s[i].toLowerCase();\n        }\
    \ else if (s[i] === s[i].toLowerCase()) {\n            result += s[i].toUpperCase();\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"\
    #a@C\"));\nconsole.log(solve(\"ABC\"));\nconsole.log(solve(\"aBc\"));\nconsole.log(solve(\"\
    \"));\nconsole.log(solve(null));", "    let res = \"\";\n    let isChar = false;\n\
    \    for (let i = 0; i < s.length; i++) {\n        if (s[i].match(/[a-z]/i)) {\n\
    \            isChar = true;\n            s[i] === s[i].toUpperCase() ? res +=\
    \ s[i].toLowerCase() : res += s[i].toUpperCase();\n        } else {\n        \
    \    res += s[i];\n        }\n    }\n    if (!isChar) {\n        res = res.split(\"\
    \").reverse().join(\"\");\n    }\n    return res;\n}\n\nconsole.log(solve(\"ab\"\
    ));\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"\
    aBcD\"));", "  if (!s.match(/[a-z]/i)) {\n    return s.split('').reverse().join('');\n\
    \  }\n\n  return s.split('').map(ch => {\n    const charCode = ch.charCodeAt(0);\n\
    \    if (charCode >= 65 && charCode <= 90) {\n      return String.fromCharCode(charCode\
    \ + 32);\n    } else if (charCode >= 97 && charCode <= 122) {\n      return String.fromCharCode(charCode\
    \ - 32);\n    } else {\n      return ch;\n    }\n  }).join('');\n}\n\nconsole.log(solve('ab'));\n\
    console.log(solve('#a@C'));\nconsole.log(solve('1234'));", "    let res = '';\n\
    \    for (let c of s) {\n        res += isLetter(c) ? flipCase(c) : c;\n    }\n\
    \    return res.length ? res : reverseString(s);\n}\n\nconsole.log(solve(\"1234\"\
    ));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));", "    let result:\
    \ string = '';\n    if (s.split('').every(el => el.match(/[^a-zA-Z]/))) {\n  \
    \      result = s.split('').reverse().join('');\n    } else {\n        s.split('').forEach(char\
    \ => {\n            if (char.match(/[a-zA-Z]/)) {\n                if (char ===\
    \ char.toUpperCase()) {\n                    result += char.toLowerCase();\n \
    \               } else {\n                    result += char.toUpperCase();\n\
    \                }\n            } else {\n                result += char;\n  \
    \          }\n        });\n    }\n    return result;\n}", "  let result = \"\"\
    ;\n  const str = s.split(\"\");\n  str.forEach((x) => {\n    if (x.match(/[a-z]/))\
    \ {\n      result += x.toUpperCase();\n    } else if (x.match(/[A-Z]/)) {\n  \
    \    result += x.toLowerCase();\n    } else {\n      result += x;\n    }\n  });\n\
    \  return result.split(\"\").reverse().join(\"\");\n}\n", "  let reversed = '';\n\
    \  for (let char of s) {\n    const isUpper = char === char.toUpperCase();\n \
    \   char = isUpper ? char.toLowerCase() : char.toUpperCase();\n    reversed +=\
    \ char;\n  }\n  return reversed;\n}\n", "    let result: string = '';\n    for\
    \ (let i = 0; i < s.length; i++) {\n        if (isLetter(s[i])) {\n          \
    \  result += (isUpperCase(s[i])) ? s[i].toLowerCase() : s[i].toUpperCase();\n\
    \        } else {\n            result += s[i];\n        }\n    }\n    return result;\n\
    }\n", "  return s.split('').map(c => /[a-z]/i.test(c) ? c.toUpperCase() : c.toLowerCase()).join('');\n\
    }\n", "    if (s.match(/[a-z]/gi)){\n        return s.split('').map(letter =>\
    \ {\n            if(letter.match(/[a-z]/gi)){\n                return letter ===\
    \ letter.toUpperCase() ? letter.toLowerCase() : letter.toUpperCase();\n      \
    \      }\n            return letter;\n        }).join('');\n    }\n    return\
    \ s.split('').reverse().join('');\n}\n\nconsole.log(solve('ab'));\nconsole.log(solve('aB'));\n\
    console.log(solve('#a@C'));\nconsole.log(solve('1234'));", "  return (\n    s\n\
    \      .split(\"\")\n      .map((x) =>\n        x.match(/[a-z]/i) ? (x === x.toUpperCase()\
    \ ? x.toLowerCase() : x.toUpperCase()) : x\n      )\n      .join(\"\")\n  );\n\
    }\n\nexport default solve;", "  return s.split('').map(c => {\n    return c.match(/[a-z]/i)\
    \ ?\n      c.toUpperCase() === c ? c.toLowerCase() : c.toUpperCase() : c;\n  }).join('');\n\
    }\n\nconsole.log(solve(\"1234\")); // 4321\nconsole.log(solve(\"ab\")); // AB\n\
    console.log(solve(\"#a@C\")); // #A@c", "    let arr = s.split('');\n    if (!/[a-z]/gi.test(s))\
    \ return arr.reverse().join('');\n    return arr.map(char => {\n        if (/[a-z]/gi.test(char))\
    \ {\n            return char === char.toUpperCase() ? char.toLowerCase() : char.toUpperCase();\n\
    \        }\n        return char;\n    }).join('');\n}\n\nconsole.log(solve('#a@C'));",
  "  let arr = s.split('');\n  let newArr = [];\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  let uppercase = alphabet.toUpperCase();\n  let flag = false;\n  for (let i\
    \ = 0; i < arr.length; i++) {\n    if (alphabet.includes(arr[i]) || uppercase.includes(arr[i]))\
    \ {\n      flag = true;\n      break;\n    }\n  }\n  if (flag) {\n    for (let\
    \ j = 0; j < arr.length; j++) {\n      if (alphabet.includes(arr[j])) {\n    \
    \    newArr.push(arr[j].toUpperCase());\n      } else if (uppercase.includes(arr[j]))\
    \ {\n        newArr.push(arr[j].toLowerCase());\n      } else {\n        newArr.push(arr[j]);\n\
    \      }\n    }\n  } else {\n    for (let j = arr.length - 1; j >= 0; j--) {\n\
    \      newArr.push(arr[j]);\n    }\n  }\n  return newArr.join('');\n}\nconsole.log(solve('1234'));\n\
    console.log(solve('ab'));\nconsole.log(solve('#a@C'));\nconsole.log(solve('aB'));\n\
    console.log(solve('chris'));\n", "    return s.split('').map(char => {\n     \
    \   if (/[a-z]/i.test(char)) {\n            return char === char.toUpperCase()\
    \ ? char.toLowerCase() : char.toUpperCase();\n        } else {\n            return\
    \ char;\n        }\n    }).join('').split('').reverse().join('');\n}\n\nconsole.log(solve('wY'));\n\
    console.log(solve('#a@C'));\nconsole.log(solve('ab'));\nconsole.log(solve('1234'));\n\
    console.log(solve('1A'));\nconsole.log(solve('Ab'));\nconsole.log(solve('\"1A3a'));\n\
    console.log(solve('CIViL\")'));\nconsole.log(solve('!!!%%%'));\nconsole.log(solve('Ad'));\n\
    console.log(solve('$#@'));\nconsole.log(solve('@#@$'));\nconsole.log(solve('###A'));\n\
    console.log(solve('abc'));\nconsole.log(solve('Zac'));\nconsole.log(solve('Zac'));\n\
    console.log(solve('@W@'));\nconsole.log(solve('@#@$'));\nconsole.log(solve('#@$'));\n\
    console.log(solve('@#$'));\nconsole.log(solve('@#$%'));\nconsole.log(solve('VzD'));\n\
    console.log(solve('@#@$%'));\nconsole.log(solve('@#@$%V'));\nconsole.log(solve('$wY'));\n\
    console.log(solve('@#$%^'));\nconsole.log(solve('@#@$%^'));\nconsole.log(solve('@#@$%^&'));\n\
    console.log(solve('@#@$%^&*'));\nconsole.log(solve('@#@$%^&*('));\nconsole.log(solve('@#@$%^&*()'));\n\
    console.log(", "  let result = '';\n  for (let i = 0; i < s.length; i++) {\n \
    \   const code = s.charCodeAt(i);\n    if (code >= 65 && code <= 90) {\n     \
    \ result += String.fromCharCode(code + 32);\n    } else if (code >= 97 && code\
    \ <= 122) {\n      result += String.fromCharCode(code - 32);\n    } else {\n \
    \     result += s[i];\n    }\n  }\n  return result;\n}\n\nconsole.log(solve('1234'));\n\
    console.log(solve('ab'));\nconsole.log(solve('#a@C'));", "    return s.split('').map(char\
    \ => {\n        if (char.match(/[a-z]/i)) {\n            return char === char.toUpperCase()\
    \ ? char.toLowerCase() : char.toUpperCase();\n        }\n        return char;\n\
    \    }).join('');\n}\n\nexport function runTests(): void {\n    const test = (s:\
    \ string, out: string) => {\n        it(`${s} -> ${out}`, () => {\n          \
    \  assert.equal(solve(s), out);\n        });\n    };\n    test(\"ab\", \"AB\"\
    );\n    test(\"aB\", \"Ab\");\n    test(\"#a@C\", \"#A@c\");\n    test(\"123\"\
    , \"123\");\n    test(\"\", \"\");\n}", "    const r = s.split('').map(c => isNaN(Number(c))\
    \ ? (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase()) : c).join('');\n\
    \    return s.replace(/[A-Za-z]/g, '') === s ? r.split('').reverse().join('')\
    \ : r;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"\
    #a@C\"));", "    return s.split('').reduce((pre, cur) => {\n        if(/[a-z]/i.test(cur))\
    \ {\n            return /[a-z]/.test(cur) ? pre += cur.toUpperCase() : pre +=\
    \ cur.toLowerCase();\n        } else {\n            return pre += cur;\n     \
    \   }\n    }, '').split('').reverse().join('');\n}\n", "    // let sArr = s.split('');\n\
    \    // let isLetterArr = sArr.map(n => n.match(/[a-z]/i));\n    // if (isLetterArr.indexOf(true)\
    \ === -1) {\n    //     return sArr.reverse().join('');\n    // }\n    // let\
    \ letterArr = sArr.filter(n => n.match(/[a-z]/i) !== null);\n    // let lowerCaseArr\
    \ = letterArr.map(n => n.toLowerCase());\n    // let upperCaseArr = letterArr.map(n\
    \ => n.toUpperCase());\n    // for (let i = 0; i < lowerCaseArr.length; i++) {\n\
    \    //     let letter = sArr.indexOf(lowerCaseArr[i]);\n    //     if (letter\
    \ !== -1) {\n    //         sArr[letter] = upperCaseArr[i];\n    //     }\n  \
    \  // }\n    // return sArr.join('');\n    \n    //Best Practice\n    return s.split('').map(c\
    \ => c.match(/[a-z]/i) ? (c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase())\
    \ : c).join('');\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"\
    ));\nconsole.log(solve(\"#a@C\"));\nconsole.log(solve(\"a@C\"));\nconsole.log(solve(\"\
    \"));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
