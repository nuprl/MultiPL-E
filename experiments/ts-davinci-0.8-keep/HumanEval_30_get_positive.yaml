name: HumanEval_30_get_positive
language: ts
prompt: "//Return only positive numbers in the list.\n// >>> get_positive([-1, 2,\
  \ -4, 5, 6])\n// [2, 5, 6]\n// >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123,\
  \ 1, -10])\n// [5, 3, 2, 3, 9, 123, 1]\nfunction get_positive(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = get_positive;\n  assert.deepEqual(candidate([-1, -2,\
  \ 4, 5, 6]),[4, 5, 6]);\n  assert.deepEqual(candidate([5, 3, -5, 2, 3, 3, 9, 0,\
  \ 123, 1, -10]),[5, 3, 2, 3, 3, 9, 123, 1]);\n  assert.deepEqual(candidate([-1,\
  \ -2]),[]);\n  assert.deepEqual(candidate([]),[]);\n}\n\ntest();"
completions: ["    return l.filter(v => v > 0);\n}\n", "    let m: number[] = [];\n\
    \    for (let x of l) {\n        if (x > 0) {\n            m.push(x);\n      \
    \  }\n    }\n    return m;\n}\n", "    let ret: number[] = [];\n    for (let i\
    \ = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n            ret.push(l[i]);\n\
    \        }\n    }\n    return ret;\n}\n", "    var result: number[] = [];\n  \
    \  for (var i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n           \
    \ result.push(l[i]);\n        }\n    }\n    return result;\n}\n", "    let r =\
    \ [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > 0) {\n   \
    \         r.push(l[i]);\n        }\n    }\n    return r;\n}\n", "    return l.filter(v\
    \ => v > 0);\n}\n", "    // return l.filter( (e: number) => { return e > 0; });\n\
    \    return l.filter( (e) => e > 0);\n}\nconsole.log(get_positive([-1, 2, -4,\
    \ 5, 6]));\nconsole.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\
    \n", "  return l.filter(num => num > 0);\n}\n", "    return l.filter(value =>\
    \ value > 0);\n}\n", "    let result: number[] = [];\n    for (let i = 0; i <\
    \ l.length; i++) {\n        if (l[i] > 0) {\n            result.push(l[i]);\n\
    \        }\n    }\n    return result;\n}\n", "  return l.filter(x => x > 0);\n\
    }\n", "    let answer: number[] = [];\n    for (let i = 0; i < l.length; i++)\
    \ {\n        if (l[i] > 0) {\n            answer.push(l[i]);\n        }\n    }\n\
    \    return answer;\n}\n", "    return l.filter(x => x >= 0);\n}\n", "    return\
    \ l.filter(n => n > 0);\n}\n", "    return l.filter(x => x > 0);\n}\n", "  return\
    \ l.filter(num => num > 0);\n}\n", "  let positives: number[] = [];\n  for (let\
    \ i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positives.push(l[i]);\n\
    \    }\n  }\n  return positives;\n}\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\n\
    console.log(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n", "    return\
    \ l.filter(function(n) {\n        return n > 0;\n    });\n}\n", "    return l.filter(num\
    \ => num > 0);\n}\n\nconsole.log(get_positive([-1, 2, -4, 5, 6]));\nconsole.log(get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\n", "  return l.filter(n => n > 0);\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
