name: HumanEval_7_filter_by_substring
language: ts
prompt: "//Filter an input list of strings only for ones that contain given substring\n\
  // >>> filter_by_substring([], 'a')\n// []\n// >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n// ['abc', 'bacd', 'array']\nfunction filter_by_substring(strings:\
  \ string[], substring: string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = filter_by_substring;\n  assert.deepEqual(candidate([],\
  \ \"john\"),[]);\n  assert.deepEqual(candidate([\"xxx\", \"asd\", \"xxy\", \"john\
  \ doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"]);\n  assert.deepEqual(candidate([\"grunt\", \"\
  trumpet\", \"prune\", \"gruesome\"], \"run\"),[\"grunt\", \"prune\"]);\n}\n\ntest();"
completions: ["    let result = strings.filter(currentString => currentString.includes(substring));\n\
    \    return result;\n}\n\nexport default filter_by_substring;", "    return strings.filter(s\
    \ => s.includes(substring));\n}\n", "    return strings.filter(function(string)\
    \ {\n        return string.includes(substring);\n    });\n}\n\ndescribe('filter_by_substring',\
    \ function() {\n    it('should work', function() {\n        let input = ['abc',\
    \ 'bacd', 'cde', 'array'];\n        let output = filter_by_substring(input, 'a');\n\
    \        expect(output).to.deep.equal(['abc', 'bacd', 'array']);\n    });\n});\n",
  "    return strings.filter(function(string) {\n        return string.includes(substring);\n\
    \    });\n}\n", "  return strings.filter(s => s.includes(substring));\n}\n", " \
    \   return strings.filter(function(string) {\n        return string.indexOf(substring)\
    \ > -1;\n    });\n}\n", "    let result: string[] = [];\n    for (let str of strings)\
    \ {\n        if (str.indexOf(substring) !== -1) {\n            result.push(str);\n\
    \        }\n    }\n    return result;\n}\n", "  //For each possible string\n \
    \ for (let i = 0; i < strings.length; i++) {\n    //If the string does not contain\
    \ the substring, remove it from the list\n    if (!strings[i].includes(substring))\
    \ {\n      strings.splice(i, 1);\n      i--;\n    }\n  }\n  return strings;\n\
    }\n", "    return strings.filter(str => str.includes(substring));\n}\n", "   \
    \ return strings.filter(function(string) {\n        return string.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "  const filt: string[] = [];\n  strings.forEach(function(s)\
    \ {\n    if (s.includes(substring)) {\n      filt.push(s);\n    }\n  });\n  return\
    \ filt;\n}\n", "  const new_array: string[] = [];\n  for (let string of strings)\
    \ {\n    if (string.includes(substring)) {\n      new_array.push(string);\n  \
    \  }\n  }\n  return new_array;\n}\n", "  var new_strings: string[] = [];\n  for\
    \ (var i: number = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring)\
    \ != -1) {\n      new_strings.push(strings[i]);\n    }\n  }\n  return new_strings;\n\
    }\n", "    return _.filter(strings, function(str) {\n        return str.indexOf(substring)\
    \ !== -1;\n    });\n}\n", "  return strings.filter(string => string.includes(substring));\n\
    }\n\n", "  //return strings.filter(function(e){ return e.indexOf(substring) >\
    \ -1; });\n  return strings.filter(e => e.indexOf(substring) > -1);\n}\n", " \
    \ return strings.filter(str => str.includes(substring));\n}\n", "    return _.filter(strings,\
    \ (s) => {\n        return s.indexOf(substring) >= 0;\n    });\n}\n", "    return\
    \ strings.filter(string => string.includes(substring));\n}\n", "    return strings.filter(string\
    \ => string.includes(substring));\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
