name: HumanEval_160_do_algebra
language: ts
prompt: "//Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n// the second list is a list of integers. Use the two given\
  \ lists to build the algebric \n// expression and return the evaluation of this\
  \ expression.\n// The basic algebra operations:\n// Addition ( + ) \n// Subtraction\
  \ ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ list is equal to the length of operand list minus one.\n// Operand is a list of\
  \ of non-negative integers.\n// Operator list has at least one operator, and operand\
  \ list has at least two operands.\nfunction do_algebra(operator: string[], operand:\
  \ number[]): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = do_algebra;\n  assert.deepEqual(candidate([\"**\"\
  , \"*\", \"+\"], [2, 3, 4, 5]),37);\n  assert.deepEqual(candidate([\"+\", \"*\"\
  , \"-\"], [2, 3, 4, 5]),9);\n  assert.deepEqual(candidate([\"//\", \"*\"], [7, 3,\
  \ 4]),8);\n}\n\ntest();"
completions: ["  let temp = [];\n  for (let i = 0; i < operator.length; i++) {\n \
    \   if (operator[i] === '**') {\n      temp[i + 1] = Math.pow(operand[i], operand[i\
    \ + 1]);\n    } else if (operator[i] === '//') {\n      temp[i + 1] = Math.floor(operand[i]\
    \ / operand[i + 1]);\n    } else {\n      temp[i + 1] = 0;\n    }\n  }\n  for\
    \ (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '*') {\n  \
    \    temp[i + 1] = operand[i] * operand[i + 1];\n    } else if (operator[i] ===\
    \ '/') {\n      temp[i + 1] = operand[i] / operand[i + 1];\n    }\n  }\n  for\
    \ (let i = 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n  \
    \    temp[i + 1] = operand[i] + operand[i + 1];\n    } else if (operator[i] ===\
    \ '-') {\n      temp[i + 1] = operand[i] - operand[i + 1];\n    }\n  }\n  return\
    \ temp[temp.length - 1];\n}\n\nconsole.log(do_algebra(['+', '-', '+'], [2, 3,\
    \ 4, 5]), 6);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]), 9);\nconsole.log(do_algebra(['//',\
    \ '*', '**'], [2, 3, 4, 5]), 10);\nconsole.log(do_algebra(['+', '-'], [3, 2, 5]),\
    \ 6);\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]), 11);\nconsole.log(do_algebra(['/',\
    \ '-', '+'], [2, 3, 4, 5]), -0.", "  let result = operand[0];\n  for (let i =\
    \ 0; i < operator.length; i++) {\n    if (operator[i] === '+') {\n      result\
    \ += operand[i + 1];\n    } else if (operator[i] === '-') {\n      result -= operand[i\
    \ + 1];\n    } else if (operator[i] === '*') {\n      result *= operand[i + 1];\n\
    \    } else if (operator[i] === '//') {\n      result = Math.floor(result / operand[i\
    \ + 1]);\n    } else if (operator[i] === '**') {\n      result = Math.pow(result,\
    \ operand[i + 1]);\n    }\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nconsole.log(do_algebra(['+', '-', '//'], [2,\
    \ 3, 4, 5])); // -2\nconsole.log(do_algebra(['+', '*', '-', '**'], [2, 3, 4, 5,\
    \ 1])); // 10\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 1])); // NaN",
  "    let i: number = 0;\n    let result: number = operand[0];\n    while (i < operator.length)\
    \ {\n        switch (operator[i]) {\n            case '+':\n                result\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result = Math.floor(result / operand[i + 1]);\n\
    \                break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n        i++;\n    }\n \
    \   return result;\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\
    console.log(do_algebra(['+', '-'], [1, 2, 3]));\nconsole.log(do_algebra(['+',\
    \ '-'], [5, 2, 3]));\nconsole.log(do_algebra(['//', '**'], [8, 2, 3]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [1, 2, 3, 4]));", "    return operand.reduce((acc, curr, i) => {\n\
    \        return acc + (i > 0 ? operator[i - 1] + curr : curr);\n    })\n}\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "    let result = operand[0];\n    for (let i =\
    \ 0; i < operator.length; i++) {\n        switch (operator[i]) {\n           \
    \ case '+':\n                result += operand[i + 1];\n                break;\n\
    \            case '-':\n                result -= operand[i + 1];\n          \
    \      break;\n            case '*':\n                result *= operand[i + 1];\n\
    \                break;\n            case '//':\n                result = Math.floor(result\
    \ / operand[i + 1]);\n                break;\n            case '**':\n       \
    \         result = Math.pow(result, operand[i + 1]);\n                break;\n\
    \        }\n    }\n    return result;\n}\nconsole.log(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '//', '*', '**', '-'], [2, 3,\
    \ 4, 5, 6]));", "  if (operator[0] === '//') {\n    return parseInt(\n      String(operand[0]\
    \ + operator[0] + operand[1] + operator[1] + operand[2])\n    );\n  }\n  if (operator[0]\
    \ === '**') {\n    return operand[0] ** operand[1];\n  }\n  return eval(\n   \
    \ operand[0] + operator[0] + operand[1] + operator[1] + operand[2]\n  );\n}\n\n\
    console.log(do_algebra(['//', '+'], [5, 2, 3]));\nconsole.log(do_algebra(['**',\
    \ '+'], [5, 2, 3]));\nconsole.log(do_algebra(['*', '+'], [5, 2, 3]));\nconsole.log(do_algebra(['+',\
    \ '*'], [5, 2, 3]));\nconsole.log(do_algebra(['+', '+'], [5, 2, 3]));\nconsole.log(do_algebra(['-',\
    \ '+'], [5, 2, 3]));\nconsole.log(do_algebra(['-', '-'], [5, 2, 3]));\nconsole.log(do_algebra(['*',\
    \ '*'], [5, 2, 3]));\nconsole.log(do_algebra(['//', '*'], [5, 2, 3]));\nconsole.log(do_algebra(['**',\
    \ '*'], [5, 2, 3]));\nconsole.log(do_algebra(['//', '+'], [5, 2, 3]));\nconsole.log(do_algebra(['//',\
    \ '+'], [5, 2, 3]));\nconsole.log(do_algebra(['//', '+'], [5, 2, 3]));\nconsole.log(do_algebra(['//',\
    \ '+'], [5, 2, 3]));\nconsole.log(do_algebra(['//', '+'], [5, 2, 3]));\nconsole.log(do_algebra(['//",
  "  return eval(operand.reduce((a, v, i) => a + v + (operator[i] || ''), ''));\n\
    }\n\nconsole.log(do_algebra(['+', '-', '*'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-'], [1, 2, 3]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 2, 3, 4]));\n\
    console.log(do_algebra(['+', '*', '-'], [10, 2, 3, 4, 5]));\nconsole.log(do_algebra(['*',\
    \ '+', '-'], [100, 2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '//', '+', '-'],\
    \ [10, 2, 3, 4, 5]));\nconsole.log(do_algebra(['**', '//', '+', '-'], [2, 3, 4,\
    \ 5, 10]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '*', '-'], [100, 2,\
    \ 3, 4]));\nconsole.log(do_algebra(['+', '*', '-'], [10, 2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [1, 2, 3, 4]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '-', '*'], [5, 4, 3, 2]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]));", "    //console.log(operator, operand);\n    let expr = \"\";\n    let\
    \ operand_cursor = 0;\n    let operator_cursor = 0;\n    while (operand_cursor\
    \ < operand.length && operator_cursor < operator.length) {\n        expr += operand[operand_cursor]\
    \ + \" \" + operator[operator_cursor] + \" \";\n        operand_cursor++;\n  \
    \      operator_cursor++;\n    }\n    if (operand_cursor < operand.length) {\n\
    \        expr += operand[operand_cursor];\n    }\n    return eval(expr);\n}\n",
  "    let result = operand[0];\n    for (let i = 0; i < operator.length; i++) {\n\
    \        switch (operator[i]) {\n            case '+':\n                result\
    \ += operand[i + 1];\n                break;\n            case '-':\n        \
    \        result -= operand[i + 1];\n                break;\n            case '*':\n\
    \                result *= operand[i + 1];\n                break;\n         \
    \   case '//':\n                result /= operand[i + 1];\n                break;\n\
    \            case '**':\n                result **= operand[i + 1];\n        \
    \        break;\n        }\n    }\n    return result;\n}", "  const [head, ...tail]\
    \ = operand;\n  return tail.reduce((acc, curr, i) => {\n    switch (operator[i])\
    \ {\n      case '+':\n        return acc + curr;\n      case '-':\n        return\
    \ acc - curr;\n      case '*':\n        return acc * curr;\n      case '//':\n\
    \        return Math.floor(acc / curr);\n      case '**':\n        return Math.pow(acc,\
    \ curr);\n    }\n  }, head);\n}\n", "    let arr = operand;\n    let result =\
    \ arr[0];\n    for (let i = 0; i < operator.length; i++) {\n        result = calculator(result,\
    \ arr[i + 1], operator[i]);\n    }\n    return result;\n}", "    let result =\
    \ operand[0];\n    for (let i = 0; i < operator.length; i++) {\n        switch\
    \ (operator[i]) {\n            case '+':\n                result += operand[i\
    \ + 1];\n                break;\n            case '-':\n                result\
    \ -= operand[i + 1];\n                break;\n            case '*':\n        \
    \        result *= operand[i + 1];\n                break;\n            case '//':\n\
    \                result = Math.floor(result / operand[i + 1]);\n             \
    \   break;\n            case '**':\n                result = Math.pow(result,\
    \ operand[i + 1]);\n                break;\n        }\n    }\n    return result;\n\
    }\n", "    return eval(operand.map((x, i) => operand[i - 1] ? `${operand[i - 1]}\
    \ ${operator[i - 1]} ${x}` : `${x}`).join(\"\"));\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 6]));\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 5]));\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6, 5, 5]));", "  let res = operand[0];\n  for (let i\
    \ = 0; i < operator.length; i++) {\n    const op = operator[i];\n    const num\
    \ = operand[i + 1];\n    switch (op) {\n      case '+':\n        res += num;\n\
    \        break;\n      case '-':\n        res -= num;\n        break;\n      case\
    \ '*':\n        res *= num;\n        break;\n      case '//':\n        res = Math.floor(res\
    \ / num);\n        break;\n      case '**':\n        res = Math.pow(res, num);\n\
    \        break;\n    }\n  }\n  return res;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]), 9);\nconsole.log(do_algebra(['+', '*', '-'], [10,\
    \ 3, 4, 1]), 47);\nconsole.log(do_algebra(['//', '**', '-'], [10, 3, 4, 1]), 0);\n\
    console.log(do_algebra(['//', '*', '+'], [10, 3, 4, 1]), 14);\nconsole.log(do_algebra(['*',\
    \ '-', '+'], [10, 3, 4, 1]), -17);\nconsole.log(do_algebra(['//', '+', '*'], [10,\
    \ 3, 4, 1]), 15);\nconsole.log(do_algebra(['+', '+', '+'], [10, 3, 4, 1]), 18);\n\
    console.log(do_algebra(['-', '+', '+'], [10, 3, 4, 1]), 10);\nconsole.log(do_algebra(['-',\
    \ '+', '+'], [1, 2, 3, 4]), 2);\nconsole.log(do_algebra(['-', '*', '+'], [1, 2,\
    \ 3, 4]), -3);\nconsole.log(do_algebra(['-', '*', '+'], [1, 2, 3, 4, 5]), -11);\n\
    console.log(", "    let result = operand[0];\n    for (let i = 0; i < operator.length;\
    \ i++) {\n        if (operator[i] === '+') {\n            result += operand[i\
    \ + 1];\n        } else if (operator[i] === '-') {\n            result -= operand[i\
    \ + 1];\n        } else if (operator[i] === '*') {\n            result *= operand[i\
    \ + 1];\n        } else if (operator[i] === '//') {\n            result = Math.floor(result\
    \ / operand[i + 1]);\n        } else if (operator[i] === '**') {\n           \
    \ result = Math.pow(result, operand[i + 1]);\n        }\n    }\n    return result;\n\
    }\n", "  let result = 0;\n  let validOperators = [\"+\", \"-\", \"*\", \"//\"\
    , \"**\"];\n  let validOperands = [];\n  let temp = '';\n  for (let i = 0; i <\
    \ operand.length; i++) {\n    if (operand[i] >= 0) {\n      validOperands.push(operand[i]);\n\
    \    }\n  }\n  if (operator.length === validOperands.length - 1) {\n    let count\
    \ = 0;\n    let op = '';\n    let validOperator = false;\n    while (count < operator.length)\
    \ {\n      for (let i = 0; i < validOperators.length; i++) {\n        if (operator[count]\
    \ === validOperators[i]) {\n          validOperator = true;\n          op = operator[count];\n\
    \        }\n      }\n      if (validOperator) {\n        if (count === 0) {\n\
    \          result = calculate(validOperands[count], validOperands[count + 1],\
    \ op);\n        } else {\n          result = calculate(result, validOperands[count\
    \ + 1], op);\n        }\n        count++;\n      } else {\n        break;\n  \
    \    }\n    }\n  }\n  return result;\n}\n", "    let result = operand[0];\n  \
    \  for (let i = 0; i < operator.length; i++) {\n        switch (operator[i]) {\n\
    \            case '+':\n                result += operand[i + 1];\n          \
    \      break;\n            case '-':\n                result -= operand[i + 1];\n\
    \                break;\n            case '*':\n                result *= operand[i\
    \ + 1];\n                break;\n            case '//':\n                result\
    \ = Math.floor(result / operand[i + 1]);\n                break;\n           \
    \ case '**':\n                result = Math.pow(result, operand[i + 1]);\n   \
    \             break;\n        }\n    }\n    return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['//', '*', '+'], [2, 3,\
    \ 4, 5]));\nconsole.log(do_algebra(['//', '*', '+'], [2, 3, 4, 5]));", "    return\
    \ 0;\n}\n", "    return operand.reduce((acc, val, i) => {\n        if (i === 0)\
    \ return val;\n        return eval(`${acc} ${operator[i - 1]} ${val}`);\n    });\n\
    }\n\nconsole.log(do_algebra(['*', '+', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+',\
    \ '-'], [3, 5, 2]));\nconsole.log(do_algebra(['+', '-', '*'], [3, 5, 2, 1]));",
  "  let i = 0;\n  const result = operand[i];\n  while (i < operator.length) {\n \
    \   switch (operator[i]) {\n      case '+':\n        result += operand[i + 1];\n\
    \        break;\n      case '-':\n        result -= operand[i + 1];\n        break;\n\
    \      case '*':\n        result *= operand[i + 1];\n        break;\n      case\
    \ '//':\n        result = Math.floor(result / operand[i + 1]);\n        break;\n\
    \      case '**':\n        result = Math.pow(result, operand[i + 1]);\n      \
    \  break;\n    }\n    i++;\n  }\n  return result;\n}\n\nconsole.log(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nconsole.log(do_algebra(['+', '-', '*'], [2, 3, 4,\
    \ 5]));\nconsole.log(do_algebra(['+', '-', '//'], [6, 2, 3, 4]));\nconsole.log(do_algebra(['+',\
    \ '-', '*', '//'], [2, 3, 4, 5, 2]));\nconsole.log(do_algebra(['+', '-', '*',\
    \ '//', '**'], [2, 3, 4, 5, 3]));"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
