name: HumanEval_54_same_chars
language: ts
prompt: "//Check if two words have the same characters.\n// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddeddabc')\n// True\n// >>> same_chars('abcd', 'dddddddabc')\n// True\n\
  // >>> same_chars('dddddddabc', 'abcd')\n// True\n// >>> same_chars('eabcd', 'dddddddabc')\n\
  // False\n// >>> same_chars('abcd', 'dddddddabce')\n// False\n// >>> same_chars('eabcdzzzz',\
  \ 'dddzzzzzzzddddabc')\n// False\nfunction same_chars(s0: string, s1: string): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = same_chars;\n  assert.deepEqual(candidate(\"eabcdzzzz\"\
  , \"dddzzzzzzzddeddabc\"),true);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabc\"\
  ),true);\n  assert.deepEqual(candidate(\"dddddddabc\", \"abcd\"),true);\n  assert.deepEqual(candidate(\"\
  eabcd\", \"dddddddabc\"),false);\n  assert.deepEqual(candidate(\"abcd\", \"dddddddabcf\"\
  ),false);\n  assert.deepEqual(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"),false);\n\
  \  assert.deepEqual(candidate(\"aabb\", \"aaccc\"),false);\n}\n\ntest();"
completions: ["    var chars = {}\n    for (var i = 0; i < s0.length; i++) {\n   \
    \     var c = s0[i]\n        if (chars[c] == null) {\n            chars[c] = 1\n\
    \        } else {\n            chars[c] += 1\n        }\n    }\n    for (var i\
    \ = 0; i < s1.length; i++) {\n        var c = s1[i]\n        if (chars[c] == null)\
    \ {\n            return false\n        } else {\n            chars[c] -= 1\n \
    \           if (chars[c] == 0) {\n                delete chars[c]\n          \
    \  }\n        }\n    }\n    if (count_dict(chars) > 0) {\n        return false\n\
    \    }\n    return true\n}\nassert(same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc'))\n\
    assert(same_chars('abcd', 'dddddddabc'))\nassert(same_chars('dddddddabc', 'abcd'))\n\
    assert(!same_chars('eabcd', 'dddddddabc'))\nassert(!same_chars('abcd', 'dddddddabce'))\n\
    assert(!same_chars('eabcdzzzz', 'dddzzzzzzzddddabc'))", "    let sl: any = {};\n\
    \    let s2: any = {};\n    for (let c of s0) {\n        if (sl[c]) {\n      \
    \      sl[c] += 1;\n        } else {\n            sl[c] = 1;\n        }\n    }\n\
    \    for (let c of s1) {\n        if (s2[c]) {\n            s2[c] += 1;\n    \
    \    } else {\n            s2[c] = 1;\n        }\n    }\n    for (let k in sl)\
    \ {\n        if (sl[k] !== s2[k]) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\n", "  // TODO\n  let s0map = new Map();\n  let s1map\
    \ = new Map();\n  for (let c of s0) {\n    s0map.set(c, (s0map.get(c) || 0) +\
    \ 1);\n  }\n  for (let c of s1) {\n    s1map.set(c, (s1map.get(c) || 0) + 1);\n\
    \  }\n  for (let [k, v] of s0map) {\n    if (s1map.get(k) !== v) {\n      return\
    \ false;\n    }\n  }\n  for (let [k, v] of s1map) {\n    if (s0map.get(k) !==\
    \ v) {\n      return false;\n    }\n  }\n  return true;\n}\n", "    let result\
    \ = true;\n    let s0_temp = s0;\n    let s1_temp = s1;\n    for (let i = 0; i\
    \ < s0.length; i++) {\n        let temp = s1_temp.indexOf(s0[i]);\n        if\
    \ (temp != -1) {\n            s1_temp = s1_temp.substring(0, temp) + s1_temp.substring(temp\
    \ + 1);\n        } else {\n            result = false;\n            break;\n \
    \       }\n    }\n    for (let i = 0; i < s1.length; i++) {\n        let temp\
    \ = s0_temp.indexOf(s1[i]);\n        if (temp != -1) {\n            s0_temp =\
    \ s0_temp.substring(0, temp) + s0_temp.substring(temp + 1);\n        } else {\n\
    \            result = false;\n            break;\n        }\n    }\n    return\
    \ result;\n}\n", "    let char_count: { [index: string]: number } = {};\n    for\
    \ (let char of s0) {\n        if (char_count[char]) {\n            char_count[char]\
    \ += 1;\n        } else {\n            char_count[char] = 1;\n        }\n    }\n\
    \    for (let char of s1) {\n        if (char_count[char]) {\n            char_count[char]\
    \ -= 1;\n        } else {\n            return false;\n        }\n    }\n    for\
    \ (let count of Object.values(char_count)) {\n        if (count != 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\n", "    let noMatch\
    \ = false;\n    let s0Arr = s0.split('');\n    let s1Arr = s1.split('');\n   \
    \ s0Arr.forEach(char => {\n        if (s1Arr.indexOf(char) === -1) {\n       \
    \     noMatch = true;\n        }\n    });\n    return !noMatch;\n}\n", "    let\
    \ result: boolean = true;\n    let s0Length: number = s0.length;\n    let s1Length:\
    \ number = s1.length;\n    if (s0Length === s1Length) {\n        for (let i: number\
    \ = 0; i < s0Length; i++) {\n            let index: number = s1.indexOf(s0[i]);\n\
    \            if (index > -1) {\n                let str: string = s1.slice(0,\
    \ index) + s1.slice(index + 1);\n                s1 = str;\n            } else\
    \ {\n                result = false;\n                break;\n            }\n\
    \        }\n    } else {\n        result = false;\n    }\n    return result;\n\
    }\n\n", "    const a = [...s0];\n    const b = [...s1];\n    for (let x of a)\
    \ {\n        const i = b.indexOf(x);\n        if (i >= 0) {\n            b.splice(i,\
    \ 1);\n        } else {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\n", "    let retVal: boolean = true;\n    let map1: Map<string, number>\
    \ = getCharMap(s0);\n    let map2: Map<string, number> = getCharMap(s1);\n   \
    \ if (map1.size !== map2.size) {\n        retVal = false;\n    } else {\n    \
    \    map1.forEach((v1, k1) => {\n            if (map2.has(k1)) {\n           \
    \     if (v1 !== map2.get(k1)) {\n                    retVal = false;\n      \
    \          }\n            } else {\n                retVal = false;\n        \
    \    }\n        });\n    }\n    return retVal;\n}\n", "    let s0_set = get_char_set(s0);\n\
    \    let s1_set = get_char_set(s1);\n    if (s0_set.size !== s1_set.size) return\
    \ false;\n    for (let c of s0_set) {\n        if (!s1_set.has(c)) return false;\n\
    \    }\n    return true;\n}\n", "    let s0map = new Map();\n    let s1map = new\
    \ Map();\n    if (s0.length !== s1.length) {\n        return false;\n    }\n \
    \   for (let i = 0; i < s0.length; i++) {\n        let s0char = s0.charAt(i);\n\
    \        let s1char = s1.charAt(i);\n        if (s0map.has(s0char)) {\n      \
    \      s0map.set(s0char, s0map.get(s0char) + 1);\n        } else {\n         \
    \   s0map.set(s0char, 1);\n        }\n        if (s1map.has(s1char)) {\n     \
    \       s1map.set(s1char, s1map.get(s1char) + 1);\n        } else {\n        \
    \    s1map.set(s1char, 1);\n        }\n    }\n    return Object.fromEntries(s0map)\
    \ === Object.fromEntries(s1map);\n}\n", "    return same_chars_impl(s0, s1, {});\n\
    }\n", "    const c0 = {};\n    const c1 = {};\n    for (let char of s0) {\n  \
    \      if (c0[char]) {\n            c0[char]++;\n        } else {\n          \
    \  c0[char] = 1;\n        }\n    }\n    for (let char of s1) {\n        if (c1[char])\
    \ {\n            c1[char]++;\n        } else {\n            c1[char] = 1;\n  \
    \      }\n    }\n    for (let key in c0) {\n        if (c0[key] !== c1[key]) {\n\
    \            return false;\n        }\n    }\n    for (let key in c1) {\n    \
    \    if (c0[key] !== c1[key]) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\n", "    const a0 = Array.from(s0).sort().join('');\n   \
    \ const a1 = Array.from(s1).sort().join('');\n    return a0 === a1;\n}\n", " \
    \ let dict0 = {}\n  let dict1 = {}\n  for (let i = 0; i < s0.length; i++) {\n\
    \    let c = s0[i]\n    if (dict0[c]) {\n      dict0[c] += 1\n    } else {\n \
    \     dict0[c] = 1\n    }\n  }\n  for (let i = 0; i < s1.length; i++) {\n    let\
    \ c = s1[i]\n    if (dict1[c]) {\n      dict1[c] += 1\n    } else {\n      dict1[c]\
    \ = 1\n    }\n  }\n  for (let c in dict0) {\n    if (dict0[c] !== dict1[c]) {\n\
    \      return false\n    }\n  }\n  for (let c in dict1) {\n    if (dict0[c] !==\
    \ dict1[c]) {\n      return false\n    }\n  }\n  return true\n}\n", "  if (s0.length\
    \ !== s1.length) {\n    return false;\n  }\n  let sorted_s0 = s0.split('').sort().join('');\n\
    \  let sorted_s1 = s1.split('').sort().join('');\n  return sorted_s0 === sorted_s1;\n\
    }\n", "    var o0 = {};\n    var o1 = {};\n    var i;\n    for (i = 0; i < s0.length;\
    \ i++) {\n        if (o0[s0[i]] == undefined) {\n            o0[s0[i]] = 1;\n\
    \        } else {\n            o0[s0[i]] += 1;\n        }\n    }\n    for (i =\
    \ 0; i < s1.length; i++) {\n        if (o1[s1[i]] == undefined) {\n          \
    \  o1[s1[i]] = 1;\n        } else {\n            o1[s1[i]] += 1;\n        }\n\
    \    }\n    for (var key in o0) {\n        if (o0[key] != o1[key]) {\n       \
    \     return false;\n        }\n    }\n    for (var key in o1) {\n        if (o0[key]\
    \ != o1[key]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n", "    if (s0.length === s1.length) {\n        for (let i = 0; i < s0.length;\
    \ i++) {\n            if (s0.indexOf(s1[i]) < 0) return false;\n        }\n  \
    \      return true;\n    }\n    return false;\n}\n", "    let data: {[key: string]:\
    \ number} = {};\n    for (let i = 0; i < s0.length; i++) {\n        if (data[s0[i]])\
    \ {\n            data[s0[i]] += 1;\n        } else {\n            data[s0[i]]\
    \ = 1;\n        }\n    }\n    for (let i = 0; i < s1.length; i++) {\n        if\
    \ (data[s1[i]]) {\n            data[s1[i]] -= 1;\n        } else {\n         \
    \   return false;\n        }\n    }\n    for (let key in data) {\n        if (data[key]\
    \ !== 0) {\n            return false;\n        }\n    }\n    return true;\n}\n",
  "    let s0_chars = {}\n    let s1_chars = {}\n    let len0 = s0.length\n    let\
    \ len1 = s1.length\n    if (len0 != len1) return false\n    for (let i = 0; i\
    \ < len0; i++) {\n        let char = s0[i]\n        if (s0_chars[char]) s0_chars[char]++\n\
    \        else s0_chars[char] = 1\n    }\n    for (let i = 0; i < len1; i++) {\n\
    \        let char = s1[i]\n        if (s1_chars[char]) s1_chars[char]++\n    \
    \    else s1_chars[char] = 1\n    }\n    return _.isEqual(s0_chars, s1_chars)\n\
    }\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
