name: HumanEval_95_check_dict_case
language: ts
prompt: "//Given a dictionary, return True if all keys are strings in lower \n// case\
  \ or all keys are strings in upper case, else return False.\n// The function should\
  \ return False is the given dictionary is empty.\n// Examples:\n// check_dict_case({\"\
  a\":\"apple\", \"b\":\"banana\"}) should return True.\n// check_dict_case({\"a\"\
  :\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n// check_dict_case({\"\
  a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"}) should return False.\n// check_dict_case({\"\
  Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n//\
  \ check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n\
  function check_dict_case(dict: {[key: string]: string}): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = check_dict_case;\n  assert.deepEqual(candidate({\"\
  p\": \"pineapple\", \"b\": \"banana\"}),true);\n  assert.deepEqual(candidate({\"\
  p\": \"pineapple\", \"A\": \"banana\", \"B\": \"banana\"}),false);\n  assert.deepEqual(candidate({\"\
  p\": \"pineapple\", \"5\": \"banana\", \"a\": \"apple\"}),false);\n  assert.deepEqual(candidate({\"\
  Name\": \"John\", \"Age\": \"36\", \"City\": \"Houston\"}),false);\n  assert.deepEqual(candidate({\"\
  STATE\": \"NC\", \"ZIP\": \"12345\"}),true);\n  assert.deepEqual(candidate({\"fruit\"\
  : \"Orange\", \"taste\": \"Sweet\"}),true);\n  assert.deepEqual(candidate({}),false);\n\
  }\n\ntest();"
completions: ["    if(!Object.keys(dict).length) return false;\n    const lower =\
    \ Object.keys(dict).every(key => key.toLowerCase() === key);\n    const upper\
    \ = Object.keys(dict).every(key => key.toUpperCase() === key);\n    return lower\
    \ || upper;\n}\nexport { check_dict_case };", "    let caps: boolean = dict ?\
    \ dict[Object.keys(dict)[0]].match(/[A-Z]/) !== null : false;\n    let lower:\
    \ boolean = dict ? dict[Object.keys(dict)[0]].match(/[a-z]/) !== null : false;\n\
    \    let uniq: Set<string> = new Set();\n    if(caps || lower) {\n        for(let\
    \ key in dict) {\n            uniq.add(key);\n            if(caps) {\n       \
    \         if(key.match(/[a-z]/) !== null) {\n                    return false;\n\
    \                }\n            }\n            if(lower) {\n                if(key.match(/[A-Z]/)\
    \ !== null) {\n                    return false;\n                }\n        \
    \    }\n        }\n        return Array.from(uniq).length === Object.keys(dict).length;\n\
    \    }\n    return false;\n}\nconsole.log(check_dict_case({\"a\":\"apple\", \"\
    b\":\"banana\"}));\nconsole.log(check_dict_case({\"a\":\"apple\", \"A\":\"banana\"\
    , \"B\":\"banana\"}));\nconsole.log(check_dict_case({\"a\":\"apple\", \"8\":\"\
    banana\", \"a\":\"apple\"}));\nconsole.log(check_dict_case({\"Name\":\"John\"\
    , \"Age\":\"36\", \"City\":\"Houston\"}));\nconsole.log(check_dict_case({\"STATE\"\
    :\"NC\", \"ZIP\":\"12345\" }));\nconsole.log(check_dict_case({}));\n", "    if(Object.keys(dict).length\
    \ === 0) return false;\n    const lowerCase: boolean = Object.keys(dict).every(key\
    \ => isLowerCase(key));\n    const upperCase: boolean = Object.keys(dict).every(key\
    \ => isUpperCase(key));\n    return lowerCase || upperCase;\n}\n", "    let is_lower:\
    \ boolean = false;\n    let is_upper: boolean = false;\n    let is_ok: boolean\
    \ = true;\n    if (Object.keys(dict).length == 0) {\n        return false;\n \
    \   } else {\n        for (let key in dict) {\n            if (key.toLowerCase()\
    \ == key) {\n                is_lower = true;\n            } else if (key.toUpperCase()\
    \ == key) {\n                is_upper = true;\n            } else {\n        \
    \        is_ok = false;\n                break;\n            }\n        }\n  \
    \      return is_ok && (is_lower || is_upper);\n    }\n}\n", "    let lowerCase\
    \ = false;\n    let upperCase = false;\n    let keys = Object.keys(dict);\n  \
    \  if (keys.length == 0) {\n        return false;\n    }\n    keys.forEach(key\
    \ => {\n        if (key.toLowerCase() == key) {\n            lowerCase = true;\n\
    \        } else if (key.toUpperCase() == key) {\n            upperCase = true;\n\
    \        }\n    });\n    return lowerCase == upperCase;\n}\n\nlet dict = {\"a\"\
    :\"apple\", \"b\":\"banana\"};\nconsole.log(check_dict_case(dict));\ndict = {\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"a\":\"apple\", \"8\":\"banana\", \"a\":\"apple\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"};\nconsole.log(check_dict_case(dict));\n\
    dict = {\"STATE\":\"NC\", \"ZIP\":\"12345\" };\nconsole.log(check_dict_case(dict));\n\
    dict = {};\nconsole.log(check_dict_case(dict));", "    let empty: boolean = _.isEmpty(dict);\n\
    \    if (empty) return false;\n    let keys = Object.keys(dict);\n    let length\
    \ = keys.length;\n    let upper: boolean = false;\n    let lower: boolean = false;\n\
    \    let count = 0;\n    for (let k of keys) {\n        if (k.toUpperCase() ===\
    \ k) {\n            count++;\n        }\n    }\n    if (count === length) {\n\
    \        upper = true;\n    }\n    count = 0;\n    for (let k of keys) {\n   \
    \     if (k.toLowerCase() === k) {\n            count++;\n        }\n    }\n \
    \   if (count === length) {\n        lower = true;\n    }\n    return upper ||\
    \ lower;\n}\n", "    //The index signature parameter type must be \u2018string\u2019\
    \ or \u2018number\u2019.\n    //The type \u2018object\u2019 does not satisfy the\
    \ constraint \u2018\"string\" | \"number\"\u2019.  TS2344\n    //https://stackoverflow.com/questions/36982869/typescript-compiler-error-index-signature-parameter-type-must-be-string-or-numbe\n\
    \    //^^this can be fixed with: \n    // let keys = Object.keys(dict);\n    //\
    \ keys.forEach(function(key) {\n    //   console.log(dict[key]);\n    // });\n\
    \    //but I think using a regex to check the keys for lowercase and uppercase\
    \ strings and then \n    //return false if there is one of each type is more elegant\n\
    \    let strLower = /^[a-z]+$/;\n    let strUpper = /^[A-Z]+$/;\n    let lower\
    \ = true;\n    let upper = true;\n    if (dict !== null) {\n        for (let key\
    \ in dict) {\n            if (strLower.test(key)) {\n                upper = false;\n\
    \            } else if (strUpper.test(key)) {\n                lower = false;\n\
    \            } else {\n                lower = false;\n                upper =\
    \ false;\n            }\n        }\n    } else {\n        return false;\n    }\n\
    \    if (!lower && !upper) {\n        return false;\n    } else {\n        return\
    \ true;\n    }\n}\n", "    let lowerCase = true;\n    let upperCase = true;\n\
    \    for (let key in dict) {\n        if (key.charAt(0) >= 'a' && key.charAt(0)\
    \ <= 'z') {\n            upperCase = false;\n        } else if (key.charAt(0)\
    \ >= 'A' && key.charAt(0) <= 'Z') {\n            lowerCase = false;\n        }\
    \ else {\n            return false;\n        }\n    }\n    return lowerCase ||\
    \ upperCase;\n}\nconsole.log(\"check_dict_case({\\\"a\\\":\\\"apple\\\", \\\"\
    b\\\":\\\"banana\\\"}) = \" + \n            check_dict_case({\"a\":\"apple\",\
    \ \"b\":\"banana\"}));\nconsole.log(\"check_dict_case({\\\"a\\\":\\\"apple\\\"\
    , \\\"A\\\":\\\"banana\\\", \\\"B\\\":\\\"banana\\\"}) = \" + \n            check_dict_case({\"\
    a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}));\nconsole.log(\"check_dict_case({\\\
    \"a\\\":\\\"apple\\\", \\\"8\\\":\\\"banana\\\", \\\"a\\\":\\\"apple\\\"}) = \"\
    \ + \n            check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\":\"\
    apple\"}));\nconsole.log(\"check_dict_case({\\\"Name\\\":\\\"John\\\", \\\"Age\\\
    \":\\\"36\\\", \\\"City\\\":\\\"Houston\\\"}) = \" + \n            check_dict_case({\"\
    Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}));\nconsole.log(\"check_dict_case({\\\
    \"STATE\\\":\\\"NC\\\", \\\"ZIP\\\":\\\"12345\\\" }) = \" + \n            check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }));\n", "    if(Object.keys(dict).length ==\
    \ 0) {\n        return false;\n    }\n    else if(Object.keys(dict).length ==\
    \ 1) {\n        return true;\n    }\n    else {\n        let lowerCase: string[]\
    \ = [];\n        let upperCase: string[] = [];\n        for(let key in dict) {\n\
    \            if(key == key.toLowerCase()) {\n                lowerCase.push(key);\n\
    \            }\n            else if(key == key.toUpperCase()) {\n            \
    \    upperCase.push(key);\n            }\n            else {\n               \
    \ return false;\n            }\n        }\n        if(lowerCase.length > 0 &&\
    \ upperCase.length > 0) {\n            return false;\n        }\n        else\
    \ {\n            return true;\n        }\n    }\n}\n", "    if (Object.keys(dict).length\
    \ === 0) { return false; }\n    var pattern = new RegExp(\"[A-Z]{1,}\");\n   \
    \ var lowercase = true;\n    var uppercase = true;\n    for (let key in dict)\
    \ {\n        lowercase = lowercase && !pattern.test(key);\n        uppercase =\
    \ uppercase && pattern.test(key);\n    }\n    return lowercase || uppercase;\n\
    }", "  if (Object.keys(dict).length === 0) return false;\n  const firstKey = Object.keys(dict)[0];\n\
    \  const isCapital = firstKey[0] === firstKey[0].toUpperCase();\n  for (const\
    \ key in dict) {\n    if (isCapital) {\n      if (key[0] !== key[0].toUpperCase())\
    \ return false;\n    } else {\n      if (key[0] !== key[0].toLowerCase()) return\
    \ false;\n    }\n  }\n  return true;\n}\n", "\tif (Object.keys(dict).length ===\
    \ 0) {\n\t\treturn false;\n\t}\n\n\tif (Object.keys(dict).every(key => key ===\
    \ key.toLowerCase())) {\n\t\treturn true;\n\t}\n\n\tif (Object.keys(dict).every(key\
    \ => key === key.toUpperCase())) {\n\t\treturn true;\n\t}\n\n\treturn false;\n\
    }\n", "    if (Object.keys(dict).length == 0) return false;\n    let key_upper:\
    \ boolean = true;\n    let key_lower: boolean = true;\n    for (let key in dict)\
    \ {\n        key_upper = key_upper && key == key.toUpperCase();\n        key_lower\
    \ = key_lower && key == key.toLowerCase();\n    }\n    return key_upper || key_lower;\n\
    }\n", "    let isLowerCase: boolean = false;\n    let isUpperCase: boolean = false;\n\
    \    let keys: string[] = Object.keys(dict);\n    for (let i = 0; i < keys.length;\
    \ i++) {\n        if (keys[i] == keys[i].toLowerCase()) {\n            isLowerCase\
    \ = true;\n        } else if (keys[i] == keys[i].toUpperCase()) {\n          \
    \  isUpperCase = true;\n        } else {\n            return false;\n        }\n\
    \    }\n    return (isLowerCase || isUpperCase);\n}\n", "    // create an array\
    \ of the keys in the dictionary\n    const keys = Object.keys(dict);\n    // if\
    \ the array is empty, return false\n    if (keys.length === 0) {\n        return\
    \ false;\n    }\n    // create an array of the first key character code\n    const\
    \ firstKey = keys[0].split('').map(letter => letter.charCodeAt(0));\n    let check:\
    \ number;\n    if (firstKey[0] >= 97) {\n        check = 97;\n    } else {\n \
    \       check = 65;\n    }\n    // iterate through the array to see if every character\
    \ code is either \n    // less than or equal to 90 or less than or equal to 122\n\
    \    // if not, return false\n    for (let i = 0; i < firstKey.length; i++) {\n\
    \        if (firstKey[i] < check || firstKey[i] > check + 25) {\n            return\
    \ false;\n        }\n    }\n    // create a variable to hold the boolean to return\
    \ \n    let result: boolean = true;\n    // iterate through all the other keys\
    \ in the dictionary, to see if all\n    // the keys match the first key; if not,\
    \ return false\n    for (let i = 1; i < keys.length; i++) {\n        const key\
    \ = keys[i].split('').map(letter => letter.charCodeAt(0));\n        if (key[0]\
    \ !== firstKey[0]) {\n            result = false;\n        }\n    }\n    return\
    \ result;\n}\n", "    let keys = Object.keys(dict);\n    let case0 = keys[0].toUpperCase();\n\
    \    let case1 = keys[0].toLowerCase();\n    let ret = true;\n    keys.forEach(element\
    \ => {\n        if (!(element == case0 || element == case1)) {\n            ret\
    \ = false;\n        }\n    });\n    return ret;\n}", "    if (Object.keys(dict).length\
    \ == 0) {\n        return false;\n    }\n    let lowercase_pattern = /^[a-z]+$/;\n\
    \    let uppercase_pattern = /^[A-Z]+$/;\n    let is_lowercase = true;\n    let\
    \ is_uppercase = true;\n    for (let key in dict) {\n        is_lowercase = is_lowercase\
    \ && lowercase_pattern.test(key);\n        is_uppercase = is_uppercase && uppercase_pattern.test(key);\n\
    \    }\n    return is_lowercase || is_uppercase;\n}\n", "    let is_upper = false;\n\
    \    for (let k in dict) {\n        if (k.toUpperCase() === k) {\n           \
    \ is_upper = true;\n        } else if (k.toLowerCase() === k) {\n            is_upper\
    \ = false;\n        } else {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\n", "  const lowerCaseKeys = Object.keys(dict).every(key =>\
    \ key === key.toLowerCase());\n  const upperCaseKeys = Object.keys(dict).every(key\
    \ => key === key.toUpperCase());\n  return lowerCaseKeys || upperCaseKeys;\n}\n",
  "    let lc: number = 0;\n    let uc: number = 0;\n    for (let key in dict) {\n\
    \        if (key == key.toLowerCase()) {\n            lc++;\n        } else if\
    \ (key == key.toUpperCase()) {\n            uc++;\n        }\n    }\n    if (lc\
    \ == 0 || uc == 0) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
