language: ts
name: HumanEval_1_separate_paren_groups
results:
- exit_code: -1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    let result: string[] = [];\n    let k = 0;\n    let count: number = 0;\n\
    \    let item: string = '';\n    while (k < paren_string.length) {\n        if\
    \ (paren_string[k] === '(') {\n            count += 1;\n            item += paren_string[k];\n\
    \        } else if (paren_string[k] === ')') {\n            count -= 1;\n    \
    \        item += paren_string[k];\n        } else {\n            continue;\n \
    \       }\n        if (count === 0) {\n            result.push(item);\n      \
    \      item = '';\n        }\n        k += 1;\n    }\n    return result;\n}\n\
    console.log(separate_paren_groups('( ) (( )) (( )( ))'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821930
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  const parenGroups: string[] = [];\n  let start = 0;\n  for (let i = 0;\
    \ i < paren_string.length; i++) {\n    const char = paren_string[i];\n    if (char\
    \ === \"(\") {\n      start = i;\n    } else if (char === \")\") {\n      parenGroups.push(paren_string.slice(start,\
    \ i + 1));\n    }\n  }\n  return parenGroups;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '()',\n \
    \ '()',\n  '())',\n  '()',\n  '())',\n  '()))',\n  '()',\n  '()',\n  '())',\n\
    \  '()',\n  '()',\n  '())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n\
    \  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpu7n71wjg.js:24:12)\n\
    \    at Object.<anonymous> (/tmp/tmpu7n71wjg.js:29:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '()',\
    \ '()',  '())',\n    '()', '())', '()))',\n    '()', '()',  '())',\n    '()',\
    \ '()',  '())'\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n\
    \  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 0
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    const result: string[] = [];\n    let current_parens = '';\n    let open_parens\
    \ = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i]\
    \ === '(') {\n            current_parens += '(';\n            open_parens++;\n\
    \        } else if (paren_string[i] === ')') {\n            current_parens +=\
    \ ')';\n            open_parens--;\n            if (open_parens === 0) {\n   \
    \             result.push(current_parens);\n                current_parens = '';\n\
    \            }\n        }\n    }\n    return result;\n}\n\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  const parens = paren_string.replace(/\\s/g, '');\n  const paren_array =\
    \ [];\n  let temp = '';\n  for (let i = 0; i < parens.length; i++) {\n    temp\
    \ += parens[i];\n    if (temp.length === 2) {\n      paren_array.push(temp);\n\
    \      temp = '';\n    }\n  }\n  return paren_array;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '((',\n \
    \ ')(',\n  '))',\n  '((',\n  '()',\n  '))',\n  '()',\n  '((',\n  '()',\n  ')(',\n\
    \  ')(',\n  '))'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n\
    \  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpfv1736qi.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfv1736qi.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    '((',\
    \ ')(', '))',\n    '((', '()', '))',\n    '()', '((', '()',\n    ')(', ')(', '))'\n\
    \  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n\
    }\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    const result = [];\n    let counter = 0;\n    let start = 0;\n    for\
    \ (let i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] ===\
    \ '(') {\n            counter++;\n        } else if (paren_string[i] === ')')\
    \ {\n            counter--;\n        }\n        if (counter === 0) {\n       \
    \     result.push(paren_string.slice(start, i + 1));\n            start = i +\
    \ 1;\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())',\n\
    \  ' ',\n  '((()))',\n  ' ',\n  '()',\n  ' ',\n  '((())()())'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at\
    \ test (/tmp/tmpjyt9mgo6.js:28:12)\n    at Object.<anonymous> (/tmp/tmpjyt9mgo6.js:33:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())',\
    \ ' ', '((()))', ' ', '()', ' ', '((())()())' ],\n  expected: [ '(()())', '((()))',\
    \ '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 2
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    let stack = [''];\n    let result = [];\n    for (let char of paren_string)\
    \ {\n        if (char === '(') {\n            stack.push('');\n        } else\
    \ if (char === ')') {\n            result.push(stack.pop());\n        } else if\
    \ (char !== ' ') {\n            stack[stack.length - 1] += char;\n        }\n\
    \    }\n    return result;\n}\n\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp95thfhxy.ts(10,22): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821914
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  const output: string[] = [];\n  let temp_str = '';\n  for (let i = 0; i\
    \ < paren_string.length; i++) {\n    //If the current character is a opening paren,\
    \ push the temp_str to the output array,\n    // then initialize the temp_str\
    \ back to empty string\n    if (paren_string[i] === '(') {\n      if (temp_str.length\
    \ > 0) {\n        output.push(temp_str);\n        temp_str = '';\n      }\n  \
    \  } else if (paren_string[i] === ')') {\n      //If the current character is\
    \ a closing paren, add that to the temp_str,\n      // then push the temp_str\
    \ to the output array, then initialize the temp_str back to empty string\n   \
    \   temp_str += paren_string[i];\n      output.push(temp_str);\n      temp_str\
    \ = '';\n    } else {\n      //If the current character is anything else, just\
    \ add that to the temp_str\n      temp_str += paren_string[i];\n    }\n  }\n \
    \ return output;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  ')',\n  ')',\n\
    \  ')',\n  ' ',\n  ')',\n  ')',\n  ')',\n  ' ',\n  ')',\n  ' ',\n  ')',\n  ')',\n\
    \  ')',\n  ')',\n  ')'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n\
    \  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpgne58a9m.js:36:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpgne58a9m.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [\n    ')',\
    \ ')', ')', ' ',\n    ')', ')', ')', ' ',\n    ')', ' ', ')', ')',\n    ')', ')',\
    \ ')'\n  ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    const stack: string[] = [];\n    const result: string[] = [];\n    let\
    \ startIndex = 0;\n    for (let i = 0; i < paren_string.length; i++) {\n     \
    \   const curr = paren_string[i];\n        if (curr === '(') {\n            stack.push(curr);\n\
    \        } else if (curr === ')') {\n            if (stack.length === 0) {\n \
    \               throw new Error('invalid paren string');\n            }\n    \
    \        stack.pop();\n            if (stack.length === 0) {\n               \
    \ result.push(paren_string.substring(startIndex, i + 1));\n                startIndex\
    \ = i + 1;\n            }\n        }\n    }\n    return result;\n}\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\",\
    \ \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())',\n\
    \  ' ((()))',\n  ' ()',\n  ' ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp_ed24uk5.js:32:12)\n\
    \    at Object.<anonymous> (/tmp/tmp_ed24uk5.js:37:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())',\
    \ ' ((()))', ' ()', ' ((())()())' ],\n  expected: [ '(()())', '((()))', '()',\
    \ '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821914
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  return paren_string.split(')(').map(str => str.replace(/\\s/g, ''));\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '((',\n \
    \ '))((()))()((()',\n  '',\n  '))'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n\
    \  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmpokqzzeuf.js:13:12)\n\
    \    at Object.<anonymous> (/tmp/tmpokqzzeuf.js:18:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '((', '))((()))()((()',\
    \ '', '))' ],\n  expected: [ '(()())', '((()))', '()', '((())()())' ],\n  operator:\
    \ 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 0
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    let result: string[] = [];\n    let current_group: string = '';\n   \
    \ let open_parens: number = 0;\n    for (let i = 0; i < paren_string.length; i++)\
    \ {\n        const char = paren_string[i];\n        if (char !== ' ') {\n    \
    \        current_group += char;\n            if (char === '(') {\n           \
    \     open_parens++;\n            } else if (char === ')') {\n               \
    \ open_parens--;\n            }\n            if (open_parens === 0) {\n      \
    \          result.push(current_group);\n                current_group = '';\n\
    \            }\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    // YOUR CODE HERE\n    throw 'TODO - separate_paren_groups()';\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: Exception
  stderr: "\n/tmp/tmpknehb4bj.js:9\n    throw 'TODO - separate_paren_groups()';\n\
    \    ^\nTODO - separate_paren_groups()\n(Use `node --trace-uncaught ...` to show\
    \ where the exception was thrown)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 0
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  let arr: string[] = [];\n  let count: number = 0;\n  let temp_str: string\
    \ = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      if (count === 0) {\n        temp_str = '';\n      }\n    \
    \  count++;\n      temp_str += paren_string[i];\n    } else if (paren_string[i]\
    \ === ')') {\n      count--;\n      temp_str += paren_string[i];\n      if (count\
    \ === 0) {\n        arr.push(temp_str);\n      }\n    }\n  }\n  return arr;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821915
- exit_code: 2
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  const groups: string[] = [];\n  let group = '';\n  let is_grouping = false;\n\
    \  let open_parens = 0;\n  for (let char of paren_string) {\n    if (char ===\
    \ '(') {\n      open_parens++;\n      if (!is_grouping) {\n        is_grouping\
    \ = true;\n      }\n    } else if (char === ')') {\n      open_parens--;\n   \
    \   if (open_parens === 0) {\n        is_grouping = false;\n        groups.push(group);\n\
    \        group = '';\n      }\n    }\n    if (is_grouping) {\n      group += char;\n\
    \    }\n  }\n  return groups;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmph3i07z77.ts(12,20): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821914
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  const res: string[] = [];\n  const stack: string[] = [];\n  let start:\
    \ number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      stack.push('(');\n    } else if (paren_string[i] === ')')\
    \ {\n      stack.pop();\n      if (stack.length === 0) {\n        res.push(paren_string.slice(start,\
    \ i + 1));\n        start = i + 1;\n      }\n    }\n  }\n  return res;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())',\n\
    \  ' ((()))',\n  ' ()',\n  ' ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n\
    \  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at test (/tmp/tmp326mqob5.js:28:12)\n\
    \    at Object.<anonymous> (/tmp/tmp326mqob5.js:33:1)\n    at Module._compile\
    \ (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n\
    \    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())',\
    \ ' ((()))', ' ()', ' ((())()())' ],\n  expected: [ '(()())', '((()))', '()',\
    \ '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  return [paren_string];\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = separate_paren_groups;\n\
    \  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"),[\"(()())\", \"\
    ((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"() (()) ((()))\
    \ (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()()) ((()))\
    \ () ((())()())'\n]\n\nshould loosely deep-equal\n\n[\n  '(()())',\n  '((()))',\n\
    \  '()',\n  '((())()())'\n]\n    at test (/tmp/tmprypqon7t.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmprypqon7t.js:18:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())\
    \ ((())) () ((())()())' ],\n  expected: [ '(()())', '((()))', '()', '((())()())'\
    \ ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 2
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  let result: string[] = [];\n  let temp: string = \"\";\n  let cnt: number\
    \ = 0;\n  for (let c of paren_string) {\n    if (c == \"(\" || c == \")\") {\n\
    \      temp += c;\n      if (c == \"(\") {\n        cnt++;\n      } else {\n \
    \       cnt--;\n      }\n      if (cnt == 0) {\n        result.push(temp);\n \
    \       temp = \"\";\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()())\
    \ ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n\
    \  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\",\
    \ \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpb19i78eb.ts(11,17): error TS2494: Using a string
    in a ''for...of'' statement is only supported in ECMAScript 5 and higher.

    '
  timestamp: 1659821915
- exit_code: 0
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  const results: string[] = [];\n  let temp: string = '';\n  let openCount:\
    \ number = 0;\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i]\
    \ === '(') {\n      openCount++;\n      temp += paren_string[i];\n    } else if\
    \ (paren_string[i] === ')') {\n      openCount--;\n      temp += paren_string[i];\n\
    \    }\n    if (openCount === 0 && temp.length > 0) {\n      results.push(temp);\n\
    \      temp = '';\n    }\n  }\n  return results;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n  let result: string[] = [];\n  let temp: string = \"\";\n  let left_paren_count:\
    \ number = 0;\n  let right_paren_count: number = 0;\n  for (let i: number = 0;\
    \ i < paren_string.length; i++) {\n    if (paren_string[i] === \"(\") {\n    \
    \  left_paren_count++;\n    } else if (paren_string[i] === \")\") {\n      right_paren_count++;\n\
    \    }\n    if (paren_string[i] !== \" \") {\n      temp += paren_string[i];\n\
    \    }\n    if (left_paren_count === right_paren_count) {\n      result.push(temp);\n\
    \      temp = \"\";\n      left_paren_count = 0;\n      right_paren_count = 0;\n\
    \    }\n  }\n  return result;\n}\nconsole.log(separate_paren_groups(\"( ) (( ))\
    \ (( )( ))\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[\n  '(()())',\n\
    \  '',\n  '((()))',\n  '',\n  '()',\n  '',\n  '((())()())'\n]\n\nshould loosely\
    \ deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at\
    \ test (/tmp/tmpleregnpz.js:35:12)\n    at Object.<anonymous> (/tmp/tmpleregnpz.js:40:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [ '(()())',\
    \ '', '((()))', '', '()', '', '((())()())' ],\n  expected: [ '(()())', '((()))',\
    \ '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '[ ''()'', '''', ''(())'', '''', ''(()())'' ]

    '
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    const groups: string[] = [];\n    let stack: string[] = [];\n    paren_string.split('').forEach((letter:\
    \ string) => {\n        if (letter === '(') {\n            stack.push(letter);\n\
    \        } else if (letter === ')') {\n            const _stack = stack.slice();\n\
    \            if (_stack.length === 0) {\n                throw new Error('Empty\
    \ stack cannot pop');\n            }\n            _stack.pop();\n            if\
    \ (_stack.length === 0) {\n                groups.push(stack.join(''));\n    \
    \            stack = [];\n            } else {\n                stack.push(letter);\n\
    \            }\n        }\n    });\n    return groups;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = separate_paren_groups;\n  assert.deepEqual(candidate(\"(()()) ((())) () ((())()())\"\
    ),[\"(()())\", \"((()))\", \"()\", \"((())()())\"]);\n  assert.deepEqual(candidate(\"\
    () (()) ((())) (((())))\"),[\"()\", \"(())\", \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"\
    (()(())((())))\"),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) ((\
    \ )) (( )( ))\"),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at\
    \ test (/tmp/tmpqwfwm4gc.js:34:12)\n    at Object.<anonymous> (/tmp/tmpqwfwm4gc.js:39:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
- exit_code: 1
  program: "//Input to this function is a string containing multiple groups of nested\
    \ parentheses. Your goal is to\n// separate those group into separate strings\
    \ and return the list of those.\n// Separate groups are balanced (each open brace\
    \ is properly closed) and not nested within each other\n// Ignore any spaces in\
    \ the input string.\n// >>> separate_paren_groups('( ) (( )) (( )( ))')\n// ['()',\
    \ '(())', '(()())']\nfunction separate_paren_groups(paren_string: string): string[]\
    \ {\n    return [];\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = separate_paren_groups;\n  assert.deepEqual(candidate(\"\
    (()()) ((())) () ((())()())\"),[\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    ]);\n  assert.deepEqual(candidate(\"() (()) ((())) (((())))\"),[\"()\", \"(())\"\
    , \"((()))\", \"(((())))\"]);\n  assert.deepEqual(candidate(\"(()(())((())))\"\
    ),[\"(()(())((())))\"]);\n  assert.deepEqual(candidate(\"( ) (( )) (( )( ))\"\
    ),[\"()\", \"(())\", \"(()())\"]);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n[]\n\nshould loosely\
    \ deep-equal\n\n[\n  '(()())',\n  '((()))',\n  '()',\n  '((())()())'\n]\n    at\
    \ test (/tmp/tmp17_x0wxv.js:13:12)\n    at Object.<anonymous> (/tmp/tmp17_x0wxv.js:18:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: [],\n  expected:\
    \ [ '(()())', '((()))', '()', '((())()())' ],\n  operator: 'deepEqual'\n}\n\n\
    Node.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821915
