language: ts
name: HumanEval_114_minSubArraySum
results:
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    if (nums.length === 0) {\n        return 0;\n    }\n    let window:\
    \ number = 0;\n    let minWindow: number = Infinity;\n    let currentNumber: number\
    \ = 0;\n    let end: number = 0;\n    let start: number = 0;\n    while (end <\
    \ nums.length) {\n        window += nums[end];\n        if (window < minWindow)\
    \ {\n            minWindow = window;\n        }\n        if (end === nums.length\
    \ - 1) {\n            start++;\n            end = start;\n            window =\
    \ 0;\n        } else {\n            end++;\n        }\n    }\n    return minWindow;\n\
    }\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1

    '
  timestamp: 1659822277
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    if (nums.length === 0) {\n        return 0;\n    }\n    let runningSum\
    \ = 0;\n    let minSum = Number.MAX_SAFE_INTEGER;\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        runningSum += nums[i];\n        minSum = Math.min(minSum, runningSum);\n\
    \        if (runningSum < 0) {\n            runningSum = 0;\n        }\n    }\n\
    \    return minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzt2xtjvi.ts(11,25): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let result = nums[0];\n  let temp = nums[0];\n  for (let i = 1;\
    \ i < nums.length; i++) {\n    temp = Math.min(temp + nums[i], nums[i]);\n   \
    \ result = Math.min(result, temp);\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let smallest = nums[0];\n  let current = 0;\n  for (let i = 0; i\
    \ < nums.length; i++) {\n    current += nums[i];\n    if (current < smallest)\
    \ {\n      smallest = current;\n    }\n    if (current > 0) {\n      current =\
    \ 0;\n    }\n  }\n  return smallest;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: -1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    let total = 0;\n    let smallest = Infinity;\n    let start =\
    \ 0;\n    let end = 0;\n    let length = nums.length;\n\n    while (start < length)\
    \ {\n        if (total < smallest) {\n            smallest = total;\n        }\n\
    \n        if (total < 0) {\n            total = 0;\n            start = end;\n\
    \        }\n\n        total += nums[end];\n        end++;\n    }\n\n    return\
    \ smallest;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1,\
    \ 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822292
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let minSum = Infinity;\n  let start = 0;\n  let sum = 0;\n  for\
    \ (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while (sum >=\
    \ minSum) {\n      minSum = Math.min(minSum, sum);\n      sum -= nums[start];\n\
    \      start++;\n    }\n  }\n  return minSum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nInfinity\n\nshould\
    \ loosely deep-equal\n\n1\n    at test (/tmp/tmpfn5o6bgp.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfn5o6bgp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: Infinity,\n\
    \  expected: 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let result = nums[0];\n  let sum = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    sum += nums[i];\n    result = Math.min(result, sum);\n    if (sum\
    \ < 0) {\n      sum = 0;\n    }\n  }\n  return result;\n}\nconsole.log(minSubArraySum([2,\
    \ 3, 4, 1, 2, 4]));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmphk96yiau.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphk96yiau.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '2

    '
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    let minSum = Infinity;\n    let currSum = 0;\n    for (let i =\
    \ 0; i < nums.length; i++) {\n        currSum += nums[i];\n        if (currSum\
    \ < minSum) {\n            minSum = currSum;\n        }\n        if (currSum >\
    \ 0) {\n            currSum = 0;\n        }\n    }\n    return minSum;\n}\n\n\
    minSubArraySum([-3, -4, 2, -1, -2, -1, 5, -3]);\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    if (!nums || nums.length === 0) {\n        return 0;\n    }\n\
    \    let minSum = nums[0];\n    let curSum = nums[0];\n    for (let i = 1; i <\
    \ nums.length; i++) {\n        const curNum = nums[i];\n        curSum = Math.min(curSum\
    \ + curNum, curNum);\n        minSum = Math.min(minSum, curSum);\n    }\n    return\
    \ minSum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let left = 0;\n  let right = 0;\n  let min = Number.MAX_SAFE_INTEGER;\n\
    \  let current = 0;\n  for (let i = 0; i < nums.length; i++) {\n    current +=\
    \ nums[i];\n    if (current < min) {\n      min = current;\n      right = i;\n\
    \    }\n    if (current > 0) {\n      current = 0;\n      left = i + 1;\n    }\n\
    \  }\n  return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmps3yqguus.ts(9,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659822277
- exit_code: 2
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let min = Number.MAX_SAFE_INTEGER;\n  let sum = 0;\n  let start\
    \ = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    while\
    \ (sum >= min) {\n      min = sum;\n      sum -= nums[start];\n      start++;\n\
    \    }\n  }\n  return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp8_tvqdbc.ts(7,20): error TS2339: Property ''MAX_SAFE_INTEGER''
    does not exist on type ''NumberConstructor''.

    '
  timestamp: 1659822276
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    let smallest = nums[0];\n    let current = 0;\n    for (let i\
    \ = 0; i < nums.length; i++) {\n        current += nums[i];\n        if (current\
    \ < smallest) {\n            smallest = current;\n        }\n        if (current\
    \ > 0) {\n            current = 0;\n        }\n    }\n    return smallest;\n}\n\
    \nminSubArraySum([2, 3, 4, 1, 2, 4]);\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    let minSum = Infinity\n    let sum = 0\n    for (let i = 0; i\
    \ < nums.length; i++) {\n        sum += nums[i]\n        if (sum < minSum) {\n\
    \            minSum = sum\n        }\n        if (sum > 0) {\n            sum\
    \ = 0\n        }\n    }\n    return minSum\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let sum = 0;\n  let min = Infinity;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    if (nums[i] < min) {\n      min = nums[i];\n    }\n    sum += nums[i];\n\
    \    for (let j = i + 1; j < nums.length; j++) {\n      sum += nums[j];\n    \
    \  if (sum < min) {\n        min = sum;\n      }\n    }\n    sum = 0;\n  }\n \
    \ return min;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let min = Infinity;\n  let curr = 0;\n  for (let i = 0; i < nums.length;\
    \ i++) {\n    curr += nums[i];\n    if (curr < min) {\n      min = curr;\n   \
    \ }\n    if (curr > 0) {\n      curr = 0;\n    }\n  }\n  return min;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4,\
    \ 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let i = 0;\n  let j = 0;\n  let minSum = nums[0];\n  let currSum\
    \ = nums[0];\n  if (nums.length === 1) return nums[0];\n  while (j < nums.length\
    \ - 1) {\n    j++;\n    currSum += nums[j];\n    if (currSum < minSum) {\n   \
    \   minSum = currSum;\n    }\n    if (nums[i] > nums[j]) {\n      i++;\n     \
    \ currSum = nums[i];\n    }\n  }\n  return minSum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = minSubArraySum;\n  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmplpslgutn.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplpslgutn.js:42:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  const len = nums.length;\n  let sum = nums[0];\n  let minSum = sum;\n\
    \  for (let i = 1; i < len; i++) {\n    if (sum < 0) {\n      sum = nums[i];\n\
    \    } else {\n      sum += nums[i];\n    }\n    minSum = Math.min(minSum, sum);\n\
    \  }\n  return minSum;\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n\
    console.log(minSubArraySum([-1, -2, -3]));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpi_3vhpzg.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpi_3vhpzg.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '2

    -3

    '
  timestamp: 1659822277
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  let start = 0;\n  let end = 0;\n  let minSum = Infinity;\n  let\
    \ currentSum = 0;\n\n  for (let index = 0; index < nums.length; index++) {\n \
    \   const currentNum = nums[index];\n    if (currentNum >= 0) {\n      end = index;\n\
    \      currentSum += currentNum;\n      if (currentSum < minSum) {\n        minSum\
    \ = currentSum;\n      }\n    } else {\n      currentSum += currentNum;\n    \
    \  if (currentSum < 0) {\n        start = index + 1;\n        currentSum = 0;\n\
    \      }\n    }\n  }\n\n  return minSum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpn63kh77v.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn63kh77v.js:46:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
- exit_code: 0
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n  if (nums.length === 0) return 0;\n  let minSubArraySum = nums[0];\n\
    \  let currentSubArraySum = nums[0];\n  for (let i = 1; i < nums.length; i++)\
    \ {\n    currentSubArraySum = Math.min(currentSubArraySum + nums[i], nums[i]);\n\
    \    minSubArraySum = Math.min(minSubArraySum, currentSubArraySum);\n  }\n  return\
    \ minSubArraySum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = minSubArraySum;\n  assert.deepEqual(candidate([2,\
    \ 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1, -2, -3]),-6);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "//Given an array of integers nums, find the minimum sum of any non-empty\
    \ sub-array\n// of nums.\n// Example\n// minSubArraySum([2, 3, 4, 1, 2, 4]) ==\
    \ 1\n// minSubArraySum([-1, -2, -3]) == -6\nfunction minSubArraySum(nums: number[]):\
    \ number {\n    let minSum = Infinity;\n    let sum = 0;\n    let start = 0;\n\
    \    let end = 0;\n    while (end < nums.length) {\n        while (sum < 0 &&\
    \ start < end) {\n            sum -= nums[start];\n            start++;\n    \
    \    }\n        sum += nums[end];\n        minSum = Math.min(minSum, sum);\n \
    \       end++;\n    }\n    return minSum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = minSubArraySum;\n\
    \  assert.deepEqual(candidate([2, 3, 4, 1, 2, 4]),1);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3]),-6);\n  assert.deepEqual(candidate([-1, -2, -3, 2, -10]),-14);\n  assert.deepEqual(candidate([-9999999999999999]),-9999999999999999);\n\
    \  assert.deepEqual(candidate([0, 10, 20, 1000000]),0);\n  assert.deepEqual(candidate([-1,\
    \ -2, -3, 10, -5]),-6);\n  assert.deepEqual(candidate([100, -1, -2, -3, 10, -5]),-6);\n\
    \  assert.deepEqual(candidate([10, 11, 13, 8, 3, 4]),3);\n  assert.deepEqual(candidate([100,\
    \ -33, 32, -1, 0, -2]),-33);\n  assert.deepEqual(candidate([-10]),-10);\n  assert.deepEqual(candidate([7]),7);\n\
    \  assert.deepEqual(candidate([1, -1]),-1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n2\n\nshould loosely\
    \ deep-equal\n\n1\n    at test (/tmp/tmpc07yn9e4.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpc07yn9e4.js:38:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 2,\n  expected:\
    \ 1,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822277
