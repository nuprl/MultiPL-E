name: HumanEval_88_sort_array
language: ts
prompt: "//Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n// you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n// or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n// Note:\n// * don't\
  \ change the given array.\n// Examples:\n// * sort_array([]) => []\n// * sort_array([5])\
  \ => [5]\n// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n// * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nfunction sort_array(array: number[]):\
  \ number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = sort_array;\n  assert.deepEqual(candidate([]),[]);\n\
  \  assert.deepEqual(candidate([5]),[5]);\n  assert.deepEqual(candidate([2, 4, 3,\
  \ 0, 1, 5]),[0, 1, 2, 3, 4, 5]);\n  assert.deepEqual(candidate([2, 4, 3, 0, 1, 5,\
  \ 6]),[6, 5, 4, 3, 2, 1, 0]);\n  assert.deepEqual(candidate([2, 1]),[1, 2]);\n \
  \ assert.deepEqual(candidate([15, 42, 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87]);\n\
  \  assert.deepEqual(candidate([21, 14, 23, 11]),[23, 21, 14, 11]);\n}\n\ntest();"
completions: ["    const isAscending = (array.length > 0 && ((array[0] + array[array.length\
    \ - 1]) % 2) === 1);\n    return array.sort((a, b) => {\n        return isAscending\
    \ ? a - b : b - a;\n    });\n}\n", "  if (array.length === 0) {\n    return [];\n\
    \  }\n  const oddNumbers = [];\n  const evenNumbers = [];\n  const isFirstValueOdd\
    \ = array[0] % 2 === 1;\n  array.forEach(number => {\n    if (number % 2 === 1)\
    \ {\n      oddNumbers.push(number);\n    } else {\n      evenNumbers.push(number);\n\
    \    }\n  });\n  isFirstValueOdd ? oddNumbers.sort() : oddNumbers.sort().reverse();\n\
    \  isFirstValueOdd ? evenNumbers.sort().reverse() : evenNumbers.sort();\n  return\
    \ [...oddNumbers, ...evenNumbers];\n}\n", "    return array.sort((a, b) => {\n\
    \        const sum = a + b;\n        return sum % 2 ? b - a : a - b;\n    });\n\
    }\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));", "    let sum = array[0] +\
    \ array[array.length - 1];\n    return sum % 2 == 0 ? array.sort((a, b) => b -\
    \ a) : array.sort((a, b) => a - b);\n}\nconsole.log(sort_array([2, 4, 3, 0, 1,\
    \ 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "  return array.length\
    \ % 2\n    ? array.sort((a, b) => a - b)\n    : array.sort((a, b) => b - a);\n\
    }\n\nexport default sort_array;", "    return array.length % 2 !== 0\n       \
    \ ? array.sort((a, b) => a - b)\n        : array.sort((a, b) => b - a);\n}\n",
  "  let sum = array[0] + array[array.length - 1];\n  let sortedArr = array.sort(function(a,\
    \ b) {\n    return a - b;\n  });\n  if (sum % 2 !== 0) {\n    return sortedArr;\n\
    \  } else {\n    return sortedArr.reverse();\n  }\n}\n", "  const result: number[]\
    \ = [];\n  const sum = array[0] + array[array.length - 1];\n  if (sum % 2 ===\
    \ 0) {\n    result.push(array.sort((a, b) => b - a));\n  } else {\n    result.push(array.sort((a,\
    \ b) => a - b));\n  }\n  return result[0];\n}\n\nconsole.log(sort_array([5, 2,\
    \ 4, 3, 0, 1]));\n", "    let isEven: boolean = (array[0] + array[array.length\
    \ - 1]) % 2 === 0;\n    return array.sort((a, b) => isEven ? b - a : a - b);\n\
    }\n\nconsole.log(sort_array([]));\nconsole.log(sort_array([5]));\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5]));\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n", "   \
    \ if (array.length === 0) return array;\n    if (array.length === 1) return array;\n\
    \    const n: number = array.length;\n    if ((array[0] + array[n - 1]) % 2 ===\
    \ 0) {\n        return array.sort(function (a, b) {\n            return b - a;\n\
    \        });\n    } else {\n        return array.sort(function (a, b) {\n    \
    \        return a - b;\n        });\n    }\n}\n", "  let firstValue = array[0];\n\
    \  let lastValue = array[array.length - 1];\n  let firstLastSum = firstValue +\
    \ lastValue;\n  let sorted = [];\n  if (firstLastSum % 2 === 0) {\n    sorted\
    \ = array.sort((a, b) => b - a);\n  } else {\n    sorted = array.sort((a, b) =>\
    \ a - b);\n  }\n  return sorted;\n}\n", "  const len = array.length;\n  const\
    \ arr = array.slice();\n  if (len === 0) {\n    return arr;\n  }\n  if (len ===\
    \ 1) {\n    return arr;\n  }\n  if (len === 2) {\n    return array[0] > array[1]\
    \ ? [array[1], array[0]] : arr;\n  }\n  if ((array[0] + array[len - 1]) % 2 ===\
    \ 0) {\n    arr.sort((a, b) => b - a);\n  } else {\n    arr.sort((a, b) => a -\
    \ b);\n  }\n  return arr;\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5, 6]));\n",
  "  const sum: number = array[0] + array[array.length - 1];\n  if (sum % 2 === 0)\
    \ {\n    return array.sort((a, b) => b - a);\n  } else {\n    return array.sort((a,\
    \ b) => a - b);\n  }\n}\n\nconsole.log(sort_array([2, 4, 3, 0, 1, 5]));\n", " \
    \ const arr = array.map((v, i) => [v, i]);\n  let desc = array.reduce((a, b) =>\
    \ a + b, 0) % 2 === 0;\n  desc ? arr.sort((a, b) => b[0] - a[0]) : arr.sort((a,\
    \ b) => a[0] - b[0]);\n  return arr.map(v => v[0]);\n}\n\nconsole.log(sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]));", "    let arrSum = array.reduce((a,b) => a + b, 0);\n\
    \    return arrSum % 2 === 0 ? array.sort().reverse() : array.sort();\n}\n", " \
    \   if (array.length > 0) {\n        const sum = array[0] + array[array.length\
    \ - 1];\n        if (sum % 2 === 0) {\n            array.sort((a, b) => b - a);\n\
    \        } else {\n            array.sort((a, b) => a - b);\n        }\n    }\n\
    \    return array;\n}\n", "    // if the given array is empty\n    if (array.length\
    \ === 0) {\n        return array;\n    }\n    // if the given array has only one\
    \ element\n    if (array.length === 1) {\n        return array;\n    }\n    //\
    \ if the sum(first index value, last index value) is odd\n    if ((array[0] +\
    \ array[array.length - 1]) % 2 !== 0) {\n        // sort the given array in ascending\
    \ order\n        array.sort((a, b) => a - b);\n        return array;\n    }\n\
    \    // if the sum(first index value, last index value) is even\n    else {\n\
    \        // sort the given array in descending order\n        array.sort((a, b)\
    \ => b - a);\n        return array;\n    }\n}\n", "  if (array.length === 0) {\n\
    \    return [];\n  }\n  const isSumOdd = array[0] + array[array.length - 1] %\
    \ 2;\n  return array.sort((first, second) => {\n    return isSumOdd ? first -\
    \ second : second - first;\n  });\n}\n\nexport default sort_array;", "    if (array.length\
    \ === 0) {\n        return [];\n    } else if (array.length === 1) {\n       \
    \ return array;\n    } else {\n        return (array[0] + array[array.length -\
    \ 1]) % 2 === 0 ? array.sort((a, b) => b - a) : array.sort((a, b) => a - b);\n\
    \    }\n}\n", "  if (array.length < 2) {\n    return array;\n  }\n\n  const lastIndex\
    \ = array.length - 1;\n  const sum = array[0] + array[lastIndex];\n  if (sum %\
    \ 2 === 0) {\n    return array.sort((a, b) => a < b ? 1 : -1);\n  } else {\n \
    \   return array.sort((a, b) => a > b ? 1 : -1);\n  }\n}"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
