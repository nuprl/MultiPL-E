name: HumanEval_101_words_string
language: ts
prompt: "//You will be given a string of words separated by commas or spaces. Your\
  \ task is\n// to split the string into words and return an array of the words.\n\
  // For example:\n// words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"\
  name\", \"is\", \"John\"]\n// words_string(\"One, two, three, four, five, six\"\
  ) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nfunction words_string(s:\
  \ string): string[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = words_string;\n  assert.deepEqual(candidate(\"Hi,\
  \ my name is John\"),[\"Hi\", \"my\", \"name\", \"is\", \"John\"]);\n  assert.deepEqual(candidate(\"\
  One, two, three, four, five, six\"),[\"One\", \"two\", \"three\", \"four\", \"five\"\
  , \"six\"]);\n  assert.deepEqual(candidate(\"Hi, my name\"),[\"Hi\", \"my\", \"\
  name\"]);\n  assert.deepEqual(candidate(\"One,, two, three, four, five, six,\"),[\"\
  One\", \"two\", \"three\", \"four\", \"five\", \"six\"]);\n  assert.deepEqual(candidate(\"\
  \"),[]);\n  assert.deepEqual(candidate(\"ahmed     , gamal\"),[\"ahmed\", \"gamal\"\
  ]);\n}\n\ntest();"
completions: ["    return s.split(' ');\n}\n", "  return s.split(/[\\s,]+/);\n}\n\n\
    console.log(words_string(\"Hi, my name is John\"));\nconsole.log(words_string(\"\
    One, two, three, four, five, six\"));\n", "    return s.split(/[\\s,]+/);\n}\n",
  "    return s.split(/[ ,]+/);\n}\n", "    return s.split(' ').join(',').split(',');\n\
    }\n", "  const sep = s.split(/[\\s,]+/);\n  return sep;\n}\n", "  return s.split(/[\\\
    s,]+/);\n}\n", "  // Your code here\n  return [];\n}\n", "  return s.split(/[\\\
    s,]+/);\n}\n", "    let words = s.split(',');\n    let output: string[] = [];\n\
    \    for (let word of words) {\n        let temp = word.split(' ');\n        for\
    \ (let i of temp) {\n            if (i != '') {\n                output.push(i);\n\
    \            }\n        }\n    }\n    return output;\n}\n", "  return s.split(/[\\\
    s,]+/);\n}\n", "    return s.split(/[\\s,]+/);\n}\n", "  return s.split(\" \"\
    );\n}\n", "    return s.split(/[ ,]+/).filter(v => v);\n}\n", "    let stringArray\
    \ = s.split(\" \");\n    return stringArray;\n}\n\nconsole.log(words_string(\"\
    Hi, my name is John\"));\nconsole.log(words_string(\"One, two, three, four, five,\
    \ six\"));\n", "  return s.split(/[\\s,]+/).filter(s => s.length > 0);\n}\n",
  "    // return s.replace(/\\s/g, \",\").split(\",\");\n    return s.split(/\\s|,/);\n\
    }\n", "  let arrayOfString = s.split(\" \");\n  return arrayOfString;\n}\n", " \
    \   return s.split(/[\\s,]+/);\n}\n", "    return s.split(/[ ,]+/);\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
