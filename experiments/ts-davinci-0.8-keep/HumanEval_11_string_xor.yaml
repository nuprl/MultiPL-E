name: HumanEval_11_string_xor
language: ts
prompt: "//Input are two strings a and b consisting only of 1s and 0s.\n// Perform\
  \ binary XOR on these inputs and return result also as a string.\n// >>> string_xor('010',\
  \ '110')\n// '100'\nfunction string_xor(a: string, b: string): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = string_xor;\n  assert.deepEqual(candidate(\"111000\"\
  , \"101010\"),\"010010\");\n  assert.deepEqual(candidate(\"1\", \"1\"),\"0\");\n\
  \  assert.deepEqual(candidate(\"0101\", \"0000\"),\"0101\");\n}\n\ntest();"
completions: ["  return _.zip(a, b)\n    .map(([x, y]) => String(x ^ y))\n    .join('');\n\
    }\n", "    return '';\n}\n", "  return a.split('').map((x, i) => {\n    return\
    \ Number(x) ^ Number(b[i]);\n  }).join('');\n}\n", "    const out: string[] =\
    \ [];\n    for (let i = 0; i < a.length; i++) {\n        out.push(a[i] !== b[i]\
    \ ? '1' : '0');\n    }\n    return out.join('');\n}\n", "  if (a.length != b.length)\
    \ {\n    throw \"Unequal length of input strings\";\n  }\n  let result = '';\n\
    \  for (let i = 0; i < a.length; i++) {\n    if (a[i] == b[i]) {\n      result\
    \ += '0';\n    } else {\n      result += '1';\n    }\n  }\n  return result;\n\
    }\n", "    return a.split('').map((val, idx) => val ^ b[idx]).join('');\n}\n",
  "    if (a.length != b.length) {\n        throw new Error('Strings must be of equal\
    \ length');\n    }\n    let output = '';\n    for (let i = 0; i < a.length; i++)\
    \ {\n        if (a[i] === b[i]) {\n            output += '0';\n        } else\
    \ {\n            output += '1';\n        }\n    }\n    return output;\n}\n", " \
    \ return '';\n}\n", "    let new_string = '';\n    for (let i = 0; i < a.length;\
    \ i++) {\n        new_string += (a[i] === b[i]) ? '0' : '1';\n    }\n    return\
    \ new_string;\n}\n", "    let result = '';\n    for (let i = 0; i < a.length;\
    \ i++) {\n        if (a[i] === b[i]) {\n            result += '0';\n        }\
    \ else {\n            result += '1';\n        }\n    }\n    return result;\n}\n",
  "  let r = '';\n  for (let i = 0; i < a.length; i++) {\n    r += (a[i] === b[i])\
    \ ? '0' : '1';\n  }\n  return r;\n}\n", "    if (a.length != b.length) {\n   \
    \     return '';\n    }\n    var result = '';\n    for (var i = 0; i < a.length;\
    \ i++) {\n        result += (parseInt(a[i]) ^ parseInt(b[i])).toString();\n  \
    \  }\n    return result;\n}\n", "  if (a.length !== b.length) {\n    throw new\
    \ Error('Strings should be the same length.');\n  }\n  let res = '';\n  for (let\
    \ i = 0; i < a.length; i++) {\n    const c: string = a[i];\n    const d: string\
    \ = b[i];\n    if (c === d) {\n      res += '0';\n    } else {\n      res += '1';\n\
    \    }\n  }\n  return res;\n}\n", "    let res = '';\n    for (let i = 0; i <\
    \ a.length; i++) {\n        if (a[i] === b[i]) res += '0';\n        else res +=\
    \ '1';\n    }\n    return res;\n}\n", "  let result = '';\n  let i = a.length\
    \ - 1;\n  let j = b.length - 1;\n\n  while (i >= 0 || j >= 0) {\n    const x =\
    \ i >= 0 ? a[i] : '0';\n    const y = j >= 0 ? b[j] : '0';\n    if (x !== y) {\n\
    \      result = '1' + result;\n    } else {\n      result = '0' + result;\n  \
    \  }\n    i--;\n    j--;\n  }\n\n  return result;\n}\n", "    if (a.length !==\
    \ b.length) {\n        throw new Error('Strings must be equal length');\n    }\n\
    \    let result = '';\n    for (let i = 0; i < a.length; i++) {\n        result\
    \ += (a[i] === b[i]) ? '0' : '1';\n    }\n    return result;\n}\n", "  if (!a.length)\
    \ return b;\n  if (!b.length) return a;\n  return (parseInt(a, 2) ^ parseInt(b,\
    \ 2)).toString(2);\n}\n", "  const aArray = a.split('');\n  const bArray = b.split('');\n\
    \  const cArray = [];\n  aArray.forEach((num, index) => {\n    if (num === bArray[index])\
    \ {\n      cArray.push('0');\n    } else {\n      cArray.push('1');\n    }\n \
    \ });\n  return cArray.join('');\n}\n", "  let maxLength = Math.max(a.length,\
    \ b.length);\n  let output = \"\";\n  for (let i = 0; i < maxLength; i++) {\n\
    \    let bitA = a[i] ? a[i] : \"0\";\n    let bitB = b[i] ? b[i] : \"0\";\n  \
    \  output += bitA === bitB ? \"0\" : \"1\";\n  }\n  return output;\n}\n", "  \
    \  const length = Math.max(a.length, b.length);\n    a = a.padStart(length, '0');\n\
    \    b = b.padStart(length, '0');\n    return a.split('').map((v, i) => v ===\
    \ b[i] ? '0' : '1').join('');\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
