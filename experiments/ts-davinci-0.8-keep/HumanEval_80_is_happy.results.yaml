language: ts
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    let counter = 0;\n    for (let i = 0; i < s.length; i++) {\n\
    \        if (i === 0) {\n            counter += 1;\n        } else if (s[i] ===\
    \ s[i - 1]) {\n            counter += 1;\n        } else {\n            counter\
    \ = 1;\n        }\n        if (counter >= 3) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\nconsole.log(is_happy('zbcd'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpfex5bflk.js:39:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpfex5bflk.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    true

    true

    true

    true

    true

    true

    '
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  return s.length >= 3 && !/([a-zA-Z])\\1{2}/.test(s);\n}\n\nconsole.log(is_happy(\"\
    aaa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"xyy\"));\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp4_ncvuam.js:23:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp4_ncvuam.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    true

    true

    '
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    let sameCheck = 0;\n    let sameCheck2 = 0;\n    for (let i =\
    \ 0; i < s.length; i++) {\n        if (s[i] == s[i + 1]) {\n            sameCheck++;\n\
    \        }\n        if (s[i] == s[i + 2]) {\n            sameCheck2++;\n     \
    \   }\n    }\n    if (sameCheck >= 1 || sameCheck2 >= 1) {\n        return false;\n\
    \    } else {\n        return true;\n    }\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmp7klgrkc7.js:32:12)\n    at\
    \ Object.<anonymous> (/tmp/tmp7klgrkc7.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  let result = true;\n  for (let i = 0; i < s.length - 2; i++) {\n\
    \    for (let j = i + 1; j < s.length - 1; j++) {\n      for (let k = j + 1; k\
    \ < s.length; k++) {\n        if (s[i] === s[j] && s[j] === s[k]) {\n        \
    \  result = false;\n        }\n      }\n    }\n  }\n  return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzgsb68ln.js:27:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzgsb68ln.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    let length = s.length;\n    let bool = false;\n    for (let i\
    \ = 0; i < length; i++) {\n        if (s[i] === s[i + 1] && s[i + 1] === s[i +\
    \ 2]) {\n            bool = true;\n        }\n    }\n    return !bool;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpwn1dqeso.js:24:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpwn1dqeso.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    if (s.length < 3) {\n        return false;\n    }\n\n    for\
    \ (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n      \
    \  }\n    }\n\n    return true;\n}\n\nconsole.log(is_happy('aa'), false);\nconsole.log(is_happy('abcd'),\
    \ true);\nconsole.log(is_happy('aabb'), false);\nconsole.log(is_happy('adb'),\
    \ true);\nconsole.log(is_happy('xyy'), false);\nconsole.log(is_happy('ajjk'),\
    \ false);\nconsole.log(is_happy('asdfasdfasdfasdfasdf'), true);\nconsole.log(is_happy('asdasdfasdfasdfasdfasdfasdfasdfasdfa'),\
    \ false);\nconsole.log(is_happy('aasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ false);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ true);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'), true);\n\
    console.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'), true);\n\
    console.log(is_happy('qwerqwerqwerqwerqwerqwerqwerqwerqwerqwerqwerqwer'), true);\n\
    console.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ true);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ true);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfas\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpqyt2u32w.ts(40,57): error TS1002: Unterminated string
    literal.

    ../../../../../tmp/tmpqyt2u32w.ts(41,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpqyt2u32w.ts(41,9): error TS1005: '','' expected.

    '
  timestamp: 1659822216
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    if (s.length < 3) return false;\n    let dist = [...new Set(s.match(/[a-z]/gi))];\n\
    \    return s.length === dist.length ? true : false;\n}\n\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('aaabbb'));\nconsole.log(is_happy('aaabbbcc'));\nconsole.log(is_happy('abcdef'));\n\
    console.log(is_happy('xyz'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('ab'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpn3yasjxy.ts(13,24): error TS2583: Cannot find name
    ''Set''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    '
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    return /^(.)(?!\\1)(.)(?!\\1|\\2)(.)$/.test(s);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\nfalse\n\nshould\
    \ loosely deep-equal\n\ntrue\n    at test (/tmp/tmpczftu5jk.js:19:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpczftu5jk.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: false,\n \
    \ expected: true,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  let result = true;\n  if (s.length < 3) {\n    result = false;\n\
    \  } else {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        result =\
    \ false;\n      }\n    }\n  }\n  return result;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  let happy = true;\n  if (s.length < 3) {\n    happy = false;\n\
    \  } else {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        happy = false;\n\
    \      }\n    }\n  }\n  return happy;\n}\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"\
    aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\n\
    console.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  if (s.length < 3) {\n    return false;\n  }\n\n  for (let i = 0;\
    \ i < s.length - 2; i++) {\n    if (s[i] === s[i + 1] || s[i] === s[i + 2] ||\
    \ s[i + 1] === s[i + 2]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\nconsole.log(is_happy(\"adb\"));\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = is_happy;\n\
    \  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true

    '
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    let arr = s.split('');\n    if (arr.length < 3) {\n        return\
    \ false;\n    }\n    let counter = 0;\n    let happy = false;\n    while (counter\
    \ < arr.length - 1) {\n        if (arr[counter] === arr[counter + 1]) {\n    \
    \        happy = false;\n            break;\n        } else {\n            happy\
    \ = true;\n        }\n        counter++;\n    }\n    return happy;\n}\n\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('adb'));\nconsole.log(is_happy('xyy'));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n  assert.deepEqual(candidate(\"\
    aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"),true);\n  assert.deepEqual(candidate(\"\
    aabb\"),false);\n  assert.deepEqual(candidate(\"adb\"),true);\n  assert.deepEqual(candidate(\"\
    xyy\"),false);\n  assert.deepEqual(candidate(\"iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"\
    iopaxioi\"),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpzkgu4l1i.js:46:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpzkgu4l1i.js:48:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'false

    false

    true

    false

    true

    false

    '
  timestamp: 1659822216
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  if (s.length < 3) {\n    return false;\n  }\n  const set = new\
    \ Set();\n  for (let i = 0; i < s.length; i++) {\n    if (i + 3 <= s.length) {\n\
    \      const sub = s.substring(i, i + 3);\n      if (set.has(sub)) {\n       \
    \ return false;\n      }\n      set.add(sub);\n    }\n  }\n  return true;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxg63oa4e.ts(15,19): error TS2552: Cannot find name
    ''Set''. Did you mean ''set''?

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  let output = true;\n  if (s.length < 3) {\n    output = false;\n\
    \  } else {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        output =\
    \ false;\n      }\n    }\n  }\n  return output;\n}\n\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"xyy\"));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'true

    false

    false

    '
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    let sLength = s.length;\n    let i;\n    let curLetter;\n   \
    \ let prevLetter;\n    let prevPrevLetter;\n    if (sLength < 3) {\n        return\
    \ false;\n    }\n    prevPrevLetter = s[0];\n    prevLetter = s[1];\n    for (i\
    \ = 2; i < sLength; i++) {\n        curLetter = s[i];\n        if (curLetter ===\
    \ prevLetter && prevLetter === prevPrevLetter) {\n            return false;\n\
    \        }\n        prevPrevLetter = prevLetter;\n        prevLetter = curLetter;\n\
    \    }\n    return true;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"\
    a\"),false);\n  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmppgen6sjv.js:38:12)\n    at\
    \ Object.<anonymous> (/tmp/tmppgen6sjv.js:44:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  return s.length >= 3 &&\n    !s.slice(0, 3).split('').some((e,\
    \ i, a) => a.indexOf(e) !== i);\n}\n\nconsole.log(is_happy('abcabcabc'));\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpsv1wsamb.js:26:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpsv1wsamb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: 'true

    '
  timestamp: 1659822216
- exit_code: 2
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    let count = 0;\n    let temp = '';\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (temp.includes(s[i])) {\n            count++;\n        }\
    \ else {\n            temp += s[i];\n        }\n    }\n    return count == 3;\n\
    }\n\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('xyy'));\n\
    console.log(is_happy('a'));\nconsole.log(is_happy('aa'));\nconsole.log(is_happy('abcd'));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmphlqxek7p.ts(15,18): error TS2339: Property ''includes''
    does not exist on type ''string''.

    '
  timestamp: 1659822216
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n    const arr: string[] = s.split('');\n    if (arr.length < 3) {\n\
    \        return false;\n    }\n    for (let i = 0; i < arr.length - 2; i++) {\n\
    \        if (arr[i] === arr[i + 1] || arr[i] === arr[i + 2] || arr[i + 1] ===\
    \ arr[i + 2]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 0
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  if (s.length >= 3) {\n    for (let i = 0; i < s.length - 2; i++)\
    \ {\n      if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2])\
    \ {\n        return false;\n      }\n    }\n    return true;\n  }\n  return false;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822216
- exit_code: 1
  program: "//You are given a string s.\n// Your task is to check if the string is\
    \ happy or not.\n// A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n// For example:\n// is_happy(a) => False\n\
    // is_happy(aa) => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n\
    // is_happy(adb) => True\n// is_happy(xyy) => False\nfunction is_happy(s: string):\
    \ boolean {\n  if (s.length < 3) {\n    return false;\n  }\n  let prev3: string\
    \ = s.substring(0, 3);\n  for (let i = 1; i < s.length - 2; i++) {\n    if (prev3\
    \ === s.substring(i, i + 3)) {\n      return false;\n    }\n  }\n  return true;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
    \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"\
    abcd\"),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
    adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
    iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\n\
    test();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpmt98mjgt.js:29:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpmt98mjgt.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822216
