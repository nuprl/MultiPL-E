language: ts
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    const numeralToNum: { [key: string]:\
    \ number } = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n   \
    \     'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n\
    \        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n    const\
    \ numToNumeral: { [key: number]: string } = {\n        0: 'zero',\n        1:\
    \ 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n       \
    \ 5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n  \
    \      9: 'nine'\n    };\n    const numArr = numbers.split(' ').map(n => numeralToNum[n]);\n\
    \    const sorted = numArr.sort((a, b) => a - b);\n    return sorted.map(n =>\
    \ numToNumeral[n]).join(' ');\n}\nconsole.log(sort_numbers('three one five'));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  return numbers\n    .split(\" \"\
    )\n    .sort((a, b) => {\n      const dict = {\n        zero: 0,\n        one:\
    \ 1,\n        two: 2,\n        three: 3,\n        four: 4,\n        five: 5,\n\
    \        six: 6,\n        seven: 7,\n        eight: 8,\n        nine: 9\n    \
    \  };\n      return dict[a] - dict[b];\n    })\n    .join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    return numbers\n        .split(\"\
    \ \")\n        .map(numeral => {\n            switch (numeral) {\n           \
    \     case \"zero\":\n                    return 0;\n                case \"one\"\
    :\n                    return 1;\n                case \"two\":\n            \
    \        return 2;\n                case \"three\":\n                    return\
    \ 3;\n                case \"four\":\n                    return 4;\n        \
    \        case \"five\":\n                    return 5;\n                case \"\
    six\":\n                    return 6;\n                case \"seven\":\n     \
    \               return 7;\n                case \"eight\":\n                 \
    \   return 8;\n                case \"nine\":\n                    return 9;\n\
    \                default:\n                    throw new Error(\"unknown numeral\"\
    );\n            }\n        })\n        .sort((a, b) => a - b)\n        .map(numeral\
    \ => {\n            switch (numeral) {\n                case 0:\n            \
    \        return \"zero\";\n                case 1:\n                    return\
    \ \"one\";\n                case 2:\n                    return \"two\";\n   \
    \             case 3:\n                    return \"three\";\n               \
    \ case 4:\n                    return \"four\";\n                case 5:\n   \
    \                 return \"five\";\n                case 6:\n                \
    \    return \"six\";\n                case 7:\n                    return \"seven\"\
    ;\n                case 8:\n                    return \"eight\";\n          \
    \      case 9:\n                    return \"nine\";\n                default:\n\
    \                    throw new Error(\"unknown numeral\");\n            }\n  \
    \      })\n        .join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpnqeudcvx.js:32\n                throw new Error(\"unknown numeral\"\
    );\n                ^\n\nError: unknown numeral\n    at /tmp/tmpnqeudcvx.js:32:23\n\
    \    at Array.map (<anonymous>)\n    at sort_numbers (/tmp/tmpnqeudcvx.js:9:10)\n\
    \    at test (/tmp/tmpnqeudcvx.js:67:22)\n    at Object.<anonymous> (/tmp/tmpnqeudcvx.js:73:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const array: string[] = numbers.split('\
    \ ');\n  const result: string[] = array.sort((a, b) => {\n    if (getNumber(a)\
    \ > getNumber(b)) {\n      return 1;\n    }\n    if (getNumber(a) < getNumber(b))\
    \ {\n      return -1;\n    }\n    return 0;\n  });\n  return result.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp9iy1n8rl.ts(9,9): error TS2304: Cannot find name
    ''getNumber''.

    ../../../../../tmp/tmp9iy1n8rl.ts(9,24): error TS2304: Cannot find name ''getNumber''.

    ../../../../../tmp/tmp9iy1n8rl.ts(12,9): error TS2304: Cannot find name ''getNumber''.

    ../../../../../tmp/tmp9iy1n8rl.ts(12,24): error TS2304: Cannot find name ''getNumber''.

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    const arr = numbers.split(' ');\n\
    \    const stringifiedArr = arr.map(el => {\n        if (el === 'zero') {\n  \
    \          return 0;\n        } else if (el === 'one') {\n            return 1;\n\
    \        } else if (el === 'two') {\n            return 2;\n        } else if\
    \ (el === 'three') {\n            return 3;\n        } else if (el === 'four')\
    \ {\n            return 4;\n        } else if (el === 'five') {\n            return\
    \ 5;\n        } else if (el === 'six') {\n            return 6;\n        } else\
    \ if (el === 'seven') {\n            return 7;\n        } else if (el === 'eight')\
    \ {\n            return 8;\n        } else if (el === 'nine') {\n            return\
    \ 9;\n        }\n    });\n    const sortedArr = stringifiedArr.sort((a, b) =>\
    \ a - b);\n    const wordedSortedArr = sortedArr.map(el => {\n        if (el ===\
    \ 0) {\n            return 'zero';\n        } else if (el === 1) {\n         \
    \   return 'one';\n        } else if (el === 2) {\n            return 'two';\n\
    \        } else if (el === 3) {\n            return 'three';\n        } else if\
    \ (el === 4) {\n            return 'four';\n        } else if (el === 5) {\n \
    \           return 'five';\n        } else if (el === 6) {\n            return\
    \ 'six';\n        } else if (el === 7) {\n            return 'seven';\n      \
    \  } else if (el === 8) {\n            return 'eight';\n        } else if (el\
    \ === 9) {\n            return 'nine';\n        }\n    });\n    return wordedSortedArr.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  return numbers\n    .split(\" \"\
    )\n    .sort((a, b) => number_to_numeral.get(a) - number_to_numeral.get(b))\n\
    \    .join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp5b_0lhn1.ts(9,21): error TS2304: Cannot find name
    ''number_to_numeral''.

    ../../../../../tmp/tmp5b_0lhn1.ts(9,48): error TS2304: Cannot find name ''number_to_numeral''.

    '
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    const number_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    const input_list = numbers.split(' ');\n\
    \    let output_list = [];\n    for (let i = 0; i < input_list.length; i++) {\n\
    \        output_list.push(number_map[input_list[i]]);\n    }\n    output_list.sort((a,\
    \ b) => a - b);\n    output_list = output_list.map(item => Object.keys(number_map).find(key\
    \ => number_map[key] === item));\n    return output_list.join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp7a7sqe8c.ts(25,67): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  return numbers\n    .split(\" \"\
    )\n    .sort((a, b) => numeral_map[a] - numeral_map[b])\n    .join(\" \");\n}\n\
    \nexport const sort_numbers_tests = {\n  sort_numbers,\n};\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpdp8chi1a.ts(9,21): error TS2304: Cannot find name
    ''numeral_map''.

    ../../../../../tmp/tmpdp8chi1a.ts(9,38): error TS2304: Cannot find name ''numeral_map''.

    '
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const num_mapping = {\n    'zero':\
    \ 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five':\
    \ 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n \
    \ const nums_arr = numbers.split(' ');\n  const nums_numeric = nums_arr.map(num\
    \ => num_mapping[num]);\n  const sorted_nums = quick_sort(nums_numeric);\n  const\
    \ sorted_words = sorted_nums.map(num => {\n    return Object.keys(num_mapping).find(key\
    \ => num_mapping[key] === num);\n  });\n  return sorted_words.join(' ');\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpnwy9_4_k.ts(21,23): error TS2304: Cannot find name
    ''quick_sort''.

    ../../../../../tmp/tmpnwy9_4_k.ts(23,37): error TS2339: Property ''find'' does
    not exist on type ''string[]''.

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const numbersArr = numbers.split('\
    \ ');\n  let numbersObj = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9,\n  };\n  let sortedArr = numbersArr.sort((a, b) => {\n    return\
    \ numbersObj[a] - numbersObj[b];\n  });\n  return sortedArr.join(' ');\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    const num_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    const words = numbers.split(' ');\n    const\
    \ res = words.map(el => num_map[el]).sort((a, b) => a - b);\n    let output =\
    \ '';\n    for (let i = 0; i < res.length; i++) {\n        const word = Object.keys(num_map).find(key\
    \ => num_map[key] === res[i]);\n        output += word + ' ';\n    }\n    return\
    \ output.trim();\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpe0f_vflp.ts(23,43): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    let numHash: { [key: string]: number\
    \ } = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three':\
    \ 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven':\
    \ 7,\n        'eight': 8,\n        'nine': 9\n    };\n    return numbers.split('\
    \ ').sort((a, b) => {\n        return numHash[a] - numHash[b];\n    }).join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const map: { [key: string]: number\
    \ } = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n\
    \    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n\
    \  const arr = numbers.split(\" \");\n  const sorted = arr.sort((a, b) => map[a]\
    \ - map[b]);\n  return sorted.join(\" \");\n}\n\nconsole.log(sort_numbers(\"three\
    \ one five\"));\nconsole.log(sort_numbers(\"five four nine\"));\nconsole.log(sort_numbers(\"\
    zero one three\"));\nconsole.log(sort_numbers(\"nine one two\"));\nconsole.log(sort_numbers(\"\
    three three zero four\"));\nconsole.log(sort_numbers(\"two five one six\"));\n\
    console.log(sort_numbers(\"four three nine zero\"));\nconsole.log(sort_numbers(\"\
    nine nine nine nine\"));\nconsole.log(sort_numbers(\"one two nine three\"));\n\
    console.log(sort_numbers(\"two one nine three\"));\nconsole.log(sort_numbers(\"\
    seven one five\"));\nconsole.log(sort_numbers(\"nine nine nine nine\"));\nconsole.log(sort_numbers(\"\
    three three zero four\"));\nconsole.log(sort_numbers(\"one two nine three\"));\n\
    console.log(sort_numbers(\"one two two three\"));\nconsole.log(sort_numbers(\"\
    two five one six\"));\nconsole.log(sort_numbers(\"three two one\"));\nconsole.log(sort_numbers(\"\
    one three two\"));\nconsole.log(sort_numbers(\"three two one\"));\nconsole.log(sort_numbers(\"\
    two one three\"));\nconsole.log(sort_numbers(\"five four nine\"));\nconsole.log(sort_numbers(\"\
    two one three\"));\nconsole.log(sort_numbers(\"two one five\"));\nconsole.log(sort_numbers(\"\
    three one five\"));\nconsole.log(sort_numbers(\"one two three\"));\nconsole\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: 'one three five

    four five nine

    zero one three

    one two nine

    zero three three four

    one two five six

    zero three four nine

    nine nine nine nine

    one two three nine

    one two three nine

    one five seven

    nine nine nine nine

    zero three three four

    one two three nine

    one two two three

    one two five six

    one two three

    one two three

    one two three

    one two three

    four five nine

    one two three

    one two five

    one three five

    one two three

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const split_numbers = numbers.split('\
    \ ');\n  const numerals: string[] = ['zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'];\n  let num_array: number[] = [];\n  for (let\
    \ number of split_numbers) {\n    const num_index = numerals.indexOf(number);\n\
    \    num_array.push(num_index);\n  }\n  const sorted_nums = num_array.sort((a,\
    \ b) => a - b);\n  const sorted_strings: string[] = [];\n  for (let num of sorted_nums)\
    \ {\n    sorted_strings.push(numerals[num]);\n  }\n  return sorted_strings.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n    let numberMapping = {\n       \
    \ 'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n    \
    \    'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    let result = [];\n    numbers.split('\
    \ ').map(word => {\n        result.push(numberMapping[word]);\n    });\n    result.sort((a,\
    \ b) => a - b);\n    return result.map(number => {\n        for (let word in numberMapping)\
    \ {\n            if (numberMapping[word] === number) {\n                return\
    \ word;\n            }\n        }\n    }).join(' ');\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const numbers_array = numbers.split('\
    \ ');\n  const number_to_int_map = new Map([\n    ['zero', 0],\n    ['one', 1],\n\
    \    ['two', 2],\n    ['three', 3],\n    ['four', 4],\n    ['five', 5],\n    ['six',\
    \ 6],\n    ['seven', 7],\n    ['eight', 8],\n    ['nine', 9],\n  ]);\n  let int_array\
    \ = [];\n  for (let i = 0; i < numbers_array.length; i++) {\n    int_array.push(number_to_int_map.get(numbers_array[i]));\n\
    \  }\n  int_array.sort((a, b) => a - b);\n  const int_to_number_map = new Map([\n\
    \    [0, 'zero'],\n    [1, 'one'],\n    [2, 'two'],\n    [3, 'three'],\n    [4,\
    \ 'four'],\n    [5, 'five'],\n    [6, 'six'],\n    [7, 'seven'],\n    [8, 'eight'],\n\
    \    [9, 'nine'],\n  ]);\n  let sorted_numbers = [];\n  for (let i = 0; i < int_array.length;\
    \ i++) {\n    sorted_numbers.push(int_to_number_map.get(int_array[i]));\n  }\n\
    \  return sorted_numbers.join(' ');\n}\n\nassert(sort_numbers('three one five')\
    \ === 'one three five');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpy6f6xi7p.ts(8,33): error TS2583: Cannot find name
    ''Map''. Do you need to change your target library? Try changing the `lib` compiler
    option to es2015 or later.

    ../../../../../tmp/tmpy6f6xi7p.ts(25,33): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../../tmp/tmpy6f6xi7p.ts(44,1): error TS2448: Block-scoped variable ''assert''
    used before its declaration.

    '
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  if (numbers === null) {\n    return\
    \ null;\n  }\n  // write your code here\n  const numArr = numbers.split(\" \"\
    );\n  numArr.sort((a, b) => {\n    return convertToNum(a) - convertToNum(b);\n\
    \  });\n  return numArr.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp6xebogmx.ts(13,12): error TS2304: Cannot find name
    ''convertToNum''.

    ../../../../../tmp/tmp6xebogmx.ts(13,30): error TS2304: Cannot find name ''convertToNum''.

    '
  timestamp: 1659822035
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const number_map = {\n    zero: 0,\n\
    \    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numbers_array\
    \ = numbers.split(\" \");\n  const sorted_numbers_array = numbers_array.sort((number_a,\
    \ number_b) => {\n    if (number_map[number_a] < number_map[number_b]) {\n   \
    \   return -1;\n    } else if (number_map[number_a] > number_map[number_b]) {\n\
    \      return 1;\n    } else {\n      return 0;\n    }\n  });\n  return sorted_numbers_array.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const sorted = numbers.split(' ').sort((a,\
    \ b) => numeral_to_int(a) - numeral_to_int(b));\n  return sorted.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpcoan2027.ts(7,52): error TS2304: Cannot find name
    ''numeral_to_int''.

    ../../../../../tmp/tmpcoan2027.ts(7,72): error TS2304: Cannot find name ''numeral_to_int''.

    '
  timestamp: 1659822035
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers('three one five')\n// 'one three five'\nfunction\
    \ sort_numbers(numbers: string): string {\n  const words = numbers.split(' ');\n\
    \  return words.sort(wordToNumber).join(' ');\n}\n\nconst wordToNumber: (word:\
    \ string) => number = _.cond([\n  [_.matches({ zero: true }), _.constant(0)],\n\
    \  [_.matches({ one: true }), _.constant(1)],\n  [_.matches({ two: true }), _.constant(2)],\n\
    \  [_.matches({ three: true }), _.constant(3)],\n  [_.matches({ four: true }),\
    \ _.constant(4)],\n  [_.matches({ five: true }), _.constant(5)],\n  [_.matches({\
    \ six: true }), _.constant(6)],\n  [_.matches({ seven: true }), _.constant(7)],\n\
    \  [_.matches({ eight: true }), _.constant(8)],\n  [_.matches({ nine: true }),\
    \ _.constant(9)],\n]);\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpzapsele2.ts(11,48): error TS2304: Cannot find name
    ''_''.

    ../../../../../tmp/tmpzapsele2.ts(12,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(12,31): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(13,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(13,30): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(14,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(14,30): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(15,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(15,32): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(16,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(16,31): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(17,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(17,31): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(18,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(18,30): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(19,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(19,32): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(20,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(20,32): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(21,4): error TS2304: Cannot find name ''_''.

    ../../../../../tmp/tmpzapsele2.ts(21,31): error TS2304: Cannot find name ''_''.

    '
  timestamp: 1659822035
