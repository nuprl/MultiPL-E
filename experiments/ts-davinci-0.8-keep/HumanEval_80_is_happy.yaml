name: HumanEval_80_is_happy
language: ts
prompt: "//You are given a string s.\n// Your task is to check if the string is happy\
  \ or not.\n// A string is happy if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n// For example:\n// is_happy(a) => False\n// is_happy(aa)\
  \ => False\n// is_happy(abcd) => True\n// is_happy(aabb) => False\n// is_happy(adb)\
  \ => True\n// is_happy(xyy) => False\nfunction is_happy(s: string): boolean {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = is_happy;\n  assert.deepEqual(candidate(\"a\"),false);\n\
  \  assert.deepEqual(candidate(\"aa\"),false);\n  assert.deepEqual(candidate(\"abcd\"\
  ),true);\n  assert.deepEqual(candidate(\"aabb\"),false);\n  assert.deepEqual(candidate(\"\
  adb\"),true);\n  assert.deepEqual(candidate(\"xyy\"),false);\n  assert.deepEqual(candidate(\"\
  iopaxpoi\"),true);\n  assert.deepEqual(candidate(\"iopaxioi\"),false);\n}\n\ntest();"
completions: ["    let counter = 0;\n    for (let i = 0; i < s.length; i++) {\n  \
    \      if (i === 0) {\n            counter += 1;\n        } else if (s[i] ===\
    \ s[i - 1]) {\n            counter += 1;\n        } else {\n            counter\
    \ = 1;\n        }\n        if (counter >= 3) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\nconsole.log(is_happy('zbcd'));\n", "  return s.length\
    \ >= 3 && !/([a-zA-Z])\\1{2}/.test(s);\n}\n\nconsole.log(is_happy(\"aaa\"));\n\
    console.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"xyy\"));\n", "    let\
    \ sameCheck = 0;\n    let sameCheck2 = 0;\n    for (let i = 0; i < s.length; i++)\
    \ {\n        if (s[i] == s[i + 1]) {\n            sameCheck++;\n        }\n  \
    \      if (s[i] == s[i + 2]) {\n            sameCheck2++;\n        }\n    }\n\
    \    if (sameCheck >= 1 || sameCheck2 >= 1) {\n        return false;\n    } else\
    \ {\n        return true;\n    }\n}\n", "  let result = true;\n  for (let i =\
    \ 0; i < s.length - 2; i++) {\n    for (let j = i + 1; j < s.length - 1; j++)\
    \ {\n      for (let k = j + 1; k < s.length; k++) {\n        if (s[i] === s[j]\
    \ && s[j] === s[k]) {\n          result = false;\n        }\n      }\n    }\n\
    \  }\n  return result;\n}\n", "    let length = s.length;\n    let bool = false;\n\
    \    for (let i = 0; i < length; i++) {\n        if (s[i] === s[i + 1] && s[i\
    \ + 1] === s[i + 2]) {\n            bool = true;\n        }\n    }\n    return\
    \ !bool;\n}\n", "    if (s.length < 3) {\n        return false;\n    }\n\n   \
    \ for (let i = 0; i < s.length - 2; i++) {\n        if (s[i] === s[i + 1] || s[i]\
    \ === s[i + 2] || s[i + 1] === s[i + 2]) {\n            return false;\n      \
    \  }\n    }\n\n    return true;\n}\n\nconsole.log(is_happy('aa'), false);\nconsole.log(is_happy('abcd'),\
    \ true);\nconsole.log(is_happy('aabb'), false);\nconsole.log(is_happy('adb'),\
    \ true);\nconsole.log(is_happy('xyy'), false);\nconsole.log(is_happy('ajjk'),\
    \ false);\nconsole.log(is_happy('asdfasdfasdfasdfasdf'), true);\nconsole.log(is_happy('asdasdfasdfasdfasdfasdfasdfasdfasdfa'),\
    \ false);\nconsole.log(is_happy('aasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ false);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ true);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'), true);\n\
    console.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'), true);\n\
    console.log(is_happy('qwerqwerqwerqwerqwerqwerqwerqwerqwerqwerqwerqwer'), true);\n\
    console.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ true);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasdf'),\
    \ true);\nconsole.log(is_happy('asdfasdfasdfasdfasdfasdfasdfasdfas", "    if (s.length\
    \ < 3) return false;\n    let dist = [...new Set(s.match(/[a-z]/gi))];\n    return\
    \ s.length === dist.length ? true : false;\n}\n\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('aaabbb'));\nconsole.log(is_happy('aaabbbcc'));\nconsole.log(is_happy('abcdef'));\n\
    console.log(is_happy('xyz'));\nconsole.log(is_happy('abcd'));\nconsole.log(is_happy('a'));\n\
    console.log(is_happy('aa'));\nconsole.log(is_happy('ab'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));", "    return /^(.)(?!\\1)(.)(?!\\1|\\2)(.)$/.test(s);\n\
    }\n", "  let result = true;\n  if (s.length < 3) {\n    result = false;\n  } else\
    \ {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] === s[i + 1]\
    \ || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        result = false;\n\
    \      }\n    }\n  }\n  return result;\n}\n", "  let happy = true;\n  if (s.length\
    \ < 3) {\n    happy = false;\n  } else {\n    for (let i = 0; i < s.length - 2;\
    \ i++) {\n      if (s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i\
    \ + 2]) {\n        happy = false;\n      }\n    }\n  }\n  return happy;\n}\n\n\
    console.log(is_happy(\"a\"));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\n\
    console.log(is_happy(\"xyy\"));\n", "  if (s.length < 3) {\n    return false;\n\
    \  }\n\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i] === s[i + 1]\
    \ || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\n\nconsole.log(is_happy(\"adb\"));", "    let arr = s.split('');\n\
    \    if (arr.length < 3) {\n        return false;\n    }\n    let counter = 0;\n\
    \    let happy = false;\n    while (counter < arr.length - 1) {\n        if (arr[counter]\
    \ === arr[counter + 1]) {\n            happy = false;\n            break;\n  \
    \      } else {\n            happy = true;\n        }\n        counter++;\n  \
    \  }\n    return happy;\n}\n\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\nconsole.log(is_happy('aabb'));\nconsole.log(is_happy('adb'));\n\
    console.log(is_happy('xyy'));\n", "  if (s.length < 3) {\n    return false;\n\
    \  }\n  const set = new Set();\n  for (let i = 0; i < s.length; i++) {\n    if\
    \ (i + 3 <= s.length) {\n      const sub = s.substring(i, i + 3);\n      if (set.has(sub))\
    \ {\n        return false;\n      }\n      set.add(sub);\n    }\n  }\n  return\
    \ true;\n}\n", "  let output = true;\n  if (s.length < 3) {\n    output = false;\n\
    \  } else {\n    for (let i = 0; i < s.length - 2; i++) {\n      if (s[i] ===\
    \ s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) {\n        output =\
    \ false;\n      }\n    }\n  }\n  return output;\n}\n\nconsole.log(is_happy(\"\
    abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"xyy\"));\n",
  "    let sLength = s.length;\n    let i;\n    let curLetter;\n    let prevLetter;\n\
    \    let prevPrevLetter;\n    if (sLength < 3) {\n        return false;\n    }\n\
    \    prevPrevLetter = s[0];\n    prevLetter = s[1];\n    for (i = 2; i < sLength;\
    \ i++) {\n        curLetter = s[i];\n        if (curLetter === prevLetter && prevLetter\
    \ === prevPrevLetter) {\n            return false;\n        }\n        prevPrevLetter\
    \ = prevLetter;\n        prevLetter = curLetter;\n    }\n    return true;\n}\n",
  "  return s.length >= 3 &&\n    !s.slice(0, 3).split('').some((e, i, a) => a.indexOf(e)\
    \ !== i);\n}\n\nconsole.log(is_happy('abcabcabc'));", "    let count = 0;\n  \
    \  let temp = '';\n    for (let i = 0; i < s.length; i++) {\n        if (temp.includes(s[i]))\
    \ {\n            count++;\n        } else {\n            temp += s[i];\n     \
    \   }\n    }\n    return count == 3;\n}\n\nconsole.log(is_happy('adb'));\nconsole.log(is_happy('aabb'));\n\
    console.log(is_happy('xyy'));\nconsole.log(is_happy('a'));\nconsole.log(is_happy('aa'));\n\
    console.log(is_happy('abcd'));\n", "    const arr: string[] = s.split('');\n \
    \   if (arr.length < 3) {\n        return false;\n    }\n    for (let i = 0; i\
    \ < arr.length - 2; i++) {\n        if (arr[i] === arr[i + 1] || arr[i] === arr[i\
    \ + 2] || arr[i + 1] === arr[i + 2]) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\n", "  if (s.length >= 3) {\n    for (let i = 0; i\
    \ < s.length - 2; i++) {\n      if (s[i] === s[i + 1] || s[i] === s[i + 2] ||\
    \ s[i + 1] === s[i + 2]) {\n        return false;\n      }\n    }\n    return\
    \ true;\n  }\n  return false;\n}\n", "  if (s.length < 3) {\n    return false;\n\
    \  }\n  let prev3: string = s.substring(0, 3);\n  for (let i = 1; i < s.length\
    \ - 2; i++) {\n    if (prev3 === s.substring(i, i + 3)) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
