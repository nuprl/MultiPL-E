name: HumanEval_57_monotonic
language: ts
prompt: "//Return True is list elements are monotonically increasing or decreasing.\n\
  // >>> monotonic([1, 2, 4, 20])\n// True\n// >>> monotonic([1, 20, 4, 10])\n// False\n\
  // >>> monotonic([4, 1, 0, -10])\n// True\nfunction monotonic(l: number[]): boolean\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = monotonic;\n  assert.deepEqual(candidate([1, 2, 4,\
  \ 10]),true);\n  assert.deepEqual(candidate([1, 2, 4, 20]),true);\n  assert.deepEqual(candidate([1,\
  \ 20, 4, 10]),false);\n  assert.deepEqual(candidate([4, 1, 0, -10]),true);\n  assert.deepEqual(candidate([4,\
  \ 1, 1, 0]),true);\n  assert.deepEqual(candidate([1, 2, 3, 2, 5, 60]),false);\n\
  \  assert.deepEqual(candidate([1, 2, 3, 4, 5, 60]),true);\n  assert.deepEqual(candidate([9,\
  \ 9, 9, 9]),true);\n}\n\ntest();"
completions: ["  const order = Math.sign(l[1] - l[0]);\n  return !l.slice(1).find((num,\
    \ i) => {\n    return order !== Math.sign(num - l[i]);\n  });\n}\n\nconsole.log(monotonic([1,\
    \ 2, 4, 20]));\nconsole.log(monotonic([1, 20, 4, 10]));\nconsole.log(monotonic([4,\
    \ 1, 0, -10]));\n", "    return is_increasing(l) || is_decreasing(l);\n}\n", " \
    \ if (l.length == 0) return false;\n  let b: boolean = true;\n  let p: number\
    \ = l[0];\n  let d: boolean = true;\n  for (let x of l) {\n    if (d && x < p)\
    \ {\n      d = false;\n    }\n    if (!d && x > p) {\n      b = false;\n     \
    \ break;\n    }\n    p = x;\n  }\n  return b;\n}\n", "  var b = true;\n  for (var\
    \ i = 0; i < l.length - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      b = false;\n\
    \    }\n  }\n  return b;\n}\n", "  return l.every((x, i) => i === 0 || l[i - 1]\
    \ <= x) || l.every((x, i) => i === 0 || l[i - 1] >= x);\n}\n", "    if (l.length\
    \ < 2) return true;\n    return l.map((_, i) => i > 0 ? l[i - 1] - l[i] : 0).every(t\
    \ => t === 0 || t > 0) ||\n        l.map((_, i) => i > 0 ? l[i - 1] - l[i] : 0).every(t\
    \ => t === 0 || t < 0);\n}\n", "    let isIncrease = l[0] < l[1];\n    for (let\
    \ i = 1; i < l.length - 1; i++) {\n        if (isIncrease) {\n            if (l[i]\
    \ > l[i + 1]) {\n                return false;\n            }\n        } else\
    \ {\n            if (l[i] < l[i + 1]) {\n                return false;\n     \
    \       }\n        }\n    }\n    return true;\n}\n", "  let result = true;\n \
    \ let increase = 0;\n  let decrease = 0;\n  let equal = 0;\n  let isEqual = false;\n\
    \  for (let i = 0; i < l.length - 1; i++) {\n    let diff = l[i + 1] - l[i];\n\
    \    if (diff > 0) {\n      increase++;\n    } else if (diff < 0) {\n      decrease++;\n\
    \    } else {\n      equal++;\n    }\n  }\n  if (increase === l.length - 1 ||\
    \ decrease === l.length - 1) {\n    isEqual = true;\n  }\n  if (equal === l.length\
    \ - 1) {\n    isEqual = true;\n  }\n  if (increase > 0 && decrease > 0) {\n  \
    \  result = false;\n  }\n  return result && isEqual;\n}\n", "    if (l.length\
    \ <= 1) return true;\n    let inc = (l[0] <= l[1]);\n    for (let i = 0; i < l.length\
    \ - 1; i++) {\n        if (inc && l[i] > l[i + 1]) return false;\n        if (!inc\
    \ && l[i] < l[i + 1]) return false;\n    }\n    return true;\n}\n", "  if (l.length\
    \ < 2) {\n    return true;\n  }\n  const direction = l[1] - l[0];\n  for (let\
    \ i = 1; i < l.length; i++) {\n    if (direction * (l[i] - l[i - 1]) < 0) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\n", "    let direction = l[1]\
    \ - l[0];\n    for (let i = 1; i < l.length; i++) {\n        if (direction !==\
    \ 0) {\n            if (direction !== l[i] - l[i - 1]) {\n                return\
    \ false;\n            }\n        } else {\n            direction = l[i] - l[i\
    \ - 1];\n        }\n    }\n    return true;\n}\n", "    let increasing = true\n\
    \    let decreasing = true\n    let previous = l[0]\n    let current = previous\n\
    \    for (let i = 1; i < l.length; i++) {\n        current = l[i]\n        if\
    \ (current < previous) {\n            increasing = false\n        }\n        if\
    \ (current > previous) {\n            decreasing = false\n        }\n        previous\
    \ = current\n    }\n    return increasing || decreasing\n}\n", "    if (l.length\
    \ <= 1) {\n        return true;\n    }\n    let i = 0;\n    let j = 1;\n    let\
    \ jHasPassed = false;\n    let decreasing = (l[i] > l[j]);\n    while (!jHasPassed)\
    \ {\n        if (j >= l.length) {\n            jHasPassed = true;\n        } else\
    \ {\n            if (decreasing) {\n                if (l[i] < l[j]) {\n     \
    \               return false;\n                }\n            } else {\n     \
    \           if (l[i] > l[j]) {\n                    return false;\n          \
    \      }\n            }\n            i++;\n            j++;\n        }\n    }\n\
    \    return true;\n}\n", "  var x: number = 1;\n  var y: number = 1;\n  for (var\
    \ i: number = 0; i < l.length - 1; i++) {\n    if (l[i] <= l[i + 1]) {\n     \
    \ x = x + 1;\n    }\n    if (l[i] >= l[i + 1]) {\n      y = y + 1;\n    }\n  }\n\
    \  if (x == l.length || y == l.length) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "  let prev: number = l[0];\n  let allGreater = true;\n \
    \ let allLess = true;\n  for (let i = 1; i < l.length; i++) {\n    const curr\
    \ = l[i];\n    if (curr < prev) {\n      allGreater = false;\n    }\n    if (curr\
    \ > prev) {\n      allLess = false;\n    }\n    prev = curr;\n  }\n  return allGreater\
    \ || allLess;\n}\n", "    if (l.length == 0) return true;\n    let startVal =\
    \ l[0];\n    let inc = l[1] > startVal;\n    let dec = l[1] < startVal;\n    for\
    \ (let i=1; i<l.length; i++) {\n        if (l[i] > startVal) {\n            if\
    \ (dec) return false;\n            inc = true;\n        } else if (l[i] < startVal)\
    \ {\n            if (inc) return false;\n            dec = true;\n        }\n\
    \        startVal = l[i];\n    }\n    return true;\n}\n", "    let asc = true;\n\
    \    let des = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if\
    \ (l[i] > l[i + 1]) {\n            asc = false;\n        }\n        if (l[i] <\
    \ l[i + 1]) {\n            des = false;\n        }\n    }\n    return asc || des;\n\
    }\n\n\n", "    if (l.length < 2) {\n        return true;\n    }\n\n    let direction\
    \ = l[1] - l[0];\n    for (let i = 2; i < l.length; i++) {\n        let new_direction\
    \ = l[i] - l[i - 1];\n        if (direction * new_direction < 0) {\n         \
    \   return false;\n        } else if (direction == 0) {\n            direction\
    \ = new_direction;\n        }\n    }\n    return true;\n}\n", "  let hasIncrease\
    \ = false\n  let hasDecrease = false\n  for (let i = 0; i < l.length - 1; i++)\
    \ {\n    if (l[i] < l[i + 1]) {\n      hasIncrease = true\n    } else if (l[i]\
    \ > l[i + 1]) {\n      hasDecrease = true\n    } else {\n      return false\n\
    \    }\n  }\n  return hasIncrease && hasDecrease\n}\n", "    return true;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
