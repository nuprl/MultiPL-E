{
  "language": "ts",
  "name": "HumanEval_93_encode",
  "results": [
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    // your code goes here\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcnhw0hvx.ts(11,35): error TS2355: A function whose declared type is neither 'void' nor 'any' must return a value.\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let vowels = 'aeiou';\n  let consonants = 'bcdfghjklmnpqrstvwxyz';\n  let words = message.split(' ');\n  let encoded: string = '';\n  let wordEncoded: string = '';\n  for (let word of words) {\n    for (let index in word) {\n      let letter = word[index];\n      if (letter === letter.toUpperCase()) {\n        wordEncoded += letter.toLowerCase();\n      } else {\n        wordEncoded += letter.toUpperCase();\n      }\n    }\n    encoded += wordEncoded + ' ';\n    wordEncoded = '';\n  }\n  encoded = encoded.trim();\n  for (let i = 0; i < vowels.length; i++) {\n    let current = vowels[i];\n    let next: string = vowels[i + 1];\n    let nextnext: string = vowels[i + 2];\n    if (nextnext) {\n      encoded = encoded.replace(new RegExp(current, 'gi'), nextnext);\n    } else {\n      nextnext = vowels[0];\n      encoded = encoded.replace(new RegExp(current, 'gi'), nextnext);\n    }\n  }\n  return encoded;\n}\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpfx6qhm7j.ts(18,23): error TS2407: The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter, but here has type 'string'.\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  return 'TGST';\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpj_oka1jl.js:17:12)\n    at Object.<anonymous> (/tmp/tmpj_oka1jl.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result: string = '';\n  const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n  const vowelsHash: { [key: string]: string } = {\n    a: 'c',\n    e: 'g',\n    i: 'k',\n    o: 'q',\n    u: 'y',\n  };\n  for (let i = 0; i < message.length; i++) {\n    const char: string = message[i];\n    const isUpperCase: boolean = char === char.toUpperCase();\n    const letter: string = char.toLowerCase();\n    if (vowels.includes(letter)) {\n      result += isUpperCase ? vowelsHash[letter].toUpperCase() : vowelsHash[letter];\n    } else {\n      result += isUpperCase ? letter.toUpperCase() : letter;\n    }\n  }\n  return result;\n}\n\nconsole.log(encode('test'));\nconsole.log(encode('This is a message'));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TGST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpxd5dcub1.js:39:12)\n    at Object.<anonymous> (/tmp/tmpxd5dcub1.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TGST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "tgst\nThks ks c mgsscgg\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    const vowels = ['a', 'e', 'i', 'o', 'u'];\n    return message.split('').map(char => {\n        if (vowels.includes(char.toLowerCase())) {\n            const index = vowels.indexOf(char.toLowerCase());\n            return vowels[(index + 2) % vowels.length].toUpperCase();\n        }\n        if (char.toLowerCase() === char) {\n            return char.toUpperCase();\n        }\n        return char.toLowerCase();\n    }).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp4v9ztylb.js:27:12)\n    at Object.<anonymous> (/tmp/tmp4v9ztylb.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encodedMessage = \"\";\n  for (let i = 0; i < message.length; i++) {\n    let char = message[i];\n    if (isUpperCase(char)) {\n      // convert it to lower case\n      char = char.toLowerCase();\n    } else if (isLowerCase(char)) {\n      // convert it to upper case\n      char = char.toUpperCase();\n    } else {\n      // do nothing;\n    }\n    encodedMessage += char;\n  }\n  return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpnqdyx4xz.ts(15,9): error TS2304: Cannot find name 'isUpperCase'.\n../../../../tmp/tmpnqdyx4xz.ts(18,16): error TS2304: Cannot find name 'isLowerCase'.\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let result: string = \"\";\n  for (let letter of message) {\n    let index = vowels.indexOf(letter.toLowerCase());\n    if (index !== -1) {\n      letter = vowels[(index + 2) % vowels.length];\n    }\n    if (letter === letter.toUpperCase()) {\n      letter = letter.toLowerCase();\n    } else {\n      letter = letter.toUpperCase();\n    }\n    result += letter;\n  }\n  return result;\n}\n\nconsole.log(encode(\"Test message\"));\nconsole.log(encode(\"This is a message\"));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmp31tcwk6c.ts(14,17): error TS2304: Cannot find name 'vowels'.\n../../../../tmp/tmp31tcwk6c.ts(16,16): error TS2304: Cannot find name 'vowels'.\n../../../../tmp/tmp31tcwk6c.ts(16,37): error TS2304: Cannot find name 'vowels'.\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  const encodedMessage: string[] = [];\n  for (let i = 0; i < message.length; i++) {\n    const encoded: string = encodeCharacter(message[i]);\n    encodedMessage.push(encoded);\n  }\n  return encodedMessage.join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmpcsbc7o7a.ts(14,29): error TS2304: Cannot find name 'encodeCharacter'.\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let encoded = '';\n  const vowels = 'AEIOU';\n  const vowelIdx = {\n    A: 0,\n    E: 1,\n    I: 2,\n    O: 3,\n    U: 4,\n  };\n  for (let char of message) {\n    if (char === char.toUpperCase()) {\n      char = char.toLowerCase();\n    } else {\n      char = char.toUpperCase();\n    }\n    if (vowels.includes(char.toUpperCase())) {\n      let curIdx = vowelIdx[char.toUpperCase()];\n      char = vowels[(curIdx + 2) % 5];\n    }\n    encoded += char;\n  }\n  return encoded;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpfaxuqb1e.js:39:12)\n    at Object.<anonymous> (/tmp/tmpfaxuqb1e.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    // We need to go through each letter of the message, change its case, and replace the vowels.\n    let encodedMessage: string = \"\";\n    for (let i = 0; i < message.length; i++) {\n        if (message[i] == message[i].toUpperCase()) {\n            encodedMessage += message[i].toLowerCase();\n        } else {\n            encodedMessage += message[i].toUpperCase();\n        }\n        if (\"aeiou\".includes(encodedMessage[i])) {\n            encodedMessage = encodedMessage.replace(encodedMessage[i], \"fghjklmnpqrstvwxyz\".charAt(\"aeiou\".indexOf(encodedMessage[i]) + 2));\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tjst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpjih75efg.js:30:12)\n    at Object.<anonymous> (/tmp/tmpjih75efg.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tjst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    // Your code here\n    var result : string = \"\";\n    for (var i = 0; i < message.length; i++) {\n        var ascii = message.charCodeAt(i);\n        if (ascii <= 90 && ascii >= 65) {\n            result += String.fromCharCode(ascii + 32);\n        } else if (ascii <= 122 && ascii >= 97) {\n            result += String.fromCharCode(ascii - 32);\n        } else {\n            result += message[i];\n        }\n    }\n    for (var i = 0; i < result.length; i++) {\n        var ascii = result.charCodeAt(i);\n        if (ascii === 97 || ascii === 101 || ascii === 105 || ascii === 111 || ascii === 117) {\n            result = result.substring(0, i) + String.fromCharCode(ascii + 4) + result.substring(i + 1);\n        }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tist'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp8vnqklra.js:37:12)\n    at Object.<anonymous> (/tmp/tmp8vnqklra.js:43:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tist',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 2,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    var alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    var encodedMsg = ''\n    var i: number\n\n    for (i = 0; i < message.length; i++) {\n        if (message[i] == message[i].toUpperCase()) {\n            var encodedChar: string = ''\n            if (isVowel(message[i].toLowerCase())) {\n                encodedChar = alphabet[(alphabet.indexOf(message[i].toLowerCase()) + 2) % 26].toUpperCase()\n            } else {\n                encodedChar = alphabet[(alphabet.indexOf(message[i].toLowerCase()) + 2) % 26].toUpperCase()\n            }\n            encodedMsg += encodedChar\n        } else {\n            var encodedChar: string = ''\n            if (isVowel(message[i])) {\n                encodedChar = alphabet[(alphabet.indexOf(message[i]) + 2) % 26]\n            } else {\n                encodedChar = alphabet[(alphabet.indexOf(message[i]) + 2) % 26]\n            }\n            encodedMsg += encodedChar\n        }\n    }\n    return encodedMsg\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "SyntaxError",
      "stderr": "",
      "stdout": "../../../../tmp/tmphlrlngmz.ts(19,17): error TS2304: Cannot find name 'isVowel'.\n../../../../tmp/tmphlrlngmz.ts(27,17): error TS2304: Cannot find name 'isVowel'.\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    const vowels = 'aeiou';\n    let newMessage = '';\n    for (let i = 0; i < message.length; i++) {\n        const letter = message[i];\n        if (vowels.includes(letter)) {\n            const index = vowels.indexOf(letter);\n            const newIndex = (index + 2) % vowels.length;\n            newMessage += vowels[newIndex];\n        } else {\n            if (letter === letter.toUpperCase()) {\n                newMessage += letter.toLowerCase();\n            } else {\n                newMessage += letter.toUpperCase();\n            }\n        }\n    }\n    return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'test'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpdzwre3oy.js:35:12)\n    at Object.<anonymous> (/tmp/tmpdzwre3oy.js:41:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'test',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  const vowels = 'aeiou';\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let result = \"\";\n  for (let i = 0; i < message.length; i++) {\n    const char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      const index = (alphabet.indexOf(char.toLowerCase()) + 2) % 26;\n      result += alphabet[index];\n    } else if (alphabet.includes(char.toLowerCase())) {\n      result += char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'mwDcSkR'\n\nshould loosely deep-equal\n\n'mWDCSKR'\n    at test (/tmp/tmpkepyq_co.js:34:12)\n    at Object.<anonymous> (/tmp/tmpkepyq_co.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'mwDcSkR',\n  expected: 'mWDCSKR',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  let vowels = 'aeiou';\n  let len = message.length;\n  let newMessage = '';\n  for (let i = 0; i < len; i++) {\n    let char = message[i];\n    if (vowels.includes(char.toLowerCase())) {\n      char = char.toLowerCase();\n      let newIndex = (vowels.indexOf(char) + 2) % 5;\n      newMessage += vowels[newIndex].toUpperCase();\n    } else {\n      newMessage += char.toUpperCase();\n    }\n  }\n  return newMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmp61f6161t.js:31:12)\n    at Object.<anonymous> (/tmp/tmp61f6161t.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let vowel_list: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let upper_vowel_list: string[] = ['A', 'E', 'I', 'O', 'U'];\n    let new_message: string = \"\";\n    for (let letter of message) {\n        let index: number = vowel_list.indexOf(letter);\n        let upper_index: number = upper_vowel_list.indexOf(letter);\n        if (index != -1) {\n            let new_index: number = (index + 2) % 5;\n            new_message += vowel_list[new_index];\n        } else if (upper_index != -1) {\n            let new_index: number = (upper_index + 2) % 5;\n            new_message += upper_vowel_list[new_index];\n        } else if (letter === letter.toUpperCase()) {\n            new_message += letter.toLowerCase();\n        } else {\n            new_message += letter.toUpperCase();\n        }\n    }\n    return new_message;\n}\nconsole.log(encode('This is a message'));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tOst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmppmv8qnel.js:39:12)\n    at Object.<anonymous> (/tmp/tmppmv8qnel.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tOst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "tHuS uS i MoSSiGo\n",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    let vowels:string[] = ['a','e','i','o','u'];\n    let encodedMessage:string = '';\n    for(let i = 0; i < message.length; i++){\n        if(vowels.includes(message[i].toLowerCase())){\n            let letter:string = message[i].toLowerCase();\n            let offset:number = (vowels.indexOf(letter) + 2) % vowels.length;\n            encodedMessage += vowels[offset];\n        }\n        else{\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'ToST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpf5paqgrj.js:29:12)\n    at Object.<anonymous> (/tmp/tmpf5paqgrj.js:35:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'ToST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  const vowels = 'aeiouAEIOU';\n  let answer = '';\n  for (let i = 0; i < message.length; i++) {\n    if (vowels.includes(message[i])) {\n      const newIndex = vowels.indexOf(message[i]) + 2;\n      answer += vowels[newIndex];\n    } else {\n      answer += message[i];\n    }\n  }\n  return answer;\n}\n\nencode('test');\nencode('This is a message');\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TOST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpey3piqqp.js:30:12)\n    at Object.<anonymous> (/tmp/tmpey3piqqp.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TOST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n    const alphabet: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    const vowels: string[] = ['a', 'e', 'i', 'o', 'u'];\n    let encodedMessage: string = '';\n    for (let i: number = 0; i < message.length; i++) {\n        if (vowels.includes(message[i].toLowerCase())) {\n            let indexOfVowel: number = alphabet.indexOf(message[i].toLowerCase());\n            let vowel: string = alphabet[indexOfVowel + 2];\n            encodedMessage += vowel;\n        } else {\n            encodedMessage += message[i];\n        }\n    }\n    return encodedMessage;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'TgST'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpx8kqzfe3.js:30:12)\n    at Object.<anonymous> (/tmp/tmpx8kqzfe3.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'TgST',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    },
    {
      "exit_code": 1,
      "program": "//Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode('test')\n// 'TGST'\n// >>> encode('This is a message')\n// 'tHKS KS C MGSSCGG'\nfunction encode(message: string): string {\n  const VOWELS = ['a', 'e', 'i', 'o', 'u'];\n  const ALPHABET = 'abcdefghijklmnopqrstuvwxyz';\n  const ALPHABET_ARR = ALPHABET.split('');\n  const messageArr = message.split('');\n  return messageArr.map(char => {\n    if(VOWELS.includes(char.toLowerCase())) {\n      const index = ALPHABET_ARR.indexOf(char.toLowerCase());\n      const newIndex = (index + 2) % 26;\n      return char === char.toLowerCase() ? ALPHABET_ARR[newIndex] : ALPHABET_ARR[newIndex].toUpperCase();\n    }\n    return char === char.toLowerCase() ? char.toUpperCase() : char.toLowerCase();\n  }).join('');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = encode;\n  assert.deepEqual(candidate(\"TEST\"),\"tgst\");\n  assert.deepEqual(candidate(\"Mudasir\"),\"mWDCSKR\");\n  assert.deepEqual(candidate(\"YES\"),\"ygs\");\n  assert.deepEqual(candidate(\"This is a message\"),\"tHKS KS C MGSSCGG\");\n  assert.deepEqual(candidate(\"I DoNt KnOw WhAt tO WrItE\"),\"k dQnT kNqW wHcT Tq wRkTg\");\n}\n\ntest();",
      "status": "AssertionError",
      "stderr": "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'tGst'\n\nshould loosely deep-equal\n\n'tgst'\n    at test (/tmp/tmpqz7u1o9n.js:28:12)\n    at Object.<anonymous> (/tmp/tmpqz7u1o9n.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47 {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'tGst',\n  expected: 'tgst',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n",
      "stdout": "",
      "timestamp": 1660333824
    }
  ]
}