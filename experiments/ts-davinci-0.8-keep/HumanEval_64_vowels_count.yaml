name: HumanEval_64_vowels_count
language: ts
prompt: "//Write a function vowels_count which takes a string representing\n// a word\
  \ as input and returns the number of vowels in the string.\n// Vowels in this case\
  \ are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n// vowel, but only when it is\
  \ at the end of the given word.\n// Example:\n// >>> vowels_count(\"abcde\")\n//\
  \ 2\n// >>> vowels_count(\"ACEDY\")\n// 3\nfunction vowels_count(s: string): number\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = vowels_count;\n  assert.deepEqual(candidate(\"abcde\"\
  ),2);\n  assert.deepEqual(candidate(\"Alone\"),3);\n  assert.deepEqual(candidate(\"\
  key\"),2);\n  assert.deepEqual(candidate(\"bye\"),1);\n  assert.deepEqual(candidate(\"\
  keY\"),2);\n  assert.deepEqual(candidate(\"bYe\"),1);\n  assert.deepEqual(candidate(\"\
  ACEDY\"),3);\n}\n\ntest();"
completions: ["    let vowel_count = 0;\n    let vowel_list = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    for (let i = 0; i < s.length; i++) {\n        if (vowel_list.includes(s[i].toLowerCase()))\
    \ {\n            vowel_count++;\n        }\n    }\n    if (s[s.length - 1].toLowerCase()\
    \ === 'y') {\n        vowel_count++;\n    }\n    return vowel_count;\n}", "  let\
    \ count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (\"aeiouy\".includes(s[i].toLowerCase()))\
    \ {\n      count++;\n    }\n  }\n  return count;\n}\n", "  let vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  let vowelCount = 0;\n  s = s.toLowerCase();\n\
    \  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n  \
    \    vowelCount++;\n    }\n  }\n  return vowelCount;\n}\n", "  const lower_case_s\
    \ = s.toLowerCase();\n  const c = lower_case_s.match(/[aeiouy]/g);\n  return c\
    \ ? c.length : 0;\n}", "    let vowels: string = \"aeiouy\";\n    let count: number\
    \ = 0;\n    for (let i: number = 0; i < s.length; i++) {\n        if (vowels.indexOf(s[i].toLowerCase())\
    \ !== -1) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\
    console.log(vowels_count(\"abcde\"));\nconsole.log(vowels_count(\"ACEDY\"));\n",
  "    return s.match(/[aeiouy]/g).length;\n}\n", "    let count = 0;\n    for (let\
    \ i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i]\
    \ === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n            count++;\n\
    \        }\n    }\n    return count;\n}\nconsole.log(vowels_count(\"abcde\"));\n\
    console.log(vowels_count(\"ACEDY\"));\n", "  const vowels = 'aeiou';\n  let count\
    \ = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i].toLowerCase()))\
    \ {\n      count++;\n    }\n  }\n  if (s[s.length - 1].toLowerCase() === 'y')\
    \ {\n    count++;\n  }\n  return count;\n}\n", "  const vowels = 'aeiou';\n  const\
    \ first_letter = s[0];\n  const last_letter = s[s.length - 1];\n  const vowel_count\
    \ = s.split('').reduce((count, letter) => {\n    if (vowels.includes(letter.toLowerCase()))\
    \ {\n      return count + 1;\n    }\n    return count;\n  }, 0);\n  return vowel_count\
    \ + (first_letter === 'y' || last_letter === 'y' ? 1 : 0);\n}\n", "    let s_lower:\
    \ string = s.toLowerCase();\n    let n: number = 0;\n    for (let i: number =\
    \ 0; i < s_lower.length; i++) {\n        let c: string = s_lower.charAt(i);\n\
    \        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n   \
    \         n++;\n        }\n    }\n    if (s_lower.charAt(s_lower.length - 1) ==\
    \ 'y') {\n        n++;\n    }\n    return n;\n}\n", "  return [...s.toLowerCase()].filter(c\
    \ => 'aeiouy'.includes(c)).length;\n}\n", "    let vowel_list: string[] = \"aeiouAEIOUyY\"\
    ;\n    let count: number = 0;\n    for (let i = 0; i < s.length; i++) {\n    \
    \    if (vowel_list.indexOf(s[i]) !== -1) {\n            count++;\n        }\n\
    \    }\n    return count;\n}\n", "  let v = 'aeiouy';\n  let c = 0;\n  for (let\
    \ i = 0; i < s.length; i++) {\n    if (v.indexOf(s[i].toLowerCase()) !== -1) {\n\
    \      c++;\n    }\n  }\n  return c;\n}\nconsole.log(vowels_count('abcde'));\n\
    console.log(vowels_count('ACEDY'));\nconsole.log(vowels_count('acbdy'));", " \
    \   const vowels = ['a', 'e', 'i', 'o', 'u'];\n    return s.split('').reduce((acc,\
    \ c) => {\n        if (vowels.includes(c.toLowerCase())) {\n            return\
    \ acc + 1;\n        }\n        return acc;\n    }, 0);\n}\n\nexport {\n    is_empty,\
    \ is_palindrome,\n    square_list, vowels_count\n};", "    let vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    let count = 0;\n    for (let i = 0; i < s.length;\
    \ i++) {\n        if (vowels.includes(s[i].toLowerCase())) {\n            count++;\n\
    \        }\n    }\n    return count;\n}\n", "    let vowel_count = 0;\n    const\
    \ word = s.toLowerCase();\n    for (let i = 0; i < word.length; i++) {\n     \
    \   if (word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o'\
    \ || word[i] === 'u') {\n            vowel_count++;\n        }\n    }\n    return\
    \ vowel_count;\n}\n", "    return 0;\n}\n", "    if (s.length == 0) {\n      \
    \  return 0;\n    }\n    let n: number = vowels_count(s.substring(1));\n    let\
    \ c: string = s.charAt(0);\n    if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u' || (c == 'y' && s.length == 1)) {\n        n = n + 1;\n    }\n \
    \   return n;\n}\n", "    return s.toLowerCase().split('').filter(i => ['a', 'e',\
    \ 'i', 'o', 'u'].includes(i)).length;\n}\n", "    let vowel_count = 0;\n    //let\
    \ new_str: string = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if\
    \ (s[i] == \"a\" || s[i] == \"e\" || s[i] == \"i\" || s[i] == \"o\" || s[i] ==\
    \ \"u\" || s[i] == \"y\") {\n            vowel_count++;\n        }\n    }\n  \
    \  return vowel_count;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
