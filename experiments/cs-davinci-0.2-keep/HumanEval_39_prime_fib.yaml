name: HumanEval_39_prime_fib
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // prime_fib returns n-th number that is a Fibonacci number and\
  \ it's also prime.\n    // >>> prime_fib(1)\n    // 2\n    // >>> prime_fib(2)\n\
  \    // 3\n    // >>> prime_fib(3)\n    // 5\n    // >>> prime_fib(4)\n    // 13\n\
  \    // >>> prime_fib(5)\n    // 89\n    public static long PrimeFib(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeFib((1L))\
  \ == (2L));\n    Debug.Assert(PrimeFib((2L)) == (3L));\n    Debug.Assert(PrimeFib((3L))\
  \ == (5L));\n    Debug.Assert(PrimeFib((4L)) == (13L));\n    Debug.Assert(PrimeFib((5L))\
  \ == (89L));\n    Debug.Assert(PrimeFib((6L)) == (233L));\n    Debug.Assert(PrimeFib((7L))\
  \ == (1597L));\n    Debug.Assert(PrimeFib((8L)) == (28657L));\n    Debug.Assert(PrimeFib((9L))\
  \ == (514229L));\n    Debug.Assert(PrimeFib((10L)) == (433494437L));\n    }\n\n\
  }\n"
completions: ["        long a = 2;\n        long b = 3;\n        long c = 5;\n   \
    \     long i = 3;\n        while (i < n) {\n            a = b;\n            b\
    \ = c;\n            c = a + b;\n            if (IsPrime(c)) {\n              \
    \  i++;\n            }\n        }\n        return c;", "        long a = 2;\n\
    \        long b = 3;\n        long c = 5;\n        long i = 3;\n        while\
    \ (i < n) {\n            a = b;\n            b = c;\n            c = a + b;\n\
    \            if (IsPrime(c)) {\n                i++;\n            }\n        }\n\
    \        return c;", "        long a = 2;\n        long b = 3;\n        long c\
    \ = 5;\n        long i = 3;\n        while (i < n) {\n            a = b;\n   \
    \         b = c;\n            c = a + b;\n            if (IsPrime(c)) {\n    \
    \            i++;\n            }\n        }\n        return c;", "        var\
    \ fib = new Fibonacci();\n        long i = 0;\n        foreach (var f in fib)\
    \ {\n            if (IsPrime(f)) {\n                i++;\n                if (i\
    \ == n) {\n                    return f;\n                }\n            }\n \
    \       }\n        return 0;", "        long a = 2;\n        long b = 3;\n   \
    \     long c = 5;\n        long i = 3;\n        while (i < n) {\n            a\
    \ = b;\n            b = c;\n            c = a + b;\n            if (IsPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long[] fibs = new long[100];\n        fibs[0] = 1;\n        fibs[1] = 1;\n\
    \        long i = 1;\n        long j = 2;\n        while (i < n) {\n         \
    \   if (IsPrime(fibs[j - 1])) {\n                i++;\n            }\n       \
    \     j++;\n            fibs[j - 1] = fibs[j - 2] + fibs[j - 3];\n        }\n\
    \        return fibs[j - 1];", "        long a = 2;\n        long b = 3;\n   \
    \     long c = 5;\n        long i = 3;\n        while (i < n) {\n            a\
    \ = b;\n            b = c;\n            c = a + b;\n            if (IsPrime(c))\
    \ {\n                i += 1;\n            }\n        }\n        return c;", " \
    \       long i = 1;\n        long j = 1;\n        long k = 0;\n        long count\
    \ = 0;\n        while (count < n) {\n            k = i + j;\n            i = j;\n\
    \            j = k;\n            if (IsPrime(k)) {\n                count++;\n\
    \            }\n        }\n        return k;", "        long a = 2;\n        long\
    \ b = 3;\n        long c = 5;\n        long i = 3;\n        while (i < n) {\n\
    \            a = b;\n            b = c;\n            c = a + b;\n            if\
    \ (IsPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 2;\n        long b = 3;\n        long c = 5;\n      \
    \  long i = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n\
    \            c = a + b;\n            if (IsPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long i = 1;\n        long\
    \ j = 1;\n        long k = 1;\n        while (n > 0) {\n            if (IsPrime(j))\
    \ {\n                n -= 1;\n                k = j;\n            }\n        \
    \    long t = i + j;\n            i = j;\n            j = t;\n        }\n    \
    \    return k;", "        long i = 1;\n        long f = 1;\n        long p = 1;\n\
    \        while (i < n) {\n            f = f + p;\n            p = f - p;\n   \
    \         if (IsPrime(f)) {\n                i = i + 1;\n            }\n     \
    \   }\n        return f;", "        long a = 2;\n        long b = 3;\n       \
    \ long c = 5;\n        long i = 3;\n        while (i < n) {\n            a = b;\n\
    \            b = c;\n            c = a + b;\n            if (IsPrime(c)) {\n \
    \               i++;\n            }\n        }\n        return c;", "        long\
    \ a = 2;\n        long b = 3;\n        long c = 5;\n        long i = 3;\n    \
    \    while (i < n) {\n            a = b;\n            b = c;\n            c =\
    \ a + b;\n            if (IsPrime(c)) {\n                i++;\n            }\n\
    \        }\n        return c;", "        long a = 2;\n        long b = 3;\n  \
    \      long c = 5;\n        long i = 3;\n        while (i < n) {\n           \
    \ a = b;\n            b = c;\n            c = a + b;\n            if (IsPrime(c))\
    \ {\n                i++;\n            }\n        }\n        return c;", "   \
    \     long a = 2;\n        long b = 3;\n        long c = 5;\n        long i =\
    \ 3;\n        while (i < n) {\n            a = b;\n            b = c;\n      \
    \      c = a + b;\n            if (IsPrime(c)) {\n                i += 1;\n  \
    \          }\n        }\n        return c;", "        long a = 2;\n        long\
    \ b = 3;\n        long c = 5;\n        long i = 3;\n        while (i < n) {\n\
    \            a = b;\n            b = c;\n            c = a + b;\n            if\
    \ (IsPrime(c)) {\n                i++;\n            }\n        }\n        return\
    \ c;", "        long a = 2;\n        long b = 3;\n        long c = 5;\n      \
    \  long i = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n\
    \            c = a + b;\n            if (IsPrime(c)) {\n                i++;\n\
    \            }\n        }\n        return c;", "        long i = 1;\n        long\
    \ f = 1;\n        long p = 2;\n        while (n > 0) {\n            f = f + p;\n\
    \            p = f - p;\n            i = i + 1;\n            if (IsPrime(f)) {\n\
    \                n = n - 1;\n            }\n        }\n        return f;", " \
    \       long a = 2;\n        long b = 3;\n        long c = 5;\n        long i\
    \ = 3;\n        while (i < n) {\n            a = b;\n            b = c;\n    \
    \        c = a + b;\n            if (IsPrime(c)) {\n                i++;\n   \
    \         }\n        }\n        return c;"]
stop_tokens:
- "\n    }\n"
