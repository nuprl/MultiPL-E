language: cs
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !\"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f7bbc28a0e9465998de3334baaec31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f7bbc28a0e9465998de3334baaec31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ words_in_s = s.Split(' ');\n        foreach (string word in words_in_s) {\n\
    \            if (CountConsonants(word) == n) {\n                words.Add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pla_hfi.cs(24,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO\n        return null;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <3d6f30c80565455da3f205ee1b50cc6b>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <3d6f30c80565455da3f205ee1b50cc6b>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var letter in word) {\n                if (letter != 'a' &&\
    \ letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n      \
    \              consonants++;\n                }\n            }\n            if\
    \ (consonants == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f4a6a6ab0b5498988fcdcaa622f960c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f4a6a6ab0b5498988fcdcaa622f960c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement the function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <aa2aaf73f9b941229b3e90e3d19d1fa8>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <aa2aaf73f9b941229b3e90e3d19d1fa8>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement me\n        return null;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ae074fff0d704ed69729e752abf29dbb>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ae074fff0d704ed69729e752abf29dbb>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this method\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <4fe15c1655e14105835e89a4671c7e2a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <4fe15c1655e14105835e89a4671c7e2a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var result = new List<string>();\n        var words =\
    \ s.Split(' ');\n        foreach (var word in words) {\n            var consonants\
    \ = 0;\n            foreach (var c in word) {\n                if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string[]\
    \ words = s.Split(' ');\n        foreach (string word in words) {\n          \
    \  if (word.Length == 0) {\n                continue;\n            }\n       \
    \     int consonants = 0;\n            foreach (char c in word) {\n          \
    \      if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n     \
    \               consonants++;\n                }\n            }\n            if\
    \ (consonants == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7301894e99db4dd4b80f30c093f42c7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7301894e99db4dd4b80f30c093f42c7e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff5ff1e272764815afa6572f3808e19b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff5ff1e272764815afa6572f3808e19b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !\"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f7bbc28a0e9465998de3334baaec31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f7bbc28a0e9465998de3334baaec31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d2a2f03ec7fd46579df186d52366d6a1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d2a2f03ec7fd46579df186d52366d6a1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_jsazb99.cs(24,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Write your code here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <a0a220656fba4f298b958125b98aed76>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <a0a220656fba4f298b958125b98aed76>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your solution here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var letter in word) {\n                if (letter != 'a' &&\
    \ letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n      \
    \              consonants++;\n                }\n            }\n            if\
    \ (consonants == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f4a6a6ab0b5498988fcdcaa622f960c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f4a6a6ab0b5498988fcdcaa622f960c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !\"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f7bbc28a0e9465998de3334baaec31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f7bbc28a0e9465998de3334baaec31c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d5e202f04e844890a731a267500afa91>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d5e202f04e844890a731a267500afa91>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var result = new List<string>();\n        var words =\
    \ s.Split(' ');\n        foreach (var word in words) {\n            var consonants\
    \ = 0;\n            foreach (var c in word) {\n                if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this method\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <4fe15c1655e14105835e89a4671c7e2a>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <4fe15c1655e14105835e89a4671c7e2a>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement the function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <e6bcdf77a07946cb9bfa3f8553f227e6>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <e6bcdf77a07946cb9bfa3f8553f227e6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement\n        return null;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <992a9d4b49da494b907b61711ffdc43c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <992a9d4b49da494b907b61711ffdc43c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_jsazb99.cs(24,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string[]\
    \ words = s.Split(' ');\n        foreach (string word in words) {\n          \
    \  if (word.Count(c => \"aeiou\".Contains(c)) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42e36af3037e4ad98f5b7d5f2cdb73fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42e36af3037e4ad98f5b7d5f2cdb73fe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your solution here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ words_array = s.Split(' ');\n        foreach (string word in words_array) {\n\
    \            if (CountConsonants(word) == n) {\n                words.Add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjtl1766.cs(24,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement me!\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <6bbcc8103c6e42cfbd6b376d5d90427c>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <6bbcc8103c6e42cfbd6b376d5d90427c>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d5e202f04e844890a731a267500afa91>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d5e202f04e844890a731a267500afa91>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement the function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <e6bcdf77a07946cb9bfa3f8553f227e6>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <e6bcdf77a07946cb9bfa3f8553f227e6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"bcdfghjklmnpqrstvwxyz\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2e6d62ad7754ec4838002cabd5bf7ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2e6d62ad7754ec4838002cabd5bf7ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var result = new List<string>();\n        var words =\
    \ s.Split(' ');\n        foreach (var word in words) {\n            var consonants\
    \ = 0;\n            foreach (var c in word) {\n                if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"bcdfghjklmnpqrstvwxyz\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2e6d62ad7754ec4838002cabd5bf7ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2e6d62ad7754ec4838002cabd5bf7ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"bcdfghjklmnpqrstvwxyz\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2e6d62ad7754ec4838002cabd5bf7ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2e6d62ad7754ec4838002cabd5bf7ac>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ words_array = s.Split(' ');\n        foreach (string word in words_array) {\n\
    \            if (CountConsonants(word) == n) {\n                words.Add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjtl1766.cs(24,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (!\"aeiou\".Contains(c))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.Add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3253e1e9a75408da767e645757ab0bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3253e1e9a75408da767e645757ab0bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f10852cba44f638a70215f62825205>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0f10852cba44f638a70215f62825205>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ wordsInString = s.Split(' ');\n        foreach (string word in wordsInString)\
    \ {\n            if (CountConsonants(word) == n) {\n                words.Add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw7id911c.cs(24,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your solution here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var letter in word) {\n                if (!\"aeiou\".Contains(letter))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.Add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1eecea6e82db4f57b9db4bb6567d20df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1eecea6e82db4f57b9db4bb6567d20df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = word.Where(c\
    \ => \"bcdfghjklmnpqrstvwxyz\".Contains(c));\n            if (consonants.Count()\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <732aba4654ae4c68a44b07ac00fc0d4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <732aba4654ae4c68a44b07ac00fc0d4d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ words_array = s.Split(' ');\n        foreach (string word in words_array) {\n\
    \            if (CountConsonants(word) == n) {\n                words.Add(word);\n\
    \            }\n        }\n        return words;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprjtl1766.cs(24,17): error CS0103: The name ''CountConsonants'' does not
    exist in the current context

    '
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your solution here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => c != 'a'\
    \ && c != 'e' && c != 'i' && c != 'o' && c != 'u') == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1540ea043ac4e5699e26c9cadfbf84a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function.\n        // Hint: You\
    \ may find the following functions useful:\n        // string.Split(char[])\n\
    \        // string.Contains(char)\n        // string.ToLower()\n        // string.ToCharArray()\n\
    \        // Array.IndexOf(char[], char)\n        // Array.Sort(char[])\n     \
    \   // Array.BinarySearch(char[], char)\n        // Array.ConvertAll(string[],\
    \ Func<string, T>)\n        // List<T>.Add(T)\n        // List<T>.ToArray()\n\
    \        return null;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new\
    \ string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\"\
    , (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d6b22d8cff044f82a2a043a11e03a3e2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d6b22d8cff044f82a2a043a11e03a3e2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string[]\
    \ words = s.Split(' ');\n        foreach (string word in words) {\n          \
    \  if (word.Length == 0) {\n                continue;\n            }\n       \
    \     long count = 0;\n            foreach (char c in word) {\n              \
    \  if (c != 'a' && c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc30af69573d4ef1ac9ee013769cc985>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fc30af69573d4ef1ac9ee013769cc985>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_jsazb99.cs(24,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var ch in word) {\n                if (ch != 'a' && ch != 'e'\
    \ && ch != 'i' && ch != 'o' && ch != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de95b9ea56444256b4037b99d8f5ea3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de95b9ea56444256b4037b99d8f5ea3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ wordsArray = s.Split(' ');\n        foreach (string word in wordsArray) {\n\
    \            if (word.Length == n) {\n                words.Add(word);\n     \
    \       }\n        }\n        return words;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2732d2cc11684eb5be4d2feec78666e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2732d2cc11684eb5be4d2feec78666e9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_jsazb99.cs(24,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d5e202f04e844890a731a267500afa91>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d5e202f04e844890a731a267500afa91>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ wordsInString = s.Split(' ');\n        foreach (string word in wordsInString)\
    \ {\n            int consonants = 0;\n            for (int i = 0; i < word.Length;\
    \ i++) {\n                if (word[i] != 'a' && word[i] != 'e' && word[i] != 'i'\
    \ && word[i] != 'o' && word[i] != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          words.Add(word);\n            }\n        }\n        return words;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f50be24a56144d35a46d0ebec98c26f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f50be24a56144d35a46d0ebec98c26f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d5e202f04e844890a731a267500afa91>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d5e202f04e844890a731a267500afa91>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return new List<string>();\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6327b348a62044d1b39ea6f662b2884e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6327b348a62044d1b39ea6f662b2884e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d5e202f04e844890a731a267500afa91>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d5e202f04e844890a731a267500afa91>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d5e202f04e844890a731a267500afa91>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d5e202f04e844890a731a267500afa91>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Write your code here\n        return new List<string>();\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff5ff1e272764815afa6572f3808e19b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff5ff1e272764815afa6572f3808e19b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var consonants = new\
    \ HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'z' };\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var count = 0;\n         \
    \   foreach (var c in word) {\n                if (consonants.Contains(c)) {\n\
    \                    count++;\n                }\n            }\n            if\
    \ (count == n) {\n                result.Add(word);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76eac9aa2cf046efabf1d8c6f8165702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76eac9aa2cf046efabf1d8c6f8165702>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !IsVowel(c))\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_jsazb99.cs(24,34): error CS0103: The name ''IsVowel'' does not exist
    in the current context

    '
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = word.Where(c\
    \ => !\"aeiou\".Contains(c)).Count();\n            if (consonants == n) {\n  \
    \              result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6aebc92b144c493ab7954d503d9c9280>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6aebc92b144c493ab7954d503d9c9280>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = word.Where(c\
    \ => \"bcdfghjklmnpqrstvwxyz\".Contains(c)).Count();\n            if (consonants\
    \ == n) {\n                result.Add(word);\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fa68e9d0a524cf6bdfb43420d25dd1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6fa68e9d0a524cf6bdfb43420d25dd1b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var result = new List<string>();\n        var words =\
    \ s.Split(' ');\n        foreach (var word in words) {\n            var consonants\
    \ = 0;\n            foreach (var c in word) {\n                if (c != 'a' &&\
    \ c != 'e' && c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d382993ae1c4ff8a383bfae76599a26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement the function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <e6bcdf77a07946cb9bfa3f8553f227e6>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <e6bcdf77a07946cb9bfa3f8553f227e6>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var letter in word) {\n                if (!\"aeiou\".Contains(letter))\
    \ {\n                    consonants++;\n                }\n            }\n   \
    \         if (consonants == n) {\n                result.Add(word);\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1eecea6e82db4f57b9db4bb6567d20df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1eecea6e82db4f57b9db4bb6567d20df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Implement your solution here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <1660588a647c4e9ca3195a0bf32fa6f7>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> words = new List<string>();\n        string[]\
    \ words_array = s.Split(' ');\n        foreach (string word in words_array) {\n\
    \            if (word.Count(c => c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') == n) {\n                words.Add(word);\n            }\n    \
    \    }\n        return words;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b6607c31c474398a9fe565cb98f3b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b6607c31c474398a9fe565cb98f3b38>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805181
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement the function here\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <c2e78f02ec1646fe8d4934474b6a541f>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <c2e78f02ec1646fe8d4934474b6a541f>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var letter in word) {\n                if (letter != 'a' &&\
    \ letter != 'e' && letter != 'i' && letter != 'o' && letter != 'u') {\n      \
    \              consonants++;\n                }\n            }\n            if\
    \ (consonants == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f4a6a6ab0b5498988fcdcaa622f960c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f4a6a6ab0b5498988fcdcaa622f960c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string[]\
    \ words = s.Split(' ');\n        foreach (string word in words) {\n          \
    \  if (word.Count(c => \"aeiouAEIOU\".Contains(c)) == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63e3701d7fb54f838bbdade32199c6e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63e3701d7fb54f838bbdade32199c6e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var c in word) {\n                if (c != 'a' && c != 'e' &&\
    \ c != 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n   \
    \             }\n            }\n            if (consonants == n) {\n         \
    \       result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76018b81e07f4be7999b271b9c2698d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d00d7ac9dd424dea8411417f13e1d1ae>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var result = new List<string>();\n        var words =\
    \ s.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);\n      \
    \  foreach (var word in words) {\n            var consonants = 0;\n          \
    \  foreach (var c in word) {\n                if (c != 'a' && c != 'e' && c !=\
    \ 'i' && c != 'o' && c != 'u') {\n                    consonants++;\n        \
    \        }\n            }\n            if (consonants == n) {\n              \
    \  result.Add(word);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f6f6084b6f949038c83d03701c8dc21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f6f6084b6f949038c83d03701c8dc21>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => \"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65f401eb55b04891901d4d31aee1d6e5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        return null;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <d2a2f03ec7fd46579df186d52366d6a1>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <d2a2f03ec7fd46579df186d52366d6a1>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: Implement your solution here\n        return\
    \ null;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <bf96856a786d434b966a964a10b961bf>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <bf96856a786d434b966a964a10b961bf>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // Your code goes here\n        return null;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ef2cdda5eacd4c23b7bda8a862dc4d21>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ef2cdda5eacd4c23b7bda8a862dc4d21>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805180
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            var consonants = 0;\n    \
    \        foreach (var ch in word) {\n                if (ch != 'a' && ch != 'e'\
    \ && ch != 'i' && ch != 'o' && ch != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de95b9ea56444256b4037b99d8f5ea3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de95b9ea56444256b4037b99d8f5ea3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805180
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
    , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==>\
    \ [\"Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n\
    \    // select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"\
    Uncle sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        // TODO: implement this function\n        return null;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00020] in <ea878f791b7a4eb99fa78731a0a43e29>:0\
    \ \n"
  stdout: ''
  timestamp: 1659805179
