name: HumanEval_114_minSubArraySum
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array of integers nums, find the minimum sum of any\
  \ non-empty sub-array\n    // of nums.\n    // Example\n    // minSubArraySum([2,\
  \ 3, 4, 1, 2, 4]) == 1\n    // minSubArraySum([-1, -2, -3]) == -6\n    public static\
  \ long Minsubarraysum(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)1L, (long)2L, (long)4L})))\
  \ == (1L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-1L,\
  \ (long)-2L, (long)-3L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)-1L, (long)-2L, (long)-3L, (long)2L, (long)-10L}))) == (-14L));\n\
  \    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)-9999999999999999L})))\
  \ == (-9999999999999999L));\n    Debug.Assert(Minsubarraysum((new List<long>(new\
  \ long[]{(long)0L, (long)10L, (long)20L, (long)1000000L}))) == (0L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L})))\
  \ == (-6L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-1L, (long)-2L, (long)-3L, (long)10L, (long)-5L}))) == (-6L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)10L, (long)11L, (long)13L, (long)8L, (long)3L, (long)4L})))\
  \ == (3L));\n    Debug.Assert(Minsubarraysum((new List<long>(new long[]{(long)100L,\
  \ (long)-33L, (long)32L, (long)-1L, (long)0L, (long)-2L}))) == (-33L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)-10L}))) == (-10L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)7L}))) == (7L));\n    Debug.Assert(Minsubarraysum((new\
  \ List<long>(new long[]{(long)1L, (long)-1L}))) == (-1L));\n    }\n\n}\n"
completions: ["        long min = nums[0];\n        long sum = 0;\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min;",
  "        long minSum = long.MaxValue;\n        long sum = 0;\n        for (int i\
    \ = 0; i < nums.Count; i++) {\n            sum += nums[i];\n            minSum\
    \ = Math.Min(minSum, sum);\n            if (sum > 0) {\n                sum =\
    \ 0;\n            }\n        }\n        return minSum;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long min = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            if (sum < min) {\n                min = sum;\n\
    \            }\n            if (sum > 0) {\n                sum = 0;\n       \
    \     }\n        }\n        return min;", "        long minSum = long.MaxValue;\n\
    \        long sum = 0;\n        for (int i = 0; i < nums.Count; i++) {\n     \
    \       sum += nums[i];\n            minSum = Math.Min(minSum, sum);\n       \
    \     if (sum > 0) {\n                sum = 0;\n            }\n        }\n   \
    \     return minSum;", "        long minSum = long.MaxValue;\n        long sum\
    \ = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n\
    \            minSum = Math.Min(minSum, sum);\n            if (sum > 0) {\n   \
    \             sum = 0;\n            }\n        }\n        return minSum;", " \
    \       long minSum = long.MaxValue;\n        long sum = 0;\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n            minSum\
    \ = Math.Min(minSum, sum);\n            if (sum > 0) {\n                sum =\
    \ 0;\n            }\n        }\n        return minSum;", "        // TODO: Implement\n\
    \        return 0;", "        long min = nums[0];\n        long sum = 0;\n   \
    \     for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n  \
    \          if (sum < min) {\n                min = sum;\n            }\n     \
    \       if (sum > 0) {\n                sum = 0;\n            }\n        }\n \
    \       return min;", "        long minSum = long.MaxValue;\n        long sum\
    \ = 0;\n        for (int i = 0; i < nums.Count; i++) {\n            sum += nums[i];\n\
    \            minSum = Math.Min(minSum, sum);\n            if (sum > 0) {\n   \
    \             sum = 0;\n            }\n        }\n        return minSum;", " \
    \       long min = long.MaxValue;\n        long sum = 0;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min;",
  "        long min = long.MaxValue;\n        long sum = 0;\n        for (int i =\
    \ 0; i < nums.Count; i++) {\n            sum += nums[i];\n            if (sum\
    \ < min) {\n                min = sum;\n            }\n            if (sum > 0)\
    \ {\n                sum = 0;\n            }\n        }\n        return min;"]
stop_tokens:
- "\n    }\n"
