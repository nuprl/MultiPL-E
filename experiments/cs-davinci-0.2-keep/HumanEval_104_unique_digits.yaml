name: HumanEval_104_unique_digits
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of positive integers x. return a sorted list of\
  \ all \n    // elements that hasn't any even digit.\n    // Note: Returned list\
  \ should be sorted in increasing order.\n    // For example:\n    // >>> unique_digits([15,\
  \ 33, 1422, 1])\n    // [1, 15, 33]\n    // >>> unique_digits([152, 323, 1422, 10])\n\
  \    // []\n    public static List<long> UniqueDigits(List<long> x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)15L, (long)33L, (long)1422L, (long)1L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)15L, (long)33L}))));\n    Debug.Assert(UniqueDigits((new\
  \ List<long>(new long[]{(long)152L, (long)323L, (long)1422L, (long)10L}))).Equals((new\
  \ List<long>())));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)12345L,\
  \ (long)2033L, (long)111L, (long)151L}))).Equals((new List<long>(new long[]{(long)111L,\
  \ (long)151L}))));\n    Debug.Assert(UniqueDigits((new List<long>(new long[]{(long)135L,\
  \ (long)103L, (long)31L}))).Equals((new List<long>(new long[]{(long)31L, (long)135L}))));\n\
  \    }\n\n}\n"
completions: ["        var result = new List<long>();\n        foreach (var item in\
    \ x) {\n            if (item.ToString().Any(c => c % 2 == 0)) {\n            \
    \    continue;\n            }\n            result.Add(item);\n        }\n    \
    \    result.Sort();\n        return result;", "        var result = new List<long>();\n\
    \        foreach (var item in x) {\n            if (item.ToString().Any(c => c\
    \ % 2 == 0)) {\n                continue;\n            }\n            result.Add(item);\n\
    \        }\n        result.Sort();\n        return result;", "        List<long>\
    \ res = new List<long>();\n        foreach (long i in x) {\n            bool flag\
    \ = true;\n            while (i != 0) {\n                if (i % 2 == 0) {\n \
    \                   flag = false;\n                    break;\n              \
    \  }\n                i /= 10;\n            }\n            if (flag) {\n     \
    \           res.Add(i);\n            }\n        }\n        res.Sort();\n     \
    \   return res;", "        List<long> result = new List<long>();\n        foreach\
    \ (long num in x) {\n            if (num.ToString().Any(c => c % 2 == 0)) {\n\
    \                continue;\n            }\n            result.Add(num);\n    \
    \    }\n        result.Sort();\n        return result;", "        List<long> res\
    \ = new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().Any(c\
    \ => c % 2 == 0)) {\n                continue;\n            }\n            res.Add(i);\n\
    \        }\n        res.Sort();\n        return res;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().Any(c\
    \ => c % 2 == 0)) {\n                continue;\n            }\n            result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in x) {\n            if\
    \ (i.ToString().Any(c => c == '2' || c == '4' || c == '6' || c == '8' || c ==\
    \ '0')) {\n                continue;\n            }\n            result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in x) {\n            if\
    \ (i.ToString().Any(c => c % 2 == 0)) {\n                continue;\n         \
    \   }\n            result.Add(i);\n        }\n        result.Sort();\n       \
    \ return result;", "        var result = new List<long>();\n        foreach (var\
    \ item in x) {\n            if (item.ToString().Any(c => c % 2 == 0)) {\n    \
    \            continue;\n            }\n            result.Add(item);\n       \
    \ }\n        result.Sort();\n        return result;", "        List<long> res\
    \ = new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().Any(c\
    \ => c % 2 == 0)) {\n                continue;\n            }\n            res.Add(i);\n\
    \        }\n        res.Sort();\n        return res;", '        return x.Where(n
    => n.ToString().All(c => c % 2 == 1)).ToList();', '        return x.Where(i =>
    i.ToString().All(c => c % 2 == 1)).ToList();', "        List<long> result = new\
    \ List<long>();\n        foreach (long i in x) {\n            if (isUnique(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in x) {\n            if (i.ToString().Any(c => c == '2'\
    \ || c == '4' || c == '6' || c == '8' || c == '0')) {\n                continue;\n\
    \            }\n            result.Add(i);\n        }\n        result.Sort();\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     foreach (long i in x) {\n            if (IsUniqueDigits(i)) {\n        \
    \        result.Add(i);\n            }\n        }\n        result.Sort();\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   foreach (long i in x) {\n            if (i.ToString().Any(c => c % 2 == 0))\
    \ {\n                continue;\n            }\n            result.Add(i);\n  \
    \      }\n        result.Sort();\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in x) {\n            if\
    \ (IsUniqueDigits(i)) {\n                result.Add(i);\n            }\n     \
    \   }\n        result.Sort();\n        return result;", "        List<long> result\
    \ = new List<long>();\n        foreach (long i in x) {\n            if (i.ToString().ToCharArray().Any(c\
    \ => c % 2 == 0)) {\n                continue;\n            }\n            result.Add(i);\n\
    \        }\n        result.Sort();\n        return result;", "        List<long>\
    \ result = new List<long>();\n        foreach (long i in x) {\n            if\
    \ (i.ToString().Any(c => c % 2 == 0)) {\n                continue;\n         \
    \   }\n            result.Add(i);\n        }\n        result.Sort();\n       \
    \ return result;", "        List<long> result = new List<long>();\n        foreach\
    \ (long i in x) {\n            if (i < 10) {\n                result.Add(i);\n\
    \            } else {\n                bool isUnique = true;\n               \
    \ while (i > 0) {\n                    if (i % 2 == 0) {\n                   \
    \     isUnique = false;\n                        break;\n                    }\n\
    \                    i /= 10;\n                }\n                if (isUnique)\
    \ {\n                    result.Add(i);\n                }\n            }\n  \
    \      }\n        result.Sort();\n        return result;"]
stop_tokens:
- "\n    }\n"
