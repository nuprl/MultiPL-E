name: HumanEval_59_largest_prime_factor
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return the largest prime factor of n. Assume n > 1 and is not\
  \ a prime.\n    // >>> largest_prime_factor(13195)\n    // 29\n    // >>> largest_prime_factor(2048)\n\
  \    // 2\n    public static long LargestPrimeFactor(long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestPrimeFactor((15L))\
  \ == (5L));\n    Debug.Assert(LargestPrimeFactor((27L)) == (3L));\n    Debug.Assert(LargestPrimeFactor((63L))\
  \ == (7L));\n    Debug.Assert(LargestPrimeFactor((330L)) == (11L));\n    Debug.Assert(LargestPrimeFactor((13195L))\
  \ == (29L));\n    }\n\n}\n"
completions: ["        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n                i--;\n            }\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long p = 2;\n        while (n % p == 0) {\n\
    \            n /= p;\n        }\n        p = 3;\n        while (n > 1) {\n   \
    \         while (n % p == 0) {\n                n /= p;\n            }\n     \
    \       p += 2;\n        }\n        return p - 2;", "        long largest = 1;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i--;\n   \
    \         }\n        }\n        return largest;", "        long largest = 0;\n\
    \        long factor = 2;\n        while (n > 1) {\n            if (n % factor\
    \ == 0) {\n                largest = factor;\n                n /= factor;\n \
    \               while (n % factor == 0) {\n                    n /= factor;\n\
    \                }\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long factor = 2;\n        long lastFactor = 1;\n       \
    \ while (n > 1) {\n            if (n % factor == 0) {\n                lastFactor\
    \ = factor;\n                n = n / factor;\n                while (n % factor\
    \ == 0) {\n                    n = n / factor;\n                }\n          \
    \  }\n            factor = factor + 1;\n        }\n        return lastFactor;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                while (n %\
    \ i == 0) {\n                    n /= i;\n                }\n            }\n \
    \       }\n        return largest;", "        long largest = 0;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                largest = factor;\n                n /= factor;\n           \
    \ }\n            factor++;\n        }\n        return largest;", "        long\
    \ largest = 0;\n        long i = 2;\n        while (i * i <= n) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n      \
    \      if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        long factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    largest = factor;\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return largest;", "        long largest = 1;\n\
    \        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n\
    \        }\n        for (long i = 3; i <= n; i += 2) {\n            while (n %\
    \ i == 0) {\n                largest = i;\n                n /= i;\n         \
    \   }\n        }\n        return largest;", "        long largest = 0;\n     \
    \   while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n    \
    \    }\n        for (long i = 3; i <= n; i += 2) {\n            while (n % i ==\
    \ 0) {\n                largest = i;\n                n /= i;\n            }\n\
    \        }\n        return largest;", "        long factor = 2;\n        while\
    \ (n > 1) {\n            if (n % factor == 0) {\n                n /= factor;\n\
    \            } else {\n                factor++;\n            }\n        }\n \
    \       return factor;", "        long largest = 0;\n        for (long i = 2;\
    \ i < n; i++) {\n            if (n % i == 0) {\n                if (IsPrime(i))\
    \ {\n                    largest = i;\n                }\n            }\n    \
    \    }\n        return largest;", "        long largest = 0;\n        long i =\
    \ 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n          \
    \      largest = i;\n                n /= i;\n            } else {\n         \
    \       i++;\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largest = factor;\n                n /= factor;\n \
    \           }\n            factor++;\n        }\n        return largest;", " \
    \       long largest = 1;\n        while (n % 2 == 0) {\n            largest =\
    \ 2;\n            n /= 2;\n        }\n        long p = 3;\n        while (p *\
    \ p <= n) {\n            if (n % p == 0) {\n                largest = p;\n   \
    \             n /= p;\n            } else {\n                p += 2;\n       \
    \     }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long largest = 1;\n        long i = 2;\n \
    \       while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > 1) {\n            largest = n;\n  \
    \      }\n        return largest;", "        long largest = 1;\n        long factor\
    \ = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        largest = factor;\n                while (n % factor == 0) {\n      \
    \              n /= factor;\n                }\n            }\n            factor++;\n\
    \        }\n        return largest;", "        long largest = 0;\n        while\
    \ (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n        }\n \
    \       for (long i = 3; i <= Math.Sqrt(n); i += 2) {\n            while (n %\
    \ i == 0) {\n                largest = i;\n                n /= i;\n         \
    \   }\n        }\n        if (n > 2) {\n            largest = n;\n        }\n\
    \        return largest;", "        long largest = 1;\n        for (long i = 2;\
    \ i * i <= n; i++) {\n            if (n % i == 0) {\n                largest =\
    \ i;\n                while (n % i == 0) {\n                    n /= i;\n    \
    \            }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 0;\n    \
    \    long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largest = factor;\n                n /= factor;\n \
    \           }\n            factor++;\n        }\n        return largest;", " \
    \       long largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n     \
    \       if (n % i == 0) {\n                largest = i;\n                while\
    \ (n % i == 0) {\n                    n /= i;\n                }\n           \
    \ }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        long i = 2;\n   \
    \     while (i * i <= n) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n            } else {\n                i++;\n\
    \            }\n        }\n        if (n > 1) {\n            largest = n;\n  \
    \      }\n        return largest;", "        long largest = 0;\n        long i\
    \ = 2;\n        while (i <= n) {\n            if (n % i == 0) {\n            \
    \    largest = i;\n                n /= i;\n            } else {\n           \
    \     i++;\n            }\n        }\n        return largest;", "        long\
    \ largest = 1;\n        long i = 2;\n        while (i * i <= n) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \            } else {\n                i++;\n            }\n        }\n      \
    \  if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        for (long i = 2; i <= n; i++) {\n          \
    \  if (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \                i--;\n            }\n        }\n        return largest;", " \
    \       long largest = 1;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 0;\n        long i = 2;\n        while (i\
    \ * i <= n) {\n            if (n % i == 0) {\n                largest = i;\n \
    \               n /= i;\n            } else {\n                i++;\n        \
    \    }\n        }\n        return Math.Max(largest, n);", "        long largest\
    \ = 1;\n        while (n % 2 == 0) {\n            largest = 2;\n            n\
    \ /= 2;\n        }\n        for (long i = 3; i * i <= n; i += 2) {\n         \
    \   while (n % i == 0) {\n                largest = i;\n                n /= i;\n\
    \            }\n        }\n        if (n > 2) {\n            largest = n;\n  \
    \      }\n        return largest;", "        long largest = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            if (n % i == 0) {\n                largest\
    \ = i;\n                n /= i;\n                i = 1;\n            }\n     \
    \   }\n        return largest;", "        long largest = 1;\n        long factor\
    \ = 2;\n        while (n > 1) {\n            if (n % factor == 0) {\n        \
    \        largest = factor;\n                while (n % factor == 0) {\n      \
    \              n /= factor;\n                }\n            }\n            factor++;\n\
    \        }\n        return largest;", "        long largest = 1;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                largest = factor;\n                n /= factor;\n           \
    \ }\n            factor++;\n        }\n        return largest;", "        long\
    \ largest = 0;\n        long factor = 2;\n        while (n > 1) {\n          \
    \  while (n % factor == 0) {\n                largest = factor;\n            \
    \    n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long p = 2;\n        while (n % p == 0) {\n            n\
    \ /= p;\n        }\n        p = 3;\n        while (n > 1) {\n            while\
    \ (n % p == 0) {\n                n /= p;\n            }\n            p += 2;\n\
    \        }\n        return p - 2;", "        long i = 2;\n        while (i * i\
    \ <= n) {\n            if (n % i == 0) {\n                n /= i;\n          \
    \  } else {\n                i++;\n            }\n        }\n        return n;",
  "        long largest = 1;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 0;\n        long factor = 2;\n        while\
    \ (n > 1) {\n            while (n % factor == 0) {\n                largest =\
    \ factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largest;", "        long p = 2;\n        while (n %\
    \ p == 0) {\n            n /= p;\n        }\n        p = 3;\n        while (n\
    \ > 1) {\n            while (n % p == 0) {\n                n /= p;\n        \
    \    }\n            p += 2;\n        }\n        return p - 2;", "        long\
    \ largest = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n\
    \ % i == 0) {\n                largest = i;\n                while (n % i == 0)\
    \ {\n                    n /= i;\n                }\n            }\n        }\n\
    \        if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long factor = 2;\n        while (n > 1) {\n            if (n % factor ==\
    \ 0) {\n                n /= factor;\n            } else {\n                factor++;\n\
    \            }\n        }\n        return factor;", "        long largest = 0;\n\
    \        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                n /= i;\n                i = 1;\n \
    \           }\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ n /= factor;\n            } else {\n                factor++;\n            }\n\
    \        }\n        return factor;", "        long largest = 0;\n        long\
    \ i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                while (n % i == 0) {\n              \
    \      n /= i;\n                }\n            }\n            i += 1;\n      \
    \  }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n                i = 1;\n            }\n\
    \        }\n        return largest;", "        long largest = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n                i--;\n            }\n\
    \        }\n        return largest;", "        long largest = 1;\n        long\
    \ p = 2;\n        while (n > 1) {\n            while (n % p == 0) {\n        \
    \        largest = p;\n                n /= p;\n            }\n            p++;\n\
    \        }\n        return largest;", "        long largest = 1;\n        long\
    \ i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n      \
    \          largest = i;\n                while (n % i == 0) {\n              \
    \      n /= i;\n                }\n            }\n            i++;\n        }\n\
    \        if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 1;\n        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                largest = factor;\n     \
    \           while (n % factor == 0) {\n                    n /= factor;\n    \
    \            }\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long largest = 1;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 1;\n        for\
    \ (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n           \
    \     largest = i;\n                while (n % i == 0) {\n                   \
    \ n /= i;\n                }\n            }\n        }\n        if (n > 1) {\n\
    \            largest = n;\n        }\n        return largest;", "        // TODO:\
    \ Implement this method.\n        return 0;", "        long largest = 1;\n   \
    \     long d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n\
    \                largest = d;\n                n /= d;\n            }\n      \
    \      d += 1;\n        }\n        return largest;", "        long largest = 1;\n\
    \        while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n\
    \        }\n        for (long i = 3; i <= n; i += 2) {\n            while (n %\
    \ i == 0) {\n                largest = i;\n                n /= i;\n         \
    \   }\n        }\n        return largest;", "        long largest = 1;\n     \
    \   while (n % 2 == 0) {\n            largest = 2;\n            n /= 2;\n    \
    \    }\n        long p = 3;\n        while (p * p <= n) {\n            if (n %\
    \ p == 0) {\n                largest = p;\n                n /= p;\n         \
    \   } else {\n                p += 2;\n            }\n        }\n        if (n\
    \ > largest) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 1;\n        long i = 2;\n        while (i * i <= n) {\n\
    \            if (n % i == 0) {\n                largest = i;\n               \
    \ n /= i;\n            } else {\n                i++;\n            }\n       \
    \ }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long max = 1;\n        for (long i = 2; i * i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                max = i;\n               \
    \ while (n % i == 0) {\n                    n /= i;\n                }\n     \
    \       }\n        }\n        if (n > 1) {\n            max = n;\n        }\n\
    \        return max;", "        long largest = 1;\n        for (long i = 2; i\
    \ * i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n    \
    \            largest = i;\n                while (n % i == 0) {\n            \
    \        n /= i;\n                }\n            }\n        }\n        if (n >\
    \ 1) {\n            largest = n;\n        }\n        return largest;", "     \
    \   long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n   \
    \         while (n % factor == 0) {\n                largest = factor;\n     \
    \           n /= factor;\n            }\n            factor++;\n        }\n  \
    \      return largest;", "        long largest = 0;\n        long factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    largest = factor;\n                n /= factor;\n            }\n        \
    \    factor++;\n        }\n        return largest;", "        long largest = 1;\n\
    \        long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0)\
    \ {\n                largest = i;\n                while (n % i == 0) {\n    \
    \                n /= i;\n                }\n            }\n            i++;\n\
    \        }\n        if (n > 1) {\n            largest = n;\n        }\n      \
    \  return largest;", "        long largest = 1;\n        for (long i = 2; i *\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 0;\n    \
    \    long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n            } else {\n\
    \                i++;\n            }\n        }\n        if (n > 1) {\n      \
    \      largest = n;\n        }\n        return largest;", "        long largest\
    \ = 1;\n        for (long i = 2; i * i <= n; i++) {\n            if (n % i ==\
    \ 0) {\n                largest = i;\n                while (n % i == 0) {\n \
    \                   n /= i;\n                }\n            }\n        }\n   \
    \     if (n > 1) {\n            largest = n;\n        }\n        return largest;",
  "        long largest = 0;\n        long divisor = 2;\n        while (n > 1) {\n\
    \            if (n % divisor == 0) {\n                largest = divisor;\n   \
    \             n /= divisor;\n            } else {\n                divisor++;\n\
    \            }\n        }\n        return largest;", "        long largest = 0;\n\
    \        long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largest = factor;\n                n /= factor;\n \
    \           }\n            factor++;\n        }\n        return largest;", " \
    \       long largest = 0;\n        for (long i = 2; i <= n; i++) {\n         \
    \   if (n % i == 0) {\n                n /= i;\n                largest = i;\n\
    \            }\n        }\n        return largest;", "        long largest = 0;\n\
    \        for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                while (n % i == 0) {\n        \
    \            n /= i;\n                }\n            }\n        }\n        if\
    \ (n > 1) {\n            largest = n;\n        }\n        return largest;", " \
    \       long d = 2;\n        while (n > 1) {\n            while (n % d == 0) {\n\
    \                n /= d;\n            }\n            d++;\n        }\n       \
    \ return d - 1;", "        long largest = 0;\n        for (long i = 2; i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        return largest;", "        long largest\
    \ = 0;\n        for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                i = 1;\n\
    \            }\n        }\n        return largest;", "        long factor = 2;\n\
    \        while (n > 1) {\n            if (n % factor == 0) {\n               \
    \ n /= factor;\n            } else {\n                factor += 1;\n         \
    \   }\n        }\n        return factor;", "        long largest = 0;\n      \
    \  for (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n          \
    \      largest = i;\n                n /= i;\n                i = 1;\n       \
    \     }\n        }\n        return largest;", "        long largest = 1;\n   \
    \     for (long i = 2; i * i <= n; i++) {\n            if (n % i == 0) {\n   \
    \             largest = i;\n                while (n % i == 0) {\n           \
    \         n /= i;\n                }\n            }\n        }\n        if (n\
    \ > 1) {\n            largest = n;\n        }\n        return largest;", "   \
    \     long largestPrimeFactor = 1;\n        long factor = 2;\n        while (n\
    \ > 1) {\n            while (n % factor == 0) {\n                largestPrimeFactor\
    \ = factor;\n                n /= factor;\n            }\n            factor++;\n\
    \        }\n        return largestPrimeFactor;", "        long factor = 2;\n \
    \       while (n > 1) {\n            while (n % factor == 0) {\n             \
    \   n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ factor - 1;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest_prime_factor = 1;\n\
    \        long factor = 2;\n        while (n > 1) {\n            while (n % factor\
    \ == 0) {\n                largest_prime_factor = factor;\n                n /=\
    \ factor;\n            }\n            factor += 1;\n        }\n        return\
    \ largest_prime_factor;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i--;\n            }\n        }\n   \
    \     return largest;", "        long largest = 1;\n        for (long i = 2; i\
    \ * i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                while (n % i == 0) {\n                    n /= i;\n         \
    \       }\n            }\n        }\n        if (n > 1) {\n            largest\
    \ = n;\n        }\n        return largest;", "        long largest = 1;\n    \
    \    long i = 2;\n        while (i * i <= n) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                while (n % i == 0) {\n        \
    \            n /= i;\n                }\n            }\n            i++;\n   \
    \     }\n        if (n > 1) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long factor = 2;\n        while (n > 1) {\n            if\
    \ (n % factor == 0) {\n                n /= factor;\n            } else {\n  \
    \              factor++;\n            }\n        }\n        return factor;", " \
    \       long largest = 0;\n        long factor = 2;\n        while (n > 1) {\n\
    \            while (n % factor == 0) {\n                largest = factor;\n  \
    \              n /= factor;\n            }\n            factor++;\n        }\n\
    \        return largest;", "        long factor = 2;\n        while (n > 1) {\n\
    \            if (n % factor == 0) {\n                n /= factor;\n          \
    \  } else {\n                factor++;\n            }\n        }\n        return\
    \ factor;", "        long largest = 0;\n        long i = 2;\n        while (i\
    \ * i <= n) {\n            if (n % i == 0) {\n                largest = i;\n \
    \               n /= i;\n            } else {\n                i++;\n        \
    \    }\n        }\n        if (n > 1) {\n            largest = n;\n        }\n\
    \        return largest;", "        long largest = 0;\n        for (long i = 2;\
    \ i <= n; i++) {\n            if (n % i == 0) {\n                largest = i;\n\
    \                n /= i;\n                i = 1;\n            }\n        }\n \
    \       return largest;", "        long largest = 0;\n        long limit = (long)Math.Sqrt(n);\n\
    \        for (long i = 2; i <= limit; i++) {\n            if (n % i == 0) {\n\
    \                largest = i;\n                n /= i;\n                limit\
    \ = (long)Math.Sqrt(n);\n                i = 1;\n            }\n        }\n  \
    \      if (n > largest) {\n            largest = n;\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i--;\n            }\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i <= n; i++)\
    \ {\n            if (n % i == 0) {\n                largest = i;\n           \
    \     n /= i;\n                i = 1;\n            }\n        }\n        return\
    \ largest;", "        long largest = 0;\n        for (long i = 2; i * i <= n;\
    \ i++) {\n            if (n % i == 0) {\n                largest = i;\n      \
    \          while (n % i == 0) {\n                    n /= i;\n               \
    \ }\n            }\n        }\n        if (n > 1) {\n            largest = n;\n\
    \        }\n        return largest;", "        long largest = 0;\n        for\
    \ (long i = 2; i <= n; i++) {\n            if (n % i == 0) {\n               \
    \ largest = i;\n                n /= i;\n                i = 1;\n            }\n\
    \        }\n        return largest;", "        long largest = 0;\n        long\
    \ factor = 2;\n        while (n > 1) {\n            while (n % factor == 0) {\n\
    \                largest = factor;\n                n /= factor;\n           \
    \ }\n            factor++;\n        }\n        return largest;", "        long\
    \ largest = 0;\n        long factor = 2;\n        while (n > 1) {\n          \
    \  while (n % factor == 0) {\n                largest = factor;\n            \
    \    n /= factor;\n            }\n            factor++;\n        }\n        return\
    \ largest;", "        long largestPrimeFactor = 1;\n        long factor = 2;\n\
    \        while (n > 1) {\n            while (n % factor == 0) {\n            \
    \    largestPrimeFactor = factor;\n                n /= factor;\n            }\n\
    \            factor++;\n        }\n        return largestPrimeFactor;"]
stop_tokens:
- "\n    }\n"
