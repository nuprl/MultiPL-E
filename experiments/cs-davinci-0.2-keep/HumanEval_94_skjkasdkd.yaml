name: HumanEval_94_skjkasdkd
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // You need to find the\
  \ largest prime value and return the sum of its digits.\n    // Examples:\n    //\
  \ For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should\
  \ be 10\n    // For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should\
  \ be 25\n    // For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the\
  \ output should be 13\n    // For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n    // For lst = [0,81,12,3,1,21] the output should be 3\n\
  \    // For lst = [0,8,1,2,1,7] the output should be 7\n    public static long Skjkasdkd(List<long>\
  \ lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)3L, (long)2L, (long)1L, (long)3L, (long)5L,\
  \ (long)7L, (long)4L, (long)5L, (long)5L, (long)5L, (long)2L, (long)181L, (long)32L,\
  \ (long)4L, (long)32L, (long)3L, (long)2L, (long)32L, (long)324L, (long)4L, (long)3L})))\
  \ == (10L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)0L,\
  \ (long)1L, (long)8L, (long)2L, (long)4597L, (long)2L, (long)1L, (long)3L, (long)40L,\
  \ (long)1L, (long)2L, (long)1L, (long)2L, (long)4L, (long)2L, (long)5L, (long)1L})))\
  \ == (25L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)1L, (long)3L,\
  \ (long)1L, (long)32L, (long)5107L, (long)34L, (long)83278L, (long)109L, (long)163L,\
  \ (long)23L, (long)2323L, (long)32L, (long)30L, (long)1L, (long)9L, (long)3L})))\
  \ == (13L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)724L,\
  \ (long)32L, (long)71L, (long)99L, (long)32L, (long)6L, (long)0L, (long)5L, (long)91L,\
  \ (long)83L, (long)0L, (long)5L, (long)6L}))) == (11L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)0L, (long)81L, (long)12L, (long)3L, (long)1L, (long)21L})))\
  \ == (3L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)0L, (long)8L,\
  \ (long)1L, (long)2L, (long)1L, (long)7L}))) == (7L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L}))) == (19L));\n    Debug.Assert(Skjkasdkd((new\
  \ List<long>(new long[]{(long)8191L, (long)123456L, (long)127L, (long)7L}))) ==\
  \ (19L));\n    Debug.Assert(Skjkasdkd((new List<long>(new long[]{(long)127L, (long)97L,\
  \ (long)8192L}))) == (10L));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return 0;", "        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > max) {\n                    max = i;\n                }\n\
    \            }\n        }\n        return SumDigits(max);", "        // Your code\
    \ goes here.\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        long largestPrime = 0;\n     \
    \   foreach (long num in lst) {\n            if (IsPrime(num)) {\n           \
    \     if (num > largestPrime) {\n                    largestPrime = num;\n   \
    \             }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        long max = lst.Max();\n        long maxPrime = 0;\n        for (long i\
    \ = max; i > 1; i--) {\n            if (IsPrime(i)) {\n                maxPrime\
    \ = i;\n                break;\n            }\n        }\n        return maxPrime.ToString().Select(x\
    \ => long.Parse(x.ToString())).Sum();", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long largestPrime = 0;\n        for (long i =\
    \ max; i > 0; i--) {\n            if (IsPrime(i)) {\n                largestPrime\
    \ = i;\n                break;\n            }\n        }\n        long sum = 0;\n\
    \        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n \
    \           largestPrime /= 10;\n        }\n        return sum;", "        //\
    \ Your code goes here\n        return 0;", "        // Your code goes here.\n\
    \        // You can add more classes and methods.\n        // You can use the\
    \ System.Numerics namespace.\n        // You can use the System.Diagnostics namespace.\n\
    \        // You can use the System.Collections.Generic namespace.\n        //\
    \ You can use the System.Linq namespace.\n        // You can use the System.Text\
    \ namespace.\n        // You can use the System.Security.Cryptography namespace.\n\
    \        return 0;", "        long largestPrime = 0;\n        foreach (long i\
    \ in lst) {\n            if (IsPrime(i)) {\n                if (i > largestPrime)\
    \ {\n                    largestPrime = i;\n                }\n            }\n\
    \        }\n        return SumOfDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long maxPrime = 0;\n        for\
    \ (long i = max; i > 1; i--) {\n            if (IsPrime(i)) {\n              \
    \  maxPrime = i;\n                break;\n            }\n        }\n        long\
    \ sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n\
    \            maxPrime /= 10;\n        }\n        return sum;", "        // Your\
    \ code here\n        return 0;", "        long max = 0;\n        for (int i =\
    \ 0; i < lst.Count; i++) {\n            if (lst[i] > max) {\n                max\
    \ = lst[i];\n            }\n        }\n        long sum = 0;\n        while (max\
    \ > 0) {\n            sum += max % 10;\n            max /= 10;\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long sum = 0;\n        while (max > 0) {\n            sum += max\
    \ % 10;\n            max /= 10;\n        }\n        return sum;", "        //\
    \ Your code goes here.\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > largestPrime)\
    \ {\n                    largestPrime = num;\n                }\n            }\n\
    \        }\n        return SumDigits(largestPrime);", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here\n        return 0;",
  "        long largestPrime = 0;\n        foreach (long num in lst) {\n         \
    \   if (IsPrime(num)) {\n                if (num > largestPrime) {\n         \
    \           largestPrime = num;\n                }\n            }\n        }\n\
    \        return SumDigits(largestPrime);", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long maxPrime = 0;\n        for (long i = max;\
    \ i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n\
    \                break;\n            }\n        }\n        long sum = 0;\n   \
    \     while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        // Your code goes here\n \
    \       return 0;", "        // Your code goes here.\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        long max = 0;\n  \
    \      foreach (long num in lst) {\n            if (IsPrime(num)) {\n        \
    \        if (num > max) {\n                    max = num;\n                }\n\
    \            }\n        }\n        return SumDigits(max);", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code goes here\n      \
    \  return 0;", "        long max = 0;\n        foreach (long i in lst) {\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n\
    \            max /= 10;\n        }\n        return sum;", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                if (num > largestPrime) {\n                    largestPrime =\
    \ num;\n                }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        // Your code goes here\n        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (IsPrime(i)) {\n                if (i > max) {\n \
    \                   max = i;\n                }\n            }\n        }\n  \
    \      return SumOfDigits(max);", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        // Your code\
    \ goes here.\n        return 0;", "        // Your code here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        long largestPrime = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (IsPrime(lst[i])) {\n                if (lst[i] > largestPrime)\
    \ {\n                    largestPrime = lst[i];\n                }\n         \
    \   }\n        }\n        long sum = 0;\n        while (largestPrime > 0) {\n\
    \            sum += largestPrime % 10;\n            largestPrime /= 10;\n    \
    \    }\n        return sum;", "        // Your code goes here.\n        return\
    \ 0;", "        long max = 0;\n        foreach (long i in lst) {\n           \
    \ if (i > max) {\n                max = i;\n            }\n        }\n       \
    \ long maxPrime = 0;\n        for (long i = 2; i <= max; i++) {\n            bool\
    \ isPrime = true;\n            for (long j = 2; j <= Math.Sqrt(i); j++) {\n  \
    \              if (i % j == 0) {\n                    isPrime = false;\n     \
    \               break;\n                }\n            }\n            if (isPrime)\
    \ {\n                maxPrime = i;\n            }\n        }\n        long sum\
    \ = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n  \
    \          maxPrime /= 10;\n        }\n        return sum;", "        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n      \
    \          max = i;\n            }\n        }\n        long maxPrime = 0;\n  \
    \      for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n     \
    \           maxPrime = i;\n                break;\n            }\n        }\n\
    \        long sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime\
    \ % 10;\n            maxPrime /= 10;\n        }\n        return sum;", "     \
    \   // Your code goes here.\n        return 0;", "        long largestPrime =\
    \ 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumOfDigits(max);", "     \
    \   // Your code goes here\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code here\n        return 0;", "        // Your code goes here.\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // Your code goes here.\n        return 0;", "        long largestPrime = 0;\n\
    \        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum\
    \ += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        long max = 0;\n        foreach (long i in lst) {\n           \
    \ if (IsPrime(i)) {\n                if (i > max) {\n                    max =\
    \ i;\n                }\n            }\n        }\n        return SumDigits(max);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum\
    \ += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumDigits(max);", "       \
    \ long max = lst.Max();\n        long sum = 0;\n        for (long i = max; i >\
    \ 1; i--) {\n            if (lst.Contains(i) && IsPrime(i)) {\n              \
    \  sum = i.ToString().Select(x => long.Parse(x.ToString())).Sum();\n         \
    \       break;\n            }\n        }\n        return sum;", "        // Your\
    \ code goes here\n        return 0;", "        long max = lst.Max();\n       \
    \ long sum = 0;\n        while (max > 0) {\n            sum += max % 10;\n   \
    \         max /= 10;\n        }\n        return sum;", "        // Your code goes\
    \ here.\n        return 0;", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                if (num\
    \ > largestPrime) {\n                    largestPrime = num;\n               \
    \ }\n            }\n        }\n        return SumDigits(largestPrime);", "   \
    \     // Your code here\n        return 0;", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        return max;", "        // Your code goes here.\n\
    \        return 0;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long sum = 0;\n        while (max > 0) {\n            sum += max\
    \ % 10;\n            max /= 10;\n        }\n        return sum;", "        //\
    \ Your code here\n        return 0;", "        long largestPrime = 0;\n      \
    \  foreach (long i in lst) {\n            if (IsPrime(i)) {\n                if\
    \ (i > largestPrime) {\n                    largestPrime = i;\n              \
    \  }\n            }\n        }\n        return SumOfDigits(largestPrime);", " \
    \       // Your code goes here\n        return 0;", "        long max = 0;\n \
    \       foreach (long i in lst) {\n            if (i > max) {\n              \
    \  max = i;\n            }\n        }\n        long maxPrime = 0;\n        for\
    \ (long i = 2; i <= max; i++) {\n            bool isPrime = true;\n          \
    \  for (long j = 2; j <= Math.Sqrt(i); j++) {\n                if (i % j == 0)\
    \ {\n                    isPrime = false;\n                    break;\n      \
    \          }\n            }\n            if (isPrime) {\n                maxPrime\
    \ = i;\n            }\n        }\n        long sum = 0;\n        while (maxPrime\
    \ > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n   \
    \     }\n        return sum;", "        // your code here\n        return 0;",
  "        // Your code here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (i > max) {\n                max = i;\n            }\n       \
    \ }\n        long sum = 0;\n        while (max > 0) {\n            sum += max\
    \ % 10;\n            max /= 10;\n        }\n        return sum;", "        long\
    \ max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n\
    \                if (i > max) {\n                    max = i;\n              \
    \  }\n            }\n        }\n        return SumDigits(max);", "        long\
    \ largestPrime = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > largestPrime) {\n                    largestPrime\
    \ = i;\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        // Your code goes here\n        return 0;", "        long max = 0;\n  \
    \      foreach (long i in lst) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        while (true) {\n            if (IsPrime(max))\
    \ {\n                return SumOfDigits(max);\n            }\n            max--;\n\
    \        }", "        // Your code here\n        return 0;", "        // Your\
    \ code goes here\n        return 0;", "        // Your code here\n        return\
    \ 0;", "        // Your code goes here.\n        return 0;", "        // Your\
    \ code goes here.\n        return 0;", "        // Your code goes here\n     \
    \   var primes = new List<long>();\n        foreach (var item in lst) {\n    \
    \        if (IsPrime(item)) {\n                primes.Add(item);\n           \
    \ }\n        }\n        var max = primes.Max();\n        var sum = 0;\n      \
    \  while (max > 0) {\n            sum += (int)(max % 10);\n            max /=\
    \ 10;\n        }\n        return sum;", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n\
    \            }\n        }\n        return SumDigits(max);", "        // your code\
    \ here\n        return 0;", "        // Your code goes here.\n        return 0;",
  "        long max = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num))\
    \ {\n                max = Math.Max(max, num);\n            }\n        }\n   \
    \     return SumDigits(max);", "        long max = 0;\n        foreach (long i\
    \ in lst) {\n            if (i > max) {\n                max = i;\n          \
    \  }\n        }\n        long prime = 0;\n        for (long i = max; i > 0; i--)\
    \ {\n            if (IsPrime(i)) {\n                prime = i;\n             \
    \   break;\n            }\n        }\n        long sum = 0;\n        while (prime\
    \ > 0) {\n            sum += prime % 10;\n            prime /= 10;\n        }\n\
    \        return sum;", "        long max = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > max) {\n                max = i;\n            }\n   \
    \     }\n        long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n\
    \            if (IsPrime(i)) {\n                maxPrime = i;\n              \
    \  break;\n            }\n        }\n        long sum = 0;\n        while (maxPrime\
    \ > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n   \
    \     }\n        return sum;", "        long largestPrime = 0;\n        for (int\
    \ i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i])) {\n         \
    \       if (lst[i] > largestPrime) {\n                    largestPrime = lst[i];\n\
    \                }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        // Your code goes here\n        return 0;", "        long max = 0;\n  \
    \      foreach (long i in lst) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        long maxPrime = 0;\n        for\
    \ (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n              \
    \  maxPrime = i;\n                break;\n            }\n        }\n        long\
    \ sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime % 10;\n\
    \            maxPrime /= 10;\n        }\n        return sum;", "        // Your\
    \ code goes here\n        long max = 0;\n        foreach (long i in lst) {\n \
    \           if (IsPrime(i)) {\n                if (i > max) {\n              \
    \      max = i;\n                }\n            }\n        }\n        return SumDigits(max);",
  "        long result = 0;\n        long max = lst.Max();\n        for (long i =\
    \ max; i > 1; i--) {\n            if (IsPrime(i)) {\n                result =\
    \ i;\n                break;\n            }\n        }\n        return result.ToString().Select(x\
    \ => long.Parse(x.ToString())).Sum();", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long sum = 0;\n        while (max > 0) {\n  \
    \          sum += max % 10;\n            max /= 10;\n        }\n        return\
    \ sum;", "        long max = 0;\n        foreach (long i in lst) {\n         \
    \   if (i > max) {\n                max = i;\n            }\n        }\n     \
    \   long prime = 0;\n        for (long i = max; i > 0; i--) {\n            if\
    \ (IsPrime(i)) {\n                prime = i;\n                break;\n       \
    \     }\n        }\n        long sum = 0;\n        while (prime > 0) {\n     \
    \       sum += prime % 10;\n            prime /= 10;\n        }\n        return\
    \ sum;", "        long result = 0;\n        long max = lst.Max();\n        if\
    \ (max < 2) {\n            return result;\n        }\n        List<long> primes\
    \ = new List<long>();\n        for (long i = 2; i <= max; i++) {\n           \
    \ bool isPrime = true;\n            for (long j = 2; j <= i / 2; j++) {\n    \
    \            if (i % j == 0) {\n                    isPrime = false;\n       \
    \             break;\n                }\n            }\n            if (isPrime)\
    \ {\n                primes.Add(i);\n            }\n        }\n        long maxPrime\
    \ = primes.Max();\n        while (maxPrime > 0) {\n            result += maxPrime\
    \ % 10;\n            maxPrime /= 10;\n        }\n        return result;", "  \
    \      // Your code goes here\n        return 0;", "        long largestPrime\
    \ = 0;\n        foreach (long n in lst) {\n            if (IsPrime(n)) {\n   \
    \             if (n > largestPrime) {\n                    largestPrime = n;\n\
    \                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        // Your code goes here\n        return 0;", "        long largestPrime\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumDigits(largestPrime);",
  "        // Your code goes here\n        return 0;", "        long max = 0;\n  \
    \      foreach (long i in lst) {\n            if (i > max) {\n               \
    \ max = i;\n            }\n        }\n        long prime = 0;\n        for (long\
    \ i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n                prime\
    \ = i;\n                break;\n            }\n        }\n        long sum = 0;\n\
    \        while (prime > 0) {\n            sum += prime % 10;\n            prime\
    \ /= 10;\n        }\n        return sum;", "        long sum = 0;\n        long\
    \ max = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (lst[i]\
    \ > max) {\n                max = lst[i];\n            }\n        }\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (lst[i] == max) {\n      \
    \          if (IsPrime(lst[i])) {\n                    while (lst[i] > 0) {\n\
    \                        sum += lst[i] % 10;\n                        lst[i] /=\
    \ 10;\n                    }\n                }\n            }\n        }\n  \
    \      return sum;", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                if (i > max) {\n             \
    \       max = i;\n                }\n            }\n        }\n        return\
    \ SumDigits(max);", "        long max = 0;\n        foreach (long i in lst) {\n\
    \            if (IsPrime(i)) {\n                if (i > max) {\n             \
    \       max = i;\n                }\n            }\n        }\n        return\
    \ SumDigits(max);", "        // Your code goes here\n        long largestPrime\
    \ = 0;\n        foreach (long num in lst) {\n            if (IsPrime(num)) {\n\
    \                if (num > largestPrime) {\n                    largestPrime =\
    \ num;\n                }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        long largestPrime = 0;\n        foreach (long num in lst) {\n         \
    \   if (IsPrime(num)) {\n                if (num > largestPrime) {\n         \
    \           largestPrime = num;\n                }\n            }\n        }\n\
    \        return SumOfDigits(largestPrime);", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                if (i > max)\
    \ {\n                    max = i;\n                }\n            }\n        }\n\
    \        return SumOfDigits(max);", "        long max = 0;\n        foreach (long\
    \ i in lst) {\n            if (IsPrime(i)) {\n                if (i > max) {\n\
    \                    max = i;\n                }\n            }\n        }\n \
    \       return SumDigits(max);", "        // Your code goes here\n        return\
    \ 0;", "        long largestPrime = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++) {\n            if (IsPrime(lst[i])) {\n                if (lst[i] > largestPrime)\
    \ {\n                    largestPrime = lst[i];\n                }\n         \
    \   }\n        }\n        return SumOfDigits(largestPrime);", "        // find\
    \ the largest prime\n        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > largestPrime)\
    \ {\n                    largestPrime = num;\n                }\n            }\n\
    \        }\n        // sum the digits of the largest prime\n        long sum =\
    \ 0;\n        while (largestPrime > 0) {\n            sum += largestPrime % 10;\n\
    \            largestPrime /= 10;\n        }\n        return sum;", "        //\
    \ Your code goes here.\n        return 0;", "        long max = 0;\n        for\
    \ (int i = 0; i < lst.Count; i++) {\n            if (lst[i] > max) {\n       \
    \         max = lst[i];\n            }\n        }\n        long maxPrime = 0;\n\
    \        for (long i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n   \
    \             maxPrime = i;\n                break;\n            }\n        }\n\
    \        long sum = 0;\n        while (maxPrime > 0) {\n            sum += maxPrime\
    \ % 10;\n            maxPrime /= 10;\n        }\n        return sum;", "     \
    \   // Your code goes here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        long largestPrime = 0;\n        for (int i = 0;\
    \ i < lst.Count; i++) {\n            if (IsPrime(lst[i])) {\n                if\
    \ (lst[i] > largestPrime) {\n                    largestPrime = lst[i];\n    \
    \            }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 1; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum\
    \ += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum\
    \ += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long n in lst) {\n            if (IsPrime(n))\
    \ {\n                max = Math.Max(max, n);\n            }\n        }\n     \
    \   return SumDigits(max);", "        // Your code here\n        return 0;", " \
    \       long max = 0;\n        foreach (long i in lst) {\n            if (i >\
    \ max) {\n                max = i;\n            }\n        }\n        return max;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        long largestPrime = 0;\n        foreach\
    \ (long num in lst) {\n            if (IsPrime(num)) {\n                if (num\
    \ > largestPrime) {\n                    largestPrime = num;\n               \
    \ }\n            }\n        }\n        return SumOfDigits(largestPrime);", " \
    \       // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        long maxPrime = 0;\n        foreach (long i in lst) {\n      \
    \      if (IsPrime(i)) {\n                maxPrime = Math.Max(maxPrime, i);\n\
    \            }\n        }\n        return SumDigits(maxPrime);", "        // Your\
    \ code goes here.\n        return 0;", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long maxPrime = 0;\n        for (long i = max;\
    \ i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n\
    \                break;\n            }\n        }\n        long sum = 0;\n   \
    \     while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        long largestPrime = 0;\n \
    \       for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        long result =\
    \ 0;\n        for (long i = max; i > 1; i--) {\n            if (isPrime(i)) {\n\
    \                result = i;\n                break;\n            }\n        }\n\
    \        return sumDigits(result);", "        long max = lst.Max();\n        long\
    \ maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        return SumOfDigits(maxPrime);", "        // Your code goes here\n\
    \        return 0;", "        long largestPrime = 0;\n        foreach (long num\
    \ in lst) {\n            if (IsPrime(num)) {\n                if (num > largestPrime)\
    \ {\n                    largestPrime = num;\n                }\n            }\n\
    \        }\n        return SumOfDigits(largestPrime);", "        long largestPrime\
    \ = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            if (IsPrime(lst[i]))\
    \ {\n                if (lst[i] > largestPrime) {\n                    largestPrime\
    \ = lst[i];\n                }\n            }\n        }\n        return SumOfDigits(largestPrime);",
  "        long max = 0;\n        for (int i = 0; i < lst.Count; i++) {\n        \
    \    if (lst[i] > max) {\n                max = lst[i];\n            }\n     \
    \   }\n        long maxPrime = 0;\n        for (long i = max; i > 0; i--) {\n\
    \            if (IsPrime(i)) {\n                maxPrime = i;\n              \
    \  break;\n            }\n        }\n        long sum = 0;\n        while (maxPrime\
    \ > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n   \
    \     }\n        return sum;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        long prime = 0;\n        for (long\
    \ i = max; i > 0; i--) {\n            if (IsPrime(i)) {\n                prime\
    \ = i;\n                break;\n            }\n        }\n        long sum = 0;\n\
    \        while (prime > 0) {\n            sum += prime % 10;\n            prime\
    \ /= 10;\n        }\n        return sum;", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (IsPrime(i)) {\n                max = i;\n\
    \            }\n        }\n        return SumDigits(max);", "        // Your code\
    \ goes here\n        return 0;", "        // Your code goes here\n        return\
    \ 0;", "        // Your code goes here\n        return 0;", "        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n      \
    \          max = i;\n            }\n        }\n        return max;", "       \
    \ long max = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        return max;", " \
    \       long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                max = i;\n            }\n        }\n        return SumOfDigits(max);",
  "        long largestPrime = 0;\n        for (int i = 0; i < lst.Count; i++) {\n\
    \            if (IsPrime(lst[i])) {\n                if (lst[i] > largestPrime)\
    \ {\n                    largestPrime = lst[i];\n                }\n         \
    \   }\n        }\n        return SumDigits(largestPrime);", "        // Your code\
    \ goes here.\n        return 0;", "        // Your code goes here.\n        return\
    \ 0;", "        long max = 0;\n        foreach (long i in lst) {\n           \
    \ if (i > max) {\n                max = i;\n            }\n        }\n       \
    \ long maxPrime = 0;\n        for (long i = max; i > 1; i--) {\n            if\
    \ (IsPrime(i)) {\n                maxPrime = i;\n                break;\n    \
    \        }\n        }\n        long sum = 0;\n        while (maxPrime > 0) {\n\
    \            sum += maxPrime % 10;\n            maxPrime /= 10;\n        }\n \
    \       return sum;", "        long max = 0;\n        foreach (long i in lst)\
    \ {\n            if (i > max) {\n                max = i;\n            }\n   \
    \     }\n        long maxPrime = 0;\n        for (long i = max; i > 1; i--) {\n\
    \            if (IsPrime(i)) {\n                maxPrime = i;\n              \
    \  break;\n            }\n        }\n        long sum = 0;\n        while (maxPrime\
    \ > 0) {\n            sum += maxPrime % 10;\n            maxPrime /= 10;\n   \
    \     }\n        return sum;", "        // Your code goes here.\n        return\
    \ 0;", "        // your code here\n        return 0;", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (IsPrime(i)) {\n          \
    \      max = i;\n            }\n        }\n        return SumDigits(max);", " \
    \       long max = 0;\n        foreach (long i in lst) {\n            if (i >\
    \ max) {\n                max = i;\n            }\n        }\n        long maxPrime\
    \ = 0;\n        for (long i = max; i > 0; i--) {\n            if (IsPrime(i))\
    \ {\n                maxPrime = i;\n                break;\n            }\n  \
    \      }\n        long sum = 0;\n        while (maxPrime > 0) {\n            sum\
    \ += maxPrime % 10;\n            maxPrime /= 10;\n        }\n        return sum;",
  "        long max = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i))\
    \ {\n                if (i > max) {\n                    max = i;\n          \
    \      }\n            }\n        }\n        return SumOfDigits(max);", "     \
    \   long max = 0;\n        foreach (long i in lst) {\n            if (i > max)\
    \ {\n                max = i;\n            }\n        }\n        return max;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code here\n        return 0;", " \
    \       // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        long max = 0;\n        foreach (long i in\
    \ lst) {\n            if (i > max) {\n                max = i;\n            }\n\
    \        }\n        long sum = 0;\n        while (max > 0) {\n            sum\
    \ += max % 10;\n            max /= 10;\n        }\n        return sum;", "   \
    \     long largestPrime = 0;\n        foreach (long num in lst) {\n          \
    \  if (IsPrime(num)) {\n                if (num > largestPrime) {\n          \
    \          largestPrime = num;\n                }\n            }\n        }\n\
    \        return SumDigits(largestPrime);", "        // Your code goes here.\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code goes here\n        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (i > max) {\n      \
    \          max = i;\n            }\n        }\n        long sum = 0;\n       \
    \ for (long i = 2; i < max; i++) {\n            bool isPrime = true;\n       \
    \     for (long j = 2; j < i; j++) {\n                if (i % j == 0) {\n    \
    \                isPrime = false;\n                    break;\n              \
    \  }\n            }\n            if (isPrime) {\n                sum += i;\n \
    \           }\n        }\n        return sum;", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        long max = 0;\n  \
    \      foreach (long i in lst) {\n            if (IsPrime(i)) {\n            \
    \    if (i > max) {\n                    max = i;\n                }\n       \
    \     }\n        }\n        return SumDigits(max);", "        // Your code goes\
    \ here\n        return 0;", "        // Your code goes here\n        return 0;",
  "        // Your code goes here\n        return 0;", "        // Your code goes\
    \ here\n        return 0;", "        long max = 0;\n        foreach (long i in\
    \ lst) {\n            if (IsPrime(i)) {\n                max = i;\n          \
    \  }\n        }\n        return SumDigits(max);", "        // Your code goes here\n\
    \        return 0;", "        // Your code goes here.\n        return 0;", " \
    \       // Your code goes here.\n        return 0;", "        // Your code goes\
    \ here\n        long largestPrime = 0;\n        foreach (long num in lst) {\n\
    \            if (IsPrime(num)) {\n                if (num > largestPrime) {\n\
    \                    largestPrime = num;\n                }\n            }\n \
    \       }\n        return SumOfDigits(largestPrime);", "        long max = 0;\n\
    \        foreach (long i in lst) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n        }\n        return max;", "        long max\
    \ = 0;\n        foreach (long i in lst) {\n            if (IsPrime(i)) {\n   \
    \             if (i > max) {\n                    max = i;\n                }\n\
    \            }\n        }\n        return SumOfDigits(max);", "        // Your\
    \ code goes here\n        return 0;", "        long max = 0;\n        foreach\
    \ (long i in lst) {\n            if (i > max) {\n                max = i;\n  \
    \          }\n        }\n        long maxPrime = 0;\n        for (long i = max;\
    \ i > 0; i--) {\n            if (IsPrime(i)) {\n                maxPrime = i;\n\
    \                break;\n            }\n        }\n        long sum = 0;\n   \
    \     while (maxPrime > 0) {\n            sum += maxPrime % 10;\n            maxPrime\
    \ /= 10;\n        }\n        return sum;", "        long max = lst.Max();\n  \
    \      long sum = 0;\n        for (long i = max; i > 1; i--) {\n            if\
    \ (IsPrime(i)) {\n                sum = lst.Where(x => x == i).Sum();\n      \
    \          break;\n            }\n        }\n        return sum;", "        //\
    \ Your code goes here\n        return 0;"]
stop_tokens:
- "\n    }\n"
