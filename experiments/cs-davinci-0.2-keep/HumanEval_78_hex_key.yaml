name: HumanEval_78_hex_key
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You have been tasked to write a function that receives \n  \
  \  // a hexadecimal number as a string and counts the number of hexadecimal \n \
  \   // digits that are primes (prime number, or a prime, is a natural number \n\
  \    // greater than 1 that is not a product of two smaller natural numbers).\n\
  \    // Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n\
  \    // Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    // So you have to determine\
  \ a number of the following digits: 2, 3, 5, 7, \n    // B (=decimal 11), D (=decimal\
  \ 13).\n    // Note: you may assume the input is always correct or empty string,\
  \ \n    // and symbols A,B,C,D,E,F are always uppercase.\n    // Examples:\n   \
  \ // For num = \"AB\" the output should be 1.\n    // For num = \"1077E\" the output\
  \ should be 2.\n    // For num = \"ABED1A33\" the output should be 4.\n    // For\
  \ num = \"123456789ABCDEF0\" the output should be 6.\n    // For num = \"2020\"\
  \ the output should be 2.\n    public static long HexKey(string num) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(HexKey((\"\
  AB\")) == (1L));\n    Debug.Assert(HexKey((\"1077E\")) == (2L));\n    Debug.Assert(HexKey((\"\
  ABED1A33\")) == (4L));\n    Debug.Assert(HexKey((\"2020\")) == (2L));\n    Debug.Assert(HexKey((\"\
  123456789ABCDEF0\")) == (6L));\n    Debug.Assert(HexKey((\"112233445566778899AABBCCDDEEFF00\"\
  )) == (12L));\n    }\n\n}\n"
completions: ["        long count = 0;\n        for (int i = 0; i < num.Length; i++)\
    \ {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        var primes = new HashSet<int>\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.ToCharArray().Select(c => Convert.ToInt32(c.ToString(),\
    \ 16)).Count(primes.Contains);", "        // your code here\n        return 0;",
  "        long count = 0;\n        foreach (char c in num) {\n            if (c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  // Your code goes here\n        return 0;", "        // Your code here\n  \
    \      return 0;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // Your code here\n  \
    \      return 0;", "        // Your code here\n        return 0;", "        //\
    \ Your code here\n        return 0;", "        long count = 0;\n        // your\
    \ code here\n        return count;", "        // Your code here\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        long result = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                result++;\n            }\n        }\n      \
    \  return result;", "        long result = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                result++;\n            }\n        }\n      \
    \  return result;", "        // Your code here\n        return 0;", "        long\
    \ count = 0;\n        foreach (char c in num) {\n            if (c == '2' || c\
    \ == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        long result = 0;\n\
    \        foreach (char c in num) {\n            if (c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n \
    \           }\n        }\n        return result;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            switch (num[i]) {\n                case '2':\n         \
    \       case '3':\n                case '5':\n                case '7':\n    \
    \            case 'B':\n                case 'D':\n                    count++;\n\
    \                    break;\n            }\n        }\n        return count;",
  "        long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n     \
    \       switch (num[i]) {\n                case '2':\n                case '3':\n\
    \                case '5':\n                case '7':\n                case 'B':\n\
    \                case 'D':\n                    count++;\n                   \
    \ break;\n            }\n        }\n        return count;", "        long count\
    \ = 0;\n        for (int i = 0; i < num.Length; i++) {\n            switch (num[i])\
    \ {\n                case '2':\n                case '3':\n                case\
    \ '5':\n                case '7':\n                case 'B':\n               \
    \ case 'D':\n                    count++;\n                    break;\n      \
    \      }\n        }\n        return count;", "        // your code here\n    \
    \    return 0;", "        var primes = new HashSet<char> { '2', '3', '5', '7',\
    \ 'B', 'D' };\n        return num.Count(c => primes.Contains(c));", "        //\
    \ Your code here\n        return 0;", "        long count = 0;\n        foreach\
    \ (char c in num) {\n            if (c == '2' || c == '3' || c == '5' || c ==\
    \ '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n  \
    \      }\n        return count;", "        // Your code here\n        return 0;",
  "        // Your code here\n        return 0;", "        long count = 0;\n     \
    \   for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        // Your code here\n        return 0;", "        // your code here\n   \
    \     return 0;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // Your code here\n  \
    \      return 0;", "        long result = 0;\n        // Your code here\n    \
    \    return result;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // Your code here\n  \
    \      return 0;", "        // Your code here\n        return 0;", "        //\
    \ Your code here\n        return 0;", "        long result = 0;\n        // Your\
    \ code here\n        return result;", "        long count = 0;\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i] == '3'\
    \ || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n   \
    \             count++;\n            }\n        }\n        return count;", "  \
    \      // Your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        long result = 0;\n        foreach (char c in num) {\n\
    \            int n = 0;\n            switch (c) {\n                case '0':\n\
    \                case '1':\n                case '2':\n                case '3':\n\
    \                case '4':\n                case '5':\n                case '6':\n\
    \                case '7':\n                case '8':\n                case '9':\n\
    \                    n = c - '0';\n                    break;\n              \
    \  case 'A':\n                    n = 10;\n                    break;\n      \
    \          case 'B':\n                    n = 11;\n                    break;\n\
    \                case 'C':\n                    n = 12;\n                    break;\n\
    \                case 'D':\n                    n = 13;\n                    break;\n\
    \                case 'E':\n                    n = 14;\n                    break;\n\
    \                case 'F':\n                    n = 15;\n                    break;\n\
    \            }\n            if (n == 2 || n == 3 || n == 5 || n == 7 || n == 11\
    \ || n == 13) {\n                result++;\n            }\n        }\n       \
    \ return result;", "        long count = 0;\n        foreach (char c in num) {\n\
    \            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code goes here\n        return 0;", "        // Your\
    \ code here\n        return 0;", "        long count = 0;\n        string[] hex\
    \ = { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\" };\n        foreach (char c in\
    \ num) {\n            if (hex.Contains(c.ToString())) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long result = 0;\n\
    \        foreach (char c in num) {\n            int n = 0;\n            switch\
    \ (c) {\n                case '0': n = 0; break;\n                case '1': n\
    \ = 1; break;\n                case '2': n = 2; break;\n                case '3':\
    \ n = 3; break;\n                case '4': n = 4; break;\n                case\
    \ '5': n = 5; break;\n                case '6': n = 6; break;\n              \
    \  case '7': n = 7; break;\n                case '8': n = 8; break;\n        \
    \        case '9': n = 9; break;\n                case 'A': n = 10; break;\n \
    \               case 'B': n = 11; break;\n                case 'C': n = 12; break;\n\
    \                case 'D': n = 13; break;\n                case 'E': n = 14; break;\n\
    \                case 'F': n = 15; break;\n            }\n            result =\
    \ result * 16 + n;\n        }\n        return result;", "        // Convert the\
    \ hexadecimal number to a decimal number.\n        long dec = Convert.ToInt64(num,\
    \ 16);\n        // Count the number of primes in the decimal number.\n       \
    \ return CountPrimes(dec);", "        var result = 0;\n        var hex = new HashSet<char>\
    \ {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F'};\n        var primes = new HashSet<char> {'2', '3', '5', '7', 'B', 'D'};\n\
    \        foreach (var c in num) {\n            if (hex.Contains(c) && primes.Contains(c))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        // Your code goes here\n        return 0;", "        long count = 0;\n\
    \        foreach (char c in num) {\n            if (c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n  \
    \          }\n        }\n        return count;", "        // Your code goes here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // Your code here\n        return 0;", "        // Your code here\n        return\
    \ 0;", "        // Your code goes here\n        long result = 0;\n        for\
    \ (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i]\
    \ == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D')\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        // Your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        // Your code here\n        return 0;", "        //\
    \ your code here\n        return 0;", "        long count = 0;\n        for (int\
    \ i = 0; i < num.Length; i++) {\n            if (num[i] == '2' || num[i] == '3'\
    \ || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i] == 'D') {\n   \
    \             count++;\n            }\n        }\n        return count;", "  \
    \      // Your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        // your code here\n        return 0;", "        var\
    \ primes = new List<int> { 2, 3, 5, 7, 11, 13 };\n        var hex = new List<char>\
    \ { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F' };\n        var count = 0;\n        foreach (var c in num) {\n         \
    \   if (primes.Contains(hex.IndexOf(c))) {\n                count++;\n       \
    \     }\n        }\n        return count;", "        // Your code goes here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n          \
    \  if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i]\
    \ == 'B' || num[i] == 'D') {\n                count++;\n            }\n      \
    \  }\n        return count;", "        // Your code here\n        return 0;",
  "        var hex = new Dictionary<char, int>() {\n            {'0', 0}, {'1', 1},\
    \ {'2', 2}, {'3', 3}, {'4', 4}, {'5', 5}, {'6', 6}, {'7', 7}, {'8', 8}, {'9',\
    \ 9},\n            {'A', 10}, {'B', 11}, {'C', 12}, {'D', 13}, {'E', 14}, {'F',\
    \ 15}\n        };\n        var primes = new HashSet<int>() {2, 3, 5, 7, 11, 13};\n\
    \        var count = 0;\n        foreach (var c in num) {\n            if (primes.Contains(hex[c]))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        // Your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        // Your code here\n        return 0;", "        long\
    \ count = 0;\n        foreach (char c in num) {\n            if (c == '2' || c\
    \ == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ // Your code here\n        return 0;", "        // your code here\n        return\
    \ 0;", "        // your code here\n        return 0;", "        // your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ long result = 0;\n        char[] hex = new char[] { '2', '3', '5', '7', 'B',\
    \ 'D' };\n        for (int i = 0; i < num.Length; i++) {\n            if (hex.Contains(num[i]))\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        long result = 0;\n        // Your code goes here\n        return result;",
  "        long count = 0;\n        for (int i = 0; i < num.Length; i++) {\n     \
    \       if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' ||\
    \ num[i] == 'B' || num[i] == 'D') {\n                count++;\n            }\n\
    \        }\n        return count;", "        // Your code goes here\n        return\
    \ 0;", "        long result = 0;\n        foreach (char c in num) {\n        \
    \    if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D')\
    \ {\n                result++;\n            }\n        }\n        return result;",
  "        long result = 0;\n        foreach (char c in num) {\n            int digit\
    \ = Convert.ToInt32(c.ToString(), 16);\n            if (digit == 2 || digit ==\
    \ 3 || digit == 5 || digit == 7 || digit == 11 || digit == 13) {\n           \
    \     result++;\n            }\n        }\n        return result;", "        //\
    \ Your code here\n        return 0;", "        var primes = new HashSet<char>\
    \ { '2', '3', '5', '7', 'B', 'D' };\n        return num.Count(c => primes.Contains(c));",
  "        // Your code here\n        return 0;", "        long count = 0;\n     \
    \   foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in num) {\n            if (c == '2' || c == '3' || c == '5' || c ==\
    \ '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n  \
    \      }\n        return count;", "        // Your code here\n        return 0;",
  "        // your code here\n        return 0;", "        // Convert the hex string\
    \ to a number\n        BigInteger hex = BigInteger.Parse(num, System.Globalization.NumberStyles.HexNumber);\n\
    \        // Convert the hex number to a string of decimal digits\n        string\
    \ dec = hex.ToString();\n        // Count the number of decimal digits that are\
    \ primes\n        long count = 0;\n        for (int i = 0; i < dec.Length; i++)\
    \ {\n            if (dec[i] == '2' || dec[i] == '3' || dec[i] == '5' || dec[i]\
    \ == '7' || dec[i] == '1' || dec[i] == '3') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // your code here\n  \
    \      return 0;", "        long count = 0;\n        foreach (char c in num) {\n\
    \            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c\
    \ == 'D') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code here\n        return 0;", "        long result\
    \ = 0;\n        foreach (char c in num) {\n            if (c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n\
    \            }\n        }\n        return result;", "        // Your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ long count = 0;\n        foreach (char c in num) {\n            if (c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n           \
    \     count++;\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (char c in num) {\n            if (c == '2' || c\
    \ == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        // Your code here\n        return 0;", "        long\
    \ result = 0;\n        foreach (char c in num) {\n            if (c == '2' ||\
    \ c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n              \
    \  result++;\n            }\n        }\n        return result;", "        // Your\
    \ code here\n        return 0;", "        long count = 0;\n        foreach (char\
    \ c in num) {\n            if (c == '2' || c == '3' || c == '5' || c == '7' ||\
    \ c == 'B' || c == 'D') {\n                count++;\n            }\n        }\n\
    \        return count;", "        var primes = new HashSet<int> { 2, 3, 5, 7,\
    \ 11, 13 };\n        return num.ToCharArray().Select(c => Convert.ToInt32(c.ToString(),\
    \ 16)).Count(i => primes.Contains(i));", "        // your code here\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        long count = 0;\n    \
    \    foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;", "        long count = 0;\n        char[]\
    \ hex = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D',\
    \ 'E', 'F'};\n        int[] primes = {2, 3, 5, 7, 11, 13};\n        for (int i\
    \ = 0; i < num.Length; i++) {\n            for (int j = 0; j < primes.Length;\
    \ j++) {\n                if (num[i] == hex[primes[j]]) {\n                  \
    \  count++;\n                }\n            }\n        }\n        return count;",
  "        // your code here\n        return 0;", "        // Your code goes here\n\
    \        return 0;", "        var primes = new List<int> { 2, 3, 5, 7, 11, 13\
    \ };\n        var hex = new List<char> { '0', '1', '2', '3', '4', '5', '6', '7',\
    \ '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' };\n        var result = 0;\n       \
    \ foreach (var c in num) {\n            if (primes.Contains(hex.IndexOf(c))) {\n\
    \                result++;\n            }\n        }\n        return result;",
  "        long count = 0;\n        foreach (char c in num) {\n            if (c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  // Your code goes here\n        return 0;", "        // Your code here\n  \
    \      return 0;", "        long count = 0;\n        foreach (char c in num) {\n\
    \            int n = Convert.ToInt32(c.ToString(), 16);\n            if (n ==\
    \ 2 || n == 3 || n == 5 || n == 7 || n == 11 || n == 13) {\n                count++;\n\
    \            }\n        }\n        return count;", "        var hex = new HashSet<char>()\
    \ { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F' };\n        var primes = new HashSet<char>() { '2', '3', '5', '7', 'B',\
    \ 'D' };\n        return num.Where(c => hex.Contains(c)).Count(c => primes.Contains(c));",
  "        long count = 0;\n        foreach (char c in num) {\n            if (c ==\
    \ '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n       \
    \         count++;\n            }\n        }\n        return count;", "      \
    \  var primes = new List<int> { 2, 3, 5, 7, 11, 13 };\n        var hex = new List<char>\
    \ { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',\
    \ 'F' };\n        var result = 0;\n        foreach (var c in num) {\n        \
    \    if (primes.Contains(hex.IndexOf(c))) {\n                result++;\n     \
    \       }\n        }\n        return result;", "        long count = 0;\n    \
    \    foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;", "        long result = 0;\n        foreach\
    \ (char c in num) {\n            if (c == '2' || c == '3' || c == '5' || c ==\
    \ '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n \
    \       }\n        return result;", "        long result = 0;\n        foreach\
    \ (char c in num) {\n            if (c == '2' || c == '3' || c == '5' || c ==\
    \ '7' || c == 'B' || c == 'D') {\n                result++;\n            }\n \
    \       }\n        return result;", "        var hex = new Dictionary<char, int>()\
    \ {\n            {'0', 0}, {'1', 1}, {'2', 2}, {'3', 3}, {'4', 4}, {'5', 5}, {'6',\
    \ 6}, {'7', 7}, {'8', 8}, {'9', 9},\n            {'A', 10}, {'B', 11}, {'C', 12},\
    \ {'D', 13}, {'E', 14}, {'F', 15}\n        };\n        var primes = new HashSet<int>()\
    \ { 2, 3, 5, 7, 11, 13 };\n        return num.Select(c => hex[c]).Count(i => primes.Contains(i));",
  "        // Your code goes here.\n        return 0;", "        long count = 0;\n\
    \        for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2'\
    \ || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i]\
    \ == 'D') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // your code here\n        return 0;", "        long count\
    \ = 0;\n        foreach (char c in num) {\n            if (c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code goes\
    \ here.\n        return 0;", "        // Your code here\n        return 0;", " \
    \       long count = 0;\n        foreach (char c in num) {\n            if (c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     // Your code goes here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ long count = 0;\n        foreach (char c in num) {\n            if (c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n           \
    \     count++;\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (char c in num) {\n            if (c == '2' || c\
    \ == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        long result = 0;\n\
    \        foreach (char c in num) {\n            if (c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D') {\n                result++;\n \
    \           }\n        }\n        return result;", "        // Your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ long count = 0;\n        foreach (char c in num) {\n            if (c == '2'\
    \ || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n           \
    \     count++;\n            }\n        }\n        return count;", "        long\
    \ result = 0;\n        foreach (char c in num) {\n            switch (c) {\n \
    \               case '2':\n                case '3':\n                case '5':\n\
    \                case '7':\n                case 'B':\n                case 'D':\n\
    \                    result++;\n                    break;\n            }\n  \
    \      }\n        return result;", "        // Your code here\n        return\
    \ 0;", "        // Your code here\n        return 0;", "        long count = 0;\n\
    \        for (int i = 0; i < num.Length; i++) {\n            if (num[i] == '2'\
    \ || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' || num[i]\
    \ == 'D') {\n                count++;\n            }\n        }\n        return\
    \ count;", "        // Your code here\n        return 0;", "        long count\
    \ = 0;\n        foreach (char c in num) {\n            if (c == '2' || c == '3'\
    \ || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (char c in num) {\n            if (c == '2' || c == '3' || c\
    \ == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n  \
    \          }\n        }\n        return count;", "        // Your code here\n\
    \        return 0;", "        // Your code here\n        return 0;", "       \
    \ var primes = new HashSet<char>() { '2', '3', '5', '7', 'B', 'D' };\n       \
    \ return num.Count(c => primes.Contains(c));", "        // Your code here\n  \
    \      return 0;", "        // Your code goes here\n        return 0;", "    \
    \    // Your code here\n        return 0;", "        long count = 0;\n       \
    \ foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;", "        // Your code here\n       \
    \ return 0;", "        // Your code here\n        return 0;", "        // Your\
    \ code here\n        return 0;", "        // Your code here\n        return 0;",
  "        // Your code here\n        return 0;", "        // Your code here\n   \
    \     return 0;", "        // Your code here\n        return 0;", "        long\
    \ count = 0;\n        foreach (char c in num) {\n            if (c == '2' || c\
    \ == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n                count++;\n\
    \            }\n        }\n        return count;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        // Your code here\n        return 0;", "        long\
    \ count = 0;\n        for (int i = 0; i < num.Length; i++) {\n            if (num[i]\
    \ == '2' || num[i] == '3' || num[i] == '5' || num[i] == '7' || num[i] == 'B' ||\
    \ num[i] == 'D') {\n                count++;\n            }\n        }\n     \
    \   return count;", "        long result = 0;\n        // Your code here\n   \
    \     return result;", "        long result = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                result++;\n            }\n        }\n      \
    \  return result;", "        var primes = new List<int> { 2, 3, 5, 7, 11, 13 };\n\
    \        return num.ToCharArray().Count(x => primes.Contains(int.Parse(x.ToString(),\
    \ System.Globalization.NumberStyles.HexNumber)));", "        long result = 0;\n\
    \        for (int i = 0; i < num.Length; i++) {\n            int digit = 0;\n\
    \            switch (num[i]) {\n                case '2':\n                case\
    \ '3':\n                case '5':\n                case '7':\n               \
    \ case 'B':\n                case 'D':\n                    digit = 1;\n     \
    \               break;\n            }\n            result += digit;\n        }\n\
    \        return result;", "        // Your code here\n        return 0;", "  \
    \      // Your code goes here\n        return 0;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // Your code here\n  \
    \      return 0;", "        // Your code goes here\n        return 0;", "    \
    \    var primes = new List<int> { 2, 3, 5, 7, 11, 13 };\n        var result =\
    \ 0;\n        foreach (var c in num) {\n            var digit = c - '0';\n   \
    \         if (digit > 9) {\n                digit = c - 'A' + 10;\n          \
    \  }\n            if (primes.Contains(digit)) {\n                result++;\n \
    \           }\n        }\n        return result;", "        // Your code goes\
    \ here\n        return 0;", "        // Your code here\n        return 0;", " \
    \       long count = 0;\n        foreach (char c in num) {\n            if (c\
    \ == '2' || c == '3' || c == '5' || c == '7' || c == 'B' || c == 'D') {\n    \
    \            count++;\n            }\n        }\n        return count;", "   \
    \     // Your code here\n        return 0;", "        long count = 0;\n      \
    \  foreach (char c in num) {\n            if (c == '2' || c == '3' || c == '5'\
    \ || c == '7' || c == 'B' || c == 'D') {\n                count++;\n         \
    \   }\n        }\n        return count;", "        long count = 0;\n        foreach\
    \ (char c in num) {\n            if (c == '2' || c == '3' || c == '5' || c ==\
    \ '7' || c == 'B' || c == 'D') {\n                count++;\n            }\n  \
    \      }\n        return count;", "        long count = 0;\n        string hexPrimes\
    \ = \"2357BD\";\n        foreach (char c in num) {\n            if (hexPrimes.Contains(c))\
    \ {\n                count++;\n            }\n        }\n        return count;",
  "        // Your code here\n        return 0;", "        long result = 0;\n    \
    \    // your code here\n        return result;", "        // Your code here\n\
    \        return 0;", "        long count = 0;\n        foreach (char c in num)\
    \ {\n            if (c == '2' || c == '3' || c == '5' || c == '7' || c == 'B'\
    \ || c == 'D') {\n                count++;\n            }\n        }\n       \
    \ return count;", "        long count = 0;\n        for (int i = 0; i < num.Length;\
    \ i++) {\n            if (num[i] == '2' || num[i] == '3' || num[i] == '5' || num[i]\
    \ == '7' || num[i] == 'B' || num[i] == 'D') {\n                count++;\n    \
    \        }\n        }\n        return count;", "        // Your code here\n  \
    \      return 0;", "        // Your code here\n        return 0;", "        long\
    \ count = 0;\n        string[] hex = { \"2\", \"3\", \"5\", \"7\", \"B\", \"D\"\
    \ };\n        for (int i = 0; i < num.Length; i++) {\n            if (hex.Contains(num[i].ToString()))\
    \ {\n                count++;\n            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
