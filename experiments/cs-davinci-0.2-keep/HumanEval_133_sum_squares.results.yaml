language: cs
name: HumanEval_133_sum_squares
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <110bbf72688249bdb9ca71c0c0a9de1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <110bbf72688249bdb9ca71c0c0a9de1e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++)\n        {\n            sum += (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++)\n        {\n            sum += (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd52352d1934f9ab8d065d950b4ed95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd52352d1934f9ab8d065d950b4ed95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd52352d1934f9ab8d065d950b4ed95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd52352d1934f9ab8d065d950b4ed95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ TODO: Implement your solution here\n        return 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <817920db505243eaa6c73c5de989ec79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <817920db505243eaa6c73c5de989ec79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++)\n        {\n            sum += (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Sum(x => x * x);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Sum(x => x * x);\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd52352d1934f9ab8d065d950b4ed95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd52352d1934f9ab8d065d950b4ed95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        long sum = 0;\n        for (int i = 0; i < lst.Count;\
    \ i++)\n        {\n            sum += (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float i in lst) {\n            sum += (long)Math.Ceiling(i)\
    \ * (long)Math.Ceiling(i);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            lst[i]\
    \ = (float)Math.Ceiling(lst[i]);\n            sum += (long)Math.Pow(lst[i], 2);\n\
    \        }\n        return sum;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float x in lst) {\n            sum += (long)Math.Ceiling(x)\
    \ * (long)Math.Ceiling(x);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        return\
    \ lst.Select(x => (long)Math.Ceiling(x)).Select(x => x * x).Sum();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float f in lst) {\n            sum += (long)Math.Ceiling(f)\
    \ * (long)Math.Ceiling(f);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Write your code here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b0e198ab65747c5ba999b4ea0067401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float i in lst) {\n            sum += (long)Math.Ceiling(i)\
    \ * (long)Math.Ceiling(i);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50b0f97b47444904920b65a7d0f1ad0f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (var item in lst) {\n            sum += (long)Math.Ceiling(item)\
    \ * (long)Math.Ceiling(item);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        foreach (float num in lst) {\n            sum += (long)Math.Ceiling(num)\
    \ * (long)Math.Ceiling(num);\n        }\n        return sum;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)3.0f,\
    \ (float)5.0f, (float)7.0f}))) == (84L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.4f, (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)100.0f, (float)1.0f,\
    \ (float)15.0f, (float)2.0f}))) == (10230L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)10000.0f, (float)10000.0f}))) == (200000000L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.4f, (float)4.6f,\
    \ (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f}))) == (1086L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f}))) == (0L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f}))) ==\
    \ (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        long\
    \ sum = 0;\n        for (int i = 0; i < lst.Count; i++) {\n            sum +=\
    \ (long)Math.Ceiling(lst[i]) * (long)Math.Ceiling(lst[i]);\n        }\n      \
    \  return sum;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f, (float)2.0f,\
    \ (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f}))) == (84L));\n\
    \    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f, (float)4.2f,\
    \ (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659800023
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // You are given a list of numbers.\n    // You need to return\
    \ the sum of squared numbers in the given list,\n    // round each element in\
    \ the list to the upper int(Ceiling) first.\n    // Examples:\n    // For lst\
    \ = [1,2,3] the output should be 14\n    // For lst = [1,4,9] the output should\
    \ be 98\n    // For lst = [1,3,5,7] the output should be 84\n    // For lst =\
    \ [1.4,4.2,0] the output should be 29\n    // For lst = [-2.4,1,1] the output\
    \ should be 6\n    public static long SumSquares(List<float> lst) {\n        //\
    \ Your code goes here.\n        return 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.0f,\
    \ (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)1.0f, (float)2.0f, (float)3.0f}))) == (14L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f})))\
    \ == (84L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)1.4f,\
    \ (float)4.2f, (float)0.0f}))) == (29L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-2.4f, (float)1.0f, (float)1.0f}))) == (6L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)100.0f, (float)1.0f, (float)15.0f, (float)2.0f})))\
    \ == (10230L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)10000.0f,\
    \ (float)10000.0f}))) == (200000000L));\n    Debug.Assert(SumSquares((new List<float>(new\
    \ float[]{(float)-1.4f, (float)4.6f, (float)6.3f}))) == (75L));\n    Debug.Assert(SumSquares((new\
    \ List<float>(new float[]{(float)-1.4f, (float)17.9f, (float)18.9f, (float)19.9f})))\
    \ == (1086L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)0.0f})))\
    \ == (0L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f})))\
    \ == (1L));\n    Debug.Assert(SumSquares((new List<float>(new float[]{(float)-1.0f,\
    \ (float)1.0f, (float)0.0f}))) == (2L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b883217d0d840f4963247696f97ba4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b883217d0d840f4963247696f97ba4e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659800023
