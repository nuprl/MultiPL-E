language: cs
name: HumanEval_76_is_simple_power
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        return IsSimplePower(x / n, n);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30ff2cc0806a4d51b2cdfead21967610>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb7378c18f0c4c6ebec56c7ce6d81b92>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        long\
    \ p = n;\n        while (p <= x) {\n            if (p == x) return true;\n   \
    \         p *= n;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        return Math.Log(x, n) % 1 == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b73a3e27dbd40fb8dfd6a4095e2bd91>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        long y = n;\n        while (y < x) {\n  \
    \          y *= n;\n        }\n        return y == x;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb7378c18f0c4c6ebec56c7ce6d81b92>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d60602969ff64db2a47fb29503a3cb1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d60602969ff64db2a47fb29503a3cb1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb7378c18f0c4c6ebec56c7ce6d81b92>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        long i =\
    \ 2;\n        while (i < x) {\n            if (i == x) {\n                return\
    \ true;\n            }\n            i *= n;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <261f31431cbb494db46c923eb657da8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <261f31431cbb494db46c923eb657da8c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        return Math.Log(x, n) % 1 == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b73a3e27dbd40fb8dfd6a4095e2bd91>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        long p = n;\n        while (p < x) {\n  \
    \          p *= n;\n        }\n        return p == x;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        double result = Math.Log(x) / Math.Log(n);\n        return\
    \ result == (int)result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f2387e740fa40d3bfbdc72ecc9e5f7e>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        return Math.Log(x, n) % 1 == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b73a3e27dbd40fb8dfd6a4095e2bd91>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        long power\
    \ = n;\n        while (power < x) {\n            power *= n;\n        }\n    \
    \    return power == x;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        long\
    \ p = n;\n        while (p < x) {\n            p *= n;\n        }\n        return\
    \ p == x;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        var\
    \ p = (long)Math.Log(x, n);\n        return Math.Pow(n, p) == x;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb7378c18f0c4c6ebec56c7ce6d81b92>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        var log = Math.Log(x, n);\n\
    \        return log == Math.Floor(log);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) {\n           \
    \ return true;\n        }\n        if (n == 1) {\n            return false;\n\
    \        }\n        if (x == n) {\n            return true;\n        }\n     \
    \   if (x % n != 0) {\n            return false;\n        }\n        return IsSimplePower(x\
    \ / n, n);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        long p = n;\n        while (p < x) {\n   \
    \         p *= n;\n        }\n        return p == x;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x % n != 0) {\n     \
    \       return false;\n        }\n        return IsSimplePower(x / n, n);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        var result\
    \ = Math.Log(x) / Math.Log(n);\n        return result % 1 == 0;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe4249aa4a7402883b124768b71e3a3>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x == n * n) return true;\n        if (x % n != 0) return false;\n      \
    \  return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793836
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe4249aa4a7402883b124768b71e3a3>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 0) return false;\n        if (x == 1) return\
    \ true;\n        if (n == 0) return false;\n        if (n == 1) return true;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe4249aa4a7402883b124768b71e3a3>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe4249aa4a7402883b124768b71e3a3>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe4249aa4a7402883b124768b71e3a3>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x % n != 0) {\n     \
    \       return false;\n        }\n        return IsSimplePower(x / n, n);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfe4249aa4a7402883b124768b71e3a3>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        var\
    \ p = (int)Math.Log(x, n);\n        return Math.Pow(n, p) == x;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        var\
    \ p = (long)Math.Log(x, n);\n        return Math.Pow(n, p) == x;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        long i = 1;\n        while (i < x) {\n  \
    \          i *= n;\n            if (i == x) {\n                return true;\n\
    \            }\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        return Math.Log(x, n) % 1 == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b73a3e27dbd40fb8dfd6a4095e2bd91>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        long p = n;\n        while (p < x) {\n  \
    \          p *= n;\n        }\n        return p == x;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        double result = Math.Log(x)\
    \ / Math.Log(n);\n        return result == (int)result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f0e6da132664f759cfe97a09784eb94>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb7378c18f0c4c6ebec56c7ce6d81b92>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x % n != 0) {\n     \
    \       return false;\n        }\n        return IsSimplePower(x / n, n);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x % n != 0) return false;\n   \
    \     return IsSimplePower(x / n, n);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x < n) {\n          \
    \  return false;\n        }\n        long y = n;\n        while (y < x) {\n  \
    \          y *= n;\n        }\n        return y == x;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L),\
    \ (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L),\
    \ (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n\
    \    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x % n != 0) {\n     \
    \       return false;\n        }\n        return IsSimplePower(x / n, n);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        return IsSimplePower(x / n, n);\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cf19310f20f04f7498421318702c80d1>:0 \n"
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        long power\
    \ = n;\n        while (power < x) {\n            power *= n;\n        }\n    \
    \    return power == x;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code goes here\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6a6984d7ec94303bff84ddcaffd603f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) return true;\n        if (n == 1) return false;\n\
    \        if (x == n) return true;\n        if (x < n) return false;\n        if\
    \ (x % n != 0) return false;\n        return IsSimplePower(x / n, n);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        if (x == 1) {\n            return true;\n        }\n \
    \       if (n == 1) {\n            return false;\n        }\n        if (x ==\
    \ n) {\n            return true;\n        }\n        if (x % n != 0) {\n     \
    \       return false;\n        }\n        return IsSimplePower(x / n, n);\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L),\
    \ (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <786e4cdcf0734e32be9928e62e9eb959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // Your code here\n        if (x == 1) return true;\n\
    \        if (n == 1) return false;\n        if (x == n) return true;\n       \
    \ if (x < n) return false;\n        if (x % n != 0) return false;\n        return\
    \ IsSimplePower(x / n, n);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(IsSimplePower((16L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((143214L),\
    \ (16L)) == (false));\n    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((9L), (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L),\
    \ (4L)) == (true));\n    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((128L), (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L),\
    \ (6L)) == (false));\n    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((1L), (12L)) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Your task is to write a function that returns true if\
    \ a number x is a simple\n    // power of n and false in other cases.\n    //\
    \ x is a simple power of n if n**int=x\n    // For example:\n    // is_simple_power(1,\
    \ 4) => true\n    // is_simple_power(2, 2) => true\n    // is_simple_power(8,\
    \ 2) => true\n    // is_simple_power(3, 2) => false\n    // is_simple_power(3,\
    \ 1) => false\n    // is_simple_power(5, 3) => false\n    public static bool IsSimplePower(long\
    \ x, long n) {\n        // your code here\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(IsSimplePower((16L), (2L))\
    \ == (true));\n    Debug.Assert(IsSimplePower((143214L), (16L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((4L), (2L)) == (true));\n    Debug.Assert(IsSimplePower((9L),\
    \ (3L)) == (true));\n    Debug.Assert(IsSimplePower((16L), (4L)) == (true));\n\
    \    Debug.Assert(IsSimplePower((24L), (2L)) == (false));\n    Debug.Assert(IsSimplePower((128L),\
    \ (4L)) == (false));\n    Debug.Assert(IsSimplePower((12L), (6L)) == (false));\n\
    \    Debug.Assert(IsSimplePower((1L), (1L)) == (true));\n    Debug.Assert(IsSimplePower((1L),\
    \ (12L)) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1d45ac19d297405a91794454709e42c8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793835
