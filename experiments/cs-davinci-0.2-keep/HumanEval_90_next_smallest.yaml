name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1,\
  \ 1]) == None\n    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count < 2) {\n            return null;\n        }\n\
    \        long min = lst[0];\n        long nextMin = long.MaxValue;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         nextMin = min;\n                min = lst[i];\n            } else if\
    \ (lst[i] < nextMin) {\n                nextMin = lst[i];\n            }\n   \
    \     }\n        if (nextMin == long.MaxValue) {\n            return null;\n \
    \       }\n        return nextMin;", "        // Your code goes here\n       \
    \ return null;", "        // TODO: Implement this function\n        return null;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next = long.MaxValue;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                next =\
    \ min;\n                min = lst[i];\n            } else if (lst[i] < next) {\n\
    \                next = lst[i];\n            }\n        }\n        if (next ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return next;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long nextMin = lst[1];\n        if (min > nextMin) {\n\
    \            min = nextMin;\n            nextMin = lst[0];\n        }\n      \
    \  for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < min) {\n  \
    \              nextMin = min;\n                min = lst[i];\n            } else\
    \ if (lst[i] < nextMin) {\n                nextMin = lst[i];\n            }\n\
    \        }\n        return nextMin;", "        if (lst.Count < 2) {\n        \
    \    return null;\n        }\n        long min = lst[0];\n        long next_min\
    \ = lst[1];\n        if (next_min < min) {\n            min = next_min;\n    \
    \        next_min = lst[0];\n        }\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                next_min = min;\n \
    \               min = lst[i];\n            } else if (lst[i] < next_min) {\n \
    \               next_min = lst[i];\n            }\n        }\n        return next_min;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        if (min2 < min) {\n    \
    \        min = min2;\n            min2 = lst[0];\n        }\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count < 2) {\n            return null;\n  \
    \      }\n        long min = long.MaxValue;\n        long secondMin = long.MaxValue;\n\
    \        foreach (long x in lst) {\n            if (x < min) {\n             \
    \   secondMin = min;\n                min = x;\n            } else if (x < secondMin)\
    \ {\n                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == long.MaxValue) {\n            return null;\n        }\n        return secondMin;",
  "        long min = long.MaxValue;\n        long nextMin = long.MaxValue;\n    \
    \    foreach (long x in lst) {\n            if (x < min) {\n                nextMin\
    \ = min;\n                min = x;\n            } else if (x < nextMin) {\n  \
    \              nextMin = x;\n            }\n        }\n        if (nextMin ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return nextMin;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min2 = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < min2) {\n         \
    \       min2 = lst[i];\n            }\n        }\n        if (min2 == min) {\n\
    \            return null;\n        }\n        return min2;", "        // Your\
    \ code here\n        return null;", "        if (lst.Count < 2) {\n          \
    \  return null;\n        }\n        long min = lst[0];\n        long min2 = lst[1];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min2 = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n \
    \       }\n        if (min2 == min) {\n            return null;\n        }\n \
    \       return min2;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (secondSmallest == long.MaxValue)\
    \ {\n            return null;\n        }\n        return secondSmallest;", " \
    \       if (lst.Count < 2) return null;\n        long min = lst[0];\n        long\
    \ min2 = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min2 = min;\n                min = lst[i];\n\
    \            } else if (lst[i] < min2) {\n                min2 = lst[i];\n   \
    \         }\n        }\n        if (min2 == min) return null;\n        return\
    \ min2;", "        if (lst.Count < 2) {\n            return null;\n        }\n\
    \        long min = long.MaxValue;\n        long min2 = long.MaxValue;\n     \
    \   foreach (long x in lst) {\n            if (x < min) {\n                min2\
    \ = min;\n                min = x;\n            } else if (x < min2) {\n     \
    \           min2 = x;\n            }\n        }\n        if (min2 == long.MaxValue)\
    \ {\n            return null;\n        }\n        return min2;", "        // Your\
    \ code goes here.\n        return null;", "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long min = lst[0];\n        long nextMin\
    \ = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < min) {\n                nextMin = min;\n                min =\
    \ lst[i];\n            } else if (lst[i] < nextMin) {\n                nextMin\
    \ = lst[i];\n            }\n        }\n        if (nextMin == long.MaxValue) {\n\
    \            return null;\n        }\n        return nextMin;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long next = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                next = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < next) {\n                next = lst[i];\n\
    \            }\n        }\n        if (min == next) {\n            return null;\n\
    \        }\n        return next;", "        if (lst.Count == 0) {\n          \
    \  return null;\n        }\n        if (lst.Count == 1) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long min2 = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min2 = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n \
    \       }\n        if (min2 == long.MaxValue) {\n            return null;\n  \
    \      }\n        return min2;", "        // TODO: Implement this function\n \
    \       return null;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long min = lst[0];\n        long nextMin = lst[1];\n     \
    \   for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n \
    \               nextMin = min;\n                min = lst[i];\n            } else\
    \ if (lst[i] < nextMin) {\n                nextMin = lst[i];\n            }\n\
    \        }\n        if (min == nextMin) {\n            return null;\n        }\n\
    \        return nextMin;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long min = lst[0];\n        long next = long.MaxValue;\n \
    \       foreach (long i in lst) {\n            if (i < min) {\n              \
    \  next = min;\n                min = i;\n            } else if (i < next) {\n\
    \                next = i;\n            }\n        }\n        if (next == long.MaxValue)\
    \ {\n            return null;\n        }\n        return next;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long nextMin = lst[1];\n        if (min > nextMin) {\n            min =\
    \ nextMin;\n            nextMin = lst[0];\n        }\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                nextMin\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < nextMin)\
    \ {\n                nextMin = lst[i];\n            }\n        }\n        return\
    \ nextMin;", "        if (lst.Count < 2) {\n            return null;\n       \
    \ }\n        long smallest = lst[0];\n        long nextSmallest = lst[1];\n  \
    \      for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                nextSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < nextSmallest) {\n                nextSmallest\
    \ = lst[i];\n            }\n        }\n        if (smallest == nextSmallest) {\n\
    \            return null;\n        }\n        return nextSmallest;", "       \
    \ if (lst.Count < 2) {\n            return null;\n        }\n        long min\
    \ = long.MaxValue;\n        long nextMin = long.MaxValue;\n        foreach (long\
    \ i in lst) {\n            if (i < min) {\n                nextMin = min;\n  \
    \              min = i;\n            } else if (i < nextMin) {\n             \
    \   nextMin = i;\n            }\n        }\n        if (nextMin == long.MaxValue)\
    \ {\n            return null;\n        }\n        return nextMin;", "        //\
    \ Your code here.\n        return null;", "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long min = lst[0];\n        long min2\
    \ = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < min) {\n                min2 = min;\n                min = lst[i];\n\
    \            } else if (lst[i] < min2) {\n                min2 = lst[i];\n   \
    \         }\n        }\n        if (min2 == long.MaxValue) {\n            return\
    \ null;\n        }\n        return min2;", "        if (lst.Count < 2) {\n   \
    \         return null;\n        }\n        long min = lst[0];\n        long min2\
    \ = lst[1];\n        if (min2 < min) {\n            min = min2;\n            min2\
    \ = lst[0];\n        }\n        for (int i = 2; i < lst.Count; i++) {\n      \
    \      if (lst[i] < min) {\n                min2 = min;\n                min =\
    \ lst[i];\n            } else if (lst[i] < min2) {\n                min2 = lst[i];\n\
    \            }\n        }\n        return min2;", "        // Your code here\n\
    \        return null;", "        if (lst.Count < 2) return null;\n        long\
    \ min = lst[0];\n        long min2 = long.MaxValue;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                min2 =\
    \ min;\n                min = lst[i];\n            } else if (lst[i] < min2) {\n\
    \                min2 = lst[i];\n            }\n        }\n        if (min2 ==\
    \ long.MaxValue) return null;\n        return min2;", "        if (lst.Count <\
    \ 2) {\n            return null;\n        }\n        long min = lst[0];\n    \
    \    long min2 = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < min) {\n                min2 = min;\n              \
    \  min = lst[i];\n            } else if (lst[i] < min2) {\n                min2\
    \ = lst[i];\n            }\n        }\n        if (min2 == long.MaxValue) {\n\
    \            return null;\n        }\n        return min2;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min1 = long.MaxValue;\n\
    \        long min2 = long.MaxValue;\n        foreach (long l in lst) {\n     \
    \       if (l < min1) {\n                min2 = min1;\n                min1 =\
    \ l;\n            } else if (l < min2) {\n                min2 = l;\n        \
    \    }\n        }\n        if (min2 == long.MaxValue) {\n            return null;\n\
    \        }\n        return min2;", "        if (lst.Count < 2) {\n           \
    \ return null;\n        }\n        long min = lst[0];\n        long min2 = lst[1];\n\
    \        if (min2 < min) {\n            min = min2;\n            min2 = lst[0];\n\
    \        }\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                min2 = min;\n                min = lst[i];\n     \
    \       } else if (lst[i] < min2) {\n                min2 = lst[i];\n        \
    \    }\n        }\n        return min2;", "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long min = lst[0];\n        long min2\
    \ = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                min2 = min;\n                min = lst[i];\n     \
    \       } else if (lst[i] < min2) {\n                min2 = lst[i];\n        \
    \    }\n        }\n        if (min2 == min) {\n            return null;\n    \
    \    }\n        return min2;", "        if (lst.Count < 2) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long secondMin = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                secondMin = min;\n                min = lst[i];\n       \
    \     } else if (lst[i] < secondMin) {\n                secondMin = lst[i];\n\
    \            }\n        }\n        if (secondMin == long.MaxValue) {\n       \
    \     return null;\n        }\n        return secondMin;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long smallest = lst[0];\n\
    \        long secondSmallest = long.MaxValue;\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                secondSmallest\
    \ = smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < secondSmallest) {\n                secondSmallest = lst[i];\n            }\n\
    \        }\n        if (secondSmallest == long.MaxValue) {\n            return\
    \ null;\n        }\n        return secondSmallest;", "        // TODO: implement\
    \ this function\n        return null;", "        if (lst.Count < 2) {\n      \
    \      return null;\n        }\n        long min = lst[0];\n        long nmin\
    \ = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                nmin = min;\n                min = lst[i];\n     \
    \       } else if (lst[i] < nmin) {\n                nmin = lst[i];\n        \
    \    }\n        }\n        if (nmin == min) {\n            return null;\n    \
    \    }\n        return nmin;", "        if (lst.Count < 2) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long min2 = lst[1];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min2 = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n \
    \       }\n        if (min2 == min) {\n            return null;\n        }\n \
    \       return min2;", "        if (lst.Count < 2) return null;\n        long\
    \ min = lst[0];\n        long min2 = long.MaxValue;\n        foreach (long x in\
    \ lst) {\n            if (x < min) {\n                min2 = min;\n          \
    \      min = x;\n            } else if (x < min2) {\n                min2 = x;\n\
    \            }\n        }\n        if (min2 == long.MaxValue) return null;\n \
    \       return min2;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long min = lst[0];\n        long min2 = lst[1];\n        if\
    \ (min > min2) {\n            min = min2;\n            min2 = lst[0];\n      \
    \  }\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] <\
    \ min) {\n                min2 = min;\n                min = lst[i];\n       \
    \     } else if (lst[i] < min2) {\n                min2 = lst[i];\n          \
    \  }\n        }\n        return min2;", "        if (lst.Count < 2) {\n      \
    \      return null;\n        }\n        long min = lst[0];\n        long nextSmallest\
    \ = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < min) {\n                nextSmallest = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < nextSmallest) {\n               \
    \ nextSmallest = lst[i];\n            }\n        }\n        if (nextSmallest ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return nextSmallest;",
  "        if (lst.Count == 0) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long second = long.MaxValue;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                second\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < second)\
    \ {\n                second = lst[i];\n            }\n        }\n        if (second\
    \ == long.MaxValue) {\n            return null;\n        }\n        return second;",
  "        // Your code here\n        return null;", "        if (lst.Count < 2) {\n\
    \            return null;\n        }\n        long min = lst[0];\n        long\
    \ min2 = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n     \
    \       if (lst[i] < min) {\n                min2 = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < min2) {\n                min2 = lst[i];\n\
    \            }\n        }\n        if (min2 == long.MaxValue) {\n            return\
    \ null;\n        }\n        return min2;", "        if (lst.Count < 2) {\n   \
    \         return null;\n        }\n        long min = lst[0];\n        long secondMin\
    \ = long.MaxValue;\n        foreach (long num in lst) {\n            if (num <\
    \ min) {\n                secondMin = min;\n                min = num;\n     \
    \       } else if (num < secondMin) {\n                secondMin = num;\n    \
    \        }\n        }\n        if (secondMin == long.MaxValue) {\n           \
    \ return null;\n        }\n        return secondMin;", "        // Your code goes\
    \ here.\n        return null;", "        if (lst.Count < 2) {\n            return\
    \ null;\n        }\n        long min = long.MaxValue;\n        long min2 = long.MaxValue;\n\
    \        foreach (long i in lst) {\n            if (i < min) {\n             \
    \   min2 = min;\n                min = i;\n            } else if (i < min2) {\n\
    \                min2 = i;\n            }\n        }\n        if (min2 == long.MaxValue)\
    \ {\n            return null;\n        }\n        return min2;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long min2 = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min2 = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < min2) {\n                min2 = lst[i];\n\
    \            }\n        }\n        if (min2 == min) {\n            return null;\n\
    \        }\n        return min2;", "        // Your code here\n        return\
    \ null;", "        if (lst.Count == 0) {\n            return null;\n        }\n\
    \        if (lst.Count == 1) {\n            return null;\n        }\n        if\
    \ (lst.Count == 2) {\n            if (lst[0] == lst[1]) {\n                return\
    \ null;\n            }\n            return lst[0] < lst[1] ? lst[0] : lst[1];\n\
    \        }\n        long min = lst[0];\n        long min2 = lst[1];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count < 2) {\n            return null;\n  \
    \      }\n        long smallest = lst[0];\n        long secondSmallest = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (secondSmallest == long.MaxValue)\
    \ {\n            return null;\n        }\n        return secondSmallest;", " \
    \       if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long nextMin = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                nextMin = min;\n  \
    \              min = lst[i];\n            } else if (lst[i] < nextMin) {\n   \
    \             nextMin = lst[i];\n            }\n        }\n        if (min ==\
    \ nextMin) {\n            return null;\n        }\n        return nextMin;", " \
    \       if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long nextMin = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                nextMin = min;\n  \
    \              min = lst[i];\n            } else if (lst[i] < nextMin) {\n   \
    \             nextMin = lst[i];\n            }\n        }\n        if (min ==\
    \ nextMin) {\n            return null;\n        }\n        return nextMin;", " \
    \       if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = long.MaxValue;\n        long min2 = long.MaxValue;\n        foreach (long\
    \ x in lst) {\n            if (x < min) {\n                min2 = min;\n     \
    \           min = x;\n            } else if (x < min2) {\n                min2\
    \ = x;\n            }\n        }\n        if (min2 == long.MaxValue) {\n     \
    \       return null;\n        }\n        return min2;", "        // TODO: Implement\
    \ this function.\n        return null;", "        if (lst.Count < 2) {\n     \
    \       return null;\n        }\n        long min = long.MaxValue;\n        long\
    \ nextMin = long.MaxValue;\n        foreach (long l in lst) {\n            if\
    \ (l < min) {\n                nextMin = min;\n                min = l;\n    \
    \        } else if (l < nextMin) {\n                nextMin = l;\n           \
    \ }\n        }\n        if (nextMin == long.MaxValue) {\n            return null;\n\
    \        }\n        return nextMin;", "        if (lst.Count < 2) {\n        \
    \    return null;\n        }\n        long min = lst[0];\n        long next =\
    \ long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                next = min;\n                min = lst[i];\n\
    \            } else if (lst[i] < next) {\n                next = lst[i];\n   \
    \         }\n        }\n        if (next == long.MaxValue) {\n            return\
    \ null;\n        }\n        return next;", "        // Your code here\n      \
    \  return null;", "        // TODO: Implement this function\n        return null;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next = long.MaxValue;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                next =\
    \ min;\n                min = lst[i];\n            } else if (lst[i] < next) {\n\
    \                next = lst[i];\n            }\n        }\n        if (next ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return next;",
  "        // Your code here\n        return null;", "        // TODO: Implement this\
    \ function\n        return null;", "        if (lst.Count < 2) {\n           \
    \ return null;\n        }\n        long min = lst[0];\n        long min2 = lst[1];\n\
    \        if (min2 < min) {\n            min = min2;\n            min2 = lst[0];\n\
    \        }\n        for (int i = 2; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                min2 = min;\n                min = lst[i];\n     \
    \       } else if (lst[i] < min2) {\n                min2 = lst[i];\n        \
    \    }\n        }\n        return min2;", "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long smallest = lst[0];\n        long\
    \ nextSmallest = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < smallest) {\n                nextSmallest = smallest;\n\
    \                smallest = lst[i];\n            } else if (lst[i] < nextSmallest)\
    \ {\n                nextSmallest = lst[i];\n            }\n        }\n      \
    \  if (nextSmallest == long.MaxValue) {\n            return null;\n        }\n\
    \        return nextSmallest;", "        // Your code here.\n        return null;",
  "        // Your code goes here.\n        return null;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long nextMin = lst[1];\n        if (min > nextMin) {\n            min =\
    \ nextMin;\n            nextMin = lst[0];\n        }\n        for (int i = 2;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                nextMin\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < nextMin)\
    \ {\n                nextMin = lst[i];\n            }\n        }\n        return\
    \ nextMin;", "        if (lst.Count < 2) {\n            return null;\n       \
    \ }\n        long min = lst[0];\n        long min2 = long.MaxValue;\n        foreach\
    \ (long x in lst) {\n            if (x < min) {\n                min2 = min;\n\
    \                min = x;\n            } else if (x < min2) {\n              \
    \  min2 = x;\n            }\n        }\n        if (min2 == long.MaxValue) {\n\
    \            return null;\n        }\n        return min2;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long min2 = lst[1];\n        if (min > min2) {\n            long tmp =\
    \ min;\n            min = min2;\n            min2 = tmp;\n        }\n        for\
    \ (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count < 2) {\n            return null;\n  \
    \      }\n        long smallest = lst[0];\n        long nextSmallest = lst[1];\n\
    \        if (smallest > nextSmallest) {\n            smallest = nextSmallest;\n\
    \            nextSmallest = lst[0];\n        }\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < smallest) {\n                nextSmallest =\
    \ smallest;\n                smallest = lst[i];\n            } else if (lst[i]\
    \ < nextSmallest) {\n                nextSmallest = lst[i];\n            }\n \
    \       }\n        return nextSmallest;", "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long min = lst[0];\n        long next\
    \ = long.MaxValue;\n        foreach (long i in lst) {\n            if (i < min)\
    \ {\n                next = min;\n                min = i;\n            } else\
    \ if (i < next) {\n                next = i;\n            }\n        }\n     \
    \   if (next == long.MaxValue) {\n            return null;\n        }\n      \
    \  return next;", "        long min = long.MaxValue;\n        long secondMin =\
    \ long.MaxValue;\n        foreach (long x in lst) {\n            if (x < min)\
    \ {\n                secondMin = min;\n                min = x;\n            }\
    \ else if (x < secondMin) {\n                secondMin = x;\n            }\n \
    \       }\n        if (secondMin == long.MaxValue) {\n            return null;\n\
    \        }\n        return secondMin;", "        if (lst.Count < 2) {\n      \
    \      return null;\n        }\n        long min = lst[0];\n        long min2\
    \ = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < min) {\n                min2 = min;\n                min = lst[i];\n\
    \            } else if (lst[i] < min2) {\n                min2 = lst[i];\n   \
    \         }\n        }\n        if (min2 == long.MaxValue) {\n            return\
    \ null;\n        }\n        return min2;", "        if (lst.Count < 2) {\n   \
    \         return null;\n        }\n        long min = lst[0];\n        long nextMin\
    \ = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                nextMin = min;\n                min = lst[i];\n  \
    \          } else if (lst[i] < nextMin) {\n                nextMin = lst[i];\n\
    \            }\n        }\n        if (min == nextMin) {\n            return null;\n\
    \        }\n        return nextMin;", "        if (lst.Count < 2) {\n        \
    \    return null;\n        }\n        long min = lst[0];\n        long next =\
    \ long.MaxValue;\n        foreach (long l in lst) {\n            if (l < min)\
    \ {\n                next = min;\n                min = l;\n            } else\
    \ if (l < next) {\n                next = l;\n            }\n        }\n     \
    \   if (next == long.MaxValue) {\n            return null;\n        }\n      \
    \  return next;", "        if (lst.Count < 2) {\n            return null;\n  \
    \      }\n        long min = lst[0];\n        long min2 = lst[1];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  if (min == min2) {\n            return null;\n        }\n        return min2;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ smallest = lst[0];\n        long nextSmallest = long.MaxValue;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest) {\n  \
    \              nextSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < nextSmallest) {\n                nextSmallest\
    \ = lst[i];\n            }\n        }\n        if (nextSmallest == long.MaxValue)\
    \ {\n            return null;\n        }\n        return nextSmallest;", "   \
    \     if (lst.Count == 0) {\n            return null;\n        }\n        if (lst.Count\
    \ == 1) {\n            return null;\n        }\n        long min = lst[0];\n \
    \       long next_min = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < min) {\n                next_min = min;\n          \
    \      min = lst[i];\n            } else if (lst[i] < next_min) {\n          \
    \      next_min = lst[i];\n            }\n        }\n        if (min == next_min)\
    \ {\n            return null;\n        }\n        return next_min;", "       \
    \ if (lst.Count == 0) {\n            return null;\n        }\n        long min\
    \ = lst[0];\n        long secondMin = long.MaxValue;\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < min) {\n                secondMin\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < secondMin)\
    \ {\n                secondMin = lst[i];\n            }\n        }\n        if\
    \ (secondMin == long.MaxValue) {\n            return null;\n        }\n      \
    \  return secondMin;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long min = lst[0];\n        long min2 = lst[1];\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  if (min2 == min) {\n            return null;\n        }\n        return min2;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next_min = lst[1];\n        for (int i = 1; i <\
    \ lst.Count; i++) {\n            if (lst[i] < min) {\n                next_min\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < next_min)\
    \ {\n                next_min = lst[i];\n            }\n        }\n        if\
    \ (min == next_min) {\n            return null;\n        }\n        return next_min;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                next = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < next) {\n         \
    \       next = lst[i];\n            }\n        }\n        if (min == next) {\n\
    \            return null;\n        }\n        return next;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long min2 = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < min) {\n                min2 = min;\n          \
    \      min = lst[i];\n            } else if (lst[i] < min2) {\n              \
    \  min2 = lst[i];\n            }\n        }\n        if (min2 == long.MaxValue)\
    \ {\n            return null;\n        }\n        return min2;", "        // Your\
    \ code here\n        return null;", "        // TODO: Implement\n        return\
    \ null;", "        // TODO: Implement this function.\n        return null;", " \
    \       if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min2 = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < min2) {\n         \
    \       min2 = lst[i];\n            }\n        }\n        if (min2 == min) {\n\
    \            return null;\n        }\n        return min2;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long min2 = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++)\
    \ {\n            if (lst[i] < min) {\n                min2 = min;\n          \
    \      min = lst[i];\n            } else if (lst[i] < min2) {\n              \
    \  min2 = lst[i];\n            }\n        }\n        if (min2 == long.MaxValue)\
    \ {\n            return null;\n        }\n        return min2;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long min2 = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                min2 = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < min2) {\n                min2 = lst[i];\n\
    \            }\n        }\n        if (min2 == min) {\n            return null;\n\
    \        }\n        return min2;", "        if (lst.Count < 2) {\n           \
    \ return null;\n        }\n        long min = lst[0];\n        long secondMin\
    \ = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i]\
    \ < min) {\n                secondMin = min;\n                min = lst[i];\n\
    \            } else if (lst[i] < secondMin) {\n                secondMin = lst[i];\n\
    \            }\n        }\n        if (min == secondMin) {\n            return\
    \ null;\n        }\n        return secondMin;", "        // TODO: Implement this\
    \ function\n        return null;", "        // TODO: Implement this function.\n\
    \        return null;", "        if (lst.Count == 0) {\n            return null;\n\
    \        }\n        if (lst.Count == 1) {\n            return null;\n        }\n\
    \        long min = lst[0];\n        long min2 = lst[1];\n        for (int i =\
    \ 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n                min2\
    \ = min;\n                min = lst[i];\n            } else if (lst[i] < min2)\
    \ {\n                min2 = lst[i];\n            }\n        }\n        if (min2\
    \ == min) {\n            return null;\n        }\n        return min2;", "   \
    \     // Your code here\n        return null;", "        if (lst.Count == 0) return\
    \ null;\n        if (lst.Count == 1) return null;\n        if (lst.Count == 2)\
    \ {\n            if (lst[0] == lst[1]) return null;\n            return Math.Min(lst[0],\
    \ lst[1]);\n        }\n        long min = lst[0];\n        long second = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                second = min;\n                min = lst[i];\n          \
    \  } else if (lst[i] < second) {\n                second = lst[i];\n         \
    \   }\n        }\n        if (second == long.MaxValue) return null;\n        return\
    \ second;", "        // Your code here\n        return null;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long next = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                next = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < next) {\n                next = lst[i];\n\
    \            }\n        }\n        if (min == next) {\n            return null;\n\
    \        }\n        return next;", "        if (lst.Count < 2) return null;\n\
    \        long min = lst[0];\n        long min2 = long.MaxValue;\n        for (int\
    \ i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  if (min2 == long.MaxValue) return null;\n        return min2;", "        if\
    \ (lst.Count < 2) {\n            return null;\n        }\n        long min = lst[0];\n\
    \        long min2 = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n\
    \            if (lst[i] < min) {\n                min2 = min;\n              \
    \  min = lst[i];\n            } else if (lst[i] < min2) {\n                min2\
    \ = lst[i];\n            }\n        }\n        if (min2 == min) {\n          \
    \  return null;\n        }\n        return min2;", "        if (lst.Count < 2)\
    \ {\n            return null;\n        }\n        long min = lst[0];\n       \
    \ long min2 = lst[1];\n        if (min > min2) {\n            min = min2;\n  \
    \          min2 = lst[0];\n        }\n        for (int i = 2; i < lst.Count; i++)\
    \ {\n            if (lst[i] < min) {\n                min2 = min;\n          \
    \      min = lst[i];\n            } else if (lst[i] < min2) {\n              \
    \  min2 = lst[i];\n            }\n        }\n        return min2;", "        if\
    \ (lst.Count == 0) {\n            return null;\n        }\n        if (lst.Count\
    \ == 1) {\n            return null;\n        }\n        if (lst.Count == 2) {\n\
    \            if (lst[0] == lst[1]) {\n                return null;\n         \
    \   }\n            return Math.Min(lst[0], lst[1]);\n        }\n        long min\
    \ = lst[0];\n        long second_min = lst[1];\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                second_min = min;\n\
    \                min = lst[i];\n            } else if (lst[i] < second_min) {\n\
    \                second_min = lst[i];\n            }\n        }\n        if (min\
    \ == second_min) {\n            return null;\n        }\n        return second_min;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next = long.MaxValue;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                next =\
    \ min;\n                min = lst[i];\n            } else if (lst[i] < next) {\n\
    \                next = lst[i];\n            }\n        }\n        if (next ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return next;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = long.MaxValue;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                min2 =\
    \ min;\n                min = lst[i];\n            } else if (lst[i] < min2) {\n\
    \                min2 = lst[i];\n            }\n        }\n        if (min2 ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return min2;"]
stop_tokens:
- "\n    }\n"
