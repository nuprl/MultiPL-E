name: HumanEval_90_next_smallest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of integers.\n    // Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    // Return None if there\
  \ is no such element.\n    // next_smallest([1, 2, 3, 4, 5]) == 2\n    // next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n    // next_smallest([]) == None\n    // next_smallest([1,\
  \ 1]) == None\n    public static Nullable<long> NextSmallest(List<long> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L}))).Equals(2L));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)5L, (long)1L, (long)4L,\
  \ (long)3L, (long)2L}))).Equals(2L));\n    Debug.Assert(NextSmallest((new List<long>())).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L}))).Equals(null));\n\
  \    Debug.Assert(NextSmallest((new List<long>(new long[]{(long)1L, (long)1L, (long)1L,\
  \ (long)1L, (long)0L}))).Equals(1L));\n    Debug.Assert(NextSmallest((new List<long>(new\
  \ long[]{(long)1L, (long)1L}))).Equals(null));\n    Debug.Assert(NextSmallest((new\
  \ List<long>(new long[]{(long)-35L, (long)34L, (long)12L, (long)-45L}))).Equals(-35L));\n\
  \    }\n\n}\n"
completions: ["        if (lst.Count < 2) {\n            return null;\n        }\n\
    \        long min = lst[0];\n        long nextMin = long.MaxValue;\n        for\
    \ (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min) {\n       \
    \         nextMin = min;\n                min = lst[i];\n            } else if\
    \ (lst[i] < nextMin) {\n                nextMin = lst[i];\n            }\n   \
    \     }\n        if (nextMin == long.MaxValue) {\n            return null;\n \
    \       }\n        return nextMin;", "        // Your code goes here\n       \
    \ return null;", "        // TODO: Implement this function\n        return null;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long next = long.MaxValue;\n        for (int i = 1; i\
    \ < lst.Count; i++) {\n            if (lst[i] < min) {\n                next =\
    \ min;\n                min = lst[i];\n            } else if (lst[i] < next) {\n\
    \                next = lst[i];\n            }\n        }\n        if (next ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return next;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long nextMin = lst[1];\n        if (min > nextMin) {\n\
    \            min = nextMin;\n            nextMin = lst[0];\n        }\n      \
    \  for (int i = 2; i < lst.Count; i++) {\n            if (lst[i] < min) {\n  \
    \              nextMin = min;\n                min = lst[i];\n            } else\
    \ if (lst[i] < nextMin) {\n                nextMin = lst[i];\n            }\n\
    \        }\n        return nextMin;", "        if (lst.Count < 2) {\n        \
    \    return null;\n        }\n        long min = lst[0];\n        long next_min\
    \ = lst[1];\n        if (next_min < min) {\n            min = next_min;\n    \
    \        next_min = lst[0];\n        }\n        for (int i = 2; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                next_min = min;\n \
    \               min = lst[i];\n            } else if (lst[i] < next_min) {\n \
    \               next_min = lst[i];\n            }\n        }\n        return next_min;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        if (min2 < min) {\n    \
    \        min = min2;\n            min2 = lst[0];\n        }\n        for (int\
    \ i = 2; i < lst.Count; i++) {\n            if (lst[i] < min) {\n            \
    \    min2 = min;\n                min = lst[i];\n            } else if (lst[i]\
    \ < min2) {\n                min2 = lst[i];\n            }\n        }\n      \
    \  return min2;", "        if (lst.Count < 2) {\n            return null;\n  \
    \      }\n        long min = long.MaxValue;\n        long secondMin = long.MaxValue;\n\
    \        foreach (long x in lst) {\n            if (x < min) {\n             \
    \   secondMin = min;\n                min = x;\n            } else if (x < secondMin)\
    \ {\n                secondMin = x;\n            }\n        }\n        if (secondMin\
    \ == long.MaxValue) {\n            return null;\n        }\n        return secondMin;",
  "        long min = long.MaxValue;\n        long nextMin = long.MaxValue;\n    \
    \    foreach (long x in lst) {\n            if (x < min) {\n                nextMin\
    \ = min;\n                min = x;\n            } else if (x < nextMin) {\n  \
    \              nextMin = x;\n            }\n        }\n        if (nextMin ==\
    \ long.MaxValue) {\n            return null;\n        }\n        return nextMin;",
  "        if (lst.Count < 2) {\n            return null;\n        }\n        long\
    \ min = lst[0];\n        long min2 = lst[1];\n        for (int i = 1; i < lst.Count;\
    \ i++) {\n            if (lst[i] < min) {\n                min2 = min;\n     \
    \           min = lst[i];\n            } else if (lst[i] < min2) {\n         \
    \       min2 = lst[i];\n            }\n        }\n        if (min2 == min) {\n\
    \            return null;\n        }\n        return min2;", "        // Your\
    \ code here\n        return null;", "        if (lst.Count < 2) {\n          \
    \  return null;\n        }\n        long min = lst[0];\n        long min2 = lst[1];\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min2 = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n \
    \       }\n        if (min2 == min) {\n            return null;\n        }\n \
    \       return min2;", "        if (lst.Count < 2) {\n            return null;\n\
    \        }\n        long smallest = lst[0];\n        long secondSmallest = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < smallest)\
    \ {\n                secondSmallest = smallest;\n                smallest = lst[i];\n\
    \            } else if (lst[i] < secondSmallest) {\n                secondSmallest\
    \ = lst[i];\n            }\n        }\n        if (secondSmallest == long.MaxValue)\
    \ {\n            return null;\n        }\n        return secondSmallest;", " \
    \       if (lst.Count < 2) return null;\n        long min = lst[0];\n        long\
    \ min2 = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n            if\
    \ (lst[i] < min) {\n                min2 = min;\n                min = lst[i];\n\
    \            } else if (lst[i] < min2) {\n                min2 = lst[i];\n   \
    \         }\n        }\n        if (min2 == min) return null;\n        return\
    \ min2;", "        if (lst.Count < 2) {\n            return null;\n        }\n\
    \        long min = long.MaxValue;\n        long min2 = long.MaxValue;\n     \
    \   foreach (long x in lst) {\n            if (x < min) {\n                min2\
    \ = min;\n                min = x;\n            } else if (x < min2) {\n     \
    \           min2 = x;\n            }\n        }\n        if (min2 == long.MaxValue)\
    \ {\n            return null;\n        }\n        return min2;", "        // Your\
    \ code goes here.\n        return null;", "        if (lst.Count < 2) {\n    \
    \        return null;\n        }\n        long min = lst[0];\n        long nextMin\
    \ = long.MaxValue;\n        for (int i = 1; i < lst.Count; i++) {\n          \
    \  if (lst[i] < min) {\n                nextMin = min;\n                min =\
    \ lst[i];\n            } else if (lst[i] < nextMin) {\n                nextMin\
    \ = lst[i];\n            }\n        }\n        if (nextMin == long.MaxValue) {\n\
    \            return null;\n        }\n        return nextMin;", "        if (lst.Count\
    \ < 2) {\n            return null;\n        }\n        long min = lst[0];\n  \
    \      long next = lst[1];\n        for (int i = 1; i < lst.Count; i++) {\n  \
    \          if (lst[i] < min) {\n                next = min;\n                min\
    \ = lst[i];\n            } else if (lst[i] < next) {\n                next = lst[i];\n\
    \            }\n        }\n        if (min == next) {\n            return null;\n\
    \        }\n        return next;", "        if (lst.Count == 0) {\n          \
    \  return null;\n        }\n        if (lst.Count == 1) {\n            return\
    \ null;\n        }\n        long min = lst[0];\n        long min2 = long.MaxValue;\n\
    \        for (int i = 1; i < lst.Count; i++) {\n            if (lst[i] < min)\
    \ {\n                min2 = min;\n                min = lst[i];\n            }\
    \ else if (lst[i] < min2) {\n                min2 = lst[i];\n            }\n \
    \       }\n        if (min2 == long.MaxValue) {\n            return null;\n  \
    \      }\n        return min2;", "        // TODO: Implement this function\n \
    \       return null;"]
stop_tokens:
- "\n    }\n"
