name: HumanEval_117_select_words
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // select_words(\"Mary had a little lamb\"\
  , 4) ==> [\"little\"]\n    // select_words(\"Mary had a little lamb\", 3) ==> [\"\
  Mary\", \"lamb\"]\n    // select_words(\"simple white space\", 2) ==> []\n    //\
  \ select_words(\"Hello world\", 4) ==> [\"world\"]\n    // select_words(\"Uncle\
  \ sam\", 3) ==> [\"Uncle\"]\n    public static List<string> SelectWords(string s,\
  \ long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
  Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
  little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
  \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
  simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
  Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
  \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
  \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
  \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
  \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
  f\"}))));\n    }\n\n}\n"
completions: ["        var words = s.Split(' ');\n        var result = new List<string>();\n\
    \        foreach (var word in words) {\n            if (word.Count(c => !\"aeiou\"\
    .Contains(c)) == n) {\n                result.Add(word);\n            }\n    \
    \    }\n        return result;", "        List<string> words = new List<string>();\n\
    \        string[] words_in_s = s.Split(' ');\n        foreach (string word in\
    \ words_in_s) {\n            if (CountConsonants(word) == n) {\n             \
    \   words.Add(word);\n            }\n        }\n        return words;", "    \
    \    // TODO: implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return null;", "        // TODO: Implement\
    \ this function\n        return null;", "        // TODO\n        return null;",
  "        // TODO: implement this function\n        return null;", "        var words\
    \ = s.Split(' ');\n        var result = new List<string>();\n        foreach (var\
    \ word in words) {\n            var consonants = 0;\n            foreach (var\
    \ letter in word) {\n                if (letter != 'a' && letter != 'e' && letter\
    \ != 'i' && letter != 'o' && letter != 'u') {\n                    consonants++;\n\
    \                }\n            }\n            if (consonants == n) {\n      \
    \          result.Add(word);\n            }\n        }\n        return result;",
  "        // TODO: implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return null;", "        // TODO: Implement\
    \ this function\n        return null;", "        // TODO: Implement this function\n\
    \        return null;", "        // TODO: Implement this function\n        return\
    \ null;", "        // TODO: Implement this function\n        return null;", " \
    \       // TODO: Implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return null;", "        // TODO: Implement\
    \ this function\n        return null;", "        // TODO: Implement this function\n\
    \        return null;", "        // TODO: implement this function\n        return\
    \ null;", "        // TODO: Implement this function\n        return null;"]
stop_tokens:
- "\n    }\n"
