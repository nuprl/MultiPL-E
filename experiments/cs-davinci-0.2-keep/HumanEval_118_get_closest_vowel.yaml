name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\"\
  ) ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
  ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        // TODO: Implement your solution here\n        return \"\";",
  "        // your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var closestVowel = new char();\n        var closestVowelIndex = -1;\n \
    \       for (var i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (i == word.Length - 1) {\n                    continue;\n\
    \                }\n                if (consonants.Contains(word[i + 1])) {\n\
    \                    closestVowel = word[i];\n                    closestVowelIndex\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        if (closestVowelIndex == -1) {\n            return \"\";\n      \
    \  }\n        for (var i = closestVowelIndex - 1; i >= 0; i--) {\n           \
    \ if (consonants.Contains(word[i])) {\n                return closestVowel.ToString();\n\
    \            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement this method\n        return \"\"\
    ;", "        // Your code goes here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // TODO: Implement your solution here.\n        return \"\"\
    ;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var result = string.Empty;\n        var closest = int.MaxValue;\n     \
    \   for (var i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                var j = i - 1;\n                while (j >= 0 && !consonants.Contains(word[j]))\
    \ {\n                    j--;\n                }\n                if (j >= 0 &&\
    \ i - j < closest) {\n                    closest = i - j;\n                 \
    \   result = word[i].ToString();\n                }\n            }\n        }\n\
    \        return result;", "        // Your code goes here\n        return null;",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var lastConsonant\
    \ = -1;\n        var closestVowel = -1;\n        for (var i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n          \
    \      lastConsonant = i;\n                break;\n            }\n        }\n\
    \        for (var i = lastConsonant - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closestVowel = i;\n                break;\n            }\n\
    \        }\n        return closestVowel == -1 ? \"\" : word[closestVowel].ToString();",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel\
    \ = ' ';\n        var closestVowelIndex = -1;\n        var closestConsonantIndex\
    \ = -1;\n        for (var i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                if (closestVowelIndex == -1) {\n\
    \                    closestVowelIndex = i;\n                    closestVowel\
    \ = word[i];\n                }\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (closestVowelIndex != -1 && closestConsonantIndex == -1)\
    \ {\n                    closestConsonantIndex = i;\n                    break;\n\
    \                }\n            }\n        }\n        if (closestVowelIndex !=\
    \ -1 && closestConsonantIndex != -1) {\n            return closestVowel.ToString();\n\
    \        }\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        int index = word.Length - 1;\n        while (index >= 0) {\n\
    \            if (word[index] == 'a' || word[index] == 'e' || word[index] == 'i'\
    \ || word[index] == 'o' || word[index] == 'u') {\n                return word[index].ToString();\n\
    \            }\n            index--;\n        }\n        return \"\";", "    \
    \    // TODO: Implement your solution here\n        return \"\";", "        var\
    \ vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result = new\
    \ StringBuilder();\n        var lastConsonant = -1;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n     \
    \           lastConsonant = i;\n                break;\n            }\n      \
    \  }\n        if (lastConsonant == -1) {\n            return \"\";\n        }\n\
    \        for (int i = lastConsonant - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                result.Append(word[i]);\n                break;\n       \
    \     }\n        }\n        return result.ToString();", "        // your code\
    \ here\n        return \"\";", "        // your code here\n        return \"\"\
    ;", "        // Your code goes here\n        return \"\";", "        // TODO:\
    \ Implement your code here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var closestVowel = '\\0';\n        var closestVowelDistance\
    \ = int.MaxValue;\n        for (var i = word.Length - 1; i >= 0; i--) {\n    \
    \        if (vowels.Contains(word[i])) {\n                var distance = word.Length\
    \ - i;\n                if (distance < closestVowelDistance) {\n             \
    \       closestVowelDistance = distance;\n                    closestVowel = word[i];\n\
    \                }\n            }\n            if (consonants.Contains(word[i]))\
    \ {\n                break;\n            }\n        }\n        return closestVowel\
    \ == '\\0' ? \"\" : closestVowel.ToString();", "        // your code here\n  \
    \      return \"\";", "        // TODO: Implement your solution here\n       \
    \ return \"\";", "        // Your code goes here\n        return \"\";", "   \
    \     var vowels = new[] { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = new[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var wordArray = word.ToCharArray();\n\
    \        var lastVowelIndex = -1;\n        var firstConsonantIndex = -1;\n   \
    \     for (int i = wordArray.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(wordArray[i]))\
    \ {\n                lastVowelIndex = i;\n                break;\n           \
    \ }\n        }\n        for (int i = lastVowelIndex - 1; i >= 0; i--) {\n    \
    \        if (consonants.Contains(wordArray[i])) {\n                firstConsonantIndex\
    \ = i;\n                break;\n            }\n        }\n        if (firstConsonantIndex\
    \ == -1) {\n            return \"\";\n        }\n        return wordArray[lastVowelIndex].ToString();",
  "        // your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // Your code goes here.\n        return \"\";",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel\
    \ = '\\0';\n        var closestVowelIndex = -1;\n        for (var i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       if (closestVowelIndex == -1) {\n                    closestVowel = word[i];\n\
    \                    closestVowelIndex = i;\n                }\n             \
    \   else {\n                    if (i < closestVowelIndex) {\n               \
    \         closestVowel = word[i];\n                        closestVowelIndex =\
    \ i;\n                    }\n                }\n            }\n            else\
    \ if (consonants.Contains(word[i])) {\n                if (closestVowelIndex !=\
    \ -1) {\n                    return closestVowel.ToString();\n               \
    \ }\n            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        if (word.Length < 3) return \"\";\n        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var closest = new char?();\n        var\
    \ closestDistance = int.MaxValue;\n        for (var i = word.Length - 1; i >=\
    \ 0; i--) {\n            if (vowels.Contains(word[i])) {\n                var\
    \ distance = word.Length - i;\n                if (distance < closestDistance)\
    \ {\n                    closest = word[i];\n                    closestDistance\
    \ = distance;\n                }\n            }\n        }\n        return closest.HasValue\
    \ ? closest.ToString() : \"\";", "        // your code here\n        return \"\
    \";", "        // TODO: Implement your solution here\n        return \"\";", " \
    \       // Your code goes here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // Your code here\n        return \"\"\
    ;", "        // TODO: Implement your code here\n        return \"\";", "     \
    \   // TODO: Implement your solution here\n        return \"\";", "        //\
    \ TODO: Implement your solution here\n        return \"\";", "        // your\
    \ code here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        string vowels = \"aeiou\";\n        string\
    \ result = \"\";\n        int min = word.Length;\n        for (int i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       int j = i - 1;\n                while (j >= 0 && !vowels.Contains(word[j]))\
    \ {\n                    j--;\n                }\n                if (j >= 0)\
    \ {\n                    int k = i + 1;\n                    while (k < word.Length\
    \ && !vowels.Contains(word[k])) {\n                        k++;\n            \
    \        }\n                    if (k < word.Length) {\n                     \
    \   if (k - i < min) {\n                            min = k - i;\n           \
    \                 result = word[i].ToString();\n                        }\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ result;", "        // Your code here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var closest = new List<char>();\n        var\
    \ closest_index = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n\
    \            if (vowels.Contains(word[i])) {\n                closest.Add(word[i]);\n\
    \                closest_index = i;\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (closest.Count > 0) {\n                    break;\n  \
    \              }\n            }\n        }\n        if (closest.Count == 0) {\n\
    \            return \"\";\n        }\n        var closest_char = closest[0];\n\
    \        for (int i = closest_index - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closest_char = word[i];\n            } else if (consonants.Contains(word[i]))\
    \ {\n                break;\n            }\n        }\n        return closest_char.ToString();",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var lastConsonant\
    \ = -1;\n        var closestVowel = -1;\n        for (var i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n              \
    \  closestVowel = i;\n            } else if (consonants.Contains(word[i])) {\n\
    \                lastConsonant = i;\n                break;\n            }\n \
    \       }\n        if (lastConsonant == -1 || closestVowel == -1) {\n        \
    \    return \"\";\n        }\n        return word[closestVowel].ToString();",
  "        // TODO: Implement this function\n        return \"\";", "        var vowels\
    \ = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new\
    \ HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result = \"\";\n\
    \        var lastConsonant = -1;\n        var lastVowel = -1;\n        for (var\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                lastVowel = i;\n                if (lastConsonant != -1)\
    \ {\n                    result = word[lastVowel].ToString();\n              \
    \      break;\n                }\n            } else if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n            }\n        }\n        return\
    \ result;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u'\
    \ };\n        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n\
    \        var lastConsonant = -1;\n        var closestVowel = -1;\n        for\
    \ (var i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closestVowel = i;\n            } else if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n                break;\n            }\n\
    \        }\n        if (lastConsonant == -1 || closestVowel == -1) {\n       \
    \     return \"\";\n        }\n        return word[closestVowel].ToString();",
  "        // your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var lastConsonant = -1;\n        var lastVowel\
    \ = -1;\n        for (var i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                lastVowel = i;\n             \
    \   if (lastConsonant != -1) {\n                    break;\n                }\n\
    \            } else if (consonants.Contains(word[i])) {\n                lastConsonant\
    \ = i;\n                if (lastVowel != -1) {\n                    break;\n \
    \               }\n            }\n        }\n        if (lastConsonant == -1 ||\
    \ lastVowel == -1) {\n            return \"\";\n        }\n        return word[lastVowel].ToString();",
  "        // Your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // Your code goes here\n    \
    \    return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        var vowels\
    \ = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new\
    \ HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel = '\\\
    0';\n        var closestVowelDistance = int.MaxValue;\n        for (var i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       if (i + 1 < word.Length && consonants.Contains(word[i + 1])) {\n     \
    \               if (i - 1 >= 0 && consonants.Contains(word[i - 1])) {\n      \
    \                  if (i < closestVowelDistance) {\n                         \
    \   closestVowelDistance = i;\n                            closestVowel = word[i];\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return closestVowel == '\\0' ? \"\" : closestVowel.ToString();",
  "        // TODO: Implement this method\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        var vowels = new\
    \ HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char>\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        var result = string.Empty;\n      \
    \  var closest = int.MaxValue;\n        for (var i = word.Length - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                var j =\
    \ i - 1;\n                while (j >= 0 && !consonants.Contains(word[j])) {\n\
    \                    j--;\n                }\n                if (j >= 0 && consonants.Contains(word[j]))\
    \ {\n                    var k = i + 1;\n                    while (k < word.Length\
    \ && !consonants.Contains(word[k])) {\n                        k++;\n        \
    \            }\n                    if (k < word.Length && consonants.Contains(word[k]))\
    \ {\n                        var distance = k - j;\n                        if\
    \ (distance < closest) {\n                            closest = distance;\n  \
    \                          result = word[i].ToString();\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \       return result;", "        // TODO: Implement your solution here\n    \
    \    return \"\";", "        // your code here\n        return \"\";", "     \
    \   string vowels = \"aeiouAEIOU\";\n        for (int i = word.Length - 1; i >=\
    \ 0; i--) {\n            if (vowels.Contains(word[i])) {\n                for\
    \ (int j = i - 1; j >= 0; j--) {\n                    if (!vowels.Contains(word[j]))\
    \ {\n                        return word[i].ToString();\n                    }\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result = new\
    \ List<char>();\n        for (int i = word.Length - 1; i >= 0; i--) {\n      \
    \      if (consonants.Contains(word[i])) {\n                result.Add(word[i]);\n\
    \                if (result.Count == 2) {\n                    break;\n      \
    \          }\n            }\n        }\n        if (result.Count != 2) {\n   \
    \         return \"\";\n        }\n        var closestVowel = ' ';\n        var\
    \ closestVowelIndex = -1;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                if (closestVowelIndex\
    \ == -1) {\n                    closestVowelIndex = i;\n                    closestVowel\
    \ = word[i];\n                }\n                if (i > closestVowelIndex) {\n\
    \                    break;\n                }\n                closestVowelIndex\
    \ = i;\n                closestVowel = word[i];\n            }\n        }\n  \
    \      return closestVowel.ToString();", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var lastConsonant = -1;\n        for (int i =\
    \ word.Length - 1; i >= 0; i--) {\n            if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n                break;\n            }\n\
    \        }\n        if (lastConsonant == -1) {\n            return \"\";\n   \
    \     }\n        var closestVowel = -1;\n        for (int i = lastConsonant -\
    \ 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n           \
    \     closestVowel = i;\n                break;\n            }\n        }\n  \
    \      if (closestVowel == -1) {\n            return \"\";\n        }\n      \
    \  return word[closestVowel].ToString();", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var result = new List<char>();\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                result.Add(word[i]);\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (result.Count > 0) {\n                    return result.Last().ToString();\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ // TODO: implement this method\n        return \"\";", '        throw new NotImplementedException();',
  "        // Your code goes here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        var vowels = new List<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new List<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var wordList = word.ToList();\n        var vowelList\
    \ = new List<char>();\n        var consonantList = new List<char>();\n       \
    \ for (int i = 0; i < wordList.Count; i++) {\n            if (vowels.Contains(wordList[i]))\
    \ {\n                vowelList.Add(wordList[i]);\n            }\n            if\
    \ (consonants.Contains(wordList[i])) {\n                consonantList.Add(wordList[i]);\n\
    \            }\n        }\n        if (vowelList.Count == 0 || consonantList.Count\
    \ == 0) {\n            return \"\";\n        }\n        var vowelIndex = 0;\n\
    \        var consonantIndex = 0;\n        var vowelIndexList = new List<int>();\n\
    \        var consonantIndexList = new List<int>();\n        for (int i = 0; i\
    \ < wordList.Count; i++) {\n            if (vowelList.Contains(wordList[i])) {\n\
    \                vowelIndexList.Add(i);\n            }\n            if (consonantList.Contains(wordList[i]))\
    \ {\n                consonantIndexList.Add(i);\n            }\n        }\n  \
    \      var vowelIndexListCount = vowelIndexList.Count;\n        var consonantIndexListCount\
    \ = consonantIndexList.Count;\n        var vowelIndexListCountMinusOne = vowelIndexListCount\
    \ - 1;\n        var consonantIndexListCountMinusOne = consonantIndexListCount\
    \ - 1;\n        var vowelIndexListCountMinusTwo = vowelIndexListCount - 2;\n \
    \       var consonantIndexListCountMinusTwo = consonantIndexListCount - 2;\n \
    \       var vowelIndexListCountMinusThree = vowelIndexListCount -", "        //\
    \ Your code goes here\n        return \"\";", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var lastConsonant = -1;\n        var closestVowel\
    \ = -1;\n        for (var i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (consonants.Contains(word[i])) {\n                lastConsonant = i;\n     \
    \           break;\n            }\n        }\n        for (var i = lastConsonant\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       closestVowel = i;\n                break;\n            }\n        }\n\
    \        return closestVowel == -1 ? \"\" : word[closestVowel].ToString();", " \
    \       // TODO: Implement your solution here\n        return \"\";", "      \
    \  // TODO: Implement your solution here\n        return \"\";", "        // TODO:\
    \ Implement your solution here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result\
    \ = \"\";\n        var lastConsonant = -1;\n        for (var i = word.Length -\
    \ 1; i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n       \
    \         lastConsonant = i;\n                break;\n            }\n        }\n\
    \        if (lastConsonant == -1) {\n            return result;\n        }\n \
    \       var closestVowel = -1;\n        for (var i = lastConsonant - 1; i >= 0;\
    \ i--) {\n            if (vowels.Contains(word[i])) {\n                closestVowel\
    \ = i;\n                break;\n            }\n        }\n        if (closestVowel\
    \ == -1) {\n            return result;\n        }\n        return word[closestVowel].ToString();",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result\
    \ = string.Empty;\n        var distance = int.MaxValue;\n        for (var i =\
    \ word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n\
    \                var j = i - 1;\n                while (j >= 0 && !consonants.Contains(word[j]))\
    \ {\n                    j--;\n                }\n                if (j >= 0)\
    \ {\n                    var k = i + 1;\n                    while (k < word.Length\
    \ && !consonants.Contains(word[k])) {\n                        k++;\n        \
    \            }\n                    if (k < word.Length) {\n                 \
    \       var d = k - j;\n                        if (d < distance) {\n        \
    \                    distance = d;\n                            result = word[i].ToString();\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return result;", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var closest = \"\";\n        var closestDistance\
    \ = int.MaxValue;\n        for (var i = word.Length - 1; i >= 0; i--) {\n    \
    \        if (vowels.Contains(word[i])) {\n                var distance = word.Length\
    \ - i;\n                if (distance < closestDistance) {\n                  \
    \  closestDistance = distance;\n                    closest = word[i].ToString();\n\
    \                }\n            }\n            else if (consonants.Contains(word[i]))\
    \ {\n                if (closestDistance != int.MaxValue) {\n                \
    \    return closest;\n                }\n            }\n        }\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        var vowels = new\
    \ HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char>\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        var closest = \"\";\n        var closestDistance\
    \ = int.MaxValue;\n        for (var i = word.Length - 1; i >= 0; i--) {\n    \
    \        if (vowels.Contains(word[i])) {\n                var distance = word.Length\
    \ - i;\n                if (distance < closestDistance) {\n                  \
    \  closestDistance = distance;\n                    closest = word[i].ToString();\n\
    \                }\n            }\n            else if (consonants.Contains(word[i]))\
    \ {\n                break;\n            }\n        }\n        return closest;",
  "        // TODO: Implement this method\n        return \"\";", "        // your\
    \ code here\n        return \"\";", "        var vowels = new HashSet<char>(\"\
    aeiouAEIOU\");\n        var consonants = new HashSet<char>(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    );\n        var closestVowel = '\\0';\n        var closestVowelDistance = int.MaxValue;\n\
    \        var lastConsonant = '\\0';\n        for (var i = word.Length - 1; i >=\
    \ 0; i--) {\n            var c = word[i];\n            if (vowels.Contains(c))\
    \ {\n                if (lastConsonant != '\\0') {\n                    var distance\
    \ = word.Length - i - 1;\n                    if (distance < closestVowelDistance)\
    \ {\n                        closestVowel = c;\n                        closestVowelDistance\
    \ = distance;\n                    }\n                }\n            } else if\
    \ (consonants.Contains(c)) {\n                lastConsonant = c;\n           \
    \ }\n        }\n        return closestVowel == '\\0' ? \"\" : closestVowel.ToString();",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // TODO: Implement your solution here\n        return \"\";", "        // Your\
    \ code goes here\n        return \"\";", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var result = new List<char>();\n        for (int\
    \ i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                result.Add(word[i]);\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (result.Count > 0) {\n                    return result.Last().ToString();\n\
    \                }\n            }\n        }\n        return \"\";", "       \
    \ // your code here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // TODO: Implement your solution here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement your solution here\n        return\
    \ null;", "        // TODO: Implement this method\n        return \"\";", "  \
    \      // your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        string vowels = \"aeiou\";\n\
    \        int closest = -1;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                closest = i;\n\
    \                break;\n            }\n        }\n        if (closest == -1)\
    \ {\n            return \"\";\n        }\n        for (int i = closest - 1; i\
    \ >= 0; i--) {\n            if (!vowels.Contains(word[i])) {\n               \
    \ return word[closest].ToString();\n            }\n        }\n        return \"\
    \";", "        // Your code here\n        return \"\";", "        string vowels\
    \ = \"aeiouAEIOU\";\n        string result = \"\";\n        int min = word.Length;\n\
    \        for (int i = 0; i < word.Length; i++) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (i > 0 && !vowels.Contains(word[i - 1])) {\n         \
    \           if (i < min) {\n                        min = i;\n               \
    \         result = word[i].ToString();\n                    }\n              \
    \  }\n                if (i < word.Length - 1 && !vowels.Contains(word[i + 1]))\
    \ {\n                    if (word.Length - i - 1 < min) {\n                  \
    \      min = word.Length - i - 1;\n                        result = word[i].ToString();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        // TODO: Implement your code here\n        return \"\";",
  "        // Your code goes here\n        return \"\";", "        // Your code goes\
    \ here\n        return \"\";", "        // your code here\n        return \"\"\
    ;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var result = \"\";\n        var lastConsonant = -1;\n        for (var i\
    \ = word.Length - 1; i >= 0; i--) {\n            if (consonants.Contains(word[i]))\
    \ {\n                lastConsonant = i;\n                break;\n            }\n\
    \        }\n        if (lastConsonant == -1) {\n            return result;\n \
    \       }\n        var closestVowel = -1;\n        for (var i = lastConsonant\
    \ - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n         \
    \       closestVowel = i;\n                break;\n            }\n        }\n\
    \        if (closestVowel == -1) {\n            return result;\n        }\n  \
    \      return word[closestVowel].ToString();", "        var vowels = new HashSet<char>\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new HashSet<char> { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        var closestVowel = ' ';\n        var closestVowelIndex\
    \ = -1;\n        for (var i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                if (closestVowelIndex == -1) {\n\
    \                    closestVowel = word[i];\n                    closestVowelIndex\
    \ = i;\n                }\n                else {\n                    if (i <\
    \ closestVowelIndex) {\n                        closestVowel = word[i];\n    \
    \                    closestVowelIndex = i;\n                    }\n         \
    \       }\n            }\n            else if (consonants.Contains(word[i])) {\n\
    \                if (closestVowelIndex != -1) {\n                    if (i < closestVowelIndex)\
    \ {\n                        return closestVowel.ToString();\n               \
    \     }\n                }\n            }\n        }\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        // TODO: implement\
    \ your code here\n        return \"\";", "        string vowels = \"aeiou\";\n\
    \        string result = \"\";\n        int index = word.Length - 1;\n       \
    \ while (index > 0) {\n            if (vowels.Contains(word[index])) {\n     \
    \           if (!vowels.Contains(word[index - 1])) {\n                    result\
    \ = word[index].ToString();\n                    break;\n                }\n \
    \           }\n            index--;\n        }\n        return result;", "   \
    \     // TODO: Implement your solution here\n        return \"\";", "        //\
    \ TODO: Implement your solution here\n        return \"\";", "        string vowels\
    \ = \"aeiou\";\n        for (int i = word.Length - 1; i >= 0; i--) {\n       \
    \     if (vowels.Contains(word[i])) {\n                if (i == word.Length -\
    \ 1) {\n                    return \"\";\n                }\n                if\
    \ (vowels.Contains(word[i + 1])) {\n                    continue;\n          \
    \      }\n                return word[i].ToString();\n            }\n        }\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        string vowels = \"aeiou\"\
    ;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            char c =\
    \ word[i];\n            if (vowels.Contains(c)) {\n                if (i > 0 &&\
    \ !vowels.Contains(word[i - 1])) {\n                    return c.ToString();\n\
    \                }\n                if (i < word.Length - 1 && !vowels.Contains(word[i\
    \ + 1])) {\n                    return c.ToString();\n                }\n    \
    \        }\n        }\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // Your code goes here\n    \
    \    return \"\";", "        // TODO: Implement your solution here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel\
    \ = ' ';\n        var closestVowelDistance = int.MaxValue;\n        for (var i\
    \ = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                var distance = word.Length - i;\n                if (distance\
    \ < closestVowelDistance) {\n                    closestVowelDistance = distance;\n\
    \                    closestVowel = word[i];\n                }\n            }\n\
    \            if (consonants.Contains(word[i])) {\n                break;\n   \
    \         }\n        }\n        return closestVowel == ' ' ? \"\" : closestVowel.ToString();",
  "        // Your code goes here\n        return \"\";", "        // TODO: Implement\
    \ this method\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        // TODO: Implement your solution here\n        return \"\";", "       \
    \ // Your code goes here\n        return \"\";", "        // TODO: Write your\
    \ code here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        //\
    \ TODO: Implement your solution here\n        return \"\";", "        var vowels\
    \ = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new\
    \ HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel = new\
    \ HashSet<char>();\n        var closestConsonant = new HashSet<char>();\n    \
    \    for (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closestVowel.Add(word[i]);\n            }\n            if\
    \ (consonants.Contains(word[i])) {\n                closestConsonant.Add(word[i]);\n\
    \            }\n            if (closestVowel.Count > 0 && closestConsonant.Count\
    \ > 0) {\n                break;\n            }\n        }\n        if (closestVowel.Count\
    \ > 0 && closestConsonant.Count > 0) {\n            return closestVowel.First().ToString();\n\
    \        }\n        return \"\";", "        // Your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        var\
    \ vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants\
    \ = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var lastConsonant\
    \ = -1;\n        var closestVowel = -1;\n        for (var i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n          \
    \      lastConsonant = i;\n                break;\n            }\n        }\n\
    \        for (var i = lastConsonant - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closestVowel = i;\n                break;\n            }\n\
    \        }\n        return closestVowel == -1 ? \"\" : word[closestVowel].ToString();",
  '        return "";', "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'\
    \ };\n        var result = \"\";\n        var lastVowel = ' ';\n        var lastConsonant\
    \ = ' ';\n        for (var i = word.Length - 1; i >= 0; i--) {\n            var\
    \ c = word[i];\n            if (vowels.Contains(c)) {\n                lastVowel\
    \ = c;\n            } else if (consonants.Contains(c)) {\n                lastConsonant\
    \ = c;\n                if (lastVowel != ' ') {\n                    result =\
    \ lastVowel.ToString();\n                    break;\n                }\n     \
    \       }\n        }\n        return result;", "        // your code here\n  \
    \      return \"\";", "        // Your code goes here\n        return \"\";",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result\
    \ = \"\";\n        var lastConsonantIndex = -1;\n        for (var i = word.Length\
    \ - 1; i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n     \
    \           lastConsonantIndex = i;\n                break;\n            }\n \
    \       }\n        if (lastConsonantIndex == -1) {\n            return result;\n\
    \        }\n        for (var i = lastConsonantIndex - 1; i >= 0; i--) {\n    \
    \        if (vowels.Contains(word[i])) {\n                result = word[i].ToString();\n\
    \                break;\n            }\n        }\n        return result;", " \
    \       // your code here\n        return \"\";", "        // Write your code\
    \ here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        var vowels\
    \ = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var consonants = new\
    \ HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result = new StringBuilder();\n\
    \        var prev = ' ';\n        var prevprev = ' ';\n        foreach (var c\
    \ in word.Reverse()) {\n            if (vowels.Contains(c)) {\n              \
    \  if (consonants.Contains(prev) && consonants.Contains(prevprev)) {\n       \
    \             result.Append(c);\n                    break;\n                }\n\
    \            }\n            prevprev = prev;\n            prev = c;\n        }\n\
    \        return new string(result.ToString().Reverse().ToArray());", "       \
    \ // your code here\n        return \"\";", "        string vowels = \"aeiou\"\
    ;\n        int closest = -1;\n        for (int i = word.Length - 1; i >= 0; i--)\
    \ {\n            if (vowels.Contains(word[i])) {\n                closest = i;\n\
    \                break;\n            }\n        }\n        if (closest == -1)\
    \ {\n            return \"\";\n        }\n        for (int i = closest - 1; i\
    \ >= 0; i--) {\n            if (!vowels.Contains(word[i])) {\n               \
    \ return word[closest].ToString();\n            }\n        }\n        return \"\
    \";", "        // TODO: Implement your solution here\n        return \"\";", " \
    \       // TODO: Implement your solution here\n        return \"\";", "      \
    \  // TODO: Implement your solution here\n        return \"\";", "        // Your\
    \ code here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // Your code goes here\n        return \"\";", "        //\
    \ Your code goes here\n        return \"\";", "        string vowels = \"aeiou\"\
    ;\n        string result = \"\";\n        int min = int.MaxValue;\n        for\
    \ (int i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (i == word.Length - 1) {\n                    continue;\n\
    \                }\n                if (vowels.Contains(word[i + 1])) {\n    \
    \                continue;\n                }\n                if (i == 0) {\n\
    \                    continue;\n                }\n                if (vowels.Contains(word[i\
    \ - 1])) {\n                    continue;\n                }\n               \
    \ int distance = word.Length - i;\n                if (distance < min) {\n   \
    \                 min = distance;\n                    result = word[i].ToString();\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   // your code here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // Your code goes here\n        return \"\";",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        int closest\
    \ = -1;\n        for (int i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                if (i < word.Length - 1 && consonants.Contains(word[i\
    \ + 1])) {\n                    closest = i;\n                    break;\n   \
    \             }\n            }\n        }\n        if (closest == -1) {\n    \
    \        return \"\";\n        }\n        return word[closest].ToString();", " \
    \       var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel\
    \ = '\\0';\n        var closestDistance = int.MaxValue;\n        for (var i =\
    \ word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i])) {\n\
    \                var distance = word.Length - i;\n                if (distance\
    \ < closestDistance) {\n                    closestDistance = distance;\n    \
    \                closestVowel = word[i];\n                }\n            }\n \
    \           else if (consonants.Contains(word[i])) {\n                if (closestVowel\
    \ != '\\0') {\n                    return closestVowel.ToString();\n         \
    \       }\n            }\n        }\n        return string.Empty;", "        //\
    \ your code here\n        return \"\";", "        // Your code goes here\n   \
    \     return \"\";", "        string vowels = \"aeiou\";\n        string consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n        int index = word.Length - 1;\n       \
    \ while (index >= 0) {\n            if (consonants.Contains(word[index])) {\n\
    \                for (int i = index - 1; i >= 0; i--) {\n                    if\
    \ (vowels.Contains(word[i])) {\n                        return word[i].ToString();\n\
    \                    }\n                }\n            }\n            index--;\n\
    \        }\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var result\
    \ = new List<char>();\n        for (int i = word.Length - 1; i >= 0; i--) {\n\
    \            if (vowels.Contains(word[i])) {\n                result.Add(word[i]);\n\
    \            } else if (consonants.Contains(word[i])) {\n                if (result.Count\
    \ > 0) {\n                    return result.Last().ToString();\n             \
    \   }\n            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        var vowels = new HashSet<char>(\"aeiouAEIOU\");\n        var\
    \ consonants = new HashSet<char>(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    );\n        var closest = \"\";\n        var closestDistance = int.MaxValue;\n\
    \        for (var i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                var distance = word.Length - i;\n                if (distance\
    \ < closestDistance) {\n                    closestDistance = distance;\n    \
    \                closest = word[i].ToString();\n                }\n          \
    \  } else if (consonants.Contains(word[i])) {\n                break;\n      \
    \      }\n        }\n        return closest;"]
stop_tokens:
- "\n    }\n"
