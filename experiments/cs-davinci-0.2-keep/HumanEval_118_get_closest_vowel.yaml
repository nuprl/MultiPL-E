name: HumanEval_118_get_closest_vowel
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a word. Your task is to find the closest vowel\
  \ that stands between \n    // two consonants from the right side of the word (case\
  \ sensitive).\n    // Vowels in the beginning and ending doesn't count. Return empty\
  \ string if you didn't\n    // find any vowel met the above condition. \n    //\
  \ You may assume that the given string contains English letter only.\n    // Example:\n\
  \    // get_closest_vowel(\"yogurt\") ==> \"u\"\n    // get_closest_vowel(\"FULL\"\
  ) ==> \"U\"\n    // get_closest_vowel(\"quick\") ==> \"\"\n    // get_closest_vowel(\"\
  ab\") ==> \"\"\n    public static string GetClosestVowel(string word) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetClosestVowel((\"\
  yogurt\")).Equals((\"u\")));\n    Debug.Assert(GetClosestVowel((\"full\")).Equals((\"\
  u\")));\n    Debug.Assert(GetClosestVowel((\"easy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  eAsy\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"ali\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"bad\")).Equals((\"a\")));\n    Debug.Assert(GetClosestVowel((\"\
  most\")).Equals((\"o\")));\n    Debug.Assert(GetClosestVowel((\"ab\")).Equals((\"\
  \")));\n    Debug.Assert(GetClosestVowel((\"ba\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  quick\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"anime\")).Equals((\"\
  i\")));\n    Debug.Assert(GetClosestVowel((\"Asia\")).Equals((\"\")));\n    Debug.Assert(GetClosestVowel((\"\
  Above\")).Equals((\"o\")));\n    }\n\n}\n"
completions: ["        // TODO: Implement your solution here\n        return \"\";",
  "        // your code here\n        return \"\";", "        // TODO: Implement your\
    \ solution here\n        return \"\";", "        // your code here\n        return\
    \ \"\";", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var closestVowel = new char();\n        var closestVowelIndex = -1;\n \
    \       for (var i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                if (i == word.Length - 1) {\n                    continue;\n\
    \                }\n                if (consonants.Contains(word[i + 1])) {\n\
    \                    closestVowel = word[i];\n                    closestVowelIndex\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        if (closestVowelIndex == -1) {\n            return \"\";\n      \
    \  }\n        for (var i = closestVowelIndex - 1; i >= 0; i--) {\n           \
    \ if (consonants.Contains(word[i])) {\n                return closestVowel.ToString();\n\
    \            }\n        }\n        return \"\";", "        // TODO: Implement\
    \ your solution here\n        return \"\";", "        // Your code goes here\n\
    \        return \"\";", "        // TODO: Implement your solution here\n     \
    \   return \"\";", "        // TODO: Implement this method\n        return \"\"\
    ;", "        // Your code goes here\n        return \"\";", "        // Your code\
    \ goes here\n        return \"\";", "        // TODO: Implement your solution\
    \ here\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // TODO: Implement your solution here.\n        return \"\"\
    ;", "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n   \
    \     var consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n  \
    \      var result = string.Empty;\n        var closest = int.MaxValue;\n     \
    \   for (var i = word.Length - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                var j = i - 1;\n                while (j >= 0 && !consonants.Contains(word[j]))\
    \ {\n                    j--;\n                }\n                if (j >= 0 &&\
    \ i - j < closest) {\n                    closest = i - j;\n                 \
    \   result = word[i].ToString();\n                }\n            }\n        }\n\
    \        return result;", "        // Your code goes here\n        return null;",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var lastConsonant\
    \ = -1;\n        var closestVowel = -1;\n        for (var i = word.Length - 1;\
    \ i >= 0; i--) {\n            if (consonants.Contains(word[i])) {\n          \
    \      lastConsonant = i;\n                break;\n            }\n        }\n\
    \        for (var i = lastConsonant - 1; i >= 0; i--) {\n            if (vowels.Contains(word[i]))\
    \ {\n                closestVowel = i;\n                break;\n            }\n\
    \        }\n        return closestVowel == -1 ? \"\" : word[closestVowel].ToString();",
  "        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n        var\
    \ consonants = new HashSet<char> { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        var closestVowel\
    \ = ' ';\n        var closestVowelIndex = -1;\n        var closestConsonantIndex\
    \ = -1;\n        for (var i = word.Length - 1; i >= 0; i--) {\n            if\
    \ (vowels.Contains(word[i])) {\n                if (closestVowelIndex == -1) {\n\
    \                    closestVowelIndex = i;\n                    closestVowel\
    \ = word[i];\n                }\n            } else if (consonants.Contains(word[i]))\
    \ {\n                if (closestVowelIndex != -1 && closestConsonantIndex == -1)\
    \ {\n                    closestConsonantIndex = i;\n                    break;\n\
    \                }\n            }\n        }\n        if (closestVowelIndex !=\
    \ -1 && closestConsonantIndex != -1) {\n            return closestVowel.ToString();\n\
    \        }\n        return \"\";", "        // Your code goes here\n        return\
    \ \"\";", "        // TODO: Implement your solution here\n        return \"\";"]
stop_tokens:
- "\n    }\n"
