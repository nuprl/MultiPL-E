name: HumanEval_93_encode
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a message, and encodes in such a\
  \ \n    // way that it swaps case of all letters, replaces all vowels in \n    //\
  \ the message with the letter that appears 2 places ahead of that \n    // vowel\
  \ in the english alphabet. \n    // Assume only letters. \n    // Examples:\n  \
  \  // >>> encode('test')\n    // 'TGST'\n    // >>> encode('This is a message')\n\
  \    // 'tHKS KS C MGSSCGG'\n    public static string Encode(string message) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Encode((\"\
  TEST\")).Equals((\"tgst\")));\n    Debug.Assert(Encode((\"Mudasir\")).Equals((\"\
  mWDCSKR\")));\n    Debug.Assert(Encode((\"YES\")).Equals((\"ygs\")));\n    Debug.Assert(Encode((\"\
  This is a message\")).Equals((\"tHKS KS C MGSSCGG\")));\n    Debug.Assert(Encode((\"\
  I DoNt KnOw WhAt tO WrItE\")).Equals((\"k dQnT kNqW wHcT Tq wRkTg\")));\n    }\n\
  \n}\n"
completions: ["        var vowels = new HashSet<char> { 'a', 'e', 'i', 'o', 'u' };\n\
    \        var sb = new StringBuilder();\n        foreach (var c in message) {\n\
    \            if (vowels.Contains(c)) {\n                sb.Append((char)(c + 2));\n\
    \            } else {\n                sb.Append(c);\n            }\n        }\n\
    \        return sb.ToString();", "        string encoded = \"\";\n        foreach\
    \ (char c in message) {\n            if (c >= 'a' && c <= 'z') {\n           \
    \     encoded += (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c\
    \ <= 'Z') {\n                encoded += (char)(c - 'A' + 'a');\n            }\
    \ else {\n                encoded += c;\n            }\n        }\n        return\
    \ encoded;", "        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        char[]\
    \ encoded = new char[message.Length];\n        for (int i = 0; i < message.Length;\
    \ i++) {\n            char c = message[i];\n            if (vowels.Contains(c))\
    \ {\n                encoded[i] = (char)(c + 2);\n            } else {\n     \
    \           encoded[i] = (char)(c - 2);\n            }\n        }\n        return\
    \ new string(encoded);", "        string result = \"\";\n        for (int i =\
    \ 0; i < message.Length; i++) {\n            char c = message[i];\n          \
    \  if (c >= 'a' && c <= 'z') {\n                c = (char)(c - 'a' + 'A');\n \
    \           } else if (c >= 'A' && c <= 'Z') {\n                c = (char)(c -\
    \ 'A' + 'a');\n            }\n            result += c;\n        }\n        return\
    \ result;", "        string result = \"\";\n        foreach (char c in message)\
    \ {\n            if (c >= 'a' && c <= 'z') {\n                result += (char)(c\
    \ - 'a' + 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n            \
    \    result += (char)(c - 'A' + 'a');\n            } else {\n                result\
    \ += c;\n            }\n        }\n        return result;", "        // TODO:\
    \ Implement this function.\n        return \"\";", "        string result = \"\
    \";\n        foreach (char c in message) {\n            if (c >= 'a' && c <= 'z')\
    \ {\n                result += (char)(c - 'a' + 'A');\n            } else if (c\
    \ >= 'A' && c <= 'Z') {\n                result += (char)(c - 'A' + 'a');\n  \
    \          } else {\n                result += c;\n            }\n        }\n\
    \        return result;", "        string encoded = \"\";\n        for (int i\
    \ = 0; i < message.Length; i++) {\n            char c = message[i];\n        \
    \    if (c >= 'a' && c <= 'z') {\n                c = (char)(c - 'a' + 'A');\n\
    \            } else if (c >= 'A' && c <= 'Z') {\n                c = (char)(c\
    \ - 'A' + 'a');\n            }\n            if (c == 'a' || c == 'e' || c == 'i'\
    \ || c == 'o' || c == 'u') {\n                c = (char)(c + 2);\n           \
    \ }\n            encoded += c;\n        }\n        return encoded;", '        return
    null;', "        string result = \"\";\n        foreach (char c in message) {\n\
    \            if (c >= 'a' && c <= 'z') {\n                result += (char)(c -\
    \ 32);\n            } else if (c >= 'A' && c <= 'Z') {\n                result\
    \ += (char)(c + 32);\n            } else {\n                result += c;\n   \
    \         }\n        }\n        return result;", "        // TODO: Implement this\
    \ function\n        return \"\";", '        return "";', "        string result\
    \ = \"\";\n        char[] vowels = { 'a', 'e', 'i', 'o', 'u' };\n        foreach\
    \ (char c in message) {\n            if (vowels.Contains(c)) {\n             \
    \   result += (char)(c + 2);\n            } else {\n                result +=\
    \ c;\n            }\n        }\n        return result;", "        char[] vowels\
    \ = { 'a', 'e', 'i', 'o', 'u' };\n        char[] encoded = new char[message.Length];\n\
    \        for (int i = 0; i < message.Length; i++) {\n            char c = message[i];\n\
    \            if (vowels.Contains(c)) {\n                int index = Array.IndexOf(vowels,\
    \ c);\n                encoded[i] = vowels[(index + 2) % vowels.Length];\n   \
    \         } else {\n                encoded[i] = char.IsUpper(c) ? char.ToLower(c)\
    \ : char.ToUpper(c);\n            }\n        }\n        return new string(encoded);",
  "        string encoded = \"\";\n        foreach (char c in message) {\n       \
    \     if (c >= 'a' && c <= 'z') {\n                encoded += (char)(c - 'a' +\
    \ 'A');\n            } else if (c >= 'A' && c <= 'Z') {\n                encoded\
    \ += (char)(c - 'A' + 'a');\n            } else {\n                encoded +=\
    \ c;\n            }\n        }\n        return encoded;", "        string result\
    \ = \"\";\n        foreach (char c in message) {\n            if (c >= 'a' &&\
    \ c <= 'z') {\n                result += (char)(c - 'a' + 'A');\n            }\
    \ else if (c >= 'A' && c <= 'Z') {\n                result += (char)(c - 'A' +\
    \ 'a');\n            } else {\n                result += c;\n            }\n \
    \       }\n        return result;", "        string result = \"\";\n        string\
    \ vowels = \"aeiou\";\n        for (int i = 0; i < message.Length; i++) {\n  \
    \          char c = message[i];\n            if (c >= 'a' && c <= 'z') {\n   \
    \             c = (char)(c - 'a' + 'A');\n            } else if (c >= 'A' && c\
    \ <= 'Z') {\n                c = (char)(c - 'A' + 'a');\n            }\n     \
    \       if (vowels.Contains(c)) {\n                int index = vowels.IndexOf(c);\n\
    \                index = (index + 2) % vowels.Length;\n                c = vowels[index];\n\
    \            }\n            result += c;\n        }\n        return result;",
  "        string result = \"\";\n        for (int i = 0; i < message.Length; i++)\
    \ {\n            char c = message[i];\n            if (char.IsUpper(c)) {\n  \
    \              result += char.ToLower(c);\n            } else if (char.IsLower(c))\
    \ {\n                result += char.ToUpper(c);\n            } else {\n      \
    \          result += c;\n            }\n        }\n        return result;", " \
    \       // TODO: Implement this function.\n        return \"\";", "        string\
    \ result = \"\";\n        foreach (char c in message) {\n            if (c >=\
    \ 'a' && c <= 'z') {\n                result += (char)(c - 'a' + 'A');\n     \
    \       } else if (c >= 'A' && c <= 'Z') {\n                result += (char)(c\
    \ - 'A' + 'a');\n            } else {\n                result += c;\n        \
    \    }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
