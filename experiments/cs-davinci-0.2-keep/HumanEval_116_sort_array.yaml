name: HumanEval_116_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this Kata, you have to sort an array of non-negative integers\
  \ according to\n    // number of ones in their binary representation in ascending\
  \ order.\n    // For similar number of ones, sort based on decimal value.\n    //\
  \ It must be implemented like this:\n    // >>> sort_array([1, 5, 2, 3, 4]) == [1,\
  \ 2, 3, 4, 5]\n    // >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n\
  \    // >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    public static List<long>\
  \ SortArray(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
  \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
  \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,\
  \ (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,\
  \ (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
  \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
  \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n \
  \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
  \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
completions: ["        // your code here\n        return arr;", "        // Your code\
    \ goes here\n        return arr;", "        // Your code here\n        return\
    \ arr;", '        return arr.OrderBy(x => x.ToString("X"), new HexComparer()).ToList();',
  "        List<long> result = new List<long>();\n        List<long> zeros = new List<long>();\n\
    \        List<long> ones = new List<long>();\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] == 0) {\n                zeros.Add(arr[i]);\n\
    \            } else {\n                ones.Add(arr[i]);\n            }\n    \
    \    }\n        ones.Sort();\n        result.AddRange(zeros);\n        result.AddRange(ones);\n\
    \        return result;", "        // your code here\n        return arr;", " \
    \       var sorted = arr.OrderBy(x => CountOnes(x)).ThenBy(x => x).ToList();\n\
    \        return sorted;", "        // Your code here\n        return arr;", " \
    \       List<long> sorted = new List<long>();\n        List<long> sorted2 = new\
    \ List<long>();\n        List<long> sorted3 = new List<long>();\n        List<long>\
    \ sorted4 = new List<long>();\n        List<long> sorted5 = new List<long>();\n\
    \        List<long> sorted6 = new List<long>();\n        List<long> sorted7 =\
    \ new List<long>();\n        List<long> sorted8 = new List<long>();\n        List<long>\
    \ sorted9 = new List<long>();\n        List<long> sorted10 = new List<long>();\n\
    \        List<long> sorted11 = new List<long>();\n        List<long> sorted12\
    \ = new List<long>();\n        List<long> sorted13 = new List<long>();\n     \
    \   List<long> sorted14 = new List<long>();\n        List<long> sorted15 = new\
    \ List<long>();\n        List<long> sorted16 = new List<long>();\n        List<long>\
    \ sorted17 = new List<long>();\n        List<long> sorted18 = new List<long>();\n\
    \        List<long> sorted19 = new List<long>();\n        List<long> sorted20\
    \ = new List<long>();\n        List<long> sorted21 = new List<long>();\n     \
    \   List<long> sorted22 = new List<long>();\n        List<long> sorted23 = new\
    \ List<long>();\n        List<long> sorted24 = new List<long>();\n        List<long>\
    \ sorted25 = new List<long>();\n        List<long> sorted26 = new List<long>();\n\
    \        List<long> sorted27 = new List<long>();\n        List<long> sorted28\
    \ = new List<long>();\n        List<long> sorted29 = new List<long>();\n     \
    \   List<long> sorted30 = new List<long>();\n        List<long> sorted31 = new\
    \ List<long>();\n        List<long> sorted32 = new List<long>();\n        List<long>\
    \ sorted33 = new List<long>();\n        List<long> sorted34 = new List<long>();\n\
    \        List", "        // Your code is here...\n        return arr;", "    \
    \    // your code here\n        return arr;", "        // your code here\n   \
    \     return arr;", "        // Your code here\n        return arr;", "      \
    \  // Write your code here\n        // return arr.OrderBy(x => Convert.ToString(x,\
    \ 2).Count(y => y == '1')).ThenBy(x => x).ToList();\n        return arr.OrderBy(x\
    \ => Convert.ToString(x, 2).Count(y => y == '1')).ThenBy(x => x).ToList();", " \
    \       // Your code here\n        return arr;", "        // your code here\n\
    \        return arr;", "        // Your code is here...\n        return arr;",
  "        // Your code is here...\n        return arr;", "        List<long> sorted\
    \ = new List<long>();\n        List<long> sorted2 = new List<long>();\n      \
    \  List<long> sorted3 = new List<long>();\n        List<long> sorted4 = new List<long>();\n\
    \        List<long> sorted5 = new List<long>();\n        List<long> sorted6 =\
    \ new List<long>();\n        List<long> sorted7 = new List<long>();\n        List<long>\
    \ sorted8 = new List<long>();\n        List<long> sorted9 = new List<long>();\n\
    \        List<long> sorted10 = new List<long>();\n        List<long> sorted11\
    \ = new List<long>();\n        List<long> sorted12 = new List<long>();\n     \
    \   List<long> sorted13 = new List<long>();\n        List<long> sorted14 = new\
    \ List<long>();\n        List<long> sorted15 = new List<long>();\n        List<long>\
    \ sorted16 = new List<long>();\n        List<long> sorted17 = new List<long>();\n\
    \        List<long> sorted18 = new List<long>();\n        List<long> sorted19\
    \ = new List<long>();\n        List<long> sorted20 = new List<long>();\n     \
    \   List<long> sorted21 = new List<long>();\n        List<long> sorted22 = new\
    \ List<long>();\n        List<long> sorted23 = new List<long>();\n        List<long>\
    \ sorted24 = new List<long>();\n        List<long> sorted25 = new List<long>();\n\
    \        List<long> sorted26 = new List<long>();\n        List<long> sorted27\
    \ = new List<long>();\n        List<long> sorted28 = new List<long>();\n     \
    \   List<long> sorted29 = new List<long>();\n        List<long> sorted30 = new\
    \ List<long>();\n        List<long> sorted31 = new List<long>();\n        List<long>\
    \ sorted32 = new List<long>();\n        List<long> sorted33 = new List<long>();\n\
    \        List<long> sorted34 = new List<long>();\n        List", "        // your\
    \ code here\n        return arr;"]
stop_tokens:
- "\n    }\n"
