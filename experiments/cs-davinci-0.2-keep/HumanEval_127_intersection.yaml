name: HumanEval_127_intersection
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given two intervals,\n    // where each interval is\
  \ a pair of integers. For example, interval = (start, end) = (1, 2).\n    // The\
  \ given intervals are closed which means that the interval (start, end)\n    //\
  \ includes both start and end.\n    // For each given interval, it is assumed that\
  \ its start is less or equal its end.\n    // Your task is to determine whether\
  \ the length of intersection of these two \n    // intervals is a prime number.\n\
  \    // Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  \
  \  // which its length is 1, which not a prime number.\n    // If the length of\
  \ the intersection is a prime number, return \"YES\",\n    // otherwise, return\
  \ \"NO\".\n    // If the two intervals don't intersect, return \"NO\".\n    // [input/output]\
  \ samples:\n    // intersection((1, 2), (2, 3)) ==> \"NO\"\n    // intersection((-1,\
  \ 1), (0, 4)) ==> \"NO\"\n    // intersection((-3, -1), (-5, 5)) ==> \"YES\"\n \
  \   public static string Intersection(Tuple<long, long> interval1, Tuple<long, long>\
  \ interval2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(2L, 3L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-1L,\
  \ 1L)), (Tuple.Create(0L, 4L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-3L,\
  \ -1L)), (Tuple.Create(-5L, 5L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ 2L)), (Tuple.Create(-4L, 0L))).Equals((\"YES\")));\n    Debug.Assert(Intersection((Tuple.Create(-11L,\
  \ 2L)), (Tuple.Create(-1L, -1L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(3L, 5L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(1L,\
  \ 2L)), (Tuple.Create(1L, 2L))).Equals((\"NO\")));\n    Debug.Assert(Intersection((Tuple.Create(-2L,\
  \ -2L)), (Tuple.Create(-3L, -2L))).Equals((\"NO\")));\n    }\n\n}\n"
completions: ["        // your code goes here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        // Your code goes here\n        // interval1\
    \ = (1, 2)\n        // interval2 = (2, 3)\n        // intersection = (2, 2)\n\
    \        // length = 1\n        // 1 is not a prime number\n        // return\
    \ \"NO\"\n        // interval1 = (-1, 1)\n        // interval2 = (0, 4)\n    \
    \    // intersection = (0, 1)\n        // length = 1\n        // 1 is not a prime\
    \ number\n        // return \"NO\"\n        // interval1 = (-3, -1)\n        //\
    \ interval2 = (-5, 5)\n        // intersection = (-3, -1)\n        // length =\
    \ 2\n        // 2 is a prime number\n        // return \"YES\"\n        // interval1\
    \ = (1, 2)\n        // interval2 = (3, 4)\n        // intersection = null\n  \
    \      // return \"NO\"\n        // interval1 = (1, 2)\n        // interval2 =\
    \ (2, 3)\n        // intersection = (2, 2)\n        // length = 1\n        //\
    \ 1 is not a prime number\n        // return \"NO\"\n        // interval1 = (1,\
    \ 2)\n        // interval2 = (2, 3)\n        // intersection = (2, 2)\n      \
    \  // length = 1\n        // 1 is not a prime number\n        // return \"NO\"\
    \n        // interval1 = (1, 2)\n        // interval2 = (2, 3)\n        // intersection\
    \ = (2, 2)\n        // length = 1\n        // 1 is not a prime number\n      \
    \  // return \"NO\"\n        // interval1 = (1, 2)\n        // interval2 = (2,\
    \ 3)\n        // intersection = (2, 2)\n        // length = 1\n        // 1 is\
    \ not a prime number\n        // return \"NO\"\n        // interval1 = (1, 2)\n\
    \        // interval2 = (2, 3)\n        // intersection = (2, 2)\n        // length\
    \ = 1\n        // 1 is not a prime number\n        // return \"NO\"\n        //\
    \ interval1 = (1, 2)\n        // interval2 = (2, 3)\n        // intersection =\
    \ (2, 2)\n        // length =", "        // your code here\n        return \"\"\
    ;", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n      \
    \  long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start >\
    \ end) {\n            return \"NO\";\n        }\n        return IsPrime(end -\
    \ start + 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // Your code here\n        return \"\";", "        // your code here\n\
    \        return \"\";", "        // Your code here\n        return \"\";", " \
    \       var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        if (length == 1) {\n            return \"NO\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ % 2 == 0) {\n            return \"NO\";\n        }\n        for (var i = 3;\
    \ i * i <= length; i += 2) {\n            if (length % i == 0) {\n           \
    \     return \"NO\";\n            }\n        }\n        return \"YES\";", "  \
    \      // your code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n        return\
    \ \"\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        // Your code here\n        return \"\";",
  "        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        return IsPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n        return\
    \ \"\";", "        // your code here\n        return \"\";", "        // your\
    \ code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // Your code here\n        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        // Your code goes here\n        long start =\
    \ Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) return \"NO\";\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n        return\
    \ \"\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return\
    \ \"\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      // Your code here\n        return \"\";", "        // find the intersection\
    \ of the two intervals\n        // if the intersection is empty, return \"NO\"\
    \n        // if the intersection is not empty, return \"YES\" if the length of\
    \ the intersection is prime, otherwise return \"NO\"\n        // the length of\
    \ the intersection is the number of integers in the intersection\n        // for\
    \ example, the intersection of (1, 3) and (2, 4) is (2, 3) which has length 1\n\
    \        // the intersection of (1, 3) and (2, 5) is (2, 3) which has length 2\n\
    \        // the intersection of (1, 3) and (4, 5) is empty\n        // the intersection\
    \ of (1, 3) and (3, 5) is (3) which has length 1\n        // the intersection\
    \ of (1, 3) and (0, 5) is (1, 3) which has length 3\n        // the intersection\
    \ of (1, 3) and (0, 2) is (1, 2) which has length 2\n        // the intersection\
    \ of (1, 3) and (0, 1) is (1) which has length 1\n        // the intersection\
    \ of (1, 3) and (0, 0) is empty\n        // the intersection of (1, 3) and (2,\
    \ 2) is (2) which has length 1\n        // the intersection of (1, 3) and (1,\
    \ 1) is (1) which has length 1\n        // the intersection of (1, 3) and (1,\
    \ 3) is (1, 3) which has length 3\n        // the intersection of (1, 3) and (1,\
    \ 4) is (1, 3) which has length 3\n        // the intersection of (1, 3) and (0,\
    \ 3) is (1, 3) which has length 3\n        // the intersection of (1, 3) and (0,\
    \ 4) is (1, 3) which has length 3\n        // the intersection of (1, 3) and (0,\
    \ 5) is (1, 3) which has length 3\n        // the intersection of (1, 3) and (0,\
    \ 6) is (1, 3) which has length 3\n        // the intersection of (1, 3) and (0,\
    \ 7) is (1, 3) which has length 3\n        // the intersection of (", "      \
    \  var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end =\
    \ Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n  \
    \          return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        // Your code here\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        long length = end - start\
    \ + 1;\n        if (length == 1) {\n            return \"NO\";\n        }\n  \
    \      if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length % 2 == 0) {\n            return \"NO\";\n        }\n        for (long\
    \ i = 3; i * i <= length; i += 2) {\n            if (length % i == 0) {\n    \
    \            return \"NO\";\n            }\n        }\n        return \"YES\";",
  "        // your code here\n        return \"\";", "        // your code here\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";",
  "        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        long length = end - start\
    \ + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        // Your\
    \ code goes here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long diff = end - start\
    \ + 1;\n        return IsPrime(diff) ? \"YES\" : \"NO\";", "        // your code\
    \ here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n   \
    \     long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        //\
    \ your code here\n        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // Your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        return \"\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    if (length % 2 == 0) {\n            return \"NO\";\n        }\n        for\
    \ (var i = 3; i * i <= length; i += 2) {\n            if (length % i == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n       \
    \ var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ return \"NO\";\n        var length = end - start + 1;\n        return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start + 1;\n        if (length < 1) {\n         \
    \   return \"NO\";\n        }\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"NO\";\n\
    \        }\n        for (long i = 2; i <= Math.Sqrt(length); i++) {\n        \
    \    if (length % i == 0) {\n                return \"NO\";\n            }\n \
    \       }\n        return \"YES\";", "        // Your code here\n        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ {\n            return \"NO\";\n        }\n        return IsPrime(end - start\
    \ + 1) ? \"YES\" : \"NO\";", "        // your code here\n        return \"\";",
  "        // Your code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Min(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start + 1;\n        if (length < 0) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        // Your\
    \ code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n        long\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        if\
    \ (IsPrime(end - start + 1)) {\n            return \"YES\";\n        }\n     \
    \   return \"NO\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        long\
    \ length = end - start + 1;\n        if (length == 1) {\n            return \"\
    NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n  \
    \      }\n        if (length % 2 == 0) {\n            return \"NO\";\n       \
    \ }\n        for (long i = 3; i * i <= length; i += 2) {\n            if (length\
    \ % i == 0) {\n                return \"NO\";\n            }\n        }\n    \
    \    return \"YES\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        var\
    \ start = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) return \"NO\";\n        var len\
    \ = end - start + 1;\n        return IsPrime(len) ? \"YES\" : \"NO\";", "    \
    \    var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // Your code here\n\
    \        return \"\";", "        // your code here\n        return \"\";", " \
    \       long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ return \"NO\";\n        long length = end - start + 1;\n        return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // your code here\n        return \"\";", "        // your code\
    \ here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n   \
    \     long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n  \
    \      long end = Math.Min(interval1.Item2, interval2.Item2);\n        long length\
    \ = end - start + 1;\n        if (length <= 0) {\n            return \"NO\";\n\
    \        }\n        if (length == 1) {\n            return \"YES\";\n        }\n\
    \        if (length == 2) {\n            return \"NO\";\n        }\n        for\
    \ (long i = 2; i * i <= length; i++) {\n            if (length % i == 0) {\n \
    \               return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;", "        // Your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // find the intersection\
    \ of the intervals\n        // if the intersection is empty, return \"NO\"\n \
    \       // if the intersection is not empty,\n        // find the length of the\
    \ intersection\n        // if the length is a prime number, return \"YES\"\n \
    \       // otherwise, return \"NO\"\n        // if the length is 0, return \"\
    NO\"\n        // if the length is 1, return \"NO\"\n        // if the length is\
    \ 2, return \"YES\"\n        // if the length is 3, return \"YES\"\n        //\
    \ if the length is 4, return \"NO\"\n        // if the length is 5, return \"\
    YES\"\n        // if the length is 6, return \"NO\"\n        // if the length\
    \ is 7, return \"YES\"\n        // if the length is 8, return \"NO\"\n       \
    \ // if the length is 9, return \"NO\"\n        // if the length is 10, return\
    \ \"NO\"\n        // if the length is 11, return \"YES\"\n        // if the length\
    \ is 12, return \"NO\"\n        // if the length is 13, return \"YES\"\n     \
    \   // if the length is 14, return \"NO\"\n        // if the length is 15, return\
    \ \"NO\"\n        // if the length is 16, return \"NO\"\n        // if the length\
    \ is 17, return \"YES\"\n        // if the length is 18, return \"NO\"\n     \
    \   // if the length is 19, return \"YES\"\n        // if the length is 20, return\
    \ \"NO\"\n        // if the length is 21, return \"NO\"\n        // if the length\
    \ is 22, return \"NO\"\n        // if the length is 23, return \"YES\"\n     \
    \   // if the length is 24, return \"NO\"\n        // if the length is 25, return\
    \ \"NO\"\n        // if the length is 26, return \"NO\"\n        // if the length\
    \ is 27, return \"NO\"\n        // if the length is 28, return \"NO\"\n      \
    \  // if the length is 29, return \"YES\"\n        // if the length is 30, return\
    \ \"NO\"\n        // if the length is 31, return \"YES\"\n        // if the length\
    \ is 32, return \"NO\"\n        // if the length is 33, return \"NO\"\n      \
    \  // if the", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var len = end - start\
    \ + 1;\n        if (len == 1) {\n            return \"NO\";\n        }\n     \
    \   if (len == 2) {\n            return \"YES\";\n        }\n        for (var\
    \ i = 2; i < len; i++) {\n            if (len % i == 0) {\n                return\
    \ \"NO\";\n            }\n        }\n        return \"YES\";", "        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        long length = end - start + 1;\n        if (length\
    \ < 0) {\n            return \"NO\";\n        }\n        return IsPrime(length)\
    \ ? \"YES\" : \"NO\";", "        // Your code here\n        return \"\";", " \
    \       // your code here\n        return \"\";", "        // Your code here\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        long length = end\
    \ - start + 1;\n        if (length < 0) {\n            return \"NO\";\n      \
    \  }\n        return IsPrime(length) ? \"YES\" : \"NO\";", "        // your code\
    \ here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n   \
    \     long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        var length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    for (var i = 2; i < length; i++) {\n            if (length % i == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;", "        // your code here\n        return \"\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start + 1;\n        if (length <= 0) {\n        \
    \    return \"NO\";\n        }\n        return IsPrime(length) ? \"YES\" : \"\
    NO\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        // your code here\n\
    \        long start = Math.Max(interval1.Item1, interval2.Item1);\n        long\
    \ end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end)\
    \ return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";",
  "        // find the intersection of the two intervals\n        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        // check if the length is prime\n       \
    \ if (length < 2) {\n            return \"NO\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length % 2 == 0)\
    \ {\n            return \"NO\";\n        }\n        for (var i = 3; i * i <= length;\
    \ i += 2) {\n            if (length % i == 0) {\n                return \"NO\"\
    ;\n            }\n        }\n        return \"YES\";", "        // Your code here\n\
    \        return \"\";", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        // your code here\n        return \"\";",
  "        var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        return IsPrime(length) ? \"YES\" : \"NO\";", "        // interval1 =\
    \ (start1, end1)\n        // interval2 = (start2, end2)\n        // interval1.Item1\
    \ = start1\n        // interval1.Item2 = end1\n        // interval2.Item1 = start2\n\
    \        // interval2.Item2 = end2\n        // if start1 > end1 or start2 > end2,\
    \ return \"NO\"\n        // if start1 > end2 or start2 > end1, return \"NO\"\n\
    \        // if start1 < start2, start = start2, end = end1\n        // if start2\
    \ < start1, start = start1, end = end2\n        // if start == end, return \"\
    NO\"\n        // if start + 1 == end, return \"YES\"\n        // if start + 2\
    \ == end, return \"NO\"\n        // if start + 3 == end, return \"YES\"\n    \
    \    // if start + 4 == end, return \"NO\"\n        // if start + 5 == end, return\
    \ \"YES\"\n        // if start + 6 == end, return \"NO\"\n        // if start\
    \ + 7 == end, return \"YES\"\n        // if start + 8 == end, return \"NO\"\n\
    \        // if start + 9 == end, return \"NO\"\n        // if start + 10 == end,\
    \ return \"NO\"\n        // if start + 11 == end, return \"YES\"\n        // if\
    \ start + 12 == end, return \"NO\"\n        // if start + 13 == end, return \"\
    YES\"\n        // if start + 14 == end, return \"NO\"\n        // if start + 15\
    \ == end, return \"NO\"\n        // if start + 16 == end, return \"NO\"\n    \
    \    // if start + 17 == end, return \"YES\"\n        // if start + 18 == end,\
    \ return \"NO\"\n        // if start + 19 == end, return \"YES\"\n        // if\
    \ start + 20 == end, return \"NO\"\n        // if start + 21 == end, return \"\
    NO\"\n        // if start + 22 == end, return \"NO\"\n        // if start + 23\
    \ == end, return \"YES\"\n        // if start + 24 == end, return \"NO\"\n   \
    \     // if start + 25 == end, return \"NO\"\n       ", "        // your code\
    \ here\n        return \"\";", "        // Your code here\n        long start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        long end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) {\n            return \"NO\";\n\
    \        }\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "  \
    \      // your code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        long length = end -\
    \ start + 1;\n        if (length == 1) {\n            return \"NO\";\n       \
    \ }\n        if (length == 2) {\n            return \"YES\";\n        }\n    \
    \    if (length % 2 == 0) {\n            return \"NO\";\n        }\n        for\
    \ (long i = 3; i * i <= length; i += 2) {\n            if (length % i == 0) {\n\
    \                return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;", "        // your code here\n        return \"\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // Write your code here\n        // return \"YES\" or \"NO\"\n  \
    \      var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) return\
    \ \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "   \
    \     // your code here\n        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        var end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        var\
    \ length = end - start + 1;\n        return IsPrime(length) ? \"YES\" : \"NO\"\
    ;", "        // your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        // Your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) {\n            return \"NO\";\n        }\n        return\
    \ IsPrime(end - start + 1) ? \"YES\" : \"NO\";", "        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        long length = end - start + 1;\n        if (length <= 0) {\n        \
    \    return \"NO\";\n        }\n        return IsPrime(length) ? \"YES\" : \"\
    NO\";", "        // your code here\n        return \"\";", "        var start\
    \ = Math.Max(interval1.Item1, interval2.Item1);\n        var end = Math.Min(interval1.Item2,\
    \ interval2.Item2);\n        if (start > end) return \"NO\";\n        var len\
    \ = end - start + 1;\n        return IsPrime(len) ? \"YES\" : \"NO\";", "    \
    \    var start = Math.Max(interval1.Item1, interval2.Item1);\n        var end\
    \ = Math.Min(interval1.Item2, interval2.Item2);\n        if (start > end) {\n\
    \            return \"NO\";\n        }\n        var length = end - start + 1;\n\
    \        if (IsPrime(length)) {\n            return \"YES\";\n        }\n    \
    \    return \"NO\";", "        long start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        long end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) {\n            return \"NO\";\n        }\n        return IsPrime(end\
    \ - start + 1) ? \"YES\" : \"NO\";", "        // Write your code here\n      \
    \  return \"\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";", "        // Your code here\n        long start = Math.Max(interval1.Item1,\
    \ interval2.Item1);\n        long end = Math.Min(interval1.Item2, interval2.Item2);\n\
    \        if (start > end) return \"NO\";\n        return IsPrime(end - start +\
    \ 1) ? \"YES\" : \"NO\";", "        var start = Math.Max(interval1.Item1, interval2.Item1);\n\
    \        var end = Math.Min(interval1.Item2, interval2.Item2);\n        if (start\
    \ > end) return \"NO\";\n        return IsPrime(end - start + 1) ? \"YES\" : \"\
    NO\";"]
stop_tokens:
- "\n    }\n"
