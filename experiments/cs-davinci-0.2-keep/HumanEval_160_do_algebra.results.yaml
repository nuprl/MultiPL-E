language: cs
name: HumanEval_160_do_algebra
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84a15880e5f64637aa37cc9c0e011270>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <284ba5ed6f48424f904fdcdba33ada76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <284ba5ed6f48424f904fdcdba33ada76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code here\n        return 0;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19249f290b164184b3b5428268ba31dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <19249f290b164184b3b5428268ba31dc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code goes here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <440028a27f7b433fad416fb75d635adc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <440028a27f7b433fad416fb75d635adc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here.\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <284ba5ed6f48424f904fdcdba33ada76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <284ba5ed6f48424f904fdcdba33ada76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here.\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        return 0;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    **\", (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new\
    \ long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <284ba5ed6f48424f904fdcdba33ada76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <284ba5ed6f48424f904fdcdba33ada76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        long result\
    \ = operand[0];\n        for (int i = 0; i < op.Count; i++) {\n            switch\
    \ (op[i]) {\n                case \"+\":\n                    result += operand[i\
    \ + 1];\n                    break;\n                case \"-\":\n           \
    \         result -= operand[i + 1];\n                    break;\n            \
    \    case \"*\":\n                    result *= operand[i + 1];\n            \
    \        break;\n                case \"//\":\n                    result /= operand[i\
    \ + 1];\n                    break;\n                case \"**\":\n          \
    \          result = (long)Math.Pow(result, operand[i + 1]);\n                \
    \    break;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84a15880e5f64637aa37cc9c0e011270>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Implement your code here\n     \
    \   return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <533f304c8d204b068d53d0c5ab7d7601>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <533f304c8d204b068d53d0c5ab7d7601>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here.\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here.\n        return\
    \ 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7bbc4490ce7841a89b947944556aba65>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Your code goes here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <440028a27f7b433fad416fb75d635adc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <440028a27f7b433fad416fb75d635adc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // TODO: Implement your solution here\n \
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bae5a19f295649d19f6e747114f569f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bae5a19f295649d19f6e747114f569f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        // Write your code here\n        return 0;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
    *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
    \ == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <306ad789bb674888bc7ce85f9f875d3e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            if (op[i] == \"+\") {\n           \
    \     result += operand[i + 1];\n            } else if (op[i] == \"-\") {\n  \
    \              result -= operand[i + 1];\n            } else if (op[i] == \"*\"\
    ) {\n                result *= operand[i + 1];\n            } else if (op[i] ==\
    \ \"//\") {\n                result /= operand[i + 1];\n            } else if\
    \ (op[i] == \"**\") {\n                result = (long)Math.Pow(result, operand[i\
    \ + 1]);\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new\
    \ long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new\
    \ List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new\
    \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n\
    \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\", (string)\"\
    *\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4762deb0c4a45d4825f0a4d3ba2b41c>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given two lists operator, and operand. The first list\
    \ has basic algebra operations, and \n    // the second list is a list of integers.\
    \ Use the two given lists to build the algebric \n    // expression and return\
    \ the evaluation of this expression.\n    // The basic algebra operations:\n \
    \   // Addition ( + ) \n    // Subtraction ( - ) \n    // Multiplication ( * )\
    \ \n    // Floor division ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n\
    \    // operator['+', '*', '-']\n    // array = [2, 3, 4, 5]\n    // result =\
    \ 2 + 3 * 4 - 5\n    // => result = 9\n    // Note:\n    // The length of operator\
    \ list is equal to the length of operand list minus one.\n    // Operand is a\
    \ list of of non-negative integers.\n    // Operator list has at least one operator,\
    \ and operand list has at least two operands.\n    public static long DoAlgebra(List<string>\
    \ op, List<long> operand) {\n        long result = operand[0];\n        for (int\
    \ i = 0; i < op.Count; i++) {\n            switch (op[i]) {\n                case\
    \ \"+\":\n                    result += operand[i + 1];\n                    break;\n\
    \                case \"-\":\n                    result -= operand[i + 1];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[i + 1];\n                    break;\n                case\
    \ \"//\":\n                    result /= operand[i + 1];\n                   \
    \ break;\n                case \"**\":\n                    result = (long)Math.Pow(result,\
    \ operand[i + 1]);\n                    break;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"\
    *\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
    \ (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
    +\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,\
    \ (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new\
    \ string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,\
    \ (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4ece86ac9284bee8cca109b16aa8831>:0 \n"
  stdout: ''
  timestamp: 1659792545
