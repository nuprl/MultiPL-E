name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) ==\
  \ []\n    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        // Your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // TODO: implement this\
    \ function\n        return nums;", "        // Your code goes here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // Write\
    \ your code here\n        return nums;", "        // your code goes here\n   \
    \     return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y\
    \ - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum)) {\n \
    \               dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var result = new List<long>();\n        foreach (var kvp in\
    \ dict.OrderBy(kvp => kvp.Key)) {\n            result.AddRange(kvp.Value);\n \
    \       }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", "        var dict = new\
    \ Dictionary<long, List<long>>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var sum = 0;\n            var num = nums[i];\n            while\
    \ (num != 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            if (!dict.ContainsKey(sum)) {\n                dict[sum]\
    \ = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n  \
    \      }\n        var result = new List<long>();\n        foreach (var key in\
    \ dict.Keys.OrderBy(x => x)) {\n            result.AddRange(dict[key].OrderBy(x\
    \ => x));\n        }\n        return result;", "        // Your code goes here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // TODO: implement this function\n        return null;", "        // your\
    \ code here\n        return nums;", "        // Your code goes here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x => x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // your code\
    \ here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Select(y
    => (long)Char.GetNumericValue(y)).Sum()).ThenBy(x => nums.IndexOf(x)).ToList();',
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code goes here\n        return nums;", "        // Your code here\n\
    \        return nums;", "        var dict = new Dictionary<long, List<long>>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var sum = SumDigits(nums[i]);\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(nums[i]);\n        }\n        var keys\
    \ = dict.Keys.ToList();\n        keys.Sort();\n        var res = new List<long>();\n\
    \        foreach (var key in keys) {\n            res.AddRange(dict[key]);\n \
    \       }\n        return res;", "        // Write your code here\n        return\
    \ nums;", "        var dict = new Dictionary<long, long>();\n        foreach (var\
    \ num in nums) {\n            var sum = 0;\n            var temp = num;\n    \
    \        while (temp != 0) {\n                sum += temp % 10;\n            \
    \    temp /= 10;\n            }\n            dict[num] = sum;\n        }\n   \
    \     var list = new List<long>();\n        foreach (var num in nums) {\n    \
    \        list.Add(dict[num]);\n        }\n        list.Sort();\n        var res\
    \ = new List<long>();\n        foreach (var num in list) {\n            foreach\
    \ (var key in dict.Keys) {\n                if (dict[key] == num) {\n        \
    \            res.Add(key);\n                    dict.Remove(key);\n          \
    \          break;\n                }\n            }\n        }\n        return\
    \ res;", "        var dict = new Dictionary<long, long>();\n        for (int i\
    \ = 0; i < nums.Count; i++) {\n            var sum = 0;\n            var n = nums[i];\n\
    \            while (n != 0) {\n                sum += n % 10;\n              \
    \  n /= 10;\n            }\n            dict[sum] = nums[i];\n        }\n    \
    \    var res = new List<long>();\n        foreach (var kv in dict.OrderBy(kv =>\
    \ kv.Key)) {\n            res.Add(kv.Value);\n        }\n        return res;",
  "        // TODO: Implement this function\n        return nums;", "        // your\
    \ code here\n        return nums;", "        var list = new List<long>();\n  \
    \      for (int i = 0; i < nums.Count; i++) {\n            var sum = 0;\n    \
    \        var num = nums[i];\n            while (num != 0) {\n                sum\
    \ += num % 10;\n                num /= 10;\n            }\n            list.Add(sum);\n\
    \        }\n        var result = new List<long>();\n        for (int i = 0; i\
    \ < nums.Count; i++) {\n            var min = list.Min();\n            var index\
    \ = list.IndexOf(min);\n            result.Add(nums[index]);\n            list.RemoveAt(index);\n\
    \            nums.RemoveAt(index);\n        }\n        return result;", "    \
    \    return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return nums;", "        // Your\
    \ code goes here\n        return nums;", '        return nums.OrderBy(x => x.ToString().Sum(y
    => (int)y - 48)).ToList();', "        // TODO: implement this function\n     \
    \   return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y -\
    \ '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(n\
    \ => n.ToString().Sum(c => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();",
  "        // your code here\n        return nums;", "        // Your code goes here\n\
    \        return nums;", "        // TODO: Implement this function\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();", "        // TODO: implement\n        return\
    \ nums;", "        // TODO: Implement this function\n        return nums;", '        return
    nums.OrderBy(x => x.ToString().Select(y => (int)Char.GetNumericValue(y)).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return nums;", "        // TODO: implement this function\n\
    \        return null;", "        return nums.OrderBy(x => x.ToString().Sum(c =>\
    \ c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return null;", "        // Your code goes here\n    \
    \    return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y\
    \ - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Your code here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       var result = nums.Select((x, i) => new { x, i }).OrderBy(x => x.x.ToString().Sum(c\
    \ => c - '0')).ThenBy(x => x.i).Select(x => x.x).ToList();\n        return result;",
  '        return nums.OrderBy(x => x.ToString().Select(y => int.Parse(y.ToString())).Sum()).ThenBy(x
    => nums.IndexOf(x)).ToList();', "        // TODO: Implement this function\n  \
    \      return nums;", "        // Your code goes here\n        return nums;",
  "        // Your code goes here\n        return nums;", "        var dict = new\
    \ Dictionary<long, List<long>>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = new List<long>();\n            }\n          \
    \  dict[sum].Add(nums[i]);\n        }\n        var keys = dict.Keys.ToList();\n\
    \        keys.Sort();\n        var result = new List<long>();\n        foreach\
    \ (var key in keys) {\n            result.AddRange(dict[key]);\n        }\n  \
    \      return result;", "        // your code here\n        return nums;", " \
    \       var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        foreach (var num in nums) {\n            var sum = SumDigits(num);\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(num);\n        }\n        foreach (var\
    \ key in dict.Keys.OrderBy(x => x)) {\n            result.AddRange(dict[key]);\n\
    \        }\n        return result;", "        // Your code goes here\n       \
    \ return nums;", "        // your code here\n        return nums;", "        //\
    \ TODO: implement this function\n        return nums;", "        // your code\
    \ here\n        return nums;", "        // Your code goes here\n        return\
    \ nums;", "        // Your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", "        // TODO: implement\
    \ this function\n        return null;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Your code\
    \ goes here\n        return null;", "        // Your code goes here.\n       \
    \ return null;", "        // your code here\n        return null;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        // Your\
    \ code goes here\n        return nums;", "        return nums.OrderBy(n => n.ToString().Sum(c\
    \ => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();", "        // Your code\
    \ goes here\n        return nums;", "        // TODO: Implement this function\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       return nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        foreach (var num in nums) {\n            var sum = SumDigits(num);\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = new List<long>();\n\
    \            }\n            dict[sum].Add(num);\n        }\n        var keys =\
    \ dict.Keys.ToList();\n        keys.Sort();\n        foreach (var key in keys)\
    \ {\n            var list = dict[key];\n            list.Sort();\n           \
    \ result.AddRange(list);\n        }\n        return result;", "        // TODO:\
    \ implement this function\n        return nums;", "        var sorted = nums.OrderBy(x\
    \ => x.ToString().Sum(y => int.Parse(y.ToString()))).ToList();\n        return\
    \ sorted;", "        var result = new List<long>();\n        var sums = new Dictionary<long,\
    \ long>();\n        foreach (var num in nums) {\n            var sum = 0;\n  \
    \          var n = num;\n            while (n != 0) {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            sums[num] = sum;\n\
    \        }\n        var sorted = sums.OrderBy(x => x.Value).ThenBy(x => x.Key);\n\
    \        foreach (var pair in sorted) {\n            result.Add(pair.Key);\n \
    \       }\n        return result;", "        // TODO: Implement this function\n\
    \        return null;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        var result = nums.Select((x,\
    \ i) => new { x, i }).OrderBy(x => x.x.ToString().Sum(c => c - '0')).ThenBy(x\
    \ => x.i).Select(x => x.x).ToList();\n        return result;", "        // your\
    \ code here\n        return nums;", "        // Your code goes here\n        return\
    \ null;", "        // Your code here\n        return null;", "        // TODO:\
    \ Implement this function\n        return null;", "        // Your code goes here\n\
    \        return nums;", "        List<long> result = new List<long>();\n     \
    \   List<long> sums = new List<long>();\n        for (int i = 0; i < nums.Count;\
    \ i++) {\n            long sum = 0;\n            long num = nums[i];\n       \
    \     while (num != 0) {\n                sum += num % 10;\n                num\
    \ /= 10;\n            }\n            sums.Add(sum);\n        }\n        for (int\
    \ i = 0; i < nums.Count; i++) {\n            long min = sums.Min();\n        \
    \    int index = sums.IndexOf(min);\n            result.Add(nums[index]);\n  \
    \          sums.RemoveAt(index);\n            nums.RemoveAt(index);\n        }\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ dict = new Dictionary<long, long>();\n        foreach (var num in nums) {\n\
    \            var sum = 0;\n            var n = num;\n            while (n != 0)\
    \ {\n                sum += n % 10;\n                n /= 10;\n            }\n\
    \            if (!dict.ContainsKey(sum)) {\n                dict[sum] = num;\n\
    \            }\n        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n\
    \        foreach (var key in keys) {\n            result.Add(dict[key]);\n   \
    \     }\n        return result;", "        // TODO: implement this function\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // TODO: implement this function\n        return null;", "        // TODO:\
    \ Implement this function\n        return null;", "        return nums.OrderBy(x\
    \ => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        var dict = new Dictionary<long,\
    \ long>();\n        for (int i = 0; i < nums.Count; i++) {\n            var sum\
    \ = 0;\n            var num = nums[i];\n            while (num != 0) {\n     \
    \           sum += num % 10;\n                num /= 10;\n            }\n    \
    \        dict[i] = sum;\n        }\n        var sorted = dict.OrderBy(x => x.Value).ToList();\n\
    \        var result = new List<long>();\n        foreach (var item in sorted)\
    \ {\n            result.Add(nums[(int)item.Key]);\n        }\n        return result;",
  "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var num in nums) {\n            var sum = 0;\n  \
    \          var n = num;\n            while (n != 0) {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = num;\n            }\n        }\n        var keys\
    \ = dict.Keys.ToList();\n        keys.Sort();\n        foreach (var key in keys)\
    \ {\n            result.Add(dict[key]);\n        }\n        return result;", " \
    \       return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return nums;", "        // your\
    \ code here\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // TODO: implement this function\n        return nums;", " \
    \       // Your code goes here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // Your code goes here\n        return nums;",
  "        // TODO: implement this function\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return null;", "        // TODO:\
    \ implement this function\n        return null;", "        // Your code goes here\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return nums;", "        // Write\
    \ your code here\n        return nums;", "        // your code here\n        return\
    \ nums;", "        // Your code goes here\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return null;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        List<long> result = new List<long>();\n        List<long> temp = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            temp.Add(nums[i]);\n\
    \        }\n        for (int i = 0; i < nums.Count; i++) {\n            long min\
    \ = temp[0];\n            int index = 0;\n            for (int j = 0; j < temp.Count;\
    \ j++) {\n                if (SumOfDigits(temp[j]) < SumOfDigits(min)) {\n   \
    \                 min = temp[j];\n                    index = j;\n           \
    \     }\n            }\n            result.Add(min);\n            temp.RemoveAt(index);\n\
    \        }\n        return result;", "        // Your code goes here\n       \
    \ return nums;", "        // TODO: implement this function\n        return nums;",
  "        // Write your code here\n        return nums;", "        // your code here\n\
    \        return nums;", "        // Write your code here\n        return nums;",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // TODO: implement\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       var dict = new Dictionary<long, long>();\n        var result = new List<long>();\n\
    \        for (int i = 0; i < nums.Count; i++) {\n            var sum = 0;\n  \
    \          var num = nums[i];\n            while (num != 0) {\n              \
    \  sum += num % 10;\n                num /= 10;\n            }\n            if\
    \ (!dict.ContainsKey(sum)) {\n                dict.Add(sum, i);\n            }\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            result.Add(nums[dict[key]]);\n\
    \        }\n        return result;", "        // TODO: Implement this function\n\
    \        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code here\n        return nums;", "        // TODO: Implement me!\n\
    \        return null;", "        // TODO: implement this function\n        return\
    \ nums;", "        // Your code goes here\n        return nums;", "        return\
    \ nums.OrderBy(x => x.ToString().Select(y => y - '0').Sum()).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", '        return nums.OrderBy(x
    => x.ToString().Select(y => (long)Char.GetNumericValue(y)).Sum()).ThenBy(x =>
    nums.IndexOf(x)).ToList();', "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ me\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\
    \ this function\n        return null;", "        // your code here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(c => c - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: Implement this function\n        return null;", "        // TODO:\
    \ Implement this function\n        return nums;", "        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum)) {\n \
    \               dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var res = new List<long>();\n        foreach (var key in dict.Keys.OrderBy(x\
    \ => x)) {\n            res.AddRange(dict[key]);\n        }\n        return res;",
  "        // TODO: implement this function\n        return nums;", "        // your\
    \ code here\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // Your code\
    \ here\n        return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Write your code here\n        return nums;", "        // write your\
    \ code here\n        return nums;", "        var result = new List<long>();\n\
    \        var dict = new Dictionary<long, long>();\n        for (int i = 0; i <\
    \ nums.Count; i++) {\n            var sum = SumDigits(nums[i]);\n            if\
    \ (!dict.ContainsKey(sum)) {\n                dict.Add(sum, 0);\n            }\n\
    \            dict[sum] += 1;\n        }\n        var keys = dict.Keys.ToList();\n\
    \        keys.Sort();\n        foreach (var key in keys) {\n            for (int\
    \ i = 0; i < dict[key]; i++) {\n                result.Add(key);\n           \
    \ }\n        }\n        return result;", "        // TODO: implement this function\n\
    \        return nums;", '        return nums;', "        // your code here\n \
    \       return nums;", "        // Your code goes here\n        return nums;",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // TODO: implement this function\n        return nums;", "        // TODO:\
    \ implement this function\n        return nums;", "        // Your code here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // Your code goes here\n        return nums;", "        // TODO: Implement\
    \ this function\n        return nums;", "        // TODO: Implement this function\n\
    \        return null;", "        return nums.OrderBy(x => x.ToString().Sum(y =>\
    \ y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        // TODO: implement\n\
    \        return nums;", "        // TODO: implement this function\n        return\
    \ nums;", "        var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ long>();\n        foreach (var num in nums) {\n            var sum = 0;\n  \
    \          var n = num;\n            while (n != 0) {\n                sum +=\
    \ n % 10;\n                n /= 10;\n            }\n            if (!dict.ContainsKey(sum))\
    \ {\n                dict[sum] = num;\n            }\n        }\n        var keys\
    \ = dict.Keys.ToList();\n        keys.Sort();\n        foreach (var key in keys)\
    \ {\n            result.Add(dict[key]);\n        }\n        return result;", " \
    \       var result = new List<long>();\n        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum)) {\n \
    \               dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var keys = dict.Keys.ToList();\n        keys.Sort();\n   \
    \     foreach (var key in keys) {\n            dict[key].Sort();\n           \
    \ result.AddRange(dict[key]);\n        }\n        return result;", "        return\
    \ nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", "        return nums.OrderBy(n\
    \ => n.ToString().Sum(c => c - '0')).ThenBy(n => nums.IndexOf(n)).ToList();"]
stop_tokens:
- "\n    }\n"
