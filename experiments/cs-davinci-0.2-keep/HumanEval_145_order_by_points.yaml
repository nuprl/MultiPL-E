name: HumanEval_145_order_by_points
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function which sorts the given list of integers\n  \
  \  // in ascending order according to the sum of their digits.\n    // Note: if\
  \ there are several items with similar sum of their digits,\n    // order them based\
  \ on their index in original list.\n    // For example:\n    // >>> order_by_points([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    // >>> order_by_points([]) ==\
  \ []\n    public static List<long> OrderByPoints(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new\
  \ List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new\
  \ List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n\
  \    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,\
  \ (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,\
  \ (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,\
  \ (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,\
  \ (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new\
  \ List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,\
  \ (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new\
  \ List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,\
  \ (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,\
  \ (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,\
  \ (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,\
  \ (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,\
  \ (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,\
  \ (long)6L}))));\n    }\n\n}\n"
completions: ["        // Your code here\n        return nums;", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // your code here\n        return nums;", "        // TODO: implement this\
    \ function\n        return nums;", "        // Your code goes here\n        return\
    \ nums;", "        // your code here\n        return nums;", "        // Write\
    \ your code here\n        return nums;", "        // your code goes here\n   \
    \     return nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y\
    \ - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        var dict = new Dictionary<long,\
    \ List<long>>();\n        for (int i = 0; i < nums.Count; i++) {\n           \
    \ var sum = SumDigits(nums[i]);\n            if (!dict.ContainsKey(sum)) {\n \
    \               dict[sum] = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n\
    \        }\n        var result = new List<long>();\n        foreach (var kvp in\
    \ dict.OrderBy(kvp => kvp.Key)) {\n            result.AddRange(kvp.Value);\n \
    \       }\n        return result;", "        return nums.OrderBy(x => x.ToString().Sum(y\
    \ => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();", "        return nums.OrderBy(x\
    \ => x.ToString().Sum(y => y - '0')).ThenBy(x => nums.IndexOf(x)).ToList();",
  "        // Your code goes here\n        return nums;", "        var dict = new\
    \ Dictionary<long, List<long>>();\n        for (int i = 0; i < nums.Count; i++)\
    \ {\n            var sum = 0;\n            var num = nums[i];\n            while\
    \ (num != 0) {\n                sum += num % 10;\n                num /= 10;\n\
    \            }\n            if (!dict.ContainsKey(sum)) {\n                dict[sum]\
    \ = new List<long>();\n            }\n            dict[sum].Add(nums[i]);\n  \
    \      }\n        var result = new List<long>();\n        foreach (var key in\
    \ dict.Keys.OrderBy(x => x)) {\n            result.AddRange(dict[key].OrderBy(x\
    \ => x));\n        }\n        return result;", "        // Your code goes here\n\
    \        return nums;", "        // your code here\n        return nums;", " \
    \       // TODO: implement this function\n        return null;", "        // your\
    \ code here\n        return nums;", "        // Your code goes here\n        return\
    \ nums;", "        return nums.OrderBy(x => x.ToString().Sum(y => y - '0')).ThenBy(x\
    \ => nums.IndexOf(x)).ToList();"]
stop_tokens:
- "\n    }\n"
