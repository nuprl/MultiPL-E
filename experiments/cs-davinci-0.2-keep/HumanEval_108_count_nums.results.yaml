language: cs
name: HumanEval_108_count_nums
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += Math.Abs(num % 10);\n                num = Math.Abs(num / 10);\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqgonr3cg.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpqgonr3cg.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786785
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n = -n / 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d073fe744865494a9eca4a2ebf016450>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => int.Parse(y.ToString())) > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] selector) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.I"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long num2 = num;\n
    \           if (num < 0) {\n                sum += num2 % 10;\n                num2
    /= 10;\n            }\n            while (num2 > 0) {\n                sum +=
    num2 % 10;\n                num2 /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d107b00b8d064711b66e5ee0dde35d60>:0
    \n"
  stdout: ''
  timestamp: 1659786789
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(n => n.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82a51c8c9ccb457ebbe73e89fe312be1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82a51c8c9ccb457ebbe73e89fe312be1>:0
    \n"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wk7udmp.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp9wk7udmp.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long i in arr) {\n            if (i > 0) {\n                count++;\n            }\n
    \           else if (i < 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf1ab8aac8f646e88ec1e0839f1d6e98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bf1ab8aac8f646e88ec1e0839f1d6e98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786791
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(c
    => c - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \n"
  stdout: ''
  timestamp: 1659786792
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Where(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0).Count();\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <68087bfe4ba242ed8ae80bb52329be65>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <68087bfe4ba242ed8ae80bb52329be65>:0
    \n  at System.Linq.Enumerable+WhereListIterator`1[TSource].GetCount (System.Boolean
    onlyIfCheap) [0x00018] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Count[TSource]
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00029] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00026]
    in <68087bfe4ba242ed8ae80bb52329be65>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <68087bfe4ba242ed8ae80bb52329be65>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b"
  stdout: ''
  timestamp: 1659786792
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += Math.Abs(num) % 10;\n                num = Math.Abs(num) / 10;\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl6lo4x6f.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpl6lo4x6f.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786792
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(c
    => c - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \n"
  stdout: ''
  timestamp: 1659786792
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(c
    => (long)c - (long)'0').Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73785e19a33a44d4aadfb5ccda0a17ed>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <73785e19a33a44d4aadfb5ccda0a17ed>:0
    \n"
  stdout: ''
  timestamp: 1659786793
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here.\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39bb2946bc244a45bbec90f3614090a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39bb2946bc244a45bbec90f3614090a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786793
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // TODO: Implement this function\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1e848060514520adcc34547e0867ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b1e848060514520adcc34547e0867ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786794
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long i in arr) {\n            if (i == 0) {\n                count++;\n            }
    else {\n                long sum = 0;\n                long num = i;\n                while
    (num != 0) {\n                    sum += num % 10;\n                    num /=
    10;\n                }\n                if (sum > 0) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9787966c52424e8ab2ce0eb6e221749d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9787966c52424e8ab2ce0eb6e221749d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786795
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            while
    (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14f01a3d745e4289a185f534825ce833>:0
    \n"
  stdout: ''
  timestamp: 1659786795
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            while
    (n != 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <14f01a3d745e4289a185f534825ce833>:0
    \n"
  stdout: ''
  timestamp: 1659786795
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90fe25fed1a24ced96021304af273b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90fe25fed1a24ced96021304af273b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786796
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += -num % 10;\n                num /= -10;\n            }\n            while (num
    > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsxfuto6.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmplsxfuto6.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786796
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => int.Parse(y.ToString())) > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] selector) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.I"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long i in arr) {\n            if (i < 0) {\n                i = i * -1;\n            }\n
    \           long sum = 0;\n            while (i > 0) {\n                sum +=
    i % 10;\n                i = i / 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5c5konk5.cs(20,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    /tmp/tmp5c5konk5.cs(25,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659786796
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            while
    (n != 0) {\n                sum += Math.Abs(n % 10);\n                n /= 10;\n
    \           }\n            if (sum > 0) {\n                count++;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0e550ad54324031b001a89e0d6b7074>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d0e550ad54324031b001a89e0d6b7074>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num * -1;\n            } else {\n                sum += num;\n            }\n
    \           while (sum > 0) {\n                sum -= sum % 10;\n                sum
    /= 10;\n            }\n            if (sum == 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7749b3efd71442f99d01f420b258e044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7749b3efd71442f99d01f420b258e044>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786797
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return 0;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90fe25fed1a24ced96021304af273b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90fe25fed1a24ced96021304af273b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786796
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(c
    => c - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \n"
  stdout: ''
  timestamp: 1659786792
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            if (num < 0) {\n                num = num * -1;\n
    \           }\n            long sum = 0;\n            while (num > 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5of8dmrr.cs(20,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp5of8dmrr.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(c
    => c - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <60cadcda68e84d229217b1ac5aecd553>:0
    \n"
  stdout: ''
  timestamp: 1659786792
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    num = arr[i];\n            if (num < 0) {\n                sum += num;\n                num
    = -num;\n            }\n            while (num > 0) {\n                sum +=
    num % 10;\n                num /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a451535941eb449599c5198fcdcf02b5>:0
    \n"
  stdout: ''
  timestamp: 1659786798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            while (num != 0) {\n
    \               sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2lu_788j.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    num = arr[i];\n            if (num < 0) {\n                sum += num;\n                num
    = -num;\n            }\n            while (num > 0) {\n                sum +=
    num % 10;\n                num /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a451535941eb449599c5198fcdcf02b5>:0
    \n"
  stdout: ''
  timestamp: 1659786798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            if (num == 0) {\n                count++;\n            }
    else {\n                long sum = 0;\n                long n = num;\n                while
    (n != 0) {\n                    sum += Math.Abs(n % 10);\n                    n
    /= 10;\n                }\n                if (sum > 0) {\n                    count++;\n
    \               }\n            }\n        }\n        return count;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>()))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L,
    (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69588f2795f94b3db819faa77def89fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <69588f2795f94b3db819faa77def89fc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786800
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            while (num
    > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9wk7udmp.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp9wk7udmp.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786790
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long i in arr) {\n            if (i < 0) {\n                i = i * -1;\n            }\n
    \           long sum = 0;\n            while (i > 0) {\n                sum +=
    i % 10;\n                i = i / 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5c5konk5.cs(20,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    /tmp/tmp5c5konk5.cs(25,17): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659786796
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num * -1;\n            } else {\n                sum += num;\n            }\n
    \           while (sum > 0) {\n                long digit = sum % 10;\n                sum
    /= 10;\n                sum += digit;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659786805
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            if (num > 0) {\n                count += 1;\n
    \           } else if (num < 0) {\n                count += 1;\n            }\n
    \       }\n        return count;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd17b34f0add427dbf460267263e3960>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dd17b34f0add427dbf460267263e3960>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786801
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            if (SumDigits(num) > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpveoyjrt_.cs(19,17): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659786802
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long num2 = num;\n
    \           while (num2 != 0) {\n                sum += num2 % 10;\n                num2
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <dadd7d0a59e746fdabe871c8350de254>:0
    \n"
  stdout: ''
  timestamp: 1659786803
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => int.Parse(y.ToString())) > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] selector) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <6e744bf4650f4a4b92d63b2dfe0ca6ab>:0
    \n  at System.Linq.Enumerable.Sum[TSource] (System.Collections.Generic.I"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num * -1;\n            } else {\n                sum += num;\n            }\n
    \           while (sum > 0) {\n                sum -= sum % 10;\n                sum
    /= 10;\n            }\n            if (sum != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d523dc7455b4182947d0ccb1ce5afc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d523dc7455b4182947d0ccb1ce5afc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    num = arr[i];\n            if (num < 0) {\n                sum += num;\n                num
    = -num;\n            }\n            while (num > 0) {\n                sum +=
    num % 10;\n                num /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a451535941eb449599c5198fcdcf02b5>:0
    \n"
  stdout: ''
  timestamp: 1659786798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += Math.Abs(num) % 10;\n                num = Math.Abs(num) / 10;\n            }\n
    \           while (num > 0) {\n                sum += num % 10;\n                num
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl6lo4x6f.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpl6lo4x6f.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786792
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    num = arr[i];\n            if (num < 0) {\n                sum += num;\n                num
    = -num;\n            }\n            while (num > 0) {\n                sum +=
    num % 10;\n                num /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a451535941eb449599c5198fcdcf02b5>:0
    \n"
  stdout: ''
  timestamp: 1659786798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // TODO: implement this function\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f91608007f7742a4830dabfb7bf87ae7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f91608007f7742a4830dabfb7bf87ae7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786805
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long n in arr) {\n            long sum = 0;\n            if (n < 0) {\n                sum
    += n % 10;\n                n /= 10;\n            }\n            while (n > 0)
    {\n                sum += n % 10;\n                n /= 10;\n            }\n            if
    (sum > 0) {\n                count++;\n            }\n        }\n        return
    count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3skjrcqf.cs(22,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    /tmp/tmp3skjrcqf.cs(26,17): error CS1656: Cannot assign to ''n'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659786806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here.\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39bb2946bc244a45bbec90f3614090a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39bb2946bc244a45bbec90f3614090a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786793
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += Math.Abs(num) % 10;\n                num = -(num / 10);\n            }\n            while
    (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ptq5dr1.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp2ptq5dr1.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786806
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            if (num < 0) {\n                num = -num;\n
    \           }\n            long sum = 0;\n            while (num > 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8x5xc5b.cs(20,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpk8x5xc5b.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num % 10;\n                num = -num / 10;\n            }\n            while
    (num > 0) {\n                sum += num % 10;\n                num /= 10;\n            }\n
    \           if (sum > 0) {\n                count++;\n            }\n        }\n
    \       return count;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgpeekxw8.cs(22,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmpgpeekxw8.cs(26,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786807
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here.\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39bb2946bc244a45bbec90f3614090a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <39bb2946bc244a45bbec90f3614090a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786793
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    num = arr[i];\n            if (num < 0) {\n                sum += num % 10;\n
    \               num /= 10;\n            }\n            while (num > 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ca5d39ecc4ca4ff99d83a00515d6a1eb>:0
    \n"
  stdout: ''
  timestamp: 1659786808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num * -1;\n            } else {\n                sum += num;\n            }\n
    \           while (sum > 0) {\n                sum -= sum % 10;\n                sum
    /= 10;\n            }\n            if (sum != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d523dc7455b4182947d0ccb1ce5afc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d523dc7455b4182947d0ccb1ce5afc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // TODO: Implement me!\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9737bca0061e4d1bb6b1ed30b6c9e8fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9737bca0061e4d1bb6b1ed30b6c9e8fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786808
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            if (num < 0) {\n                num = num * -1;\n
    \           }\n            long sum = 0;\n            while (num > 0) {\n                sum
    += num % 10;\n                num /= 10;\n            }\n            if (sum >
    0) {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5of8dmrr.cs(20,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    /tmp/tmp5of8dmrr.cs(25,17): error CS1656: Cannot assign to ''num'' because it
    is a ''foreach iteration variable''

    '
  timestamp: 1659786798
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => long.Parse(y.ToString())).Sum() > 0);\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable+SelectEnumerableIterator`2[TSource,TResult].MoveNext
    () [0x00048] in <e540098dd111461e919c5863f6975c29>:0 \n  at System.Linq.Enumerable.Sum
    (System.Collections.Generic.IEnumerable`1[T] source) [0x00025] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem+<>c.<CountNums>b__0_0 (System.Int64 x) [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0
    \n  at System.Linq.Enumerable.Count[TSource] (System.Collections.Generic.IEnumerable`1[T]
    source, System.Func`2[T,TResult] predicate) [0x0002e] in <e540098dd111461e919c5863f6975c29>:0
    \n  at Problem.CountNums (System.Collections.Generic.List`1[T] arr) [0x00001]
    in <349169c70aca47fa89f9f438d4b63b3e>:0 \n  at Problem.Main (System.String[] args)
    [0x0002b] in <349169c70aca47fa89f9f438d4b63b3e>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.FormatException: Input string was not in a correct format.\n  at System.Number.ThrowOverflowOrFormatException
    (System.Boolean overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem+<>c.<CountNums>b__0_1 (System.Char y) [0x00007] in <349169c70aca47fa"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(n => n.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82a51c8c9ccb457ebbe73e89fe312be1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <82a51c8c9ccb457ebbe73e89fe312be1>:0
    \n"
  stdout: ''
  timestamp: 1659786790
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Select(y
    => y - '0').Sum() > 0);\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(CountNums((new List<long>())) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)-1L, (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L,
    (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e5f06f54501d4e0dad35216032de3bcb>:0
    \n"
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += -n % 10;\n                n = -n / 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <985713c307a24fa6a3621ae9d51788af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <985713c307a24fa6a3621ae9d51788af>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(c
    => c - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c986b13623b5434cb4e361a3250e03bc>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        for
    (int i = 0; i < arr.Count; i++) {\n            long sum = 0;\n            long
    num = arr[i];\n            if (num < 0) {\n                sum += num;\n                num
    = -num;\n            }\n            while (num > 0) {\n                sum +=
    num % 10;\n                num /= 10;\n            }\n            if (sum > 0)
    {\n                count++;\n            }\n        }\n        return count;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a451535941eb449599c5198fcdcf02b5>:0
    \n"
  stdout: ''
  timestamp: 1659786798
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long i in arr) {\n            if (i < 0) {\n                if (i.ToString().Length
    == 1) {\n                    count++;\n                } else {\n                    count++;\n
    \                   i = i * -1;\n                }\n            }\n            long
    sum = 0;\n            foreach (char c in i.ToString()) {\n                sum
    += long.Parse(c.ToString());\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf1b09o0u.cs(24,21): error CS1656: Cannot assign to ''i'' because it is
    a ''foreach iteration variable''

    '
  timestamp: 1659786809
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            long n = num;\n            if
    (n < 0) {\n                sum += n % 10;\n                n /= 10;\n            }\n
    \           while (n > 0) {\n                sum += n % 10;\n                n
    /= 10;\n            }\n            if (sum > 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5862413b50a4443ae6b5c73fd915de5>:0
    \n"
  stdout: ''
  timestamp: 1659786788
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        long count = 0;\n        foreach
    (long num in arr) {\n            long sum = 0;\n            if (num < 0) {\n                sum
    += num * -1;\n            } else {\n                sum += num;\n            }\n
    \           while (sum > 0) {\n                sum -= sum % 10;\n                sum
    /= 10;\n            }\n            if (sum != 0) {\n                count++;\n
    \           }\n        }\n        return count;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(CountNums((new List<long>())) == (0L));\n
    \   Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L, (long)-2L, (long)0L})))
    == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)1L,
    (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L}))) == (6L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)6L, (long)9L, (long)-6L, (long)0L, (long)1L,
    (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L,
    (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L}))) == (4L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)12L, (long)23L, (long)34L, (long)-45L, (long)-56L,
    (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)0L,
    (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L})))
    == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d523dc7455b4182947d0ccb1ce5afc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9d523dc7455b4182947d0ccb1ce5afc6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786804
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        return arr.Count(x => x.ToString().Sum(y
    => y - '0') > 0);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b3911ef7bb84db186c24813e786d737>:0
    \n"
  stdout: ''
  timestamp: 1659786787
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code goes here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8e031e8e92bf43b59c78eee22581b734>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786799
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // Your code here\n        return
    0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0053b2578714468b836e6ec3c76ec50a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786786
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function count_nums which takes an array of integers
    and returns\n    // the number of elements which has a sum of digits > 0.\n    //
    If a number is negative, then its first signed digit will be negative:\n    //
    e.g. -123 has signed digits -1, 2, and 3.\n    // >>> count_nums([]) == 0\n    //
    >>> count_nums([-1, 11, -11]) == 1\n    // >>> count_nums([1, 1, 2]) == 3\n    public
    static long CountNums(List<long> arr) {\n        // TODO: implement this function\n
    \       return 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(CountNums((new
    List<long>())) == (0L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)-1L,
    (long)-2L, (long)0L}))) == (0L));\n    Debug.Assert(CountNums((new List<long>(new
    long[]{(long)1L, (long)1L, (long)2L, (long)-2L, (long)3L, (long)4L, (long)5L})))
    == (6L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)1L, (long)6L,
    (long)9L, (long)-6L, (long)0L, (long)1L, (long)5L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L, (long)100L, (long)98L, (long)-7L, (long)1L, (long)-1L})))
    == (4L));\n    Debug.Assert(CountNums((new List<long>(new long[]{(long)12L, (long)23L,
    (long)34L, (long)-45L, (long)-56L, (long)0L}))) == (5L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)0L, (long)1L}))) == (1L));\n    Debug.Assert(CountNums((new
    List<long>(new long[]{(long)1L}))) == (1L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f91608007f7742a4830dabfb7bf87ae7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f91608007f7742a4830dabfb7bf87ae7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659786805
