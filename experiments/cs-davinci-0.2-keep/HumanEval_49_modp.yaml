name: HumanEval_49_modp
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return 2^n modulo p (be aware of numerics).\n    // >>> modp(3,\
  \ 5)\n    // 3\n    // >>> modp(1101, 101)\n    // 2\n    // >>> modp(0, 101)\n\
  \    // 1\n    // >>> modp(3, 11)\n    // 8\n    // >>> modp(100, 101)\n    // 1\n\
  \    public static long Modp(long n, long p) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Modp((3L),\
  \ (5L)) == (3L));\n    Debug.Assert(Modp((1101L), (101L)) == (2L));\n    Debug.Assert(Modp((0L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((3L), (11L)) == (8L));\n    Debug.Assert(Modp((100L),\
  \ (101L)) == (1L));\n    Debug.Assert(Modp((30L), (5L)) == (4L));\n    Debug.Assert(Modp((31L),\
  \ (5L)) == (3L));\n    }\n\n}\n"
completions: ["        if (n == 0) {\n            return 1;\n        }\n        if\
    \ (n % 2 == 0) {\n            return Modp(n / 2, p) * Modp(n / 2, p) % p;\n  \
    \      }\n        return Modp(n - 1, p) * Modp(1, p) % p;", "        if (n ==\
    \ 0) {\n            return 1;\n        }\n        long r = Modp(n / 2, p);\n \
    \       r = (r * r) % p;\n        if (n % 2 == 1) {\n            r = (r * 2) %\
    \ p;\n        }\n        return r;", "        if (n == 0) return 1;\n        if\
    \ (n == 1) return n;\n        if (n % 2 == 0) {\n            long x = Modp(n /\
    \ 2, p);\n            return (x * x) % p;\n        } else {\n            return\
    \ (n * Modp(n - 1, p)) % p;\n        }", "        if (n == 0) {\n            return\
    \ 1;\n        }\n        if (n % 2 == 0) {\n            return Modp(n / 2, p)\
    \ * Modp(n / 2, p) % p;\n        }\n        return Modp(n - 1, p) * Modp(1, p)\
    \ % p;", "        if (n == 0) return 1;\n        if (n == 1) return n;\n     \
    \   long half = Modp(n / 2, p);\n        long result = (half * half) % p;\n  \
    \      if (n % 2 == 1) result = (result * n) % p;\n        return result;", " \
    \       if (n == 0) return 1;\n        if (n == 1) return n;\n        if (n %\
    \ 2 == 0) {\n            long x = Modp(n / 2, p);\n            return (x * x)\
    \ % p;\n        } else {\n            return (n * Modp(n - 1, p)) % p;\n     \
    \   }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n          \
    \  long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else {\n\
    \            return (Modp(n - 1, p) * n) % p;\n        }", "        if (n == 0)\
    \ return 1;\n        if (n == 1) return n;\n        long half = Modp(n / 2, p);\n\
    \        long result = half * half % p;\n        if (n % 2 == 1) result = result\
    \ * n % p;\n        return result;", "        if (n == 0) return 1;\n        if\
    \ (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t\
    \ * t) % p;\n        } else {\n            return (Modp(n - 1, p) * n) % p;\n\
    \        }", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n     \
    \       long x = Modp(n / 2, p);\n            return (x * x) % p;\n        } else\
    \ {\n            return (Modp(n - 1, p) * n) % p;\n        }", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        if (n == 1) {\n         \
    \   return n;\n        }\n        if (n % 2 == 0) {\n            return Modp(n\
    \ / 2, p) * Modp(n / 2, p) % p;\n        }\n        return Modp(n / 2, p) * Modp(n\
    \ / 2, p) * n % p;", "        if (n == 0) return 1;\n        if (n == 1) return\
    \ n;\n        if (n % 2 == 0) {\n            long m = Modp(n / 2, p);\n      \
    \      return (m * m) % p;\n        } else {\n            return (n * Modp(n -\
    \ 1, p)) % p;\n        }", "        if (n == 0) {\n            return 1;\n   \
    \     }\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n   \
    \         return (t * t) % p;\n        }\n        return (Modp(n - 1, p) * n)\
    \ % p;", "        if (n == 0) return 1;\n        if (n % 2 == 0) {\n         \
    \   long t = Modp(n / 2, p);\n            return (t * t) % p;\n        } else\
    \ {\n            return (2 * Modp(n - 1, p)) % p;\n        }", "        if (n\
    \ == 0) {\n            return 1;\n        }\n        long result = Modp(n / 2,\
    \ p);\n        result = (result * result) % p;\n        if (n % 2 == 1) {\n  \
    \          result = (result * 2) % p;\n        }\n        return result;", " \
    \       if (n == 0) return 1;\n        if (n == 1) return n;\n        if (n %\
    \ 2 == 0) {\n            long t = Modp(n / 2, p);\n            return (t * t)\
    \ % p;\n        }\n        return (n * Modp(n - 1, p)) % p;", "        if (n ==\
    \ 0) return 1;\n        if (n % 2 == 0) {\n            long t = Modp(n / 2, p);\n\
    \            return (t * t) % p;\n        } else {\n            return (Modp(n\
    \ - 1, p) * n) % p;\n        }", "        if (n == 0) return 1;\n        long\
    \ res = Modp(n / 2, p);\n        res = (res * res) % p;\n        if (n % 2 ==\
    \ 1) res = (res * 2) % p;\n        return res;", "        long res = 1;\n    \
    \    while (n > 0) {\n            if ((n & 1) == 1) {\n                res = (res\
    \ * 2) % p;\n            }\n            n >>= 1;\n        }\n        return res;",
  "        if (n == 0) {\n            return 1;\n        }\n        if (n % 2 == 0)\
    \ {\n            long t = Modp(n / 2, p);\n            return (t * t) % p;\n \
    \       }\n        return (Modp(n - 1, p) * n) % p;"]
stop_tokens:
- "\n    }\n"
