name: HumanEval_105_by_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    // reverse the resulting array, and then replace each\
  \ digit by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\"\
  , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    //\
  \ arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n    // -> sort arr -> [1, 1, 2, 2, 3, 4, 5,\
  \ 8] \n    // -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    // return [\"Eight\"\
  , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    // If\
  \ the array is empty, return an empty array:\n    // arr = []\n    // return []\n\
  \    // If the array has any strange number ignore it:\n    // arr = [1, -1 , 55]\
  \ \n    // -> sort arr -> [-1, 1, 55]\n    // -> reverse arr -> [55, 1, -1]\n  \
  \  // return = ['One']\n    public static List<string> ByLength(List<long> arr)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
  \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
  \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
  , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
  Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
  \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
  \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
  }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
  , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
  \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
  Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
completions: ["        // Your code goes here\n        return null;", "        //\
    \ Your code here\n        return null;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n\
    \                result.Add(\"One\");\n            }\n            if (arr[i] ==\
    \ 2) {\n                result.Add(\"Two\");\n            }\n            if (arr[i]\
    \ == 3) {\n                result.Add(\"Three\");\n            }\n           \
    \ if (arr[i] == 4) {\n                result.Add(\"Four\");\n            }\n \
    \           if (arr[i] == 5) {\n                result.Add(\"Five\");\n      \
    \      }\n            if (arr[i] == 6) {\n                result.Add(\"Six\");\n\
    \            }\n            if (arr[i] == 7) {\n                result.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;", "        // Your\
    \ code here\n        return null;", "        List<string> result = new List<string>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == 1) {\n\
    \                result.Add(\"One\");\n            }\n            if (arr[i] ==\
    \ 2) {\n                result.Add(\"Two\");\n            }\n            if (arr[i]\
    \ == 3) {\n                result.Add(\"Three\");\n            }\n           \
    \ if (arr[i] == 4) {\n                result.Add(\"Four\");\n            }\n \
    \           if (arr[i] == 5) {\n                result.Add(\"Five\");\n      \
    \      }\n            if (arr[i] == 6) {\n                result.Add(\"Six\");\n\
    \            }\n            if (arr[i] == 7) {\n                result.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;", "        var result\
    \ = new List<string>();\n        var sorted = arr.OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   if (item >= 1 && item <= 9) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        return result;", '        return arr.Where(x
    => x >= 1 && x <= 9).OrderBy(x => x).Reverse().Select(x => x.ToString()).ToList();',
  "        // Write your code here\n        return null;", "        List<string> result\
    \ = new List<string>();\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       if (arr[i] == 1) {\n                result.Add(\"One\");\n           \
    \ }\n            if (arr[i] == 2) {\n                result.Add(\"Two\");\n  \
    \          }\n            if (arr[i] == 3) {\n                result.Add(\"Three\"\
    );\n            }\n            if (arr[i] == 4) {\n                result.Add(\"\
    Four\");\n            }\n            if (arr[i] == 5) {\n                result.Add(\"\
    Five\");\n            }\n            if (arr[i] == 6) {\n                result.Add(\"\
    Six\");\n            }\n            if (arr[i] == 7) {\n                result.Add(\"\
    Seven\");\n            }\n            if (arr[i] == 8) {\n                result.Add(\"\
    Eight\");\n            }\n            if (arr[i] == 9) {\n                result.Add(\"\
    Nine\");\n            }\n        }\n        return result;", "        var result\
    \ = new List<string>();\n        var sorted = arr.OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   if (item > 0 && item < 10) {\n                result.Add(item.ToString());\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        arr.Sort();\n        arr.Reverse();\n        foreach (long\
    \ num in arr) {\n            if (num < 1 || num > 9) {\n                continue;\n\
    \            }\n            switch (num) {\n                case 1:\n        \
    \            result.Add(\"One\");\n                    break;\n              \
    \  case 2:\n                    result.Add(\"Two\");\n                    break;\n\
    \                case 3:\n                    result.Add(\"Three\");\n       \
    \             break;\n                case 4:\n                    result.Add(\"\
    Four\");\n                    break;\n                case 5:\n              \
    \      result.Add(\"Five\");\n                    break;\n                case\
    \ 6:\n                    result.Add(\"Six\");\n                    break;\n \
    \               case 7:\n                    result.Add(\"Seven\");\n        \
    \            break;\n                case 8:\n                    result.Add(\"\
    Eight\");\n                    break;\n                case 9:\n             \
    \       result.Add(\"Nine\");\n                    break;\n            }\n   \
    \     }\n        return result;", "        var result = new List<string>();\n\
    \        var map = new Dictionary<long, string>() {\n            {1, \"One\"},\n\
    \            {2, \"Two\"},\n            {3, \"Three\"},\n            {4, \"Four\"\
    },\n            {5, \"Five\"},\n            {6, \"Six\"},\n            {7, \"\
    Seven\"},\n            {8, \"Eight\"},\n            {9, \"Nine\"}\n        };\n\
    \        arr.Sort();\n        arr.Reverse();\n        foreach (var item in arr)\
    \ {\n            if (map.ContainsKey(item)) {\n                result.Add(map[item]);\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (arr.Count == 0) {\n            return result;\n\
    \        }\n        List<long> sorted = arr.OrderBy(x => x).ToList();\n      \
    \  sorted.Reverse();\n        foreach (long num in sorted) {\n            if (num\
    \ >= 1 && num <= 9) {\n                result.Add(NumberToString(num));\n    \
    \        }\n        }\n        return result;", "        // Your code here\n \
    \       return null;", "        // your code here\n        List<string> result\
    \ = new List<string>();\n        if (arr.Count == 0)\n        {\n            return\
    \ result;\n        }\n        arr.Sort();\n        arr.Reverse();\n        foreach\
    \ (long num in arr)\n        {\n            if (num > 0 && num < 10)\n       \
    \     {\n                switch (num)\n                {\n                   \
    \ case 1:\n                        result.Add(\"One\");\n                    \
    \    break;\n                    case 2:\n                        result.Add(\"\
    Two\");\n                        break;\n                    case 3:\n       \
    \                 result.Add(\"Three\");\n                        break;\n   \
    \                 case 4:\n                        result.Add(\"Four\");\n   \
    \                     break;\n                    case 5:\n                  \
    \      result.Add(\"Five\");\n                        break;\n               \
    \     case 6:\n                        result.Add(\"Six\");\n                \
    \        break;\n                    case 7:\n                        result.Add(\"\
    Seven\");\n                        break;\n                    case 8:\n     \
    \                   result.Add(\"Eight\");\n                        break;\n \
    \                   case 9:\n                        result.Add(\"Nine\");\n \
    \                       break;\n                }\n            }\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  arr.Sort();\n        arr.Reverse();\n        foreach (long num in arr) {\n\
    \            if (num >= 1 && num <= 9) {\n                switch (num) {\n   \
    \                 case 1:\n                        result.Add(\"One\");\n    \
    \                    break;\n                    case 2:\n                   \
    \     result.Add(\"Two\");\n                        break;\n                 \
    \   case 3:\n                        result.Add(\"Three\");\n                \
    \        break;\n                    case 4:\n                        result.Add(\"\
    Four\");\n                        break;\n                    case 5:\n      \
    \                  result.Add(\"Five\");\n                        break;\n   \
    \                 case 6:\n                        result.Add(\"Six\");\n    \
    \                    break;\n                    case 7:\n                   \
    \     result.Add(\"Seven\");\n                        break;\n               \
    \     case 8:\n                        result.Add(\"Eight\");\n              \
    \          break;\n                    case 9:\n                        result.Add(\"\
    Nine\");\n                        break;\n                }\n            }\n \
    \       }\n        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (long i in arr) {\n            if (i == 1) {\n              \
    \  result.Add(\"One\");\n            }\n            if (i == 2) {\n          \
    \      result.Add(\"Two\");\n            }\n            if (i == 3) {\n      \
    \          result.Add(\"Three\");\n            }\n            if (i == 4) {\n\
    \                result.Add(\"Four\");\n            }\n            if (i == 5)\
    \ {\n                result.Add(\"Five\");\n            }\n            if (i ==\
    \ 6) {\n                result.Add(\"Six\");\n            }\n            if (i\
    \ == 7) {\n                result.Add(\"Seven\");\n            }\n           \
    \ if (i == 8) {\n                result.Add(\"Eight\");\n            }\n     \
    \       if (i == 9) {\n                result.Add(\"Nine\");\n            }\n\
    \        }\n        return result;", "        var result = new List<string>();\n\
    \        foreach (var item in arr) {\n            if (item == 1) {\n         \
    \       result.Add(\"One\");\n            } else if (item == 2) {\n          \
    \      result.Add(\"Two\");\n            } else if (item == 3) {\n           \
    \     result.Add(\"Three\");\n            } else if (item == 4) {\n          \
    \      result.Add(\"Four\");\n            } else if (item == 5) {\n          \
    \      result.Add(\"Five\");\n            } else if (item == 6) {\n          \
    \      result.Add(\"Six\");\n            } else if (item == 7) {\n           \
    \     result.Add(\"Seven\");\n            } else if (item == 8) {\n          \
    \      result.Add(\"Eight\");\n            } else if (item == 9) {\n         \
    \       result.Add(\"Nine\");\n            }\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        List<long> sorted =\
    \ new List<long>();\n        List<long> reversed = new List<long>();\n       \
    \ List<string> names = new List<string>();\n        names.Add(\"One\");\n    \
    \    names.Add(\"Two\");\n        names.Add(\"Three\");\n        names.Add(\"\
    Four\");\n        names.Add(\"Five\");\n        names.Add(\"Six\");\n        names.Add(\"\
    Seven\");\n        names.Add(\"Eight\");\n        names.Add(\"Nine\");\n     \
    \   for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] >= 1 && arr[i]\
    \ <= 9) {\n                sorted.Add(arr[i]);\n            }\n        }\n   \
    \     sorted.Sort();\n        for (int i = sorted.Count - 1; i >= 0; i--) {\n\
    \            reversed.Add(sorted[i]);\n        }\n        for (int i = 0; i <\
    \ reversed.Count; i++) {\n            result.Add(names[(int)reversed[i] - 1]);\n\
    \        }\n        return result;", "        // Write your code here\n      \
    \  return new List<string>();"]
stop_tokens:
- "\n    }\n"
