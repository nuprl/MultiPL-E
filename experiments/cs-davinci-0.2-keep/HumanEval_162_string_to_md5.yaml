name: HumanEval_162_string_to_md5
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string 'text', return its md5 hash equivalent string.\n\
  \    // If 'text' is an empty string, return None.\n    // >>> string_to_md5('Hello\
  \ world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    public static string StringToMd5(string\
  \ text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(StringToMd5((\"\
  Hello world\")).Equals((\"3e25960a79dbc69b674cd4ec67a72c62\")));\n    Debug.Assert(StringToMd5((\"\
  \")).Equals(null));\n    Debug.Assert(StringToMd5((\"A B C\")).Equals((\"0ef78513b0cb8cef12743f5aeb35f888\"\
  )));\n    Debug.Assert(StringToMd5((\"password\")).Equals((\"5f4dcc3b5aa765d61d8327deb882cf99\"\
  )));\n    }\n\n}\n"
completions: ["        if (text == \"\") {\n            return null;\n        }\n\
    \        using (var md5 = MD5.Create()) {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n\
    \            var hashBytes = md5.ComputeHash(inputBytes);\n            var sb\
    \ = new StringBuilder();\n            foreach (var hashByte in hashBytes) {\n\
    \                sb.Append(hashByte.ToString(\"X2\"));\n            }\n      \
    \      return sb.ToString();\n        }", "        if (text == \"\") {\n     \
    \       return null;\n        }\n        MD5 md5 = MD5.Create();\n        byte[]\
    \ inputBytes = System.Text.Encoding.ASCII.GetBytes(text);\n        byte[] hash\
    \ = md5.ComputeHash(inputBytes);\n        StringBuilder sb = new StringBuilder();\n\
    \        for (int i = 0; i < hash.Length; i++) {\n            sb.Append(hash[i].ToString(\"\
    X2\"));\n        }\n        return sb.ToString();", "        if (text == \"\"\
    ) {\n            return null;\n        }\n        using (var md5 = MD5.Create())\
    \ {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n           \
    \ var hashBytes = md5.ComputeHash(inputBytes);\n            var sb = new StringBuilder();\n\
    \            foreach (var hashByte in hashBytes) {\n                sb.Append(hashByte.ToString(\"\
    X2\"));\n            }\n            return sb.ToString();\n        }", "     \
    \   if (text == \"\") {\n            return null;\n        }\n        using (var\
    \ md5 = MD5.Create()) {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n\
    \            var hashBytes = md5.ComputeHash(inputBytes);\n            var sb\
    \ = new StringBuilder();\n            foreach (var hashByte in hashBytes) {\n\
    \                sb.Append(hashByte.ToString(\"X2\"));\n            }\n      \
    \      return sb.ToString();\n        }", "        if (text == \"\") {\n     \
    \       return null;\n        }\n        using (var md5 = MD5.Create()) {\n  \
    \          var inputBytes = Encoding.ASCII.GetBytes(text);\n            var hashBytes\
    \ = md5.ComputeHash(inputBytes);\n            var sb = new StringBuilder();\n\
    \            foreach (var hashByte in hashBytes) {\n                sb.Append(hashByte.ToString(\"\
    X2\"));\n            }\n            return sb.ToString();\n        }", "     \
    \   if (text == \"\") {\n            return null;\n        }\n        using (var\
    \ md5 = MD5.Create()) {\n            byte[] hash = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n\
    \            return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\
    \        }", "        if (text == \"\") {\n            return null;\n        }\n\
    \        using (var md5 = MD5.Create()) {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n\
    \            var hashBytes = md5.ComputeHash(inputBytes);\n            var sb\
    \ = new StringBuilder();\n            foreach (var hashByte in hashBytes) {\n\
    \                sb.Append(hashByte.ToString(\"X2\"));\n            }\n      \
    \      return sb.ToString();\n        }", "        if (text == \"\") {\n     \
    \       return null;\n        }\n        using (var md5 = MD5.Create()) {\n  \
    \          var bytes = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n      \
    \      var sb = new StringBuilder();\n            foreach (var b in bytes) {\n\
    \                sb.Append(b.ToString(\"x2\"));\n            }\n            return\
    \ sb.ToString();\n        }", "        if (text == \"\") {\n            return\
    \ null;\n        }\n        using (var md5 = MD5.Create()) {\n            var\
    \ inputBytes = Encoding.ASCII.GetBytes(text);\n            var hashBytes = md5.ComputeHash(inputBytes);\n\
    \            var sb = new StringBuilder();\n            foreach (var hashByte\
    \ in hashBytes) {\n                sb.Append(hashByte.ToString(\"X2\"));\n   \
    \         }\n            return sb.ToString();\n        }", "        if (text\
    \ == \"\") {\n            return null;\n        }\n        using (var md5 = MD5.Create())\
    \ {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n           \
    \ var hashBytes = md5.ComputeHash(inputBytes);\n            var sb = new StringBuilder();\n\
    \            foreach (var hashByte in hashBytes) {\n                sb.Append(hashByte.ToString(\"\
    X2\"));\n            }\n            return sb.ToString();\n        }", "     \
    \   if (text == \"\") {\n            return null;\n        }\n        using (var\
    \ md5 = MD5.Create()) {\n            var hash = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n\
    \            return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\
    \        }", "        if (text == \"\") {\n            return null;\n        }\n\
    \        using (var md5 = MD5.Create()) {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n\
    \            var hashBytes = md5.ComputeHash(inputBytes);\n            var sb\
    \ = new StringBuilder();\n            foreach (var hashByte in hashBytes) {\n\
    \                sb.Append(hashByte.ToString(\"X2\"));\n            }\n      \
    \      return sb.ToString();\n        }", "        if (text == \"\") return null;\n\
    \        using (var md5 = MD5.Create()) {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n\
    \            var hashBytes = md5.ComputeHash(inputBytes);\n            var sb\
    \ = new StringBuilder();\n            for (int i = 0; i < hashBytes.Length; i++)\
    \ {\n                sb.Append(hashBytes[i].ToString(\"X2\"));\n            }\n\
    \            return sb.ToString();\n        }", "        if (text == \"\") {\n\
    \            return null;\n        }\n        using (var md5 = MD5.Create()) {\n\
    \            var hash = md5.ComputeHash(Encoding.ASCII.GetBytes(text));\n    \
    \        return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\
    \        }", "        if (text == \"\") {\n            return null;\n        }\n\
    \        MD5 md5 = new MD5CryptoServiceProvider();\n        byte[] data = Encoding.ASCII.GetBytes(text);\n\
    \        byte[] hash = md5.ComputeHash(data);\n        return BitConverter.ToString(hash).Replace(\"\
    -\", \"\").ToLower();", "        if (text == \"\") {\n            return null;\n\
    \        }\n        using (var md5 = MD5.Create()) {\n            var inputBytes\
    \ = Encoding.ASCII.GetBytes(text);\n            var hashBytes = md5.ComputeHash(inputBytes);\n\
    \            var sb = new StringBuilder();\n            foreach (var hashByte\
    \ in hashBytes) {\n                sb.Append(hashByte.ToString(\"X2\"));\n   \
    \         }\n            return sb.ToString();\n        }", "        if (text\
    \ == \"\") {\n            return null;\n        }\n        var md5 = MD5.Create();\n\
    \        var hash = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n        return\
    \ BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();", "        if (string.IsNullOrEmpty(text))\
    \ {\n            return null;\n        }\n        using (var md5 = MD5.Create())\
    \ {\n            byte[] hash = md5.ComputeHash(Encoding.UTF8.GetBytes(text));\n\
    \            return BitConverter.ToString(hash).Replace(\"-\", \"\").ToLower();\n\
    \        }", "        if (text == \"\") {\n            return null;\n        }\n\
    \        using (var md5 = MD5.Create()) {\n            var inputBytes = Encoding.ASCII.GetBytes(text);\n\
    \            var hashBytes = md5.ComputeHash(inputBytes);\n            var sb\
    \ = new StringBuilder();\n            foreach (var hashByte in hashBytes) {\n\
    \                sb.Append(hashByte.ToString(\"X2\"));\n            }\n      \
    \      return sb.ToString();\n        }", "        if (text == \"\") {\n     \
    \       return null;\n        }\n        using (var md5 = MD5.Create()) {\n  \
    \          var inputBytes = Encoding.ASCII.GetBytes(text);\n            var hashBytes\
    \ = md5.ComputeHash(inputBytes);\n            var sb = new StringBuilder();\n\
    \            foreach (var hashByte in hashBytes) {\n                sb.Append(hashByte.ToString(\"\
    X2\"));\n            }\n            return sb.ToString();\n        }"]
stop_tokens:
- "\n    }\n"
